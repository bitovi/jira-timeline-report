function _mergeNamespaces(n, m) {
	m.forEach(function (e) {
		e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
			if (k !== 'default' && !(k in n)) {
				var d = Object.getOwnPropertyDescriptor(e, k);
				Object.defineProperty(n, k, d.get ? d : {
					enumerable: true,
					get: function () { return e[k]; }
				});
			}
		});
	});
	return Object.freeze(n);
}

(function(global,env){// jshint ignore:line
if(typeof process==="undefined"){global.process={argv:[],cwd:function(){return "";},browser:true,env:{NODE_ENV:env},version:"",platform:global.navigator&&global.navigator.userAgent&&/Windows/.test(global.navigator.userAgent)?"win":""};}})(typeof self=="object"&&self.Object==Object?self:typeof process==="object"&&Object.prototype.toString.call(process)==="[object process]"?global:window,"development");var canNamespace_1_0_0_canNamespace={};var supportsNativeSymbols=function(){var symbolExists=typeof Symbol!=="undefined"&&typeof Symbol.for==="function";if(!symbolExists){return false;}var symbol=Symbol("a symbol for testing symbols");return typeof symbol==="symbol";}();var CanSymbol;if(supportsNativeSymbols){CanSymbol=Symbol;}else {var symbolNum=0;CanSymbol=function CanSymbolPolyfill(description){var symbolValue="@@symbol"+symbolNum++ +description;var symbol={};// make it object type
Object.defineProperties(symbol,{toString:{value:function(){return symbolValue;}}});return symbol;};var descriptionToSymbol={};var symbolToDescription={};/**
	 * @function can-symbol.for for
	 * @parent  can-symbol/methods
	 * @description  Get a symbol based on a known string identifier, or create it if it doesn't exist.
	 *
	 * @signature `canSymbol.for(String)`
	 *
	 * @param { String } description  The string value of the symbol
	 * @return { CanSymbol } The globally unique and consistent symbol with the given string value.
	 */CanSymbol.for=function(description){var symbol=descriptionToSymbol[description];if(!symbol){symbol=descriptionToSymbol[description]=CanSymbol(description);symbolToDescription[symbol]=description;}return symbol;};/**
	 * @function can-symbol.keyFor keyFor
	 * @parent  can-symbol
	 * @description  Get the description for a symbol.
	 *
	 * @signature `canSymbol.keyFor(CanSymbol)`
	 *
	 * @param { String } description  The string value of the symbol
	 * @return { CanSymbol } The globally unique and consistent symbol with the given string value.
	 */CanSymbol.keyFor=function(symbol){return symbolToDescription[symbol];};["hasInstance","isConcatSpreadable","iterator","match","prototype","replace","search","species","split","toPrimitive","toStringTag","unscopables"].forEach(function(name){CanSymbol[name]=CanSymbol("Symbol."+name);});}// Generate can. symbols.
[// ======= Type detection ==========
"isMapLike","isListLike","isValueLike","isFunctionLike","isScopeLike",// ======= Shape detection =========
"getOwnKeys","getOwnKeyDescriptor","proto",// optional
"getOwnEnumerableKeys","hasOwnKey","hasKey","size","getName","getIdentity",// shape manipulation
"assignDeep","updateDeep",// ======= GET / SET
"getValue","setValue","getKeyValue","setKeyValue","updateValues","addValue","removeValues",// ======= Call =========
"apply","new",// ======= Observe =========
"onValue","offValue","onKeyValue","offKeyValue","getKeyDependencies","getValueDependencies","keyHasDependencies","valueHasDependencies","onKeys","onKeysAdded","onKeysRemoved","onPatches"].forEach(function(name){CanSymbol.for("can."+name);});var canSymbol_1_7_0_canSymbol=canNamespace_1_0_0_canNamespace.Symbol=CanSymbol;var helpers={makeGetFirstSymbolValue:function(symbolNames){var symbols=symbolNames.map(function(name){return canSymbol_1_7_0_canSymbol.for(name);});var length=symbols.length;return function getFirstSymbol(obj){var index=-1;while(++index<length){if(obj[symbols[index]]!==undefined){return obj[symbols[index]];}}};},// The `in` check is from jQuery’s fix for an iOS 8 64-bit JIT object length bug:
// https://github.com/jquery/jquery/pull/2185
hasLength:function(list){var type=typeof list;if(type==="string"||Array.isArray(list)){return true;}var length=list&&type!=='boolean'&&type!=='number'&&"length"in list&&list.length;// var length = "length" in obj && obj.length;
return typeof list!=="function"&&(length===0||typeof length==="number"&&length>0&&length-1 in list);}};var plainFunctionPrototypePropertyNames=Object.getOwnPropertyNames(function(){}.prototype);var plainFunctionPrototypeProto=Object.getPrototypeOf(function(){}.prototype);/**
 * @function can-reflect.isConstructorLike isConstructorLike
 * @parent can-reflect/type
 *
 * @description Test if a value looks like a constructor function.
 *
 * @signature `isConstructorLike(func)`
 *
 * Return `true` if `func` is a function and has a non-empty prototype, or implements
 *  [can-symbol/symbols/new `@@@@can.new`]; `false` otherwise.
 *
 * ```js
 * canReflect.isConstructorLike(function() {}); // -> false
 *
 * function Construct() {}
 * Construct.prototype = { foo: "bar" };
 * canReflect.isConstructorLike(Construct); // -> true
 *
 * canReflect.isConstructorLike({}); // -> false
 * !!canReflect.isConstructorLike({ [canSymbol.for("can.new")]: function() {} }); // -> true
 * ```
 *
 * @param  {*}  func maybe a function
 * @return {Boolean} `true` if a constructor; `false` if otherwise.
 */function isConstructorLike(func){/* jshint unused: false */// if you can new it ... it's a constructor
var value=func[canSymbol_1_7_0_canSymbol.for("can.new")];if(value!==undefined){return value;}if(typeof func!=="function"){return false;}// If there are any properties on the prototype that don't match
// what is normally there, assume it's a constructor
var prototype=func.prototype;if(!prototype){return false;}// Check if the prototype's proto doesn't point to what it normally would.
// If it does, it means someone is messing with proto chains
if(plainFunctionPrototypeProto!==Object.getPrototypeOf(prototype)){return true;}var propertyNames=Object.getOwnPropertyNames(prototype);if(propertyNames.length===plainFunctionPrototypePropertyNames.length){for(var i=0,len=propertyNames.length;i<len;i++){if(propertyNames[i]!==plainFunctionPrototypePropertyNames[i]){return true;}}return false;}else {return true;}}/**
 * @function can-reflect.isFunctionLike isFunctionLike
 * @parent can-reflect/type
 * @description Test if a value looks like a function.
 * @signature `isFunctionLike(obj)`
 *
 *  Return `true` if `func` is a function, or implements
 *  [can-symbol/symbols/new `@@@@can.new`] or [can-symbol/symbols/apply `@@@@can.apply`]; `false` otherwise.
 *
 * ```js
 * canReflect.isFunctionLike(function() {}); // -> true
 * canReflect.isFunctionLike({}); // -> false
 * canReflect.isFunctionLike({ [canSymbol.for("can.apply")]: function() {} }); // -> true
 * ```
 *
 * @param  {*}  obj maybe a function
 * @return {Boolean}
 */var getNewOrApply=helpers.makeGetFirstSymbolValue(["can.new","can.apply"]);function isFunctionLike(obj){var result,symbolValue=!!obj&&obj[canSymbol_1_7_0_canSymbol.for("can.isFunctionLike")];if(symbolValue!==undefined){return symbolValue;}result=getNewOrApply(obj);if(result!==undefined){return !!result;}return typeof obj==="function";}/**
 * @function can-reflect.isPrimitive isPrimitive
 * @parent can-reflect/type
 * @description Test if a value is a JavaScript primitive.
 * @signature `isPrimitive(obj)`
 *
 * Return `true` if `obj` is not a function nor an object via `typeof`, or is null; `false` otherwise.
 *
 * ```js
 * canReflect.isPrimitive(null); // -> true
 * canReflect.isPrimitive({}); // -> false
 * canReflect.isPrimitive(undefined); // -> true
 * canReflect.isPrimitive(1); // -> true
 * canReflect.isPrimitive([]); // -> false
 * canReflect.isPrimitive(function() {}); // -> false
 * canReflect.isPrimitive("foo"); // -> true
 *
 * ```
 *
 * @param  {*}  obj maybe a primitive value
 * @return {Boolean}
 */function isPrimitive$1(obj){var type=typeof obj;if(obj==null||type!=="function"&&type!=="object"){return true;}else {return false;}}var coreHasOwn=Object.prototype.hasOwnProperty;var funcToString$2=Function.prototype.toString;var objectCtorString=funcToString$2.call(Object);function isPlainObject$2(obj){// Must be an Object.
// Because of IE, we also have to check the presence of the constructor property.
// Make sure that DOM nodes and window objects don't pass through, as well
if(!obj||typeof obj!=='object'){return false;}var proto=Object.getPrototypeOf(obj);if(proto===Object.prototype||proto===null){return true;}// partially inspired by lodash: https://github.com/lodash/lodash
var Constructor=coreHasOwn.call(proto,'constructor')&&proto.constructor;return typeof Constructor==='function'&&Constructor instanceof Constructor&&funcToString$2.call(Constructor)===objectCtorString;}/**
 * @function can-reflect.isBuiltIn isBuiltIn
 * @parent can-reflect/type
 * @description Test if a value is a JavaScript built-in type.
 * @signature `isBuiltIn(obj)`
 *
 * Return `true` if `obj` is some type of JavaScript native built-in; `false` otherwise.
 *
 * ```js
 * canReflect.isBuiltIn(null); // -> true
 * canReflect.isBuiltIn({}); // -> true
 * canReflect.isBuiltIn(1); // -> true
 * canReflect.isBuiltIn([]); // -> true
 * canReflect.isBuiltIn(function() {}); // -> true
 * canReflect.isBuiltIn("foo"); // -> true
 * canReflect.isBuiltIn(new Date()); // -> true
 * canReflect.isBuiltIn(/[foo].[bar]/); // -> true
 * canReflect.isBuiltIn(new DefineMap); // -> false
 *
 * ```
 *
 * Not supported in browsers that have implementations of Map/Set where
 * `toString` is not properly implemented to return `[object Map]`/`[object Set]`.
 *
 * @param  {*}  obj maybe a built-in value
 * @return {Boolean}
 */function isBuiltIn(obj){// If primitive, array, or POJO return true. Also check if
// it is not a POJO but is some type like [object Date] or
// [object Regex] and return true.
if(isPrimitive$1(obj)||Array.isArray(obj)||isPlainObject$2(obj)||Object.prototype.toString.call(obj)!=='[object Object]'&&Object.prototype.toString.call(obj).indexOf('[object ')!==-1){return true;}else {return false;}}/**
 * @function can-reflect.isValueLike isValueLike
 * @parent can-reflect/type
 * @description Test if a value represents a single value (as opposed to several values).
 *
 * @signature `isValueLike(obj)`
 *
 * Return `true` if `obj` is a primitive or implements [can-symbol/symbols/getValue `@@can.getValue`],
 * `false` otherwise.
 *
 * ```js
 * canReflect.isValueLike(null); // -> true
 * canReflect.isValueLike({}); // -> false
 * canReflect.isValueLike(function() {}); // -> false
 * canReflect.isValueLike({ [canSymbol.for("can.isValueLike")]: true}); // -> true
 * canReflect.isValueLike({ [canSymbol.for("can.getValue")]: function() {} }); // -> true
 * canReflect.isValueLike(canCompute()); // -> true
 * canReflect.isValueLike(new DefineMap()); // -> false
 *
 * ```
 *
 * @param  {*}  obj maybe a primitive or an object that yields a value
 * @return {Boolean}
 */function isValueLike(obj){var symbolValue;if(isPrimitive$1(obj)){return true;}symbolValue=obj[canSymbol_1_7_0_canSymbol.for("can.isValueLike")];if(typeof symbolValue!=="undefined"){return symbolValue;}var value=obj[canSymbol_1_7_0_canSymbol.for("can.getValue")];if(value!==undefined){return !!value;}}/**
 * @function can-reflect.isMapLike isMapLike
 * @parent can-reflect/type
 *
 * @description Test if a value represents multiple values.
 *
 * @signature `isMapLike(obj)`
 *
 * Return `true` if `obj` is _not_ a primitive, does _not_ have a falsy value for
 * [can-symbol/symbols/isMapLike `@@@@can.isMapLike`], or alternately implements
 * [can-symbol/symbols/getKeyValue `@@@@can.getKeyValue`]; `false` otherwise.
 *
 * ```js
 * canReflect.isMapLike(null); // -> false
 * canReflect.isMapLike(1); // -> false
 * canReflect.isMapLike("foo"); // -> false
 * canReflect.isMapLike({}); // -> true
 * canReflect.isMapLike(function() {}); // -> true
 * canReflect.isMapLike([]); // -> false
 * canReflect.isMapLike({ [canSymbol.for("can.isMapLike")]: false }); // -> false
 * canReflect.isMapLike({ [canSymbol.for("can.getKeyValue")]: null }); // -> false
 * canReflect.isMapLike(canCompute()); // -> false
 * canReflect.isMapLike(new DefineMap()); // -> true
 *
 * ```
 *
 * @param  {*}  obj maybe a Map-like
 * @return {Boolean}
 */function isMapLike(obj){if(isPrimitive$1(obj)){return false;}var isMapLike=obj[canSymbol_1_7_0_canSymbol.for("can.isMapLike")];if(typeof isMapLike!=="undefined"){return !!isMapLike;}var value=obj[canSymbol_1_7_0_canSymbol.for("can.getKeyValue")];if(value!==undefined){return !!value;}// everything else in JS is MapLike
return true;}/**
 * @function can-reflect.isObservableLike isObservableLike
 * @parent can-reflect/type
 * @description Test if a value (or its keys) can be observed for changes.
 *
 * @signature `isObservableLike(obj)`
 *
 * Return  `true` if `obj` is _not_ a primitive and implements any of
 * [can-symbol/symbols/onValue `@@@@can.onValue`], [can-symbol/symbols/onKeyValue `@@@@can.onKeyValue`], or
 * [can-symbol/symbols/onPatches `@@@@can.onKeys`]; `false` otherwise.
 *
 * ```js
 * canReflect.isObservableLike(null); // -> false
 * canReflect.isObservableLike({}); // -> false
 * canReflect.isObservableLike([]); // -> false
 * canReflect.isObservableLike(function() {}); // -> false
 * canReflect.isObservableLike({ [canSymbol.for("can.onValue")]: function() {} }); // -> true
 * canReflect.isObservableLike({ [canSymbol.for("can.onKeyValue")]: function() {} }); // -> true
 * canReflect.isObservableLike(canCompute())); // -> true
 * canReflect.isObservableLike(new DefineMap())); // -> true
 * ```
 *
 * @param  {*}  obj maybe an observable
 * @return {Boolean}
 */// Specially optimized
var onValueSymbol=canSymbol_1_7_0_canSymbol.for("can.onValue"),onKeyValueSymbol=canSymbol_1_7_0_canSymbol.for("can.onKeyValue"),onPatchesSymbol=canSymbol_1_7_0_canSymbol.for("can.onPatches");function isObservableLike(obj){if(isPrimitive$1(obj)){return false;}return Boolean(obj[onValueSymbol]||obj[onKeyValueSymbol]||obj[onPatchesSymbol]);}/**
 * @function can-reflect.isListLike isListLike
 * @parent can-reflect/type
 *
 * @description Test if a value looks like a constructor function.
 *
 * @signature `isListLike(list)`
 *
 * Return `true` if `list` is a `String`, <br>OR `list` is _not_ a primitive and implements `@@@@iterator`,
 * <br>OR `list` is _not_ a primitive and returns `true` for `Array.isArray()`, <br>OR `list` is _not_ a primitive and has a
 * numerical length and is either empty (`length === 0`) or has a last element at index `length - 1`; <br>`false` otherwise
 *
 * ```js
 * canReflect.isListLike(null); // -> false
 * canReflect.isListLike({}); // -> false
 * canReflect.isListLike([]); // -> true
 * canReflect.isListLike("foo"); // -> true
 * canReflect.isListLike(1); // -> false
 * canReflect.isListLike({ [canSymbol.for("can.isListLike")]: true }); // -> true
 * canReflect.isListLike({ [canSymbol.iterator]: function() {} }); // -> true
 * canReflect.isListLike({ length: 0 }); // -> true
 * canReflect.isListLike({ length: 3 }); // -> false
 * canReflect.isListLike({ length: 3, "2": true }); // -> true
 * canReflect.isListLike(new DefineMap()); // -> false
 * canReflect.isListLike(new DefineList()); // -> true
 * ```
 *
 * @param  {*}  list maybe a List-like
 * @return {Boolean}
 */function isListLike(list){var symbolValue,type=typeof list;if(type==="string"){return true;}if(isPrimitive$1(list)){return false;}symbolValue=list[canSymbol_1_7_0_canSymbol.for("can.isListLike")];if(typeof symbolValue!=="undefined"){return symbolValue;}var value=list[canSymbol_1_7_0_canSymbol.iterator];if(value!==undefined){return !!value;}if(Array.isArray(list)){return true;}return helpers.hasLength(list);}/**
 * @function can-reflect.isSymbolLike isSymbolLike
 * @parent can-reflect/type
 *
 * @description Test if a value is a symbol or a [can-symbol].
 *
 * @signature `isSymbolLike(symbol)`
 *
 * Return `true` if `symbol` is a native Symbol, or evaluates to a String with a prefix
 * equal to that of CanJS's symbol polyfill; `false` otherwise.
 *
 * ```js
 * /* ES6 *\/ canReflect.isSymbolLike(Symbol.iterator); // -> true
 * canReflect.isSymbolLike(canSymbol.for("foo")); // -> true
 * canReflect.isSymbolLike("@@symbol.can.isSymbol"); // -> true (due to polyfill for non-ES6)
 * canReflect.isSymbolLike("foo"); // -> false
 * canReflect.isSymbolLike(null); // -> false
 * canReflect.isSymbolLike(1); // -> false
 * canReflect.isSymbolLike({}); // -> false
 * canReflect.isSymbolLike({ toString: function() { return "@@symbol.can.isSymbol"; } }); // -> true
 * ```
 *
 * @param  {*}  symbol maybe a symbol
 * @return {Boolean}
 */var supportsNativeSymbols$1=function(){var symbolExists=typeof Symbol!=="undefined"&&typeof Symbol.for==="function";if(!symbolExists){return false;}var symbol=Symbol("a symbol for testing symbols");return typeof symbol==="symbol";}();var isSymbolLike;if(supportsNativeSymbols$1){isSymbolLike=function(symbol){return typeof symbol==="symbol";};}else {var symbolStart="@@symbol";isSymbolLike=function(symbol){if(typeof symbol==="object"&&!Array.isArray(symbol)){return symbol.toString().substr(0,symbolStart.length)===symbolStart;}else {return false;}};}/**
 * @function can-reflect.isScopeLike isScopeLike
 * @parent can-reflect/type
 *
 * @description Test if a value represents a can.view.Scope or its API equivalent
 *
 * @signature `isScopeLike(obj)`
 *
 * Return `true` if `obj` is _not_ a primitive, does _not_ have a falsy value for
 * [can-symbol/symbols/isScopeLike `@@@@can.isScopeLike`], or implements the public 
 * API of [can-view-scope] along with `_context` and `_meta` objects; `false` otherwise.
 *
 * ```js
 * canReflect.isScopeLike(null); // -> false
 * canReflect.isScopeLike(1); // -> false
 * canReflect.isScopeLike("foo"); // -> false
 * canReflect.isScopeLike({}); // -> false
 * canReflect.isScopeLike(function() {}); // -> false
 * canReflect.isScopeLike([]); // -> false
 * canReflect.isScopeLike({ [canSymbol.for("can.isScopeLike")]: true }); // -> true
 * canReflect.isScopeLike({
 *   get(){}, set(){}, find(){}, peek(){}, computeData(){}, add(){}, getScope(){},
 *   getHelperOrPartial(){}, getTemplateContext(), addLetContext(){}, cloneFromRef(){},
 *   _meta: {}, _context: {}
 * }); // -> true
 * canReflect.isScopeLike(new can.view.Scope()); // -> true
 *
 * ```
 *
 * @param  {*}  obj maybe a Map-like
 * @return {Boolean}
 */// note:  older can 2.x scopes do not implement find() or addLetContext() but these are required by later can-stache, so passing 
//   this function is not a guarantee of interoperability.
var fnKeys=["get","set","peek","computeData","add","getScope","getHelperOrPartial","getTemplateContext","cloneFromRef"];function isScopeLike(obj){if(isPrimitive$1(obj)){return false;}var isScopeLike=obj[canSymbol_1_7_0_canSymbol.for("can.isScopeLike")];if(typeof isScopeLike!=="undefined"){return !!isScopeLike;}return fnKeys.every(function(key){return typeof obj[key]==="function";})&&"_context"in obj&&obj._meta&&typeof obj._meta==="object";}var type={isConstructorLike:isConstructorLike,isFunctionLike:isFunctionLike,isListLike:isListLike,isMapLike:isMapLike,isObservableLike:isObservableLike,isScopeLike:isScopeLike,isPrimitive:isPrimitive$1,isBuiltIn:isBuiltIn,isValueLike:isValueLike,isSymbolLike:isSymbolLike,/**
	 * @function can-reflect.isMoreListLikeThanMapLike isMoreListLikeThanMapLike
	 * @parent can-reflect/type
	 *
	 * @description Test if a value should be treated as a list instead of a map.
	 *
	 * @signature `isMoreListLikeThanMapLike(obj)`
	 *
	 * Return  `true` if `obj` is an Array, declares itself to be more ListLike with
	 * `@@@@can.isMoreListLikeThanMapLike`, or self-reports as ListLike but not as MapLike; `false` otherwise.
	 *
	 * ```js
	 * canReflect.isMoreListLikeThanMapLike([]); // -> true
	 * canReflect.isMoreListLikeThanMapLike(null); // -> false
	 * canReflect.isMoreListLikeThanMapLike({}); // -> false
	 * canReflect.isMoreListLikeThanMapLike(new DefineList()); // -> true
	 * canReflect.isMoreListLikeThanMapLike(new DefineMap()); // -> false
	 * canReflect.isMoreListLikeThanMapLike(function() {}); // -> false
	 * ```
	 *
	 * @param  {Object}  obj the object to test for ListLike against MapLike traits.
	 * @return {Boolean}
	 */isMoreListLikeThanMapLike:function(obj){if(Array.isArray(obj)){return true;}if(obj instanceof Array){return true;}if(obj==null){return false;}var value=obj[canSymbol_1_7_0_canSymbol.for("can.isMoreListLikeThanMapLike")];if(value!==undefined){return value;}var isListLike=this.isListLike(obj),isMapLike=this.isMapLike(obj);if(isListLike&&!isMapLike){return true;}else if(!isListLike&&isMapLike){return false;}},/**
	 * @function can-reflect.isIteratorLike isIteratorLike
	 * @parent can-reflect/type
	 * @description Test if a value looks like an iterator.
	 * @signature `isIteratorLike(obj)`
	 *
	 * Return `true` if `obj` has a key `"next"` pointing to a zero-argument function; `false` otherwise
	 *
	 * ```js
	 * canReflect.isIteratorLike([][Symbol.iterator]()); // -> true
	 * canReflect.isIteratorLike(new DefineList()[canSymbol.iterator]()); // -> true
	 * canReflect.isIteratorLike(new DefineMap()[canSymbol.iterator]()); // -> true
	 * canReflect.isIteratorLike(null); // -> false
	 * canReflect.isIteratorLike({ next: function() {} }); // -> true
	 * canReflect.isIteratorLike({ next: function(foo) {} }); // -> false (iterator nexts do not take arguments)
	 * ```
	 *
	 * @param  {Object}  obj the object to test for Iterator traits
	 * @return {Boolean}
	 */isIteratorLike:function(obj){return obj&&typeof obj==="object"&&typeof obj.next==="function"&&obj.next.length===0;},/**
	 * @function can-reflect.isPromise isPromise
	 * @parent can-reflect/type
	 * @description Test if a value is a promise.
	 *
	 * @signature `isPromise(obj)`
	 *
	 * Return `true` if `obj` is an instance of promise or `.toString` returns `"[object Promise]"`.
	 *
	 * ```js
	 * canReflect.isPromise(Promise.resolve()); // -> true
	 * ```
	 *
	 * @param  {*}  obj the object to test for Promise traits.
	 * @return {Boolean}
	 */isPromise:function(obj){return obj instanceof Promise||Object.prototype.toString.call(obj)==='[object Promise]';},/**
	 * @function can-reflect.isPlainObject isPlainObject
	 * @parent can-reflect/type
	 * @description Test if a value is an object created with `{}` or `new Object()`.
	 *
	 * @signature `isPlainObject(obj)`
	 *
	 * Attempts to determine if an object is a plain object like those you would create using the curly braces syntax: `{}`. The following are not plain objects:
	 *
	 * 1. Objects with prototypes (created using the `new` keyword).
	 * 2. Booleans.
	 * 3. Numbers.
	 * 4. NaN.
	 *
	 * ```js
	 * var isPlainObject = require("can-reflect").isPlainObject;
	 *
	 * // Created with {}
	 * console.log(isPlainObject({})); // -> true
	 *
	 * // new Object
	 * console.log(isPlainObject(new Object())); // -> true
	 *
	 * // Custom object
	 * var Ctr = function(){};
	 * var obj = new Ctr();
	 *
	 * console.log(isPlainObject(obj)); // -> false
	 * ```
	 *
	 * @param  {Object}  obj the object to test.
	 * @return {Boolean}
	 */isPlainObject:isPlainObject$2};var call={/**
	 * @function {function(...), Object, ...} can-reflect/call.call call
	 * @parent can-reflect/call
	 * @description  Call a callable, with a context object and parameters
	 *
	 * @signature `call(func, context, ...rest)`
	 *
	 * Call the callable `func` as if it were a function, bound to `context` and with any additional parameters
	 * occurring after `context` set to the positional parameters.
	 *
	 * Note that `func` *must* either be natively callable, implement [can-symbol/symbols/apply @@@@can.apply],
	 * or have a callable `apply` property to work with `canReflect.call`
	 *
	 * ```js
	 * var compute = canCompute("foo");
	 *
	 * canReflect.call(compute, null, "bar");
	 * canReflect.call(compute, null); // -> "bar"
	 * ```
	 *
	 * @param  {function(...)} func the function to call with the supplied arguments
	 * @param  {Object} context the context object to set as `this` on the function call
	 * @param  {*} rest any arguments after `context` will be passed to the function call
	 * @return {*}  return types and values are determined by the call to `func`
	 */call:function(func,context){var args=[].slice.call(arguments,2);var apply=func[canSymbol_1_7_0_canSymbol.for("can.apply")];if(apply){return apply.call(func,context,args);}else {return func.apply(context,args);}},/**
	 * @function {function(...), Object, ...} can-reflect/call.apply apply
	 * @parent can-reflect/call
	 * @description  Call a callable, with a context object and a list of parameters
	 *
	 * @signature `apply(func, context, args)`
	 *
	 * Call the callable `func` as if it were a function, bound to `context` and with any additional parameters
	 * contained in the Array-like `args`
	 *
	 * Note that `func` *must* either be natively callable, implement [can-symbol/symbols/apply @@@@can.apply],
	 * or have a callable `apply` property to work with `canReflect.apply`
	 *
	 * ```js
	 * var compute = canCompute("foo");
	 *
	 * canReflect.apply(compute, null, ["bar"]);
	 * canReflect.apply(compute, null, []); // -> "bar"
	 * ```
	 *
	 * @param  {function(...)} func the function to call
	 * @param  {Object} context the context object to set as `this` on the function call
	 * @param  {*} args arguments to be passed to the function call
	 * @return {*}  return types and values are determined by the call to `func`
	 */apply:function(func,context,args){var apply=func[canSymbol_1_7_0_canSymbol.for("can.apply")];if(apply){return apply.call(func,context,args);}else {return func.apply(context,args);}},/**
	 * @function {function(...), ...} can-reflect/call.new new
	 * @parent can-reflect/call
	 * @description  Construct a new instance of a callable constructor
	 *
	 * @signature `new(func, ...rest)`
	 *
	 * Call the callable `func` as if it were a function, bound to a new instance of `func`, and with any additional
	 * parameters occurring after `func` set to the positional parameters.
	 *
	 * Note that `func` *must* either implement [can-symbol/symbols/new @@@@can.new],
	 * or have a callable `apply` property *and* a prototype to work with `canReflect.new`
	 *
	 * ```js
	 * canReflect.new(DefineList, ["foo"]); // -> ["foo"]<DefineList>
	 * ```
	 *
	 * @param  {function(...)} func a constructor
	 * @param  {*} rest arguments to be passed to the constructor
	 * @return {Object}  if `func` returns an Object, that returned Object; otherwise a new instance of `func`
	 */"new":function(func){var args=[].slice.call(arguments,1);var makeNew=func[canSymbol_1_7_0_canSymbol.for("can.new")];if(makeNew){return makeNew.apply(func,args);}else {var context=Object.create(func.prototype);var ret=func.apply(context,args);if(type.isPrimitive(ret)){return context;}else {return ret;}}}};var setKeyValueSymbol=canSymbol_1_7_0_canSymbol.for("can.setKeyValue"),getKeyValueSymbol=canSymbol_1_7_0_canSymbol.for("can.getKeyValue"),getValueSymbol=canSymbol_1_7_0_canSymbol.for("can.getValue"),setValueSymbol=canSymbol_1_7_0_canSymbol.for("can.setValue");var reflections={/**
	 * @function {Object, String, *} can-reflect.setKeyValue setKeyValue
	 * @parent can-reflect/get-set
	 * @description Set the value of a named property on a MapLike object.
	 *
	 * @signature `setKeyValue(obj, key, value)`
	 *
	 * Set the property on Map-like `obj`, identified by the String, Symbol or Object value `key`, to the value `value`.
	 * The default behavior can be overridden on `obj` by implementing [can-symbol/symbols/setKeyValue @@@@can.setKeyValue],
	 * otherwise native named property access is used for string keys, and `Object.defineProperty` is used to set symbols.
	 *
	 * ```js
	 * var foo = new DefineMap({ bar: "baz" });
	 *
	 * canReflect.setKeyValue(foo, "bar", "quux");
	 * foo[bar]; // -> "quux"
	 * ```
	 * @param  {Object} obj   the object to set on
	 * @param  {String} key   the key for the property to set
	 * @param  {*} value      the value to set on the object
	 */setKeyValue:function(obj,key,value){if(type.isSymbolLike(key)){if(typeof key==="symbol"){obj[key]=value;}else {Object.defineProperty(obj,key,{enumerable:false,configurable:true,value:value,writable:true});}return;}var setKeyValue=obj[setKeyValueSymbol];if(setKeyValue!==undefined){return setKeyValue.call(obj,key,value);}else {obj[key]=value;}},/**
	 * @function {Object, String} can-reflect.getKeyValue getKeyValue
	 * @parent can-reflect/get-set
	 * @description Get the value of a named property on a MapLike object.
	 *
	 * @signature `getKeyValue(obj, key)`
	 *
	 * Retrieve the property on Map-like `obj` identified by the String or Symbol value `key`.  The default behavior
	 * can be overridden on `obj` by implementing [can-symbol/symbols/getKeyValue @@@@can.getKeyValue],
	 * otherwise native named property access is used.
	 *
	 * ```js
	 * var foo = new DefineMap({ bar: "baz" });
	 *
	 * canReflect.getKeyValue(foo, "bar"); // -> "baz"
	 * ```
	 *
	 * @param  {Object} obj   the object to get from
	 * @param  {String} key   the key of the property to get
	 */getKeyValue:function(obj,key){var getKeyValue=obj[getKeyValueSymbol];if(getKeyValue){return getKeyValue.call(obj,key);}return obj[key];},/**
	 * @function {Object, String} can-reflect.deleteKeyValue deleteKeyValue
	 * @parent can-reflect/get-set
	 * @description Delete a named property from a MapLike object.
	 *
	 * @signature `deleteKeyValue(obj, key)`
	 *
	 * Remove the property identified by the String or Symbol `key` from the Map-like object `obj`, if possible.
	 * Property definitions may interfere with deleting key values; the behavior on `obj` if `obj[key]` cannot
	 * be deleted is undefined.  The default use of the native `delete` keyword can be overridden by `obj` if it
	 * implements [can-symbol/symbols/deleteKeyValue @@@@can.deleteKeyValue].
	 *
	 * ```js
	 * var foo = new DefineMap({ bar: "baz" });
	 * var quux = new CanMap({ thud: "jeek" });
	 *
	 * canReflect.deleteKeyValue(foo, "bar");
	 * canReflect.deleteKeyValue(quux, "thud");
	 *
	 * "bar" in foo; // ->  true  -- DefineMaps use property defs which cannot be un-defined
	 * foo.bar // -> undefined    --  but set values to undefined when deleting
	 *
	 * "thud" in quux; // -> false
	 * quux.thud; // -> undefined
	 * ```
	 *
	 * @param  {Object} obj   the object to delete on
	 * @param  {String} key   the key for the property to delete
	 */deleteKeyValue:function(obj,key){var deleteKeyValue=obj[canSymbol_1_7_0_canSymbol.for("can.deleteKeyValue")];if(deleteKeyValue){return deleteKeyValue.call(obj,key);}delete obj[key];},/**
	 * @function {Object} can-reflect.getValue getValue
	 * @parent can-reflect/get-set
	 * @description Get the value of an object with a gettable value
	 *
	 * @signature `getValue(obj)`
	 *
	 * Return the value of the Value-like object `obj`.  Unless `obj` implements
	 * [can-symbol/symbols/getValue @@@@can.getValue], the result of `getValue` on
	 * `obj` will always be `obj`.  Observable Map-like objects may want to implement
	 * `@@@@can.getValue` to return non-observable or plain representations of themselves.
	 *
	 * ```js
	 * var compute = canCompute("foo");
	 * var primitive = "bar";
	 *
	 * canReflect.getValue(compute); // -> "foo"
	 * canReflect.getValue(primitive); // -> "bar"
	 * ```
	 *
	 * @param  {Object} obj   the object to get from
	 * @return {*} the value of the object via `@@can.getValue`, or the value itself.
	 */getValue:function(value){if(type.isPrimitive(value)){return value;}var getValue=value[getValueSymbol];if(getValue){return getValue.call(value);}return value;},/**
	 * @function {Object, *} can-reflect.setValue setValue
	 * @parent can-reflect/get-set
	 * @description Set the value of a mutable object.
	 *
	 * @signature `setValue(obj, value)`
	 *
	 * Set the value of a Value-like object `obj` to the value `value`.  `obj` *must* implement
	 * [can-symbol/symbols/setValue @@@@can.setValue] to be used with `canReflect.setValue`.
	 * Map-like objects may want to implement `@@@@can.setValue` to merge objects of properties
	 * into themselves.
	 *
	 * ```js
	 * var compute = canCompute("foo");
	 * var plain = {};
	 *
	 * canReflect.setValue(compute, "bar");
	 * compute(); // -> bar
	 *
	 * canReflect.setValue(plain, { quux: "thud" }); // throws "can-reflect.setValue - Can not set value."
	 * ```
	 *
	 * @param  {Object} obj   the object to set on
	 * @param  {*} value      the value to set for the object
	 */setValue:function(item,value){var setValue=item&&item[setValueSymbol];if(setValue){return setValue.call(item,value);}else {throw new Error("can-reflect.setValue - Can not set value.");}},splice:function(obj,index,removing,adding){var howMany;if(typeof removing!=="number"){var updateValues=obj[canSymbol_1_7_0_canSymbol.for("can.updateValues")];if(updateValues){return updateValues.call(obj,index,removing,adding);}howMany=removing.length;}else {howMany=removing;}if(arguments.length<=3){adding=[];}var splice=obj[canSymbol_1_7_0_canSymbol.for("can.splice")];if(splice){return splice.call(obj,index,howMany,adding);}return [].splice.apply(obj,[index,howMany].concat(adding));},addValues:function(obj,adding,index){var add=obj[canSymbol_1_7_0_canSymbol.for("can.addValues")];if(add){return add.call(obj,adding,index);}if(Array.isArray(obj)&&index===undefined){return obj.push.apply(obj,adding);}return reflections.splice(obj,index,[],adding);},removeValues:function(obj,removing,index){var removeValues=obj[canSymbol_1_7_0_canSymbol.for("can.removeValues")];if(removeValues){return removeValues.call(obj,removing,index);}if(Array.isArray(obj)&&index===undefined){removing.forEach(function(item){var index=obj.indexOf(item);if(index>=0){obj.splice(index,1);}});return;}return reflections.splice(obj,index,removing,[]);}};/**
 * @function {Object, String} can-reflect.get get
 * @hide
 * @description an alias for [can-reflect.getKeyValue getKeyValue]
 */reflections.get=reflections.getKeyValue;/**
 * @function {Object, String} can-reflect.set set
 * @hide
 * @description an alias for [can-reflect.setKeyValue setKeyValue]
 */reflections.set=reflections.setKeyValue;/**
 * @function {Object, String} can-reflect.delete delete
 * @hide
 * @description an alias for [can-reflect.deleteKeyValue deleteKeyValue]
 */reflections["delete"]=reflections.deleteKeyValue;var getSet=reflections;var slice$1=[].slice;function makeFallback(symbolName,fallbackName){return function(obj,event,handler,queueName){var method=obj[canSymbol_1_7_0_canSymbol.for(symbolName)];if(method!==undefined){return method.call(obj,event,handler,queueName);}return this[fallbackName].apply(this,arguments);};}function makeErrorIfMissing(symbolName,errorMessage){return function(obj){var method=obj[canSymbol_1_7_0_canSymbol.for(symbolName)];if(method!==undefined){var args=slice$1.call(arguments,1);return method.apply(obj,args);}throw new Error(errorMessage);};}var observe={// KEY
/**
	 * @function {Object, String, function(*, *), String} can-reflect/observe.onKeyValue onKeyValue
	 * @parent can-reflect/observe
	 * @description  Register an event handler on a MapLike object, based on a key change
	 *
	 * @signature `onKeyValue(obj, key, handler, [queueName])`
	 *
	 * Register a handler on the Map-like object `obj` to trigger when the property key `key` changes.
	 * `obj` *must* implement [can-symbol/symbols/onKeyValue @@@@can.onKeyValue] to be compatible with
	 * can-reflect.onKeyValue.  The function passed as `handler` will receive the new value of the property
	 * as the first argument, and the previous value of the property as the second argument.
	 *
	 * ```js
	 * var obj = new DefineMap({ foo: "bar" });
	 * canReflect.onKeyValue(obj, "foo", function(newVal, oldVal) {
	 * 	console.log("foo is now", newVal, ", was", oldVal);
	 * });
	 *
	 * obj.foo = "baz";  // -> logs "foo is now baz , was bar"
	 * ```
	 *
	 * @param {Object} obj an observable MapLike that can listen to changes in named properties.
	 * @param {String} key  the key to listen to
	 * @param {function(*, *)} handler a callback function that recieves the new value
	 * @param {String} [queueName]  the queue to dispatch events to
	 */onKeyValue:makeFallback("can.onKeyValue","onEvent"),/**
	 * @function {Object, String, function(*), String} can-reflect/observe.offKeyValue offKeyValue
	 * @parent can-reflect/observe
	 * @description  Unregister an event handler on a MapLike object, based on a key change
	 *
	 * @signature `offKeyValue(obj, key, handler, [queueName])`
	 *
	 * Unregister a handler from the Map-like object `obj` that had previously been registered with
	 * [can-reflect/observe.onKeyValue onKeyValue]. The function passed as `handler` will no longer be called
	 * when the value of `key` on `obj` changes.
	 *
	 * ```js
	 * var obj = new DefineMap({ foo: "bar" });
	 * var handler = function(newVal, oldVal) {
	 * 	console.log("foo is now", newVal, ", was", oldVal);
	 * };
	 *
	 * canReflect.onKeyValue(obj, "foo", handler);
	 * canReflect.offKeyValue(obj, "foo", handler);
	 *
	 * obj.foo = "baz";  // -> nothing is logged
	 * ```
	 *
	 * @param {Object} obj an observable MapLike that can listen to changes in named properties.
	 * @param {String} key  the key to stop listening to
	 * @param {function(*)} handler the callback function that should be removed from the event handlers for `key`
	 * @param {String} [queueName]  the queue that the handler was set to receive events from
	 */offKeyValue:makeFallback("can.offKeyValue","offEvent"),/**
	 * @function {Object, function(Array)} can-reflect/observe.onKeys onKeys
	 * @parent can-reflect/observe
	 * @description  Register an event handler on a MapLike object, triggered on the key set changing
	 *
	 * @signature `onKeys(obj, handler)`
	 *
	 * Register an event handler on the Map-like object `obj` to trigger when `obj`'s keyset changes.
	 * `obj` *must* implement [can-symbol/symbols/onKeys @@@@can.onKeys] to be compatible with
	 * can-reflect.onKeys.  The function passed as `handler` will receive an Array of object diffs (see
	 * [can-util/js/diff-object/diff-object diffObject] for the format) as its one argument.
	 *
	 * ```js
	 * var obj = new DefineMap({ foo: "bar" });
	 * canReflect.onKeys(obj, function(diffs) {
	 * 	console.log(diffs);
	 * });
	 *
	 * obj.set("baz", "quux");  // -> logs '[{"property": "baz", "type": "add", "value": "quux"}]'
	 * ```
	 *
	 * @param {Object} obj an observable MapLike that can listen to changes in named properties.
	 * @param {function(Array)} handler the callback function to receive the diffs in the key set
	 */// any key change (diff would normally happen)
onKeys:makeErrorIfMissing("can.onKeys","can-reflect: can not observe an onKeys event"),/**
	 * @function {Object, function(Array)} can-reflect/observe.onKeysAdded onKeysAdded
	 * @parent can-reflect/observe
	 * @description  Register an event handler on a MapLike object, triggered on new keys being added.
	 *
	 * @signature `onKeysAdded(obj, handler)`
	 *
	 * Register an event handler on the Map-like object `obj` to trigger when a new key or keys are set on
	 * `obj`. `obj` *must* implement [can-symbol/symbols/onKeysAdded @@@@can.onKeysAdded] to be compatible with
	 * can-reflect.onKeysAdded.  The function passed as `handler` will receive an Array of Strings as its one
	 * argument.
	 *
	 * ```js
	 * var obj = new DefineMap({ foo: "bar" });
	 * canReflect.onKeysAded(obj, function(newKeys) {
	 * 	console.log(newKeys);
	 * });
	 *
	 * foo.set("baz", "quux");  // -> logs '["baz"]'
	 * ```
	 *
	 * @param {Object} obj an observable MapLike that can listen to changes in named properties.
	 * @param {function(Array)} handler the callback function to receive the array of added keys
	 */// keys added at a certain point {key: 1}, index
onKeysAdded:makeErrorIfMissing("can.onKeysAdded","can-reflect: can not observe an onKeysAdded event"),/**
	 * @function {Object, function(Array)} can-reflect/observe.onKeysRemoved onKeysRemoved
	 * @parent can-reflect/observe
	 * @description  Register an event handler on a MapLike object, triggered on keys being deleted.
	 *
	 * @signature `onKeysRemoved(obj, handler)`
	 *
	 * Register an event handler on the Map-like object `obj` to trigger when a key or keys are removed from
	 * `obj`'s keyset. `obj` *must* implement [can-symbol/symbols/onKeysRemoved @@@@can.onKeysRemoved] to be
	 * compatible with can-reflect.onKeysAdded.  The function passed as `handler` will receive an Array of
	 * Strings as its one argument.
	 *
	 * ```js
	 * var obj = new CanMap({ foo: "bar" });
	 * canReflect.onKeys(obj, function(diffs) {
	 * 	console.log(JSON.stringify(diffs));
	 * });
	 *
	 * foo.removeAttr("foo");  // -> logs '["foo"]'
	 * ```
	 *
	 * @param {Object} obj an observable MapLike that can listen to changes in named properties.
	 * @param {function(Array)} handler the callback function to receive the array of removed keys
	 */onKeysRemoved:makeErrorIfMissing("can.onKeysRemoved","can-reflect: can not unobserve an onKeysRemoved event"),/**
	 * @function {Object, String} can-reflect/observe.getKeyDependencies getKeyDependencies
	 * @parent can-reflect/observe
	 * @description  Return the observable objects that compute to the value of a named property on an object
	 *
	 * @signature `getKeyDependencies(obj, key)`
	 *
	 * Return the observable objects that provide input values to generate the computed value of the
	 * property `key` on Map-like object `obj`.  If `key` does not have dependencies on `obj`, returns `undefined`.
	 * Otherwise returns an object with up to two keys: `keyDependencies` is a [can-util/js/cid-map/cid-map CIDMap] that
	 * maps each Map-like object providing keyed values to an Array of the relevant keys; `valueDependencies` is a
	 * [can-util/js/cid-set/cid-set CIDSet] that contains all Value-like dependencies providing their own values.
	 *
	 * `obj` *must* implement [can-symbol/symbols/getKeyDependencies @@@@can.getKeyDependencies] to work with
	 * `canReflect.getKeyDependencies`.
	 *
	 *
	 * ```js
	 * var foo = new DefineMap({ "bar": "baz" })
	 * var obj = new (DefineMap.extend({
	 * 	 baz: {
	 * 	   get: function() {
	 * 	     return foo.bar;
	 * 	   }
	 * 	 }
	 * }))();
	 *
	 * canReflect.getKeyDependencies(obj, "baz");  // -> { valueDependencies: CIDSet }
	 * ```
	 *
	 * @param {Object} obj the object to check for key dependencies
	 * @param {String} key the key on the object to check
	 * @return {Object} the observable values that this keyed value depends on
	 */getKeyDependencies:makeErrorIfMissing("can.getKeyDependencies","can-reflect: can not determine dependencies"),/**
	 * @function {Object, String} can-reflect/observe.getWhatIChange getWhatIChange
	 * @hide
	 * @parent can-reflect/observe
	 * @description Return the observable objects that derive their value from the
	 * obj, passed in.
	 *
	 * @signature `getWhatIChange(obj, key)`
	 *
	 * `obj` *must* implement `@@@@can.getWhatIChange` to work with
	 * `canReflect.getWhatIChange`.
	 *
	 * @param {Object} obj the object to check for what it changes
	 * @param {String} [key] the key on the object to check
	 * @return {Object} the observable values that derive their value from `obj`
	 */getWhatIChange:makeErrorIfMissing("can.getWhatIChange","can-reflect: can not determine dependencies"),/**
	 * @function {Function} can-reflect/observe.getChangesDependencyRecord getChangesDependencyRecord
	 * @hide
	 * @parent can-reflect/observe
	 * @description Return the observable objects that are mutated by the handler
	 * passed in as argument.
	 *
	 * @signature `getChangesDependencyRecord(handler)`
	 *
	 * `handler` *must* implement `@@@@can.getChangesDependencyRecord` to work with
	 * `canReflect.getChangesDependencyRecord`.
	 *
	 * ```js
	 * var one = new SimpleObservable("one");
	 * var two = new SimpleObservable("two");
	 *
	 * var handler = function() {
	 *	two.set("2");
	 * };
	 *
	 * canReflect.onValue(one, handler);
	 * canReflect.getChangesDependencyRecord(handler); // -> { valueDependencies: new Set([two]) }
	 * ```
	 *
	 * @param {Function} handler the event handler to check for what it changes
	 * @return {Object} the observable values that are mutated by the handler
	 */getChangesDependencyRecord:function getChangesDependencyRecord(handler){var fn=handler[canSymbol_1_7_0_canSymbol.for("can.getChangesDependencyRecord")];if(typeof fn==="function"){return fn();}},/**
	 * @function {Object, String} can-reflect/observe.keyHasDependencies keyHasDependencies
	 * @parent can-reflect/observe
	 * @description  Determine whether the value for a named property on an object is bound to other events
	 *
	 * @signature `keyHasDependencies(obj, key)`
	 *
	 * Returns `true` if the computed value of the property `key` on Map-like object `obj` derives from other values.
	 * Returns `false` if `key` is computed on `obj` but does not have dependencies on other objects. If `key` is not
	 * a computed value on `obj`, returns `undefined`.
	 *
	 * `obj` *must* implement [can-symbol/symbols/keyHasDependencies @@@@can.keyHasDependencies] to work with
	 * `canReflect.keyHasDependencies`.
	 *
	 * ```js
	 * var foo = new DefineMap({ "bar": "baz" })
	 * var obj = new (DefineMap.extend({
	 * 	 baz: {
	 * 	   get: function() {
	 * 	     return foo.bar;
	 * 	   }
	 * 	 },
	 * 	 quux: {
	 * 	 	 get: function() {
	 * 	 	   return "thud";
	 * 	 	 }
	 * 	 }
	 * }))();
	 *
	 * canReflect.keyHasDependencies(obj, "baz");  // -> true
	 * canReflect.keyHasDependencies(obj, "quux");  // -> false
	 * canReflect.keyHasDependencies(foo, "bar");  // -> undefined
	 * ```
	 *
	 * @param {Object} obj the object to check for key dependencies
	 * @param {String} key the key on the object to check
	 * @return {Boolean} `true` if there are other objects that may update the keyed value; `false` otherwise
	 *
	 */// TODO: use getKeyDeps once we know what that needs to look like
keyHasDependencies:makeErrorIfMissing("can.keyHasDependencies","can-reflect: can not determine if this has key dependencies"),// VALUE
/**
	 * @function {Object, function(*)} can-reflect/observe.onValue onValue
	 * @parent can-reflect/observe
	 * @description  Register an event handler on an observable ValueLike object, based on a change in its value
	 *
	 * @signature `onValue(handler, [queueName])`
	 *
	 * Register an event handler on the Value-like object `obj` to trigger when its value changes.
	 * `obj` *must* implement [can-symbol/symbols/onValue @@@@can.onValue] to be compatible with
	 * can-reflect.onKeyValue.  The function passed as `handler` will receive the new value of `obj`
	 * as the first argument, and the previous value of `obj` as the second argument.
	 *
	 * ```js
	 * var obj = canCompute("foo");
	 * canReflect.onValue(obj, function(newVal, oldVal) {
	 * 	console.log("compute is now", newVal, ", was", oldVal);
	 * });
	 *
	 * obj("bar");  // -> logs "compute is now bar , was foo"
	 * ```
	 *
	 * @param {*} obj  any object implementing @@can.onValue
	 * @param {function(*, *)} handler  a callback function that receives the new and old values
	 */onValue:makeErrorIfMissing("can.onValue","can-reflect: can not observe value change"),/**
	 * @function {Object, function(*)} can-reflect/observe.offValue offValue
	 * @parent can-reflect/observe
	 * @description  Unregister an value change handler from an observable ValueLike object
	 *
	 * @signature `offValue(handler, [queueName])`
	 *
	 * Unregister an event handler from the Value-like object `obj` that had previously been registered with
	 * [can-reflect/observe.onValue onValue]. The function passed as `handler` will no longer be called
	 * when the value of `obj` changes.
	 *
	 * ```js
	 * var obj = canCompute( "foo" );
	 * var handler = function(newVal, oldVal) {
	 * 	console.log("compute is now", newVal, ", was", oldVal);
	 * };
	 *
	 * canReflect.onKeyValue(obj, handler);
	 * canReflect.offKeyValue(obj, handler);
	 *
	 * obj("baz");  // -> nothing is logged
	 * ```
	 *
	 * @param {*} obj
	 * @param {function(*)} handler
	 */offValue:makeErrorIfMissing("can.offValue","can-reflect: can not unobserve value change"),/**
	 * @function {Object} can-reflect/observe.getValueDependencies getValueDependencies
	 * @parent can-reflect/observe
	 * @description  Return all the events that bind to the value of an observable, Value-like object
	 *
	 * @signature `getValueDependencies(obj)`
	 *
	 * Return the observable objects that provide input values to generate the computed value of the
	 * Value-like object `obj`.  If `obj` does not have dependencies, returns `undefined`.
	 * Otherwise returns an object with up to two keys: `keyDependencies` is a [can-util/js/cid-map/cid-map CIDMap] that
	 * maps each Map-like object providing keyed values to an Array of the relevant keys; `valueDependencies` is a
	 * [can-util/js/cid-set/cid-set CIDSet] that contains all Value-like dependencies providing their own values.
	 *
	 * `obj` *must* implement [can-symbol/symbols/getValueDependencies @@@@can.getValueDependencies] to work with
	 * `canReflect.getValueDependencies`.
	 *
	 *
	 * ```js
	 * var foo = new DefineMap({ "bar": "baz" })
	 * var obj = canCompute(function() {
	 * 	 return foo.bar;
	 * });
	 *
	 * canReflect.getValueDependencies(obj);  // -> { valueDependencies: CIDSet } because `obj` is internally backed by
	 * a [can-observation]
	 * ```
	 *
	 * @param {Object} obj the object to check for value dependencies
	 * @return {Object} the observable objects that `obj`'s value depends on
	 *
	 */getValueDependencies:makeErrorIfMissing("can.getValueDependencies","can-reflect: can not determine dependencies"),/**
	 * @function {Object} can-reflect/observe.valueHasDependencies valueHasDependencies
	 * @parent can-reflect/observe
	 * @description  Determine whether the value of an observable object is bound to other events
	 *
	 * @signature `valueHasDependencies(obj)`
	 *
	 * Returns `true` if the computed value of the Value-like object `obj` derives from other values.
	 * Returns `false` if `obj` is computed but does not have dependencies on other objects. If `obj` is not
	 * a computed value, returns `undefined`.
	 *
	 * `obj` *must* implement [can-symbol/symbols/valueHasDependencies @@@@can.valueHasDependencies] to work with
	 * `canReflect.valueHasDependencies`.
	 *
	 * ```js
	 * var foo = canCompute( "bar" );
	 * var baz = canCompute(function() {
	 * 	 return foo();
	 * });
	 * var quux = "thud";
	 * var jeek = canCompute(function(plonk) {
	 * 	 if(argument.length) {
	 * 	 	  quux = plonk;
	 * 	 }
	 * 	 return quux;
	 * });
	 *
	 * canReflect.valueHasDependencies(baz);  // -> true
	 * canReflect.valueHasDependencies(jeek);  // -> false
	 * canReflect.valueHasDependencies(foo);  // -> undefined
	 * ```
	 *
	 * @param {Object} obj the object to check for dependencies
	 * @return {Boolean} `true` if there are other dependencies that may update the object's value; `false` otherwise
	 *
	 */valueHasDependencies:makeErrorIfMissing("can.valueHasDependencies","can-reflect: can not determine if value has dependencies"),// PATCHES
/**
	 * @function {Object, function(*), String} can-reflect/observe.onPatches onPatches
	 * @parent can-reflect/observe
	 * @description  Register an handler on an observable that listens to any key changes
	 *
	 * @signature `onPatches(obj, handler, [queueName])`
	 *
	 * Register an event handler on the object `obj` that fires when anything changes on an object: a key value is added,
	 * an existing key has is value changed, or a key is deleted from the object.
	 *
	 * If object is an array-like and the changed property includes numeric indexes, patch sets will include array-specific
	 * patches in addition to object-style patches
	 *
	 * For more on the patch formats, see [can-util/js/diff-object/diff-object] and [can-util/js/diff-array/diff-array].
	 *
	 * ```js
	 * var obj = new DefineMap({});
	 * var handler = function(patches) {
	 * 	console.log(patches);
	 * };
	 *
	 * canReflect.onPatches(obj, handler);
	 * obj.set("foo", "bar");  // logs [{ type: "add", property: "foo", value: "bar" }]
	 * obj.set("foo", "baz");  // logs [{ type: "set", property: "foo", value: "baz" }]
	 *
	 * var arr = new DefineList([]);
	 * canReflect.onPatches(arr, handler);
	 * arr.push("foo");  // logs [{type: "add", property:"0", value: "foo"},
	 *                            {index: 0, deleteCount: 0, insert: ["foo"]}]
   * arr.pop();  // logs [{type: "remove", property:"0"},
	 *                            {index: 0, deleteCount: 1, insert: []}]
	 * ```
	 *
	 * @param {*} obj
	 * @param {function(*)} handler
	 * @param {String} [queueName] the name of a queue in [can-queues]; dispatches to `handler` will happen on this queue
	 */onPatches:makeErrorIfMissing("can.onPatches","can-reflect: can not observe patches on object"),/**
	 * @function {Object, function(*), String} can-reflect/observe.offPatches offPatches
	 * @parent can-reflect/observe
	 * @description  Unregister an object patches handler from an observable object
	 *
	 * @signature `offPatches(obj, handler, [queueName])`
	 *
	 * Unregister an event handler from the object `obj` that had previously been registered with
	 * [can-reflect/observe.onPatches onPatches]. The function passed as `handler` will no longer be called
	 * when `obj` has key or index changes.
	 *
	 * ```js
	 * var obj = new DefineMap({});
	 * var handler = function(patches) {
	 * 	console.log(patches);
	 * };
	 *
	 * canReflect.onPatches(obj, handler);
	 * canReflect.offPatches(obj, handler);
	 *
	 * obj.set("foo", "bar");  // nothing is logged
	 * ```
	 *
	 * @param {*} obj
	 * @param {function(*)} handler
	 * @param {String} [queueName] the name of the queue in [can-queues] the handler was registered under
	 */offPatches:makeErrorIfMissing("can.offPatches","can-reflect: can not unobserve patches on object"),/**
	 * @function {Object, function(*)} can-reflect/observe.onInstancePatches onInstancePatches
	 * @parent can-reflect/observe
	 *
	 * @description Registers a handler that listens to patch events on any instance
	 *
	 * @signature `onInstancePatches(Type, handler(instance, patches))`
	 *
	 * Listens to patch changes on any instance of `Type`. This is used by [can-connect]
	 * to know when a potentially `unbound` instance's `id` changes. If the `id` changes,
	 * the instance can be moved into the store while it is being saved. E.g:
	 *
	 * ```js
	 * canReflect.onInstancePatches(Map, function onInstancePatches(instance, patches) {
	 *	patches.forEach(function(patch) {
	 *		if (
	 *			(patch.type === "add" || patch.type === "set") &&
	 *			patch.key === connection.idProp &&
	 *			canReflect.isBound(instance)
	 *		) {
	 *			connection.addInstanceReference(instance);
	 *		}
	 *	});
	 *});
	 * ```
	 *
	 * @param {*} Type
	 * @param {function(*)} handler
	 */onInstancePatches:makeErrorIfMissing("can.onInstancePatches","can-reflect: can not observe onInstancePatches on Type"),/**
	 * @function {Object, function(*)} can-reflect/observe.offInstancePatches offInstancePatches
	 * @parent can-reflect/observe
	 *
	 * @description Unregisters a handler registered through [can-reflect/observe.onInstancePatches]
	 *
	 * @signature `offInstancePatches(Type, handler(instance, patches))`
	 *
	 * ```js
	 * canReflect.offInstancePatches(Map, onInstancePatches);
	 * ```
	 *
	 * @param {*} Type
	 * @param {function(*)} handler
	 */offInstancePatches:makeErrorIfMissing("can.offInstancePatches","can-reflect: can not unobserve onInstancePatches on Type"),// HAS BINDINGS VS DOES NOT HAVE BINDINGS
/**
	 * @function {Object, function(*), String} can-reflect/observe.onInstanceBoundChange onInstanceBoundChange
	 * @parent can-reflect/observe
	 * @description Listen to when observables of a type are bound and unbound.
	 *
	 * @signature `onInstanceBoundChange(Type, handler, [queueName])`
	 *
	 * Register an event handler on the object `Type` that fires when instances of the type become bound (the first handler is added)
	 * or unbound (the last remaining handler is removed). The function passed as `handler` will be called
	 * with the `instance` as the first argument and `true` as the second argument when `instance` gains its first binding,
	 * and called with `false` when `instance` loses its
	 * last binding.
	 *
	 * ```js
	 * Person = DefineMap.extend({ ... });
	 *
	 * var person = Person({});
	 * var handler = function(instance, newVal) {
	 * 	console.log(instance, "bound state is now", newVal);
	 * };
	 * var keyHandler = function() {};
	 *
	 * canReflect.onInstanceBoundChange(Person, handler);
	 * canReflect.onKeyValue(obj, "name", keyHandler);  // logs person Bound state is now true
	 * canReflect.offKeyValue(obj, "name", keyHandler);  // logs person Bound state is now false
	 * ```
	 *
	 * @param {function} Type A constructor function
	 * @param {function(*,Boolean)} handler(instance,isBound) A function called with the `instance` whose bound status changed and the state of the bound status.
	 * @param {String} [queueName] the name of a queue in [can-queues]; dispatches to `handler` will happen on this queue
	 */onInstanceBoundChange:makeErrorIfMissing("can.onInstanceBoundChange","can-reflect: can not observe bound state change in instances."),/**
	 * @function {Object, function(*), String} can-reflect/observe.offInstanceBoundChange offInstanceBoundChange
	 * @parent can-reflect/observe
	 * @description Stop listening to when observables of a type are bound and unbound.
	 *
	 * @signature `offInstanceBoundChange(Type, handler, [queueName])`
	 *
	 * Unregister an event handler from the type `Type` that had previously been registered with
	 * [can-reflect/observe.onInstanceBoundChange onInstanceBoundChange]. The function passed as `handler` will no longer be called
	 * when instances of `Type` gains its first or loses its last binding.
	 *
	 * ```js
	 * Person = DefineMap.extend({ ... });
	 *
	 * var person = Person({});
	 * var handler = function(instance, newVal) {
	 * 	console.log(instance, "bound state is now", newVal);
	 * };
	 * var keyHandler = function() {};
	 *
	 * canReflect.onInstanceBoundChange(Person, handler);
	 * canReflect.offInstanceBoundChange(Person, handler);
	 * canReflect.onKeyValue(obj, "name", keyHandler);  // nothing is logged
	 * canReflect.offKeyValue(obj, "name", keyHandler); // nothing is logged
	 * ```
	 *
	 * @param {function} Type A constructor function
	 * @param {function(*,Boolean)} handler(instance,isBound) The `handler` passed to `canReflect.onInstanceBoundChange`.
	 * @param {String} [queueName] the name of the queue in [can-queues] the handler was registered under
	 */offInstanceBoundChange:makeErrorIfMissing("can.offInstanceBoundChange","can-reflect: can not unobserve bound state change"),/**
	 * @function {Object} can-reflect/observe.isBound isBound
	 * @parent can-reflect/observe
	 * @description  Determine whether any listeners are bound to the observable object
	 *
	 * @signature `isBound(obj)`
	 *
	 * `isBound` queries an observable object to find out whether any listeners have been set on it using
	 * [can-reflect/observe.onKeyValue onKeyValue] or [can-reflect/observe.onValue onValue]
	 *
	 * ```js
	 * var obj = new DefineMap({});
	 * var handler = function() {};
	 * canReflect.isBound(obj); // -> false
	 * canReflect.onKeyValue(obj, "foo", handler);
	 * canReflect.isBound(obj); // -> true
	 * canReflect.offKeyValue(obj, "foo", handler);
	 * canReflect.isBound(obj); // -> false
	 * ```
	 *
	 * @param {*} obj
	 * @return {Boolean} `true` if obj has at least one key-value or value listener, `false` otherwise
	 */isBound:makeErrorIfMissing("can.isBound","can-reflect: cannot determine if object is bound"),// EVENT
/**
	 * @function {Object, String, function(*)} can-reflect/observe.onEvent onEvent
	 * @parent can-reflect/observe
	 * @description  Register a named event handler on an observable object
	 *
	 * @signature `onEvent(obj, eventName, callback)`
	 *
	 *
	 * Register an event handler on the object `obj` to trigger when the event `eventName` is dispatched.
	 * `obj` *must* implement [can-symbol/symbols/onKeyValue @@@@can.onEvent] or `.addEventListener()` to be compatible
	 * with can-reflect.onKeyValue.  The function passed as `callback` will receive the event descriptor as the first
	 * argument, and any data passed to the event dispatch as subsequent arguments.
	 *
	 * ```js
	 * var obj = new DefineMap({ foo: "bar" });
	 * canReflect.onEvent(obj, "foo", function(ev, newVal, oldVal) {
	 * 	console.log("foo is now", newVal, ", was", oldVal);
	 * });
	 *
	 * canEvent.dispatch.call(obj, "foo", ["baz", "quux"]);  // -> logs "foo is now baz , was quux"
	 * ```
	 *
	 * @param {Object} obj the object to bind a new event handler to
	 * @param {String} eventName the name of the event to bind the handler to
	 * @param {function(*)} callback  the handler function to bind to the event
	 */onEvent:function(obj,eventName,callback,queue){if(obj){var onEvent=obj[canSymbol_1_7_0_canSymbol.for("can.onEvent")];if(onEvent!==undefined){return onEvent.call(obj,eventName,callback,queue);}else if(obj.addEventListener){obj.addEventListener(eventName,callback,queue);}}},/**
	 * @function {Object, String, function(*)} can-reflect/observe.offValue offEvent
	 * @parent can-reflect/observe
	 * @description  Unregister an event handler on a MapLike object, based on a key change
	 *
	 * @signature `offEvent(obj, eventName, callback)`
	 *
	 * Unregister an event handler from the object `obj` that had previously been registered with
	 * [can-reflect/observe.onEvent onEvent]. The function passed as `callback` will no longer be called
	 * when the event named `eventName` is dispatched on `obj`.
	 *
	 * ```js
	 * var obj = new DefineMap({ foo: "bar" });
	 * var handler = function(ev, newVal, oldVal) {
	 * 	console.log("foo is now", newVal, ", was", oldVal);
	 * };
	 *
	 * canReflect.onEvent(obj, "foo", handler);
	 * canReflect.offEvent(obj, "foo", handler);
	 *
	 * canEvent.dispatch.call(obj, "foo", ["baz", "quux"]);  // -> nothing is logged
	 * ```
	 *
	 * @param {Object} obj the object to unbind an event handler from
	 * @param {String} eventName the name of the event to unbind the handler from
	 * @param {function(*)} callback the handler function to unbind from the event
	 */offEvent:function(obj,eventName,callback,queue){if(obj){var offEvent=obj[canSymbol_1_7_0_canSymbol.for("can.offEvent")];if(offEvent!==undefined){return offEvent.call(obj,eventName,callback,queue);}else if(obj.removeEventListener){obj.removeEventListener(eventName,callback,queue);}}},/**
	 * @function {function} can-reflect/setPriority setPriority
	 * @parent can-reflect/observe
	 * @description  Provide a priority for when an observable that derives its
	 * value should be re-evaluated.
	 *
	 * @signature `setPriority(obj, priority)`
	 *
	 * Calls an underlying `@@can.setPriority` symbol on `obj` if it exists with `priorty`.
	 * Returns `true` if a priority was set, `false` if otherwise.
	 *
	 * Lower priorities (`0` being the lowest), will be an indication to run earlier than
	 * higher priorities.
	 *
	 * ```js
	 * var obj = canReflect.assignSymbols({},{
	 *   "can.setPriority": function(priority){
	 *     return this.priority = priority;
	 *   }
	 * });
	 *
	 * canReflect.setPriority(obj, 0) //-> true
	 * obj.priority //-> 0
	 *
	 * canReflect.setPriority({},20) //-> false
	 * ```
	 *
	 * @param {Object} obj An observable that will update its priority.
	 * @param {Number} priority The priority number.  Lower priorities (`0` being the lowest),
	 * indicate to run earlier than higher priorities.
	 * @return {Boolean} `true` if a priority was able to be set, `false` if otherwise.
	 *
	 * @body
	 *
	 * ## Use
	 *
	 * There's often a need to specify the order of re-evaluation for
	 * __observables__ that derive (or compute) their value from other observables.
	 *
	 * This is needed by templates to avoid unnecessary re-evaluation.  Say we had the following template:
	 *
	 * ```js
	 * {{#if value}}
	 *   {{value}}
	 * {{/if}}
	 * ```
	 *
	 * If `value` became falsey, we'd want the `{{#if}}` to be aware of it before
	 * the `{{value}}` magic tags updated. We can do that by setting priorities:
	 *
	 * ```js
	 * canReflect.setPriority(magicIfObservable, 0);
	 * canReflect.setPriority(magicValueObservable,1);
	 * ```
	 *
	 * Internally, those observables will use that `priority` to register their
	 * re-evaluation with the `derive` queue in [can-queues].
	 *
	 */setPriority:function(obj,priority){if(obj){var setPriority=obj[canSymbol_1_7_0_canSymbol.for("can.setPriority")];if(setPriority!==undefined){setPriority.call(obj,priority);return true;}}return false;},/**
	 * @function {function} can-reflect/getPriority getPriority
	 * @parent can-reflect/observe
	 * @description  Read the priority for an observable that derives its
	 * value.
	 *
	 * @signature `getPriority(obj)`
	 *
	 * Calls an underlying `@@can.getPriority` symbol on `obj` if it exists
	 * and returns its value. Read [can-reflect/setPriority] for more information.
	 *
	 *
	 *
	 * @param {Object} obj An observable.
	 * @return {Undefined|Number} Returns the priority number if
	 * available, undefined if this object does not support the `can.getPriority`
	 * symbol.
	 *
	 * @body
	 *
	 */getPriority:function(obj){if(obj){var getPriority=obj[canSymbol_1_7_0_canSymbol.for("can.getPriority")];if(getPriority!==undefined){return getPriority.call(obj);}}return undefined;}};// IE-remove-start
var ArrayMap;if(typeof Map==="function"){ArrayMap=Map;}else {// IE-remove-start
var isEven=function isEven(num){return num%2===0;};// A simple map that stores items in an array.
// like [key, value]
// You can find the value by searching for the key and then +1.
ArrayMap=function(){this.contents=[];};ArrayMap.prototype={/**
		 * Get an index of a key. Because we store boths keys and values in
		 * a flat array, we ensure we are getting a key by checking that it is an
		 * even number index (all keys are even number indexed).
		 **/_getIndex:function(key){var idx;do{idx=this.contents.indexOf(key,idx);}while(idx!==-1&&!isEven(idx));return idx;},has:function(key){return this._getIndex(key)!==-1;},get:function(key){var idx=this._getIndex(key);if(idx!==-1){return this.contents[idx+1];}},set:function(key,value){var idx=this._getIndex(key);if(idx!==-1){// Key already exists, replace the value.
this.contents[idx+1]=value;}else {this.contents.push(key);this.contents.push(value);}},"delete":function(key){var idx=this._getIndex(key);if(idx!==-1){// Key already exists, replace the value.
this.contents.splice(idx,2);}}};// IE-remove-end
}var hasOwnProperty$5=Object.prototype.hasOwnProperty;var shapeReflections;var shiftFirstArgumentToThis=function(func){return function(){var args=[this];args.push.apply(args,arguments);return func.apply(null,args);};};var getKeyValueSymbol$1=canSymbol_1_7_0_canSymbol.for("can.getKeyValue");var shiftedGetKeyValue=shiftFirstArgumentToThis(getSet.getKeyValue);var setKeyValueSymbol$1=canSymbol_1_7_0_canSymbol.for("can.setKeyValue");var shiftedSetKeyValue=shiftFirstArgumentToThis(getSet.setKeyValue);var sizeSymbol=canSymbol_1_7_0_canSymbol.for("can.size");var hasUpdateSymbol=helpers.makeGetFirstSymbolValue(["can.updateDeep","can.assignDeep","can.setKeyValue"]);var shouldUpdateOrAssign=function(obj){return type.isPlainObject(obj)||Array.isArray(obj)||!!hasUpdateSymbol(obj);};// is the value itself its serialized value
function isSerializedHelper(obj){if(type.isPrimitive(obj)){return true;}if(hasUpdateSymbol(obj)){return false;}return type.isBuiltIn(obj)&&!type.isPlainObject(obj)&&!Array.isArray(obj)&&!type.isObservableLike(obj);}// IE11 doesn't support primitives
var Object_Keys;try{Object_Keys=Object.keys;}catch(e){Object_Keys=function(obj){if(type.isPrimitive(obj)){return [];}else {return Object.keys(obj);}};}function createSerializeMap(Type){var MapType=Type||ArrayMap;return {unwrap:new MapType(),serialize:new MapType(),isSerializing:{unwrap:new MapType(),serialize:new MapType()},circularReferenceIsSerializing:{unwrap:new MapType(),serialize:new MapType()}};}function makeSerializer(methodName,symbolsToCheck){// A local variable that is shared with all operations that occur withing a single
// outer call to serialize()
var serializeMap=null;// Holds the value of running serialize(), preserving the same map for all
// internal instances.
function SerializeOperation(MapType){this.first=!serializeMap;if(this.first){serializeMap=createSerializeMap(MapType);}this.map=serializeMap;this.result=null;}SerializeOperation.prototype.end=function(){// If this is the first, outer call, clean up the serializeMap.
if(this.first){serializeMap=null;}return this.result;};return function serializer(value,MapType){if(isSerializedHelper(value)){return value;}var operation=new SerializeOperation(MapType);if(type.isValueLike(value)){operation.result=this[methodName](getSet.getValue(value));}else {// Date, RegEx and other Built-ins are handled above
// only want to do something if it's intended to be serialized
// or do nothing for a POJO
var isListLike=type.isIteratorLike(value)||type.isMoreListLikeThanMapLike(value);operation.result=isListLike?[]:{};// handle maping to what is serialized
if(operation.map[methodName].has(value)){// if we are in the process of serializing the first time, setup circular reference detection.
if(operation.map.isSerializing[methodName].has(value)){operation.map.circularReferenceIsSerializing[methodName].set(value,true);}return operation.map[methodName].get(value);}else {operation.map[methodName].set(value,operation.result);}for(var i=0,len=symbolsToCheck.length;i<len;i++){var serializer=value[symbolsToCheck[i]];if(serializer){// mark that we are serializing
operation.map.isSerializing[methodName].set(value,true);var oldResult=operation.result;operation.result=serializer.call(value,oldResult);operation.map.isSerializing[methodName].delete(value);// if the result differs, but this was circular, blow up.
if(operation.result!==oldResult){// jshint -W073
if(operation.map.circularReferenceIsSerializing[methodName].has(value)){// Circular references should use a custom serializer
// that sets the serialized value on the object
// passed to it as the first argument e.g.
// function(proto){
//   return proto.a = canReflect.serialize(this.a);
// }
operation.end();throw new Error("Cannot serialize cirular reference!");}operation.map[methodName].set(value,operation.result);}return operation.end();}}if(typeof obj==='function'){operation.map[methodName].set(value,value);operation.result=value;}else if(isListLike){this.eachIndex(value,function(childValue,index){operation.result[index]=this[methodName](childValue);},this);}else {this.eachKey(value,function(childValue,prop){operation.result[prop]=this[methodName](childValue);},this);}}return operation.end();};}// returns a Map type of the keys mapped to true
var makeMap;if(typeof Map!=="undefined"){makeMap=function(keys){var map=new Map();shapeReflections.eachIndex(keys,function(key){map.set(key,true);});return map;};}else {makeMap=function(keys){var map={};keys.forEach(function(key){map[key]=true;});return {get:function(key){return map[key];},set:function(key,value){map[key]=value;},keys:function(){return keys;}};};}// creates an optimized hasOwnKey lookup.
// If the object has hasOwnKey, then we just use that.
// Otherwise, try to put all keys in a map.
var fastHasOwnKey=function(obj){var hasOwnKey=obj[canSymbol_1_7_0_canSymbol.for("can.hasOwnKey")];if(hasOwnKey){return hasOwnKey.bind(obj);}else {var map=makeMap(shapeReflections.getOwnEnumerableKeys(obj));return function(key){return map.get(key);};}};// combines patches if it makes sense
function addPatch(patches,patch){var lastPatch=patches[patches.length-1];if(lastPatch){// same number of deletes and counts as the index is back
if(lastPatch.deleteCount===lastPatch.insert.length&&patch.index-lastPatch.index===lastPatch.deleteCount){lastPatch.insert.push.apply(lastPatch.insert,patch.insert);lastPatch.deleteCount+=patch.deleteCount;return;}}patches.push(patch);}function updateDeepList(target,source,isAssign){var sourceArray=this.toArray(source);// jshint ignore:line
var patches=[],lastIndex=-1;this.eachIndex(target,function(curVal,index){// jshint ignore:line
lastIndex=index;// If target has more items than the source.
if(index>=sourceArray.length){if(!isAssign){// add a patch that removes the last items
addPatch(patches,{index:index,deleteCount:target.length-index+1,insert:[]});}return false;}var newVal=sourceArray[index];if(type.isPrimitive(curVal)||type.isPrimitive(newVal)||shouldUpdateOrAssign(curVal)===false){addPatch(patches,{index:index,deleteCount:1,insert:[newVal]});}else {if(isAssign===true){this.assignDeep(curVal,newVal);}else {this.updateDeep(curVal,newVal);}}},this);// jshint ignore:line
// add items at the end
if(sourceArray.length>lastIndex){addPatch(patches,{index:lastIndex+1,deleteCount:0,insert:sourceArray.slice(lastIndex+1)});}for(var i=0,patchLen=patches.length;i<patchLen;i++){var patch=patches[i];getSet.splice(target,patch.index,patch.deleteCount,patch.insert);}return target;}shapeReflections={/**
	 * @function {Object, function(*), [Object]} can-reflect.each each
	 * @parent can-reflect/shape
	 * @description  Iterate a List-like or Map-like, calling `callback` on each keyed or indexed property
	 *
	 * @signature `each(obj, callback, context)`
	 *
	 * If `obj` is a List-like or an Iterator-like, `each` functions as [can-reflect.eachIndex eachIndex],
	 * iterating over numeric indexes from 0 to `obj.length - 1` and calling `callback` with each property and
	 * index, optionally with `context` as `this` (defaulting to `obj`).  If not, `each` functions as
	 * [can-reflect.eachKey eachKey],
	 * iterating over every key on `obj` and calling `callback` on each one.
	 *
	 * ```js
	 * var foo = new DefineMap({ bar: "baz" });
	 * var quux = new DefineList([ "thud", "jeek" ]);
	 *
	 * canReflect.each(foo, console.log, console); // -> logs 'baz bar {foo}'
	 * canReflect.each(quux, console.log, console); // -> logs 'thud 0 {quux}'; logs 'jeek 1 {quux}'
	 * ```
	 *
	 * @param  {Object}   obj     The object to iterate over
	 * @param  {Function(*, ValueLike)} callback a function that receives each item in the ListLike or MapLike
	 * @param  {[Object]}   context  an optional `this` context for calling the callback
	 * @return {Array} the result of calling [can-reflect.eachIndex `eachIndex`] if `obj` is a ListLike,
	 * or [can-reflect.eachKey `eachKey`] if a MapLike.
	 */each:function(obj,callback,context){// if something is more "list like" .. use eachIndex
if(type.isIteratorLike(obj)||type.isMoreListLikeThanMapLike(obj)){return shapeReflections.eachIndex(obj,callback,context);}else {return shapeReflections.eachKey(obj,callback,context);}},/**
	 * @function {ListLike, function(*), [Object]} can-reflect.eachIndex eachIndex
	 * @parent can-reflect/shape
	 * @description  Iterate a ListLike calling `callback` on each numerically indexed element
	 *
	 * @signature `eachIndex(list, callback, context)`
	 *
	 * For each numeric index from 0 to `list.length - 1`, call `callback`, passing the current
	 * property value, the current index, and `list`, and optionally setting `this` as `context`
	 * if specified (otherwise use the current property value).
	 *
	 * ```js
	 * var foo = new DefineList([ "bar", "baz" ]);
	 *
	 * canReflect.eachIndex(foo, console.log, console); // -> logs 'bar 0 {foo}'; logs 'baz 1 {foo}'
	 * ```
	 *
	 * @param  {ListLike}   list     The list to iterate over
	 * @param  {Function(*, Number)} callback a function that receives each item
	 * @param  {[Object]}   context  an optional `this` context for calling the callback
	 * @return {ListLike}   the original list
	 */eachIndex:function(list,callback,context){// each index in something list-like. Uses iterator if it has it.
if(Array.isArray(list)){return shapeReflections.eachListLike(list,callback,context);}else {var iter,iterator=list[canSymbol_1_7_0_canSymbol.iterator];if(type.isIteratorLike(list)){// we are looping through an iterator
iter=list;}else if(iterator){iter=iterator.call(list);}// fast-path arrays
if(iter){var res,index=0;while(!(res=iter.next()).done){if(callback.call(context||list,res.value,index++,list)===false){break;}}}else {shapeReflections.eachListLike(list,callback,context);}}return list;},eachListLike:function(list,callback,context){var index=-1;var length=list.length;if(length===undefined){var size=list[sizeSymbol];if(size){length=size.call(list);}else {throw new Error("can-reflect: unable to iterate.");}}while(++index<length){var item=list[index];if(callback.call(context||item,item,index,list)===false){break;}}return list;},/**
	 * @function can-reflect.toArray toArray
	 * @parent can-reflect/shape
	 * @description  convert the values of any MapLike or ListLike into an array
	 *
	 * @signature `toArray(obj)`
	 *
	 * Convert the values of any Map-like or List-like into a JavaScript Array.  If a Map-like,
	 * key data is discarded and only value data is preserved.
	 *
	 * ```js
	 * var foo = new DefineList(["bar", "baz"]);
	 * var quux = new DefineMap({ thud: "jeek" });
	 * ```
	 *
	 * canReflect.toArray(foo); // -> ["bar", "baz"]
	 * canReflect.toArray(quux): // -> ["jeek"]
	 *
	 * @param  {Object} obj Any object, whether MapLike or ListLike
	 * @return {Array}  an array of the values of `obj`
	 */toArray:function(obj){var arr=[];shapeReflections.each(obj,function(value){arr.push(value);});return arr;},/**
	 * @function can-reflect.eachKey eachKey
	 * @parent can-reflect/shape
	 * @description Iterate over a MapLike, calling `callback` on each enumerable property
	 *
	 * @signature `eachKey(obj, callback, context)`
	 *
	 * Iterate all own enumerable properties on Map-like `obj`
	 * (using [can-reflect/shape/getOwnEnumerableKeys canReflect.getOwnEnumerableKeys]), and call
	 * `callback` with the property value, the property key, and `obj`, and optionally setting
	 * `this` on the callback as `context` if provided, `obj` otherwise.
	 *
	 * ```js
	 * var foo = new DefineMap({ bar: "baz" });
	 *
	 * canReflect.eachKey(foo, console.log, console); // logs 'baz bar {foo}'
	 * ```
	 *
	 * @param  {Object}   obj   The object to iterate over
	 * @param  {Function(*, String)} callback The callback to call on each enumerable property value
	 * @param  {[Object]}   context  an optional `this` context for calling `callback`
	 * @return {Array}    the enumerable keys of `obj` as an Array
	 */eachKey:function(obj,callback,context){// each key in something map like
// eachOwnEnumerableKey
if(obj){var enumerableKeys=shapeReflections.getOwnEnumerableKeys(obj);// cache getKeyValue method if we can
var getKeyValue=obj[getKeyValueSymbol$1]||shiftedGetKeyValue;return shapeReflections.eachIndex(enumerableKeys,function(key){var value=getKeyValue.call(obj,key);return callback.call(context||obj,value,key,obj);});}return obj;},/**
	 * @function can-reflect.hasOwnKey hasOwnKey
	 * @parent can-reflect/shape
	 * @description  Determine whether an object contains a key on itself, not only on its prototype chain
	 *
	 * @signature `hasOwnKey(obj, key)`
	 *
	 * Return `true` if an object's own properties include the property key `key`, `false` otherwise.
	 * An object may implement [can-symbol/symbols/hasOwnKey @@@@can.hasOwnKey] to override default behavior.
	 * By default, `canReflect.hasOwnKey` will first look for
	 * [can-symbol/symbols/getOwnKey @@@@can.getOwnKey] on `obj`. If present, it will call `@@@@can.getOwnKey` and
	 * test `key` against the returned Array of keys.  If absent, `Object.prototype.hasOwnKey()` is used.
	 *
	 * ```js
	 * var foo = new DefineMap({ "bar": "baz" });
	 *
	 * canReflect.hasOwnKey(foo, "bar"); // -> true
	 * canReflect.hasOwnKey(foo, "each"); // -> false
	 * foo.each // -> function each() {...}
	 * ```
	 *
	 * @param  {Object} obj Any MapLike object
	 * @param  {String} key The key to look up on `obj`
	 * @return {Boolean} `true` if `obj`'s key set contains `key`, `false` otherwise
	 */"hasOwnKey":function(obj,key){// if a key or index
// like has own property
var hasOwnKey=obj[canSymbol_1_7_0_canSymbol.for("can.hasOwnKey")];if(hasOwnKey){return hasOwnKey.call(obj,key);}var getOwnKeys=obj[canSymbol_1_7_0_canSymbol.for("can.getOwnKeys")];if(getOwnKeys){var found=false;shapeReflections.eachIndex(getOwnKeys.call(obj),function(objKey){if(objKey===key){found=true;return false;}});return found;}return hasOwnProperty$5.call(obj,key);},/**
	 * @function can-reflect.getOwnEnumerableKeys getOwnEnumerableKeys
	 * @parent can-reflect/shape
	 * @description Return the list of keys which can be iterated over on an object
	 *
	 * @signature `getOwnEnumerableKeys(obj)`
	 *
	 * Return all keys on `obj` which have been defined as enumerable, either from explicitly setting
	 * `enumerable` on the property descriptor, or by using `=` to set the value of the property without
	 * a key descriptor, but excluding properties that only exist on `obj`'s prototype chain.  The
	 * default behavior can be overridden by implementing
	 * [can-symbol/symbols/getOwnEnumerableKeys @@@@can.getOwnEnumerableKeys] on `obj`.  By default,
	 * `canReflect.getOwnEnumerableKeys` will use [can-symbol/symbols/getOwnKeys @@@@can.getOwnKeys] to
	 * retrieve the set of keys and [can-symbol/symbols/getOwnKeyDescriptor @@@@can.getOwnKeyDescriptor]
	 * to filter for those which are enumerable.  If either symbol is absent from `obj`, `Object.keys`
	 * is used.
	 *
	 * ```js
	 * var foo = new DefineMap({ bar: "baz", [canSymbol.for("quux")]: "thud" });
	 * Object.defineProperty(foo, "jeek", {
	 *   enumerable: true,
	 *   value: "plonk"
	 * });
	 *
	 * canReflect.getOwnEnumerableKeys(foo); // -> ["bar", "jeek"]
	 * ```
	 *
	 * @param  {Object} obj Any Map-like object
	 * @return {Array} the Array of all enumerable keys from the object, either using
	 * [can-symbol/symbols/getOwnEnumerableKeys `@@@@can.getOwnEnumerableKeys`] from `obj`, or filtering
	 * `obj`'s own keys for those which are enumerable.
	 */getOwnEnumerableKeys:function(obj){// own enumerable keys (aliased as keys)
var getOwnEnumerableKeys=obj[canSymbol_1_7_0_canSymbol.for("can.getOwnEnumerableKeys")];if(getOwnEnumerableKeys){return getOwnEnumerableKeys.call(obj);}if(obj[canSymbol_1_7_0_canSymbol.for("can.getOwnKeys")]&&obj[canSymbol_1_7_0_canSymbol.for("can.getOwnKeyDescriptor")]){var keys=[];shapeReflections.eachIndex(shapeReflections.getOwnKeys(obj),function(key){var descriptor=shapeReflections.getOwnKeyDescriptor(obj,key);if(descriptor.enumerable){keys.push(key);}},this);return keys;}/*else if(obj[canSymbol.iterator]){
			var iter = obj[canSymbol.iterator](obj);
			var index = 0;
			var keys;
			return {
				next: function(){
					var res = iter.next();
					if(index++)
				}
			}
			while(!().done) {

				if( callback.call(context || list, res.value, index++, list) === false ){
					break;
				}
			}
		}*/else {return Object_Keys(obj);}},/**
	 * @function can-reflect.getOwnKeys getOwnKeys
	 * @parent can-reflect/shape
	 * @description Return the list of keys on an object, whether or not they can be iterated over
	 *
	 * @signature `getOwnKeys(obj)`
	 *
	 * Return the Array of all String (not Symbol) keys from `obj`, whether they are enumerable or not.  If
	 * [can-symbol/symbols/getOwnKeys @@@@can.getOwnKeys] exists on `obj`, it is called to return
	 * the keys; otherwise, `Object.getOwnPropertyNames()` is used.
	 *
	 * ```js
	 * var foo = new DefineMap({ bar: "baz", [canSymbol.for("quux")]: "thud" });
	 * Object.defineProperty(foo, "jeek", {
	 *   enumerable: false,
	 *   value: "plonk"
	 * });
	 *
	 * canReflect.getOwnKeys(foo); // -> ["bar", "jeek"]
	 * ```
	 *
	 * @param  {Object} obj Any MapLike object
	 * @return {Array} the Array of all String keys from the object.
	 */getOwnKeys:function(obj){// own enumerable&non-enumerable keys (Object.getOwnPropertyNames)
var getOwnKeys=obj[canSymbol_1_7_0_canSymbol.for("can.getOwnKeys")];if(getOwnKeys){return getOwnKeys.call(obj);}else {return Object.getOwnPropertyNames(obj);}},/**
	 * @function can-reflect.getOwnKeyDescriptor getOwnKeyDescriptor
	 * @parent can-reflect/shape
	 * @description Return a property descriptor for a named property on an object.
	 *
	 * @signature `getOwnKeyDescriptor(obj, key)`
	 *
	 *	Return the key descriptor for the property key `key` on the Map-like object `obj`. A key descriptor
	 *	is specified in ECMAScript 5 and contains keys for the property's `configurable` and `enumerable` states,
	 *	as well as either `value` and `writable` for value properties, or `get` and `set` for getter/setter properties.
	 *
	 * The default behavior can be overridden by implementing [can-symbol/symbols/getOwnKeyDescriptor @@@@can.getOwnKeyDescriptor]
	 * on `obj`; otherwise the default is to call `Object.getOwnKeyDescriptor()`.
	 *
	 * ```js
	 * var foo = new DefineMap({ bar: "baz" });
	 *
	 * getOwnKeyDescriptor(foo, "bar"); // -> {configurable: true, writable: true, enumerable: true, value: "baz"}
	 * ```
	 *
	 * @param  {Object} obj Any object with named properties
	 * @param  {String} key The property name to look up on `obj`
	 * @return {Object}   A key descriptor object
	 */getOwnKeyDescriptor:function(obj,key){var getOwnKeyDescriptor=obj[canSymbol_1_7_0_canSymbol.for("can.getOwnKeyDescriptor")];if(getOwnKeyDescriptor){return getOwnKeyDescriptor.call(obj,key);}else {return Object.getOwnPropertyDescriptor(obj,key);}},/**
	 * @function can-reflect.unwrap unwrap
	 * @parent can-reflect/shape
	 * @description Unwraps a map-like or array-like value into an object or array.
	 *
	 *
	 * @signature `unwrap(obj)`
	 *
	 * Recursively unwraps a map-like or list-like object.
	 *
	 * ```js
	 * import canReflect from "can-reflect";
	 *
	 * var map = new DefineMap({foo: "bar"});
	 * canReflect.unwrap(map) //-> {foo: "bar"}
	 * ```
	 *
	 * `unwrap` is similar to [can-reflect.serialize] except it does not try to provide `JSON.stringify()`-safe
	 * objects.  For example, an object with a `Date` instance property value will not be expected to
	 * serialize the date instance:
	 *
	 * ```js
	 * var date = new Date();
	 * var map = new DefineMap({date: date});
	 * canReflect.unwrap(map) //-> {date: date}
	 * ```
	 *
	 * @param {Object} obj A map-like or array-like object.
	 * @return {Object} Returns objects and arrays.
	 */unwrap:makeSerializer("unwrap",[canSymbol_1_7_0_canSymbol.for("can.unwrap")]),/**
	 * @function can-reflect.serialize serialize
	 * @parent can-reflect/shape
	 * @description Serializes an object to a value that can be passed to JSON.stringify.
	 *
	 *
	 * @signature `serialize(obj)`
	 *
	 * Recursively serializes a map-like or list-like object.
	 *
	 * ```js
	 * import canReflect from "can-reflect";
	 * canReflect.serialize({foo: "bar"}) //-> {foo: "bar"}
	 * ```
	 *
	 * It does this by recursively:
	 *
	 *  - Checking if `obj` is a primitive, if it is, returns the value.
	 *  - If `obj` is an object:
	 *    - calling the `@can.serialize` property on the value if it exists.
	 *    - If the `@can.serialize` value doesn't exist, walks through every key-value
	 *      on `obj` and copy to a new object.
	 *
	 * @param {Object} obj A map-like or array-like object.
	 * @return {Object} Returns a plain object or array.
	 */serialize:makeSerializer("serialize",[canSymbol_1_7_0_canSymbol.for("can.serialize"),canSymbol_1_7_0_canSymbol.for("can.unwrap")]),assignMap:function(target,source){// read each key and set it on target
var hasOwnKey=fastHasOwnKey(target);var getKeyValue=target[getKeyValueSymbol$1]||shiftedGetKeyValue;var setKeyValue=target[setKeyValueSymbol$1]||shiftedSetKeyValue;shapeReflections.eachKey(source,function(value,key){// if the target doesn't have this key or the keys are not the same
if(!hasOwnKey(key)||getKeyValue.call(target,key)!==value){setKeyValue.call(target,key,value);}});return target;},assignList:function(target,source){var inserting=shapeReflections.toArray(source);getSet.splice(target,0,inserting,inserting);return target;},/**
	 * @function can-reflect.assign assign
	 * @parent can-reflect/shape
	 * @description Assign one objects values to another
	 *
	 * @signature `.assign(target, source)`
	 *
	 * Copies the values (and properties if map-like) from `source` onto `target`.
	 *
	 * For map-like objects, every enumerable property on `target` is copied:
	 *
	 * ```js
	 * var target = {};
	 * var source = {key : "value"};
	 * var restult = canReflect.assign(target, source);
	 * result === target //-> true
	 * target //-> {key : "value"}
	 * ```
	 *
	 * For Arrays, enumerated values are copied over, but the length of the array will not be
	 * trunkated.  Use [can-reflect.update] for trunkating.
	 *
	 * ```js
	 * var target = ["a","b","c"];
	 * var source = ["A","B"];
	 * canReflect.assign(target, source);
	 * target //-> ["A","B","c"]
	 * ```
	 *
	 * @param  {Object} target The value that will be updated with `source`'s values.
	 * @param  {Object} source A source of values to copy to `target`.
	 * @return {Object} The target.
	 */assign:function(target,source){if(type.isIteratorLike(source)||type.isMoreListLikeThanMapLike(source)){// copy to array and add these keys in place
shapeReflections.assignList(target,source);}else {shapeReflections.assignMap(target,source);}return target;},assignDeepMap:function(target,source){var hasOwnKey=fastHasOwnKey(target);var getKeyValue=target[getKeyValueSymbol$1]||shiftedGetKeyValue;var setKeyValue=target[setKeyValueSymbol$1]||shiftedSetKeyValue;shapeReflections.eachKey(source,function(newVal,key){if(!hasOwnKey(key)){// set no matter what
getSet.setKeyValue(target,key,newVal);}else {var curVal=getKeyValue.call(target,key);// if either was primitive, no recursive update possible
if(newVal===curVal);else if(type.isPrimitive(curVal)||type.isPrimitive(newVal)||shouldUpdateOrAssign(curVal)===false){setKeyValue.call(target,key,newVal);}else {shapeReflections.assignDeep(curVal,newVal);}}},this);return target;},assignDeepList:function(target,source){return updateDeepList.call(this,target,source,true);},/**
	 * @function can-reflect.assignDeep assignDeep
	 * @parent can-reflect/shape
	 * @description Assign one objects values to another, and performs the same action for all child values.
	 *
	 * @signature `.assignDeep(target, source)`
	 *
	 * Copies the values (and properties if map-like) from `source` onto `target` and repeates for all child
	 * values.
	 *
	 * For map-like objects, every enumerable property on `target` is copied:
	 *
	 * ```js
	 * var target = {name: {first: "Justin"}};
	 * var source = {name: {last: "Meyer"}};
	 * var restult = canReflect.assignDeep(target, source);
	 * target //->  {name: {first: "Justin", last: "Meyer"}}
	 * ```
	 *
	 * An object can control the behavior of `assignDeep` using the [can-symbol/symbols/assignDeep] symbol.
	 *
	 * @param  {Object} target The value that will be updated with `source`'s values.
	 * @param  {Object} source A source of values to copy to `target`.
	 * @return {Object} The target.
	 */assignDeep:function(target,source){var assignDeep=target[canSymbol_1_7_0_canSymbol.for("can.assignDeep")];if(assignDeep){assignDeep.call(target,source);}else if(type.isMoreListLikeThanMapLike(source)){// list-like
shapeReflections.assignDeepList(target,source);}else {// map-like
shapeReflections.assignDeepMap(target,source);}return target;},updateMap:function(target,source){var sourceKeyMap=makeMap(shapeReflections.getOwnEnumerableKeys(source));var sourceGetKeyValue=source[getKeyValueSymbol$1]||shiftedGetKeyValue;var targetSetKeyValue=target[setKeyValueSymbol$1]||shiftedSetKeyValue;shapeReflections.eachKey(target,function(curVal,key){if(!sourceKeyMap.get(key)){getSet.deleteKeyValue(target,key);return;}sourceKeyMap.set(key,false);var newVal=sourceGetKeyValue.call(source,key);// if either was primitive, no recursive update possible
if(newVal!==curVal){targetSetKeyValue.call(target,key,newVal);}},this);shapeReflections.eachIndex(sourceKeyMap.keys(),function(key){if(sourceKeyMap.get(key)){targetSetKeyValue.call(target,key,sourceGetKeyValue.call(source,key));}});return target;},updateList:function(target,source){var inserting=shapeReflections.toArray(source);getSet.splice(target,0,target,inserting);return target;},/**
	 * @function can-reflect.update update
	 * @parent can-reflect/shape
	 * @description Updates the values of an object match the values of an other object.
	 *
	 * @signature `.update(target, source)`
	 *
	 * Updates the values (and properties if map-like) of `target` to match the values of `source`.
	 * Properties of `target` that are not on `source` will be removed. This does
	 * not recursively update.  For that, use [can-reflect.updateDeep].
	 *
	 * For map-like objects, every enumerable property on `target` is copied:
	 *
	 * ```js
	 * var target = {name: {first: "Justin"}, age: 34};
	 * var source = {name: {last: "Meyer"}};
	 * var result = canReflect.update(target, source);
	 * target //->  {name: {last: "Meyer"}}
	 * ```
	 *
	 * With Arrays all items of the source will be replaced with the new items.
	 *
	 * ```js
	 * var target = ["a","b","c"];
	 * var source = ["A","B"];
	 * canReflect.update(target, source);
	 * target //-> ["A","B"]
	 * ```
	 *
	 * @param  {Object} target The value that will be updated with `source`'s values.
	 * @param  {Object} source A source of values to copy to `target`.
	 * @return {Object} The target.
	 */update:function(target,source){if(type.isIteratorLike(source)||type.isMoreListLikeThanMapLike(source)){// copy to array and add these keys in place
shapeReflections.updateList(target,source);}else {shapeReflections.updateMap(target,source);}return target;},updateDeepMap:function(target,source){var sourceKeyMap=makeMap(shapeReflections.getOwnEnumerableKeys(source));var sourceGetKeyValue=source[getKeyValueSymbol$1]||shiftedGetKeyValue;var targetSetKeyValue=target[setKeyValueSymbol$1]||shiftedSetKeyValue;shapeReflections.eachKey(target,function(curVal,key){if(!sourceKeyMap.get(key)){getSet.deleteKeyValue(target,key);return;}sourceKeyMap.set(key,false);var newVal=sourceGetKeyValue.call(source,key);// if either was primitive, no recursive update possible
if(type.isPrimitive(curVal)||type.isPrimitive(newVal)||shouldUpdateOrAssign(curVal)===false){targetSetKeyValue.call(target,key,newVal);}else {shapeReflections.updateDeep(curVal,newVal);}},this);shapeReflections.eachIndex(sourceKeyMap.keys(),function(key){if(sourceKeyMap.get(key)){targetSetKeyValue.call(target,key,sourceGetKeyValue.call(source,key));}});return target;},updateDeepList:function(target,source){return updateDeepList.call(this,target,source);},/**
	 * @function can-reflect.updateDeep updateDeep
	 * @parent can-reflect/shape
	 * @description Makes the values of an object match the values of an other object including all children values.
	 *
	 * @signature `.updateDeep(target, source)`
	 *
	 * Updates the values (and properties if map-like) of `target` to match the values of `source`.
	 * Removes properties from `target` that are not on `source`.
	 *
	 * For map-like objects, every enumerable property on `target` is copied:
	 *
	 * ```js
	 * var target = {name: {first: "Justin"}, age: 34};
	 * var source = {name: {last: "Meyer"}};
	 * var result = canReflect.updateDeep(target, source);
	 * target //->  {name: {last: "Meyer"}}
	 * ```
	 *
	 * An object can control the behavior of `updateDeep` using the [can-symbol/symbols/updateDeep] symbol.
	 *
	 * For list-like objects, a diff and patch strategy is used.  This attempts to limit the number of changes.
	 *
	 * @param  {Object} target The value that will be updated with `source`'s values.
	 * @param  {Object} source A source of values to copy to `target`.
	 * @return {Object} The target.
	 */updateDeep:function(target,source){var updateDeep=target[canSymbol_1_7_0_canSymbol.for("can.updateDeep")];if(updateDeep){updateDeep.call(target,source);}else if(type.isMoreListLikeThanMapLike(source)){// list-like
shapeReflections.updateDeepList(target,source);}else {// map-like
shapeReflections.updateDeepMap(target,source);}return target;},// walks up the whole prototype chain
/**
	 * @function can-reflect.hasKey hasKey
	 * @parent can-reflect/shape
	 * @description Determine whether an object contains a key on itself or its prototype chain
	 *
	 * @signature `hasKey(obj, key)`
	 *
	 * Return `true` if an object's properties include the property key `key` or an object on its prototype
	 * chain's properties include the key `key`, `false` otherwise.
	 * An object may implement [can-symbol/symbols/hasKey @@@@can.hasKey] to override default behavior.
	 * By default, `canReflect.hasKey` will use [can-reflect.hasOwnKey] and return true if the key is present.
	 * If `hasOwnKey` returns false, the [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in in Operator] will be used.
	 *
	 * ```js
	 * var foo = new DefineMap({ "bar": "baz" });
	 *
	 * canReflect.in(foo, "bar"); // -> true
	 * canReflect.in(foo, "each"); // -> true
	 * foo.each // -> function each() {...}
	 * ```
	 *
	 * @param  {Object} obj Any MapLike object
	 * @param  {String} key The key to look up on `obj`
	 * @return {Boolean} `true` if `obj`'s key set contains `key` or an object on its prototype chain's key set contains `key`, `false` otherwise
	 */hasKey:function(obj,key){if(obj==null){return false;}if(type.isPrimitive(obj)){if(hasOwnProperty$5.call(obj,key)){return true;}else {var proto;{proto=Object.getPrototypeOf(obj);}if(proto!==undefined){return key in proto;}else {// IE-remove-start
return obj[key]!==undefined;// IE-remove-end
}}}var hasKey=obj[canSymbol_1_7_0_canSymbol.for("can.hasKey")];if(hasKey){return hasKey.call(obj,key);}var found=shapeReflections.hasOwnKey(obj,key);return found||key in obj;},getAllEnumerableKeys:function(){},getAllKeys:function(){},/**
	 * @function can-reflect.assignSymbols assignSymbols
	 * @parent can-reflect/shape
	 * @description Assign well known symbols and values to an object.
	 *
	 * @signature `.assignSymbols(target, source)`
	 *
	 * Converts each property name on the `source` object to a [can-symbol.for well known symbol]
	 * and uses that symbol to set the corresponding value on target.
	 *
	 * This is used to easily set symbols correctly even when symbol isn't natively supported.
	 *
	 * ```js
	 * canReflect.assignSymbols(Map.prototype, {
	 *   "can.getKeyValue": Map.prototype.get
	 * })
	 * ```
	 *
	 * If a `source` property name matches a symbol on `Symbol` (like `iterator` on `Symbol.iterator`),
	 * that symbol will be used:
	 *
	 * ```js
	 * canReflect.assignSymbols(ArrayLike.prototype, {
	 *   "iterator": function() { ... }
	 * })
	 * ArrayLike.prototype[Symbol.iterator] = function(){ ... }
	 * ```
	 *
	 * @param  {Object} target The value that will be updated with `source`'s symbols and values.
	 * @param  {Object<name,value>} source A source of symbol names and values to copy to `target`.
	 * @return {Object} The target.
	 */assignSymbols:function(target,source){shapeReflections.eachKey(source,function(value,key){var symbol=type.isSymbolLike(canSymbol_1_7_0_canSymbol[key])?canSymbol_1_7_0_canSymbol[key]:canSymbol_1_7_0_canSymbol.for(key);getSet.setKeyValue(target,symbol,value);});return target;},isSerialized:isSerializedHelper,/**
	 * @function can-reflect.size size
	 * @parent can-reflect/shape
	 * @description Return the number of items in the collection.
	 *
	 * @signature `.size(target)`
	 *
	 * Returns the number of items contained in `target`. Target can
	 * provide the size using the [can-symbol/symbols/size] symbol.
	 *
	 * If the `target` has a numeric `length` property that is greater than or equal to 0, that
	 * `length` will be returned.
	 *
	 * ```js
	 * canReflect.size([1,2,3]) //-> 3
	 * ```
	 *
	 * If the `target` is [can-reflect.isListLike], the values of the list will be counted.
	 *
	 * If the `target` is a plain JS object, the number of enumerable properties will be returned.
	 *
	 * ```js
	 * canReflect.size({foo:"bar"}) //-> 1
	 * ```
	 *
	 * If the `target` is anything else, `undefined` is returned.
	 *
	 * @param  {Object} target The container object.
	 * @return {Number} The number of values in the target.
	 */size:function(obj){if(obj==null){return 0;}var size=obj[sizeSymbol];var count=0;if(size){return size.call(obj);}else if(helpers.hasLength(obj)){return obj.length;}else if(type.isListLike(obj)){shapeReflections.eachIndex(obj,function(){count++;});return count;}else if(obj){return shapeReflections.getOwnEnumerableKeys(obj).length;}else {return undefined;}},/**
	 * @function {Function, String|Symbol, Object} can-reflect.defineInstanceKey defineInstanceKey
	 * @parent can-reflect/shape
	 * @description Create a key for all instances of a constructor.
	 *
	 * @signature `defineInstanceKey(cls, key, properties)`
	 *
	 * Define the property `key` on the prototype of the constructor `cls` using the symbolic
	 * property [can-symbol/symbols/defineInstanceKey @@can.defineInstanceKey] if it exists; otherwise
	 * use `Object.defineProperty()` to define the property.  The property definition
	 *
	 * @param  {Function} cls  a Constructor function
	 * @param  {String} key     the String or Symbol key to set.
	 * @param  {Object} properties a JavaScript property descriptor
	 */defineInstanceKey:function(cls,key,properties){var defineInstanceKey=cls[canSymbol_1_7_0_canSymbol.for("can.defineInstanceKey")];if(defineInstanceKey){return defineInstanceKey.call(cls,key,properties);}var proto=cls.prototype;defineInstanceKey=proto[canSymbol_1_7_0_canSymbol.for("can.defineInstanceKey")];if(defineInstanceKey){defineInstanceKey.call(proto,key,properties);}else {Object.defineProperty(proto,key,shapeReflections.assign({configurable:true,enumerable:!type.isSymbolLike(key),writable:true},properties));}}};shapeReflections.isSerializable=shapeReflections.isSerialized;shapeReflections.keys=shapeReflections.getOwnEnumerableKeys;var shape=shapeReflections;var getSchemaSymbol=canSymbol_1_7_0_canSymbol.for("can.getSchema"),isMemberSymbol=canSymbol_1_7_0_canSymbol.for("can.isMember"),newSymbol=canSymbol_1_7_0_canSymbol.for("can.new");function comparator$1(a,b){return a.localeCompare(b);}function sort$2(obj){if(type.isPrimitive(obj)||obj instanceof Date){return obj;}var out;if(type.isListLike(obj)){out=[];shape.eachKey(obj,function(item){out.push(sort$2(item));});return out;}if(type.isMapLike(obj)){out={};shape.getOwnKeys(obj).sort(comparator$1).forEach(function(key){out[key]=sort$2(getSet.getKeyValue(obj,key));});return out;}return obj;}function isPrimitiveConverter(Type){return Type===Number||Type===String||Type===Boolean;}var schemaReflections={/**
	 * @function can-reflect.getSchema getSchema
	 * @parent can-reflect/shape
	 * @description Returns the schema for a type or value.
	 *
	 * @signature `getSchema(valueOrType)`
	 *
     * Calls the `@can.getSchema` property on the `valueOrType` argument. If it's not available and
     * `valueOrType` has a `constructor` property, calls the `constructor[@can.getSchema]`
     * and returns the result.
     *
     * ```js
     * import canReflect from "can-reflect";
     *
     * var Type = DefineMap.extend({
     *   name: "string",
     *   id: "number"
     * });
     *
     * canReflect.getSchema( Type ) //-> {
     * //   type: "map",
     * //   keys: {
     * //     name: MaybeString
     * //     id: MaybeNumber
     * //   }
     * // }
     * ```
	 *
	 *
	 * @param  {Object|Function} valueOrType A value, constructor function, or class to get the schema from.
	 * @return {Object} A schema. A schema for a [can-reflect.isMapLike] looks like:
     *
     *
     * ```js
     * {
     *   type: "map",
     *   identity: ["id"],
     *   keys: {
     *     id: Number,
     *     name: String,
     *     complete: Boolean,
     *     owner: User
     *   }
     * }
     * ```
     *
     * A schema for a list looks like:
     *
     * ```js
     * {
     *   type: "list",
     *   values: String
     *   keys: {
     *     count: Number
     *   }
     * }
     * ```
     *
	 */getSchema:function(type$$1){if(type$$1===undefined||type$$1===null){return type$$1;}var getSchema=type$$1[getSchemaSymbol];if(getSchema===undefined){type$$1=type$$1.constructor;getSchema=type$$1&&type$$1[getSchemaSymbol];}return getSchema!==undefined?getSchema.call(type$$1):undefined;},/**
	 * @function can-reflect.getIdentity getIdentity
	 * @parent can-reflect/shape
	 * @description Get a unique primitive representing an object.
	 *
	 * @signature `getIdentity( object [,schema] )`
	 *
	 * This uses the object's schema, or the provided schema to return a unique string or number that
     * represents the object.
     *
     * ```js
     * import canReflect from "can-reflect";
     *
     * canReflect.getIdentity({id: 5}, {identity: ["id"]}) //-> 5
     * ```
     *
     * If the schema has multiple identity keys, the identity keys and values
     * are return stringified (and sorted):
     *
     * ```js
     * canReflect.getIdentity(
     *   {z: "Z", a: "A", foo: "bar"},
     *   {identity: ["a","b"]}) //-> '{"a":"A","b":"B"}'
     * ```
	 *
	 * @param  {Object|Function} object A map-like object.
     * @param {Object} [schema] A schema object with an `identity` array of the unique
     * keys of the object like:
     *   ```js
     *   {identity: ["id"]}
     *   ```
	 * @return {Number|String} A value that uniquely represents the object.
	 */getIdentity:function(value,schema){schema=schema||schemaReflections.getSchema(value);if(schema===undefined){throw new Error("can-reflect.getIdentity - Unable to find a schema for the given value.");}var identity=schema.identity;if(!identity||identity.length===0){throw new Error("can-reflect.getIdentity - Provided schema lacks an identity property.");}else if(identity.length===1){return getSet.getKeyValue(value,identity[0]);}else {var id={};identity.forEach(function(key){id[key]=getSet.getKeyValue(value,key);});return JSON.stringify(schemaReflections.cloneKeySort(id));}},/**
	 * @function can-reflect.cloneKeySort cloneKeySort
	 * @parent can-reflect/shape
	 * @description Copy a value while sorting its keys.
	 *
	 * @signature `cloneKeySort(value)`
	 *
     * `cloneKeySort` returns a copy of `value` with its [can-reflect.isMapLike]
     * key values sorted. If you just want a copy of a value,
     * use [can-reflect.serialize].
     *
     * ```js
     * import canRefect from "can-reflect";
     *
     * canReflect.cloneKeySort({z: "Z", a: "A"}) //-> {a:"A",z:"Z"}
     * ```
     *
     * Nested objects are also sorted.
	 *
     * This is useful if you need to store a representation of an object that can be used as a
     * key.
	 *
	 * @param  {Object} value An object or array.
	 * @return {Object} A copy of the object with its keys sorted.
	 */cloneKeySort:function(obj){return sort$2(obj);},/**
	 * @function can-reflect.convert convert
	 * @parent can-reflect/shape
	 * @description Convert one value to another type.
	 *
	 * @signature `convert(value, Type)`
	 *
     * `convert` attempts to convert `value` to the type specified by `Type`.
     *
     * ```js
     * import canRefect from "can-reflect";
     *
     * canReflect.convert("1", Number) //-> 1
     * ```
     *
     * `convert` works by performing the following logic:
     *
     * 1. If the `Type` is a primitive like `Number`, `String`, `Boolean`, the
     *    `value` will be passed to the `Type` function and the result returned.
     *    ```js
     *    return Type(value);
     *    ```
     * 2. The value will be checked if it is already an instance of the type
     *    by performing the following:
     *    1. If the `Type` has a `can.isMember` symbol value, that value will be used
     *       to determine if the `value` is already an instance.
     *    2. If the `Type` is a [can-reflect.isConstructorLike] function, `instanceof Type`
     *       will be used to check if `value` is already an instance.
     * 3. If `value` is already an instance, `value` will be returned.
     * 4. If `Type` has a `can.new` symbol, `value` will be passed to it and the result
     *    returned.
     * 5. If `Type` is a [can-reflect.isConstructorLike] function, `new Type(value)` will be
     *    called the the result returned.
     * 6. If `Type` is a regular function, `Type(value)` will be called and the result returned.
     * 7. If a value hasn't been returned, an error is thrown.
	 *
	 * @param  {Object|Primitive} value A value to be converted.
     * @param  {Object|Function} Type A constructor function or an object that implements the
     * necessary symbols.
	 * @return {Object} The `value` converted to a member of `Type`.
	 */convert:function(value,Type){if(isPrimitiveConverter(Type)){return Type(value);}// check if value is already a member
var isMemberTest=Type[isMemberSymbol],isMember=false,type$$1=typeof Type,createNew=Type[newSymbol];if(isMemberTest!==undefined){isMember=isMemberTest.call(Type,value);}else if(type$$1==="function"){if(type.isConstructorLike(Type)){isMember=value instanceof Type;}}if(isMember){return value;}if(createNew!==undefined){return createNew.call(Type,value);}else if(type$$1==="function"){if(type.isConstructorLike(Type)){return new Type(value);}else {// call it like a normal function
return Type(value);}}else {throw new Error("can-reflect: Can not convert values into type. Type must provide `can.new` symbol.");}}};var schema=schemaReflections;var getNameSymbol=canSymbol_1_7_0_canSymbol.for("can.getName");/**
 * @function {Object, String} can-reflect.setName setName
 * @parent can-reflect/shape
 * @description Set a human-readable name of an object.
 *
 * @signature `setName(obj, value)`
 *
 * ```js
 * var f = function() {};
 *
 * canReflect.setName(f, "myFunction")
 * f.name //-> "myFunction"
 * ```
 *
 * @param {Object} obj   the object to set on
 * @param {String} value the value to set for the object
 */function setName(obj,nameGetter){if(typeof nameGetter!=="function"){var value=nameGetter;nameGetter=function(){return value;};}Object.defineProperty(obj,getNameSymbol,{value:nameGetter});}/**
 * @function {Object} can-reflect.getName getName
 * @parent can-reflect/shape
 * @description Get the name of an object.
 *
 * @signature `getValue(obj)`
 *
 * @body
 *
 * The [@@@can.getName](can-symbol/symbols/getName.html) symbol is used to
 * provide objects human readable names; the main goal of these names is to help
 * users get a glance of what the object does and what it is used for.
 *
 * There are no hard rules to define names but CanJS uses the following convention
 * for consistent names across its observable types:
 *
 * - The name starts with the observable constructor name
 * - The constructor name is decorated with the following characters based on its type:
 *		- `<>`: for [value-like](can-reflect.isValueLike.html) observables, e.g: `SimpleObservable<>`
 *		- `[]`: for [list-like](can-reflect.isListLike.html) observables, e.g: `DefineList[]`
 *		- `{}`: for [map-like](can-reflect.isMapLike.html) observables, e.g: `DefineMap{}`
 * - Any property that makes the instance unique (like ids) are printed inside
 *    the chars mentioned before.
 *
 * The example below shows how to implement [@@@can.getName](can-symbol/symbols/getName.html),
 * in a value-like observable (similar to [can-simple-observable]).
 *
 * ```js
 * var canReflect = require("can-reflect");
 *
 * function MySimpleObservable(value) {
 *		this.value = value;
 * }
 *
 * canReflect.assignSymbols(MySimpleObservable.prototype, {
 *		"can.getName": function() {
 *			//!steal-remove-start
 *			if (process.env.NODE_ENV !== 'production') {
 *				var value = JSON.stringify(this.value);
 *				return canReflect.getName(this.constructor) + "<" + value + ">";
 *			}
 *			//!steal-remove-end
 *		}
 * });
 * ```
 *
 * With that in place, `MySimpleObservable` can be used like this:
 *
 * ```js
 * var one = new MySimpleObservable(1);
 * canReflect.getName(one); // MySimpleObservable<1>
 * ```
 *
 * @param  {Object} obj The object to get from
 * @return {String} The human-readable name of the object
 */var anonymousID=0;function getName(obj){var type$$1=typeof obj;if(obj===null||type$$1!=="object"&&type$$1!=="function"){return ""+obj;}var nameGetter=obj[getNameSymbol];if(nameGetter){return nameGetter.call(obj);}if(type$$1==="function"){if(!("name"in obj)){// IE doesn't support function.name natively
obj.name="functionIE"+anonymousID++;}return obj.name;}if(obj.constructor&&obj!==obj.constructor){var parent=getName(obj.constructor);if(parent){if(type.isValueLike(obj)){return parent+"<>";}if(type.isMoreListLikeThanMapLike(obj)){return parent+"[]";}if(type.isMapLike(obj)){return parent+"{}";}}}return undefined;}var getName_1={setName:setName,getName:getName};function keysPolyfill(){var keys=[];var currentIndex=0;this.forEach(function(val,key){// jshint ignore:line
keys.push(key);});return {next:function(){return {value:keys[currentIndex],done:currentIndex++===keys.length};}};}if(typeof Map!=="undefined"){shape.assignSymbols(Map.prototype,{"can.getOwnEnumerableKeys":Map.prototype.keys,"can.setKeyValue":Map.prototype.set,"can.getKeyValue":Map.prototype.get,"can.deleteKeyValue":Map.prototype["delete"],"can.hasOwnKey":Map.prototype.has});if(typeof Map.prototype.keys!=="function"){Map.prototype.keys=Map.prototype[canSymbol_1_7_0_canSymbol.for("can.getOwnEnumerableKeys")]=keysPolyfill;}}if(typeof WeakMap!=="undefined"){shape.assignSymbols(WeakMap.prototype,{"can.getOwnEnumerableKeys":function(){throw new Error("can-reflect: WeakMaps do not have enumerable keys.");},"can.setKeyValue":WeakMap.prototype.set,"can.getKeyValue":WeakMap.prototype.get,"can.deleteKeyValue":WeakMap.prototype["delete"],"can.hasOwnKey":WeakMap.prototype.has});}if(typeof Set!=="undefined"){shape.assignSymbols(Set.prototype,{"can.isMoreListLikeThanMapLike":true,"can.updateValues":function(index,removing,adding){if(removing!==adding){shape.each(removing,function(value){this.delete(value);},this);}shape.each(adding,function(value){this.add(value);},this);},"can.size":function(){return this.size;}});// IE11 doesn't support Set.prototype[@@iterator]
if(typeof Set.prototype[canSymbol_1_7_0_canSymbol.iterator]!=="function"){Set.prototype[canSymbol_1_7_0_canSymbol.iterator]=function(){var arr=[];var currentIndex=0;this.forEach(function(val){arr.push(val);});return {next:function(){return {value:arr[currentIndex],done:currentIndex++===arr.length};}};};}}if(typeof WeakSet!=="undefined"){shape.assignSymbols(WeakSet.prototype,{"can.isListLike":true,"can.isMoreListLikeThanMapLike":true,"can.updateValues":function(index,removing,adding){if(removing!==adding){shape.each(removing,function(value){this.delete(value);},this);}shape.each(adding,function(value){this.add(value);},this);},"can.size":function(){throw new Error("can-reflect: WeakSets do not have enumerable keys.");}});}var reflect={};[call,getSet,observe,shape,type,getName_1,schema].forEach(function(reflections){for(var prop in reflections){reflect[prop]=reflections[prop];//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(typeof reflections[prop]==="function"){var propDescriptor=Object.getOwnPropertyDescriptor(reflections[prop],'name');if(!propDescriptor||propDescriptor.writable&&propDescriptor.configurable){Object.defineProperty(reflections[prop],"name",{value:"canReflect."+prop});}}}//!steal-remove-end
}});var canReflect_1_19_2_canReflect=canNamespace_1_0_0_canNamespace.Reflect=reflect;var utils={isContainer:function(current){var type=typeof current;return current&&(type==="object"||type==="function");},strReplacer:/\{([^\}]+)\}/g,parts:function(name){if(Array.isArray(name)){return name;}else {return typeof name!=='undefined'?(name+'').replace(/\[/g,'.').replace(/]/g,'').split('.'):[];}}};var canKey_1_2_1_utils=utils;/**
 * @module {function} can-key/delete/delete
 * @parent can-key
 */var _delete=function deleteAtPath(data,path){var parts=canKey_1_2_1_utils.parts(path);var current=data;for(var i=0;i<parts.length-1;i++){if(current){current=canReflect_1_19_2_canReflect.getKeyValue(current,parts[i]);}}if(current){canReflect_1_19_2_canReflect.deleteKeyValue(current,parts[parts.length-1]);}};/**
 * @module {function} can-key/get/get
 * @parent can-key
 * @description Get properties on deep/nested objects of different types: Object, Map, [can-reflect] types, etc.
 *
 * @signature `get(obj, path)`
 * @param  {Object} obj the object to use as the root for property-based navigation
 * @param  {String} path a String of dot-separated keys, representing a path of properties
 * @return {*}       the value at the property path
 *
 * @body
 *
 * A *path* is a dot-delimited sequence of zero or more property names, such that "foo.bar" means "the property
 * 'bar' of the object at the property 'foo' of the root."  An empty path returns the object passed.
 *
 * ```js
 * var get = require("can-key");
 * console.log(get({a: {b: {c: "foo"}}}, "a.b.c")); // -> "foo"
 * console.log(get({a: {}}, "a.b.c")); // -> undefined
 * console.log(get([{a: {}}, {a: {b: "bar"}}], "a.b")); // -> "bar"
 *
 * var map = new Map();
 * map.set("first", {second: "third"});
 *
 * get(map, "first.second") //-> "third"
 * ```
 */function get$1(obj,name){// The parts of the name we are looking up
// `['App','Models','Recipe']`
var parts=canKey_1_2_1_utils.parts(name);var length=parts.length,current,i,container;if(!length){return obj;}current=obj;// Walk current to the 2nd to last object or until there
// is not a container.
for(i=0;i<length&&canKey_1_2_1_utils.isContainer(current)&&current!==null;i++){container=current;current=canReflect_1_19_2_canReflect.getKeyValue(container,parts[i]);}return current;}var get_1=get$1;/**
 * @module {function} can-key/replace-with/replace-with
 * @parent can-key
 *
 * Replace the templated parts of a string with values from an object.
 *
 * @signature `replaceWith(str, data, replacer, remove)`
 *
 * ```js
 * import replaceWith from "can-key/replace-with/replace-with";
 *
 * replaceWith("foo_{bar}", {bar: "baz"}); // -> "foo_baz"
 * ```
 *
 * @param {String} str String with {curly brace} delimited property names.
 * @param {Object} data Object from which to read properties.
 * @param {function(String,*)} [replacer(key,value)] Function which returns string replacements.  Optional.
 *
 *   ```js
 *   replaceWith("foo_{bar}", {bar: "baz"}, (key, value) => {
 *     return value.toUpperCase();
 *   }); // -> "foo_BAZ"
 *   ```
 *
 *
 * @param {Boolean} shouldRemoveMatchedPaths Whether to remove properties
 * found in delimiters in `str` from `data`.
 * @return {String} the supplied string with delimited properties replaced with their values.
 *
 * @body
 *
 * ```js
 * var replaceWith = require("can-key/replace-with/replace-with");
 * var answer = replaceWith(
 *   '{.}{.}{.}{.}{.} Batman!',
 *   {},
 *   () => 'Na'
 * );
 * // => 'NaNaNaNaNa Batman!'
 * ```
 */var replaceWith=function(str,data,replacer,shouldRemoveMatchedPaths){return str.replace(canKey_1_2_1_utils.strReplacer,function(whole,path){var value=get_1(data,path);if(shouldRemoveMatchedPaths){_delete(data,path);}return replacer?replacer(path,value):value;});};canSymbol_1_7_0_canSymbol.for("can.setValue");/**
 * @module {function} can-key/set/set
 * @parent can-key
 * @description Set properties on deep/nested objects of different types: Object, Map, [can-reflect] types, etc.
 *
 * @signature `set(object, path, value)`
 * @param  {Object} object The object to use as the root for property-based navigation.
 * @param  {String} path A String of dot-separated keys, representing a path of properties.
 * @param  {*} value The new value to be set at the property path.
 * @return {*} The object passed to set (for chaining calls).
 *
 * @body
 *
 * A *path* is a dot-delimited sequence of one or more property names, such that "foo.bar" means "the property
 * 'bar' of the object at the property 'foo' of the root."
 *
 * ```js
 * import set from "can-key/set/set";
 *
 * const object = {a: {b: {c: "foo"}}};
 * set(object, "a.b.c", "bar");
 * // Now object.a.b.c === "bar"
 *
 * var map = new Map();
 * map.set("first", {second: "third"});
 *
 * set(map, "first.second", "3rd");
 * // Now map.first.second === "3rd"
 * ```
 *
 * > **Note:** an error will be thrown if one of the objects in the key path does not exist.
 */function set$1$1(object,path,value){var parts=canKey_1_2_1_utils.parts(path);var current=object;var length=parts.length;// Walk current until there is not a container
for(var i=0;i<length-1;i++){if(canKey_1_2_1_utils.isContainer(current)){current=canReflect_1_19_2_canReflect.getKeyValue(current,parts[i]);}else {break;}}// Set the value
if(current){canReflect_1_19_2_canReflect.setKeyValue(current,parts[i],value);}else {throw new TypeError("Cannot set value at key path '"+path+"'");}return object;}var set_1$1=set$1$1;/**
 * @module {function} can-key/walk/walk
 * @parent can-key
 *
 * @signature `walk(obj, name, keyCallback(info) )`
 *
 * ```js
 * import walk from "can-key/walk/walk";
 *
 * var user = {name: {first: "Justin"}}
 * walk(user, "name.first", (keyInfo)=> {
 *   // Called 2 times.
 *   // first call:
 *   keyInfo //-> {parent: user, key: "name", value: user.name}
 *   // second call:
 *   keyInfo //-> {parent: user.name, key: "first", value: user.name.first}
 * })
 * ```
 *
 * @param {Object} obj An object to read key values from.
 * @param {String} name A string key name like "foo.bar".
 * @param {function(Object)} keyCallback(info) For every key value,
 * `keyCallback` will be called back with an `info` object containing:
 *
 * - `info.parent` - The object the property value is being read from.
 * - `info.key` - The key being read.
 * - `info.value` - The key's value.
 *
 * If `keyCallback` returns a value other than `undefined`, the next key value
 * will be read from that value.
 */var walk=function walk(obj,name,keyCallback){// The parts of the name we are looking up
// `['App','Models','Recipe']`
var parts=canKey_1_2_1_utils.parts(name);var length=parts.length,current,i,container,part;if(!length){return;}current=obj;// Walk current to the 2nd to last object or until there
// is not a container.
for(i=0;i<length;i++){container=current;part=parts[i];current=canKey_1_2_1_utils.isContainer(container)&&canReflect_1_19_2_canReflect.getKeyValue(container,part);var result=keyCallback({parent:container,key:part,value:current},i);if(result!==undefined){current=result;}}};function deleteKeys(parentsAndKeys){for(var i=parentsAndKeys.length-1;i>=0;i--){var parentAndKey=parentsAndKeys[i];delete parentAndKey.parent[parentAndKey.key];if(canReflect_1_19_2_canReflect.size(parentAndKey.parent)!==0){return;}}}/**
 * @module {function} can-key/transform/transform
 * @parent can-key
 */var transform=function(obj,transformer){var copy=canReflect_1_19_2_canReflect.serialize(obj);canReflect_1_19_2_canReflect.eachKey(transformer,function(writeKey,readKey){var readParts=canKey_1_2_1_utils.parts(readKey),writeParts=canKey_1_2_1_utils.parts(writeKey);// find the value
var parentsAndKeys=[];walk(copy,readParts,function(info){parentsAndKeys.push(info);});var last=parentsAndKeys[parentsAndKeys.length-1];var value=last.value;if(value!==undefined){// write the value
walk(copy,writeParts,function(info,i){if(i<writeParts.length-1&&!info.value){return info.parent[info.key]={};}else if(i===writeParts.length-1){info.parent[info.key]=value;}});// delete the keys on old
deleteKeys(parentsAndKeys);}});return copy;};var canKey_1_2_1_canKey=canNamespace_1_0_0_canNamespace.key={deleteKey:_delete,get:get_1,replaceWith:replaceWith,set:set_1$1,transform:transform,walk:walk};var commonjsGlobal$1=typeof globalThis!=='undefined'?globalThis:typeof window!=='undefined'?window:typeof global!=='undefined'?global:typeof self!=='undefined'?self:{};function commonjsRequire(){throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');}function createCommonjsModule(fn,module){return module={exports:{}},fn(module,module.exports),module.exports;}var warnTimeout=5000;var logLevel=0;/**
 * @module {{}} can-log log
 * @parent can-js-utilities
 * @collection can-infrastructure
 * @hide
 *
 * Utilities for logging to the console.
 *//**
 * @function can-log.warn warn
 * @parent can-log
 * @description
 *
 * Adds a warning message to the console.
 *
 * ```
 * var canLog = require("can-log");
 *
 * canLog.warn("something evil");
 * ```
 *
 * @signature `canLog.warn(msg)`
 * @param {String} msg the message to be logged.
 */var warn=function(){var ll=this.logLevel;if(ll<2){if(typeof console!=="undefined"&&console.warn){this._logger("warn",Array.prototype.slice.call(arguments));}else if(typeof console!=="undefined"&&console.log){this._logger("log",Array.prototype.slice.call(arguments));}}};/**
 * @function can-log.log log
 * @parent can-log
 * @description
 * Adds a message to the console.
 * @hide
 *
 * ```
 * var canLog = require("can-log");
 *
 * canLog.log("hi");
 * ```
 *
 * @signature `canLog.log(msg)`
 * @param {String} msg the message
 */var log=function(){var ll=this.logLevel;if(ll<1){if(typeof console!=="undefined"&&console.log){this._logger("log",Array.prototype.slice.call(arguments));}}};/**
 * @function can-log.error error
 * @parent can-log
 * @description
 * Adds an error message to the console.
 * @hide
 *
 * ```
 * var canLog = require("can-log");
 *
 * canLog.error(new Error("Oh no!"));
 * ```
 *
 * @signature `canLog.error(err)`
 * @param {String|Error} err The error to be logged.
 */var error$2=function(){var ll=this.logLevel;if(ll<1){if(typeof console!=="undefined"&&console.error){this._logger("error",Array.prototype.slice.call(arguments));}}};var _logger=function(type,arr){try{console[type].apply(console,arr);}catch(e){console[type](arr);}};var canLog_1_0_2_canLog={warnTimeout:warnTimeout,logLevel:logLevel,warn:warn,log:log,error:error$2,_logger:_logger};/**
 * @module {{}} can-log/dev dev
 * @parent can-log
 * @hide
 * 
 * Utilities for logging development-mode messages. Use this module for
 * anything that should be shown to the user during development but isn't
 * needed in production. In production these functions become noops.
 */var dev={warnTimeout:5000,logLevel:0,/**
	 * @function can-log/dev.stringify stringify
	 * @parent can-log
	 * @description
	 * @hide
	 *
	 * JSON stringifies a value, but unlike JSON, will output properties with
	 * a value of `undefined` (e.g. `{ "prop": undefined }`, not `{}`).
	 *
	 * ```
	 * var dev = require('can-log/dev');
	 * var query = { where: undefined };
	 * 
	 * dev.warn('No records found: ' + dev.stringify(query));
	 * ```
	 *
	 * @signature `dev.stringify(value)`
	 * @param {Any} value A value to stringify.
	 * @return {String} A stringified representation of the passed in value.
	 */stringify:function(value){var flagUndefined=function flagUndefined(key,value){return value===undefined?"/* void(undefined) */":value;};return JSON.stringify(value,flagUndefined,"  ").replace(/"\/\* void\(undefined\) \*\/"/g,"undefined");},/**
	 * @function can-log/dev.warn warn
	 * @parent can-log
	 * @description
	 * @hide
	 *
	 * Adds a warning message to the console.
	 *
	 * ```
	 * var dev = require('can-log/dev');
	 * 
	 * dev.warn("something evil");
	 * ```
	 *
	 * @signature `dev.warn(msg)`
	 * @param {String} msg The warning message.
	 */warn:function(){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){canLog_1_0_2_canLog.warn.apply(this,arguments);}//!steal-remove-end
},/**
	 * @function can-log/dev.log log
	 * @parent can-log
	 * @description
	 * @hide
	 *
	 * Adds a message to the console.
	 *
	 * ```
	 * var dev = require('can-log/dev');
	 * 
	 * dev.log("hi");
	 * ```
	 *
	 * @signature `dev.log(msg)`
	 * @param {String} msg The message.
	 */log:function(){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){canLog_1_0_2_canLog.log.apply(this,arguments);}//!steal-remove-end
},/**
	 * @function can-log/dev.error error
	 * @parent can-log
	 * @description
	 * @hide
	 *
	 * Adds an error message to the console.
	 *
	 * ```
	 * var dev = require("can-log/dev");
	 * 
	 * dev.error(new Error("Oh no!"));
	 * ```
	 *
	 * @signature `dev.error(err)`
	 * @param {String|Error} err The error to be logged.
	 */error:function(){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){canLog_1_0_2_canLog.error.apply(this,arguments);}//!steal-remove-end
},_logger:canLog_1_0_2_canLog._logger};var canQueues_1_3_2_queueState={lastTask:null};/**
 * @module {function} can-assign can-assign
 * @parent can-js-utilities
 * @collection can-infrastructure
 * @signature `assign(target, source)`
 * @package ./package.json
 *
 * A simplified version of [Object.assign](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign), which only accepts a single source argument.
 *
 * ```js
 * var assign = require("can-assign");
 *
 * var obj = {};
 *
 * assign(obj, {
 *   foo: "bar"
 * });
 *
 * console.log(obj.foo); // -> "bar"
 * ```
 *
 * @param {Object} target The destination object. This object's properties will be mutated based on the object provided as `source`.
 * @param {Object} source The source object whose own properties will be applied to `target`.
 *
 * @return {Object} Returns the `target` argument.
 */var canAssign_1_3_3_canAssign=canNamespace_1_0_0_canNamespace.assign=function(d,s){for(var prop in s){var desc=Object.getOwnPropertyDescriptor(d,prop);if(!desc||desc.writable!==false){d[prop]=s[prop];}}return d;};function noOperation(){}var Queue=function(name,callbacks){this.callbacks=canAssign_1_3_3_canAssign({onFirstTask:noOperation,// The default behavior is to clear the lastTask state.
// This is overwritten by `can-queues.js`.
onComplete:function(){canQueues_1_3_2_queueState.lastTask=null;}},callbacks||{});this.name=name;this.index=0;this.tasks=[];this._log=false;};Queue.prototype.constructor=Queue;Queue.noop=noOperation;Queue.prototype.enqueue=function(fn,context,args,meta){var len=this.tasks.push({fn:fn,context:context,args:args,meta:meta||{}});//!steal-remove-start
if(process.env.NODE_ENV!=='production'){this._logEnqueue(this.tasks[len-1]);}//!steal-remove-end
if(len===1){this.callbacks.onFirstTask(this);}};Queue.prototype.flush=function(){while(this.index<this.tasks.length){var task=this.tasks[this.index++];//!steal-remove-start
if(process.env.NODE_ENV!=='production'){this._logFlush(task);}//!steal-remove-end
task.fn.apply(task.context,task.args);}this.index=0;this.tasks=[];this.callbacks.onComplete(this);};Queue.prototype.log=function(){this._log=arguments.length?arguments[0]:true;};//The following are removed in production.
//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Queue.prototype._logEnqueue=function(task){// For debugging, set the parentTask to the last
// run task.
task.meta.parentTask=canQueues_1_3_2_queueState.lastTask;// Also let the task know which stack it was run within.
task.meta.stack=this;if(this._log===true||this._log==="enqueue"){var log=task.meta.log?task.meta.log.concat(task):[task.fn.name,task];dev.log.apply(dev,[this.name+" enqueuing:"].concat(log));}};// `_logFlush` MUST be called by all queues prior to flushing in
// development.
Queue.prototype._logFlush=function(task){if(this._log===true||this._log==="flush"){var log=task.meta.log?task.meta.log.concat(task):[task.fn.name,task];dev.log.apply(dev,[this.name+" running  :"].concat(log));}// Update the state to mark this as the task that was run last.
canQueues_1_3_2_queueState.lastTask=task;};}//!steal-remove-end
var canQueues_1_3_2_queue=Queue;var PriorityQueue=function(){canQueues_1_3_2_queue.apply(this,arguments);// A map of a task's function to the task for that function.
// This is so we can prevent duplicate functions from being enqueued
// and so `flushQueuedTask` can find the task and run it.
this.taskMap=new Map();// An "array-of-arrays"-ish data structure that stores
// each task organized by its priority.  Each object in this list
// looks like `{tasks: [...], index: 0}` where:
// - `tasks` - the tasks for a particular priority.
// - `index` - the index of the task waiting to be prioritized.
this.taskContainersByPriority=[];// The index within `taskContainersByPriority` of the first `taskContainer`
// which has tasks that have not been run.
this.curPriorityIndex=Infinity;// The index within `taskContainersByPriority` of the last `taskContainer`
// which has tasks that have not been run.
this.curPriorityMax=0;this.isFlushing=false;// Manage the number of tasks remaining to keep
// this lookup fast.
this.tasksRemaining=0;};PriorityQueue.prototype=Object.create(canQueues_1_3_2_queue.prototype);PriorityQueue.prototype.constructor=PriorityQueue;PriorityQueue.prototype.enqueue=function(fn,context,args,meta){// Only allow the enqueing of a given function once.
if(!this.taskMap.has(fn)){this.tasksRemaining++;var isFirst=this.taskContainersByPriority.length===0;var task={fn:fn,context:context,args:args,meta:meta||{}};var taskContainer=this.getTaskContainerAndUpdateRange(task);taskContainer.tasks.push(task);this.taskMap.set(fn,task);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){this._logEnqueue(task);}//!steal-remove-end
if(isFirst){this.callbacks.onFirstTask(this);}}};// Given a task, updates the queue's cursors so that `flush`
// will be able to run the task.
PriorityQueue.prototype.getTaskContainerAndUpdateRange=function(task){var priority=task.meta.priority||0;if(priority<this.curPriorityIndex){this.curPriorityIndex=priority;}if(priority>this.curPriorityMax){this.curPriorityMax=priority;}var tcByPriority=this.taskContainersByPriority;var taskContainer=tcByPriority[priority];if(!taskContainer){taskContainer=tcByPriority[priority]={tasks:[],index:0};}return taskContainer;};PriorityQueue.prototype.flush=function(){// Only allow one task to run at a time.
if(this.isFlushing){return;}this.isFlushing=true;while(true){// If the first prioritized taskContainer with tasks remaining
// is before the last prioritized taskContainer ...
if(this.curPriorityIndex<=this.curPriorityMax){var taskContainer=this.taskContainersByPriority[this.curPriorityIndex];// If that task container actually has tasks remaining ...
if(taskContainer&&taskContainer.tasks.length>taskContainer.index){// Run the task.
var task=taskContainer.tasks[taskContainer.index++];//!steal-remove-start
if(process.env.NODE_ENV!=='production'){this._logFlush(task);}//!steal-remove-end
this.tasksRemaining--;this.taskMap["delete"](task.fn);task.fn.apply(task.context,task.args);}else {// Otherwise, move to the next taskContainer.
this.curPriorityIndex++;}}else {// Otherwise, reset the state for the next `.flush()`.
this.taskMap=new Map();this.curPriorityIndex=Infinity;this.curPriorityMax=0;this.taskContainersByPriority=[];this.isFlushing=false;this.callbacks.onComplete(this);return;}}};PriorityQueue.prototype.isEnqueued=function(fn){return this.taskMap.has(fn);};PriorityQueue.prototype.flushQueuedTask=function(fn){var task=this.dequeue(fn);if(task){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){this._logFlush(task);}//!steal-remove-end
task.fn.apply(task.context,task.args);}};PriorityQueue.prototype.dequeue=function(fn){var task=this.taskMap.get(fn);if(task){var priority=task.meta.priority||0;var taskContainer=this.taskContainersByPriority[priority];var index=taskContainer.tasks.indexOf(task,taskContainer.index);if(index>=0){taskContainer.tasks.splice(index,1);this.tasksRemaining--;this.taskMap["delete"](task.fn);return task;}else {console.warn("Task",fn,"has already run");}}};PriorityQueue.prototype.tasksRemainingCount=function(){return this.tasksRemaining;};var canQueues_1_3_2_priorityQueue=PriorityQueue;// This queue does not allow another task to run until this one is complete
var CompletionQueue=function(){canQueues_1_3_2_queue.apply(this,arguments);this.flushCount=0;};CompletionQueue.prototype=Object.create(canQueues_1_3_2_queue.prototype);CompletionQueue.prototype.constructor=CompletionQueue;CompletionQueue.prototype.flush=function(){if(this.flushCount===0){this.flushCount++;while(this.index<this.tasks.length){var task=this.tasks[this.index++];//!steal-remove-start
if(process.env.NODE_ENV!=='production'){this._logFlush(task);}//!steal-remove-end
task.fn.apply(task.context,task.args);}this.index=0;this.tasks=[];this.flushCount--;this.callbacks.onComplete(this);}};var canQueues_1_3_2_completionQueue=CompletionQueue;var canQueues_1_3_2_sortedIndexBy=function(compare,array,value){if(!array||!array.length){return undefined;}// check the start and the end
if(compare(value,array[0])===-1){return 0;}else if(compare(value,array[array.length-1])===1){return array.length;}var low=0,high=array.length;// From lodash lodash 4.6.1 <https://lodash.com/>
// Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
while(low<high){var mid=low+high>>>1,item=array[mid],computed=compare(value,item);if(computed===-1){high=mid;}else {low=mid+1;}}return high;// bisect by calling sortFunc
};// Taken from jQuery
var hasDuplicate,sortInput,sortStable=true,indexOf=Array.prototype.indexOf;function sortOrder(a,b){// Flag for duplicate removal
if(a===b){hasDuplicate=true;return 0;}// Sort on method existence if only one input has compareDocumentPosition
var compare=!a.compareDocumentPosition-!b.compareDocumentPosition;if(compare){return compare;}// Calculate position if both inputs belong to the same document
compare=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):// Otherwise we know they are disconnected
1;// Disconnected nodes
if(compare&1){// Choose the first element that is related to our preferred document
if(a===document||a.ownerDocument===document&&document.documentElement.contains(a)){return -1;}if(b===document||b.ownerDocument===document&&document.documentElement.contains(b)){return 1;}// Maintain original order
return sortInput?indexOf.call(sortInput,a)-indexOf.call(sortInput,b):0;}return compare&4?-1:1;}function uniqueSort(results){var elem,duplicates=[],j=0,i=0;hasDuplicate=false;sortInput=!sortStable;results.sort(sortOrder);if(hasDuplicate){while(elem=results[i++]){if(elem===results[i]){j=duplicates.push(i);}}while(j--){results.splice(duplicates[j],1);}}// Clear input after sorting to release objects
// See https://github.com/jquery/sizzle/pull/225
sortInput=null;return results;}var canQueues_1_3_2_elementSort={uniqueSort:uniqueSort,sortOrder:sortOrder};var canElementSymbol=canSymbol_1_7_0_canSymbol.for("can.element");// TODO: call sortable queue and take how it should be sorted ...
function sortTasks(taskA,taskB){// taskA - in the document?
// taskA - given a number?
//
return canQueues_1_3_2_elementSort.sortOrder(taskA.meta.element,taskB.meta.element);}var DomOrderQueue=function(){canQueues_1_3_2_queue.apply(this,arguments);// A map of a task's function to the task for that function.
// This is so we can prevent duplicate functions from being enqueued
// and so `flushQueuedTask` can find the task and run it.
this.taskMap=new Map();this.unsortable=[];this.isFlushing=false;};DomOrderQueue.prototype=Object.create(canQueues_1_3_2_queue.prototype);DomOrderQueue.prototype.constructor=DomOrderQueue;DomOrderQueue.prototype.enqueue=function(fn,context,args,meta){var task;// Only allow the enqueing of a given function once.
if(!this.taskMap.has(fn)){if(!meta){meta={};}if(!meta.element){meta.element=fn[canElementSymbol];}task={fn:fn,context:context,args:args,meta:meta};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(!meta.element){throw new Error("DomOrderQueue tasks must be created with a meta.element.");}}//!steal-remove-end
this.taskMap.set(fn,task);var index=canQueues_1_3_2_sortedIndexBy(sortTasks,this.tasks,task);this.tasks.splice(index,0,task);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){this._logEnqueue(task);}//!steal-remove-end
if(this.tasks.length===1){this.callbacks.onFirstTask(this);}}else {// update the task with the new data
// TODO: ideally this would key off the mutation instead of the function.
// We could make it key off the element and function,  not just function.
task=this.taskMap.get(fn);task.context=context;task.args=args;if(!meta){meta={};}if(!meta.element){meta.element=fn[canElementSymbol];}task.meta=meta;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){this._logEnqueue(task);}//!steal-remove-end
}};DomOrderQueue.prototype.flush=function(){// Only allow one task to run at a time.
if(this.isFlushing){return;}this.isFlushing=true;while(this.tasks.length){var task=this.tasks.shift();//!steal-remove-start
if(process.env.NODE_ENV!=='production'){this._logFlush(task);}//!steal-remove-end
this.taskMap["delete"](task.fn);task.fn.apply(task.context,task.args);}this.isFlushing=false;this.callbacks.onComplete(this);};DomOrderQueue.prototype.isEnqueued=function(fn){return this.taskMap.has(fn);};DomOrderQueue.prototype.flushQueuedTask=function(fn){var task=this.dequeue(fn);if(task){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){this._logFlush(task);}//!steal-remove-end
task.fn.apply(task.context,task.args);}};DomOrderQueue.prototype.dequeue=function(fn){var task=this.taskMap.get(fn);if(task){var index=this.tasks.indexOf(task);if(index>=0){this.tasks.splice(index,1);this.taskMap["delete"](task.fn);return task;}else {console.warn("Task",fn,"has already run");}}};DomOrderQueue.prototype.tasksRemainingCount=function(){return this.tasks.length;};var canQueues_1_3_2_domOrderQueue=DomOrderQueue;var canQueues_1_3_2_canQueues=createCommonjsModule(function(module){// How many `batch.start` - `batch.stop` calls have been made.
var batchStartCounter=0;// If a task was added since the last flush caused by `batch.stop`.
var addedTask=false;// Legacy values for the old batchNum.
var batchNum=0;var batchData;// Used by `.enqueueByQueue` to know the property names that might be passed.
var queueNames=["notify","derive","domUI","dom","mutate"];// Create all the queues so that when one is complete,
// the next queue is flushed.
var NOTIFY_QUEUE,DERIVE_QUEUE,DOM_UI_QUEUE,DOM_QUEUE,MUTATE_QUEUE;// This is for immediate notification. This is where we teardown (remove childNodes)
// immediately.
NOTIFY_QUEUE=new canQueues_1_3_2_queue("NOTIFY",{onComplete:function(){DERIVE_QUEUE.flush();},onFirstTask:function(){// Flush right away if we aren't in a batch.
if(!batchStartCounter){NOTIFY_QUEUE.flush();}else {addedTask=true;}}});// For observations not connected to the DOM
DERIVE_QUEUE=new canQueues_1_3_2_priorityQueue("DERIVE",{onComplete:function(){DOM_QUEUE.flush();},onFirstTask:function(){addedTask=true;}});// DOM_DERIVE comes next so that any prior derives have a chance
// to settle before the derives that actually affect the DOM
// are re-caculated.
// See the `Child bindings are called before the parent` can-stache test.
// All stache-related observables should update in DOM order.
// Observations that are given an element update their value here.
DOM_QUEUE=new canQueues_1_3_2_domOrderQueue("DOM   ",{onComplete:function(){DOM_UI_QUEUE.flush();},onFirstTask:function(){addedTask=true;}});// The old DOM_UI queue ... we should seek to remove this.
DOM_UI_QUEUE=new canQueues_1_3_2_completionQueue("DOM_UI",{onComplete:function(){MUTATE_QUEUE.flush();},onFirstTask:function(){addedTask=true;}});// Update
MUTATE_QUEUE=new canQueues_1_3_2_queue("MUTATE",{onComplete:function(){canQueues_1_3_2_queueState.lastTask=null;},onFirstTask:function(){addedTask=true;}});var queues={Queue:canQueues_1_3_2_queue,PriorityQueue:canQueues_1_3_2_priorityQueue,CompletionQueue:canQueues_1_3_2_completionQueue,DomOrderQueue:canQueues_1_3_2_domOrderQueue,notifyQueue:NOTIFY_QUEUE,deriveQueue:DERIVE_QUEUE,domQueue:DOM_QUEUE,domUIQueue:DOM_UI_QUEUE,mutateQueue:MUTATE_QUEUE,batch:{start:function(){batchStartCounter++;if(batchStartCounter===1){batchNum++;batchData={number:batchNum};}},stop:function(){batchStartCounter--;if(batchStartCounter===0){if(addedTask){addedTask=false;NOTIFY_QUEUE.flush();}}},// Legacy method to return if we are between start and stop calls.
isCollecting:function(){return batchStartCounter>0;},// Legacy method provide a number for each batch.
number:function(){return batchNum;},// Legacy method to provide batch information.
data:function(){return batchData;}},runAsTask:function(fn,reasonLog){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){return function(){canQueues_1_3_2_queueState.lastTask={fn:fn,context:this,args:arguments,meta:{reasonLog:typeof reasonLog==="function"?reasonLog.apply(this,arguments):reasonLog,parentTask:canQueues_1_3_2_queueState.lastTask,stack:{name:"RUN_AS"}}};var ret=fn.apply(this,arguments);canQueues_1_3_2_queueState.lastTask=canQueues_1_3_2_queueState.lastTask&&canQueues_1_3_2_queueState.lastTask.meta.parentTask;return ret;};}//!steal-remove-end
return fn;},enqueueByQueue:function enqueueByQueue(fnByQueue,context,args,makeMeta,reasonLog){if(fnByQueue){queues.batch.start();// For each queue, check if there are tasks for it.
queueNames.forEach(function(queueName){var name=queueName+"Queue";var QUEUE=queues[name];var tasks=fnByQueue[queueName];if(tasks!==undefined){// For each task function, setup the meta and enqueue it.
tasks.forEach(function(fn){var meta=makeMeta!=null?makeMeta(fn,context,args):{};meta.reasonLog=reasonLog;QUEUE.enqueue(fn,context,args,meta);});}});queues.batch.stop();}},lastTask:function(){return canQueues_1_3_2_queueState.lastTask;},// Currently an internal method that provides the task stack.
// Returns an array with the first task as the first item.
stack:function(task){var current=task||canQueues_1_3_2_queueState.lastTask;var stack=[];while(current){stack.unshift(current);// Queue.prototype._logEnqueue ensures
// that the `parentTask` is always set.
current=current.meta.parentTask;}return stack;},logStack:function(task){var stack=this.stack(task);stack.forEach(function(task,i){var meta=task.meta;if(i===0&&meta&&meta.reasonLog){dev.log.apply(dev,meta.reasonLog);}var log=meta&&meta.log?meta.log:[task.fn.name,task];dev.log.apply(dev,[task.meta.stack.name+" ran task:"].concat(log));});},// A method that is not used.  It should return the number of tasks
// remaining, but doesn't seem to actually work.
taskCount:function(){return NOTIFY_QUEUE.tasks.length+DERIVE_QUEUE.tasks.length+DOM_UI_QUEUE.tasks.length+MUTATE_QUEUE.tasks.length;},// A shortcut for flushign the notify queue.  `batch.start` and `batch.stop` should be
// used instead.
flush:function(){NOTIFY_QUEUE.flush();},log:function(){NOTIFY_QUEUE.log.apply(NOTIFY_QUEUE,arguments);DERIVE_QUEUE.log.apply(DERIVE_QUEUE,arguments);DOM_UI_QUEUE.log.apply(DOM_UI_QUEUE,arguments);DOM_QUEUE.log.apply(DOM_QUEUE,arguments);MUTATE_QUEUE.log.apply(MUTATE_QUEUE,arguments);}};if(canNamespace_1_0_0_canNamespace.queues){throw new Error("You can't have two versions of can-queues, check your dependencies");}else {module.exports=canNamespace_1_0_0_canNamespace.queues=queues;}});var canObservationRecorder_1_3_1_canObservationRecorder=createCommonjsModule(function(module){// Contains stack of observation records created by pushing with `.start`
// and popping with `.stop()`.
// The top of the stack is the "target" observation record - the record that calls
// to `ObservationRecorder.add` get added to.
var stack=[];var addParentSymbol=canSymbol_1_7_0_canSymbol.for("can.addParent"),getValueSymbol=canSymbol_1_7_0_canSymbol.for("can.getValue");var ObservationRecorder={stack:stack,start:function(name){var deps={keyDependencies:new Map(),valueDependencies:new Set(),childDependencies:new Set(),// `traps` and `ignore` are here only for performance
// reasons. They work with `ObservationRecorder.ignore` and `ObservationRecorder.trap`.
traps:null,ignore:0,name:name};stack.push(deps);return deps;},stop:function(){return stack.pop();},add:function(obj,event){var top=stack[stack.length-1];if(top&&top.ignore===0){if(top.traps){top.traps.push([obj,event]);}else {// Use `=== undefined` instead of `arguments.length` for performance.
if(event===undefined){top.valueDependencies.add(obj);}else {var eventSet=top.keyDependencies.get(obj);if(!eventSet){eventSet=new Set();top.keyDependencies.set(obj,eventSet);}eventSet.add(event);}}}},addMany:function(observes){var top=stack[stack.length-1];if(top){if(top.traps){top.traps.push.apply(top.traps,observes);}else {for(var i=0,len=observes.length;i<len;i++){this.add(observes[i][0],observes[i][1]);}}}},created:function(obs){var top=stack[stack.length-1];if(top){top.childDependencies.add(obs);if(obs[addParentSymbol]){obs[addParentSymbol](top);}}},ignore:function(fn){return function(){if(stack.length){var top=stack[stack.length-1];top.ignore++;var res=fn.apply(this,arguments);top.ignore--;return res;}else {return fn.apply(this,arguments);}};},peekValue:function(value){if(!value||!value[getValueSymbol]){return value;}if(stack.length){var top=stack[stack.length-1];top.ignore++;var res=value[getValueSymbol]();top.ignore--;return res;}else {return value[getValueSymbol]();}},isRecording:function(){var len=stack.length;var last=len&&stack[len-1];return last&&last.ignore===0&&last;},// `can-observation` uses this to do diffs more easily.
makeDependenciesRecord:function(name){return {traps:null,keyDependencies:new Map(),valueDependencies:new Set(),//childDependencies: new Set(),
ignore:0,name:name};},// The following are legacy methods we should do away with.
makeDependenciesRecorder:function(){return ObservationRecorder.makeDependenciesRecord();},// Traps should be replace by calling `.start()` and `.stop()`.
// To do this, we'd need a method that accepts a dependency record.
trap:function(){if(stack.length){var top=stack[stack.length-1];var oldTraps=top.traps;var traps=top.traps=[];return function(){top.traps=oldTraps;return traps;};}else {return function(){return [];};}},trapsCount:function(){if(stack.length){var top=stack[stack.length-1];return top.traps.length;}else {return 0;}}};if(canNamespace_1_0_0_canNamespace.ObservationRecorder){throw new Error("You can't have two versions of can-observation-recorder, check your dependencies");}else {module.exports=canNamespace_1_0_0_canNamespace.ObservationRecorder=ObservationRecorder;}});// ## Helpers
// The following implement helper functions useful to `can-key-tree`'s main methods.
// ### isBuiltInPrototype
// Returns if `obj` is the prototype of a built-in JS type like `Map`.
// Built in types' `toString` returns `[object TYPENAME]`.
function isBuiltInPrototype(obj){if(obj===Object.prototype){return true;}var protoString=Object.prototype.toString.call(obj);var isNotObjObj=protoString!=='[object Object]';var isObjSomething=protoString.indexOf('[object ')!==-1;return isNotObjObj&&isObjSomething;}// ### getDeepSize
// Recursively returns the number of leaf values below `root` node.
function getDeepSize(root,level){if(level===0){return canReflect_1_19_2_canReflect.size(root);}else if(canReflect_1_19_2_canReflect.size(root)===0){return 0;}else {var count=0;canReflect_1_19_2_canReflect.each(root,function(value){count+=getDeepSize(value,level-1);});return count;}}// ### getDeep
// Adds all leaf values under `node` to `items`.
// `depth` is how deep `node` is in the tree.
// `maxDepth` is the total depth of the tree structure.
function getDeep(node,items,depth,maxDepth){if(!node){return;}if(maxDepth===depth){if(canReflect_1_19_2_canReflect.isMoreListLikeThanMapLike(node)){canReflect_1_19_2_canReflect.addValues(items,canReflect_1_19_2_canReflect.toArray(node));}else {throw new Error("can-key-tree: Map-type leaf containers are not supported yet.");}}else {canReflect_1_19_2_canReflect.each(node,function(value){getDeep(value,items,depth+1,maxDepth);});}}// ### clearDeep
// Recursively removes value from all child nodes of `node`.
function clearDeep(node,keys,maxDepth,deleteHandler){if(maxDepth===keys.length){if(canReflect_1_19_2_canReflect.isMoreListLikeThanMapLike(node)){var valuesToRemove=canReflect_1_19_2_canReflect.toArray(node);if(deleteHandler){valuesToRemove.forEach(function(value){deleteHandler.apply(null,keys.concat(value));});}canReflect_1_19_2_canReflect.removeValues(node,valuesToRemove);}else {throw new Error("can-key-tree: Map-type leaf containers are not supported yet.");}}else {canReflect_1_19_2_canReflect.each(node,function(value,key){clearDeep(value,keys.concat(key),maxDepth,deleteHandler);canReflect_1_19_2_canReflect.deleteKeyValue(node,key);});}}// ## KeyTree
// Creates an instance of the KeyTree.
var KeyTree=function(treeStructure,callbacks){var FirstConstructor=treeStructure[0];if(canReflect_1_19_2_canReflect.isConstructorLike(FirstConstructor)){this.root=new FirstConstructor();}else {this.root=FirstConstructor;}this.callbacks=callbacks||{};this.treeStructure=treeStructure;// An extra bit of state held for performance
this.empty=true;};// ## Methods
canReflect_1_19_2_canReflect.assign(KeyTree.prototype,{// ### Add
add:function(keys){if(keys.length>this.treeStructure.length){throw new Error("can-key-tree: Can not add path deeper than tree.");}// The place we will add the final leaf value.
var place=this.root;// Record if the root was empty so we know to call `onFirst`.
var rootWasEmpty=this.empty===true;// For each key, try to get the corresponding childNode.
for(var i=0;i<keys.length-1;i++){var key=keys[i];var childNode=canReflect_1_19_2_canReflect.getKeyValue(place,key);if(!childNode){// If there is no childNode, create it and add it to the parent node.
var Constructor=this.treeStructure[i+1];if(isBuiltInPrototype(Constructor.prototype)){childNode=new Constructor();}else {childNode=new Constructor(key);}canReflect_1_19_2_canReflect.setKeyValue(place,key,childNode);}place=childNode;}// Add the final leaf value in the tree.
if(canReflect_1_19_2_canReflect.isMoreListLikeThanMapLike(place)){canReflect_1_19_2_canReflect.addValues(place,[keys[keys.length-1]]);}else {throw new Error("can-key-tree: Map types are not supported yet.");}// Callback `onFirst` if appropriate.
if(rootWasEmpty){this.empty=false;if(this.callbacks.onFirst){this.callbacks.onFirst.call(this);}}return this;},// ### getNode
getNode:function(keys){var node=this.root;// For each key, try to read the child node.
// If a child is not found, return `undefined`.
for(var i=0;i<keys.length;i++){var key=keys[i];node=canReflect_1_19_2_canReflect.getKeyValue(node,key);if(!node){return;}}return node;},// ### get
get:function(keys){// Get the node specified by keys.
var node=this.getNode(keys);// If it's a leaf, return it.
if(this.treeStructure.length===keys.length){return node;}else {// Otherwise, create a container for leaf values and
// recursively walk the node's children.
var Type=this.treeStructure[this.treeStructure.length-1];var items=new Type();getDeep(node,items,keys.length,this.treeStructure.length-1);return items;}},// ### delete
delete:function(keys,deleteHandler){// `parentNode` will eventually be the parent nodde of the
// node specified by keys.
var parentNode=this.root,// The nodes traversed to the node specified by `keys`.
path=[this.root],lastKey=keys[keys.length-1];// Set parentNode to the node specified by keys
// and record the nodes in `path`.
for(var i=0;i<keys.length-1;i++){var key=keys[i];var childNode=canReflect_1_19_2_canReflect.getKeyValue(parentNode,key);if(childNode===undefined){return false;}else {path.push(childNode);}parentNode=childNode;}// Depending on which keys were specified and the content of the
// key, do various cleanups ...
if(!keys.length){// If there are no keys, recursively clear the entire tree.
clearDeep(parentNode,[],this.treeStructure.length-1,deleteHandler);}else if(keys.length===this.treeStructure.length){// If removing a leaf, remove that value.
if(canReflect_1_19_2_canReflect.isMoreListLikeThanMapLike(parentNode)){if(deleteHandler){deleteHandler.apply(null,keys.concat(lastKey));}canReflect_1_19_2_canReflect.removeValues(parentNode,[lastKey]);}else {throw new Error("can-key-tree: Map types are not supported yet.");}}else {// If removing a node 'within' the tree, recursively clear
// that node and then delete the key from parent to node.
var nodeToRemove=canReflect_1_19_2_canReflect.getKeyValue(parentNode,lastKey);if(nodeToRemove!==undefined){clearDeep(nodeToRemove,keys,this.treeStructure.length-1,deleteHandler);canReflect_1_19_2_canReflect.deleteKeyValue(parentNode,lastKey);}else {return false;}}// After deleting the node, check if its parent is empty and
// recursively prune parent nodes that are now empty.
for(i=path.length-2;i>=0;i--){if(canReflect_1_19_2_canReflect.size(parentNode)===0){parentNode=path[i];canReflect_1_19_2_canReflect.deleteKeyValue(parentNode,keys[i]);}else {break;}}// Call `onEmpty` if the tree is now empty.
if(canReflect_1_19_2_canReflect.size(this.root)===0){this.empty=true;if(this.callbacks.onEmpty){this.callbacks.onEmpty.call(this);}}return true;},// ### size
// Recursively count the number of leaf values.
size:function(){return getDeepSize(this.root,this.treeStructure.length-1);},isEmpty:function(){return this.empty;}});var canKeyTree_1_2_2_canKeyTree=KeyTree;/**
 * @module {function} can-define-lazy-value
 * @parent can-js-utilities
 * @collection can-infrastructure
 * @package ./package.json
 * @signature `defineLazyValue(obj, prop, fn, writable)`
 *
 * Use Object.defineProperty to define properties whose values will be created lazily when they are first read.
 *
 * ```js
 * var _id = 1;
 * function getId() {
 *     return _id++;
 * }
 *
 * function MyObj(name) {
 *     this.name = name;
 * }
 *
 * defineLazyValue(MyObj.prototype, 'id', getId);
 *
 * var obj1 = new MyObj('obj1');
 * var obj2 = new MyObj('obj2');
 *
 * console.log( obj2 ); // -> { name: "obj2" }
 * console.log( obj1 ); // -> { name: "obj1" }
 *
 * // the first `id` read will get id `1`
 * console( obj2.id ); // -> 1
 * console( obj1.id ); // -> 2
 *
 * console.log( obj2 ); // -> { name: "obj2", id: 1 }
 * console.log( obj1 ); // -> { name: "obj1", id: 2 }
 *
 * ```
 *
 * @param {Object} object The object to add the property to.
 * @param {String} prop   The name of the property.
 * @param {Function} fn   A function to get the value the property should be set to.
 * @param {boolean} writable   Whether the field should be writable (false by default).
 */var canDefineLazyValue_1_1_1_defineLazyValue=function defineLazyValue(obj,prop,initializer,writable){Object.defineProperty(obj,prop,{configurable:true,get:function(){// make the property writable
Object.defineProperty(this,prop,{value:undefined,writable:true});// get the value from the initializer function
var value=initializer.call(this,obj,prop);// redefine the property to the value property
// and reset the writable flag
Object.defineProperty(this,prop,{value:value,writable:!!writable});// return the value
return value;},set:function(value){Object.defineProperty(this,prop,{value:value,writable:!!writable});return value;}});};var mergeValueDependencies=function mergeValueDependencies(obj,source){var sourceValueDeps=source.valueDependencies;if(sourceValueDeps){var destValueDeps=obj.valueDependencies;// make sure there is a valueDependencies Set
// in the [obj] dependency record
if(!destValueDeps){destValueDeps=new Set();obj.valueDependencies=destValueDeps;}canReflect_1_19_2_canReflect.eachIndex(sourceValueDeps,function(dep){destValueDeps.add(dep);});}};var mergeKeyDependencies=function mergeKeyDependencies(obj,source){var sourcekeyDeps=source.keyDependencies;if(sourcekeyDeps){var destKeyDeps=obj.keyDependencies;// make sure there is a keyDependencies Map
// in the [obj] dependency record
if(!destKeyDeps){destKeyDeps=new Map();obj.keyDependencies=destKeyDeps;}canReflect_1_19_2_canReflect.eachKey(sourcekeyDeps,function(keys,obj){var entry=destKeyDeps.get(obj);if(!entry){entry=new Set();destKeyDeps.set(obj,entry);}canReflect_1_19_2_canReflect.eachIndex(keys,function(key){entry.add(key);});});}};// Merges the key and value dependencies of the source object into the
// destination object
var merge$1=function mergeDependencyRecords(object,source){mergeKeyDependencies(object,source);mergeValueDependencies(object,source);return object;};var properties={/**
	 * @function can-event-queue/value/value.on on
	 * @parent can-event-queue/value/value
	 *
	 * @description Listen to changes in the observable's value.
	 *
	 * @signature `.on( handler[, queue='mutate'] )`
	 *
	 * This adds an event handler in the observable's [can-event-queue/value/value.handlers]
	 * tree. If this is the first handler, the observable's [can-event-queue/value/value.onBound] method is called.
	 *
	 * ```js
	 * observable.on(function(newVal){ ... });
	 * observable.on(function(newVal){ ... }, "notify");
	 * ```
	 *
	 * @param {function(*)} handler(newValue,oldValue) A handler that will be called with the new value of the
	 * observable and optionally the old value of the observable.
	 * @param {String} [queue] The [can-queues] queue this event handler should be bound to.  By default the handler will
	 * be called within the `mutate` queue.
	 */on:function(handler,queue){this.handlers.add([queue||"mutate",handler]);},/**
	 * @function can-event-queue/value/value.off off
	 * @parent can-event-queue/value/value
	 *
	 * @description Stop listening to changes in the observable's value.
	 *
	 * @signature `.off( [handler [, queue='mutate']] )`
	 *
	 * Removes one or more event handler in the observable's [can-event-queue/value/value.handlers]
	 * tree. If the las handler is removed, the observable's [can-event-queue/value/value.onUnbound] method is called.
	 *
	 * ```js
	 * observable.off(function(newVal){ ... });
	 * observable.off(function(newVal){ ... }, "notify");
	 * observable.off();
	 * observable.off(undefined, "mutate");
	 * ```
	 *
	 * @param {function(*)} handler(newValue,oldValue) The handler to be removed.  If no handler is provided and no
	 * `queue` is provided, all handlers will be removed.
	 * @param {String} [queue] The [can-queues] queue this event handler should be removed from.
	 *
	 *  If a `handler` is
	 *  provided and no `queue` is provided, the `queue` will default to `"mutate"`.
	 *
	 *   If a `handler` is not provided, but a `queue` is provided, all handlers for the provided queue will be
	 *   removed.
	 */off:function(handler,queueName){if(handler===undefined){if(queueName===undefined){this.handlers.delete([]);}else {this.handlers.delete([queueName]);}}else {this.handlers.delete([queueName||"mutate",handler]);}}};var symbols={/**
	 * @function can-event-queue/value/value.can.onValue @can.onValue
	 * @parent can-event-queue/value/value
	 *
	 * @description Listen to changes in this observable value.
	 *
	 * This is an alias for [can-event-queue/value/value.on].  It satisfies [can-reflect].[can-reflect/observe.onValue].
	 */"can.onValue":properties.on,/**
	 * @function can-event-queue/value/value.can.offValue @can.offValue
	 * @parent can-event-queue/value/value
	 *
	 * @description Stop listening to changes in this observable value.
	 *
	 * This is an alias for [can-event-queue/value/value.off].  It satisfies [can-reflect].[can-reflect/observe.offValue].
	 */"can.offValue":properties.off,/**
	 * @function can-event-queue/value/value.can.dispatch @can.dispatch
	 * @parent can-event-queue/value/value
	 *
	 * @description Dispatch all event handlers within their appropriate queues.
	 *
	 * @signature `@can.dispatch(newValue, oldValue)`
	 *
	 * This is a helper method that will dispatch all [can-event-queue/value/value.handlers] within
	 * their appropriate [can-queues] queue.
	 *
	 * Furthermore, it will make sure the handlers include useful meta data for debugging.
	 *
	 * ```js
	 * var observable = mixinValueBindings({});
	 * observable[canSymbol.for("can.dispatch")]( 2, 1 );
	 * ```
	 *
	 * @param {Any} newValue The new value of the observable.
	 * @param {Any} oldValue The old value of the observable.
	 */"can.dispatch":function(value,old){var queuesArgs=[];queuesArgs=[this.handlers.getNode([]),this,[value,old]];//!steal-remove-start
if(process.env.NODE_ENV!=='production'){queuesArgs=[this.handlers.getNode([]),this,[value,old]/* jshint laxcomma: true */,null,[canReflect_1_19_2_canReflect.getName(this),"changed to",value,"from",old]/* jshint laxcomma: false */];}//!steal-remove-end
canQueues_1_3_2_canQueues.enqueueByQueue.apply(canQueues_1_3_2_canQueues,queuesArgs);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(typeof this._log==="function"){this._log(old,value);}}//!steal-remove-end
},/**
	 * @function can-event-queue/value/value.can.getWhatIChange @can.getWhatIChange
	 * @parent can-event-queue/value/value
	 *
	 * @description Return observables whose values are affected by attached event handlers
	 * @signature `@can.getWhatIChange()`
	 *
	 * The `@@can.getWhatIChange` symbol is added to make sure [can-debug] can report
	 * all the observables whose values are set by value-like observables.
	 *
	 * This function iterates over the event handlers attached to  the observable's value
	 * event and collects the result of calling `@@can.getChangesDependencyRecord` on each
	 * handler; this symbol allows the caller to tell what observables are being mutated
	 * by the event handler when it is executed.
	 *
	 * In the following example a [can-simple-observable] instance named `month` is
	 * created and when its value changes the `age` property of the `map` [can-simple-map]
	 * instance is set. The event handler that causes the mutation is then decatorated with
	 * `@@can.getChangesDependencyRecord` to register the mutation dependency.
	 *
	 * ```js
	 * var month = new SimpleObservable(11);
	 * var map = new SimpleMap({ age: 30 });
	 * var canReflect = require("can-reflect");
	 *
	 * var onValueChange = function onValueChange() {
	 *	map.set("age", 31);
	 * };
	 *
	 * onValueChange[canSymbol.for("can.getChangesDependencyRecord")] = function() {
	 *	return {
	 *		keyDependencies: new Map([ [map, new Set(["age"])] ])
	 *	}
	 * };
	 *
	 * canReflect.onValue(month, onValueChange);
	 * month[canSymbol.for("can.getWhatIChange")]();
	 * ```
	 *
	 * The dependency records collected from the event handlers are divided into
	 * two categories:
	 *
	 * - mutate: Handlers in the mutate/domUI queues
	 * - derive: Handlers in the notify queue
	 *
	 * Since event handlers are added by default to the "mutate" queue, calling
	 * `@@can.getWhatIChange` on the `month` instance returns an object with a mutate
	 * property and the `keyDependencies` Map registered on the `onValueChange` handler.
	 *
	 * If multiple event handlers were attached to `month`, the dependency records
	 * of each handler are merged by `@@can.getWhatIChange`. Please check out the
	 * [can-reflect-dependencies] docs to learn more about how this symbol is used
	 * to keep track of custom observable dependencies.
	 */"can.getWhatIChange":function getWhatIChange(){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var whatIChange={};var notifyHandlers=this.handlers.get(["notify"]);var mutateHandlers=[].concat(this.handlers.get(["mutate"]),this.handlers.get(["domUI"]),this.handlers.get(["dom"]));if(notifyHandlers.length){notifyHandlers.forEach(function(handler){var changes=canReflect_1_19_2_canReflect.getChangesDependencyRecord(handler);if(changes){var record=whatIChange.derive;if(!record){record=whatIChange.derive={};}merge$1(record,changes);}});}if(mutateHandlers.length){mutateHandlers.forEach(function(handler){var changes=canReflect_1_19_2_canReflect.getChangesDependencyRecord(handler);if(changes){var record=whatIChange.mutate;if(!record){record=whatIChange.mutate={};}merge$1(record,changes);}});}return Object.keys(whatIChange).length?whatIChange:undefined;}//!steal-remove-end
},/**
	 * @function can-event-queue/value/value.can.isBound @can.isBound
	 * @parent can-event-queue/value/value
	 */"can.isBound":function isBound(){return !this.handlers.isEmpty();}};/**
 * @property {can-key-tree} can-event-queue/value/value.handlers handlers
 * @parent can-event-queue/value/value
 *
 * @description Access the handlers tree directly.
 *
 * @type {can-key-tree}
 *
 *  The handlers property is a [can-define-lazy-value lazily] defined property containing
 *  all handlers bound with [can-event-queue/value/value.on] and
 *  [can-event-queue/value/value.can.onValue].  It is a [can-key-tree] defined like:
 *
 *  ```js
 *  this.handlers = new KeyTree([Object, Array])
 *  ```
 *
 *  It is configured to call [can-event-queue/value/value.onBound] and
 *  [can-event-queue/value/value.onUnbound] on the instances when the first item is
 *  added to the tree and when the tree is emptied.
 */function defineLazyHandlers(){return new canKeyTree_1_2_2_canKeyTree([Object,Array],{onFirst:this.onBound!==undefined&&this.onBound.bind(this),onEmpty:this.onUnbound!==undefined&&this.onUnbound.bind(this)});}/**
 * @function can-event-queue/value/value.onBound onBound
 * @parent can-event-queue/value/value
 *
 * @description Perform operations when an observable is gains its first event handler.
 *
 * @signature `.onBound()`
 *
 * This method is not implemented by `can-event-queue/value/value`. Instead, the object
 * should implement it if it wants to perform some actions when it becomes bound.
 *
 * ```js
 * var mixinValueBindings = require("can-event-queue/value/value");
 *
 * var observable = mixinValueBindings({
 *   onBound: function(){
 *     console.log("I AM BOUND!");
 *   }
 * });
 *
 * observable.on(function(){});
 * // Logs: "I AM BOUND!"
 * ```
 *
 *//**
 * @function can-event-queue/value/value.onUnbound onUnbound
 * @parent can-event-queue/value/value
 *
 * @description Perform operations when an observable loses all of its event handlers.
 *
 * @signature `.onBound()`
 *
 * This method is not implemented by `can-event-queue/value/value`. Instead, the object
 * should implement it if it wants to perform some actions when it becomes unbound.
 *
 * ```js
 * var mixinValueBindings = require("can-event-queue/value/value");
 *
 * var observable = mixinValueBindings({
 *   onUnbound: function(){
 *     console.log("I AM UNBOUND!");
 *   }
 * });
 * var handler = function(){}
 * observable.on(function(){});
 * observable.off(function(){});
 * // Logs: "I AM UNBOUND!"
 * ```
 *//**
 * @module {function} can-event-queue/value/value
 * @parent can-event-queue
 *
 * @description Mixin methods and symbols to make this object or prototype object
 * behave like a single-value observable.
 *
 * @signature `mixinValueBindings( obj )`
 *
 * Adds symbols and methods that make `obj` or instances having `obj` on their prototype
 * behave like single-value observables.
 *
 * When `mixinValueBindings` is called on an `obj` like:
 *
 * ```js
 * var mixinValueBindings = require("can-event-queue/value/value");
 *
 * var observable = mixinValueBindings({});
 *
 * observable.on(function(newVal, oldVal){
 *   console.log(newVal);
 * });
 *
 * observable[canSymbol.for("can.dispatch")](2,1);
 * // Logs: 2
 * ```
 *
 * `mixinValueBindings` adds the following properties and symbols to the object:
 *
 * - [can-event-queue/value/value.on]
 * - [can-event-queue/value/value.off]
 * - [can-event-queue/value/value.can.dispatch]
 * - [can-event-queue/value/value.can.getWhatIChange]
 * - [can-event-queue/value/value.handlers]
 *
 * When the object is bound to for the first time with `.on` or `@can.onValue`, it will look for an [can-event-queue/value/value.onBound]
 * function on the object and call it.
 *
 * When the object is has no more handlers, it will look for an [can-event-queue/value/value.onUnbound]
 * function on the object and call it.
 */var mixinValueEventBindings=function(obj){canReflect_1_19_2_canReflect.assign(obj,properties);canReflect_1_19_2_canReflect.assignSymbols(obj,symbols);canDefineLazyValue_1_1_1_defineLazyValue(obj,"handlers",defineLazyHandlers,true);return obj;};// callbacks is optional
mixinValueEventBindings.addHandlers=function(obj,callbacks){console.warn("can-event-queue/value: Avoid using addHandlers. Add onBound and onUnbound methods instead.");obj.handlers=new canKeyTree_1_2_2_canKeyTree([Object,Array],callbacks);return obj;};var value=mixinValueEventBindings;// # Recorder Dependency Helpers
// This exposes two helpers:
// - `updateObservations` - binds and unbinds a diff of two observation records
//   (see can-observation-recorder for details on this data type).
// - `stopObserving` - unbinds an observation record.
// ## Helpers
// The following helpers all use `this` to pass additional arguments. This
// is for performance reasons as it avoids creating new functions.
function addNewKeyDependenciesIfNotInOld(event){// Expects `this` to have:
// - `.observable` - the observable we might be binding to.
// - `.oldEventSet` - the bound keys on the old dependency record for `observable`.
// - `.onDependencyChange` - the handler we will call back when the key is changed.
// If there wasn't any keys, or when we tried to delete we couldn't because the key
// wasn't in the set, start binding.
if(this.oldEventSet===undefined||this.oldEventSet["delete"](event)===false){canReflect_1_19_2_canReflect.onKeyValue(this.observable,event,this.onDependencyChange,"notify");}}// ### addObservablesNewKeyDependenciesIfNotInOld
// For each event in the `eventSet` of new observables,
// setup a binding (or delete the key).
function addObservablesNewKeyDependenciesIfNotInOld(eventSet,observable){eventSet.forEach(addNewKeyDependenciesIfNotInOld,{onDependencyChange:this.onDependencyChange,observable:observable,oldEventSet:this.oldDependencies.keyDependencies.get(observable)});}function removeKeyDependencies(event){canReflect_1_19_2_canReflect.offKeyValue(this.observable,event,this.onDependencyChange,"notify");}function removeObservablesKeyDependencies(oldEventSet,observable){oldEventSet.forEach(removeKeyDependencies,{onDependencyChange:this.onDependencyChange,observable:observable});}function addValueDependencies(observable){// If we were unable to delete the key in the old set, setup a binding.
if(this.oldDependencies.valueDependencies.delete(observable)===false){canReflect_1_19_2_canReflect.onValue(observable,this.onDependencyChange,"notify");}}function removeValueDependencies(observable){canReflect_1_19_2_canReflect.offValue(observable,this.onDependencyChange,"notify");}var canObservation_4_2_0_recorderDependencyHelpers={// ## updateObservations
//
// Binds `observationData.onDependencyChange` to dependencies in `observationData.newDependencies` that are not currently in
// `observationData.oldDependencies`.  Anything in `observationData.oldDependencies`
// left over is unbound.
//
// The algorthim works by:
// 1. Loop through the `new` dependencies, checking if an equivalent is in the `old` bindings.
//    - If there is an equivalent binding, delete that dependency from `old`.
//    - If there is __not__ an equivalent binding, setup a binding from that dependency to `.onDependencyChange`.
// 2. Loop through the remaining `old` dependencies, teardown bindings.
//
// For performance, this method mutates the values in `.oldDependencies`.
updateObservations:function(observationData){observationData.newDependencies.keyDependencies.forEach(addObservablesNewKeyDependenciesIfNotInOld,observationData);observationData.oldDependencies.keyDependencies.forEach(removeObservablesKeyDependencies,observationData);observationData.newDependencies.valueDependencies.forEach(addValueDependencies,observationData);observationData.oldDependencies.valueDependencies.forEach(removeValueDependencies,observationData);},stopObserving:function(observationReciever,onDependencyChange){observationReciever.keyDependencies.forEach(removeObservablesKeyDependencies,{onDependencyChange:onDependencyChange});observationReciever.valueDependencies.forEach(removeValueDependencies,{onDependencyChange:onDependencyChange});}};var temporarilyBoundNoOperation=function(){};// A list of temporarily bound computes
var observables;// Unbinds all temporarily bound computes.
var unbindTemporarilyBoundValue=function(){for(var i=0,len=observables.length;i<len;i++){canReflect_1_19_2_canReflect.offValue(observables[i],temporarilyBoundNoOperation);}observables=null;};// ### temporarilyBind
// Binds computes for a moment to cache their value and prevent re-calculating it.
function temporarilyBind(compute){var computeInstance=compute.computeInstance||compute;canReflect_1_19_2_canReflect.onValue(computeInstance,temporarilyBoundNoOperation);if(!observables){observables=[];setTimeout(unbindTemporarilyBoundValue,10);}observables.push(computeInstance);}var canObservation_4_2_0_temporarilyBind=temporarilyBind;/* global require */// # can-observation
var dispatchSymbol=canSymbol_1_7_0_canSymbol.for("can.dispatch");var getChangesSymbol=canSymbol_1_7_0_canSymbol.for("can.getChangesDependencyRecord");var getValueDependenciesSymbol=canSymbol_1_7_0_canSymbol.for("can.getValueDependencies");// ## Observation constructor
function Observation(func,context,options){this.deriveQueue=canQueues_1_3_2_canQueues.deriveQueue;this.func=func;this.context=context;this.options=options||{priority:0,isObservable:true};// A flag if we are bound or not
this.bound=false;// Set _value to undefined so can-view-scope & can-compute can check for it
this._value=undefined;// These properties will manage what our new and old dependencies are.
this.newDependencies=canObservationRecorder_1_3_1_canObservationRecorder.makeDependenciesRecord();this.oldDependencies=null;// Make functions we need to pass around and maintain `this`.
var self=this;this.onDependencyChange=function(newVal){self.dependencyChange(this,newVal);};this.update=this.update.bind(this);// Add debugging names.
//!steal-remove-start
if(process.env.NODE_ENV!=='production'){this.onDependencyChange[getChangesSymbol]=function getChanges(){var s=new Set();s.add(self);return {valueDependencies:s};};Object.defineProperty(this.onDependencyChange,"name",{value:canReflect_1_19_2_canReflect.getName(this)+".onDependencyChange"});Object.defineProperty(this.update,"name",{value:canReflect_1_19_2_canReflect.getName(this)+".update"});this._name=canReflect_1_19_2_canReflect.getName(this);// cached for performance
}//!steal-remove-end
}// ## Observation prototype methods
// Mixin value event bindings. This is where the following are added:
// - `.handlers` which call `onBound` and `onUnbound`
// - `.on` / `.off`
// - `can.onValue` `can.offValue`
// - `can.getWhatIChange`
value(Observation.prototype);canReflect_1_19_2_canReflect.assign(Observation.prototype,{// Starts observing changes and adds event listeners.
onBound:function(){this.bound=true;// Store the old dependencies
this.oldDependencies=this.newDependencies;// Start recording dependencies.
canObservationRecorder_1_3_1_canObservationRecorder.start(this._name);// Call the observation's function and update the new value.
this._value=this.func.call(this.context);// Get the new dependencies.
this.newDependencies=canObservationRecorder_1_3_1_canObservationRecorder.stop();// Diff and update the bindings. On change, everything will call
// `this.onDependencyChange`, which calls `this.dependencyChange`.
canObservation_4_2_0_recorderDependencyHelpers.updateObservations(this);},// This is called when any of the dependencies change.
// It queues up an update in the `deriveQueue` to be run after all source
// observables have had time to notify all observables that "derive" their value.
dependencyChange:function(context,args){if(this.bound===true){var queuesArgs=[];queuesArgs=[this.update,this,[],{priority:this.options.priority,element:this.options.element}];//!steal-remove-start
if(process.env.NODE_ENV!=='production'){queuesArgs=[this.update,this,[],{priority:this.options.priority,element:this.options.element/* jshint laxcomma: true */,log:[canReflect_1_19_2_canReflect.getName(this.update)]/* jshint laxcomma: false */}/* jshint laxcomma: true */,[canReflect_1_19_2_canReflect.getName(context),"changed"]/* jshint laxcomma: false */];}//!steal-remove-end
// Update this observation after all `notify` tasks have been run.
this.deriveQueue.enqueue.apply(this.deriveQueue,queuesArgs);}},// Called to update its value as part of the `derive` queue.
update:function(){if(this.bound===true){// Keep the old value.
var oldValue=this._value;this.oldValue=null;// Re-run `this.func` and update dependency bindings.
this.onBound();// If our value changed, call the `dispatch` method provided by `can-event-queue/value/value`.
if(oldValue!==this._value){this[dispatchSymbol](this._value,oldValue);}}},// Called when nothing is bound to this observation.
// Removes all event listeners on all dependency observables.
onUnbound:function(){this.bound=false;canObservation_4_2_0_recorderDependencyHelpers.stopObserving(this.newDependencies,this.onDependencyChange);// Setup newDependencies in case someone binds again to this observable.
this.newDependencies=canObservationRecorder_1_3_1_canObservationRecorder.makeDependenciesRecord();},// Reads the value of the observation.
get:function(){// If an external observation is tracking observables and
// this compute can be listened to by "function" based computes ....
if(this.options.isObservable&&canObservationRecorder_1_3_1_canObservationRecorder.isRecording()){// ... tell the tracking compute to listen to change on this observation.
canObservationRecorder_1_3_1_canObservationRecorder.add(this);// ... if we are not bound, we should bind so that
// we don't have to re-read to get the value of this observation.
if(this.bound===false){Observation.temporarilyBind(this);}}if(this.bound===true){// It's possible that a child dependency of this observable might be queued
// to change. Check all child dependencies and make sure they are up-to-date by
// possibly running what they have registered in the derive queue.
if(this.deriveQueue.tasksRemainingCount()>0){Observation.updateChildrenAndSelf(this);}return this._value;}else {// If we are not bound, just call the function.
return this.func.call(this.context);}},hasDependencies:function(){var newDependencies=this.newDependencies;return this.bound?newDependencies.valueDependencies.size+newDependencies.keyDependencies.size>0:undefined;},log:function(){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var quoteString=function quoteString(x){return typeof x==="string"?JSON.stringify(x):x;};this._log=function(previous,current){dev.log(canReflect_1_19_2_canReflect.getName(this),"\n is  ",quoteString(current),"\n was ",quoteString(previous));};}//!steal-remove-end
}});Object.defineProperty(Observation.prototype,"value",{get:function(){return this.get();}});var observationProto={"can.getValue":Observation.prototype.get,"can.isValueLike":true,"can.isMapLike":false,"can.isListLike":false,"can.valueHasDependencies":Observation.prototype.hasDependencies,"can.getValueDependencies":function(){if(this.bound===true){// Only provide `keyDependencies` and `valueDependencies` properties
// if there's actually something there.
var deps=this.newDependencies,result={};if(deps.keyDependencies.size){result.keyDependencies=deps.keyDependencies;}if(deps.valueDependencies.size){result.valueDependencies=deps.valueDependencies;}return result;}return undefined;},"can.getPriority":function(){return this.options.priority;},"can.setPriority":function(priority){this.options.priority=priority;},"can.setElement":function(element){this.options.element=element;this.deriveQueue=canQueues_1_3_2_canQueues.domQueue||canQueues_1_3_2_canQueues.deriveQueue;}};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){observationProto["can.getName"]=function(){return canReflect_1_19_2_canReflect.getName(this.constructor)+"<"+canReflect_1_19_2_canReflect.getName(this.func)+">";};}//!steal-remove-end
canReflect_1_19_2_canReflect.assignSymbols(Observation.prototype,observationProto);// ## Observation.updateChildrenAndSelf
// This recursively checks if an observation's dependencies might be in the `derive` queue.
// If it is, we need to update that value so the reading of this value will be correct.
// This can happen if an observation suddenly switches to depending on something that has higher
// priority than itself.  We need to make sure that value is completely updated.
Observation.updateChildrenAndSelf=function(observation){// If the observable has an `update` method and it's enqueued, flush that task immediately so
// the value is right.
// > NOTE: This only works for `Observation` right now.  We need a way of knowing how
// > to find what an observable might have in the `deriveQueue`.
if(observation.update!==undefined&&observation.deriveQueue.isEnqueued(observation.update)===true){// TODO: In the future, we should be able to send log information
// to explain why this needed to be updated.
observation.deriveQueue.flushQueuedTask(observation.update);return true;}// If we can get dependency values from this observable ...
if(observation[getValueDependenciesSymbol]){// ... Loop through each dependency and see if any of them (or their children) needed an update.
var childHasChanged=false;var valueDependencies=observation[getValueDependenciesSymbol]().valueDependencies||[];valueDependencies.forEach(function(observable){if(Observation.updateChildrenAndSelf(observable)===true){childHasChanged=true;}});return childHasChanged;}else {return false;}};// ## Legacy Stuff
// Warn when `ObservationRecorder` methods are called on `Observation`.
var alias={addAll:"addMany"};["add","addAll","ignore","trap","trapsCount","isRecording"].forEach(function(methodName){Observation[methodName]=function(){var name=alias[methodName]?alias[methodName]:methodName;console.warn("can-observation: Call "+name+"() on can-observation-recorder.");return canObservationRecorder_1_3_1_canObservationRecorder[name].apply(this,arguments);};});Observation.prototype.start=function(){console.warn("can-observation: Use .on and .off to bind.");return this.onBound();};Observation.prototype.stop=function(){console.warn("can-observation: Use .on and .off to bind.");return this.onUnbound();};// ### temporarilyBind
// Will bind an observable value temporarily.  This should be part of queues probably.
Observation.temporarilyBind=canObservation_4_2_0_temporarilyBind;var canObservation_4_2_0_canObservation=canNamespace_1_0_0_canNamespace.Observation=Observation;// DependencyRecord :: { keyDependencies: Map, valueDependencies: Set }
var makeDependencyRecord=function makeDependencyRecord(){return {keyDependencies:new Map(),valueDependencies:new Set()};};var makeRootRecord=function makeRootRecord(){return {// holds mutated key dependencies of a key-value like object, e.g:
// if person.first is mutated by other observable, this map will have a
// key `first` (the mutated property) mapped to a DependencyRecord
mutateDependenciesForKey:new Map(),// holds mutated value dependencies of value-like objects
mutateDependenciesForValue:makeDependencyRecord()};};var addMutatedBy=function(mutatedByMap){return function addMutatedBy(mutated,key,mutator){var gotKey=arguments.length===3;// normalize arguments
if(arguments.length===2){mutator=key;key=undefined;}// normalize mutator when shorthand is used
if(!mutator.keyDependencies&&!mutator.valueDependencies){var s=new Set();s.add(mutator);mutator={valueDependencies:s};}// retrieve root record from the state map or create a new one
var root=mutatedByMap.get(mutated);if(!root){root=makeRootRecord();mutatedByMap.set(mutated,root);}// create a [key] DependencyRecord if [key] was provided
// and Record does not already exist
if(gotKey&&!root.mutateDependenciesForKey.get(key)){root.mutateDependenciesForKey.set(key,makeDependencyRecord());}// retrieve DependencyRecord
var dependencyRecord=gotKey?root.mutateDependenciesForKey.get(key):root.mutateDependenciesForValue;if(mutator.valueDependencies){canReflect_1_19_2_canReflect.addValues(dependencyRecord.valueDependencies,mutator.valueDependencies);}if(mutator.keyDependencies){canReflect_1_19_2_canReflect.each(mutator.keyDependencies,function(keysSet,obj){var entry=dependencyRecord.keyDependencies.get(obj);if(!entry){entry=new Set();dependencyRecord.keyDependencies.set(obj,entry);}canReflect_1_19_2_canReflect.addValues(entry,keysSet);});}};};var deleteMutatedBy=function(mutatedByMap){return function deleteMutatedBy(mutated,key,mutator){var gotKey=arguments.length===3;var root=mutatedByMap.get(mutated);// normalize arguments
if(arguments.length===2){mutator=key;key=undefined;}// normalize mutator when shorthand is used
if(!mutator.keyDependencies&&!mutator.valueDependencies){var s=new Set();s.add(mutator);mutator={valueDependencies:s};}var dependencyRecord=gotKey?root.mutateDependenciesForKey.get(key):root.mutateDependenciesForValue;if(mutator.valueDependencies){canReflect_1_19_2_canReflect.removeValues(dependencyRecord.valueDependencies,mutator.valueDependencies);}if(mutator.keyDependencies){canReflect_1_19_2_canReflect.each(mutator.keyDependencies,function(keysSet,obj){var entry=dependencyRecord.keyDependencies.get(obj);if(entry){canReflect_1_19_2_canReflect.removeValues(entry,keysSet);if(!entry.size){dependencyRecord.keyDependencies.delete(obj);}}});}};};var isFunction$4=function isFunction(value){return typeof value==="function";};var getWhatIChangeSymbol=canSymbol_1_7_0_canSymbol.for("can.getWhatIChange");var getKeyDependenciesSymbol=canSymbol_1_7_0_canSymbol.for("can.getKeyDependencies");var getValueDependenciesSymbol$1=canSymbol_1_7_0_canSymbol.for("can.getValueDependencies");var getKeyDependencies=function getKeyDependencies(obj,key){if(isFunction$4(obj[getKeyDependenciesSymbol])){return canReflect_1_19_2_canReflect.getKeyDependencies(obj,key);}};var getValueDependencies=function getValueDependencies(obj){if(isFunction$4(obj[getValueDependenciesSymbol$1])){return canReflect_1_19_2_canReflect.getValueDependencies(obj);}};var getMutatedKeyDependencies=function getMutatedKeyDependencies(mutatedByMap,obj,key){var root=mutatedByMap.get(obj);var dependencyRecord;if(root&&root.mutateDependenciesForKey.has(key)){dependencyRecord=root.mutateDependenciesForKey.get(key);}return dependencyRecord;};var getMutatedValueDependencies=function getMutatedValueDependencies(mutatedByMap,obj){var result;var root=mutatedByMap.get(obj);if(root){var dependencyRecord=root.mutateDependenciesForValue;if(dependencyRecord.keyDependencies.size){result=result||{};result.keyDependencies=dependencyRecord.keyDependencies;}if(dependencyRecord.valueDependencies.size){result=result||{};result.valueDependencies=dependencyRecord.valueDependencies;}}return result;};var getWhatIChange=function getWhatIChange(obj,key){if(isFunction$4(obj[getWhatIChangeSymbol])){var gotKey=arguments.length===2;return gotKey?canReflect_1_19_2_canReflect.getWhatIChange(obj,key):canReflect_1_19_2_canReflect.getWhatIChange(obj);}};var isEmptyRecord=function isEmptyRecord(record){return record==null||!Object.keys(record).length||record.keyDependencies&&!record.keyDependencies.size&&record.valueDependencies&&!record.valueDependencies.size;};var getWhatChangesMe=function getWhatChangesMe(mutatedByMap,obj,key){var gotKey=arguments.length===3;var mutate=gotKey?getMutatedKeyDependencies(mutatedByMap,obj,key):getMutatedValueDependencies(mutatedByMap,obj);var derive=gotKey?getKeyDependencies(obj,key):getValueDependencies(obj);if(!isEmptyRecord(mutate)||!isEmptyRecord(derive)){return canAssign_1_3_3_canAssign(canAssign_1_3_3_canAssign({},mutate?{mutate:mutate}:null),derive?{derive:derive}:null);}};var getDependencyDataOf=function(mutatedByMap){return function getDependencyDataOf(obj,key){var gotKey=arguments.length===2;var whatChangesMe=gotKey?getWhatChangesMe(mutatedByMap,obj,key):getWhatChangesMe(mutatedByMap,obj);var whatIChange=gotKey?getWhatIChange(obj,key):getWhatIChange(obj);if(whatChangesMe||whatIChange){return canAssign_1_3_3_canAssign(canAssign_1_3_3_canAssign({},whatIChange?{whatIChange:whatIChange}:null),whatChangesMe?{whatChangesMe:whatChangesMe}:null);}};};// mutatedByMap :: WeakMap<obj, {
//	mutateDependenciesForKey:   Map<key, DependencyRecord>,
//	mutateDependenciesForValue: DependencyRecord
// }>
var mutatedByMap=new WeakMap();var canReflectDependencies_1_1_2_canReflectDependencies={// Track mutations between observable as dependencies
// addMutatedBy(obs, obs2);
// addMutatedBy(obs, key, obs2);
// addMutatedBy(obs, { valueDependencies: Set, keyDependencies: Map })
// addMutatedBy(obs, key, { valueDependencies: Set, keyDependencies: Map })
addMutatedBy:addMutatedBy(mutatedByMap),// Call this method with the same arguments as `addMutatedBy`
// to unregister the mutation dependency
deleteMutatedBy:deleteMutatedBy(mutatedByMap),// Returns an object with the dependecies of the given argument
//	{
//		whatIChange: { mutate: DependencyRecord, derive: DependencyRecord },
//		whatChangesMe: { mutate: DependencyRecord, derive: DependencyRecord }
//	}
getDependencyDataOf:getDependencyDataOf(mutatedByMap)};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var canReflectDependencies=canReflectDependencies_1_1_2_canReflectDependencies;}//!steal-remove-end
var key=function keyObservable(root,keyPath){var keyPathParts=canKey_1_2_1_utils.parts(keyPath);var lastIndex=keyPathParts.length-1;// Some variables used to build the dependency/mutation graph
//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var lastKey;// This stores the last part of the keyPath, e.g. “key” in “outer.inner.key”
var lastParent;// This stores the object that the last key is on, e.g. “outer.inner” in outer: {inner: {"key": "value"}}
}//!steal-remove-end
var observation=new canObservation_4_2_0_canObservation(function(){var value;// This needs to be walked every time because the objects along the key path might change
canKey_1_2_1_canKey.walk(root,keyPathParts,function(keyData,i){if(i===lastIndex){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){// observation is mutating keyData.parent
if(lastParent&&(keyData.key!==lastKey||keyData.parent!==lastParent)){canReflectDependencies.deleteMutatedBy(lastParent,lastKey,observation);}lastKey=keyData.key;lastParent=keyData.parent;canReflectDependencies.addMutatedBy(lastParent,lastKey,observation);}//!steal-remove-end
value=keyData.value;}});return value;});// Function for setting the value
var valueSetter=function(newVal){canKey_1_2_1_canKey.set(root,keyPathParts,newVal);};// The `value` property getter & setter
Object.defineProperty(observation,"value",{get:observation.get,set:valueSetter});var symbolsToAssign={"can.setValue":valueSetter};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){// Debug name
symbolsToAssign["can.getName"]=function getName(){var objectName=canReflect_1_19_2_canReflect.getName(root);return "keyObservable<"+objectName+"."+keyPath+">";};// Register what this observable changes
symbolsToAssign["can.getWhatIChange"]=function getWhatIChange(){var m=new Map();var s=new Set();s.add(lastKey);m.set(lastParent,s);return {mutate:{keyDependencies:m}};};}//!steal-remove-end
return canReflect_1_19_2_canReflect.assignSymbols(observation,symbolsToAssign);};// when printing out strings to the console, quotes are not included which
// makes it confusing to tell the actual output from static string messages
function quoteString(x){return typeof x==="string"?JSON.stringify(x):x;}// To add the `.log` function to a observable
// a.- Add the log function to the propotype:
//	   `Observable.propotype.log = log`
// b.- Make sure `._log` is called by the observable when mutation happens
//     `_.log` should be passed the current value and the value before the mutation
var canSimpleObservable_2_5_0_log=function log(){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){this._log=function(previous,current){dev.log(canReflect_1_19_2_canReflect.getName(this),"\n is  ",quoteString(current),"\n was ",quoteString(previous));};}//!steal-remove-end
};var dispatchSymbol$1=canSymbol_1_7_0_canSymbol.for("can.dispatch");/**
 * @module {function} can-simple-observable
 * @parent can-observables
 * @collection can-infrastructure
 * @package ./package.json
 * @description Create an observable value.
 *
 * @signature `new SimpleObservable(initialValue)`
 *
 * Creates an observable value that can be read, written, and observed using [can-reflect].
 *
 * @param {*} initialValue The initial value of the observable.
 *
 * @return {can-simple-observable} An observable instance
 *
 * @body
 *
 * ## Use
 *
 * ```js
 *  var obs = new SimpleObservable('one');
 *
 *  canReflect.getValue(obs); // -> "one"
 *
 *  canReflect.setValue(obs, 'two');
 *  canReflect.getValue(obs); // -> "two"
 *
 *  function handler(newValue) {
 *    // -> "three"
 *  };
 *  canReflect.onValue(obs, handler);
 *  canReflect.setValue(obs, 'three');
 *
 *  canReflect.offValue(obs, handler);
 * ```
 */function SimpleObservable(initialValue){this._value=initialValue;}// mix in the value-like object event bindings
value(SimpleObservable.prototype);canReflect_1_19_2_canReflect.assignMap(SimpleObservable.prototype,{log:canSimpleObservable_2_5_0_log,get:function(){canObservationRecorder_1_3_1_canObservationRecorder.add(this);return this._value;},set:function(value$$1){var old=this._value;this._value=value$$1;this[dispatchSymbol$1](value$$1,old);}});Object.defineProperty(SimpleObservable.prototype,"value",{set:function(value$$1){return this.set(value$$1);},get:function(){return this.get();}});var simpleObservableProto={"can.getValue":SimpleObservable.prototype.get,"can.setValue":SimpleObservable.prototype.set,"can.isMapLike":false,"can.valueHasDependencies":function(){return true;}};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){simpleObservableProto["can.getName"]=function(){var value$$1=this._value;if(typeof value$$1!=='object'||value$$1===null){value$$1=JSON.stringify(value$$1);}else {value$$1='';}return canReflect_1_19_2_canReflect.getName(this.constructor)+"<"+value$$1+">";};}//!steal-remove-end
canReflect_1_19_2_canReflect.assignSymbols(SimpleObservable.prototype,simpleObservableProto);var canSimpleObservable_2_5_0_canSimpleObservable=canNamespace_1_0_0_canNamespace.SimpleObservable=SimpleObservable;var peek$1=canObservationRecorder_1_3_1_canObservationRecorder.ignore(canReflect_1_19_2_canReflect.getValue.bind(canReflect_1_19_2_canReflect));// This supports an "internal" settable value that the `fn` can derive its value from.
// It's useful to `can-define`.
// ```
// new SettableObservable(function(lastSet){
//   return lastSet * 5;
// }, null, 5)
// ```
function SettableObservable(fn,context,initialValue){this.lastSetValue=new canSimpleObservable_2_5_0_canSimpleObservable(initialValue);function observe(){return fn.call(context,this.lastSetValue.get());}this.handler=this.handler.bind(this);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){canReflect_1_19_2_canReflect.assignSymbols(this,{"can.getName":function(){return canReflect_1_19_2_canReflect.getName(this.constructor)+"<"+canReflect_1_19_2_canReflect.getName(fn)+">";}});Object.defineProperty(this.handler,"name",{value:canReflect_1_19_2_canReflect.getName(this)+".handler"});Object.defineProperty(observe,"name",{value:canReflect_1_19_2_canReflect.getName(fn)+"::"+canReflect_1_19_2_canReflect.getName(this.constructor)});}//!steal-remove-end
this.observation=new canObservation_4_2_0_canObservation(observe,this);}value(SettableObservable.prototype);canReflect_1_19_2_canReflect.assignMap(SettableObservable.prototype,{// call `obs.log()` to log observable changes to the browser console
// The observable has to be bound for `.log` to be called
log:canSimpleObservable_2_5_0_log,constructor:SettableObservable,handler:function(newVal){var old=this._value,reasonLog;this._value=newVal;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(typeof this._log==="function"){this._log(old,newVal);}reasonLog=[canReflect_1_19_2_canReflect.getName(this),"set to",newVal,"from",old];}//!steal-remove-end
// adds callback handlers to be called w/i their respective queue.
canQueues_1_3_2_canQueues.enqueueByQueue(this.handlers.getNode([]),this,[newVal,old],null,reasonLog);},onBound:function(){// onBound can be called by `.get` and then later called through
// a keyTree binding.
if(!this.bound){this.bound=true;this.activate();}},activate:function(){canReflect_1_19_2_canReflect.onValue(this.observation,this.handler,"notify");this._value=peek$1(this.observation);},onUnbound:function(){this.bound=false;canReflect_1_19_2_canReflect.offValue(this.observation,this.handler,"notify");},set:function(newVal){var oldVal=this.lastSetValue.get();if(canReflect_1_19_2_canReflect.isObservableLike(oldVal)&&canReflect_1_19_2_canReflect.isValueLike(oldVal)&&!canReflect_1_19_2_canReflect.isObservableLike(newVal)){canReflect_1_19_2_canReflect.setValue(oldVal,newVal);}else {if(newVal!==oldVal){this.lastSetValue.set(newVal);}}},get:function(){if(canObservationRecorder_1_3_1_canObservationRecorder.isRecording()){canObservationRecorder_1_3_1_canObservationRecorder.add(this);if(!this.bound){// proactively setup bindings
this.onBound();}}if(this.bound===true){return this._value;}else {return this.observation.get();}},hasDependencies:function(){return canReflect_1_19_2_canReflect.valueHasDependencies(this.observation);},getValueDependencies:function(){return canReflect_1_19_2_canReflect.getValueDependencies(this.observation);}});Object.defineProperty(SettableObservable.prototype,"value",{set:function(value$$1){return this.set(value$$1);},get:function(){return this.get();}});canReflect_1_19_2_canReflect.assignSymbols(SettableObservable.prototype,{"can.getValue":SettableObservable.prototype.get,"can.setValue":SettableObservable.prototype.set,"can.isMapLike":false,"can.getPriority":function(){return canReflect_1_19_2_canReflect.getPriority(this.observation);},"can.setPriority":function(newPriority){canReflect_1_19_2_canReflect.setPriority(this.observation,newPriority);},"can.valueHasDependencies":SettableObservable.prototype.hasDependencies,"can.getValueDependencies":SettableObservable.prototype.getValueDependencies});var settable=SettableObservable;var canValue_1_1_2_canValue=canNamespace_1_0_0_canNamespace.value={bind:function(object,keyPath){return key(object,keyPath);},from:function(object,keyPath){var observationFunction=function(){return canKey_1_2_1_canKey.get(object,keyPath);};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var objectName=canReflect_1_19_2_canReflect.getName(object);Object.defineProperty(observationFunction,"name",{value:"ValueFrom<"+objectName+"."+keyPath+">"});}//!steal-remove-end
return new canObservation_4_2_0_canObservation(observationFunction);},returnedBy:function(getter,context,initialValue){if(getter.length===1){return new settable(getter,context,initialValue);}else {return new canObservation_4_2_0_canObservation(getter,context);}},to:function(object,keyPath){var observable=key(object,keyPath);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){canReflect_1_19_2_canReflect.assignSymbols(observable.onDependencyChange,{"can.getChangesDependencyRecord":function getChangesDependencyRecord(){// can-simple-observable/key/ creates an observation that walks along
// the keyPath. In doing so, it implicitly registers the objects and
// keys along the path as mutators of the observation; this means
// getDependencyDataOf(...an object and key along the path) returns
// whatIChange.derive.valueDependencies = [observable], which is not
// true! The observable does not derive its value from the objects
// along the keyPath. By implementing getChangesDependencyRecord and
// returning undefined, calls to can.getWhatIChange() for any objects
// along the keyPath will not include the observable.
}});}//!steal-remove-end
var symbolsToAssign={// Remove the getValue symbol so the observable is only a setter
"can.getValue":null};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){symbolsToAssign["can.getValueDependencies"]=function getValueDependencies(){// Normally, getDependencyDataOf(observable) would include
// whatChangesMe.derive.keyDependencies, and it would contain
// the object and anything along keyPath. This symbol returns
// undefined because this observable does not derive its value
// from the object or anything along the keyPath, it only
// mutates the last object in the keyPath.
};}//!steal-remove-end
return canReflect_1_19_2_canReflect.assignSymbols(observable,symbolsToAssign);},with:function(initialValue){return new canSimpleObservable_2_5_0_canSimpleObservable(initialValue);}};// ##string.js
// _Miscellaneous string utility functions._
// Several of the methods in this plugin use code adapted from Prototype
// Prototype JavaScript framework, version 1.6.0.1.
// © 2005-2007 Sam Stephenson
var strUndHash=/_|-/,strColons=/\=\=/,strWords=/([A-Z]+)([A-Z][a-z])/g,strLowUp=/([a-z\d])([A-Z])/g,strDash=/([a-z\d])([A-Z])/g,strQuote=/"/g,strSingleQuote=/'/g,strHyphenMatch=/-+(.)?/g,strCamelMatch=/[a-z][A-Z]/g,convertBadValues=function(content){// Convert bad values into empty strings
var isInvalid=content===null||content===undefined||isNaN(content)&&''+content==='NaN';return ''+(isInvalid?'':content);};var string={/**
	 * @function can-string.esc esc
	 * @signature `string.esc(content)`
	 * @param  {String} content a string
	 * @return {String}         the string safely HTML-escaped
	 *
	 * ```js
	 * var string = require("can-string");
	 *
	 * string.esc("<div>&nbsp;</div>"); //-> "&lt;div&gt;&amp;nbsp;&lt;/div&gt;"
	 * ```
	 */esc:function(content){return convertBadValues(content).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(strQuote,'&#34;').replace(strSingleQuote,'&#39;');},/**
	 * @function can-string.capitalize capitalize
	 * @signature `string.capitalize(s)`
	 * @param  {String} s     the string to capitalize
	 * @return {String}       the supplied string with the first character uppercased if it is a letter
	 *
	 * ```js
	 * var string = require("can-string");
	 *
	 * console.log(string.capitalize("foo")); // -> "Foo"
	 * console.log(string.capitalize("123")); // -> "123"
	 * ```
	 */capitalize:function(s){// Used to make newId.
return s.charAt(0).toUpperCase()+s.slice(1);},/**
	 * @function can-string.camelize camelize
	 * @signature `string.camelize(s)`
	 * @param  {String} str   the string to camelCase
	 * @return {String}       the supplied string with hyphens removed and following letters capitalized.
	 *
	 * ```js
	 * var string = require("can-string");
	 *
	 * console.log(string.camelize("foo-bar")); // -> "fooBar"
	 * console.log(string.camelize("-webkit-flex-flow")); // -> "WebkitFlexFlow"
	 * ```
	 */camelize:function(str){return convertBadValues(str).replace(strHyphenMatch,function(match,chr){return chr?chr.toUpperCase():'';});},/**
	 * @function can-string.hyphenate hyphenate
	 * @signature `string.hyphenate(s)`
	 * @param  {String} str   a string in camelCase
	 * @return {String}       the supplied string with camelCase converted to hyphen-lowercase digraphs
	 *
	 * ```js
	 * var string = require("can-string");
	 *
	 * console.log(string.hyphenate("fooBar")); // -> "foo-bar"
	 * console.log(string.hyphenate("WebkitFlexFlow")); // -> "Webkit-flex-flow"
	 * ```
	 */hyphenate:function(str){return convertBadValues(str).replace(strCamelMatch,function(str){return str.charAt(0)+'-'+str.charAt(1).toLowerCase();});},/**
	 * @function can-string.pascalize pascalize
	 * @signature `string.pascalize(s)`
	 * @param  {String} str   the string in hyphen case | camelCase
	 * @return {String}       the supplied string with hyphens | camelCase converted to PascalCase
	 *
	 * ```js
	 * var string = require("can-string");
	 *
	 * console.log(string.pascalize("fooBar")); // -> "FooBar"
	 * console.log(string.pascalize("baz-bar")); // -> "BazBar"
	 * ```
	 */pascalize:function(str){return string.capitalize(string.camelize(str));},/**
	 * @function can-string.underscore underscore
	 * @signature `string.underscore(s)`
	 * @param  {String} str   a string in camelCase
	 * @return {String}       the supplied string with camelCase converted to underscore-lowercase digraphs
	 *
	 * ```js
	 * var string = require("can-string");
	 *
	 * console.log(string.underscore("fooBar")); // -> "foo_bar"
	 * console.log(string.underscore("HTMLElement")); // -> "html_element"
	 * ```
	 */underscore:function(s){return s.replace(strColons,'/').replace(strWords,'$1_$2').replace(strLowUp,'$1_$2').replace(strDash,'_').toLowerCase();},/**
	 * @property {RegExp} can-string.strUndHash strUndHash
	 *
	 * A regex which matches an underscore or hyphen character
	 */undHash:strUndHash};var canString_1_1_0_canString=string;var inSetupSymbol=canSymbol_1_7_0_canSymbol.for("can.initializing");//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var CanString=canString_1_1_0_canString;var reservedWords={"abstract":true,"boolean":true,"break":true,"byte":true,"case":true,"catch":true,"char":true,"class":true,"const":true,"continue":true,"debugger":true,"default":true,"delete":true,"do":true,"double":true,"else":true,"enum":true,"export":true,"extends":true,"false":true,"final":true,"finally":true,"float":true,"for":true,"function":true,"goto":true,"if":true,"implements":true,"import":true,"in":true,"instanceof":true,"int":true,"interface":true,"let":true,"long":true,"native":true,"new":true,"null":true,"package":true,"private":true,"protected":true,"public":true,"return":true,"short":true,"static":true,"super":true,"switch":true,"synchronized":true,"this":true,"throw":true,"throws":true,"transient":true,"true":true,"try":true,"typeof":true,"var":true,"void":true,"volatile":true,"while":true,"with":true};var constructorNameRegex=/[^A-Z0-9_]/gi;}//!steal-remove-end
// ## construct.js
// `Construct`
// _This is a modified version of
// [John Resig's class](http://ejohn.org/blog/simple-javascript-inheritance/).
// It provides class level inheritance and callbacks._
// A private flag used to initialize a new class instance without
// initializing it's bindings.
var initializing=0;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var namedCtor=function(cache){return function(name,fn){return (name in cache?cache[name]:cache[name]=new Function("__","function "+name+"(){return __.apply(this,arguments)};return "+name))(fn);};}({});}//!steal-remove-end
/**
 * @add can-construct
 */var Construct=function(){if(arguments.length){return Construct.extend.apply(Construct,arguments);}};var canGetDescriptor;try{canGetDescriptor=true;}catch(e){canGetDescriptor=false;}var getDescriptor=function(newProps,name){var descriptor=Object.getOwnPropertyDescriptor(newProps,name);if(descriptor&&(descriptor.get||descriptor.set)){return descriptor;}return null;},inheritGetterSetter=function(newProps,oldProps,addTo){addTo=addTo||newProps;var descriptor;for(var name in newProps){if(descriptor=getDescriptor(newProps,name)){this._defineProperty(addTo,oldProps,name,descriptor);}else {Construct._overwrite(addTo,oldProps,name,newProps[name]);}}},simpleInherit=function(newProps,oldProps,addTo){addTo=addTo||newProps;for(var name in newProps){Construct._overwrite(addTo,oldProps,name,newProps[name]);}},defineNonEnumerable=function(obj,prop,value){Object.defineProperty(obj,prop,{configurable:true,writable:true,enumerable:false,value:value});};/**
 * @static
 */canReflect_1_19_2_canReflect.assignMap(Construct,{/**
	 * @property {Boolean} can-construct.constructorExtends constructorExtends
	 * @parent can-construct.static
	 *
	 * @description
	 * Toggles the behavior of a constructor function called
	 * without the `new` keyword to extend the constructor function or
	 * create a new instance.
	 *
	 * ```js
	 * var animal = Animal();
	 * // vs
	 * var animal = new Animal();
	 * ```
	 *
	 * @body
	 *
	 * If `constructorExtends` is:
	 *
	 *  - `true` - the constructor extends
	 *  - `false` - a new instance of the constructor is created
	 *
	 * This property defaults to false.
	 *
	 * Example of constructExtends as `true`:
	 *
	 * ```js
	 * var Animal = Construct.extend({
	 *   constructorExtends: true // the constructor extends
	 * },{
	 *   sayHi: function() {
	 *     console.log("hai!");
	 *   }
	 * });
	 *
	 * var Pony = Animal({
	 *   gallop: function () {
	 *      console.log("Galloping!!");
	 *   }
	 * }); // Pony is now a constructor function extended from Animal
	 *
	 * var frank = new Animal(); // frank is a new instance of Animal
	 *
	 * var gertrude = new Pony(); // gertrude is a new instance of Pony
	 * gertrude.sayHi(); // "hai!" - sayHi is "inherited" from Animal
	 * gertrude.gallop(); // "Galloping!!" - gallop is unique to instances of Pony
	 *```
	 *
	 * The default behavior is shown in the example below:
	 *
	 * ```js
	 * var Animal = Construct.extend({
	 *   constructorExtends: false // the constructor does NOT extend
	 * },{
	 *   sayHi: function() {
	 *     console.log("hai!");
	 *   }
	 * });
	 *
	 * var pony = Animal(); // pony is a new instance of Animal
	 * var frank = new Animal(); // frank is a new instance of Animal
	 *
	 * pony.sayHi() // "hai!"
	 * frank.sayHi() // "hai!"
	 *```
	 * By default to extend a constructor, you must use [can-construct.extend extend].
	 */constructorExtends:true,// This is a hook for adding legacy behaviors
_created:function(){},/**
	 * @function can-construct.newInstance newInstance
	 * @parent can-construct.static
	 *
	 * @description Returns an instance of `Construct`. This method
	 * can be overridden to return a cached instance.
	 *
	 * @signature `Construct.newInstance([...args])`
	 *
	 * @param {*} [args] arguments that get passed to [can-construct::setup] and [can-construct::init]. Note
	 * that if [can-construct::setup] returns an array, those arguments will be passed to [can-construct::init]
	 * instead.
	 * @return {class} instance of the class
	 *
	 * @body
	 * Creates a new instance of the constructor function. This method is useful for creating new instances
	 * with arbitrary parameters. Typically, however, you will simply want to call the constructor with the
	 * __new__ operator.
	 *
	 * ## Example
	 *
	 * The following creates a `Person` Construct and overrides `newInstance` to cache all
	 * instances of Person to prevent duplication. If the properties of a new Person match an existing one it
	 * will return a reference to the previously created object, otherwise it returns a new object entirely.
	 *
	 * ```js
	 * // define and create the Person constructor
	 * var Person = Construct.extend({
	 *   init : function(first, middle, last) {
	 *     this.first = first;
	 *     this.middle = middle;
	 *     this.last = last;
	 *   }
	 * });
	 *
	 * // store a reference to the original newInstance function
	 * var _newInstance = Person.newInstance;
	 *
	 * // override Person's newInstance function
	 * Person.newInstance = function() {
	 *   // if cache does not exist make it an new object
	 *   this.__cache = this.__cache || {};
	 *   // id is a stingified version of the passed arguments
	 *   var id = JSON.stringify(arguments);
	 *
	 *   // look in the cache to see if the object already exists
	 *   var cachedInst = this.__cache[id];
	 *   if(cachedInst) {
	 *     return cachedInst;
	 *   }
	 *
	 *   //otherwise call the original newInstance function and return a new instance of Person.
	 *   var newInst = _newInstance.apply(this, arguments);
	 *   this.__cache[id] = newInst;
	 *   return newInst;
	 * };
	 *
	 * // create two instances with the same arguments
	 * var justin = new Person('Justin', 'Barry', 'Meyer'),
	 *		brian = new Person('Justin', 'Barry', 'Meyer');
	 *
	 * console.log(justin === brian); // true - both are references to the same instance
	 * ```
	 *
	 */newInstance:function(){// Get a raw instance object (`init` is not called).
var inst=this.instance(),args;// Call `setup` if there is a `setup`
if(inst.setup){Object.defineProperty(inst,"__inSetup",{configurable:true,enumerable:false,value:true,writable:true});Object.defineProperty(inst,inSetupSymbol,{configurable:true,enumerable:false,value:true,writable:true});args=inst.setup.apply(inst,arguments);if(args instanceof Construct.ReturnValue){return args.value;}inst.__inSetup=false;inst[inSetupSymbol]=false;}// Call `init` if there is an `init`
// If `setup` returned `args`, use those as the arguments
if(inst.init){inst.init.apply(inst,args||arguments);}return inst;},// Overwrites an object with methods. Used in the `super` plugin.
// `newProps` - New properties to add.
// `oldProps` - Where the old properties might be (used with `super`).
// `addTo` - What we are adding to.
_inherit:canGetDescriptor?inheritGetterSetter:simpleInherit,// Adds a `defineProperty` with the given name and descriptor
// Will only ever be called if ES5 is supported
_defineProperty:function(what,oldProps,propName,descriptor){Object.defineProperty(what,propName,descriptor);},// used for overwriting a single property.
// this should be used for patching other objects
// the super plugin overwrites this
_overwrite:function(what,oldProps,propName,val){Object.defineProperty(what,propName,{value:val,configurable:true,enumerable:true,writable:true});},// Set `defaults` as the merger of the parent `defaults` and this
// object's `defaults`. If you overwrite this method, make sure to
// include option merging logic.
/**
	 * @function can-construct.setup setup
	 * @parent can-construct.static
	 *
	 * @description Perform initialization logic for a constructor function.
	 *
	 * @signature `Construct.setup(base, fullName, staticProps, protoProps)`
	 *
	 * A static `setup` method provides inheritable setup functionality
	 * for a Constructor function. The following example
	 * creates a Group constructor function.  Any constructor
	 * functions that inherit from Group will be added to
	 * `Group.childGroups`.
	 *
	 * ```js
	 * Group = Construct.extend({
	 *   setup: function(Construct, fullName, staticProps, protoProps){
	 *     this.childGroups = [];
	 *     if(Construct !== Construct){
	 *       this.childGroups.push(Construct)
	 *     }
	 *     Construct.setup.apply(this, arguments)
	 *   }
	 * },{})
	 * var Flock = Group.extend(...)
	 * Group.childGroups[0] //-> Flock
	 * ```
	 * @param {constructor} base The base constructor that is being inherited from.
	 * @param {String} fullName The name of the new constructor.
	 * @param {Object} staticProps The static properties of the new constructor.
	 * @param {Object} protoProps The prototype properties of the new constructor.
	 *
	 * @body
	 * The static `setup` method is called immediately after a constructor
	 * function is created and
	 * set to inherit from its base constructor. It is useful for setting up
	 * additional inheritance work.
	 * Do not confuse this with the prototype `[can-construct::setup]` method.
	 *
	 * ## Example
	 *
	 * This `Parent` class adds a reference to its base class to itself, and
	 * so do all the classes that inherit from it.
	 *
	 * ```js
	 * Parent = Construct.extend({
	 *   setup : function(base, fullName, staticProps, protoProps){
	 *     this.base = base;
	 *
	 *     // call base functionality
	 *     Construct.setup.apply(this, arguments)
	 *   }
	 * },{});
	 *
	 * Parent.base; // Construct
	 *
	 * Child = Parent({});
	 *
	 * Child.base; // Parent
	 * ```
	 */setup:function(base){var defaults=base.defaults?canReflect_1_19_2_canReflect.serialize(base.defaults):{};this.defaults=canReflect_1_19_2_canReflect.assignDeepMap(defaults,this.defaults);},// Create's a new `class` instance without initializing by setting the
// `initializing` flag.
instance:function(){// Prevents running `init`.
initializing=1;var inst=new this();// Allow running `init`.
initializing=0;return inst;},// Extends classes.
/**
	 * @function can-construct.extend extend
	 * @parent can-construct.static
	 *
	 * @signature `Construct.extend([name,] [staticProperties,] instanceProperties)`
	 *
	 * Extends `Construct`, or constructor functions derived from `Construct`,
	 * to create a new constructor function. Example:
	 *
	 * ```js
	 * var Animal = Construct.extend({
	 *   sayHi: function(){
	 *     console.log("hi")
	 *   }
	 * });
	 *
	 * var animal = new Animal()
	 * animal.sayHi();
	 * ```
	 *
	 * @param {String} [name] Adds a name to the constructor function so
	 * it is nicely labeled in the developer tools. The following:
	 *
	 *     Construct.extend("ConstructorName",{})
	 *
	 * returns a constructur function that will show up as `ConstructorName`
	 * in the developer tools.
	 * It also sets "ConstructorName" as [can-construct.shortName shortName].
	 *
	 * @param {Object} [staticProperties] Properties that are added the constructor
	 * function directly. For example:
	 *
	 * ```js
	 * var Animal = Construct.extend({
	 *   findAll: function(){
	 *     return can.ajax({url: "/animals"})
	 *   }
	 * },{}); // need to pass an empty instanceProperties object
	 *
	 * Animal.findAll().then(function(json){ ... })
	 * ```
	 *
	 * The [can-construct.setup static setup] method can be used to
	 * specify inheritable behavior when a Constructor function is created.
	 *
	 * @param {Object} instanceProperties Properties that belong to
	 * instances made with the constructor. These properties are added to the
	 * constructor's `prototype` object. Example:
	 *
	 *     var Animal = Construct.extend({
	 *		  findAll: function() {
	 *			return can.ajax({url: "/animals"});
	 *		  }
	 *     },{
	 *       init: function(name) {
	 *         this.name = name;
	 *       },
	 *       sayHi: function() {
	 *         console.log(this.name," says hai!");
	 *       }
	 *     })
	 *     var pony = new Animal("Gertrude");
	 *     pony.sayHi(); // "Gertrude says hai!"
	 *
	 * The [can-construct::init init] and [can-construct::setup setup] properties
	 * are used for initialization.
	 *
	 * @return {function} The constructor function.
	 *
	 * ```js
	 *	var Animal = Construct.extend(...);
	 *	var pony = new Animal(); // Animal is a constructor function
	 * ```
	 * @body
	 * ## Inheritance
	 * Creating "subclasses" with `Construct` is simple. All you need to do is call the base constructor
	 * with the new function's static and instance properties. For example, we want our `Snake` to
	 * be an `Animal`, but there are some differences:
	 *
	 *
	 *     var Snake = Animal.extend({
	 *         legs: 0
	 *     }, {
	 *         init: function() {
	 *             Animal.prototype.init.call(this, 'ssssss');
	 *         },
	 *         slither: function() {
	 *             console.log('slithering...');
	 *         }
	 *     });
	 *
	 *     var baslisk = new Snake();
	 *     baslisk.speak();   // "ssssss"
	 *     baslisk.slither(); // "slithering..."
	 *     baslisk instanceof Snake;  // true
	 *     baslisk instanceof Animal; // true
	 *
	 *
	 * ## Static properties and inheritance
	 *
	 * If you pass all three arguments to Construct, the second one will be attached directy to the
	 * constructor, allowing you to imitate static properties and functions. You can access these
	 * properties through the `[can-construct::constructor this.constructor]` property.
	 *
	 * Static properties can get overridden through inheritance just like instance properties. In the example below,
	 * we override both the legs static property as well as the the init function for each instance:
	 *
	 * ```js
	 * var Animal = Construct.extend({
	 *     legs: 4
	 * }, {
	 *     init: function(sound) {
	 *         this.sound = sound;
	 *     },
	 *     speak: function() {
	 *         console.log(this.sound);
	 *     }
	 * });
	 *
	 * var Snake = Animal.extend({
	 *     legs: 0
	 * }, {
	 *     init: function() {
	 *         this.sound = 'ssssss';
	 *     },
	 *     slither: function() {
	 *         console.log('slithering...');
	 *     }
	 * });
	 *
	 * Animal.legs; // 4
	 * Snake.legs; // 0
	 * var dog = new Animal('woof');
	 * var blackMamba = new Snake();
	 * dog.speak(); // 'woof'
	 * blackMamba.speak(); // 'ssssss'
	 * ```
	 *
	 * ## Alternative value for a new instance
	 *
	 * Sometimes you may want to return some custom value instead of a new object when creating an instance of your class.
	 * For example, you want your class to act as a singleton, or check whether an item with the given id was already
	 * created and return an existing one from your cache store (e.g. using [can-connect/constructor/store/store]).
	 *
	 * To achieve this you can return [can-construct.ReturnValue] from `setup` method of your class.
	 *
	 * Lets say you have `myStore` to cache all newly created instances. And if an item already exists you want to merge
	 * the new data into the existing instance and return the updated instance.
	 *
	 * ```
	 * var myStore = {};
	 *
	 * var Item = Construct.extend({
	 *     setup: function(params){
	 *         if (myStore[params.id]){
	 *             var item = myStore[params.id];
	 *
	 *             // Merge new data to the existing instance:
	 *             Object.assign(item, params);
	 *
	 *             // Return the updated item:
	 *             return new Construct.ReturnValue( item );
	 *         } else {
	 *             // Save to cache store:
	 *             myStore[this.id] = this;
	 *
	 *             return [params];
	 *         }
	 *     },
	 *     init: function(params){
	 *         Object.assign(this, params);
	 *     }
	 * });
	 *
	 * var item_1  = new Item( {id: 1, name: "One"} );
	 * var item_1a = new Item( {id: 1, name: "OnePlus"} )
	 * ```
	 */extend:function(name,staticProperties,instanceProperties){var shortName=name,klass=staticProperties,proto=instanceProperties;// Figure out what was passed and normalize it.
if(typeof shortName!=='string'){proto=klass;klass=shortName;name=shortName=null;}if(!proto){proto=klass;klass=null;}proto=proto||{};var _super_class=this,_super=this.prototype,Constructor,prototype;// Instantiate a base class (but only create the instance,
// don't run the init constructor).
prototype=this.instance();// Copy the properties over onto the new prototype.
Construct._inherit(proto,_super,prototype);if(shortName);else if(klass&&klass.shortName){shortName=klass.shortName;}else if(this.shortName){shortName=this.shortName;}// We want constructor.name to be the same as shortName, within
// the bounds of what the JS VM will allow (meaning no non-word characters).
// new Function() is significantly faster than eval() here.
// Strip semicolons
//!steal-remove-start
// wrapping this var will cause "used out of scope." when linting
var constructorName=shortName?shortName.replace(constructorNameRegex,'_'):'Constructor';if(process.env.NODE_ENV!=='production'){if(reservedWords[constructorName]){constructorName=CanString.capitalize(constructorName);}}//!steal-remove-end
// The dummy class constructor.
function init(){/* jshint validthis: true */// All construction is actually done in the init method.
if(!initializing){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(!this||this.constructor!==Constructor&&// We are being called without `new` or we are extending.
arguments.length&&Constructor.constructorExtends){dev.warn('can/construct/construct.js: extending a Construct without calling extend');}}//!steal-remove-end
return (!this||this.constructor!==Constructor)&&// We are being called without `new` or we are extending.
arguments.length&&Constructor.constructorExtends?Constructor.extend.apply(Constructor,arguments):// We are being called with `new`.
Constructor.newInstance.apply(Constructor,arguments);}}Constructor=typeof namedCtor==="function"?namedCtor(constructorName,init):function(){return init.apply(this,arguments);};// Copy old stuff onto class (can probably be merged w/ inherit)
for(var propName in _super_class){if(_super_class.hasOwnProperty(propName)){Constructor[propName]=_super_class[propName];}}// Copy new static properties on class.
Construct._inherit(klass,_super_class,Constructor);// Set things that shouldn't be overwritten.
canReflect_1_19_2_canReflect.assignMap(Constructor,{constructor:Constructor,prototype:prototype/**
			 * @property {String} can-construct.shortName shortName
			 * @parent can-construct.static
			 *
			 * If you pass a name when creating a Construct, the `shortName` property will be set to the
			 * name.
			 *
			 * ```js
			 * var MyConstructor = Construct.extend("MyConstructor",{},{});
			 * MyConstructor.shortName // "MyConstructor"
			 * ```
			 */});if(shortName!==undefined){if(Object.getOwnPropertyDescriptor){var desc=Object.getOwnPropertyDescriptor(Constructor,'name');if(!desc||desc.configurable){Object.defineProperty(Constructor,'name',{writable:true,value:shortName,configurable:true});}}Constructor.shortName=shortName;}// Make sure our prototype looks nice.
defineNonEnumerable(Constructor.prototype,"constructor",Constructor);// Global callback for legacy behaviors
Construct._created(name,Constructor);// Call the class `setup` and `init`
var t=[_super_class].concat(Array.prototype.slice.call(arguments)),args=Constructor.setup.apply(Constructor,t);if(Constructor.init){Constructor.init.apply(Constructor,args||t);}/**
		 * @prototype
		 */return Constructor;//
/**
		 * @property {Object} can-construct.prototype.constructor constructor
		 * @parent can-construct.prototype
		 *
		 * A reference to the constructor function that created the instance. This allows you to access
		 * the constructor's static properties from an instance.
		 *
		 * @body
		 * ## Example
		 *
		 * This Construct has a static counter that counts how many instances have been created:
		 *
		 * ```js
		 * var Counter = Construct.extend({
		 *     count: 0
		 * }, {
		 *     init: function() {
		 *         this.constructor.count++;
		 *     }
		 * });
		 *
		 * var childCounter = new Counter();
		 * console.log(childCounter.constructor.count); // 1
		 * console.log(Counter.count); // 1
		 * ```
		 */},/**
	 * @function can-construct.ReturnValue ReturnValue
	 * @parent can-construct.static
	 *
	 * Use to overwrite the return value of new Construct(...).
	 *
	 * @signature `new Construct.ReturnValue( value )`
	 *
	 *   This constructor function can be used for creating a return value of the `setup` method.
	 *   [can-construct] will check if the return value is an instance of `Construct.ReturnValue`.
	 *   If it is then its `value` will be used as the new instance.
	 *
	 *   @param {Object} value A value to be used for a new instance instead of a new object.
	 *
	 *   ```js
	 *   var Student = function( name, school ){
	 *       this.name = name;
	 *       this.school = school;
	 *   }
	 *
	 *   var Person = Construct.extend({
	 *       setup: function( options ){
	 *           if (options.school){
	 *               return new Constructor.ReturnValue( new Student( options.name, options.school ) );
	 *           } else {
	 *               return [options];
	 *           }
	 *       }
	 *   });
	 *
	 *   var myPerson = new Person( {name: "Ilya", school: "PetrSU"} );
	 *
	 *   myPerson instanceof Student // => true
	 *   ```
   */ReturnValue:function(value){this.value=value;}});/**
 * @function can-construct.prototype.setup setup
 * @parent can-construct.prototype
 *
 * @signature `construct.setup(...args)`
 *
 * A setup function for the instantiation of a constructor function.
 *
 * @param {*} args The arguments passed to the constructor.
 *
 * @return {Array|undefined|can-construct.ReturnValue} If an array is returned, the array's items are passed as
 * arguments to [can-construct::init init]. If a [can-construct.ReturnValue] instance is returned, the ReturnValue
 * instance's value will be returned as the result of calling new Construct(). The following example always makes
 * sure that init is called with a jQuery wrapped element:
 *
 * ```js
 * 	WidgetFactory = Construct.extend({
 * 			setup: function(element){
 * 					return [$(element)]
 * 			}
 * 	});
 *
 * 	MyWidget = WidgetFactory.extend({
 * 			init: function($el){
 * 					$el.html("My Widget!!")
 * 			}
 * 	});
 *  ```
 *
 * Otherwise, the arguments to the
 * constructor are passed to [can-construct::init] and the return value of `setup` is discarded.
 *
 * @body
 *
 * ## Deciding between `setup` and `init`
 *
 *
 * Usually, you should use [can-construct::init init] to do your constructor function's initialization.
 * You should, instead, use `setup` when:
 *
 *   - there is initialization code that you want to run before the inheriting constructor's
 *     `init` method is called.
 *   - there is initialization code that should run whether or not inheriting constructors
 *     call their base's `init` methods.
 *   - you want to modify the arguments that will get passed to `init`.
 *
 */defineNonEnumerable(Construct.prototype,"setup",function(){});/**
 * @function can-construct.prototype.init init
 * @parent can-construct.prototype
 *
 * @description Called when a new instance of a Construct is created.
 *
 * @signature `construct.init(...args)`
 * @param {*} args the arguments passed to the constructor (or the items of the array returned from [can-construct::setup])
 *
 * @body
 * If a prototype `init` method is provided, `init` is called when a new Construct is created---
 * after [can-construct::setup]. The `init` method is where the bulk of your initialization code
 * should go. A common thing to do in `init` is save the arguments passed into the constructor.
 *
 * ## Examples
 *
 * First, we'll make a Person constructor that has a first and last name:
 *
 * ```js
 * var Person = Construct.extend({
 *     init: function(first, last) {
 *         this.first = first;
 *         this.last  = last;
 *     }
 * });
 *
 * var justin = new Person("Justin", "Meyer");
 * justin.first; // "Justin"
 * justin.last; // "Meyer"
 * ```
 *
 * Then, we'll extend Person into Programmer, and add a favorite language:
 *
 * ```js
 * var Programmer = Person.extend({
 *     init: function(first, last, language) {
 *         // call base's init
 *         Person.prototype.init.apply(this, arguments);
 *
 *         // other initialization code
 *         this.language = language;
 *     },
 *     bio: function() {
 *         return "Hi! I'm " + this.first + " " + this.last +
 *             " and I write " + this.language + ".";
 *     }
 * });
 *
 * var brian = new Programmer("Brian", "Moschel", 'ECMAScript');
 * brian.bio(); // "Hi! I'm Brian Moschel and I write ECMAScript.";
 * ```
 *
 * ## Modified Arguments
 *
 * [can-construct::setup] is able to modify the arguments passed to `init`.
 * If you aren't receiving the arguments you passed to `new Construct(args)`,
 * check that they aren't being changed by `setup` along
 * the inheritance chain.
 */defineNonEnumerable(Construct.prototype,"init",function(){});var canConstruct_3_5_7_canConstruct=canNamespace_1_0_0_canNamespace.Construct=Construct;function dispatch(key){// jshint -W040
var handlers=this.eventHandlers[key];if(handlers){var handlersCopy=handlers.slice();var value=this.getKeyValue(key);for(var i=0;i<handlersCopy.length;i++){handlersCopy[i](value);}}}function Globals(){this.eventHandlers={};this.properties={};}/**
 * @function define 
 * @parent can-globals/methods
 * 
 * Create a new global environment variable.
 * 
 * @signature `globals.define(key, value[, cache])`
 * 
 * Defines a new global called `key`, who's value defaults to `value`.
 * 
 * The following example defines the `global` key's default value to the [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window) object:
 * ```javascript
 * globals.define('global', window);
 * globals.getKeyValue('window') //-> window
 * ```
 * 
 * If a function is provided and `cache` is falsy, that function is run every time the key value is read:
 * ```javascript
 * globals.define('isBrowserWindow', function() {
 *   console.log('EVALUATING')
 *   return typeof window !== 'undefined' &&
 *     typeof document !== 'undefined' && typeof SimpleDOM === 'undefined'
 * }, false);
 * globals.get('isBrowserWindow') // logs 'EVALUATING'
 *                                // -> true
 * globals.get('isBrowserWindow') // logs 'EVALUATING' again
 *                                // -> true
 * ```
 * 
 * If a function is provided and `cache` is truthy, that function is run only the first time the value is read:
 * ```javascript
 * globals.define('isWebkit', function() {
 *   console.log('EVALUATING')
 *   var div = document.createElement('div')
 *   return 'WebkitTransition' in div.style
 * })
 * globals.getKeyValue('isWebkit') // logs 'EVALUATING'
 * 								   // -> true
 * globals.getKeyValue('isWebkit') // Does NOT log again!
 * 								   // -> true
 * ```
 * 
 * @param {String} key
 * The key value to create.
 * 
 * @param {*} value
 * The default value. If this is a function, its return value will be used.
 * 
 * @param {Boolean} [cache=true]
 * Enable cache. If false the `value` function is run every time the key value is read.
 * 
 * @return {can-globals}
 * Returns the instance of `can-globals` for chaining.
 */Globals.prototype.define=function(key,value,enableCache){if(enableCache===undefined){enableCache=true;}if(!this.properties[key]){this.properties[key]={default:value,value:value,enableCache:enableCache};}return this;};/**
 * @function getKeyValue 
 * @parent can-globals/methods
 * 
 * Get a global environment variable by name.
 * 
 * @signature `globals.getKeyValue(key)`
 * 
 * Returns the current value at `key`. If no value has been set, it will return the default value (if it is not a function). If the default value is a function, it will return the output of the function. This execution is cached if the cache flag was set on initialization.
 * 
 * ```javascript
 * globals.define('foo', 'bar');
 * globals.getKeyValue('foo'); //-> 'bar'
 * ```
 * 
 * @param {String} key
 * The key value to access.
 * 
 * @return {*}
 * Returns the value of a given key.
 */Globals.prototype.getKeyValue=function(key){var property=this.properties[key];if(property){if(typeof property.value==='function'){if(property.cachedValue){return property.cachedValue;}if(property.enableCache){property.cachedValue=property.value();return property.cachedValue;}else {return property.value();}}return property.value;}};Globals.prototype.makeExport=function(key){return function(value){if(arguments.length===0){return this.getKeyValue(key);}if(typeof value==='undefined'||value===null){this.deleteKeyValue(key);}else {if(typeof value==='function'){this.setKeyValue(key,function(){return value;});}else {this.setKeyValue(key,value);}return value;}}.bind(this);};/**
 * @function offKeyValue 
 * @parent can-globals/methods
 * 
 * Remove handler from event queue.
 * 
 * @signature `globals.offKeyValue(key, handler)`
 * 
 * Removes `handler` from future change events for `key`.
 * 
 * 
 * ```javascript
 * var handler = (value) => {
 *   value === 'baz' //-> true
 * };
 * globals.define('foo', 'bar');
 * globals.onKeyValue('foo', handler);
 * globals.setKeyValue('foo', 'baz');
 * globals.offKeyValue('foo', handler);
 * ```
 * 
 * @param {String} key
 * The key value to observe.
 * 
 * @param {Function} handler([value])
 * The observer callback.
 * 
 * @return {can-globals}
 * Returns the instance of `can-globals` for chaining.
 */Globals.prototype.offKeyValue=function(key,handler){if(this.properties[key]){var handlers=this.eventHandlers[key];if(handlers){var i=handlers.indexOf(handler);handlers.splice(i,1);}}return this;};/**
 * @function onKeyValue 
 * @parent can-globals/methods
 * 
 * Add handler to event queue.
 * 
 * @signature `globals.onKeyValue(key, handler)`
 * 
 * Calls `handler` each time the value of `key` is set or reset.
 * 
 * ```javascript
 * globals.define('foo', 'bar');
 * globals.onKeyValue('foo', (value) => {
 *   value === 'baz' //-> true
 * });
 * globals.setKeyValue('foo', 'baz');
 * ```
 * 
 * @param {String} key
 * The key value to observe.
 * 
 * @param {function(*)} handler([value])
 * The observer callback.
 * 
 * @return {can-globals}
 * Returns the instance of `can-globals` for chaining.
 */Globals.prototype.onKeyValue=function(key,handler){if(this.properties[key]){if(!this.eventHandlers[key]){this.eventHandlers[key]=[];}this.eventHandlers[key].push(handler);}return this;};/**
 * @function deleteKeyValue 
 * @parent can-globals/methods
 * 
 * Reset global environment variable.
 * 
 * @signature `globals.deleteKeyValue(key)`
 * 
 * Deletes the current value at `key`. Future `get`s will use the default value.
 * 
 * ```javascript
 * globals.define('global', window);
 * globals.setKeyValue('global', {});
 * globals.deleteKeyValue('global');
 * globals.getKeyValue('global') === window; //-> true
 * ```
 * 
 * @param {String} key
 * The key value to access.
 * 
 * @return {can-globals}
 * Returns the instance of `can-globals` for chaining.
 */Globals.prototype.deleteKeyValue=function(key){var property=this.properties[key];if(property!==undefined){property.value=property.default;property.cachedValue=undefined;dispatch.call(this,key);}return this;};/**
 * @function setKeyValue 
 * @parent can-globals/methods
 * 
 * Overwrite an existing global environment variable.
 * 
 * @signature `globals.setKeyValue(key, value)`
 * 
 * ```javascript
 * globals.define('foo', 'bar');
 * globals.setKeyValue('foo', 'baz');
 * globals.getKeyValue('foo'); //-> 'baz'
 * ```
 * 
 * Sets the new value at `key`. Will override previously set values, but preserves the default (see `deleteKeyValue`).
 * 
 * Setting a key which was not previously defined will call `define` with the key and value.
 * 
 * @param {String} key
 * The key value to access.
 * 
 * @param {*} value
 * The new value.
 * 
 * @return {can-globals}
 * Returns the instance of `can-globals` for chaining.
 */Globals.prototype.setKeyValue=function(key,value){if(!this.properties[key]){return this.define(key,value);}var property=this.properties[key];property.value=value;property.cachedValue=undefined;dispatch.call(this,key);return this;};/**
 * @function reset 
 * @parent can-globals/methods
 * 
 * Reset all keys to their default value and clear their caches.
 * 
 * @signature `globals.setKeyValue(key, value)`
 * 
 * ```javascript
 * globals.define('foo', 'bar');
 * globals.setKeyValue('foo', 'baz');
 * globals.getKeyValue('foo'); //-> 'baz'
 * globals.reset();
 * globals.getKeyValue('foo'); //-> 'bar'
 * ```
 * 
 * @return {can-globals}
 * Returns the instance of `can-globals` for chaining.
 */Globals.prototype.reset=function(){for(var key in this.properties){if(this.properties.hasOwnProperty(key)){this.properties[key].value=this.properties[key].default;this.properties[key].cachedValue=undefined;dispatch.call(this,key);}}return this;};canReflect_1_19_2_canReflect.assignSymbols(Globals.prototype,{'can.getKeyValue':Globals.prototype.getKeyValue,'can.setKeyValue':Globals.prototype.setKeyValue,'can.deleteKeyValue':Globals.prototype.deleteKeyValue,'can.onKeyValue':Globals.prototype.onKeyValue,'can.offKeyValue':Globals.prototype.offKeyValue});var canGlobals_1_2_2_canGlobalsProto=Globals;var canGlobals_1_2_2_canGlobalsInstance=createCommonjsModule(function(module){var globals=new canGlobals_1_2_2_canGlobalsProto();if(canNamespace_1_0_0_canNamespace.globals){throw new Error("You can't have two versions of can-globals, check your dependencies");}else {module.exports=canNamespace_1_0_0_canNamespace.globals=globals;}});/* global self *//* global WorkerGlobalScope *//**
 * @module {function} can-globals/global/global global
 * @parent can-globals/modules
 * 
 * Get the global object for the current context.
 * 
 * @signature `GLOBAL([newGlobal])`
 *
 * Optionally sets, and returns the global that this environment provides. It will be one of:
 * 
 * ```js
 * var GLOBAL = require('can-globals/global/global');
 * var g = GLOBAL();
 * // In a browser
 * console.log(g === window); // -> true
 * ```
 *
 * - **Browser**: [`window`](https://developer.mozilla.org/en-US/docs/Web/API/window)
 * - **Web Worker**: [`self`](https://developer.mozilla.org/en-US/docs/Web/API/Window/self)
 * - **Node.js**: [`global`](https://nodejs.org/api/globals.html#globals_global)
 * 
 * @param {Object} [newGlobal] An optional global-like object to set as the context's global 
 *
 * @return {Object} The global object for this JavaScript environment.
 */canGlobals_1_2_2_canGlobalsInstance.define('global',function(){// Web Worker
return typeof WorkerGlobalScope!=='undefined'&&self instanceof WorkerGlobalScope?self:// Node.js
typeof process==='object'&&{}.toString.call(process)==='[object process]'?commonjsGlobal$1:// Browser window
window;});var global_1=canGlobals_1_2_2_canGlobalsInstance.makeExport('global');/**
 * @module {function} can-globals/document/document document
 * @parent can-globals/modules
 * 
 * Get the global [`document`](https://developer.mozilla.org/en-US/docs/Web/API/document) object for the current context.
 * 
 * @signature `DOCUMENT([newDocument])`
 * 
 * Optionally sets, and returns, the [`document`](https://developer.mozilla.org/en-US/docs/Web/API/document) object for the context.
 * 
 * ```js
 * var documentShim = { getElementById() {...} };
 * var DOCUMENT = require('can-globals/document/document');
 * DOCUMENT(documentShim); //-> document
 * DOCUMENT().getElementById('foo');
 * ```
 *
 * @param {Object} [newDocument] An optional document-like object to set as the context's document 
 * 
 * @return {Object} The window object for this JavaScript environment.
 */canGlobals_1_2_2_canGlobalsInstance.define('document',function(){return canGlobals_1_2_2_canGlobalsInstance.getKeyValue('global').document;});var document$1=canGlobals_1_2_2_canGlobalsInstance.makeExport('document');/**
 * @module {function} can-globals/is-node/is-node is-node
 * @parent can-globals/modules
 * @description Determines if your code is running in [Node.js](https://nodejs.org).
 * @signature `isNode()`
 *
 * ```js
 * var isNode = require("can-globals/is-node/is-node");
 * var GLOBAL = require("can-globals/global/global");
 *
 * if(isNode()) {
 *   console.log(GLOBAL() === global); // -> true
 * }
 * ```
 *
 * @return {Boolean} True if running in Node.js
 */canGlobals_1_2_2_canGlobalsInstance.define('isNode',function(){return typeof process==="object"&&{}.toString.call(process)==="[object process]";});var isNode$2=canGlobals_1_2_2_canGlobalsInstance.makeExport('isNode');// This module depends on isNode being defined
/**
 * @module {function} can-globals/is-browser-window/is-browser-window is-browser-window
 * @parent can-globals/modules
 * @signature `isBrowserWindow()`
 *
 * Returns `true` if the code is running within a Browser window. Use this function if you need special code paths for when running in a Browser window, a Web Worker, or another environment (such as Node.js).
 *
 * ```js
 * var isBrowserWindow = require("can-globals/is-browser-window/is-browser-window");
 * var GLOBAL = require("can-globals/global/global");
 *
 * if(isBrowserWindow()) {
 *   console.log(GLOBAL() === window); // -> true
 * }
 * ```
 *
 * @return {Boolean} True if the environment is a Browser window.
 */canGlobals_1_2_2_canGlobalsInstance.define('isBrowserWindow',function(){var isNode=canGlobals_1_2_2_canGlobalsInstance.getKeyValue('isNode');return typeof window!=="undefined"&&typeof document!=="undefined"&&isNode===false;});var isBrowserWindow=canGlobals_1_2_2_canGlobalsInstance.makeExport('isBrowserWindow');function getTargetDocument(target){return target.ownerDocument||document$1();}function createEvent(target,eventData,bubbles,cancelable){var doc=getTargetDocument(target);var event=doc.createEvent('HTMLEvents');var eventType;if(typeof eventData==='string'){eventType=eventData;}else {eventType=eventData.type;for(var prop in eventData){if(event[prop]===undefined){event[prop]=eventData[prop];}}}if(bubbles===undefined){bubbles=true;}event.initEvent(eventType,bubbles,cancelable);return event;}// We do not account for all EventTarget classes,
// only EventTarget DOM nodes, fragments, and the window.
function isDomEventTarget(obj){if(!(obj&&obj.nodeName)){return obj===window;}var nodeType=obj.nodeType;return nodeType===1||// Node.ELEMENT_NODE
nodeType===9||// Node.DOCUMENT_NODE
nodeType===11// Node.DOCUMENT_FRAGMENT_NODE
;}function addDomContext(context,args){if(isDomEventTarget(context)){args=Array.prototype.slice.call(args,0);args.unshift(context);}return args;}function removeDomContext(context,args){if(!isDomEventTarget(context)){args=Array.prototype.slice.call(args,0);context=args.shift();}return {context:context,args:args};}var fixSyntheticEventsOnDisabled=false;// In FireFox, dispatching a synthetic event on a disabled element throws an error.
// Other browsers, like IE 10 do not dispatch synthetic events on disabled elements at all.
// This determines if we have to work around that when dispatching events.
// https://bugzilla.mozilla.org/show_bug.cgi?id=329509
(function(){if(!isBrowserWindow()){return;}var testEventName='fix_synthetic_events_on_disabled_test';var input=document.createElement("input");input.disabled=true;var timer=setTimeout(function(){fixSyntheticEventsOnDisabled=true;},50);var onTest=function onTest(){clearTimeout(timer);input.removeEventListener(testEventName,onTest);};input.addEventListener(testEventName,onTest);try{var event=document.create('HTMLEvents');event.initEvent(testEventName,false);input.dispatchEvent(event);}catch(e){onTest();fixSyntheticEventsOnDisabled=true;}})();function isDispatchingOnDisabled(element,event){var eventType=event.type;var isInsertedOrRemoved=eventType==='inserted'||eventType==='removed';var isDisabled=!!element.disabled;return isInsertedOrRemoved&&isDisabled;}function forceEnabledForDispatch(element,event){return fixSyntheticEventsOnDisabled&&isDispatchingOnDisabled(element,event);}var util={createEvent:createEvent,addDomContext:addDomContext,removeDomContext:removeDomContext,isDomEventTarget:isDomEventTarget,getTargetDocument:getTargetDocument,forceEnabledForDispatch:forceEnabledForDispatch};function EventRegistry(){this._registry={};}/**
 * @module can-dom-events/helpers/make-event-registry
 * @parent can-dom-events.helpers
 * @description Create an event registry.
 * @signature `makeEventRegistry()`
 *   @return {can-dom-events/EventRegistry}
 * @hide
 * 
 * @body
 *
 * ```js
 * var makeEventRegistry = require('can-dom-events/helpers/make-event-registry');
 * var registry = makeEventRegistry();
 *
 * var radioChange = require('can-events-dom-radiochange');
 * var removeRadioChange = registry.add(radioChange);
 *
 * registry.has('radiochange'); // => true
 * registry.get('radiochange'); // => radioChange
 *
 * removeRadioChange();
 * ```
 */var makeEventRegistry=function makeEventRegistry(){return new EventRegistry();};/**
 * @function make-event-registry.has eventRegistry.has
 *
 * Check whether an event type has already been registered.
 *
 * @signature `eventRegistry.has( eventType )`
 * @parent can-dom-events/EventRegistry
 * @param {String} eventType The event type for which to check.
 * @return {Boolean} Whether the event type is registered.
*/EventRegistry.prototype.has=function(eventType){return !!this._registry[eventType];};/**
 * @function make-event-registry.get eventRegistry.get
 *
 * Retrieve an event type which has already been registered.
 *
 * @signature `eventRegistry.get( eventType )`
 * @parent can-dom-events/EventRegistry
 * @param {String} eventType The event type for which to retrieve.
 * @return {EventDefinition} The registered event definition, or undefined if unregistered.
*/EventRegistry.prototype.get=function(eventType){return this._registry[eventType];};/**
 * @function make-event-registry.add eventRegistry.add
 *
 * Add an event to the registry.
 *
 * @signature `eventRegistry.add( event [, eventType ] )`
 * @parent can-dom-events/EventRegistry
 * @param {EventDefinition} event The event definition to register.
 * @param {String} eventType The event type with which to register the event.
 * @return {function} The callback to remove the event from the registry.
*/EventRegistry.prototype.add=function(event,eventType){if(!event){throw new Error('An EventDefinition must be provided');}if(typeof event.addEventListener!=='function'){throw new TypeError('EventDefinition addEventListener must be a function');}if(typeof event.removeEventListener!=='function'){throw new TypeError('EventDefinition removeEventListener must be a function');}eventType=eventType||event.defaultEventType;if(typeof eventType!=='string'){throw new TypeError('Event type must be a string, not '+eventType);}if(this.has(eventType)){if(process.env.NODE_ENV!=='production'){dev.warn('Event "'+eventType+'" is already registered');return;}throw new Error('Event "'+eventType+'" is already registered');}this._registry[eventType]=event;var self=this;return function remove(){self._registry[eventType]=undefined;};};// Some events do not bubble, so delegating them requires registering the handler in the
// capturing phase.
// http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
var useCapture=function(eventType){return eventType==='focus'||eventType==='blur';};function makeDelegator(domEvents){var Delegator=function Delegator(parentKey){this.element=parentKey;// HTMLElement
this.events={};// {[eventType: string]: Array<(event) -> void>}
this.delegated={};// {[eventType: string]: (event) -> void}
};canReflect_1_19_2_canReflect.assignSymbols(Delegator.prototype,{"can.setKeyValue":function(eventType,handlersBySelector){var handler=this.delegated[eventType]=function(ev){var cur=ev.target;var propagate=true;var origStopPropagation=ev.stopPropagation;ev.stopPropagation=function(){origStopPropagation.apply(this,arguments);propagate=false;};var origStopImmediatePropagation=ev.stopImmediatePropagation;ev.stopImmediatePropagation=function(){origStopImmediatePropagation.apply(this,arguments);propagate=false;};do{// document does not implement `.matches` but documentElement does
var el=cur===document?document.documentElement:cur;var matches=el.matches||el.msMatchesSelector;canReflect_1_19_2_canReflect.each(handlersBySelector,function(handlers,selector){// Text and comment nodes may be included in mutation event targets
//  but will never match selectors (and do not implement matches)
if(matches&&matches.call(el,selector)){handlers.forEach(function(handler){handler.call(el,ev);});}});// since `el` points to `documentElement` when `cur` === document,
// we need to continue using `cur` as the loop pointer, otherwhise
// it will never end as documentElement.parentNode === document
cur=cur.parentNode;}while(cur&&cur!==ev.currentTarget&&propagate);};this.events[eventType]=handlersBySelector;domEvents.addEventListener(this.element,eventType,handler,useCapture(eventType));},"can.getKeyValue":function(eventType){return this.events[eventType];},"can.deleteKeyValue":function(eventType){domEvents.removeEventListener(this.element,eventType,this.delegated[eventType],useCapture(eventType));delete this.delegated[eventType];delete this.events[eventType];},"can.getOwnEnumerableKeys":function(){return Object.keys(this.events);}});return Delegator;}var MakeDelegateEventTree=function makeDelegateEventTree(domEvents){var Delegator=makeDelegator(domEvents);return new canKeyTree_1_2_2_canKeyTree([Map,Delegator,Object,Array]);};var domEvents={_eventRegistry:makeEventRegistry(),/**
	* @function can-dom-events.addEvent addEvent
	* @parent can-dom-events.static
	*
	* Add a custom event to the global event registry.
	*
	* @signature `addEvent( event [, eventType ] )`
	*
	* ```js
	* var removeReturnEvent = domEvents.addEvent(enterEvent, "return");
	* ```
	*
	* @param {can-dom-events/EventDefinition} event The custom event definition.
	* @param {String} eventType The event type to associated with the custom event.
	* @return {function} The callback to remove the custom event from the registry.
	*/addEvent:function(event,eventType){return this._eventRegistry.add(event,eventType);},/**
	* @function can-dom-events.addEventListener addEventListener
	*
	* Add an event listener for eventType to the target.
	*
	* @signature `addEventListener( target, eventType, ...eventArgs )`
	* @parent can-dom-events.static
	* @param {DomEventTarget} target The object to which to add the listener.
	* @param {String} eventType The event type with which to register.
	* @param {*} eventArgs The arguments which configure the associated event's behavior. This is usually a
	* function event handler.
	*/addEventListener:function(target,eventType){var hasCustomEvent=domEvents._eventRegistry.has(eventType);if(hasCustomEvent){var event=domEvents._eventRegistry.get(eventType);return event.addEventListener.apply(domEvents,arguments);}var eventArgs=Array.prototype.slice.call(arguments,1);return target.addEventListener.apply(target,eventArgs);},/**
	* @function can-dom-events.removeEventListener removeEventListener
	*
	* Remove an event listener for eventType from the target.
	*
	* @signature `removeEventListener( target, eventType, ...eventArgs )`
	* @parent can-dom-events.static
	* @param {DomEventTarget} target The object from which to remove the listener.
	* @param {String} eventType The event type with which to unregister.
	* @param {*} eventArgs The arguments which configure the associated event's behavior. This is usually a
	* function event handler.
	*/removeEventListener:function(target,eventType){var hasCustomEvent=domEvents._eventRegistry.has(eventType);if(hasCustomEvent){var event=domEvents._eventRegistry.get(eventType);return event.removeEventListener.apply(domEvents,arguments);}var eventArgs=Array.prototype.slice.call(arguments,1);return target.removeEventListener.apply(target,eventArgs);},/**
	* @function can-dom-events.addDelegateListener addDelegateListener
	*
	* Attach a handler for an event for all elements that match the selector,
	* now or in the future, based on a root element.
	*
	* @signature `addDelegateListener( target, eventType, selector, handler )`
	*
	* ```js
	* // Prevents all anchor elements from changing the page
	* domEvents.addDelegateListener(document.body,"click", "a", function(event){
	*   event.preventDefault();
	* })
	* ```
	* @parent can-dom-events.static
	* @param {DomEventTarget} root The html element to listen to events that match selector within.
	* @param {String} eventType The event name to listen to.
	* @param {String} selector A selector to filter the elements that trigger the event.
	* @param {function} handler A function to execute at the time the event is triggered.
	*/addDelegateListener:function(root,eventType,selector,handler){domEvents._eventTree.add([root,eventType,selector,handler]);},/**
	* @function can-dom-events.removeDelegateListener removeDelegateListener
	*
	* Remove a handler for an event for all elements that match the selector.
	*
	* @signature `removeDelegateListener( target, eventType, selector, handler )`
	*
	* ```js
	* // Prevents all anchor elements from changing the page
	* function handler(event) {
	*   event.preventDefault();
	* }
	* domEvents.addDelegateListener(document.body,"click", "a", handler);
	*
	* domEvents.removeDelegateListener(document.body,"click", "a", handler);
	* ```
	* @parent can-dom-events.static
	* @param {DomEventTarget} root The html element to listen to events that match selector within.
	* @param {String} eventType The event name to listen to.
	* @param {String} selector A selector to filter the elements that trigger the event.
	* @param {function} handler A function that was previously passed to `addDelegateListener`.
	*/removeDelegateListener:function(target,eventType,selector,handler){domEvents._eventTree.delete([target,eventType,selector,handler]);},/**
	* @function can-dom-events.dispatch dispatch
	*
	* Create and dispatch a configured event on the target.
	*
	* @signature `dispatch( target, eventData [, bubbles ][, cancelable ] )`
	* @parent can-dom-events.static
	* @param {DomEventTarget} target The object on which to dispatch the event.
	* @param {Object | String} eventData The data to be assigned to the event. If it is a string, that will be the event type.
	* @param {Boolean} bubbles Whether the event should bubble; defaults to true.
	* @param {Boolean} cancelable Whether the event can be cancelled; defaults to false.
	* @return {Boolean} notCancelled Whether the event dispatched without being cancelled.
	*/dispatch:function(target,eventData,bubbles,cancelable){var event=util.createEvent(target,eventData,bubbles,cancelable);var enableForDispatch=util.forceEnabledForDispatch(target,event);if(enableForDispatch){target.disabled=false;}var ret=target.dispatchEvent(event);if(enableForDispatch){target.disabled=true;}return ret;}};domEvents._eventTree=MakeDelegateEventTree(domEvents);var canDomEvents_1_3_13_canDomEvents=canNamespace_1_0_0_canNamespace.domEvents=domEvents;/**
 * @module {function} can-event-queue/map/map
 * @parent can-event-queue
 * @templateRender true
 *
 * @description Mixin methods and symbols to make this object or prototype object
 * behave like a key-value observable.
 *
 * @signature `mixinMapBindings( obj )`
 *
 * Adds symbols and methods that make `obj` or instances having `obj` on their prototype
 * behave like key-value observables.
 *
 * When `mixinMapBindings` is called on an `obj` like:
 *
 * ```js
 * var mixinMapBindings = require("can-event-queue/map/map");
 *
 * var observable = mixinValueBindings({});
 *
 * observable.on("prop",function(ev, newVal, oldVal){
 *   console.log(newVal);
 * });
 *
 * observable[canSymbol.for("can.dispatch")]("prop",[2,1]);
 * // Logs: 2
 * ```
 *
 * `mixinMapBindings` adds the following properties and symbols to the object:
 *
 * {{#each (getChildren [can-event-queue/map/map])}}
 * - [{{name}}] - {{description}}{{/each}}
 *
 * Furthermore, `mixinMapBindings` looks for the following symbols on the object's `.constructor`
 * property:
 *
 * - `@can.dispatchInstanceBoundChange` - Called when the bind status of an instance changes.
 * - `@can.dispatchInstanceOnPatches` - Called if [can-event-queue/map/map.dispatch] is called with `event.patches` as an array of
 *   patches.
 */var isDomEventTarget$1=util.isDomEventTarget;var metaSymbol=canSymbol_1_7_0_canSymbol.for("can.meta"),dispatchBoundChangeSymbol=canSymbol_1_7_0_canSymbol.for("can.dispatchInstanceBoundChange"),dispatchInstanceOnPatchesSymbol=canSymbol_1_7_0_canSymbol.for("can.dispatchInstanceOnPatches"),onKeyValueSymbol$1=canSymbol_1_7_0_canSymbol.for("can.onKeyValue"),offKeyValueSymbol=canSymbol_1_7_0_canSymbol.for("can.offKeyValue"),onEventSymbol=canSymbol_1_7_0_canSymbol.for("can.onEvent"),offEventSymbol=canSymbol_1_7_0_canSymbol.for("can.offEvent"),onValueSymbol$1=canSymbol_1_7_0_canSymbol.for("can.onValue"),offValueSymbol=canSymbol_1_7_0_canSymbol.for("can.offValue"),inSetupSymbol$1=canSymbol_1_7_0_canSymbol.for("can.initializing");var legacyMapBindings;function addHandlers(obj,meta){if(!meta.handlers){// Handlers are organized by:
// event name - the type of event bound to
// binding type - "event" for things that expect an event object (legacy), "onKeyValue" for reflective bindings.
// queue name - mutate, queue, etc
// handlers - the handlers.
meta.handlers=new canKeyTree_1_2_2_canKeyTree([Object,Object,Object,Array],{onFirst:function(){if(obj._eventSetup!==undefined){obj._eventSetup();}var constructor=obj.constructor;if(constructor[dispatchBoundChangeSymbol]!==undefined&&obj instanceof constructor){constructor[dispatchBoundChangeSymbol](obj,true);}//queues.enqueueByQueue(getLifecycleHandlers(obj).getNode([]), obj, [true]);
},onEmpty:function(){if(obj._eventTeardown!==undefined){obj._eventTeardown();}var constructor=obj.constructor;if(constructor[dispatchBoundChangeSymbol]!==undefined&&obj instanceof constructor){constructor[dispatchBoundChangeSymbol](obj,false);}//queues.enqueueByQueue(getLifecycleHandlers(obj).getNode([]), obj, [false]);
}});}if(!meta.listenHandlers){// context, eventName (might be undefined), queue, handlers
meta.listenHandlers=new canKeyTree_1_2_2_canKeyTree([Map,Map,Object,Array]);}}// getHandlers returns a KeyTree used for event handling.
// `handlers` will be on the `can.meta` symbol on the object.
// Ensure the "obj" passed as an argument has an object on @@can.meta
var ensureMeta=function ensureMeta(obj){var meta=obj[metaSymbol];if(!meta){meta={};canReflect_1_19_2_canReflect.setKeyValue(obj,metaSymbol,meta);}addHandlers(obj,meta);return meta;};function stopListeningArgumentsToKeys(bindTarget,event,handler,queueName){if(arguments.length&&canReflect_1_19_2_canReflect.isPrimitive(bindTarget)){queueName=handler;handler=event;event=bindTarget;bindTarget=this.context;}if(typeof event==="function"){queueName=handler;handler=event;event=undefined;}if(typeof handler==="string"){queueName=handler;handler=undefined;}var keys=[];if(bindTarget){keys.push(bindTarget);if(event||handler||queueName){keys.push(event);if(queueName||handler){keys.push(queueName||this.defaultQueue);if(handler){keys.push(handler);}}}}return keys;}// These are the properties we are going to add to objects
var props={/**
	 * @function can-event-queue/map/map.dispatch dispatch
	 * @parent can-event-queue/map/map
	 *
	 * @description Dispatch event and key binding handlers.
	 *
	 * @signature `obj.dispatch(event, [args])`
	 *
	 * Dispatches registered [can-event-queue/map/map.addEventListener] and
	 * [can-event-queue/map/map.can.onKeyValue] value binding handlers.
	 *
	 * The following shows dispatching the `property` event and
	 * `keyValue` handlers:
	 *
	 *
	 * ```js
	 * var mixinMapBindings = require("can-event-queue/map/map");
	 *
	 * var obj = mixinMapBindings({});
	 *
	 * obj.addEventListener("property", function(event, newVal){
	 *   event.type //-> "property"
	 *   newVal     //-> 5
	 * });
	 *
	 * canReflect.onKeyValue("property", function(newVal){
	 *   newVal     //-> 5
	 * })
	 *
	 * obj.dispatch("property", [5]);
	 * ```
	 *
	 * > NOTE: Event handlers have an additional `event` argument.
	 *
	 * @param {String|Object} event The event to dispatch. If a string is passed,
	 *   it will be used as the `type` of the event that will be dispatched and dispatch matching
	 *   [can-event-queue/map/map.can.onKeyValue] bindings:
	 *
	 *   ```js
	 *   obs.dispatch("key")
	 *   ```
	 *
	 *   If `event` is an object, it __MUST__ have a `type` property. The If a string is passed,
	 *   it will be used as the `type` of the event that will be dispatched and dispatch matching
	 *   [can-event-queue/map/map.can.onKeyValue] bindings:
	 *
	 *   ```js
	 *   obs.dispatch({type: "key"})
	 *   ```
	 *
	 *   The `event` object can also have the following properties and values:
	 *   - __reasonLog__ `{Array}` - The reason this event happened. This will be passed to
	 *     [can-queues.enqueueByQueue] for debugging purposes.
	 *   - __makeMeta__ `{function}` - Details about the handler being called. This will be passed to
	 *     [can-queues.enqueueByQueue] for debugging purposes.
	 *   - __patches__ `{Array<Patch>}` - The patch objects this event represents.  The `.patches` value will be
	 *     passed to the object's `.constructor`'s `@can.dispatchInstanceOnPatches` method.
	 *
	 * @param {Array} [args] Additional arguments to pass to event handlers.
	 * @return {Object} event The resulting event object.
	 */dispatch:function(event,args){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(arguments.length>4){dev.warn('Arguments to dispatch should be an array, not multiple arguments.');args=Array.prototype.slice.call(arguments,1);}if(args&&!Array.isArray(args)){dev.warn('Arguments to dispatch should be an array.');args=[args];}}//!steal-remove-end
// Don't send events if initalizing.
if(this.__inSetup!==true&&this[inSetupSymbol$1]!==true){if(typeof event==='string'){event={type:event};}var meta=ensureMeta(this);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(!event.reasonLog){event.reasonLog=[canReflect_1_19_2_canReflect.getName(this),"dispatched",'"'+event.type+'"',"with"].concat(args);}}if(typeof meta._log==="function"){meta._log.call(this,event,args);}//!steal-remove-end
var handlers=meta.handlers;var handlersByType=event.type!==undefined&&handlers.getNode([event.type]);var dispatchConstructorPatches=event.patches&&this.constructor[dispatchInstanceOnPatchesSymbol];var patchesNode=event.patches!==undefined&&handlers.getNode(["can.patches","onKeyValue"]);var keysNode=event.keyChanged!==undefined&&handlers.getNode(["can.keys","onKeyValue"]);var batch=dispatchConstructorPatches||handlersByType||patchesNode||keysNode;if(batch){canQueues_1_3_2_canQueues.batch.start();}if(handlersByType){if(handlersByType.onKeyValue){canQueues_1_3_2_canQueues.enqueueByQueue(handlersByType.onKeyValue,this,args,event.makeMeta,event.reasonLog);}if(handlersByType.event){event.batchNum=canQueues_1_3_2_canQueues.batch.number();var eventAndArgs=[event].concat(args);canQueues_1_3_2_canQueues.enqueueByQueue(handlersByType.event,this,eventAndArgs,event.makeMeta,event.reasonLog);}}if(keysNode){canQueues_1_3_2_canQueues.enqueueByQueue(keysNode,this,[event.keyChanged],event.makeMeta,event.reasonLog);}if(patchesNode){canQueues_1_3_2_canQueues.enqueueByQueue(patchesNode,this,[event.patches],event.makeMeta,event.reasonLog);}if(dispatchConstructorPatches){this.constructor[dispatchInstanceOnPatchesSymbol](this,event.patches);}if(batch){canQueues_1_3_2_canQueues.batch.stop();}}return event;},/**
	 * @function can-event-queue/map/map.addEventListener addEventListener
	 * @parent can-event-queue/map/map
	 *
	 * @description Register an event handler to be called when an event is dispatched.
	 *
	 * @signature `obj.addEventListener(eventName, handler(event, ...) [,queueName] )`
	 *
	 * Add a event listener to an object.  Handlers attached by `.addEventListener` get
	 * called back with the [can-event-queue/map/map.dispatch]
	 * `event` object and any arguments used to dispatch. [can-event-queue/map/map.can.onKeyValue] bindings do
	 * not get the event object.
	 *
	 * ```js
	 * var mixinMapBindings = require("can-event-queue/map/map");
	 *
	 * var obj = mixinMapBindings({});
	 *
	 * obj.addEventListener("foo", function(event){ ... });
	 * ```
	 *
	 * @param {String} eventName The name of the event to listen for.
	 * @param {Function} handler(event,arg...) The handler that will be executed to handle the event.  The handler will be called
	 *   with the dispatched `event` and `args`.
	 * @param {String} [queueName='mutate'] The name of the [can-queues] queue the handler will called
	 *   back within. Defaults to `"mutate"`.
	 * @return {Object} Returns the object `.addEventListener` was called on.
	 *
	 */addEventListener:function(key,handler,queueName){ensureMeta(this).handlers.add([key,"event",queueName||"mutate",handler]);return this;},/**
	 * @function can-event-queue/map/map.removeEventListener removeEventListener
	 * @parent can-event-queue/map/map
	 *
	 * @description Unregister an event handler to be called when an event is dispatched.
	 *
	 * @signature `obj.removeEventListener(eventName, [handler [,queueName]] )`
	 *
	 * Removes one or more handlers from being called when `eventName`
	 * is [can-event-queue/map/map.dispatch]ed.
	 *
	 * ```js
	 * // Removes `handler` if it is in the notify queue.
	 * obj.removeEventListener("closed", handler, "notify")
	 *
	 * // Removes `handler` if it is in the mutate queue.
	 * obj.removeEventListener("closed", handler)
	 *
	 * // Removes all "closed" handlers.
	 * obj.removeEventListener("closed")
	 * ```
	 *
	 * @param {String} eventName The name of the event to remove. If not specified, all events are removed.
	 * @param {Function} [handler] The handler that will be removed from the event. If not specified, all handlers for the event are removed.
	 * @param {String} [queueName='mutate'] The name of the [can-queues] queue the handler was registered on. Defaults to `"mutate"`.
	 * @return {Object} Returns the object `.removeEventListener` was called on.
	 */removeEventListener:function(key,handler,queueName){if(key===undefined){// This isn't super fast, but this pattern isn't used much.
// We could re-arrange the tree so it would be faster.
var handlers=ensureMeta(this).handlers;var keyHandlers=handlers.getNode([]);Object.keys(keyHandlers).forEach(function(key){handlers.delete([key,"event"]);});}else if(!handler&&!queueName){ensureMeta(this).handlers.delete([key,"event"]);}else if(!handler){ensureMeta(this).handlers.delete([key,"event",queueName||"mutate"]);}else {ensureMeta(this).handlers.delete([key,"event",queueName||"mutate",handler]);}return this;},/**
	 * @function can-event-queue/map/map.one one
	 * @parent can-event-queue/map/map
	 *
	 * @description Register an event handler that gets called only once.
	 *
	 * @signature `obj.one(event, handler(event, args...) )`
	 *
	 * Adds a basic event listener that listens to an event once and only once.
	 *
	 * ```js
	 * obj.one("prop", function(){
	 *   console.log("prop dispatched");
	 * })
	 *
	 * obj[canSymbol.for("prop")]("prop") //-> logs "prop dispatched"
	 * obj[canSymbol.for("prop")]("prop")
	 * ```
	 *
	 * @param {String} eventName The name of the event to listen to.
	 * @param {Function} handler(event, args...) The handler that will be run when the
	 *   event is dispached.
	 * @return {Object} this
	 */one:function(event,handler){// Unbind the listener after it has been executed
var one=function(){legacyMapBindings.off.call(this,event,one);return handler.apply(this,arguments);};// Bind the altered listener
legacyMapBindings.on.call(this,event,one);return this;},/**
	 * @function can-event-queue/map/map.listenTo listenTo
	 * @parent can-event-queue/map/map
	 *
	 * @description Listen to an event and register the binding for simplified unbinding.
	 *
	 * @signature `obj.listenTo([bindTarget,] event, handler)`
	 *
	 * `.listenTo` is useful for creating bindings that can can be torn down with
	 * [can-event-queue/map/map.stopListening].  This is useful when creating
	 * rich behaviors that can't be accomplished using computed values, or if you are trying to
	 * avoid streams.
	 *
	 * For example, the following creates an observable that counts how many times its
	 * `name` property has changed:
	 *
	 * ```js
	 * class Person {
	 *   constructor(){
	 *     this.nameChanged = 0;
	 *     this.listenTo("name", function(){
	 *       this.nameChanged++;
	 *     })
	 *   },
	 *   setName(newVal) {
	 *     this.name = newVal;
	 *     this.dispatch("name",[newVal])
	 *   }
	 * }
	 * mixinMapBindings(Person.prototype);
	 *
	 * var person = new Person();
	 * person.setName("Justin");
	 * person.setName("Ramiya");
	 * person.nameChanged //-> 2
	 * ```
	 *
	 * `.listenTo` event bindings are stored on an observable and MUST be unbound using
	 * [can-event-queue/map/map.stopListening]. `.stopListening` make it easy to unbind
	 * all of the `.listenTo` event bindings when the observable is no longer needed:
	 *
	 * ```js
	 * person.stopListening();
	 * ```
	 *
	 * If no `bindTarget` is passed, `.listenTo` binds to the current
	 * observable.
	 *
	 * [can-component]'s `connectedCallback` lifecyle hook is often used to call
	 * `.listenTo` to setup bindings that update viewmodel properties.
	 *
	 *
	 * @param {Object} [bindTarget] The object to listen for events on.  If `bindTarget` is not provided,
	 * the observable `.listenTo` was called on will be the `bindTarget`.
	 * @param {String} event The name of the event to listen for.
	 * @param {Function} handler The handler that will be executed to handle the event.
	 * @return {Object} this
	 */listenTo:function(bindTarget,event,handler,queueName){if(canReflect_1_19_2_canReflect.isPrimitive(bindTarget)){queueName=handler;handler=event;event=bindTarget;bindTarget=this;}if(typeof event==="function"){queueName=handler;handler=event;event=undefined;}// Initialize event cache
ensureMeta(this).listenHandlers.add([bindTarget,event,queueName||"mutate",handler]);legacyMapBindings.on.call(bindTarget,event,handler,queueName||"mutate");return this;},/**
	 * @function can-event-queue/map/map.stopListening stopListening
	 * @parent can-event-queue/map/map
	 * @description Stops listening for registered event handlers.
	 *
	 * @signature `obj.stopListening( [bindTarget], [event,] handler]] )`
	 *
	 * `.stopListening` unbinds on event handlers registered through
	 * [can-event-queue/map/map.listenTo]. All event handlers
	 * that match the arguments will be unbound. For example:
	 *
	 * ```js
	 * // Unbinds all .listenTo registered handlers
	 * obj.stopListening()
	 *
	 * // Unbinds all .listenTo registered with `bindTarget`
	 * obj.stopListening(bindTarget)
	 *
	 * // Unbinds all .listenTo registered with `bindTarget`, `event`
	 * obj.stopListening(bindTarget, event)
	 *
	 * // Unbinds the handler registered with `bindTarget`, `event`, `handler`
	 * obj.stopListening(bindTarget, event, handler)
	 * ```
	 *
	 * `.listenTo` is often returned by [can-component]'s `connectedCallback` lifecyle hook.
	 *
	 * @param {Object} [bindTarget] The object we will stop listening to event on. If `bindTarget` is
	 * not provided, the observable `.stopListening` was called on will be the `bindTarget`.
	 * @param {String} [event] The name of the event to listen for.
	 * @param {Function} [handler] The handler that will be executed to handle the event.
	 * @return {Object} this
	 *
	 */stopListening:function(){var keys=stopListeningArgumentsToKeys.apply({context:this,defaultQueue:"mutate"},arguments);var listenHandlers=ensureMeta(this).listenHandlers;function deleteHandler(bindTarget,event,queue,handler){legacyMapBindings.off.call(bindTarget,event,handler,queue);}listenHandlers.delete(keys,deleteHandler);return this;},/**
	 * @function can-event-queue/map/map.on on
	 * @parent can-event-queue/map/map
	 *
	 * @description A shorthand method for listening to event.
	 *
	 * @signature `obj.on( event, handler [, queue] )`
	 *
	 * Listen to when `obj` dispatches an event, a [can-reflect/observe.onKeyValue]
	 * change, or a [can-reflect/observe.onValue] change in that order.
	 *
	 * As this is the __legacy__ `.on`, it will look for an `.addEventListener`
	 * method on the `obj` first, before looking for the [can-symbol/symbols/onKeyValue]
	 * and then [can-symbol/symbols/onValue] symbol.
	 *
	 * @param {String} eventName
	 * @param {Function} handler
	 * @param {String} [queue]
	 * @return {Any} The object `on` was called on.
	 */on:function(eventName,handler,queue){var listenWithDOM=isDomEventTarget$1(this);if(listenWithDOM){if(typeof handler==='string'){canDomEvents_1_3_13_canDomEvents.addDelegateListener(this,eventName,handler,queue);}else {canDomEvents_1_3_13_canDomEvents.addEventListener(this,eventName,handler,queue);}}else {if(this[onEventSymbol]){this[onEventSymbol](eventName,handler,queue);}else if("addEventListener"in this){this.addEventListener(eventName,handler,queue);}else if(this[onKeyValueSymbol$1]){canReflect_1_19_2_canReflect.onKeyValue(this,eventName,handler,queue);}else {if(!eventName&&this[onValueSymbol$1]){canReflect_1_19_2_canReflect.onValue(this,handler,queue);}else {throw new Error("can-event-queue: Unable to bind "+eventName);}}}return this;},/**
	 * @function can-event-queue/map/map.off off
	 * @parent can-event-queue/map/map
	 *
	 * @description A shorthand method for unbinding an event.
	 *
	 * @signature `obj.on( event, handler [, queue] )`
	 *
	 * Listen to when `obj` dispatches an event, a [can-reflect/observe.onKeyValue]
	 * change, or a [can-reflect/observe.onValue] change in that order.
	 *
	 * As this is the __legacy__ `.on`, it will look for an `.addEventListener`
	 * method on the `obj` first, before looking for the [can-symbol/symbols/onKeyValue]
	 * and then [can-symbol/symbols/onValue] symbol.
	 *
	 * @param {String} eventName
	 * @param {Function} handler
	 * @param {String} [queue]
	 * @return {Any} The object `on` was called on.
	 */off:function(eventName,handler,queue){var listenWithDOM=isDomEventTarget$1(this);if(listenWithDOM){if(typeof handler==='string'){canDomEvents_1_3_13_canDomEvents.removeDelegateListener(this,eventName,handler,queue);}else {canDomEvents_1_3_13_canDomEvents.removeEventListener(this,eventName,handler,queue);}}else {if(this[offEventSymbol]){this[offEventSymbol](eventName,handler,queue);}else if("removeEventListener"in this){this.removeEventListener(eventName,handler,queue);}else if(this[offKeyValueSymbol]){canReflect_1_19_2_canReflect.offKeyValue(this,eventName,handler,queue);}else {if(!eventName&&this[offValueSymbol]){canReflect_1_19_2_canReflect.offValue(this,handler,queue);}else {throw new Error("can-event-queue: Unable to unbind "+eventName);}}}return this;}};// The symbols we'll add to objects
var symbols$1={/**
	 * @function can-event-queue/map/map.can.onKeyValue @can.onKeyValue
	 * @parent can-event-queue/map/map
	 *
	 * @description Register an event handler to be called when a key value changes.
	 *
	 * @signature `canReflect.onKeyValue( obj, key, handler(newVal) [,queueName] )`
	 *
	 * Add a key change handler to an object.  Handlers attached by `.onKeyValue` get
	 * called back with the new value of the `key`. Handlers attached with [can-event-queue/map/map.can.addEventListener]
	 * get the event object.
	 *
	 * ```js
	 * var mixinMapBindings = require("can-event-queue/map/map");
	 *
	 * var obj = mixinMapBindings({});
	 *
	 * canReflect.onKeyValue( obj, "prop", function(newPropValue){ ... });
	 * ```
	 *
	 * @param {String} key The name of property to listen to changes in values.
	 * @param {Function} handler(newVal, oldValue) The handler that will be called
	 *   back with the new and old value of the key.
	 * @param {String} [queueName='mutate'] The name of the [can-queues] queue the handler will called
	 *   back within. Defaults to `"mutate"`.
	 */"can.onKeyValue":function(key,handler,queueName){ensureMeta(this).handlers.add([key,"onKeyValue",queueName||"mutate",handler]);},/**
	 * @function can-event-queue/map/map.can.offKeyValue @can.offKeyValue
	 * @parent can-event-queue/map/map
	 *
	 * @description Unregister an event handler to be called when an event is dispatched.
	 *
	 * @signature `canReflect.offKeyValue( obj, key, handler, queueName )`
	 *
	 * Removes a handlers from being called when `key` changes are
	 * [can-event-queue/map/map.dispatch]ed.
	 *
	 * ```js
	 * // Removes `handler` if it is in the notify queue.
	 * canReflect.offKeyValue( obj, "prop", handler, "notify" )
	 * ```
	 *
	 * @param {String} eventName The name of the event to remove. If not specified, all events are removed.
	 * @param {Function} [handler] The handler that will be removed from the event. If not specified, all handlers for the event are removed.
	 * @param {String} [queueName='mutate'] The name of the [can-queues] queue the handler was registered on. Defaults to `"mutate"`.
	 */"can.offKeyValue":function(key,handler,queueName){ensureMeta(this).handlers.delete([key,"onKeyValue",queueName||"mutate",handler]);},/**
	 * @function can-event-queue/map/map.can.isBound @can.isBound
	 * @parent can-event-queue/map/map
	 *
	 * @description Return if the observable is bound to.
	 *
	 * @signature `canReflect.isBound(obj)`
	 *
	 * The `@can.isBound` symbol is added to make [can-reflect/observe.isBound]
	 * return if `obj` is bound or not.
	 *
	 * @return {Boolean} True if the observable has been bound to with `.onKeyValue` or `.addEventListener`.
	 */"can.isBound":function(){return !ensureMeta(this).handlers.isEmpty();},/**
	 * @function can-event-queue/map/map.can.getWhatIChange @can.getWhatIChange
	 * @parent can-event-queue/map/map
	 *
	 * @description Return observables whose values are affected by attached event handlers
	 * @signature `@can.getWhatIChange(key)`
	 *
	 * The `@@can.getWhatIChange` symbol is added to make sure [can-debug] can report
	 * all the observables whose values are set by a given observable's key.
	 *
	 * This function iterates over the event handlers attached to a given `key` and
	 * collects the result of calling `@@can.getChangesDependencyRecord` on each handler;
	 * this symbol allows the caller to tell what observables are being mutated by
	 * the event handler when it is executed.
	 *
	 * In the following example a [can-simple-map] instance named `me` is created
	 * and when its `age` property changes, the value of a [can-simple-observable]
	 * instance is set. The event handler that causes the mutation is then decatorated
	 * with `@@can.getChangesDependencyRecord` to register the mutation dependency.
	 *
	 * ```js
	 * var obs = new SimpleObservable("a");
	 * var me = new SimpleMap({ age: 30 });
	 * var canReflect = require("can-reflect");
	 *
	 * var onAgeChange = function onAgeChange() {
	 *	canReflect.setValue(obs, "b");
	 * };
	 *
	 * onAgeChange[canSymbol.for("can.getChangesDependencyRecord")] = function() {
	 *	return {
	 *		valueDependencies: new Set([ obs ]);
	 *	}
	 * };
	 *
	 * canReflect.onKeyValue(me, "age", onAgeChange);
	 * me[canSymbol.for("can.getWhatIChange")]("age");
	 * ```
	 *
	 * The dependency records collected from the event handlers are divided into
	 * two categories:
	 *
	 * - mutate: Handlers in the mutate/domUI queues
	 * - derive: Handlers in the notify queue
	 *
	 * Since event handlers are added by default to the "mutate" queue, calling
	 * `@@can.getWhatIChange` on the `me` instance returns an object with a mutate
	 * property and the `valueDependencies` Set registered on the `onAgeChange`
	 * handler.
	 *
	 * Please check out the [can-reflect-dependencies] docs to learn more about
	 * how this symbol is used to keep track of custom observable dependencies.
	 */"can.getWhatIChange":function getWhatIChange(key){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var whatIChange={};var meta=ensureMeta(this);var notifyHandlers=[].concat(meta.handlers.get([key,"event","notify"]),meta.handlers.get([key,"onKeyValue","notify"]));var mutateHandlers=[].concat(meta.handlers.get([key,"event","mutate"]),meta.handlers.get([key,"event","domUI"]),meta.handlers.get([key,"onKeyValue","mutate"]),meta.handlers.get([key,"onKeyValue","domUI"]));if(notifyHandlers.length){notifyHandlers.forEach(function(handler){var changes=canReflect_1_19_2_canReflect.getChangesDependencyRecord(handler);if(changes){var record=whatIChange.derive;if(!record){record=whatIChange.derive={};}merge$1(record,changes);}});}if(mutateHandlers.length){mutateHandlers.forEach(function(handler){var changes=canReflect_1_19_2_canReflect.getChangesDependencyRecord(handler);if(changes){var record=whatIChange.mutate;if(!record){record=whatIChange.mutate={};}merge$1(record,changes);}});}return Object.keys(whatIChange).length?whatIChange:undefined;}//!steal-remove-end
},"can.onPatches":function(handler,queue){var handlers=ensureMeta(this).handlers;handlers.add(["can.patches","onKeyValue",queue||"notify",handler]);},"can.offPatches":function(handler,queue){var handlers=ensureMeta(this).handlers;handlers.delete(["can.patches","onKeyValue",queue||"notify",handler]);}};// This can be removed in a future version.
function defineNonEnumerable$1(obj,prop,value){Object.defineProperty(obj,prop,{enumerable:false,value:value});}// The actual legacyMapBindings mixin function
legacyMapBindings=function(obj){// add properties
canReflect_1_19_2_canReflect.assignMap(obj,props);// add symbols
return canReflect_1_19_2_canReflect.assignSymbols(obj,symbols$1);};defineNonEnumerable$1(legacyMapBindings,"addHandlers",addHandlers);defineNonEnumerable$1(legacyMapBindings,"stopListeningArgumentsToKeys",stopListeningArgumentsToKeys);// ## LEGACY
// The following is for compatability with the old can-event
props.bind=props.addEventListener;props.unbind=props.removeEventListener;// Adds methods directly to method so it can be used like `can-event` used to be used.
canReflect_1_19_2_canReflect.assignMap(legacyMapBindings,props);canReflect_1_19_2_canReflect.assignSymbols(legacyMapBindings,symbols$1);defineNonEnumerable$1(legacyMapBindings,"start",function(){console.warn("use can-queues.batch.start()");canQueues_1_3_2_canQueues.batch.start();});defineNonEnumerable$1(legacyMapBindings,"stop",function(){console.warn("use can-queues.batch.stop()");canQueues_1_3_2_canQueues.batch.stop();});defineNonEnumerable$1(legacyMapBindings,"flush",function(){console.warn("use can-queues.flush()");canQueues_1_3_2_canQueues.flush();});defineNonEnumerable$1(legacyMapBindings,"afterPreviousEvents",function(handler){console.warn("don't use afterPreviousEvents");canQueues_1_3_2_canQueues.mutateQueue.enqueue(function afterPreviousEvents(){canQueues_1_3_2_canQueues.mutateQueue.enqueue(handler);});canQueues_1_3_2_canQueues.flush();});defineNonEnumerable$1(legacyMapBindings,"after",function(handler){console.warn("don't use after");canQueues_1_3_2_canQueues.mutateQueue.enqueue(handler);canQueues_1_3_2_canQueues.flush();});var map$1=legacyMapBindings;// Ensure the "obj" passed as an argument has an object on @@can.meta
var ensureMeta$1=function ensureMeta(obj){var metaSymbol=canSymbol_1_7_0_canSymbol.for("can.meta");var meta=obj[metaSymbol];if(!meta){meta={};canReflect_1_19_2_canReflect.setKeyValue(obj,metaSymbol,meta);}return meta;};// this is a very simple can-map like object
var SimpleMap=canConstruct_3_5_7_canConstruct.extend("SimpleMap",{// ### setup
// A setup function for the instantiation of a simple-map.
setup:function(initialData){this._data={};if(initialData&&typeof initialData==="object"){this.attr(initialData);}},// ### attr
// The main get/set interface simple-map.
// Either sets or gets one or more properties depending on how it is called.
attr:function(prop,value){var self=this;if(arguments.length===0){canObservationRecorder_1_3_1_canObservationRecorder.add(this,"can.keys");var data={};canReflect_1_19_2_canReflect.eachKey(this._data,function(value,prop){canObservationRecorder_1_3_1_canObservationRecorder.add(this,prop);data[prop]=value;},this);return data;}else if(arguments.length>1){var had=this._data.hasOwnProperty(prop);var old=this._data[prop];this._data[prop]=value;if(old!==value){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(typeof this._log==="function"){this._log(prop,value,old);}}//!steal-remove-end
var dispatched={keyChanged:!had?prop:undefined,type:prop};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){dispatched={keyChanged:!had?prop:undefined,type:prop,reasonLog:[canReflect_1_19_2_canReflect.getName(this)+"'s",prop,"changed to",value,"from",old]};}//!steal-remove-end
this.dispatch(dispatched,[value,old]);}}// 1 argument
else if(typeof prop==='object'){canQueues_1_3_2_canQueues.batch.start();canReflect_1_19_2_canReflect.eachKey(prop,function(value,key){self.attr(key,value);});canQueues_1_3_2_canQueues.batch.stop();}else {if(prop!=="constructor"){canObservationRecorder_1_3_1_canObservationRecorder.add(this,prop);return this._data[prop];}return this.constructor;}},serialize:function(){return canReflect_1_19_2_canReflect.serialize(this,Map);},get:function(){return this.attr.apply(this,arguments);},set:function(){return this.attr.apply(this,arguments);},// call `.log()` to log all property changes
// pass a single property to only get logs for said property, e.g: `.log("foo")`
log:function(key){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var quoteString=function quoteString(x){return typeof x==="string"?JSON.stringify(x):x;};var meta=ensureMeta$1(this);meta.allowedLogKeysSet=meta.allowedLogKeysSet||new Set();if(key){meta.allowedLogKeysSet.add(key);}this._log=function(prop,current,previous,log){if(key&&!meta.allowedLogKeysSet.has(prop)){return;}dev.log(canReflect_1_19_2_canReflect.getName(this),"\n key ",quoteString(prop),"\n is  ",quoteString(current),"\n was ",quoteString(previous));};}//!steal-remove-end
}});map$1(SimpleMap.prototype);var simpleMapProto={// -type-
"can.isMapLike":true,"can.isListLike":false,"can.isValueLike":false,// -get/set-
"can.getKeyValue":SimpleMap.prototype.get,"can.setKeyValue":SimpleMap.prototype.set,"can.deleteKeyValue":function(prop){var dispatched;if(this._data.hasOwnProperty(prop)){var old=this._data[prop];delete this._data[prop];//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(typeof this._log==="function"){this._log(prop,undefined,old);}}//!steal-remove-end
dispatched={keyChanged:prop,type:prop};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){dispatched={keyChanged:prop,type:prop,reasonLog:[canReflect_1_19_2_canReflect.getName(this)+"'s",prop,"deleted",old]};}//!steal-remove-end
this.dispatch(dispatched,[undefined,old]);}},// -shape
"can.getOwnEnumerableKeys":function(){canObservationRecorder_1_3_1_canObservationRecorder.add(this,'can.keys');return Object.keys(this._data);},// -shape get/set-
"can.assignDeep":function(source){canQueues_1_3_2_canQueues.batch.start();// TODO: we should probably just throw an error instead of cleaning
canReflect_1_19_2_canReflect.assignMap(this,source);canQueues_1_3_2_canQueues.batch.stop();},"can.updateDeep":function(source){canQueues_1_3_2_canQueues.batch.start();// TODO: we should probably just throw an error instead of cleaning
canReflect_1_19_2_canReflect.updateMap(this,source);canQueues_1_3_2_canQueues.batch.stop();},"can.keyHasDependencies":function(key){return false;},"can.getKeyDependencies":function(key){return undefined;},"can.hasOwnKey":function(key){return this._data.hasOwnProperty(key);}};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){simpleMapProto["can.getName"]=function(){return canReflect_1_19_2_canReflect.getName(this.constructor)+"{}";};}//!steal-remove-end
canReflect_1_19_2_canReflect.assignSymbols(SimpleMap.prototype,simpleMapProto);// Setup other symbols
var canSimpleMap_4_3_3_canSimpleMap=SimpleMap;/**
 * Creates a constructor function from an ES2015 class, this is a workaround
 * needed to being able to extend a class from code that's transpiled by Babel.
 * See https://github.com/babel/babel/pull/8656
 * @param {*} Type The ES2015 base class used to create the constructor
 * @param {*} Parent The object where the prototype chain walk to copy over
 * symbols and static properties to the constructor stops. If not provided,
 * the chain stops at Object.
 * @returns {Function} Constructor function than can be safely subclassed from
 * transpiled code.
 */function createConstructorFunction(Type,Parent){if(typeof Parent==="undefined"){Parent=Object.getPrototypeOf(Object);}function TypeConstructor(){return Reflect.construct(Type,arguments,this.constructor);}TypeConstructor.prototype=Object.create(Type.prototype);TypeConstructor.prototype.constructor=TypeConstructor;/**
	 * Add `prop` to TypeConstructor from `source` if not defined already
	 * @param {{}} source The object that owns `prop`
	 * @param {string} prop The name of the property to be defined
	 */function copyIfMissing(source,prop){if(!TypeConstructor[prop]){Object.defineProperty(TypeConstructor,prop,Object.getOwnPropertyDescriptor(source,prop));}}// Walk up the prototype chain to copy over all Symbols and
// static properties to the constructor function
let Link=Type;while(Link!==Parent&&Link!==null){const props=Object.getOwnPropertyNames(Link);props.forEach(function(prop){copyIfMissing(Link,prop);});const symbols=Object.getOwnPropertySymbols(Link);symbols.forEach(function(symbol){copyIfMissing(Link,symbol);});Link=Object.getPrototypeOf(Link);}return TypeConstructor;}var createConstructorFunction_1=createConstructorFunction;// This is an observable that is like `settable`, but passed a `resolve`
// function that can resolve the value of this observable late.
function AsyncObservable(fn,context,initialValue){this.resolve=this.resolve.bind(this);this.lastSetValue=new canSimpleObservable_2_5_0_canSimpleObservable(initialValue);this.handler=this.handler.bind(this);function observe(){this.resolveCalled=false;// set inGetter flag to avoid calling `resolve` redundantly if it is called
// synchronously in the getter
this.inGetter=true;var newVal=fn.call(context,this.lastSetValue.get(),this.bound===true?this.resolve:undefined);this.inGetter=false;// if the getter returned a value, resolve with the value
if(newVal!==undefined){this.resolve(newVal);}// otherwise, if `resolve` was called synchronously in the getter,
// resolve with the value passed to `resolve`
else if(this.resolveCalled){this.resolve(this._value);}// if bound, the handlers will be called by `resolve`
// returning here would cause a duplicate event
if(this.bound!==true){return newVal;}}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){canReflect_1_19_2_canReflect.assignSymbols(this,{"can.getName":function(){return canReflect_1_19_2_canReflect.getName(this.constructor)+"<"+canReflect_1_19_2_canReflect.getName(fn)+">";}});Object.defineProperty(this.handler,"name",{value:canReflect_1_19_2_canReflect.getName(this)+".handler"});Object.defineProperty(observe,"name",{value:canReflect_1_19_2_canReflect.getName(fn)+"::"+canReflect_1_19_2_canReflect.getName(this.constructor)});}//!steal-remove-end
this.observation=new canObservation_4_2_0_canObservation(observe,this);}AsyncObservable.prototype=Object.create(settable.prototype);AsyncObservable.prototype.constructor=AsyncObservable;AsyncObservable.prototype.handler=function(newVal){if(newVal!==undefined){settable.prototype.handler.apply(this,arguments);}};var peek$1$1=canObservationRecorder_1_3_1_canObservationRecorder.ignore(canReflect_1_19_2_canReflect.getValue.bind(canReflect_1_19_2_canReflect));AsyncObservable.prototype.activate=function(){canReflect_1_19_2_canReflect.onValue(this.observation,this.handler,"notify");if(!this.resolveCalled){this._value=peek$1$1(this.observation);}};AsyncObservable.prototype.resolve=function resolve(newVal){this.resolveCalled=true;var old=this._value;this._value=newVal;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(typeof this._log==="function"){this._log(old,newVal);}}//!steal-remove-end
// if resolve was called synchronously from the getter, do not enqueue changes
// the observation will handle calling resolve again if required
if(!this.inGetter){var queuesArgs=[this.handlers.getNode([]),this,[newVal,old],null];//!steal-remove-start
if(process.env.NODE_ENV!=='production'){queuesArgs=[this.handlers.getNode([]),this,[newVal,old],null/* jshint laxcomma: true */,[canReflect_1_19_2_canReflect.getName(this),"resolved with",newVal]/* jshint laxcomma: false */];}//!steal-remove-end
// adds callback handlers to be called w/i their respective queue.
canQueues_1_3_2_canQueues.enqueueByQueue.apply(canQueues_1_3_2_canQueues,queuesArgs);}};var async=AsyncObservable;var getChangesSymbol$1=canSymbol_1_7_0_canSymbol.for("can.getChangesDependencyRecord");var metaSymbol$1=canSymbol_1_7_0_canSymbol.for("can.meta");function ResolverObservable(resolver,context,initialValue,options){// we don't want reads leaking out.  We should be binding to all of this ourselves.
this.resolver=canObservationRecorder_1_3_1_canObservationRecorder.ignore(resolver);this.context=context;this._valueOptions={resolve:this.resolve.bind(this),listenTo:this.listenTo.bind(this),stopListening:this.stopListening.bind(this),lastSet:new canSimpleObservable_2_5_0_canSimpleObservable(initialValue)};this.update=this.update.bind(this);this.contextHandlers=new WeakMap();this.teardown=null;// a place holder for remembering where we bind
this.binder={};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){canReflect_1_19_2_canReflect.assignSymbols(this,{"can.getName":function(){return canReflect_1_19_2_canReflect.getName(this.constructor)+"<"+canReflect_1_19_2_canReflect.getName(resolver)+">";}});Object.defineProperty(this.update,"name",{value:canReflect_1_19_2_canReflect.getName(this)+".update"});canReflect_1_19_2_canReflect.assignSymbols(this._valueOptions.lastSet,{"can.getName":function(){return canReflect_1_19_2_canReflect.getName(this.constructor)+"::lastSet"+"<"+canReflect_1_19_2_canReflect.getName(resolver)+">";}});}//!steal-remove-end
this[metaSymbol$1]=canReflect_1_19_2_canReflect.assignMap({},options);}ResolverObservable.prototype=Object.create(settable.prototype);function deleteHandler(bindTarget,event,queue,handler){map$1.off.call(bindTarget,event,handler,queue);}canReflect_1_19_2_canReflect.assignMap(ResolverObservable.prototype,{constructor:ResolverObservable,listenTo:function(bindTarget,event,handler,queueName){//Object.defineProperty(this.handler, "name", {
//	value: canReflect.getName(this) + ".handler"
//});
if(canReflect_1_19_2_canReflect.isPrimitive(bindTarget)){handler=event;event=bindTarget;bindTarget=this.context;}if(typeof event==="function"){handler=event;event=undefined;}var resolverInstance=this;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(!handler.name){Object.defineProperty(handler,"name",{value:(bindTarget?canReflect_1_19_2_canReflect.getName(bindTarget):"")+(event?".on('"+event+"',handler)":".on(handler)")+"::"+canReflect_1_19_2_canReflect.getName(this)});}}//!steal-remove-end
var contextHandler=handler.bind(this.context);contextHandler[getChangesSymbol$1]=function getChangesDependencyRecord(){var s=new Set();s.add(resolverInstance);return {valueDependencies:s};};this.contextHandlers.set(handler,contextHandler);map$1.listenTo.call(this.binder,bindTarget,event,contextHandler,queueName||"notify");},stopListening:function(){var meta=this.binder[canSymbol_1_7_0_canSymbol.for("can.meta")];var listenHandlers=meta&&meta.listenHandlers;if(listenHandlers){var keys=map$1.stopListeningArgumentsToKeys.call({context:this.context,defaultQueue:"notify"});listenHandlers.delete(keys,deleteHandler);}return this;},resolve:function(newVal){this._value=newVal;// if we are setting up the initial binding and we get a resolved value
// do not emit events for it.
if(this.isBinding){this.lastValue=this._value;return newVal;}if(this._value!==this.lastValue){var enqueueMeta={};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){/* jshint laxcomma: true */enqueueMeta={log:[canReflect_1_19_2_canReflect.getName(this.update)],reasonLog:[canReflect_1_19_2_canReflect.getName(this),"resolved with",newVal]};/* jshint laxcomma: false */}//!steal-remove-end
canQueues_1_3_2_canQueues.batch.start();canQueues_1_3_2_canQueues.deriveQueue.enqueue(this.update,this,[],enqueueMeta);canQueues_1_3_2_canQueues.batch.stop();}return newVal;},update:function(){if(this.lastValue!==this._value){var old=this.lastValue;this.lastValue=this._value;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(typeof this._log==="function"){this._log(old,this._value);}}//!steal-remove-end
// adds callback handlers to be called w/i their respective queue.
canQueues_1_3_2_canQueues.enqueueByQueue(this.handlers.getNode([]),this,[this._value,old]);}},activate:function(){this.isBinding=true;this.teardown=this.resolver.call(this.context,this._valueOptions);this.isBinding=false;},onUnbound:function(){this.bound=false;map$1.stopListening.call(this.binder);if(this.teardown!=null){this.teardown();this.teardown=null;}},set:function(value){this._valueOptions.lastSet.set(value);/*if (newVal !== this.lastSetValue.get()) {
			this.lastSetValue.set(newVal);
		}*/},get:function(){if(canObservationRecorder_1_3_1_canObservationRecorder.isRecording()){canObservationRecorder_1_3_1_canObservationRecorder.add(this);if(!this.bound){this.onBound();}}if(this.bound===true){return this._value;}else {if(this[metaSymbol$1].resetUnboundValueInGet){this._value=undefined;}var handler=function(){};this.on(handler);var val=this._value;this.off(handler);return val;}},hasDependencies:function hasDependencies(){var hasDependencies=false;if(this.bound){var meta=this.binder[metaSymbol$1];var listenHandlers=meta&&meta.listenHandlers;hasDependencies=!!listenHandlers.size();}return hasDependencies;},getValueDependencies:function getValueDependencies(){if(this.bound){var meta=this.binder[canSymbol_1_7_0_canSymbol.for("can.meta")];var listenHandlers=meta&&meta.listenHandlers;var keyDeps=new Map();var valueDeps=new Set();if(listenHandlers){canReflect_1_19_2_canReflect.each(listenHandlers.root,function(events,obj){canReflect_1_19_2_canReflect.each(events,function(queues,eventName){if(eventName===undefined){valueDeps.add(obj);}else {var entry=keyDeps.get(obj);if(!entry){entry=new Set();keyDeps.set(obj,entry);}entry.add(eventName);}});});if(valueDeps.size||keyDeps.size){var result={};if(keyDeps.size){result.keyDependencies=keyDeps;}if(valueDeps.size){result.valueDependencies=valueDeps;}return result;}}}}});canReflect_1_19_2_canReflect.assignSymbols(ResolverObservable.prototype,{"can.getValue":ResolverObservable.prototype.get,"can.setValue":ResolverObservable.prototype.set,"can.isMapLike":false,"can.getPriority":function(){// TODO: the priority should come from any underlying values
return this.priority||0;},"can.setPriority":function(newPriority){this.priority=newPriority;},"can.valueHasDependencies":ResolverObservable.prototype.hasDependencies,"can.getValueDependencies":ResolverObservable.prototype.getValueDependencies});var resolver=ResolverObservable;/**
 * @module {function} can-event-queue/type/type
 * @parent can-event-queue
 *
 * @description Mixin methods and symbols to make a type constructor function able to
 * broadcast changes in its instances.
 *
 * @signature `mixinTypeBindings( type )`
 *
 * Adds symbols and methods that make `type` work with the following [can-reflect] APIs:
 *
 * - [can-reflect/observe.onInstanceBoundChange] - Observe when instances are bound.
 * - [can-reflect/observe.onInstancePatches] - Observe patche events on all instances.
 *
 * When `mixinTypeBindings` is called on an `Person` _type_ like:
 *
 * ```js
 * var mixinTypeBindings = require("can-event-queue/type/type");
 * var mixinLegacyMapBindings = require("can-event-queue/map/map");
 *
 * class Person {
 *   constructor(data){
 *     this.data = data;
 *   }
 * }
 * mixinTypeBindings(Person);
 * mixinLegacyMapBindings(Person.prototype);
 *
 * var me = new Person({first: "Justin", last: "Meyer"});
 *
 * // mixinTypeBindings allows you to listen to
 * // when a person instance's bind stache changes
 * canReflect.onInstanceBoundChange(Person, function(person, isBound){
 *    console.log("isBound");
 * });
 *
 * // mixinTypeBindings allows you to listen to
 * // when a patch change happens.
 * canReflect.onInstancePatches(Person, function(person, patches){
 *    console.log(patches[0]);
 * });
 *
 * me.on("name",function(ev, newVal, oldVal){}) //-> logs: "isBound"
 *
 * me.dispatch({
 *   type: "first",
 *   patches: [{type: "set", key: "first", value: "Ramiya"}]
 * }, ["Ramiya","Justin"])
 * //-> logs: {type: "set", key: "first", value: "Ramiya"}
 * ```
 *
 */var metaSymbol$2=canSymbol_1_7_0_canSymbol.for("can.meta");function addHandlers$1(obj,meta){if(!meta.lifecycleHandlers){meta.lifecycleHandlers=new canKeyTree_1_2_2_canKeyTree([Object,Array]);}if(!meta.instancePatchesHandlers){meta.instancePatchesHandlers=new canKeyTree_1_2_2_canKeyTree([Object,Array]);}}function ensureMeta$2(obj){var meta=obj[metaSymbol$2];if(!meta){meta={};canReflect_1_19_2_canReflect.setKeyValue(obj,metaSymbol$2,meta);}addHandlers$1(obj,meta);return meta;}var props$1={/**
     * @function can-event-queue/type/type.can.onInstanceBoundChange @can.onInstanceBoundChange
     * @parent can-event-queue/type/type
     * @description Listen to when any instance is bound for the first time or all handlers are removed.
     *
     * @signature `canReflect.onInstanceBoundChange(Type, handler(instance, isBound) )`
     *
     * ```js
     * canReflect.onInstanceBoundChange(Person, function(person, isBound){
     *    console.log("isBound");
     * });
     * ```
     *
     * @param {function(Any,Boolean)} handler(instance,isBound) A function is called
     * when an instance is bound or unbound.  `isBound` will be `true` when the instance
     * becomes bound and `false` when unbound.
     *//**
     * @function can-event-queue/type/type.can.offInstanceBoundChange @can.offInstanceBoundChange
     * @parent can-event-queue/type/type
     *
     * @description Stop listening to when an instance's bound status changes.
     *
     * @signature `canReflect.offInstanceBoundChange(Type, handler )`
     *
     * Stop listening to a handler bound with
     * [can-event-queue/type/type.can.onInstanceBoundChange].
     *//**
     * @function can-event-queue/type/type.can.onInstancePatches @can.onInstancePatches
     * @parent can-event-queue/type/type
     *
     * @description Listen to patch changes on any instance.
     *
     * @signature `canReflect.onInstancePatches(Type, handler(instance, patches) )`
     *
     * Listen to patch changes on any instance of `Type`. This is used by
     * [can-connect] to know when a potentially `unbound` instance's `id`
     * changes. If the `id` changes, the instance can be moved into the store
     * while it is being saved.
     *
     *//**
     * @function can-event-queue/type/type.can.offInstancePatches @can.offInstancePatches
     * @parent can-event-queue/type/type
     *
     * @description Stop listening to patch changes on any instance.
     *
     * @signature `canReflect.onInstancePatches(Type, handler )`
     *
     * Stop listening to a handler bound with [can-event-queue/type/type.can.onInstancePatches].
     */};function onOffAndDispatch(symbolName,dispatchName,handlersName){props$1["can.on"+symbolName]=function(handler,queueName){ensureMeta$2(this)[handlersName].add([queueName||"mutate",handler]);};props$1["can.off"+symbolName]=function(handler,queueName){ensureMeta$2(this)[handlersName].delete([queueName||"mutate",handler]);};props$1["can."+dispatchName]=function(instance,arg){canQueues_1_3_2_canQueues.enqueueByQueue(ensureMeta$2(this)[handlersName].getNode([]),this,[instance,arg]);};}onOffAndDispatch("InstancePatches","dispatchInstanceOnPatches","instancePatchesHandlers");onOffAndDispatch("InstanceBoundChange","dispatchInstanceBoundChange","lifecycleHandlers");function mixinTypeBindings(obj){return canReflect_1_19_2_canReflect.assignSymbols(obj,props$1);}Object.defineProperty(mixinTypeBindings,"addHandlers",{enumerable:false,value:addHandlers$1});var type$1=mixinTypeBindings;var canType_1_1_6_canType=createCommonjsModule(function(module,exports){var isMemberSymbol=canSymbol_1_7_0_canSymbol.for("can.isMember");var newSymbol=canSymbol_1_7_0_canSymbol.for("can.new");var getSchemaSymbol=canSymbol_1_7_0_canSymbol.for("can.getSchema");var baseTypeSymbol=canSymbol_1_7_0_canSymbol.for("can.baseType");var strictTypeOfSymbol=canSymbol_1_7_0_canSymbol.for("can.strictTypeOf");var type=exports;function makeSchema(values){return function(){return {type:"Or",values:values};};}// Default "can.new"
function canNew(value){if(this[isMemberSymbol](value)){return value;}return canReflect_1_19_2_canReflect.convert(value,this[baseTypeSymbol]);}function strictNew(value){var isMember=this[isMemberSymbol](value);if(!isMember){return check(this[baseTypeSymbol],value);}return value;}// "can.new" for Booleans
function booleanNew(value){if(value==="false"||value==="0"){return false;}return Boolean(value);}var maybeValues=Object.freeze([null,undefined]);function check(Type,val){var valueType=canString_1_1_0_canString.capitalize(typeof val);var error=new Error('Type value '+typeof val==="string"?'"'+val+'"':val+' ('+valueType+') is not of type '+canReflect_1_19_2_canReflect.getName(Type)+'.');error.type='can-type-error';throw error;}function makeIsMember(Type){if(isMemberSymbol in Type){return Type[isMemberSymbol];}return function(value){return value instanceof Type;};}function makeBaseType(Type){var typeObject={};typeObject[newSymbol]=canNew;typeObject[isMemberSymbol]=makeIsMember(Type);typeObject[baseTypeSymbol]=Type;typeObject[getSchemaSymbol]=makeSchema([Type]);Type[strictTypeOfSymbol]=typeObject[strictTypeOfSymbol]=typeObject;return typeObject;}function makePrimitiveType(Type,typeString){var typeObject=makeBaseType(Type);if(Type===Boolean){typeObject[newSymbol]=booleanNew;typeObject[getSchemaSymbol]=makeSchema([true,false]);}typeObject[isMemberSymbol]=function(value){return typeof value===typeString;};return typeObject;}function getBaseType(Type){if(typeof Type==="function"){if(canReflect_1_19_2_canReflect.hasOwnKey(Type,strictTypeOfSymbol)){return Type[strictTypeOfSymbol];}}else if(strictTypeOfSymbol in Type){return Type[strictTypeOfSymbol];}return makeBaseType(Type);}function makeMaybe(Type){var isMember=Type[isMemberSymbol];return function(value){return value==null||isMember.call(this,value);};}function makeMaybeSchema(baseType){var baseSchema=canReflect_1_19_2_canReflect.getSchema(baseType);var allValues=baseSchema.values.concat(maybeValues);return makeSchema(allValues);}function inheritFrom(o,Type,property){if(property in Type){o[property]=Type[property];}}function wrapName(wrapper,Type){var baseName=canReflect_1_19_2_canReflect.getName(Type);return "type."+wrapper+"("+baseName+")";}canReflect_1_19_2_canReflect.each({"boolean":Boolean,"number":Number,"string":String},function(Type,typeString){makePrimitiveType(Type,typeString);});function isTypeObject(Type){if(canReflect_1_19_2_canReflect.isPrimitive(Type)){return false;}return newSymbol in Type&&isMemberSymbol in Type;}function normalize(Type){if(canReflect_1_19_2_canReflect.isPrimitive(Type)){throw new Error("can-type: Unable to normalize primitive values.");}else if(isTypeObject(Type)){return Type;}else {return type.check(Type);}}function late(fn){var lateType={};var underlyingType;var unwrap=function(){underlyingType=type.normalize(fn());unwrap=function(){return underlyingType;};return underlyingType;};return canReflect_1_19_2_canReflect.assignSymbols(lateType,{"can.new":function(val){return canReflect_1_19_2_canReflect.new(unwrap(),val);},"can.isMember":function(val){return unwrap()[isMemberSymbol](val);}});}var Any=canReflect_1_19_2_canReflect.assignSymbols({},{"can.new":function(val){return val;},"can.isMember":function(){return true;}});function all(typeFn,Type){var typeObject=typeFn(Type);typeObject[getSchemaSymbol]=function(){var parentSchema=canReflect_1_19_2_canReflect.getSchema(Type);var schema=canReflect_1_19_2_canReflect.assignMap({},parentSchema);schema.keys={};canReflect_1_19_2_canReflect.eachKey(parentSchema.keys,function(value,key){schema.keys[key]=typeFn(value);});return schema;};function Constructor(values){var schema=canReflect_1_19_2_canReflect.getSchema(this);var keys=schema.keys;var convertedValues={};canReflect_1_19_2_canReflect.eachKey(values||{},function(value,key){convertedValues[key]=canReflect_1_19_2_canReflect.convert(value,keys[key]);});return canReflect_1_19_2_canReflect.new(Type,convertedValues);}canReflect_1_19_2_canReflect.setName(Constructor,"Converted<"+canReflect_1_19_2_canReflect.getName(Type)+">");Constructor.prototype=typeObject;return Constructor;}var Integer={};Integer[newSymbol]=function(value){// parseInt(notANumber) returns NaN
// Since we always want an integer returned
// using |0 instead.
return value|0;};Integer[isMemberSymbol]=function(value){// “polyfill” for Number.isInteger because it’s not supported in IE11
return typeof value==="number"&&isFinite(value)&&Math.floor(value)===value;};Integer[getSchemaSymbol]=makeSchema([Number]);canReflect_1_19_2_canReflect.setName(Integer,"Integer");function makeCache(fn){var cache=new WeakMap();return function(Type){if(cache.has(Type)){return cache.get(Type);}var typeObject=fn.call(this,Type);cache.set(Type,typeObject);return typeObject;};}exports.check=makeCache(function(Type){var o=Object.create(getBaseType(Type));o[newSymbol]=strictNew;inheritFrom(o,Type,isMemberSymbol);inheritFrom(o,Type,getSchemaSymbol);canReflect_1_19_2_canReflect.setName(o,wrapName("check",Type));return o;});exports.convert=makeCache(function(Type){var o=Object.create(getBaseType(Type));inheritFrom(o,Type,isMemberSymbol);inheritFrom(o,Type,getSchemaSymbol);canReflect_1_19_2_canReflect.setName(o,wrapName("convert",Type));return o;});exports.maybe=makeCache(function(Type){var baseType=getBaseType(Type);var desc={};desc[newSymbol]={value:strictNew};desc[isMemberSymbol]={value:makeMaybe(baseType)};desc[getSchemaSymbol]={value:makeMaybeSchema(baseType)};var o=Object.create(baseType,desc);canReflect_1_19_2_canReflect.setName(o,wrapName("maybe",Type));return o;});exports.maybeConvert=makeCache(function(Type){var baseType=getBaseType(Type);var desc={};desc[isMemberSymbol]={value:makeMaybe(baseType)};desc[getSchemaSymbol]={value:makeMaybeSchema(baseType)};var o=Object.create(baseType,desc);canReflect_1_19_2_canReflect.setName(o,wrapName("maybeConvert",Type));return o;});//!steal-remove-start
// type checking should not throw in production
if(process.env.NODE_ENV==='production'){exports.check=exports.convert;exports.maybe=exports.maybeConvert;}//!steal-remove-end
exports.Any=Any;exports.Integer=Integer;exports.late=late;exports.isTypeObject=isTypeObject;exports.normalize=normalize;exports.all=all;exports.convertAll=all.bind(null,exports.convert);canNamespace_1_0_0_canNamespace.type=exports;});canType_1_1_6_canType.check;canType_1_1_6_canType.convert;canType_1_1_6_canType.maybe;canType_1_1_6_canType.maybeConvert;canType_1_1_6_canType.Any;canType_1_1_6_canType.Integer;canType_1_1_6_canType.late;canType_1_1_6_canType.isTypeObject;canType_1_1_6_canType.normalize;canType_1_1_6_canType.all;canType_1_1_6_canType.convertAll;let define;//jshint ignore:line
const newSymbol$1=Symbol.for("can.new"),serializeSymbol=Symbol.for("can.serialize"),inSetupSymbol$2=Symbol.for("can.initializing"),isMemberSymbol$1=Symbol.for("can.isMember"),hasBeenDefinedSymbol=Symbol.for("can.hasBeenDefined"),canMetaSymbol=Symbol.for("can.meta"),baseTypeSymbol=Symbol.for("can.baseType");let eventsProto,make,makeDefinition,getDefinitionsAndMethods,getDefinitionOrMethod;// UTILITIES
function isDefineType(func){return func&&(func.canDefineType===true||func[newSymbol$1]);}function observableType(){throw new Error("This is not currently implemented.");}let AsyncFunction;const browserSupportsAsyncFunctions=function(){try{AsyncFunction=async function(){}.constructor;return true;}catch(e){return false;}}();function isAsyncFunction(fn){if(!browserSupportsAsyncFunctions){return false;}return fn&&fn instanceof AsyncFunction;}const peek$2=canObservationRecorder_1_3_1_canObservationRecorder.ignore(canReflect_1_19_2_canReflect.getValue.bind(canReflect_1_19_2_canReflect));let Object_defineNamedPrototypeProperty=Object.defineProperty;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object_defineNamedPrototypeProperty=function(obj,prop,definition){if(definition.get){Object.defineProperty(definition.get,"name",{value:"get "+canReflect_1_19_2_canReflect.getName(obj)+"."+prop,writable:true,configurable:true});}if(definition.set){Object.defineProperty(definition.set,"name",{value:"set "+canReflect_1_19_2_canReflect.getName(obj)+"."+prop,configurable:true});}return Object.defineProperty(obj,prop,definition);};}//!steal-remove-end
function defineConfigurableAndNotEnumerable(obj,prop,value){Object.defineProperty(obj,prop,{configurable:true,enumerable:false,writable:true,value:value});}function defineNotWritableAndNotEnumerable(obj,prop,value){Object.defineProperty(obj,prop,{value:value,enumerable:false,writable:false});}function eachPropertyDescriptor(map,cb,...args){for(const prop of Object.getOwnPropertyNames(map)){if(map.hasOwnProperty(prop)){cb.call(map,prop,Object.getOwnPropertyDescriptor(map,prop),...args);}}}function getEveryPropertyAndSymbol(obj){const props=Object.getOwnPropertyNames(obj);const symbols="getOwnPropertySymbols"in Object?Object.getOwnPropertySymbols(obj):[];return props.concat(symbols);}var define_1=define=function(typePrototype,defines,baseDefine,propertyDefaults={}){// default property definitions on _data
let prop,dataInitializers=Object.create(baseDefine?baseDefine.dataInitializers:null),// computed property definitions on _computed
computedInitializers=Object.create(baseDefine?baseDefine.computedInitializers:null),required=new Set();const result=getDefinitionsAndMethods(defines,baseDefine,typePrototype,propertyDefaults);result.dataInitializers=dataInitializers;result.computedInitializers=computedInitializers;result.required=required;// Goes through each property definition and creates
// a `getter` and `setter` function for `Object.defineProperty`.
canReflect_1_19_2_canReflect.eachKey(result.definitions,function(definition,property){// Add this as a required property
if(definition.required===true){required.add(property);}define.property(typePrototype,property,definition,dataInitializers,computedInitializers,result.defaultDefinition);});// Places a `_data` on the prototype that when first called replaces itself
// with a `_data` object local to the instance.  It also defines getters
// for any value that has a default value.
if(typePrototype.hasOwnProperty("_data")){for(prop in dataInitializers){canDefineLazyValue_1_1_1_defineLazyValue(typePrototype._data,prop,dataInitializers[prop].bind(typePrototype),true);}}else {canDefineLazyValue_1_1_1_defineLazyValue(typePrototype,"_data",function(){const map=this;const data={};for(const prop in dataInitializers){canDefineLazyValue_1_1_1_defineLazyValue(data,prop,dataInitializers[prop].bind(map),true);}return data;});}// Places a `_computed` on the prototype that when first called replaces itself
// with a `_computed` object local to the instance.  It also defines getters
// that will create the property's compute when read.
if(typePrototype.hasOwnProperty("_computed")){for(prop in computedInitializers){canDefineLazyValue_1_1_1_defineLazyValue(typePrototype._computed,prop,computedInitializers[prop].bind(typePrototype));}}else {canDefineLazyValue_1_1_1_defineLazyValue(typePrototype,"_computed",function(){const map=this;const data=Object.create(null);for(const prop in computedInitializers){canDefineLazyValue_1_1_1_defineLazyValue(data,prop,computedInitializers[prop].bind(map));}return data;});}// Add necessary event methods to this object.
getEveryPropertyAndSymbol(eventsProto).forEach(function(prop){Object.defineProperty(typePrototype,prop,{enumerable:false,value:eventsProto[prop],configurable:true,writable:true});});// also add any symbols
// add so instance defs can be dynamically added
Object.defineProperty(typePrototype,"_define",{enumerable:false,value:result,configurable:true,writable:true});// Places Symbol.iterator or @@iterator on the prototype
// so that this can be iterated with for/of and canReflect.eachIndex
const iteratorSymbol=Symbol.iterator||Symbol.for("iterator");if(!typePrototype[iteratorSymbol]){defineConfigurableAndNotEnumerable(typePrototype,iteratorSymbol,function(){return new define.Iterator(this);});}return result;};const onlyType=function(obj){for(const prop in obj){if(prop!=="type"){return false;}}return true;};const callAsync=function(fn){return function asyncResolver(lastSet,resolve){let newValue=fn.call(this,resolve,lastSet);// This should really be happening in can-simple-observable/async/
// But that would be a breaking change so putting it here.
if(canReflect_1_19_2_canReflect.isPromise(newValue)){newValue.then(resolve);return undefined;}return newValue;};};define.extensions=function(){};define.isEnumerable=function(definition){return typeof definition!=="object"||("serialize"in definition?!!definition.serialize:!definition.get&&!definition.async&&!definition.value);};// typePrototype - the prototype of the type we are defining `prop` on.
// `definition` - the user provided definition
define.property=function(typePrototype,prop,definition,dataInitializers,computedInitializers,defaultDefinition){const propertyDefinition=define.extensions.apply(this,arguments);if(propertyDefinition){definition=makeDefinition(prop,propertyDefinition,defaultDefinition||{},typePrototype);}const type=definition.type;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(!definition.set&&definition.get&&definition.get.length===0&&"default"in definition){dev.warn("can-observable-object: default value for property "+canReflect_1_19_2_canReflect.getName(typePrototype)+"."+prop+" ignored, as its definition has a zero-argument getter and no setter");}if(!definition.set&&definition.get&&definition.get.length===0&&definition.type&&definition.type!==defaultDefinition.type){dev.warn("can-observable-object: type value for property "+canReflect_1_19_2_canReflect.getName(typePrototype)+"."+prop+" ignored, as its definition has a zero-argument getter and no setter");}}for(let defFuncProp of ['get','set','value']){const propType=definition[defFuncProp]&&typeof definition[defFuncProp];if(propType&&propType!=='function'){dev.error(`can-observable-object: "${defFuncProp}" for property ${canReflect_1_19_2_canReflect.getName(typePrototype)}.${prop}`+` is expected to be a function, but it's a ${propType}.`);return;}}//!steal-remove-end
// Special case definitions that have only `type: "*"`.
if(type&&onlyType(definition)&&type===type.Any){Object_defineNamedPrototypeProperty(typePrototype,prop,{get:make.get.data(prop),set:make.set.events(prop,make.get.data(prop),make.set.data(prop),make.eventType.data(prop)),enumerable:true,configurable:true});return;}definition.type=type;// Where the value is stored.  If there is a `get` the source of the value
// will be a compute in `this._computed[prop]`.  If not, the source of the
// value will be in `this._data[prop]`.
let dataProperty=definition.get||definition.async||definition.value?"computed":"data",// simple functions that all read/get/set to the right place.
// - reader - reads the value but does not observe.
// - getter - reads the value and notifies observers.
// - setter - sets the value.
reader=make.read[dataProperty](prop),getter=make.get[dataProperty](prop),setter=make.set[dataProperty](prop),getInitialValue;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(definition.get){Object.defineProperty(definition.get,"name",{value:canReflect_1_19_2_canReflect.getName(typePrototype)+"'s "+prop+" getter",configurable:true});}if(definition.set){Object.defineProperty(definition.set,"name",{value:canReflect_1_19_2_canReflect.getName(typePrototype)+"'s "+prop+" setter",configurable:true});}if(definition.value){Object.defineProperty(definition.value,"name",{value:canReflect_1_19_2_canReflect.getName(typePrototype)+"'s "+prop+" value",configurable:true});}}//!steal-remove-end
// Determine the type converter
let typeConvert=function(val){return val;};if(type){typeConvert=make.set.type(prop,type,typeConvert);}// make a setter that's going to fire of events
const eventsSetter=make.set.events(prop,reader,setter,make.eventType[dataProperty](prop));if(definition.value){computedInitializers[prop]=make.resolver(prop,definition,typeConvert);}// Determine a function that will provide the initial property value.
else if(definition.default!==undefined){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){// If value is an object or array, give a warning
if(definition.default!==null&&typeof definition.default==='object'){dev.warn("can-observable-object: The default value for "+canReflect_1_19_2_canReflect.getName(typePrototype)+"."+prop+" is set to an object. This will be shared by all instances of the DefineMap. Use a function that returns the object instead.");}// If value is a constructor, give a warning
if(definition.default&&canReflect_1_19_2_canReflect.isConstructorLike(definition.default)){dev.warn("can-observable-object: The \"default\" for "+canReflect_1_19_2_canReflect.getName(typePrototype)+"."+prop+" is set to a constructor. Did you mean \"Default\" instead?");}}//!steal-remove-end
getInitialValue=canObservationRecorder_1_3_1_canObservationRecorder.ignore(make.get.defaultValue(prop,definition,typeConvert,eventsSetter));}// If property has a getter, create the compute that stores its data.
if(definition.get){computedInitializers[prop]=make.compute(prop,definition.get,getInitialValue);}else if(definition.async){computedInitializers[prop]=make.compute(prop,callAsync(definition.async),getInitialValue);}// If the property isn't a getter, but has an initial value, setup a
// default value on `this._data[prop]`.
else if(getInitialValue){dataInitializers[prop]=getInitialValue;}// Define setter behavior.
// If there's a `get` and `set`, make the setter get the `lastSetValue` on the
// `get`'s compute.
if(definition.get&&definition.set){// the compute will set off events, so we can use the basic setter
setter=make.set.setter(prop,definition.set,make.read.lastSet(prop),setter,true);}// If there's a `set` and no `get`,
else if(definition.set){// Add `set` functionality to the eventSetter.
setter=make.set.setter(prop,definition.set,reader,eventsSetter,false);}// If there's neither `set` or `get` or `value` (resolver)
else if(dataProperty==="data"){// make a set that produces events.
setter=eventsSetter;}// If there's zero-arg `get` but not `set`, warn on all sets in dev mode
else if(definition.get&&definition.get.length<1){setter=function(){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){dev.warn("can-observable-object: Set value for property "+canReflect_1_19_2_canReflect.getName(typePrototype)+"."+prop+" ignored, as its definition has a zero-argument getter and no setter");}//!steal-remove-end
};}// Add type behavior to the setter.
if(type){setter=make.set.type(prop,type,setter);}// Define the property.
Object_defineNamedPrototypeProperty(typePrototype,prop,{get:getter,set:setter,enumerable:define.isEnumerable(definition),configurable:true});};define.makeDefineInstanceKey=function(constructor){constructor[Symbol.for("can.defineInstanceKey")]=function(property,value){define.hooks.finalizeClass(this);const defineResult=this.prototype._define;if(value&&typeof value.value!=="undefined"){value.default=value.value;value.type=canType_1_1_6_canType.Any;delete value.value;}const definition=getDefinitionOrMethod(property,value,defineResult.defaultDefinition,this);if(definition&&typeof definition==="object"){define.property(this.prototype,property,definition,defineResult.dataInitializers,defineResult.computedInitializers,defineResult.defaultDefinition);defineResult.definitions[property]=definition;}else {defineResult.methods[property]=definition;}this.prototype.dispatch({action:"can.keys",type:"can.keys",target:this.prototype});};};// Makes a simple constructor function.
define.Constructor=function(defines,sealed){const constructor=function DefineConstructor(props){Object.defineProperty(this,inSetupSymbol$2,{configurable:true,enumerable:false,value:true,writable:true});define.setup.call(this,props,sealed);this[inSetupSymbol$2]=false;};const result=define(constructor.prototype,defines);type$1(constructor);define.makeDefineInstanceKey(constructor,result);return constructor;};// A bunch of helper functions that are used to create various behaviors.
make={computeObj:function(map,prop,observable){const computeObj={oldValue:undefined,compute:observable,count:0,handler:function(newVal){let oldValue=computeObj.oldValue;computeObj.oldValue=newVal;map.dispatch({action:"prop",key:prop,value:newVal,oldValue:oldValue,type:prop,target:map},[newVal,oldValue]);}};return computeObj;},resolver:function(prop,definition,typeConvert){const getDefault=make.get.defaultValue(prop,definition,typeConvert);return function(){const map=this;const defaultValue=getDefault.call(this);const computeObj=make.computeObj(map,prop,new resolver(definition.value,map,defaultValue,{resetUnboundValueInGet:true}));//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(computeObj.handler,"name",{value:canReflect_1_19_2_canReflect.getName(definition.value).replace('value','event emitter')});}//!steal-remove-end
return computeObj;};},// Returns a function that creates the `_computed` prop.
compute:function(prop,get,defaultValueFn){return function(){const map=this;const defaultValue=defaultValueFn&&defaultValueFn.call(this);let observable,computeObj;if(get.length===0){observable=new canObservation_4_2_0_canObservation(get,map);}else if(get.length===1){observable=new settable(get,map,defaultValue);}else {observable=new async(get,map,defaultValue);}computeObj=make.computeObj(map,prop,observable);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(computeObj.handler,"name",{value:canReflect_1_19_2_canReflect.getName(get).replace('getter','event emitter')});}//!steal-remove-end
return computeObj;};},// Set related helpers.
set:{data:function(prop){return function(newVal){this._data[prop]=newVal;};},computed:function(prop){return function(val){canReflect_1_19_2_canReflect.setValue(this._computed[prop].compute,val);};},events:function(prop,getCurrent,setData/*, eventType*/){return function(newVal){if(this[inSetupSymbol$2]){setData.call(this,newVal);}else {const current=getCurrent.call(this);if(newVal!==current){let dispatched;setData.call(this,newVal);dispatched={patches:[{type:"set",key:prop,value:newVal}],action:"prop",key:prop,value:newVal,oldValue:current,type:prop,target:this};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){dispatched.reasonLog=[canReflect_1_19_2_canReflect.getName(this)+"'s",prop,"changed to",newVal,"from",current];}//!steal-remove-end
this.dispatch(dispatched,[newVal,current]);}}};},eventDispatcher:function(map,prop,current,newVal){if(map[inSetupSymbol$2]){return;}else {if(newVal!==current){const dispatched={patches:[{type:"set",key:prop,value:newVal}],action:"prop",key:prop,value:newVal,oldValue:current,type:prop,target:map};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){dispatched.reasonLog=[canReflect_1_19_2_canReflect.getName(this)+"'s",prop,"changed to",newVal,"from",current];}//!steal-remove-end
map$1.dispatch.call(map,dispatched,[newVal,current]);}}},setter:function(prop,setter,getCurrent,setEvents,hasGetter){return function(value){//!steal-remove-start
const self=this;// call the setter, if returned value is undefined,
// this means the setter is async so we
// do not call update property and return right away
canQueues_1_3_2_canQueues.batch.start();const current=getCurrent.call(this),setValue=setter.call(this,value,current);{if(hasGetter){// we got a return value
if(setValue!==undefined){// if the current `set` value is returned, don't set
// because current might be the `lastSetVal` of the internal compute.
if(current!==setValue){setEvents.call(this,setValue);}canQueues_1_3_2_canQueues.batch.stop();}// this is a side effect, it didn't take a value
// so use the original set value
else if(setter.length===0){setEvents.call(this,value);canQueues_1_3_2_canQueues.batch.stop();return;}// it took a value
else if(setter.length===1){// if we have a getter, and undefined was returned,
// we should assume this is setting the getters properties
// and we shouldn't do anything.
canQueues_1_3_2_canQueues.batch.stop();}// we are expecting something
else {//!steal-remove-start
if(process.env.NODE_ENV!=='production'){setTimeout(function(){dev.warn('can-observable-object: Setter "'+canReflect_1_19_2_canReflect.getName(self)+"."+prop+'" did not return a value or call the setter callback.');},dev.warnTimeout);}//!steal-remove-end
canQueues_1_3_2_canQueues.batch.stop();return;}}else {// we got a return value
if(setValue!==undefined){// if the current `set` value is returned, don't set
// because current might be the `lastSetVal` of the internal compute.
setEvents.call(this,setValue);canQueues_1_3_2_canQueues.batch.stop();}// this is a side effect, it didn't take a value
// so use the original set value
else if(setter.length===0){setEvents.call(this,value);canQueues_1_3_2_canQueues.batch.stop();return;}// it took a value
else if(setter.length===1){// if we don't have a getter, we should probably be setting the
// value to undefined
setEvents.call(this,undefined);canQueues_1_3_2_canQueues.batch.stop();}// we are expecting something
else {//!steal-remove-start
if(process.env.NODE_ENV!=='production'){setTimeout(function(){dev.warn('can/map/setter.js: Setter "'+canReflect_1_19_2_canReflect.getName(self)+"."+prop+'" did not return a value or call the setter callback.');},dev.warnTimeout);}//!steal-remove-end
canQueues_1_3_2_canQueues.batch.stop();return;}}}};},type:function(prop,type,set){function setter(newValue){return set.call(this,type.call(this,newValue,prop));}if(isDefineType(type)){// TODO: remove this `canDefineType` check in a future release.
if(type.canDefineType){return setter;}else {return function setter(newValue){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){try{return set.call(this,canReflect_1_19_2_canReflect.convert(newValue,type));}catch(error){if(error.type==='can-type-error'){const typeName=canReflect_1_19_2_canReflect.getName(type[baseTypeSymbol]);const valueType=typeof newValue;let message='"'+newValue+'"'+' ('+valueType+') is not of type '+typeName+'. Property '+prop+' is using "type: '+typeName+'". ';message+='Use "'+prop+': type.convert('+typeName+')" to automatically convert values to '+typeName+'s when setting the "'+prop+'" property.';error.message=message;}throw error;}}//!steal-remove-end
return set.call(this,canReflect_1_19_2_canReflect.convert(newValue,type));};}}return setter;}},// Helpes that indicate what the event type should be.  These probably aren't needed.
eventType:{data:function(prop){return function(newVal,oldVal){return oldVal!==undefined||this._data.hasOwnProperty(prop)?"set":"add";};},computed:function(){return function(){return "set";};}},// Helpers that read the data in a non-observable way.
read:{data:function(prop){return function(){return this._data[prop];};},computed:function(prop){// might want to protect this
return function(){return canReflect_1_19_2_canReflect.getValue(this._computed[prop].compute);};},lastSet:function(prop){return function(){const observable=this._computed[prop].compute;if(observable.lastSetValue){return canReflect_1_19_2_canReflect.getValue(observable.lastSetValue);}};}},// Helpers that read the data in an observable way.
get:{// uses the default value
defaultValue:function(prop,definition,typeConvert,callSetter){return function(){let value=definition.default;if(value!==undefined){// call `get default() { ... }` but not `default() { ... }`
if(typeof value==="function"&&value.isAGetter){value=value.call(this);}value=typeConvert.call(this,value);}if(definition.set){// TODO: there's almost certainly a faster way of making this happen
// But this is maintainable.
let VALUE;let sync=true;const setter=make.set.setter(prop,definition.set,function(){},function(value){if(sync){VALUE=value;}else {callSetter.call(this,value);}},definition.get);setter.call(this,value);sync=false;// VALUE will be undefined if the callback is never called.
return VALUE;}return value;};},data:function(prop){return function(){if(!this[inSetupSymbol$2]){canObservationRecorder_1_3_1_canObservationRecorder.add(this,prop);}return this._data[prop];};},computed:function(prop){return function/*val*/(){const compute=this._computed[prop].compute;if(canObservationRecorder_1_3_1_canObservationRecorder.isRecording()){canObservationRecorder_1_3_1_canObservationRecorder.add(this,prop);if(!canReflect_1_19_2_canReflect.isBound(compute)){canObservation_4_2_0_canObservation.temporarilyBind(compute);}}return peek$2(compute);};}}};define.behaviors=["get","set","value","type","serialize"];// This cleans up a particular behavior and adds it to the definition
const addBehaviorToDefinition=function(definition,behavior,descriptor,def,prop,typePrototype){if(behavior==="enumerable"){// treat enumerable like serialize
definition.serialize=!!def[behavior];}else if(behavior==="type"){const behaviorDef=def[behavior];if(typeof behaviorDef!=='undefined'){definition[behavior]=behaviorDef;}}else {// This is a good place to do warnings? This gets called for every behavior
// Both by .define() and .property()
const value=descriptor.get||descriptor.value;if(descriptor.get){value.isAGetter=true;}if(behavior==="async"){if(value.length===1&&isAsyncFunction(value)){dev.warn(`${canReflect_1_19_2_canReflect.getName(typePrototype)}: async property [${prop}] should not be an async function and also use the resolve() argument. Remove the argument and return a value from the async function instead.`);}}definition[behavior]=value;}};// This is called by `define.property` AND `getDefinitionOrMethod` (which is called by `define`)
// Currently, this is adding default behavior
// copying `type` over, and even cleaning up the final definition object
makeDefinition=function(prop,def,defaultDefinition,typePrototype){let definition={};eachPropertyDescriptor(def,function(behavior,descriptor){addBehaviorToDefinition(definition,behavior,descriptor,def,prop,typePrototype);});// only add default if it doesn't exist
canReflect_1_19_2_canReflect.eachKey(defaultDefinition,function(value,prop){if(definition[prop]===undefined){if(prop!=="type"){definition[prop]=value;}}});if(def.type){const value=def.type;const serialize=value[serializeSymbol];if(serialize){definition.serialize=function(val){return serialize.call(val);};}definition.type=canType_1_1_6_canType.normalize(value);}const noTypeDefined=!definition.type&&(!defaultDefinition.type||defaultDefinition.type&&defaultDefinition.typeSetByDefault);if(definition.hasOwnProperty("default")){if(typeof definition.default==="function"&&!definition.default.isAGetter&&noTypeDefined){definition.type=canType_1_1_6_canType.normalize(Function);}if(canReflect_1_19_2_canReflect.isPrimitive(definition.default)&&noTypeDefined){if(definition.default===null||typeof definition.default==='undefined'){definition.type=canType_1_1_6_canType.Any;}else {definition.type=canType_1_1_6_canType.normalize(definition.default.constructor);}}}// if there's no type definition, take it from the defaultDefinition
if(!definition.type){const defaultsCopy=canReflect_1_19_2_canReflect.assignMap({},defaultDefinition);definition=canReflect_1_19_2_canReflect.assignMap(defaultsCopy,definition);}if(canReflect_1_19_2_canReflect.size(definition)===0){definition.type=canType_1_1_6_canType.Any;// `setByDefault` indicates that the default type can be
// overridden by an inferred type
definition.typeSetByDefault=true;}return definition;};// called by `can.defineInstanceKey` and `getDefinitionsAndMethods`
// returns the value or the definition object.
// calls makeDefinition
// This is dealing with a string value
getDefinitionOrMethod=function(prop,value,defaultDefinition,typePrototype){// Clean up the value to make it a definition-like object
let definition;let definitionType;if(canReflect_1_19_2_canReflect.isPrimitive(value)){if(value===null||typeof value==='undefined'){definitionType=canType_1_1_6_canType.Any;}else {// only include type from defaultDefininition
// if it came from propertyDefaults
definitionType=defaultDefinition.typeSetByDefault?canType_1_1_6_canType.normalize(value.constructor):defaultDefinition.type;}definition={default:value,type:definitionType};}// copies a `Type`'s methods over
else if(value&&(value[serializeSymbol]||value[newSymbol$1])){if(value[isMemberSymbol$1]){definition={type:value};}else {definition={type:canType_1_1_6_canType.normalize(value)};}}else if(typeof value==="function"){if(canReflect_1_19_2_canReflect.isConstructorLike(value)){definition={type:canType_1_1_6_canType.normalize(value)};}else {definition={default:value,type:Function};}}else if(Array.isArray(value)){definition={type:canType_1_1_6_canType.normalize(Array)};}else if(canReflect_1_19_2_canReflect.isPlainObject(value)){definition=value;}if(definition){return makeDefinition(prop,definition,defaultDefinition,typePrototype);}else {return value;}};// called by can.define
getDefinitionsAndMethods=function(defines,baseDefines,typePrototype,propertyDefaults){// make it so the definitions include base definitions on the proto
const definitions=Object.create(baseDefines?baseDefines.definitions:null);let methods={};// first lets get a default if it exists
let defaultDefinition;if(propertyDefaults){defaultDefinition=getDefinitionOrMethod("*",propertyDefaults,{},typePrototype);}else {defaultDefinition=Object.create(null);}function addDefinition(prop,propertyDescriptor,skipGetDefinitionForMethods){let value;if(propertyDescriptor.get||propertyDescriptor.set){value={get:propertyDescriptor.get,set:propertyDescriptor.set};}else {value=propertyDescriptor.value;}if(prop==="constructor"||skipGetDefinitionForMethods&&typeof value==="function"){methods[prop]=value;return;}else {const result=getDefinitionOrMethod(prop,value,defaultDefinition,typePrototype);const resultType=typeof result;if(result&&resultType==="object"&&canReflect_1_19_2_canReflect.size(result)>0){definitions[prop]=result;}else {// Removed adding raw values that are not functions
if(resultType==="function"){methods[prop]=result;}//!steal-remove-start
else if(resultType!=='undefined'){if(process.env.NODE_ENV!=='production'){// Ex: {prop: 0}
dev.error(canReflect_1_19_2_canReflect.getName(typePrototype)+"."+prop+" does not match a supported definitionObject. See: https://canjs.com/doc/can-observable-object/object.types.definitionObject.html");}}//!steal-remove-end
}}}eachPropertyDescriptor(typePrototype,addDefinition,true);eachPropertyDescriptor(defines,addDefinition);if(propertyDefaults){// we should move this property off the prototype.
defineConfigurableAndNotEnumerable(defines,"*",propertyDefaults);}return {definitions:definitions,methods:methods,defaultDefinition:defaultDefinition};};eventsProto=map$1({});function setupComputed(instance,eventName){const computedBinding=instance._computed&&instance._computed[eventName];if(computedBinding&&computedBinding.compute){if(!computedBinding.count){computedBinding.count=1;canReflect_1_19_2_canReflect.onValue(computedBinding.compute,computedBinding.handler,"notify");computedBinding.oldValue=peek$2(computedBinding.compute);}else {computedBinding.count++;}}}function teardownComputed(instance,eventName){const computedBinding=instance._computed&&instance._computed[eventName];if(computedBinding){if(computedBinding.count===1){computedBinding.count=0;canReflect_1_19_2_canReflect.offValue(computedBinding.compute,computedBinding.handler,"notify");}else {computedBinding.count--;}}}canAssign_1_3_3_canAssign(eventsProto,{_eventSetup:function(){},_eventTeardown:function(){},addEventListener:function(eventName/*, handler, queue*/){setupComputed(this,eventName);return map$1.addEventListener.apply(this,arguments);},// ### unbind
// Stops listening to an event.
// If this is the last listener of a computed property,
// stop forwarding events of the computed property to this map.
removeEventListener:function(eventName/*, handler*/){teardownComputed(this,eventName);return map$1.removeEventListener.apply(this,arguments);}});eventsProto.on=eventsProto.bind=eventsProto.addEventListener;eventsProto.off=eventsProto.unbind=eventsProto.removeEventListener;const onKeyValueSymbol$2=Symbol.for("can.onKeyValue");const offKeyValueSymbol$1=Symbol.for("can.offKeyValue");canReflect_1_19_2_canReflect.assignSymbols(eventsProto,{"can.onKeyValue":function(key){setupComputed(this,key);return map$1[onKeyValueSymbol$2].apply(this,arguments);},"can.offKeyValue":function(key){teardownComputed(this,key);return map$1[offKeyValueSymbol$1].apply(this,arguments);}});delete eventsProto.one;define.finalizeInstance=function(){defineNotWritableAndNotEnumerable(this,"constructor",this.constructor);defineNotWritableAndNotEnumerable(this,canMetaSymbol,Object.create(null));};define.setup=function(props,sealed){const requiredButNotProvided=new Set(this._define.required);const definitions=this._define.definitions;const instanceDefinitions=Object.create(null);const map=this;canReflect_1_19_2_canReflect.eachKey(props,function(value,prop){if(requiredButNotProvided.has(prop)){requiredButNotProvided.delete(prop);}if(definitions[prop]!==undefined){map[prop]=value;}else {if(sealed){throw new Error(`The type ${canReflect_1_19_2_canReflect.getName(map.constructor)} is sealed, but the property [${prop}] has no definition.`);}define.expando(map,prop,value);}});if(canReflect_1_19_2_canReflect.size(instanceDefinitions)>0){defineConfigurableAndNotEnumerable(this,"_instanceDefinitions",instanceDefinitions);}if(requiredButNotProvided.size){let msg;const missingProps=Array.from(requiredButNotProvided);let thisName=canReflect_1_19_2_canReflect.getName(this);if(requiredButNotProvided.size===1){msg=`${thisName}: Missing required property [${missingProps[0]}].`;}else {msg=`${thisName}: Missing required properties [${missingProps.join(", ")}].`;}throw new Error(msg);}};const returnFirstArg=function(arg){return arg;};// TODO Why is this exported, does it need to be?
define.normalizeTypeDefinition=canType_1_1_6_canType.normalize;define.expando=function(map,prop,value){if(define._specialKeys[prop]){// ignores _data and _computed
return true;}// first check if it's already a constructor define
const constructorDefines=map._define.definitions;if(constructorDefines&&constructorDefines[prop]){return;}// next if it's already on this instances
let instanceDefines=map._instanceDefinitions;if(!instanceDefines){if(Object.isSealed(map)){let errorMessage=`Cannot set property [${prop}] on sealed instance of ${canReflect_1_19_2_canReflect.getName(map)}`;throw new Error(errorMessage);}Object.defineProperty(map,"_instanceDefinitions",{configurable:true,enumerable:false,writable:true,value:{}});instanceDefines=map._instanceDefinitions;}if(!instanceDefines[prop]){const defaultDefinition=map._define.defaultDefinition||{type:observableType};define.property(map,prop,defaultDefinition,{},{});// possibly convert value to List or DefineMap
if(defaultDefinition.type){map._data[prop]=define.make.set.type(prop,defaultDefinition.type,returnFirstArg).call(map,value);}else {map._data[prop]=observableType();}instanceDefines[prop]=defaultDefinition;if(!map[inSetupSymbol$2]){canQueues_1_3_2_canQueues.batch.start();map.dispatch({action:"can.keys",type:"can.keys",target:map});if(Object.prototype.hasOwnProperty.call(map._data,prop)){map.dispatch({action:"add",key:prop,type:prop,value:map._data[prop],target:map,patches:[{type:"add",key:prop,value:map._data[prop]}]},[map._data[prop],undefined]);}else {map.dispatch({action:"set",type:"set",value:map._data[prop],target:map,patches:[{type:"add",key:prop,value:map._data[prop]}]},[map._data[prop],undefined]);}canQueues_1_3_2_canQueues.batch.stop();}return true;}};define.replaceWith=canDefineLazyValue_1_1_1_defineLazyValue;define.eventsProto=eventsProto;define.defineConfigurableAndNotEnumerable=defineConfigurableAndNotEnumerable;define.make=make;define.getDefinitionOrMethod=getDefinitionOrMethod;define._specialKeys={_data:true,_computed:true};let simpleGetterSetters={};define.makeSimpleGetterSetter=function(prop){if(simpleGetterSetters[prop]===undefined){const setter=make.set.events(prop,make.get.data(prop),make.set.data(prop),make.eventType.data(prop));simpleGetterSetters[prop]={get:make.get.data(prop),set:function(newVal){return setter.call(this,observableType());},enumerable:true,configurable:true};}return simpleGetterSetters[prop];};define.Iterator=function(obj){this.obj=obj;this.definitions=Object.keys(obj._define.definitions);this.instanceDefinitions=obj._instanceDefinitions?Object.keys(obj._instanceDefinitions):Object.keys(obj);this.hasGet=typeof obj.get==="function";};define.Iterator.prototype.next=function(){let key;if(this.definitions.length){key=this.definitions.shift();// Getters should not be enumerable
const def=this.obj._define.definitions[key];if(def.get){return this.next();}}else if(this.instanceDefinitions.length){key=this.instanceDefinitions.shift();}else {return {value:undefined,done:true};}return {value:[key,this.hasGet?this.obj.get(key):this.obj[key]],done:false};};define.updateSchemaKeys=function(schema,definitions){for(const prop in definitions){const definition=definitions[prop];if(definition.serialize!==false){if(definition.type){schema.keys[prop]=definition.type;}else {schema.keys[prop]=function(val){return val;};}// some unknown type
if(definitions[prop].identity===true){schema.identity.push(prop);}}}return schema;};define.hooks={finalizeClass:function(Type){let hasBeenDefined=Type.hasOwnProperty(hasBeenDefinedSymbol);if(!hasBeenDefined){let prototypeObject=Type.prototype;// check for `static props = {}`
// fall back to `static define = {}` if `props` doesn't exist
let defines=typeof Type.props==="object"?Type.props:typeof Type.define==="object"?Type.define:{};define(prototypeObject,defines,null,Type.propertyDefaults);Type[hasBeenDefinedSymbol]=true;}},initialize:function(instance,props){const firstInitialize=!instance.hasOwnProperty(canMetaSymbol);const sealed=instance.constructor.seal;if(firstInitialize){define.finalizeInstance.call(instance);}if(!instance[canMetaSymbol].initialized){defineConfigurableAndNotEnumerable(instance,inSetupSymbol$2,true);define.setup.call(instance,props,sealed);// set inSetup to false so events can be dispatched
instance[inSetupSymbol$2]=false;// set instance as initialized so this is only called once
instance[canMetaSymbol].initialized=true;}// only seal in dev mode for performance reasons.
//!steal-remove-start
if(process.env.NODE_ENV!=='production'){// only seal the first time initialize is called
// even if meta.initialized is reset to false
if(firstInitialize){/* jshint -W030 */instance._data;instance._computed;if(sealed===true){Object.seal(instance);}}}//!steal-remove-end
},expando:define.expando,normalizeTypeDefinition:canType_1_1_6_canType.normalize//define.normalizeTypeDefinition
};// Ensure the "obj" passed as an argument has an object on @@can.meta
var ensureMeta$3=function ensureMeta(obj){const metaSymbol=Symbol.for("can.meta");let meta=obj[metaSymbol];if(!meta){meta={};canReflect_1_19_2_canReflect.setKeyValue(obj,metaSymbol,meta);}return meta;};/*jshint -W079 */const defineHelpers={// returns `true` if the value was defined and set
defineExpando:define_1.expando,reflectSerialize:function(unwrapped){const constructorDefinitions=this._define.definitions;const defaultDefinition=this._define.defaultDefinition;this.forEach(function(val,name){const propDef=constructorDefinitions[name];if(propDef&&typeof propDef.serialize==="function"){val=propDef.serialize.call(this,val,name);}else if(defaultDefinition&&typeof defaultDefinition.serialize==="function"){val=defaultDefinition.serialize.call(this,val,name);}else {val=canReflect_1_19_2_canReflect.serialize(val);}if(val!==undefined){unwrapped[name]=val;}},this);return unwrapped;},reflectUnwrap:function(unwrapped){this.forEach(function(value,key){if(value!==undefined){unwrapped[key]=canReflect_1_19_2_canReflect.unwrap(value);}});return unwrapped;},log:function(key){const instance=this;const quoteString=function quoteString(x){return typeof x==="string"?JSON.stringify(x):x;};const meta=ensureMeta$3(instance);const allowed=meta.allowedLogKeysSet||new Set();meta.allowedLogKeysSet=allowed;if(key){allowed.add(key);}meta._log=function(event,data){const type=event.type;if(type==="can.onPatches"||key&&!allowed.has(type)||type==="can.keys"||key&&!allowed.has(type)){return;}if(type==="add"||type==="remove"){dev.log(canReflect_1_19_2_canReflect.getName(instance),"\n how   ",quoteString(type),"\n what  ",quoteString(data[0]),"\n index ",quoteString(data[1]));}else {// log `length` and `propertyName` events
dev.log(canReflect_1_19_2_canReflect.getName(instance),"\n key ",quoteString(type),"\n is  ",quoteString(data[0]),"\n was ",quoteString(data[1]));}};},deleteKey:function(prop){const instanceDefines=this._instanceDefinitions;if(instanceDefines&&Object.prototype.hasOwnProperty.call(instanceDefines,prop)&&!Object.isSealed(this)){delete instanceDefines[prop];delete this[prop];canQueues_1_3_2_canQueues.batch.start();this.dispatch({action:"can.keys",type:"can.keys",target:this});const oldValue=this._data[prop];if(oldValue!==undefined){delete this._data[prop];//delete this[prop];
this.dispatch({action:"delete",key:prop,oldValue:oldValue,type:prop,target:this,patches:[{type:"delete",key:prop}]},[undefined,oldValue]);}canQueues_1_3_2_canQueues.batch.stop();}else {this.set(prop,undefined);}return this;}};var defineHelpers_1=defineHelpers;const{updateSchemaKeys,hooks,isEnumerable}=define_1;const getSchemaSymbol$1=Symbol.for("can.getSchema");function keysForDefinition(definitions){const keys=[];for(let prop in definitions){if(isEnumerable(definitions[prop])){keys.push(prop);}}return keys;}function assign$1(source){canQueues_1_3_2_canQueues.batch.start();canReflect_1_19_2_canReflect.assignMap(this,source||{});canQueues_1_3_2_canQueues.batch.stop();}function update(source){canQueues_1_3_2_canQueues.batch.start();if(canReflect_1_19_2_canReflect.isListLike(source)){canReflect_1_19_2_canReflect.updateList(this,source);}else {canReflect_1_19_2_canReflect.updateMap(this,source||{});}canQueues_1_3_2_canQueues.batch.stop();}function assignDeep(source){canQueues_1_3_2_canQueues.batch.start();// TODO: we should probably just throw an error instead of cleaning
canReflect_1_19_2_canReflect.assignDeepMap(this,source||{});canQueues_1_3_2_canQueues.batch.stop();}function updateDeep(source){canQueues_1_3_2_canQueues.batch.start();if(canReflect_1_19_2_canReflect.isListLike(source)){canReflect_1_19_2_canReflect.updateDeepList(this,source);}else {// TODO: we should probably just throw an error instead of cleaning
canReflect_1_19_2_canReflect.updateDeepMap(this,source||{});}canQueues_1_3_2_canQueues.batch.stop();}function setKeyValue(key,value){const defined=defineHelpers_1.defineExpando(this,key,value);if(!defined){this[key]=value;}}function getKeyValue(key){const value=this[key];if(value!==undefined||key in this||Object.isSealed(this)){return value;}else {canObservationRecorder_1_3_1_canObservationRecorder.add(this,key);return this[key];}}var mixinMapprops=function(Type){return class extends Type{static[getSchemaSymbol$1](){hooks.finalizeClass(this);let def=this.prototype._define;let definitions=def?def.definitions:{};let schema={type:"map",identity:[],keys:{}};return updateSchemaKeys(schema,definitions);}get(prop){if(prop){return getKeyValue.call(this,prop);}else {return canReflect_1_19_2_canReflect.unwrap(this,Map);}}set(prop,value){if(typeof prop==="object"){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){dev.warn('can-define/map/map.prototype.set is deprecated; please use can-define/map/map.prototype.assign or can-define/map/map.prototype.update instead');}//!steal-remove-end
if(value===true){updateDeep.call(this,prop);}else {assignDeep.call(this,prop);}}else {setKeyValue.call(this,prop,value);}return this;}assignDeep(prop){assignDeep.call(this,prop);return this;}updateDeep(prop){updateDeep.call(this,prop);return this;}assign(prop){assign$1.call(this,prop);return this;}update(prop){update.call(this,prop);return this;}serialize(){return canReflect_1_19_2_canReflect.serialize(this,Map);}deleteKey(){return defineHelpers_1.deleteKey.apply(this,arguments);}forEach(cb,thisarg,observe){function forEach(list,cb,thisarg){return canReflect_1_19_2_canReflect.eachKey(list,cb,thisarg);}if(observe===false){canObservationRecorder_1_3_1_canObservationRecorder.ignore(forEach)(this,cb,thisarg);}else {return forEach(this,cb,thisarg);}}static[Symbol.for("can.new")](...args){return new this(...args);}get[Symbol.for("can.isMapLike")](){return true;}get[Symbol.for("can.isListLike")](){return false;}get[Symbol.for("can.isValueLike")](){return false;}[Symbol.for("can.getKeyValue")](...args){return getKeyValue.apply(this,args);}[Symbol.for("can.deleteKeyValue")](...args){return defineHelpers_1.deleteKey.call(this,...args);}[Symbol.for("can.getOwnKeys")](){const keys=canReflect_1_19_2_canReflect.getOwnEnumerableKeys(this);if(this._computed){const computedKeys=canReflect_1_19_2_canReflect.getOwnKeys(this._computed);let key;for(let i=0;i<computedKeys.length;i++){key=computedKeys[i];if(keys.indexOf(key)<0){keys.push(key);}}}return keys;}[Symbol.for("can.getOwnEnumerableKeys")](){canObservationRecorder_1_3_1_canObservationRecorder.add(this,'can.keys');canObservationRecorder_1_3_1_canObservationRecorder.add(Object.getPrototypeOf(this),'can.keys');return keysForDefinition(this._define.definitions).concat(keysForDefinition(this._instanceDefinitions));}[Symbol.for("can.serialize")](...args){return defineHelpers_1.reflectSerialize.apply(this,args);}[Symbol.for("can.unwrap")](...args){return defineHelpers_1.reflectUnwrap.apply(this,args);}[Symbol.for("can.hasKey")](key){return key in this._define.definitions||this._instanceDefinitions!==undefined&&key in this._instanceDefinitions;}[Symbol.for("can.updateDeep")](...args){return this.updateDeep(...args);}};};const eventDispatcher=define_1.make.set.eventDispatcher;const inSetupSymbol$3=canSymbol_1_7_0_canSymbol.for("can.initializing");// A bug in Safari means that __proto__ key is sent. This causes problems
// When addEventListener is called on a non-element.
// https://github.com/tc39/test262/pull/2203
let isProtoReadOnSuper=false;(function(){if(typeof Proxy==="function"){let par=class{fn(){}};let base=new Proxy(par,{get(t,k,r){if(k==="__proto__"){isProtoReadOnSuper=true;}return Reflect.get(t,k,r);}});let chi=class extends base{fn(){super.fn();}};new chi().fn();}})();let wasLogged=false;function logNotSupported(){if(!wasLogged&&typeof Proxy!=="function"){wasLogged=true;dev.warn("can-observable-mixin/mixin-proxy requires ES Proxies which are not supported by your JS runtime.");}}function proxyPrototype(Base){const instances=new WeakSet();function LateDefined(){//!steal-remove-start
if(process.env.NODE_ENV!=="production"){logNotSupported();}//!steal-remove-end
let inst=Reflect.construct(Base,arguments,this.constructor);instances.add(inst);return inst;}LateDefined.instances=instances;const underlyingPrototypeObject=Object.create(Base.prototype);const getHandler=isProtoReadOnSuper?function(target,key,receiver){if(!this[inSetupSymbol$3]&&typeof key!=="symbol"&&key!=="__proto__"){canObservationRecorder_1_3_1_canObservationRecorder.add(receiver,key);}return Reflect.get(target,key,receiver);}:function(target,key,receiver){if(!this[inSetupSymbol$3]&&typeof key!=="symbol"){canObservationRecorder_1_3_1_canObservationRecorder.add(receiver,key);}return Reflect.get(target,key,receiver);};const proxyHandlers={get:getHandler,set(target,key,value,receiver){// Symbols are not observable, so just set the value
if(typeof key==="symbol"){Reflect.set(target,key,value,receiver);return true;}// We decided to punt on making the prototype observable, so anything
// set on a prototype just gets set.
if(key in target||!instances.has(receiver)){let current=Reflect.get(target,key,receiver);Reflect.set(target,key,value,receiver);eventDispatcher(receiver,key,current,value);}else {define_1.expando(receiver,key,value);}return true;}};LateDefined.prototype=typeof Proxy==="function"?new Proxy(underlyingPrototypeObject,proxyHandlers):underlyingPrototypeObject;return LateDefined;}var mixinProxy=proxyPrototype;function mixinTypeEvents(Type){let Child=class extends Type{};type$1(Child);map$1(Child);return Child;}var mixinTypeevents=mixinTypeEvents;const{hooks:hooks$1,makeDefineInstanceKey}=define_1;const constructorPropsSymbol=Symbol.for("can.constructorProps");const renderedSymbol=Symbol.for("can.rendered");var mixinElement=function mixinElement(BaseElement){let Element=class extends mixinProxy(BaseElement){constructor(props){super();hooks$1.finalizeClass(this.constructor);this[constructorPropsSymbol]=props;}initialize(props){if(super.initialize){super.initialize(props);}hooks$1.initialize(this,props||this[constructorPropsSymbol]);}render(props){if(super.render){super.render(props);}hooks$1.initialize(this,props||this[constructorPropsSymbol]);this[renderedSymbol]=true;}connectedCallback(){if(super.connectedCallback){super.connectedCallback();}if(!this[renderedSymbol]){this.render();}}};Element=mixinTypeevents(mixinMapprops(Element));makeDefineInstanceKey(Element);return Element;};var createConstructorFunction_1$1=createConstructorFunction_1;var makeDefineInstanceKey$1=define_1.makeDefineInstanceKey;var mixins_1=define_1.hooks;var mixinElement_1=mixinElement;var mixinMapProps_1=mixinMapprops;var mixinProxy_1=mixinProxy;var mixinTypeEvents_1=mixinTypeevents;var mixins={createConstructorFunction:createConstructorFunction_1$1,makeDefineInstanceKey:makeDefineInstanceKey$1,mixins:mixins_1,mixinElement:mixinElement_1,mixinMapProps:mixinMapProps_1,mixinProxy:mixinProxy_1,mixinTypeEvents:mixinTypeEvents_1};const{createConstructorFunction:createConstructorFunction$1,makeDefineInstanceKey:makeDefineInstanceKey$2,mixins:mixins$1,mixinMapProps,mixinProxy:mixinProxy$1,mixinTypeEvents:mixinTypeEvents$1}=mixins;let ObservableObject=class extends mixinProxy$1(Object){constructor(props){super();mixins$1.finalizeClass(this.constructor);mixins$1.initialize(this,props);// Define class fields observables 
//and return the proxy
const proxiedInstance=new Proxy(this,{defineProperty(target,prop,descriptor){const props=target.constructor.props;let value=descriptor.value;// do not create expando properties for special keys set by can-observable-mixin
const specialKeys=['_instanceDefinitions','_data','_computed'];if(specialKeys.indexOf(prop)>=0){return Reflect.defineProperty(target,prop,descriptor);}if(value){// do not create expando properties for properties that are described
// by `static props` or `static propertyDefaults`
if(props&&props[prop]||target.constructor.propertyDefaults){target.set(prop,value);return true;}// create expandos to make all other properties observable
return mixins$1.expando(target,prop,value);}// Prevent dispatching more than one event with canReflect.setKeyValue
return Reflect.defineProperty(target,prop,descriptor);}});// Adding the instance to observable-mixin 
// prevents additional event dispatching 
// https://github.com/canjs/can-observable-object/issues/35
this.constructor.instances.add(proxiedInstance);return proxiedInstance;}};ObservableObject=mixinTypeEvents$1(mixinMapProps(ObservableObject));makeDefineInstanceKey$2(ObservableObject);// Export a constructor function to workaround an issue where ES2015 classes
// cannot be extended in code that's transpiled by Babel.
var canObservableObject=canNamespace_1_0_0_canNamespace.ObservableObject=createConstructorFunction$1(ObservableObject);const{mixins:mixins$2}=mixins;const metaSymbol$3=Symbol.for("can.meta");const helpers$1={assignNonEnumerable:function(obj,key,value){return Object.defineProperty(obj,key,{enumerable:false,writable:true,configurable:true,value:value});},shouldRecordObservationOnAllKeysExceptFunctionsOnProto:function(keyInfo,meta){return meta.preventSideEffects===0&&!keyInfo.isAccessor&&(// it's on us
// it's on our proto, but not a function
keyInfo.targetHasOwnKey||// it's "missing", and we are not sealed
!keyInfo.protoHasKey&&!Object.isSealed(meta.target)||keyInfo.protoHasKey&&typeof targetValue!=="function");},/*
	 * dispatch an event when an index changes
	 */dispatchIndexEvent:function(attr,how,newVal,oldVal){var index=+attr;// Make sure this is not nested and not an expando
if(!isNaN(index)){var itemsDefinition=this._define.definitions["#"];if(how==='set'){this.dispatch({type:index,action:how,key:index,value:newVal,oldValue:oldVal},[newVal,oldVal]);// if event is being set through an ObservableArray.prototype method,
// do not dispatch length or patch events.
// This will be handled by ObservableArray.prototype method.
let meta=this[metaSymbol$3];if(!("preventSideEffects"in meta)||meta.preventSideEffects===0){let patches=[{index:index,deleteCount:1,insert:[newVal],type:"splice"}];helpers$1.dispatchLengthPatch.call(this,how,patches,this.length,this.length);}}else if(how==='add'){if(itemsDefinition&&typeof itemsDefinition.added==='function'){canObservationRecorder_1_3_1_canObservationRecorder.ignore(itemsDefinition.added).call(this,newVal,index);}this.dispatch({type:index,action:how,key:index,value:newVal,oldValue:oldVal},[newVal,oldVal]);// if event is being set through an ObservableArray.prototype method,
// do not dispatch length or patch events.
// This will be handled by ObservableArray.prototype method.
let meta=this[metaSymbol$3];if(!("preventSideEffects"in meta)||meta.preventSideEffects===0){let patches=[{index:index,deleteCount:0,insert:[newVal],type:"splice"}];helpers$1.dispatchLengthPatch.call(this,how,patches,this.length,this.length-1);}}else if(how==='remove'){if(itemsDefinition&&typeof itemsDefinition.removed==='function'){canObservationRecorder_1_3_1_canObservationRecorder.ignore(itemsDefinition.removed).call(this,oldVal,index);}}}else {var key=""+attr;this.dispatch({type:key,key:key,action:how,value:newVal,oldValue:oldVal,target:this},[newVal,oldVal]);}},/*
	 * Dispatch a `type: "splice"` patch and a `length` event
	 */dispatchLengthPatch:function(how,patches,newLength,oldLength){const dispatchArgs={type:"length",key:"length",action:how,value:newLength,oldValue:oldLength,patches:patches};//!steal-remove-start
if(process.env.NODE_ENV!=="production"){dispatchArgs.reasonLog=[canReflect_1_19_2_canReflect.getName(this)+"."+how+" called with",arguments];}//!steal-remove-end
map$1.dispatch.call(this,dispatchArgs,[newLength,oldLength]);},convertItem:function(Constructor,item){if(Constructor.items){const definition=mixins$2.normalizeTypeDefinition(Constructor.items.type||Constructor.items);return canReflect_1_19_2_canReflect.convert(item,definition);}return item;},convertItems:function(Constructor,items){if(items.length){if(Constructor.items){for(let i=0,len=items.length;i<len;i++){items[i]=helpers$1.convertItem(Constructor,items[i]);}}}return items;}};var helpers_1$1=helpers$1;var canMeta=Symbol.for("can.meta");const computedPropertyDefinitionSymbol=Symbol.for("can.computedPropertyDefinitions");const onKeyValueSymbol$3=Symbol.for("can.onKeyValue");const offKeyValueSymbol$2=Symbol.for("can.offKeyValue");// ## ComputedObjectObservationData
// Instances of this are created to wrap the observation.
// The `.bind` and `.unbind` methods should be called when the
// instance's prop is bound or unbound.
function ComputedObjectObservationData(instance,prop,observation){this.instance=instance;this.prop=prop;this.observation=observation;this.forward=this.forward.bind(this);}ComputedObjectObservationData.prototype.bind=function(){this.bindingCount++;if(this.bindingCount===1){this.observation.on(this.forward,"notify");}};ComputedObjectObservationData.prototype.unbind=function(){this.bindingCount--;if(this.bindingCount===0){this.observation.off(this.forward,"notify");}};ComputedObjectObservationData.prototype.forward=function(newValue,oldValue){map$1.dispatch.call(this.instance,{type:this.prop,key:this.prop,target:this.instance,value:newValue,oldValue:oldValue// patches: [{
// 	key: this.prop,
// 	type: "set",
// 	value: newValue
// }]
// keyChanged: undefined
},[newValue,oldValue]);};ComputedObjectObservationData.prototype.bindingCount=0;function findComputed(instance,key){var meta=instance[canMeta];var target=meta.target;var computedPropertyDefinitions=target[computedPropertyDefinitionSymbol];if(computedPropertyDefinitions===undefined){return;}var computedPropertyDefinition=computedPropertyDefinitions[key];if(computedPropertyDefinition===undefined){return;}if(meta.computedKeys[key]===undefined){meta.computedKeys[key]=new ComputedObjectObservationData(instance,key,computedPropertyDefinition(instance,key));}return meta.computedKeys[key];}const computedHelpers={bind:function(instance,key){let computedObj=findComputed(instance,key);if(computedObj===undefined){return;}computedObj.bind();},addKeyDependencies:function(proxyKeys){let onKeyValue=proxyKeys[onKeyValueSymbol$3];let offKeyValue=proxyKeys[offKeyValueSymbol$2];canReflect_1_19_2_canReflect.assignSymbols(proxyKeys,{"can.onKeyValue":function(key){computedHelpers.bind(this,key);return onKeyValue.apply(this,arguments);},"can.offKeyValue":function(key){computedHelpers.unbind(this,key);return offKeyValue.apply(this,arguments);},"can.getKeyDependencies":function(key){var computedObj=findComputed(this,key);if(computedObj===undefined){return;}return {valueDependencies:new Set([computedObj.observation])};}});}};var computedHelpers_1=computedHelpers;const{assignNonEnumerable,convertItem,dispatchIndexEvent,shouldRecordObservationOnAllKeysExceptFunctionsOnProto}=helpers_1$1;const{mixins:mixins$3}=mixins;const hasOwn$1=Object.prototype.hasOwnProperty;const{isSymbolLike:isSymbolLike$1}=canReflect_1_19_2_canReflect;const metaSymbol$4=Symbol.for("can.meta");const proxiedObjects=new WeakMap();const proxies=new WeakSet();const proxyKeys=Object.create(null);Object.getOwnPropertySymbols(map$1).forEach(function(symbol){assignNonEnumerable(proxyKeys,symbol,map$1[symbol]);});computedHelpers_1.addKeyDependencies(proxyKeys);const mutateMethods={"push":function(arr,args){return [{index:arr.length-args.length,deleteCount:0,insert:args,type:"splice"}];},"pop":function(arr){return [{index:arr.length,deleteCount:1,insert:[],type:"splice"}];},"shift":function(){return [{index:0,deleteCount:1,insert:[],type:"splice"}];},"unshift":function(arr,args){return [{index:0,deleteCount:0,insert:args,type:"splice"}];},"splice":function(arr,args){return [{index:args[0],deleteCount:args[1],insert:args.slice(2),type:"splice"}];},"sort":function(arr){// The array replaced everything.
return [{index:0,deleteCount:arr.length,insert:arr,type:"splice"}];},"reverse":function(arr){// The array replaced everything.
return [{index:0,deleteCount:arr.length,insert:arr,type:"splice"}];}};// Overwrite Array's methods that mutate to:
// - prevent other events from being fired off (index events and length events.)
// - dispatch patches events.
canReflect_1_19_2_canReflect.eachKey(mutateMethods,function(makePatches,prop){var protoFn=Array.prototype[prop];var mutateMethod=function(){var meta=this[metaSymbol$4],// Capture if this function should be making sideEffects
makeSideEffects=meta.preventSideEffects===0,oldLength=meta.target.length;// Prevent proxy from calling ObservationRecorder and sending events.
meta.preventSideEffects++;// Call the function -- note that *this* is the Proxy here, so
// accesses in the function still go through `get()` and `set()`.
var ret=protoFn.apply(meta.target,arguments);var patches=makePatches(meta.target,Array.from(arguments),oldLength);if(makeSideEffects===true){//!steal-remove-start
var reasonLog=[canReflect_1_19_2_canReflect.getName(meta.proxy)+"."+prop+" called with",arguments];//!steal-remove-end
var dispatchArgs={type:"length",key:"length",value:meta.target.length,oldValue:oldLength,patches:patches};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){dispatchArgs.reasonLog=reasonLog;}//!steal-remove-end
map$1.dispatch.call(meta.proxy,dispatchArgs,[meta.target.length,oldLength]);}meta.preventSideEffects--;return ret;};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(mutateMethod,"name",{value:prop});}//!steal-remove-end
// Store the proxied method so it will be used instead of the
// prototype method.
proxiedObjects.set(protoFn,mutateMethod);proxies.add(mutateMethod);});function setValueAndOnChange(key,value,target,proxy,onChange){let old,change;let hadOwn=hasOwn$1.call(target,key);let descriptor=Object.getOwnPropertyDescriptor(target,key);// call the setter on the Proxy to properly do any side-effect sets (and run corresponding handlers)
// -- setters do not return values, so it is unnecessary to check for changes.
if(descriptor&&descriptor.set){descriptor.set.call(proxy,value);}else {// otherwise check for a changed value
old=target[key];change=old!==value;if(change){let keyType=typeof key;let keyIsString=keyType==="string";// String keys added to the instance (and is not "length")
// Are newly defined properties and have propertyDefaults provided.
if(keyIsString&&!(key in target)){mixins$3.expando(target,key,value);}else {// arr[0] = { foo: 'bar' } should convert to MyArray.items
if(keyType==="number"){value=convertItem(target.constructor,value);}target[key]=value;onChange(hadOwn,old);}}}}const proxyHandlers={get(target,key,receiver){if(isSymbolLike$1(key)){return target[key];}let proxy=proxiedObjects.get(target);canObservationRecorder_1_3_1_canObservationRecorder.add(proxy,key.toString());const numberKey=!isSymbolLike$1(key)&&+key;if(Number.isInteger(numberKey)){canObservationRecorder_1_3_1_canObservationRecorder.add(proxy,"length");}let value=Reflect.get(target,key,receiver);return value;},set(target,key,newValue,receiver){let proxy=proxiedObjects.get(target);let numberKey=!isSymbolLike$1(key)&&+key;if(Number.isInteger(numberKey)){key=numberKey;}setValueAndOnChange(key,newValue,target,proxy,function onChange(hadOwn,oldValue){if(Number.isInteger(key)){dispatchIndexEvent.call(receiver,key,hadOwn?typeof newValue!=='undefined'?"set":"remove":"add",newValue,oldValue);}});return true;},deleteProperty(target,key){let old=this.target[key];let deleteSuccessful=delete this.target[key];// Fire event handlers if we were able to delete and the value changed.
if(deleteSuccessful&&this.preventSideEffects===0&&old!==undefined){dispatchIndexEvent.call(this.proxy,key,"remove",undefined,old);}return deleteSuccessful;},ownKeys(){canObservationRecorder_1_3_1_canObservationRecorder.add(this.proxy,"can.keys");let keysSet=new Set(Object.getOwnPropertyNames(this.target).concat(Object.getOwnPropertySymbols(this.target)).concat(Object.getOwnPropertySymbols(this.proxyKeys)));return Array.from(keysSet);}};function makeObservable(array,options){let meta={target:array,proxyKeys:options.proxyKeys!==undefined?options.proxyKeys:Object.create(proxyKeys),computedKeys:Object.create(null),options:options,// `preventSideEffects` is a counter used to "turn off" the proxy.  This is incremented when some
// function (like `Array.splice`) wants to handle event dispatching and/or calling
// `ObservationRecorder` itself for performance reasons.
preventSideEffects:0};meta.proxyKeys[metaSymbol$4]=meta;meta.proxy=new Proxy(array,{get:proxyHandlers.get.bind(meta),set:proxyHandlers.set.bind(meta),ownKeys:proxyHandlers.ownKeys.bind(meta),deleteProperty:proxyHandlers.deleteProperty.bind(meta),meta:meta});map$1.addHandlers(meta.proxy,meta);return meta.proxy;}function proxyArray(){return class ProxyArray extends Array{constructor(...items){super(...items);let localProxyKeys=Object.create(proxyKeys);localProxyKeys.constructor=this.constructor;let observable=makeObservable(this,{//observe: makeObserve.observe,
proxyKeys:localProxyKeys,shouldRecordObservation:shouldRecordObservationOnAllKeysExceptFunctionsOnProto});proxiedObjects.set(this,observable);proxies.add(observable);return observable;}};}var proxyArray_1=proxyArray;const{createConstructorFunction:createConstructorFunction$2,makeDefineInstanceKey:makeDefineInstanceKey$3,mixins:mixins$4,mixinMapProps:mixinMapProps$1,mixinTypeEvents:mixinTypeEvents$2}=mixins;const{convertItem:convertItem$1,convertItems,dispatchLengthPatch}=helpers_1$1;const ProxyArray=proxyArray_1();// symbols aren't enumerable ... we'd need a version of Object that treats them that way
const localOnPatchesSymbol="can.patches";const onKeyValueSymbol$4=Symbol.for("can.onKeyValue");const offKeyValueSymbol$3=Symbol.for("can.offKeyValue");const metaSymbol$5=Symbol.for("can.meta");function isListLike$1(items){return canReflect_1_19_2_canReflect.isListLike(items)&&typeof items!=="string";}const MixedInArray=mixinTypeEvents$2(mixinMapProps$1(ProxyArray));class ObservableArray extends MixedInArray{// TODO define stuff here
constructor(items,props){// Arrays can be passed a length like `new Array(15)`
let isLengthArg=typeof items==="number";if(isLengthArg){super(items);}else if(arguments.length>0&&!isListLike$1(items)){throw new Error("can-observable-array: Unexpected argument: "+typeof items);}else {super();}mixins$4.finalizeClass(this.constructor);mixins$4.initialize(this,props||{});for(let i=0,len=items&&items.length;i<len;i++){this[i]=convertItem$1(this.constructor,items[i]);}// Define class fields observables
//and return the proxy
return new Proxy(this,{defineProperty(target,prop,descriptor){if('items'===prop){throw new Error('ObservableArray does not support a class field named items. Try using a different name or using static items');}// do not create expando properties for special keys set by can-observable-mixin
if(prop==='_instanceDefinitions'){return Reflect.defineProperty(target,prop,descriptor);}let value=descriptor.value;// do not create expando properties for properties that are described
// by `static props` or `static propertyDefaults`
const props=target.constructor.props;if(props&&props[prop]||target.constructor.propertyDefaults){if(value){target.set(prop,value);return true;}return Reflect.defineProperty(target,prop,descriptor);}// create expandos to make all other properties observable
return mixins$4.expando(target,prop,value);}});}static get[Symbol.species](){return this;}static[Symbol.for("can.new")](items){let array=items||[];return new this(array);}push(...items){return super.push(...items);}unshift(...items){return super.unshift(...items);}filter(callback){if(typeof callback==="object"){let props=callback;callback=function(item){for(let prop in props){if(item[prop]!==props[prop]){return false;}}return true;};}return super.filter(callback);}forEach(...args){return Array.prototype.forEach.apply(this,args);}splice(...args){let index=args[0],howMany=args[1],added=[],i,len,listIndex,allSame=args.length>2;index=index||0;// converting the arguments to the right type
for(i=0,len=args.length-2;i<len;i++){listIndex=i+2;added.push(args[listIndex]);// Now lets check if anything will change
if(this[i+index]!==args[listIndex]){allSame=false;}}// if nothing has changed, then return
if(allSame&&this.length<=added.length){return added;}// default howMany if not provided
if(howMany===undefined){howMany=args[1]=this.length-index;}canQueues_1_3_2_canQueues.batch.start();var removed=super.splice.apply(this,args);canQueues_1_3_2_canQueues.batch.stop();return removed;}static convertsTo(Type){const ConvertedType=canType_1_1_6_canType.convert(Type);const ArrayType=class extends this{static get items(){return ConvertedType;}};const name=`ConvertedObservableArray<${canReflect_1_19_2_canReflect.getName(Type)}>`;canReflect_1_19_2_canReflect.setName(ArrayType,name);return ArrayType;}/* Symbols */[Symbol.for("can.splice")](index,deleteCount,insert){return this.splice(...[index,deleteCount].concat(insert));}[Symbol.for("can.onPatches")](handler,queue){this[onKeyValueSymbol$4](localOnPatchesSymbol,handler,queue);}[Symbol.for("can.offPatches")](handler,queue){this[offKeyValueSymbol$3](localOnPatchesSymbol,handler,queue);}get[Symbol.for("can.isListLike")](){return true;}[Symbol.for("can.getOwnEnumerableKeys")](){let base=super[Symbol.for("can.getOwnEnumerableKeys")]();let keysSet=new Set([...Object.keys(this),...base]);return Array.from(keysSet);}}var mutateMethods$1={"push":function(arr,args){return [{index:arr.length-args.length,deleteCount:0,insert:args,type:"splice"}];},"pop":function(arr,args,oldLength){return [{index:arr.length,deleteCount:oldLength>0?1:0,type:"splice"}];},"shift":function(arr,args,oldLength){return [{index:0,deleteCount:oldLength>0?1:0,type:"splice"}];},"unshift":function(arr,args){return [{index:0,deleteCount:0,insert:args,type:"splice"}];},"splice":function(arr,args,oldLength){const index=args[0]<0?Math.max(oldLength+args[0],0):Math.min(oldLength,args[0]);return [{index,deleteCount:Math.max(0,Math.min(args[1],oldLength-index)),insert:args.slice(2),type:"splice"}];},"sort":function(arr){return [{index:0,deleteCount:arr.length,insert:arr,type:"splice"}];},"reverse":function(arr){return [{index:0,deleteCount:arr.length,insert:arr,type:"splice"}];}};const convertArgs={"push":function(arr,args){return convertItems(arr.constructor,args);},"unshift":function(arr,args){return convertItems(arr.constructor,args);},"splice":function(arr,args){return args.slice(0,2).concat(convertItems(arr.constructor,args.slice(2)));}};canReflect_1_19_2_canReflect.eachKey(mutateMethods$1,function(makePatches,prop){const protoFn=ObservableArray.prototype[prop];ObservableArray.prototype[prop]=function(){const oldLength=this.length;let args=Array.from(arguments);if(convertArgs[prop]){args=convertArgs[prop](this,args);}// prevent `length` event from being dispatched by get/set proxy hooks
this[metaSymbol$5].preventSideEffects=(this[metaSymbol$5].preventSideEffects||0)+1;const result=protoFn.apply(this,args);this[metaSymbol$5].preventSideEffects--;const patches=makePatches(this,args,oldLength);dispatchLengthPatch.call(this,prop,patches,this.length,oldLength);return result;};});makeDefineInstanceKey$3(ObservableArray);// Export a constructor function to workaround an issue where ES2015 classes
// cannot be extended in code that's transpiled by Babel.
var canObservableArray=canNamespace_1_0_0_canNamespace.ObservableArray=createConstructorFunction$2(ObservableArray);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var canLog=dev;var canReflectDeps=canReflectDependencies_1_1_2_canReflectDependencies;}//!steal-remove-end
// Symbols
var getChangesSymbol$2=canSymbol_1_7_0_canSymbol.for("can.getChangesDependencyRecord");var getValueSymbol$1=canSymbol_1_7_0_canSymbol.for("can.getValue");var onValueSymbol$2=canSymbol_1_7_0_canSymbol.for("can.onValue");var onEmitSymbol=canSymbol_1_7_0_canSymbol.for("can.onEmit");var offEmitSymbol=canSymbol_1_7_0_canSymbol.for("can.offEmit");var setValueSymbol$2=canSymbol_1_7_0_canSymbol.for("can.setValue");var canElementSymbol$1=canSymbol_1_7_0_canSymbol.for("can.element");// Default implementations for setting the child and parent values
function defaultSetValue(newValue,observable){canReflect_1_19_2_canReflect.setValue(observable,newValue);}// onEmit function
function onEmit(listenToObservable,updateFunction,queue){return listenToObservable[onEmitSymbol](updateFunction,queue);}// offEmit function
function offEmit(listenToObservable,updateFunction,queue){return listenToObservable[offEmitSymbol](updateFunction,queue);}// Given an observable, stop listening to it and tear down the mutation dependencies
function turnOffListeningAndUpdate(listenToObservable,updateObservable,updateFunction,queue){var offValueOrOffEmitFn;// Use either offValue or offEmit depending on which Symbols are on the `observable`
if(listenToObservable[onValueSymbol$2]){offValueOrOffEmitFn=canReflect_1_19_2_canReflect.offValue;}else if(listenToObservable[onEmitSymbol]){offValueOrOffEmitFn=offEmit;}if(offValueOrOffEmitFn){offValueOrOffEmitFn(listenToObservable,updateFunction,queue);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){// The updateObservable is no longer mutated by listenToObservable
canReflectDeps.deleteMutatedBy(updateObservable,listenToObservable);// The updateFunction no longer mutates anything
updateFunction[getChangesSymbol$2]=function getChangesDependencyRecord(){};}//!steal-remove-end
}}// Given an observable, start listening to it and set up the mutation dependencies
function turnOnListeningAndUpdate(listenToObservable,updateObservable,updateFunction,queue){var onValueOrOnEmitFn;// Use either onValue or onEmit depending on which Symbols are on the `observable`
if(listenToObservable[onValueSymbol$2]){onValueOrOnEmitFn=canReflect_1_19_2_canReflect.onValue;}else if(listenToObservable[onEmitSymbol]){onValueOrOnEmitFn=onEmit;}if(onValueOrOnEmitFn){onValueOrOnEmitFn(listenToObservable,updateFunction,queue);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){// The updateObservable is mutated by listenToObservable
canReflectDeps.addMutatedBy(updateObservable,listenToObservable);// The updateFunction mutates updateObservable
updateFunction[getChangesSymbol$2]=function getChangesDependencyRecord(){var s=new Set();s.add(updateObservable);return {valueDependencies:s};};}//!steal-remove-end
}}// Semaphores are used to keep track of updates to the child & parent
// For debugging purposes, Semaphore and Bind are highly coupled.
function Semaphore(binding,type){this.value=0;this._binding=binding;this._type=type;}canAssign_1_3_3_canAssign(Semaphore.prototype,{decrement:function(){this.value-=1;},increment:function(args){this._incremented=true;this.value+=1;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(this.value===1){this._binding._debugSemaphores=[];}var semaphoreData={type:this._type,action:"increment",observable:args.observable,newValue:args.newValue,value:this.value,lastTask:canQueues_1_3_2_canQueues.lastTask()};this._binding._debugSemaphores.push(semaphoreData);}//!steal-remove-end
}});function Bind(options){this._options=options;// These parameters must be supplied
//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(options.child===undefined){throw new TypeError("You must supply a child");}if(options.parent===undefined){throw new TypeError("You must supply a parent");}if(options.queue&&["notify","derive","domUI","dom"].indexOf(options.queue)===-1){throw new RangeError("Invalid queue; must be one of notify, derive, dom, or domUI");}}//!steal-remove-end
// queue; by default, domUI
if(options.queue===undefined){if(options.element){options.queue="dom";}else {options.queue="domUI";}}// cycles: when an observable is set in a two-way binding, it can update the
// other bound observable, which can then update the original observable the
// “cycles” number of times. For example, a child is set and updates the parent;
// with cycles: 0, the parent could not update the child;
// with cycles: 1, the parent could update the child, which can update the parent
// with cycles: 2, the parent can update the child again, and so on and so forth…
if(options.cycles>0===false){options.cycles=0;}// onInitDoNotUpdateChild is false by default
options.onInitDoNotUpdateChild=typeof options.onInitDoNotUpdateChild==="boolean"?options.onInitDoNotUpdateChild:false;// onInitDoNotUpdateParent is false by default
options.onInitDoNotUpdateParent=typeof options.onInitDoNotUpdateParent==="boolean"?options.onInitDoNotUpdateParent:false;// onInitSetUndefinedParentIfChildIsDefined is true by default
options.onInitSetUndefinedParentIfChildIsDefined=typeof options.onInitSetUndefinedParentIfChildIsDefined==="boolean"?options.onInitSetUndefinedParentIfChildIsDefined:true;// The way the cycles are tracked is through semaphores; currently, when
// either the child or parent is updated, we increase their respective
// semaphore so that if it’s two-way binding, then the “other” observable
// will only update if the total count for both semaphores is less than or
// equal to twice the number of cycles (because a cycle means two updates).
var childSemaphore=new Semaphore(this,"child");var parentSemaphore=new Semaphore(this,"parent");// Determine if this is a one-way or two-way binding; by default, accept
// whatever options are passed in, but if they’re not defined, then check for
// the getValue and setValue symbols on the child and parent values.
var childToParent=true;if(typeof options.childToParent==="boolean"){// Always let the option override any checks
childToParent=options.childToParent;}else if(options.child[getValueSymbol$1]==null){// Child to parent won’t work if we can’t get the child’s value
childToParent=false;}else if(options.setParent===undefined&&options.parent[setValueSymbol$2]==null){// Child to parent won’t work if we can’t set the parent’s value
childToParent=false;}var parentToChild=true;if(typeof options.parentToChild==="boolean"){// Always let the option override any checks
parentToChild=options.parentToChild;}else if(options.parent[getValueSymbol$1]==null){// Parent to child won’t work if we can’t get the parent’s value
parentToChild=false;}else if(options.setChild===undefined&&options.child[setValueSymbol$2]==null){// Parent to child won’t work if we can’t set the child’s value
parentToChild=false;}if(childToParent===false&&parentToChild===false){throw new Error("Neither the child nor parent will be updated; this is a no-way binding");}this._childToParent=childToParent;this._parentToChild=parentToChild;// Custom child & parent setters can be supplied; if they aren’t provided,
// then create our own.
if(options.setChild===undefined){options.setChild=defaultSetValue;}if(options.setParent===undefined){options.setParent=defaultSetValue;}// Set the observables’ priority
if(options.priority!==undefined){canReflect_1_19_2_canReflect.setPriority(options.child,options.priority);canReflect_1_19_2_canReflect.setPriority(options.parent,options.priority);}// These variables keep track of how many updates are allowed in a cycle.
// cycles is multipled by two because one update is allowed for each side of
// the binding, child and parent. One more update is allowed depending on the
// sticky option; if it’s sticky, then one more update needs to be allowed.
var allowedUpdates=options.cycles*2;var allowedChildUpdates=allowedUpdates+(options.sticky==="childSticksToParent"?1:0);var allowedParentUpdates=allowedUpdates+(options.sticky==="parentSticksToChild"?1:0);// This keeps track of whether we’re bound to the child and/or parent; this
// allows startParent() to be called first and on() can be called later to
// finish setting up the child binding. This is also checked when updating
// values; if stop() has been called but updateValue() is called, then we
// ignore the update.
this._bindingState={child:false,parent:false};// This is the listener that’s called when the parent changes
this._updateChild=function(newValue){updateValue.call(this,{bindingState:this._bindingState,newValue:newValue,// Some options used for debugging
debugObservableName:"child",debugPartnerName:"parent",// Main observable values
observable:options.child,setValue:options.setChild,semaphore:childSemaphore,// If the sum of the semaphores is less than or equal to this number, then
// it’s ok to update the child with the new value.
allowedUpdates:allowedChildUpdates,// If options.sticky === "parentSticksToChild", then after the parent sets
// the child, check to see if the child matches the parent; if not, then
// set the parent to the child’s value. This is used in cases where the
// child modifies its own value and the parent should be kept in sync with
// the child.
sticky:options.sticky==="parentSticksToChild",// Partner observable values
partner:options.parent,setPartner:options.setParent,partnerSemaphore:parentSemaphore});}.bind(this);// This is the listener that’s called when the child changes
this._updateParent=function(newValue){updateValue.call(this,{bindingState:this._bindingState,newValue:newValue,// Some options used for debugging
debugObservableName:"parent",debugPartnerName:"child",// Main observable values
observable:options.parent,setValue:options.setParent,semaphore:parentSemaphore,// If the sum of the semaphores is less than or equal to this number, then
// it’s ok to update the parent with the new value.
allowedUpdates:allowedParentUpdates,// If options.sticky === "childSticksToParent", then after the child sets
// the parent, check to see if the parent matches the child; if not, then
// set the child to the parent’s value. This is used in cases where the
// parent modifies its own value and the child should be kept in sync with
// the parent.
sticky:options.sticky==="childSticksToParent",// Partner observable values
partner:options.child,setPartner:options.setChild,partnerSemaphore:childSemaphore});}.bind(this);if(options.element){this._updateChild[canElementSymbol$1]=this._updateParent[canElementSymbol$1]=options.element;}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(this._updateChild,"name",{value:options.updateChildName?options.updateChildName:"update "+canReflect_1_19_2_canReflect.getName(options.child),configurable:true});Object.defineProperty(this._updateParent,"name",{value:options.updateParentName?options.updateParentName:"update "+canReflect_1_19_2_canReflect.getName(options.parent),configurable:true});}//!steal-remove-end
}Object.defineProperty(Bind.prototype,"parentValue",{get:function(){return canReflect_1_19_2_canReflect.getValue(this._options.parent);}});canAssign_1_3_3_canAssign(Bind.prototype,{// Turn on any bindings that haven’t already been enabled;
// also update the child or parent if need be.
start:function(){var childValue;var options=this._options;var parentValue;// The tests don’t show that it matters which is bound first, but we’ll
// bind to the parent first to stay consistent with how
// can-stache-bindings did things.
this.startParent();this.startChild();// Initialize the child & parent values
if(this._childToParent===true&&this._parentToChild===true){// Two-way binding
parentValue=canReflect_1_19_2_canReflect.getValue(options.parent);if(parentValue===undefined){childValue=canReflect_1_19_2_canReflect.getValue(options.child);if(childValue===undefined){// Check if updating the child is allowed
if(options.onInitDoNotUpdateChild===false){this._updateChild(parentValue);}}else if(options.onInitDoNotUpdateParent===false&&options.onInitSetUndefinedParentIfChildIsDefined===true){this._updateParent(childValue);}}else {// Check if updating the child is allowed
if(options.onInitDoNotUpdateChild===false){this._updateChild(parentValue);}}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){// Here we want to do a dev-mode check to see whether the child does type conversions on
//  any two-way bindings.  This will be ignored and the child and parent will be desynched.
var parentContext=options.parent.observation&&options.parent.observation.func||options.parent;var childContext=options.child.observation&&options.child.observation.func||options.child;parentValue=canReflect_1_19_2_canReflect.getValue(options.parent);childValue=canReflect_1_19_2_canReflect.getValue(options.child);if(options.sticky&&childValue!==parentValue){canLog.warn("can-bind: The "+(options.sticky==="parentSticksToChild"?"parent":"child")+" of the sticky two-way binding "+(options.debugName||canReflect_1_19_2_canReflect.getName(parentContext)+"<->"+canReflect_1_19_2_canReflect.getName(childContext))+" is changing or converting its value when set. Conversions should only be done on the binding "+(options.sticky==="parentSticksToChild"?"child":"parent")+" to preserve synchronization. "+"See https://canjs.com/doc/can-stache-bindings.html#StickyBindings for more about sticky bindings");}}//!steal-remove-end
}else if(this._childToParent===true){// One-way child -> parent, so update the parent
// Check if we are to initialize the parent
if(options.onInitDoNotUpdateParent===false){childValue=canReflect_1_19_2_canReflect.getValue(options.child);this._updateParent(childValue);}}else if(this._parentToChild===true){// One-way parent -> child, so update the child
// Check if updating the child is allowed
if(options.onInitDoNotUpdateChild===false){parentValue=canReflect_1_19_2_canReflect.getValue(options.parent);this._updateChild(parentValue);}}},// Listen for changes to the child observable and update the parent
startChild:function(){if(this._bindingState.child===false&&this._childToParent===true){var options=this._options;this._bindingState.child=true;turnOnListeningAndUpdate(options.child,options.parent,this._updateParent,options.queue);}},// Listen for changes to the parent observable and update the child
startParent:function(){if(this._bindingState.parent===false&&this._parentToChild===true){var options=this._options;this._bindingState.parent=true;turnOnListeningAndUpdate(options.parent,options.child,this._updateChild,options.queue);}},// Turn off all the bindings
stop:function(){var bindingState=this._bindingState;var options=this._options;// Turn off the parent listener
if(bindingState.parent===true&&this._parentToChild===true){bindingState.parent=false;turnOffListeningAndUpdate(options.parent,options.child,this._updateChild,options.queue);}// Turn off the child listener
if(bindingState.child===true&&this._childToParent===true){bindingState.child=false;turnOffListeningAndUpdate(options.child,options.parent,this._updateParent,options.queue);}}});["parent","child"].forEach(function(property){Object.defineProperty(Bind.prototype,property,{get:function(){return this._options[property];}});});// updateValue is a helper function that’s used by updateChild and updateParent
function updateValue(args){/* jshint validthis: true */// Check to see whether the binding is active; ignore updates if it isn’t active
var bindingState=args.bindingState;if(bindingState.child===false&&bindingState.parent===false){// We don’t warn the user about this because it’s a common occurrence in
// can-stache-bindings, e.g. {{#if value}}<input value:bind="value"/>{{/if}}
return;}// Now check the semaphore; if this change is happening because the partner
// observable was just updated, we only want to update this observable again
// if the total count for both semaphores is less than or equal to the number
// of allowed updates.
var semaphore=args.semaphore;if(semaphore.value+args.partnerSemaphore.value<=args.allowedUpdates){canQueues_1_3_2_canQueues.batch.start();// Increase the semaphore so that when the batch ends, if an update to the
// partner observable’s value is made, then it won’t update this observable
// again unless cycles are allowed.
semaphore.increment(args);// Update the observable’s value; this uses either a custom function passed
// in when the binding was initialized or canReflect.setValue.
args.setValue(args.newValue,args.observable);// Decrease the semaphore after all other updates have occurred
canQueues_1_3_2_canQueues.mutateQueue.enqueue(semaphore.decrement,semaphore,[]);canQueues_1_3_2_canQueues.batch.stop();// Stickiness is used in cases where the call to args.setValue above might
// have resulted in the observable being set to a different value than what
// was passed into this function (args.newValue). If sticky:true, then set
// the partner observable’s value so they’re kept in sync.
if(args.sticky){var observableValue=canReflect_1_19_2_canReflect.getValue(args.observable);if(observableValue!==canReflect_1_19_2_canReflect.getValue(args.partner)){args.setPartner(observableValue,args.partner);}}}else {// It’s natural for this “else” block to be hit in two-way bindings; as an
// example, if a parent gets set and the child gets updated, the child’s
// listener to update the parent will be called, but it’ll be ignored if we
// don’t want cycles. HOWEVER, if this gets called and the parent is not the
// same value as the child, then their values are going to be out of sync,
// probably unintentionally. This is worth pointing out to developers
// because it can cause unexpected behavior… some people call those bugs. :)
//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var currentValue=canReflect_1_19_2_canReflect.getValue(args.observable);if(currentValue!==args.newValue){var warningParts=["can-bind: attempting to update "+args.debugObservableName+" "+canReflect_1_19_2_canReflect.getName(args.observable)+" to new value: %o","…but the "+args.debugObservableName+" semaphore is at "+semaphore.value+" and the "+args.debugPartnerName+" semaphore is at "+args.partnerSemaphore.value+". The number of allowed updates is "+args.allowedUpdates+".","The "+args.debugObservableName+" value will remain unchanged; it’s currently: %o. ","Read https://canjs.com/doc/can-bind.html#Warnings for more information. Printing mutation history:"];canLog.warn(warningParts.join("\n"),args.newValue,currentValue);if(console.groupCollapsed){// stores the last stack we've seen so we only need to show what's happened since the
// last increment.
var lastStack=[];var getFromLastStack=function(stack){if(lastStack.length){// walk backwards
for(var i=lastStack.length-1;i>=0;i--){var index=stack.indexOf(lastStack[i]);if(index!==-1){return stack.slice(i+1);}}}return stack;};// Loop through all the debug information
// And print out what caused increments.
this._debugSemaphores.forEach(function(semaphoreMutation){if(semaphoreMutation.action==="increment"){console.groupCollapsed(semaphoreMutation.type+" "+canReflect_1_19_2_canReflect.getName(semaphoreMutation.observable)+" set.");var stack=canQueues_1_3_2_canQueues.stack(semaphoreMutation.lastTask);var printStack=getFromLastStack(stack);lastStack=stack;// This steals how `logStack` logs information.
canQueues_1_3_2_canQueues.logStack.call({stack:function(){return printStack;}});console.log(semaphoreMutation.type+" semaphore incremented to "+semaphoreMutation.value+".");console.log(canReflect_1_19_2_canReflect.getName(semaphoreMutation.observable),semaphoreMutation.observable,"set to ",semaphoreMutation.newValue);console.groupEnd();}});console.groupCollapsed(args.debugObservableName+" "+canReflect_1_19_2_canReflect.getName(args.observable)+" NOT set.");var stack=getFromLastStack(canQueues_1_3_2_canQueues.stack());canQueues_1_3_2_canQueues.logStack.call({stack:function(){return stack;}});console.log(args.debugObservableName+" semaphore ("+semaphore.value+") + "+args.debugPartnerName+" semaphore ("+args.partnerSemaphore.value+") IS NOT <= allowed updates ("+args.allowedUpdates+")");console.log("Prevented from setting "+canReflect_1_19_2_canReflect.getName(args.observable),args.observable,"to",args.newValue);console.groupEnd();}}}//!steal-remove-end
}}var canBind_1_5_1_canBind=canNamespace_1_0_0_canNamespace.Bind=Bind;if(process.env.NODE_ENV!=='production');//!steal-remove-end
var setElementSymbol=canSymbol_1_7_0_canSymbol.for("can.setElement");// SetterObservable's call a function when set. Their getter is backed up by an
// observation.
function SetterObservable(getter,setter){this.setter=setter;this.observation=new canObservation_4_2_0_canObservation(getter);this.handler=this.handler.bind(this);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){canReflect_1_19_2_canReflect.assignSymbols(this,{"can.getName":function(){return canReflect_1_19_2_canReflect.getName(this.constructor)+"<"+canReflect_1_19_2_canReflect.getName(getter)+">";}});Object.defineProperty(this.handler,"name",{value:canReflect_1_19_2_canReflect.getName(this)+".handler"});}//!steal-remove-end
}SetterObservable.prototype=Object.create(settable.prototype);SetterObservable.prototype.constructor=SetterObservable;SetterObservable.prototype.set=function(newVal){this.setter(newVal);};SetterObservable.prototype.hasDependencies=function(){return canReflect_1_19_2_canReflect.valueHasDependencies(this.observation);};canReflect_1_19_2_canReflect.assignSymbols(SetterObservable.prototype,{"can.setValue":SetterObservable.prototype.set,"can.valueHasDependencies":SetterObservable.prototype.hasDependencies,"can.setElement":function(el){this.observation[setElementSymbol](el);}});var setter=SetterObservable;const lifecycleStatusSymbol=Symbol.for("can.lifecycleStatus");const inSetupSymbol$4=Symbol.for("can.initializing");const teardownHandlersSymbol=Symbol.for("can.teardownHandlers");function defineConfigurableNonEnumerable(obj,prop,value){Object.defineProperty(obj,prop,{configurable:true,enumerable:false,writable:true,value:value});}var mixinLifecycleMethods=function mixinLifecycleMethods(BaseElement=HTMLElement){return class LifecycleElement extends BaseElement{constructor(){super();if(arguments.length){throw new Error("can-stache-element: Do not pass arguments to the constructor. Initial property values should be passed to the `initialize` hook.");}// add inSetup symbol to prevent events being dispatched
defineConfigurableNonEnumerable(this,inSetupSymbol$4,true);// add lifecycle status symbol
defineConfigurableNonEnumerable(this,lifecycleStatusSymbol,{initialized:false,rendered:false,connected:false,disconnected:false});// add a place to store additional teardownHandlers
defineConfigurableNonEnumerable(this,teardownHandlersSymbol,[]);}// custom element lifecycle methods
connectedCallback(props){this.initialize(props);this.render();this.connect();return this;}disconnectedCallback(){this.disconnect();return this;}// custom lifecycle methods
initialize(props){const lifecycleStatus=this[lifecycleStatusSymbol];if(lifecycleStatus.initialized){return this;}// Overwrite ... this means that this initialize
// can't be inherited (super.initialize).
this[inSetupSymbol$4]=true;if(super.initialize){super.initialize(props);}this[inSetupSymbol$4]=false;lifecycleStatus.initialized=true;return this;}render(props){const lifecycleStatus=this[lifecycleStatusSymbol];if(lifecycleStatus.rendered){return this;}if(!lifecycleStatus.initialized){this.initialize(props);}if(super.render){super.render(props);}lifecycleStatus.rendered=true;return this;}connect(props){const lifecycleStatus=this[lifecycleStatusSymbol];if(lifecycleStatus.connected){return this;}if(!lifecycleStatus.initialized){this.initialize(props);}if(!lifecycleStatus.rendered){this.render(props);}if(super.connect){super.connect(props);}if(this.connected){let connectedTeardown=this.connected();if(typeof connectedTeardown==="function"){this[teardownHandlersSymbol].push(connectedTeardown);}}lifecycleStatus.connected=true;lifecycleStatus.disconnected=false;return this;}disconnect(){const lifecycleStatus=this[lifecycleStatusSymbol];if(lifecycleStatus.disconnected){return this;}if(super.disconnect){super.disconnect();}if(this.stopListening){this.stopListening();}for(let handler of this[teardownHandlersSymbol]){handler.call(this);}if(this.disconnected){this.disconnected();}this[lifecycleStatusSymbol]={initialized:false,rendered:false,connected:false,disconnected:true};return this;}};};const{mixinElement:mixinElement$1,mixins:mixins$5}=mixins;const eventTargetInstalledSymbol=Symbol.for("can.eventTargetInstalled");var mixinProps=function mixinDefine(Base=HTMLElement){const realAddEventListener=Base.prototype.addEventListener;const realRemoveEventListener=Base.prototype.removeEventListener;function installEventTarget(Type){if(Type[eventTargetInstalledSymbol]){return;}const eventQueueAddEventListener=Type.prototype.addEventListener;const eventQueueRemoveEventListener=Type.prototype.removeEventListener;Type.prototype.addEventListener=function(){eventQueueAddEventListener.apply(this,arguments);return realAddEventListener.apply(this,arguments);};Type.prototype.removeEventListener=function(){eventQueueRemoveEventListener.apply(this,arguments);return realRemoveEventListener.apply(this,arguments);};Type[eventTargetInstalledSymbol]=true;}// Warn on special properties
//!steal-remove-start
function raisePropWarnings(Type,Base){if(process.env.NODE_ENV!=='production'){// look for `static props`and fall back to `static define` if `props` doesn't exist
let props=typeof Type.props==="object"?Type.props:typeof Type.define==="object"?Type.define:{};Object.keys(props).forEach(function(key){if("on"+key in Type.prototype){dev.warn(`${canReflect_1_19_2_canReflect.getName(Type)}: The defined property [${key}] matches the name of a DOM event. This property could update unexpectedly. Consider renaming.`);}else if(key in Base.prototype){dev.warn(`${canReflect_1_19_2_canReflect.getName(Type)}: The defined property [${key}] matches the name of a property on the type being extended, ${canReflect_1_19_2_canReflect.getName(Base)}. This could lead to errors by changing the expected behaviour of that property. Consider renaming.`);}});}}//!steal-remove-end
class DefinedClass extends mixinElement$1(Base){constructor(){super();//!steal-remove-start
raisePropWarnings(this.constructor,Base);//!steal-remove-end
installEventTarget(this.constructor);}initialize(props){super.initialize(props);let prop,staticProps;if(this.constructor.props){staticProps=Object.keys(this.constructor.props);}for(prop in this){if(this.hasOwnProperty(prop)){if(staticProps&&staticProps.includes(prop)){const val=this[prop];delete this[prop];this[prop]=val;}else {mixins$5.expando(this,prop,this[prop]);}}}}}return DefinedClass;};var canAttributeEncoder_1_1_4_canAttributeEncoder=createCommonjsModule(function(module){/**
 * @module {{}} can-attribute-encoder can-attribute-encoder
 * @parent can-dom-utilities
 * @collection can-infrastructure
 * @package ./package.json
 *
 * Encode and decode attribute names.
 *
 * @option {Object} An object with the methods:
 * [can-attribute-encoder.encode] and [can-attribute-encoder.decode].
 *
 */function each(items,callback){for(var i=0;i<items.length;i++){callback(items[i],i);}}function makeMap(str){var obj={},items=str.split(",");each(items,function(name){obj[name]=true;});return obj;}// Attributes for which the case matters - shouldn’t be lowercased.
var caseMattersAttributes=makeMap("allowReorder,attributeName,attributeType,autoReverse,baseFrequency,baseProfile,calcMode,clipPathUnits,contentScriptType,contentStyleType,diffuseConstant,edgeMode,externalResourcesRequired,filterRes,filterUnits,glyphRef,gradientTransform,gradientUnits,kernelMatrix,kernelUnitLength,keyPoints,keySplines,keyTimes,lengthAdjust,limitingConeAngle,markerHeight,markerUnits,markerWidth,maskContentUnits,maskUnits,patternContentUnits,patternTransform,patternUnits,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,repeatCount,repeatDur,requiredExtensions,requiredFeatures,specularConstant,specularExponent,spreadMethod,startOffset,stdDeviation,stitchTiles,surfaceScale,systemLanguage,tableValues,textLength,viewBox,viewTarget,xChannelSelector,yChannelSelector,controlsList");function camelCaseToSpinalCase(match,lowerCaseChar,upperCaseChar){return lowerCaseChar+"-"+upperCaseChar.toLowerCase();}function startsWith(allOfIt,startsWith){return allOfIt.indexOf(startsWith)===0;}function endsWith(allOfIt,endsWith){return allOfIt.length-allOfIt.lastIndexOf(endsWith)===endsWith.length;}var regexes={leftParens:/\(/g,rightParens:/\)/g,leftBrace:/\{/g,rightBrace:/\}/g,camelCase:/([a-z]|[0-9]|^)([A-Z])/g,forwardSlash:/\//g,space:/\s/g,uppercase:/[A-Z]/g,uppercaseDelimiterThenChar:/:u:([a-z])/g,caret:/\^/g,dollar:/\$/g,at:/@/g};var delimiters={prependUppercase:':u:',replaceSpace:':s:',replaceForwardSlash:':f:',replaceLeftParens:':lp:',replaceRightParens:':rp:',replaceLeftBrace:':lb:',replaceRightBrace:':rb:',replaceCaret:':c:',replaceDollar:':d:',replaceAt:':at:'};var encoder={};/**
 * @function can-attribute-encoder.encode encode
 * @parent can-attribute-encoder
 * @description Encode an attribute name
 *
 * @signature `encoder.encode(attributeName)`
 *
 * Note: specific encoding may change, but encoded attributes
 * can always be decoded using [can-attribute-encoder.decode].
 *
 * @body
 *
 * ```js
 * var encodedAttributeName = encoder.encode("{(^$foo/bar baz)}");
 * div.setAttribute(encodedAttributeName, "attribute value");
 * ```
 *
 * @param {String} attributeName The attribute name.
 * @return {String} The encoded attribute name.
 *
 */encoder.encode=function(name){var encoded=name;// encode or convert camelCase attributes unless in list of attributes
// where case matters
if(!caseMattersAttributes[encoded]&&encoded.match(regexes.camelCase)){// encode uppercase characters in new bindings
// - on:fooBar, fooBar:to, fooBar:from, fooBar:bind
if(startsWith(encoded,'on:')||endsWith(encoded,':to')||endsWith(encoded,':from')||endsWith(encoded,':bind')||endsWith(encoded,':raw')){encoded=encoded.replace(regexes.uppercase,function(char){return delimiters.prependUppercase+char.toLowerCase();});}else if(startsWith(encoded,'(')||startsWith(encoded,'{')){// convert uppercase characters in older bindings to kebab-case
// - {fooBar}, (fooBar), {(fooBar)}
encoded=encoded.replace(regexes.camelCase,camelCaseToSpinalCase);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){dev.warn("can-attribute-encoder: Found attribute with name: "+name+". Converting to: "+encoded+'.');}//!steal-remove-end
}}//encode spaces
encoded=encoded.replace(regexes.space,delimiters.replaceSpace)//encode forward slashes
.replace(regexes.forwardSlash,delimiters.replaceForwardSlash)// encode left parentheses
.replace(regexes.leftParens,delimiters.replaceLeftParens)// encode right parentheses
.replace(regexes.rightParens,delimiters.replaceRightParens)// encode left braces
.replace(regexes.leftBrace,delimiters.replaceLeftBrace)// encode left braces
.replace(regexes.rightBrace,delimiters.replaceRightBrace)// encode ^
.replace(regexes.caret,delimiters.replaceCaret)// encode $
.replace(regexes.dollar,delimiters.replaceDollar)// encode @
.replace(regexes.at,delimiters.replaceAt);return encoded;};/**
 * @function can-attribute-encoder.decode decode
 * @parent can-attribute-encoder
 * @description Decode an attribute name encoded by [can-attribute-encoder.encode]
 * @signature `encoder.decode(attributeName)`
 *
 * @body
 *
 * ```js
 * encoder.decode(attributeName); // -> "{(^$foo/bar baz)}"
 *
 * ```
 *
 * @param {String} attributeName The encoded attribute name.
 * @return {String} The decoded attribute name.
 *
 */encoder.decode=function(name){var decoded=name;// decode uppercase characters in new bindings
if(!caseMattersAttributes[decoded]&&regexes.uppercaseDelimiterThenChar.test(decoded)){if(startsWith(decoded,'on:')||endsWith(decoded,':to')||endsWith(decoded,':from')||endsWith(decoded,':bind')||endsWith(decoded,':raw')){decoded=decoded.replace(regexes.uppercaseDelimiterThenChar,function(match,char){return char.toUpperCase();});}}// decode left parentheses
decoded=decoded.replace(delimiters.replaceLeftParens,'(')// decode right parentheses
.replace(delimiters.replaceRightParens,')')// decode left braces
.replace(delimiters.replaceLeftBrace,'{')// decode left braces
.replace(delimiters.replaceRightBrace,'}')// decode forward slashes
.replace(delimiters.replaceForwardSlash,'/')// decode spaces
.replace(delimiters.replaceSpace,' ')// decode ^
.replace(delimiters.replaceCaret,'^')//decode $
.replace(delimiters.replaceDollar,'$')//decode @
.replace(delimiters.replaceAt,'@');return decoded;};if(canNamespace_1_0_0_canNamespace.encoder){throw new Error("You can't have two versions of can-attribute-encoder, check your dependencies");}else {module.exports=canNamespace_1_0_0_canNamespace.encoder=encoder;}});/* jshint maxdepth:7,node:true, latedef:false */function each(items,callback){for(var i=0;i<items.length;i++){callback(items[i],i);}}function makeMap$1(str){var obj={},items=str.split(",");each(items,function(name){obj[name]=true;});return obj;}function handleIntermediate(intermediate,handler){for(var i=0,len=intermediate.length;i<len;i++){var item=intermediate[i];handler[item.tokenType].apply(handler,item.args);}return intermediate;}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){//assign the function to a var to avoid jshint
//"Function declarations should not be placed in blocks"
var countLines=function countLines(input){// TODO: optimize?
return input.split('\n').length-1;};}//!steal-remove-end
var alphaNumeric="A-Za-z0-9",alphaNumericHU="-:_"+alphaNumeric,magicStart="{{",endTag=new RegExp("^<\\/(["+alphaNumericHU+"]+)[^>]*>"),magicMatch=new RegExp("\\{\\{(![\\s\\S]*?!|[\\s\\S]*?)\\}\\}\\}?","g"),space=/\s/,alphaRegex=new RegExp('['+alphaNumeric+']'),attributeRegexp=new RegExp("["+alphaNumericHU+"]+\s*=\s*(\"[^\"]*\"|'[^']*')");// Empty Elements - HTML 5
var empty=makeMap$1("area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed");// Elements for which tag case matters - shouldn't be lowercased.
var caseMattersElements=makeMap$1("altGlyph,altGlyphDef,altGlyphItem,animateColor,animateMotion,animateTransform,clipPath,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,foreignObject,glyphRef,linearGradient,radialGradient,textPath");// Elements that you can, intentionally, leave open
// (and which close themselves)
var closeSelf=makeMap$1("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr");// Special Elements (can contain anything)
var special=makeMap$1("script");// Callback names on `handler`.
var tokenTypes="start,end,close,attrStart,attrEnd,attrValue,chars,comment,special,done".split(",");//maps end characters to start characters
var startOppositesMap={"{":"}","(":")"};var fn=function(){};var HTMLParser=function(html,handler,returnIntermediate){if(typeof html==="object"){return handleIntermediate(html,handler);}var intermediate=[];handler=handler||{};if(returnIntermediate){// overwrite handlers so they add to intermediate
each(tokenTypes,function(name){var callback=handler[name]||fn;handler[name]=function(){if(callback.apply(this,arguments)!==false){var end=arguments.length;// the intermediate is stringified in the compiled stache templates
// so we want to trim the last item if it is the line number
if(arguments[end-1]===undefined){end=arguments.length-1;}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){// but restore line number in dev mode
end=arguments.length;}//!steal-remove-end
intermediate.push({tokenType:name,args:[].slice.call(arguments,0,end)});}};});}function parseStartTag(tag,tagName,rest,unary){tagName=caseMattersElements[tagName]?tagName:tagName.toLowerCase();if(closeSelf[tagName]&&stack.last()===tagName){parseEndTag("",tagName);}unary=empty[tagName]||!!unary;handler.start(tagName,unary,lineNo);if(!unary){stack.push(tagName);}// find attribute or special
HTMLParser.parseAttrs(rest,handler,lineNo);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){lineNo+=countLines(tag);}//!steal-remove-end
handler.end(tagName,unary,lineNo);if(tagName==="html"){skipChars=true;}}function parseEndTag(tag,tagName){// If no tag name is provided, clean shop
var pos;if(!tagName){pos=0;}// Find the closest opened tag of the same type
else {tagName=caseMattersElements[tagName]?tagName:tagName.toLowerCase();for(pos=stack.length-1;pos>=0;pos--){if(stack[pos]===tagName){break;}}}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(typeof tag==='undefined'){if(stack.length>0){if(handler.filename){dev.warn(handler.filename+": expected closing tag </"+stack[pos]+">");}else {dev.warn("expected closing tag </"+stack[pos]+">");}}}else if(pos<0||pos!==stack.length-1){if(stack.length>0){if(handler.filename){dev.warn(handler.filename+":"+lineNo+": unexpected closing tag "+tag+" expected </"+stack[stack.length-1]+">");}else {dev.warn(lineNo+": unexpected closing tag "+tag+" expected </"+stack[stack.length-1]+">");}}else {if(handler.filename){dev.warn(handler.filename+":"+lineNo+": unexpected closing tag "+tag);}else {dev.warn(lineNo+": unexpected closing tag "+tag);}}}}//!steal-remove-end
if(pos>=0){// Close all the open elements, up the stack
for(var i=stack.length-1;i>=pos;i--){if(handler.close){handler.close(stack[i],lineNo);}}// Remove the open elements from the stack
stack.length=pos;// Don't add TextNodes after the <body> tag
if(tagName==="body"){skipChars=true;}}}function parseMustache(mustache,inside){if(handler.special){handler.special(inside,lineNo);}}var callChars=function(){if(charsText&&!skipChars){if(handler.chars){handler.chars(charsText,lineNo);}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){lineNo+=countLines(charsText);}//!steal-remove-end
}skipChars=false;charsText="";};var index,chars,skipChars,match,lineNo,stack=[],last=html,// an accumulating text for the next .chars callback
charsText="";//!steal-remove-start
if(process.env.NODE_ENV!=='production'){lineNo=1;}//!steal-remove-end
stack.last=function(){return this[this.length-1];};while(html){chars=true;// Make sure we're not in a script or style element
if(!stack.last()||!special[stack.last()]){// Comment
if(html.indexOf("<!--")===0){index=html.indexOf("-->");if(index>=0){callChars();if(handler.comment){handler.comment(html.substring(4,index),lineNo);}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){lineNo+=countLines(html.substring(0,index+3));}//!steal-remove-end
html=html.substring(index+3);chars=false;}// end tag
}else if(html.indexOf("</")===0){match=html.match(endTag);if(match){callChars();match[0].replace(endTag,parseEndTag);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){lineNo+=countLines(html.substring(0,match[0].length));}//!steal-remove-end
html=html.substring(match[0].length);chars=false;}// start tag
}else if(html.indexOf("<")===0){var res=HTMLParser.searchStartTag(html);if(res){callChars();parseStartTag.apply(null,res.match);html=res.html;chars=false;}// magic tag
}else if(html.indexOf(magicStart)===0){match=html.match(magicMatch);if(match){callChars();match[0].replace(magicMatch,parseMustache);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){lineNo+=countLines(html.substring(0,match[0].length));}//!steal-remove-end
html=html.substring(match[0].length);}}if(chars){index=findBreak(html,magicStart);if(index===0&&html===last){charsText+=html.charAt(0);html=html.substr(1);index=findBreak(html,magicStart);}var text=index<0?html:html.substring(0,index);html=index<0?"":html.substring(index);if(text){charsText+=text;}}}else {html=html.replace(new RegExp("([\\s\\S]*?)<\/"+stack.last()+"[^>]*>"),function(all,text){text=text.replace(/<!--([\s\S]*?)-->|<!\[CDATA\[([\s\S]*?)]]>/g,"$1$2");if(handler.chars){handler.chars(text,lineNo);}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){lineNo+=countLines(text);}//!steal-remove-end
return "";});parseEndTag("",stack.last());}if(html===last){throw new Error("Parse Error: "+html);}last=html;}callChars();// Clean up any remaining tags
parseEndTag();handler.done(lineNo);return intermediate;};var callAttrStart=function(state,curIndex,handler,rest,lineNo){var attrName=rest.substring(typeof state.nameStart==="number"?state.nameStart:curIndex,curIndex),newAttrName=canAttributeEncoder_1_1_4_canAttributeEncoder.encode(attrName);state.attrStart=newAttrName;handler.attrStart(state.attrStart,lineNo);state.inName=false;};var callAttrEnd=function(state,curIndex,handler,rest,lineNo){if(state.valueStart!==undefined&&state.valueStart<curIndex){var val=rest.substring(state.valueStart,curIndex);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var quotedVal,closedQuote;quotedVal=rest.substring(state.valueStart-1,curIndex+1);quotedVal=quotedVal.trim();closedQuote=quotedVal.charAt(quotedVal.length-1);if(state.inQuote!==closedQuote){if(handler.filename){dev.warn(handler.filename+":"+lineNo+": End quote is missing for "+val);}else {dev.warn(lineNo+": End quote is missing for "+val);}}}//!steal-remove-end
handler.attrValue(val,lineNo);}// if this never got to be inValue, like `DISABLED` then send a attrValue
// else if(!state.inValue){
// 	handler.attrValue(state.attrStart, lineNo);
// }
handler.attrEnd(state.attrStart,lineNo);state.attrStart=undefined;state.valueStart=undefined;state.inValue=false;state.inName=false;state.lookingForEq=false;state.inQuote=false;state.lookingForName=true;};var findBreak=function(str,magicStart){var magicLength=magicStart.length;for(var i=0,len=str.length;i<len;i++){if(str[i]==="<"||str.substr(i,magicLength)===magicStart){return i;}}return -1;};HTMLParser.parseAttrs=function(rest,handler,lineNo){if(!rest){return;}var i=0;var curIndex;var state={inName:false,nameStart:undefined,inValue:false,valueStart:undefined,inQuote:false,attrStart:undefined,lookingForName:true,lookingForValue:false,lookingForEq:false};while(i<rest.length){curIndex=i;var cur=rest.charAt(i);i++;if(magicStart===rest.substr(curIndex,magicStart.length)){if(state.inValue&&curIndex>state.valueStart){handler.attrValue(rest.substring(state.valueStart,curIndex),lineNo);}// `{{#foo}}DISABLED{{/foo}}`
else if(state.inName&&state.nameStart<curIndex){callAttrStart(state,curIndex,handler,rest,lineNo);callAttrEnd(state,curIndex,handler,rest,lineNo);}// foo={{bar}}
else if(state.lookingForValue){state.inValue=true;}// a {{bar}}
else if(state.lookingForEq&&state.attrStart){callAttrEnd(state,curIndex,handler,rest,lineNo);}magicMatch.lastIndex=curIndex;var match=magicMatch.exec(rest);if(match){handler.special(match[1],lineNo);// i is already incremented
i=curIndex+match[0].length;if(state.inValue){state.valueStart=curIndex+match[0].length;}}}else if(state.inValue){if(state.inQuote){if(cur===state.inQuote){callAttrEnd(state,curIndex,handler,rest,lineNo);}}else if(space.test(cur)){callAttrEnd(state,curIndex,handler,rest,lineNo);}}// if we hit an = outside a value
else if(cur==="="&&(state.lookingForEq||state.lookingForName||state.inName)){// if we haven't yet started this attribute `{{}}=foo` case:
if(!state.attrStart){callAttrStart(state,curIndex,handler,rest,lineNo);}state.lookingForValue=true;state.lookingForEq=false;state.lookingForName=false;}// if we are currently in a name:
//  when the name starts with `{` or `(`
//  it isn't finished until the matching end character is found
//  otherwise, a space finishes the name
else if(state.inName){var started=rest[state.nameStart],otherStart,otherOpposite;if(startOppositesMap[started]===cur){//handle mismatched brackets: `{(})` or `({)}`
otherStart=started==="{"?"(":"{";otherOpposite=startOppositesMap[otherStart];if(rest[curIndex+1]===otherOpposite){callAttrStart(state,curIndex+2,handler,rest,lineNo);i++;}else {callAttrStart(state,curIndex+1,handler,rest,lineNo);}state.lookingForEq=true;}else if(space.test(cur)&&started!=="{"&&started!=="("){callAttrStart(state,curIndex,handler,rest,lineNo);state.lookingForEq=true;}}else if(state.lookingForName){if(!space.test(cur)){// might have just started a name, we need to close it
if(state.attrStart){callAttrEnd(state,curIndex,handler,rest,lineNo);}state.nameStart=curIndex;state.inName=true;}}else if(state.lookingForValue){if(!space.test(cur)){state.lookingForValue=false;state.inValue=true;if(cur==="'"||cur==='"'){state.inQuote=cur;state.valueStart=curIndex+1;}else {state.valueStart=curIndex;}// if we are looking for a value
// at the end of the loop we need callAttrEnd
}else if(i===rest.length){callAttrEnd(state,curIndex,handler,rest,lineNo);}}}if(state.inName){callAttrStart(state,curIndex+1,handler,rest,lineNo);callAttrEnd(state,curIndex+1,handler,rest,lineNo);}else if(state.lookingForEq||state.lookingForValue||state.inValue){callAttrEnd(state,curIndex+1,handler,rest,lineNo);}magicMatch.lastIndex=0;};HTMLParser.searchStartTag=function(html){var closingIndex=html.indexOf('>');// The first closing bracket we find might be in an attribute value.
// Move through the attributes by regexp.
var attributeRange=attributeRegexp.exec(html.substring(1));var afterAttributeOffset=1;// if the closing index is after the next attribute...
while(attributeRange&&closingIndex>=afterAttributeOffset+attributeRange.index){// prepare to move to the attribute after this one by increasing the offset
afterAttributeOffset+=attributeRange.index+attributeRange[0].length;// if the closing index is before the new offset, then this closing index is inside
//  an attribute value and should be ignored.  Find the *next* closing character.
while(closingIndex<afterAttributeOffset){closingIndex+=html.substring(closingIndex+1).indexOf('>')+1;}// find the next attribute by starting from the new offset.
attributeRange=attributeRegexp.exec(html.substring(afterAttributeOffset));}// if there is no closing bracket
// <input class=
// or if the tagName does not start with alphaNumer character
// <_iaois>
// it is not a startTag
if(closingIndex===-1||!alphaRegex.test(html[1])){return null;}var tagName,tagContent,match,rest='',unary='';var startTag=html.substring(0,closingIndex+1);var isUnary=startTag[startTag.length-2]==='/';var spaceIndex=startTag.search(space);if(isUnary){unary='/';tagContent=startTag.substring(1,startTag.length-2).trim();}else {tagContent=startTag.substring(1,startTag.length-1).trim();}if(spaceIndex===-1){tagName=tagContent;}else {//spaceIndex needs to shift one to the left
spaceIndex--;tagName=tagContent.substring(0,spaceIndex);rest=tagContent.substring(spaceIndex);}match=[startTag,tagName,rest,unary];return {match:match,html:html.substring(startTag.length)};};var canViewParser_4_1_3_canViewParser=canNamespace_1_0_0_canNamespace.HTMLParser=HTMLParser;/**
 * @module {function} can-globals/location/location location
 * @parent can-globals/modules
 * 
 * Get the global [`location`](https://developer.mozilla.org/en-US/docs/Web/API/Window/location) object for the current context.
 * 
 * @signature `LOCATION([newLocation])`
 * 
 * Optionally sets, and returns, the [`location`](https://developer.mozilla.org/en-US/docs/Web/API/Window/location) object for the context.
 * 
 * ```js
 * var locationShim = { path: '/' };
 * var LOCATION = require('can-globals/location/location');
 * LOCATION(locationShim);
 * LOCATION().path; // -> '/'
 * ```
 *
 * @param {Object} location An optional location-like object to set as the context's location
 *
 * @return {Object} The location object for this JavaScript environment.
 */canGlobals_1_2_2_canGlobalsInstance.define('location',function(){return canGlobals_1_2_2_canGlobalsInstance.getKeyValue('global').location;});var location_1=canGlobals_1_2_2_canGlobalsInstance.makeExport('location');/**
 * @module {function} can-globals/mutation-observer/mutation-observer mutation-observer
 * @parent can-globals/modules
 * 
 * Get the global [`MutationObserver`](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) object for the current context.
 * 
 * @signature `MUTATIONOBSERVER([newMutationObserver])`
 * 
 * Optionally sets, and returns, the [`MutationObserver`](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) object for the context.
 * 
 * ```js
 * var mutationObserverShim = require('can-globals/mutation-observer/mutation-observer');
 * MUTATIONOBSERVER(mutationObserverShim);
 * MUTATIONOBSERVER() //-> MutationObserver
 * ```
 *
 * @param {Object} MutationObserver An optional MutationObserver-like object to set as the context's MutationObserver
 *
 * @return {Object} The MutationObserver object for this JavaScript environment.
 */canGlobals_1_2_2_canGlobalsInstance.define('MutationObserver',function(){var GLOBAL=canGlobals_1_2_2_canGlobalsInstance.getKeyValue('global');return GLOBAL.MutationObserver||GLOBAL.WebKitMutationObserver||GLOBAL.MozMutationObserver;});var mutationObserver=canGlobals_1_2_2_canGlobalsInstance.makeExport('MutationObserver');/**
 * @module {function} can-globals/custom-elements/custom-elements custom-elements
 * @parent can-globals/modules
 *
 * Get the global [`customElements`](https://developer.mozilla.org/en-US/docs/Web/API/Window/customElements) object for the current context.
 *
 * @signature `CUSTOMELEMENTS([newCustomElements])`
 *
 * Optionally sets, and returns, the [`customElements`](https://developer.mozilla.org/en-US/docs/Web/API/Window/customElements) object for the context.
 *
 * ```js
 * var customElementsShim = require('some-custom-elements-shim');
 * CUSTOMELEMENTS(customElementsShim);
 * CUSTOMELEMENTS() //-> customElementsShim
 * ```
 *
 * @param {Object} customElements An optional CustomElementRegistry-like object to set as the context's customElements
 *
 * @return {Object} The customElements object for this JavaScript environment.
 */canGlobals_1_2_2_canGlobalsInstance.define('customElements',function(){var GLOBAL=canGlobals_1_2_2_canGlobalsInstance.getKeyValue('global');return GLOBAL.customElements;});canGlobals_1_2_2_canGlobalsInstance.makeExport('customElements');var canGlobals_1_2_2_canGlobals=canGlobals_1_2_2_canGlobalsInstance;function eliminate(array,item){var index=array.indexOf(item);if(index>=0){array.splice(index,1);}}function wasNotInSet(item,set){var inSet=set.has(item);if(inSet===false){set.add(item);}return !inSet;}function contains(parent,child){if(child&&child.nodeType===Node.TEXT_NODE){return contains(parent,child.parentNode);}if(parent.contains){return parent.contains(child);}if(parent.nodeType===Node.DOCUMENT_NODE&&parent.documentElement){return contains(parent.documentElement,child);}else {child=child.parentNode;if(child===parent){return true;}return false;}}function isDocumentElement$1(node){return document$1().documentElement===node;}function isFragment(node){return !!(node&&node.nodeType===11);}function isElementNode(node){return !!(node&&node.nodeType===1);}function getChildren$1(parentNode){var nodes=[];var node=parentNode.firstChild;while(node){nodes.push(node);node=node.nextSibling;}return nodes;}function getParents(node){var nodes;if(isFragment(node)){nodes=getChildren$1(node);}else {nodes=[node];}return nodes;}function getNodesLegacyB(node){var skip,tmp;var depth=0;var items=isFragment(node)?[]:[node];if(node.firstChild==null){return items;}// Always start with the initial element.
do{if(!skip&&(tmp=node.firstChild)){depth++;items.push(tmp);}else if(tmp=node.nextSibling){skip=false;items.push(tmp);}else {// Skipped or no first child and no next sibling, so traverse upwards,
tmp=node.parentNode;// and decrement the depth.
depth--;// Enable skipping, so that in the next loop iteration, the children of
// the now-current node (parent node) aren't processed again.
skip=true;}// Instead of setting node explicitly in each conditional block, use the
// tmp var and set it here.
node=tmp;// Stop if depth comes back to 0 (or goes below zero, in conditions where
// the passed node has neither children nore next siblings).
}while(depth>0);return items;}// IE11 requires a filter parameter for createTreeWalker
// it also must be an object with an `acceptNode` property
function treeWalkerFilterFunction(){return NodeFilter.FILTER_ACCEPT;}var treeWalkerFilter=treeWalkerFilterFunction;treeWalkerFilter.acceptNode=treeWalkerFilterFunction;function getNodesWithTreeWalker(rootNode){var result=isFragment(rootNode)?[]:[rootNode];// IE11 throws if createTreeWalker is called on a non-ElementNode
var walker=isElementNode(rootNode)&&document$1().createTreeWalker(rootNode,NodeFilter.SHOW_TEXT|NodeFilter.SHOW_ELEMENT|NodeFilter.SHOW_COMMENT,treeWalkerFilter,false);var node;while(node=walker&&walker.nextNode()){result.push(node);}return result;}function getAllNodes(node){if(document$1().createTreeWalker!==undefined){return getNodesWithTreeWalker(node);}else {return getNodesLegacyB(node);}}function subscription(fn){return function _subscription(){var disposal=fn.apply(this,arguments);var isDisposed=false;return function _disposal(){if(isDisposed){var fnName=fn.name||fn.displayName||'an anonymous function';var message='Disposal function returned by '+fnName+' called more than once.';throw new Error(message);}disposal.apply(this,arguments);isDisposed=true;};};}var canDomMutate_2_0_9_Util={eliminate:eliminate,getDocument:document$1,isDocumentElement:isDocumentElement$1,isFragment:isFragment,getParents:getParents,getAllNodes:getAllNodes,getChildren:getChildren$1,subscription:subscription,wasNotInSet:wasNotInSet,contains:contains};var contains$1=canDomMutate_2_0_9_Util.contains;var mutate={};var isConnected;function getIsConnectedFromNode(node){return node.isConnected;}function getIsConnectedFromDocument(node){var doc=node.ownerDocument;// if node *is* the document, ownerDocument is null
// However, CanSimpleDom implements this incorrectly, and a document's ownerDocument is itself,
//   so make both checks
return doc===null||doc===node||contains$1(doc,node);}function setIsConnected(doc){if(doc){var node=doc.createTextNode("");isConnected='isConnected'in node.constructor.prototype?getIsConnectedFromNode:getIsConnectedFromDocument;if(mutate){mutate.isConnected=isConnected;}}else {mutate.isConnected=getIsConnectedFromNode;}}setIsConnected(canGlobals_1_2_2_canGlobals.getKeyValue("document"));canGlobals_1_2_2_canGlobals.onKeyValue("document",setIsConnected);var canDomMutate_2_0_9_IsConnected=mutate;var eliminate$1=canDomMutate_2_0_9_Util.eliminate;var subscription$1=canDomMutate_2_0_9_Util.subscription;var isDocumentElement$1$1=canDomMutate_2_0_9_Util.isDocumentElement;var getAllNodes$1=canDomMutate_2_0_9_Util.getAllNodes;var domMutate,dispatchNodeInserted,dispatchNodeConnected,dispatchGlobalConnected,dispatchNodeRemoved,dispatchNodeDisconnected,dispatchGlobalDisconnected,dispatchAttributeChange;var dataStore=new WeakMap();var queue;function getRelatedData(node,key){var data=dataStore.get(node);if(data){return data[key];}}function setRelatedData(node,key,targetListenersMap){var data=dataStore.get(node);if(!data){data={};dataStore.set(node,data);}data[key]=targetListenersMap;}function deleteRelatedData(node,key){var data=dataStore.get(node);return delete data[key];}function toMutationEvent(node,mutation){return {target:node,sourceMutation:mutation};}function getDocumentListeners(target,key){// TODO: it's odd these functions read DOCUMENT() instead of
// target.ownerDocument.  To change to ownerDocument, we might need a "is document"
// check.
var doc=document$1();var data=getRelatedData(doc,key);if(data){return data.listeners;}}function getTargetListeners(target,key){var doc=document$1();var targetListenersMap=getRelatedData(doc,key);if(!targetListenersMap){return;}return targetListenersMap.get(target);}function addTargetListener(target,key,listener){var doc=document$1();var targetListenersMap=getRelatedData(doc,key);if(!targetListenersMap){targetListenersMap=new WeakMap();setRelatedData(doc,key,targetListenersMap);}var targetListeners=targetListenersMap.get(target);if(!targetListeners){targetListeners=[];targetListenersMap.set(target,targetListeners);}targetListeners.push(listener);}function removeTargetListener(target,key,listener){var doc=document$1();var targetListenersMap=getRelatedData(doc,key);if(!targetListenersMap){return;}var targetListeners=targetListenersMap.get(target);if(!targetListeners){return;}eliminate$1(targetListeners,listener);if(targetListeners.length===0){targetListenersMap['delete'](target);if(targetListenersMap.size===0){deleteRelatedData(doc,key);}}}var promise=Promise.resolve();function nextTick(handler){promise.then(handler);}//var recordsAndCallbacks = null;
function flushCallbacks(callbacks,arg){var callbacksCount=callbacks.length;var safeCallbacks=callbacks.slice(0);for(var c=0;c<callbacksCount;c++){safeCallbacks[c](arg);}}function dispatch$1(getListeners,targetKey){return function dispatchEvents(event){var targetListeners=getListeners(event.target,targetKey);if(targetListeners){flushCallbacks(targetListeners,event);}};}var count=0;function observeMutations(target,observerKey,config,handler){var observerData=getRelatedData(target,observerKey);if(!observerData){observerData={observingCount:0};setRelatedData(target,observerKey,observerData);}var setupObserver=function(){// disconnect the old one
if(observerData.observer){observerData.observer.disconnect();observerData.observer=null;}var MutationObserver=mutationObserver();if(MutationObserver){var Node=global_1().Node;var isRealNode=!!(Node&&target instanceof Node);if(isRealNode){var targetObserver=new MutationObserver(handler);targetObserver.id=count++;targetObserver.observe(target,config);observerData.observer=targetObserver;}}};if(observerData.observingCount===0){canGlobals_1_2_2_canGlobals.onKeyValue('MutationObserver',setupObserver);setupObserver();}observerData.observingCount++;return function stopObservingMutations(){var observerData=getRelatedData(target,observerKey);if(observerData){observerData.observingCount--;if(observerData.observingCount<=0){if(observerData.observer){observerData.observer.disconnect();}deleteRelatedData(target,observerKey);canGlobals_1_2_2_canGlobals.offKeyValue('MutationObserver',setupObserver);}}};}var treeMutationConfig={subtree:true,childList:true};var attributeMutationConfig={attributes:true,attributeOldValue:true};function addNodeListener(listenerKey,observerKey,isAttributes){return subscription$1(function _addNodeListener(target,listener){// DocumentFragment
if(target.nodeType===11){// This returns a noop without actually doing anything.
// We should probably warn about passing a DocumentFragment here,
// but since can-stache does so currently we are ignoring until that is
// fixed.
return Function.prototype;}var stopObserving;if(isAttributes){stopObserving=observeMutations(target,observerKey,attributeMutationConfig,queue.enqueueAndFlushMutations);}else {stopObserving=observeMutations(document$1(),observerKey,treeMutationConfig,queue.enqueueAndFlushMutations);}addTargetListener(target,listenerKey,listener);return function removeNodeListener(){if(stopObserving){stopObserving();}removeTargetListener(target,listenerKey,listener);};});}function addGlobalListener(globalDataKey,addNodeListener){return subscription$1(function addGlobalGroupListener(documentElement,listener){if(!isDocumentElement$1$1(documentElement)){throw new Error('Global mutation listeners must pass a documentElement');}var doc=document$1();var documentData=getRelatedData(doc,globalDataKey);if(!documentData){documentData={listeners:[]};setRelatedData(doc,globalDataKey,documentData);}var listeners=documentData.listeners;if(listeners.length===0){// We need at least on listener for mutation events to propagate
documentData.removeListener=addNodeListener(doc,function(){});}listeners.push(listener);return function removeGlobalGroupListener(){var documentData=getRelatedData(doc,globalDataKey);if(!documentData){return;}var listeners=documentData.listeners;eliminate$1(listeners,listener);if(listeners.length===0){documentData.removeListener();deleteRelatedData(doc,globalDataKey);}};});}var domMutationPrefix='domMutation';// target listener keys
var connectedDataKey=domMutationPrefix+'ConnectedData';var disconnectedDataKey=domMutationPrefix+'DisconnectedData';var insertedDataKey=domMutationPrefix+'InsertedData';var removedDataKey=domMutationPrefix+'RemovedData';var attributeChangeDataKey=domMutationPrefix+'AttributeChangeData';// document listener keys
var documentConnectedDataKey=domMutationPrefix+'DocumentConnectedData';var documentDisconnectedDataKey=domMutationPrefix+'DocumentDisconnectedData';var documentAttributeChangeDataKey=domMutationPrefix+'DocumentAttributeChangeData';// observer keys
var treeDataKey=domMutationPrefix+'TreeData';var attributeDataKey=domMutationPrefix+'AttributeData';dispatchNodeInserted=dispatch$1(getTargetListeners,insertedDataKey);dispatchNodeConnected=dispatch$1(getTargetListeners,connectedDataKey);dispatchGlobalConnected=dispatch$1(getDocumentListeners,documentConnectedDataKey);dispatchNodeRemoved=dispatch$1(getTargetListeners,removedDataKey);dispatchNodeDisconnected=dispatch$1(getTargetListeners,disconnectedDataKey);dispatchGlobalDisconnected=dispatch$1(getDocumentListeners,documentDisconnectedDataKey);dispatchAttributeChange=dispatch$1(getTargetListeners,attributeChangeDataKey);// node listeners
var addNodeConnectedListener=addNodeListener(connectedDataKey,treeDataKey);var addNodeDisconnectedListener=addNodeListener(disconnectedDataKey,treeDataKey);var addNodeInsertedListener=addNodeListener(insertedDataKey,treeDataKey);var addNodeRemovedListener=addNodeListener(removedDataKey,treeDataKey);var addNodeAttributeChangeListener=addNodeListener(attributeChangeDataKey,attributeDataKey,true);// global listeners
var addConnectedListener=addGlobalListener(documentConnectedDataKey,addNodeConnectedListener);var addDisconnectedListener=addGlobalListener(documentDisconnectedDataKey,addNodeDisconnectedListener);var addAttributeChangeListener=addGlobalListener(documentAttributeChangeDataKey,addNodeAttributeChangeListener);// ==========================================
function dispatchTreeMutation(mutation,processedState){// was the mutation connected
var wasConnected=mutation.isConnected===true||mutation.isConnected===undefined;// there are
// - the global connected
// - individual connected
// - individual inserted
var removedCount=mutation.removedNodes.length;for(var r=0;r<removedCount;r++){// get what already isn't in `removed`
// see if "removed"
// if wasConnected .. dispatch disconnected
var removedNodes=getAllNodes$1(mutation.removedNodes[r]);removedNodes.forEach(function(node){var event=toMutationEvent(node,mutation);if(canDomMutate_2_0_9_Util.wasNotInSet(node,processedState.removed)){dispatchNodeRemoved(event);}if(wasConnected&&canDomMutate_2_0_9_Util.wasNotInSet(node,processedState.disconnected)){dispatchNodeDisconnected(event);dispatchGlobalDisconnected(event);}});}var addedCount=mutation.addedNodes.length;for(var a=0;a<addedCount;a++){var insertedNodes=getAllNodes$1(mutation.addedNodes[a]);insertedNodes.forEach(function(node){var event=toMutationEvent(node,mutation);if(canDomMutate_2_0_9_Util.wasNotInSet(node,processedState.inserted)){dispatchNodeInserted(event);}if(wasConnected&&canDomMutate_2_0_9_Util.wasNotInSet(node,processedState.connected)){dispatchNodeConnected(event);dispatchGlobalConnected(event);}});}// run mutation
}var FLUSHING_MUTATIONS=[];var IS_FLUSHING=false;var IS_FLUSH_PENDING=false;var ENQUEUED_MUTATIONS=[];queue={// This is used to dispatch mutations immediately.
// This is usually called by the result of a mutation observer.
enqueueAndFlushMutations:function(mutations){if(IS_FLUSH_PENDING){FLUSHING_MUTATIONS=FLUSHING_MUTATIONS.concat(ENQUEUED_MUTATIONS);IS_FLUSH_PENDING=false;ENQUEUED_MUTATIONS=[];}FLUSHING_MUTATIONS=FLUSHING_MUTATIONS.concat(mutations);if(IS_FLUSHING){return;}IS_FLUSHING=true;var index=0;var processedState={connected:new Set(),disconnected:new Set(),inserted:new Set(),removed:new Set()};while(index<FLUSHING_MUTATIONS.length){var mutation=FLUSHING_MUTATIONS[index];// process mutation
if(mutation.type==="childList"){dispatchTreeMutation(mutation,processedState);}else if(mutation.type==="attributes"){dispatchAttributeChange(mutation);}index++;}FLUSHING_MUTATIONS=[];IS_FLUSHING=false;},// called to dipatch later unless we are already dispatching.
enqueueMutationsAndFlushAsync:function(mutations){ENQUEUED_MUTATIONS=ENQUEUED_MUTATIONS.concat(mutations);// if there are currently dispatching mutations, this should happen sometime after
if(!IS_FLUSH_PENDING){IS_FLUSH_PENDING=true;nextTick(function(){if(IS_FLUSH_PENDING){IS_FLUSH_PENDING=false;var pending=ENQUEUED_MUTATIONS;ENQUEUED_MUTATIONS=[];queue.enqueueAndFlushMutations(pending);}});}}};// ==========================================
domMutate={/**
	* @function can-dom-mutate.dispatchNodeInsertion dispatchNodeInsertion
	* @hide
	*
	* Dispatch an insertion mutation on the given node.
	*
	* @signature `dispatchNodeInsertion( node [, callback ] )`
	* @parent can-dom-mutate.static
	* @param {Node} node The node on which to dispatch an insertion mutation.
	*/dispatchNodeInsertion:function(node,target){queue.enqueueMutationsAndFlushAsync([{type:"childList",target:target,addedNodes:[node],isConnected:canDomMutate_2_0_9_IsConnected.isConnected(target),removedNodes:[]}]);/*
		var nodes = new Set();
		util.addToSet( getAllNodes(node), nodes);
		var events = toMutationEvents( canReflect.toArray(nodes) );
		// this is basically an array of every single child of node including node
		dispatchInsertion(events, callback, dispatchConnected, flushAsync);*/},/**
	* @function can-dom-mutate.dispatchNodeRemoval dispatchNodeRemoval
	* @hide
	*
	* Dispatch a removal mutation on the given node.
	*
	* @signature `dispatchNodeRemoval( node [, callback ] )`
	* @parent can-dom-mutate.static
	* @param {Node} node The node on which to dispatch a removal mutation.
	* @param {function} callback The optional callback called after the mutation is dispatched.
	*/dispatchNodeRemoval:function(node,target){queue.enqueueMutationsAndFlushAsync([{type:"childList",target:target,addedNodes:[],removedNodes:[node],isConnected:canDomMutate_2_0_9_IsConnected.isConnected(target)}]);/*
		var nodes = new Set();
		util.addToSet( getAllNodes(node), nodes);
		var events = toMutationEvents( canReflect.toArray(nodes) );
		dispatchRemoval(events, callback, dispatchConnected, flushAsync);*/},/**
	* @function can-dom-mutate.dispatchNodeAttributeChange dispatchNodeAttributeChange
	* @parent can-dom-mutate.static
	* @hide
	*
	* Dispatch an attribute change mutation on the given node.
	*
	* @signature `dispatchNodeAttributeChange( node, attributeName, oldValue [, callback ] )`
	*
	* ```
	* input.setAttribute("value", "newValue")
	* domMutate.dispatchNodeAttributeChange(input, "value","oldValue")
	* ```
	*
	*
	* @param {Node} target The node on which to dispatch an attribute change mutation.
	* @param {String} attributeName The attribute name whose value has changed.
	* @param {String} oldValue The attribute value before the change.
	*/dispatchNodeAttributeChange:function(target,attributeName,oldValue){queue.enqueueMutationsAndFlushAsync([{type:"attributes",target:target,attributeName:attributeName,oldValue:oldValue}]);},/**
	* @function can-dom-mutate.onNodeConnected onNodeConnected
	*
	* Listen for insertion mutations on the given node.
	*
	* @signature `onNodeConnected( node, callback )`
	* @parent can-dom-mutate.static
	* @param {Node} node The node on which to listen for insertion mutations.
	* @param {function} callback The callback called when an insertion mutation is dispatched.
	* @return {function} The callback to remove the mutation listener.
	*/onNodeConnected:addNodeConnectedListener,onNodeInsertion:function(){// TODO: remove in prod
console.warn("can-dom-mutate: Use onNodeConnected instead of onNodeInsertion");return addNodeConnectedListener.apply(this,arguments);},/**
	* @function can-dom-mutate.onNodeDisconnected onNodeDisconnected
	*
	* Listen for removal mutations on the given node.
	*
	* @signature `onNodeDisconnected( node, callback )`
	* @parent can-dom-mutate.static
	* @param {Node} node The node on which to listen for removal mutations.
	* @param {function} callback The callback called when a removal mutation is dispatched.
	* @return {function} The callback to remove the mutation listener.
	*/onNodeDisconnected:addNodeDisconnectedListener,onNodeRemoval:function(){// TODO: remove in prod
console.warn("can-dom-mutate: Use onNodeDisconnected instead of onNodeRemoval");return addNodeDisconnectedListener.apply(this,arguments);},/**
	* @function can-dom-mutate.onNodeAttributeChange onNodeAttributeChange
	*
	* Listen for attribute change mutations on the given node.
	*
	* @signature `onNodeAttributeChange( node, callback )`
	* @parent can-dom-mutate.static
	* @param {Node} node The node on which to listen for attribute change mutations.
	* @param {function} callback The callback called when an attribute change mutation is dispatched.
	* @return {function} The callback to remove the mutation listener.
	*/onNodeAttributeChange:addNodeAttributeChangeListener,/**
	* @function can-dom-mutate.onDisconnected onDisconnected
	*
	* Listen for removal mutations on any node within the documentElement.
	*
	* @signature `onDisconnected( documentElement, callback )`
	* @parent can-dom-mutate.static
	* @param {Node} documentElement The documentElement on which to listen for removal mutations.
	* @param {function} callback The callback called when a removal mutation is dispatched.
	* @return {function} The callback to remove the mutation listener.
	*/onDisconnected:addDisconnectedListener,onRemoval:function(){// TODO: remove in prod
console.warn("can-dom-mutate: Use onDisconnected instead of onRemoval");return addDisconnectedListener.apply(this,arguments);},/**
	* @function can-dom-mutate.onConnected onConnected
	*
	* Listen for insertion mutations on any node within the documentElement.
	*
	* @signature `onConnected( documentElement, callback )`
	* @parent can-dom-mutate.static
	* @param {Node} documentElement The documentElement on which to listen for removal mutations.
	* @param {function} callback The callback called when a insertion mutation is dispatched.
	* @return {function} The callback to remove the mutation listener.
	*/onConnected:addConnectedListener,onInsertion:function(){// TODO: remove in prod
console.warn("can-dom-mutate: Use onConnected instead of onInsertion");return addConnectedListener.apply(this,arguments);},/**
	* @function can-dom-mutate.onAttributeChange onAttributeChange
	*
	* Listen for attribute change mutations on any node within the documentElement.
	*
	* @signature `onAttributeChange( documentElement, callback )`
	* @parent can-dom-mutate.static
	* @param {Node} documentElement The documentElement on which to listen for removal mutations.
	* @param {function} callback The callback called when an attribute change mutation is dispatched.
	* @return {function} The callback to remove the mutation listener.
	*/onAttributeChange:addAttributeChangeListener,flushRecords:function(doc){doc=doc||document$1();var data=dataStore.get(doc),records=[];if(data){if(data.domMutationTreeData&&data.domMutationTreeData.observer){records=data.domMutationTreeData.observer.takeRecords();}}queue.enqueueAndFlushMutations(records);},onNodeInserted:addNodeInsertedListener,onNodeRemoved:addNodeRemovedListener};//!steal-remove-start
if(process.env.NODE_ENV!=="production"){domMutate.dataStore=dataStore;}//!steal-remove-end
var canDomMutate_2_0_9_canDomMutate=canNamespace_1_0_0_canNamespace.domMutate=domMutate;var getParents$1=canDomMutate_2_0_9_Util.getParents;var compat$1={replaceChild:function(newChild,oldChild){var newChildren=getParents$1(newChild);var result=this.replaceChild(newChild,oldChild);canDomMutate_2_0_9_canDomMutate.dispatchNodeRemoval(oldChild,this);for(var i=0;i<newChildren.length;i++){canDomMutate_2_0_9_canDomMutate.dispatchNodeInsertion(newChildren[i],this);}return result;},setAttribute:function(name,value){var oldAttributeValue=this.getAttribute(name);var result=this.setAttribute(name,value);var newAttributeValue=this.getAttribute(name);if(oldAttributeValue!==newAttributeValue){canDomMutate_2_0_9_canDomMutate.dispatchNodeAttributeChange(this,name,oldAttributeValue);}return result;},setAttributeNS:function(namespace,name,value){var oldAttributeValue=this.getAttribute(name);var result=this.setAttributeNS(namespace,name,value);var newAttributeValue=this.getAttribute(name);if(oldAttributeValue!==newAttributeValue){canDomMutate_2_0_9_canDomMutate.dispatchNodeAttributeChange(this,name,oldAttributeValue);}return result;},removeAttribute:function(name){var oldAttributeValue=this.getAttribute(name);var result=this.removeAttribute(name);if(oldAttributeValue){canDomMutate_2_0_9_canDomMutate.dispatchNodeAttributeChange(this,name,oldAttributeValue);}return result;}};var compatData=[['appendChild','Insertion'],['insertBefore','Insertion'],['removeChild','Removal']];compatData.forEach(function(pair){var nodeMethod=pair[0];var dispatchMethod='dispatchNode'+pair[1];compat$1[nodeMethod]=function(node){var nodes=getParents$1(node);var result=this[nodeMethod].apply(this,arguments);for(var i=0;i<nodes.length;i++){canDomMutate_2_0_9_canDomMutate[dispatchMethod](nodes[i],this);}return result;};});var normal={};var nodeMethods=['appendChild','insertBefore','removeChild','replaceChild','setAttribute','setAttributeNS','removeAttribute'];nodeMethods.forEach(function(methodName){normal[methodName]=function(){if(canDomMutate_2_0_9_IsConnected.isConnected(this)){return this[methodName].apply(this,arguments);}else {return compat$1[methodName].apply(this,arguments);}};});/**
* @module {{}} can-dom-mutate/node node
* @parent can-dom-mutate/modules
*
* Append, insert, and remove DOM nodes. Also, change node attributes.
* This allows mutations to be dispatched in environments where MutationObserver is not supported.
* @signature `mutateNode`
*
* Exports an `Object` with methods that shouhld be used to mutate HTML.
*
* ```js
* var mutateNode = require('can-dom-mutate/node');
* var el = document.createElement('div');
*
* mutateNode.appendChild.call(document.body, el);
*
* ```
*/var mutate$1={};/**
* @function can-dom-mutate/node.appendChild appendChild
* @parent can-dom-mutate/node
*
* Append a node to an element, effectively `Node.prototype.appendChild`.
*
* @signature `mutate.appendChild.call(parent, child)`
*
* @param {Node} parent The parent into which the child is inserted.
* @param {Node} child The child which will be inserted into the parent.
* @return {Node} The appended child.
*//**
* @function can-dom-mutate/node.insertBefore insertBefore
* @parent can-dom-mutate/node
*
* Insert a node before a given reference node in an element, effectively `Node.prototype.insertBefore`.
*
* @signature `mutate.insertBefore.call(parent, child, reference)`
* @param {Node} parent The parent into which the child is inserted.
* @param {Node} child The child which will be inserted into the parent.
* @param {Node} reference The reference which the child will be placed before.
* @return {Node} The inserted child.
*//**
* @function can-dom-mutate/node.removeChild removeChild
* @parent can-dom-mutate/node
*
* Remove a node from an element, effectively `Node.prototype.removeChild`.
*
* @signature `mutate.removeChild.call(parent, child)`
*
* @param {Node} parent The parent from which the child is removed.
* @param {Node} child The child which will be removed from the parent.
* @return {Node} The removed child.
*//**
* @function can-dom-mutate/node.replaceChild replaceChild
* @parent can-dom-mutate/node
*
* Insert a node before a given reference node in an element, effectively `Node.prototype.replaceChild`.
*
* @signature `mutate.replaceChild.call(parent, newChild, oldChild)`
*
* @param {Node} parent The parent into which the newChild is inserted.
* @param {Node} newChild The child which is inserted into the parent.
* @param {Node} oldChild The child which is removed from the parent.
* @return {Node} The replaced child.
*//**
* @function can-dom-mutate/node.setAttribute setAttribute
* @parent can-dom-mutate/node
*
* Set an attribute value on an element, effectively `Element.prototype.setAttribute`.
*
* @signature `mutate.setAttribute.call(element, name, value)`
*
* @param {Element} element The element on which to set the attribute.
* @param {String} name The name of the attribute to set.
* @param {String} value The value to set on the attribute.
*//**
* @function can-dom-mutate/node.removeAttribute removeAttribute
* @parent can-dom-mutate/node
*
* Removes an attribute from an element, effectively `Element.prototype.removeAttribute`.
*
* @signature `mutate.removeAttribute.call(element, name, value)`
*
* @param {Element} element The element from which to remove the attribute.
* @param {String} name The name of the attribute to remove.
*/function setMutateStrategy(observer){var strategy=observer?normal:compat$1;for(var key in strategy){mutate$1[key]=strategy[key];}}var mutationObserverKey='MutationObserver';setMutateStrategy(canGlobals_1_2_2_canGlobals.getKeyValue(mutationObserverKey));canGlobals_1_2_2_canGlobals.onKeyValue(mutationObserverKey,setMutateStrategy);var node$1=canNamespace_1_0_0_canNamespace.domMutateNode=canDomMutate_2_0_9_canDomMutate.node=mutate$1;// backwards compatibility
var canDomMutate_2_0_9_node=canNamespace_1_0_0_canNamespace.node=node$1;/**
 * @module {function} can-child-nodes
 * @parent can-dom-utilities
 * @collection can-infrastructure
 * @package ./package.json
 * 
 * @signature `childNodes(node)`
 *
 * Get all of the childNodes of a given node.
 *
 * ```js
 * var stache = require("can-stache");
 * var childNodes = require("can-util/child-nodes/child-nodes");
 *
 * var html = "<div><h1><span></span></h1></div>";
 * var frag = stache(html)();
 *
 * console.log(childNodes(frag)[0].nodeName); // -> DIV
 * ```
 *
 * @param {Object} node The Node that you want child nodes for.
 */function childNodes(node){var childNodes=node.childNodes;if("length"in childNodes){return childNodes;}else {var cur=node.firstChild;var nodes=[];while(cur){nodes.push(cur);cur=cur.nextSibling;}return nodes;}}var canChildNodes_1_2_1_canChildNodes=canNamespace_1_0_0_canNamespace.childNodes=childNodes;/**
@module {function} can-fragment
@parent can-dom-utilities
@collection can-infrastructure
@package ./package.json

Convert a String, HTMLElement, documentFragment, contentArray, or object with a `can.toDOM` symbol into a documentFragment.

@signature `fragment(item, doc)`

@param {String|HTMLElement|documentFragment|contentArray} item
@param {Document} doc   an optional DOM document in which to build the fragment

@return {documentFragment}

@body

## Use

ContentArrays can be used to combine multiple HTMLElements into a single document fragment.  For example:

    var fragment = require("can-fragment");

    var p = document.createElement("p");
    p.innerHTML = "Welcome to <b>CanJS</b>";
    var contentArray = ["<h1>Hi There</h1>", p];
    var fragment = fragment( contentArray )

`fragment` will be a documentFragment with the following elements:

    <h1>Hi There</h1>
    <p>Welcome to <b>CanJS</b></p>

 */// fragment.js
// ---------
// _DOM Fragment support._
var fragmentRE=/^\s*<(\w+)[^>]*>/,toString$2={}.toString,toDOMSymbol=canSymbol_1_7_0_canSymbol.for("can.toDOM");function makeFragment(html,name,doc){if(name===undefined){name=fragmentRE.test(html)&&RegExp.$1;}if(html&&toString$2.call(html.replace)==="[object Function]"){// Fix "XHTML"-style tags in all browsers
html=html.replace(/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,'<$1></$2>');}var container=doc.createElement('div'),temp=doc.createElement('div');// IE's parser will strip any `<tr><td>` tags when `innerHTML`
// is called on a `tbody`. To get around this, we construct a
// valid table with a `tbody` that has the `innerHTML` we want.
// Then the container is the `firstChild` of the `tbody`.
// [source](http://www.ericvasilik.com/2006/07/code-karma.html).
if(name==='tbody'||name==='tfoot'||name==='thead'||name==='colgroup'){temp.innerHTML='<table>'+html+'</table>';container=temp.firstChild.nodeType===3?temp.lastChild:temp.firstChild;}else if(name==='col'){temp.innerHTML='<table><colgroup>'+html+'</colgroup></table>';container=temp.firstChild.nodeType===3?temp.lastChild:temp.firstChild.firstChild;}else if(name==='tr'){temp.innerHTML='<table><tbody>'+html+'</tbody></table>';container=temp.firstChild.nodeType===3?temp.lastChild:temp.firstChild.firstChild;}else if(name==='td'||name==='th'){temp.innerHTML='<table><tbody><tr>'+html+'</tr></tbody></table>';container=temp.firstChild.nodeType===3?temp.lastChild:temp.firstChild.firstChild.firstChild;}else if(name==='option'){temp.innerHTML='<select>'+html+'</select>';container=temp.firstChild.nodeType===3?temp.lastChild:temp.firstChild;}else {container.innerHTML=''+html;}return [].slice.call(canChildNodes_1_2_1_canChildNodes(container));}function fragment(html,doc){if(html&&html.nodeType===11){return html;}if(!doc){doc=document$1();}else if(doc.length){doc=doc[0];}var parts=makeFragment(html,undefined,doc),frag=(doc||document).createDocumentFragment();for(var i=0,length=parts.length;i<length;i++){frag.appendChild(parts[i]);}return frag;}var makeFrag=function(item,doc){var document=doc||document$1();var frag;if(!item||typeof item==="string"){frag=fragment(item==null?"":""+item,document);// If we have an empty frag...
}else if(typeof item[toDOMSymbol]==="function"){return makeFrag(item[toDOMSymbol]());}else if(item.nodeType===11){return item;}else if(typeof item.nodeType==="number"){frag=document.createDocumentFragment();frag.appendChild(item);return frag;}else if(canReflect_1_19_2_canReflect.isListLike(item)){frag=document.createDocumentFragment();canReflect_1_19_2_canReflect.eachIndex(item,function(item){frag.appendChild(makeFrag(item));});}else {frag=fragment(""+item,document);}if(!canChildNodes_1_2_1_canChildNodes(frag).length){frag.appendChild(document.createTextNode(''));}return frag;};var canFragment_1_3_1_canFragment=canNamespace_1_0_0_canNamespace.fragment=canNamespace_1_0_0_canNamespace.frag=makeFrag;var canViewCallbacks_5_0_0_canViewCallbacks=createCommonjsModule(function(module){var callbackMapSymbol=canSymbol_1_7_0_canSymbol.for('can.callbackMap');var initializeSymbol=canSymbol_1_7_0_canSymbol.for('can.initialize');//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var requestedAttributes={};}//!steal-remove-end
var tags={};// WeakSet containing elements that have been rendered already
// and therefore do not need to be rendered again
var automountEnabled=function(){var document=canGlobals_1_2_2_canGlobals.getKeyValue("document");if(document==null||document.documentElement==null){return false;}return document.documentElement.getAttribute("data-can-automount")!=="false";};var renderedElements=new WeakMap();var mountElement=function(node){var tagName=node.tagName&&node.tagName.toLowerCase();var tagHandler=tags[tagName];// skip elements that already have a viewmodel or elements whose tags don't match a registered tag
// or elements that have already been rendered
if(tagHandler){callbacks.tagHandler(node,tagName,{});}};var mutationObserverEnabled=false;var disableMutationObserver;var enableMutationObserver=function(){var docEl=document$1().documentElement;if(mutationObserverEnabled){if(mutationObserverEnabled===docEl){return;}// if the document has changed, re-enable mutationObserver
disableMutationObserver();}var undoOnInsertionHandler=canDomMutate_2_0_9_canDomMutate.onConnected(docEl,function(mutation){mountElement(mutation.target);});mutationObserverEnabled=true;disableMutationObserver=function(){undoOnInsertionHandler();mutationObserverEnabled=false;};};var renderTagsInDocument=function(tagName){var nodes=document$1().getElementsByTagName(tagName);for(var i=0,node;(node=nodes[i])!==undefined;i++){mountElement(node);}};var attr=function(attributeName,attrHandler){if(attrHandler){if(typeof attributeName==="string"){attributes[attributeName]=attrHandler;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(requestedAttributes[attributeName]){dev.warn("can-view-callbacks: "+attributeName+" custom attribute behavior requested before it was defined.  Make sure "+attributeName+" is defined before it is needed.");}}//!steal-remove-end
}else {regExpAttributes.push({match:attributeName,handler:attrHandler});//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.keys(requestedAttributes).forEach(function(requested){if(attributeName.test(requested)){dev.warn("can-view-callbacks: "+requested+" custom attribute behavior requested before it was defined.  Make sure "+requested+" is defined before it is needed.");}});}//!steal-remove-end
}}else {var cb=attributes[attributeName];if(!cb){for(var i=0,len=regExpAttributes.length;i<len;i++){var attrMatcher=regExpAttributes[i];if(attrMatcher.match.test(attributeName)){return attrMatcher.handler;}}}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){requestedAttributes[attributeName]=true;}//!steal-remove-end
return cb;}};var attrs=function(attrMap){var map=canReflect_1_19_2_canReflect.getKeyValue(attrMap,callbackMapSymbol)||attrMap;// Only add bindings once.
if(attrMaps.has(map)){return;}else {// Would prefer to use WeakSet but IE11 doesn't support it.
attrMaps.set(map,true);}canReflect_1_19_2_canReflect.eachKey(map,function(callback,exp){attr(exp,callback);});};var attributes={},regExpAttributes=[],attrMaps=new WeakMap(),automaticCustomElementCharacters=/[-\:]/;var defaultCallback=function(){};var tag=function(tagName,tagHandler){if(tagHandler){var validCustomElementName=automaticCustomElementCharacters.test(tagName),tagExists=typeof tags[tagName.toLowerCase()]!=='undefined',customElementExists;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(tagExists){dev.warn("Custom tag: "+tagName.toLowerCase()+" is already defined");}if(!validCustomElementName&&tagName!=="content"){dev.warn("Custom tag: "+tagName.toLowerCase()+" hyphen missed");}}//!steal-remove-end
tags[tagName.toLowerCase()]=tagHandler;if(automountEnabled()){var customElements=canGlobals_1_2_2_canGlobals.getKeyValue("customElements");// automatically render elements that have tagHandlers
// If browser supports customElements, register the tag as a custom element
if(customElements){customElementExists=customElements.get(tagName.toLowerCase());if(validCustomElementName&&!customElementExists){var CustomElement=function(){return Reflect.construct(HTMLElement,[],CustomElement);};CustomElement.prototype=Object.create(HTMLElement.prototype);CustomElement.prototype.constructor=CustomElement;CustomElement.prototype.connectedCallback=function(){callbacks.tagHandler(this,tagName.toLowerCase(),{});};customElements.define(tagName,CustomElement);}}// If browser doesn't support customElements, set up MutationObserver for
// rendering elements when they are inserted in the page
// and rendering elements that are already in the page
else {enableMutationObserver();renderTagsInDocument(tagName);}}else if(mutationObserverEnabled){disableMutationObserver();}}else {var cb;// if null is passed as tagHandler, remove tag
if(tagHandler===null){delete tags[tagName.toLowerCase()];}else {cb=tags[tagName.toLowerCase()];}if(!cb&&automaticCustomElementCharacters.test(tagName)){// empty callback for things that look like special tags
cb=defaultCallback;}return cb;}};var callbacks={_tags:tags,_attributes:attributes,_regExpAttributes:regExpAttributes,defaultCallback:defaultCallback,tag:tag,attr:attr,attrs:attrs,// handles calling back a tag callback
tagHandler:function(el,tagName,tagData){// skip elements that have already been rendered
if(renderedElements.has(el)){return;}var scope=tagData.scope,helperTagCallback=scope&&scope.templateContext.tags.get(tagName),tagCallback=helperTagCallback||tags[tagName]||el[initializeSymbol],res;// If this was an element like <foo-bar> that doesn't have a component, just render its content
if(tagCallback){res=canObservationRecorder_1_3_1_canObservationRecorder.ignore(tagCallback)(el,tagData);// add the element to the Set of elements that have had their handlers called
// this will prevent the handler from being called again when the element is inserted
renderedElements.set(el,true);}else {res=scope;}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(!tagCallback){var GLOBAL=global_1();var ceConstructor=document$1().createElement(tagName).constructor;// If not registered as a custom element, the browser will use default constructors
if(ceConstructor===GLOBAL.HTMLElement||ceConstructor===GLOBAL.HTMLUnknownElement){dev.warn('can-view-callbacks: No custom element found for '+tagName);}}}//!steal-remove-end
// If the tagCallback gave us something to render with, and there is content within that element
// render it!
if(res&&tagData.subtemplate){if(scope!==res){scope=scope.add(res);}//var nodeList = nodeLists.register([], undefined, tagData.parentNodeList || true, false);
//nodeList.expression = "<" + el.tagName + ">";
var result=tagData.subtemplate(scope,tagData.options);var frag=typeof result==="string"?canFragment_1_3_1_canFragment(result):result;canDomMutate_2_0_9_node.appendChild.call(el,frag);}}};canNamespace_1_0_0_canNamespace.view=canNamespace_1_0_0_canNamespace.view||{};if(canNamespace_1_0_0_canNamespace.view.callbacks){throw new Error("You can't have two versions of can-view-callbacks, check your dependencies");}else {module.exports=canNamespace_1_0_0_canNamespace.view.callbacks=callbacks;}});/* jshint maxdepth:7 *//* jshint latedef:false */// if an object or a function
// convert into what it should look like
// then the modification can happen in place
// but it has to have more than the current node
// blah!
var processNodes=function(nodes,paths,location,document){var frag=document.createDocumentFragment();for(var i=0,len=nodes.length;i<len;i++){var node=nodes[i];frag.appendChild(processNode(node,paths,location.concat(i),document));}return frag;},keepsTextNodes=typeof document!=="undefined"&&function(){var testFrag=document.createDocumentFragment();var div=document.createElement("div");div.appendChild(document.createTextNode(""));div.appendChild(document.createTextNode(""));testFrag.appendChild(div);var cloned=testFrag.cloneNode(true);return cloned.firstChild.childNodes.length===2;}(),clonesWork=typeof document!=="undefined"&&function(){// Since html5shiv is required to support custom elements, assume cloning
// works in any browser that doesn't have html5shiv
// Clone an element containing a custom tag to see if the innerHTML is what we
// expect it to be, or if not it probably was created outside of the document's
// namespace.
var el=document.createElement('a');el.innerHTML="<xyz></xyz>";var clone=el.cloneNode(true);var works=clone.innerHTML==="<xyz></xyz>";var MO,observer;if(works){// Cloning text nodes with dashes seems to create multiple nodes in IE11 when
// MutationObservers of subtree modifications are used on the documentElement.
// Since this is not what we expect we have to include detecting it here as well.
el=document.createDocumentFragment();el.appendChild(document.createTextNode('foo-bar'));MO=mutationObserver();if(MO){observer=new MO(function(){});observer.observe(document.documentElement,{childList:true,subtree:true});clone=el.cloneNode(true);observer.disconnect();}else {clone=el.cloneNode(true);}return clone.childNodes.length===1;}return works;}(),namespacesWork=typeof document!=="undefined"&&!!document.createElementNS;/**
 * @function cloneNode
 * @hide
 *
 * A custom cloneNode function to be used in browsers that properly support cloning
 * of custom tags (IE8 for example). Fixes it by doing some manual cloning that
 * uses innerHTML instead, which has been shimmed.
 *
 * @param {DocumentFragment} frag A document fragment to clone
 * @return {DocumentFragment} a new fragment that is a clone of the provided argument
 */var cloneNode=clonesWork?function(el){return el.cloneNode(true);}:function(node){var document=node.ownerDocument;var copy;if(node.nodeType===1){if(node.namespaceURI!=='http://www.w3.org/1999/xhtml'&&namespacesWork&&document.createElementNS){copy=document.createElementNS(node.namespaceURI,node.nodeName);}else {copy=document.createElement(node.nodeName);}}else if(node.nodeType===3){copy=document.createTextNode(node.nodeValue);}else if(node.nodeType===8){copy=document.createComment(node.nodeValue);}else if(node.nodeType===11){copy=document.createDocumentFragment();}if(node.attributes){var attributes=node.attributes;for(var i=0;i<attributes.length;i++){var attribute=attributes[i];if(attribute&&attribute.specified){// If the attribute has a namespace set the namespace 
// otherwise it will be set to null
if(attribute.namespaceURI){copy.setAttributeNS(attribute.namespaceURI,attribute.nodeName||attribute.name,attribute.nodeValue||attribute.value);}else {copy.setAttribute(attribute.nodeName||attribute.name,attribute.nodeValue||attribute.value);}}}}if(node&&node.firstChild){var child=node.firstChild;while(child){copy.appendChild(cloneNode(child));child=child.nextSibling;}}return copy;};function processNode(node,paths,location,document){var callback,loc=location,nodeType=typeof node,el,p,i,len;var getCallback=function(){if(!callback){callback={path:location,callbacks:[]};paths.push(callback);loc=[];}return callback;};if(nodeType==="object"){if(node.tag){if(namespacesWork&&node.namespace){el=document.createElementNS(node.namespace,node.tag);}else {el=document.createElement(node.tag);}if(node.attrs){for(var attrName in node.attrs){var value=node.attrs[attrName];if(typeof value==="function"){getCallback().callbacks.push({callback:value});}else if(value!==null&&typeof value==="object"&&value.namespaceURI){el.setAttributeNS(value.namespaceURI,attrName,value.value);}else {canDomMutate_2_0_9_node.setAttribute.call(el,attrName,value);}}}if(node.attributes){for(i=0,len=node.attributes.length;i<len;i++){getCallback().callbacks.push({callback:node.attributes[i]});}}if(node.children&&node.children.length){// add paths
if(callback){p=callback.paths=[];}else {p=paths;}el.appendChild(processNodes(node.children,p,loc,document));}}else if(node.comment){el=document.createComment(node.comment);if(node.callbacks){for(i=0,len=node.callbacks.length;i<len;i++){getCallback().callbacks.push({callback:node.callbacks[i]});}}}}else if(nodeType==="string"){el=document.createTextNode(node);}else if(nodeType==="function"){if(keepsTextNodes){el=document.createTextNode("");getCallback().callbacks.push({callback:node});}else {el=document.createComment("~");getCallback().callbacks.push({callback:function(){var el=document.createTextNode("");canDomMutate_2_0_9_node.replaceChild.call(this.parentNode,el,this);return node.apply(el,arguments);}});}}return el;}function getCallbacks(el,pathData,elementCallbacks){var path=pathData.path,callbacks=pathData.callbacks,paths=pathData.paths,child=el,pathLength=path?path.length:0,pathsLength=paths?paths.length:0;for(var i=0;i<pathLength;i++){child=child.childNodes.item(path[i]);}for(i=0;i<pathsLength;i++){getCallbacks(child,paths[i],elementCallbacks);}elementCallbacks.push({element:child,callbacks:callbacks});}function hydrateCallbacks(callbacks,args){var len=callbacks.length,callbacksLength,callbackElement,callbackData;for(var i=0;i<len;i++){callbackData=callbacks[i];callbacksLength=callbackData.callbacks.length;callbackElement=callbackData.element;for(var c=0;c<callbacksLength;c++){callbackData.callbacks[c].callback.apply(callbackElement,args);}}}function makeTarget(nodes,doc){var paths=[];var frag=processNodes(nodes,paths,[],doc||document$1());return {paths:paths,clone:frag,hydrate:function(){var cloned=cloneNode(this.clone);var args=[];for(var a=0,ref=args.length=arguments.length;a<ref;a++){args[a]=arguments[a];}// see https://jsperf.com/nodelist-to-array
var callbacks=[];for(var i=0;i<paths.length;i++){getCallbacks(cloned,paths[i],callbacks);}hydrateCallbacks(callbacks,args);return cloned;}};}makeTarget.keepsTextNodes=keepsTextNodes;makeTarget.cloneNode=cloneNode;canNamespace_1_0_0_canNamespace.view=canNamespace_1_0_0_canNamespace.view||{};var canViewTarget_5_0_0_canViewTarget=canNamespace_1_0_0_canNamespace.view.target=makeTarget;var getKeyValueSymbol$2=canSymbol_1_7_0_canSymbol.for("can.getKeyValue"),observeDataSymbol=canSymbol_1_7_0_canSymbol.for("can.meta");var promiseDataPrototype={isPending:true,state:"pending",isResolved:false,isRejected:false,value:undefined,reason:undefined};function setVirtualProp(promise,property,value){var observeData=promise[observeDataSymbol];var old=observeData[property];observeData[property]=value;canQueues_1_3_2_canQueues.enqueueByQueue(observeData.handlers.getNode([property]),promise,[value,old],function(){return {};},["Promise",promise,"resolved with value",value,"and changed virtual property: "+property]);}function initPromise(promise){var observeData=promise[observeDataSymbol];if(!observeData){Object.defineProperty(promise,observeDataSymbol,{enumerable:false,configurable:false,writable:false,value:Object.create(promiseDataPrototype)});observeData=promise[observeDataSymbol];observeData.handlers=new canKeyTree_1_2_2_canKeyTree([Object,Object,Array]);}promise.then(function(value){canQueues_1_3_2_canQueues.batch.start();setVirtualProp(promise,"isPending",false);setVirtualProp(promise,"isResolved",true);setVirtualProp(promise,"value",value);setVirtualProp(promise,"state","resolved");canQueues_1_3_2_canQueues.batch.stop();},function(reason){canQueues_1_3_2_canQueues.batch.start();setVirtualProp(promise,"isPending",false);setVirtualProp(promise,"isRejected",true);setVirtualProp(promise,"reason",reason);setVirtualProp(promise,"state","rejected");canQueues_1_3_2_canQueues.batch.stop();//!steal-remove-start
if(process.env.NODE_ENV!=='production'){dev.error("Failed promise:",reason);}//!steal-remove-end
});}function setupPromise(value){var oldPromiseFn;var proto="getPrototypeOf"in Object?Object.getPrototypeOf(value):value.__proto__;//jshint ignore:line
if(value[getKeyValueSymbol$2]&&value[observeDataSymbol]){// promise has already been set up.  Don't overwrite.
return;}if(proto===null||proto===Object.prototype){// promise type is a plain object or dictionary.  Set up object instead of proto.
proto=value;if(typeof proto.promise==="function"){// Duck-type identification as a jQuery.Deferred;
// In that case, the promise() function returns a new object
//  that needs to be decorated.
oldPromiseFn=proto.promise;proto.promise=function(){var result=oldPromiseFn.call(proto);setupPromise(result);return result;};}}canReflect_1_19_2_canReflect.assignSymbols(proto,{"can.getKeyValue":function(key){if(!this[observeDataSymbol]){initPromise(this);}canObservationRecorder_1_3_1_canObservationRecorder.add(this,key);switch(key){case"state":case"isPending":case"isResolved":case"isRejected":case"value":case"reason":return this[observeDataSymbol][key];default:return this[key];}},"can.getValue":function(){return this[getKeyValueSymbol$2]("value");},"can.isValueLike":false,"can.onKeyValue":function(key,handler,queue){if(!this[observeDataSymbol]){initPromise(this);}this[observeDataSymbol].handlers.add([key,queue||"mutate",handler]);},"can.offKeyValue":function(key,handler,queue){if(!this[observeDataSymbol]){initPromise(this);}this[observeDataSymbol].handlers.delete([key,queue||"mutate",handler]);},"can.hasOwnKey":function(key){if(!this[observeDataSymbol]){initPromise(this);}return key in this[observeDataSymbol];}});}var canReflectPromise_2_2_1_canReflectPromise=setupPromise;var getValueSymbol$2=canSymbol_1_7_0_canSymbol.for("can.getValue");var setValueSymbol$3=canSymbol_1_7_0_canSymbol.for("can.setValue");var isValueLikeSymbol=canSymbol_1_7_0_canSymbol.for("can.isValueLike");var peek$3=canObservationRecorder_1_3_1_canObservationRecorder.ignore(canReflect_1_19_2_canReflect.getKeyValue.bind(canReflect_1_19_2_canReflect));var observeReader;var isPromiseLike=canObservationRecorder_1_3_1_canObservationRecorder.ignore(function isPromiseLike(value){return typeof value==="object"&&value&&typeof value.then==="function";});var bindName=Function.prototype.bind;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){bindName=function(source){var fn=Function.prototype.bind.call(this,source);Object.defineProperty(fn,"name",{value:canReflect_1_19_2_canReflect.getName(source)+"."+canReflect_1_19_2_canReflect.getName(this)});return fn;};}//!steal-remove-end
var isAt=function(index,reads){var prevRead=reads[index-1];return prevRead&&prevRead.at;};var readValue=function(value,index,reads,options,state,prev){// if the previous read is AT false ... we shouldn't be doing this;
var usedValueReader;do{usedValueReader=false;for(var i=0,len=observeReader.valueReaders.length;i<len;i++){if(observeReader.valueReaders[i].test(value,index,reads,options)){value=observeReader.valueReaders[i].read(value,index,reads,options,state,prev);//usedValueReader = true;
}}}while(usedValueReader);return value;};var specialRead={index:true,key:true,event:true,element:true,viewModel:true};var checkForObservableAndNotify=function(options,state,getObserves,value,index){if(options.foundObservable&&!state.foundObservable){if(canObservationRecorder_1_3_1_canObservationRecorder.trapsCount()){canObservationRecorder_1_3_1_canObservationRecorder.addMany(getObserves());options.foundObservable(value,index);state.foundObservable=true;}}};var objHasKeyAtIndex=function(obj,reads,index){return !!(reads&&reads.length&&canReflect_1_19_2_canReflect.hasKey(obj,reads[index].key));};observeReader={// there are things that you need to evaluate when you get them back as a property read
// for example a compute or a function you might need to call to get the next value to
// actually check
// - readCompute - can be set to `false` to prevent reading an ending compute.  This is used by component to get a
//   compute as a delegate.  In 3.0, this should be removed and force people to write "{@prop} change"
// - callMethodsOnObservables - this is an overwrite ... so normal methods won't be called, but observable ones will.
// - executeAnonymousFunctions - call a function if it's found, defaults to true
// - proxyMethods - if the last read is a method, return a function so `this` will be correct.
// - args - arguments to call functions with.
//
// Callbacks
// - earlyExit - called if a value could not be found
// - foundObservable - called when an observable value is found
read:function(parent,reads,options){options=options||{};var state={foundObservable:false};var getObserves;if(options.foundObservable){getObserves=canObservationRecorder_1_3_1_canObservationRecorder.trap();}// `cur` is the current value.
var cur=readValue(parent,0,reads,options,state),// `prev` is the object we are reading from.
prev,// `foundObs` did we find an observable.
readLength=reads.length,i=0,parentHasKey;checkForObservableAndNotify(options,state,getObserves,parent,0);while(i<readLength){prev=cur;// try to read the property
for(var r=0,readersLength=observeReader.propertyReaders.length;r<readersLength;r++){var reader=observeReader.propertyReaders[r];if(reader.test(cur)){cur=reader.read(cur,reads[i],i,options,state);break;// there can be only one reading of a property
}}checkForObservableAndNotify(options,state,getObserves,prev,i);i=i+1;// read the value if it is a compute or function
cur=readValue(cur,i,reads,options,state,prev);checkForObservableAndNotify(options,state,getObserves,prev,i-1);// early exit if need be
if(i<reads.length&&(cur===null||cur===undefined)){parentHasKey=objHasKeyAtIndex(prev,reads,i-1);if(options.earlyExit&&!parentHasKey){options.earlyExit(prev,i-1,cur);}// return undefined so we know this isn't the right value
return {value:undefined,parent:prev,parentHasKey:parentHasKey,foundLastParent:false};}}parentHasKey=objHasKeyAtIndex(prev,reads,reads.length-1);// if we don't have a value, exit early.
if(cur===undefined&&!parentHasKey){if(options.earlyExit){options.earlyExit(prev,i-1);}}return {value:cur,parent:prev,parentHasKey:parentHasKey,foundLastParent:true};},get:function(parent,reads,options){return observeReader.read(parent,observeReader.reads(reads),options||{}).value;},valueReadersMap:{},// an array of types that might have a value inside them like functions
// value readers check the current value
// and get a new value from it
// ideally they would keep calling until
// none of these passed
valueReaders:[{name:"function",// if this is a function before the last read and its not a constructor function
test:function(value){return value&&canReflect_1_19_2_canReflect.isFunctionLike(value)&&!canReflect_1_19_2_canReflect.isConstructorLike(value);},read:function(value,i,reads,options,state,prev){if(options.callMethodsOnObservables&&canReflect_1_19_2_canReflect.isObservableLike(prev)&&canReflect_1_19_2_canReflect.isMapLike(prev)){dev.warn("can-stache-key: read() called with `callMethodsOnObservables: true`.");return value.apply(prev,options.args||[]);}return options.proxyMethods!==false?bindName.call(value,prev):value;}},{name:"isValueLike",// compute value reader
test:function(value,i,reads,options){return value&&value[getValueSymbol$2]&&value[isValueLikeSymbol]!==false&&(options.foundAt||!isAt(i,reads));},read:function(value,i,reads,options){if(options.readCompute===false&&i===reads.length){return value;}return canReflect_1_19_2_canReflect.getValue(value);},write:function(base,newVal){if(base[setValueSymbol$3]){base[setValueSymbol$3](newVal);}else if(base.set){base.set(newVal);}else {base(newVal);}}}],propertyReadersMap:{},// an array of things that might have a property
propertyReaders:[{name:"map",test:function(value){// the first time we try reading from a promise, set it up for
//  special reflections.
if(canReflect_1_19_2_canReflect.isPromise(value)||isPromiseLike(value)){canReflectPromise_2_2_1_canReflectPromise(value);}return canReflect_1_19_2_canReflect.isObservableLike(value)&&canReflect_1_19_2_canReflect.isMapLike(value);},read:function(value,prop){var res=canReflect_1_19_2_canReflect.getKeyValue(value,prop.key);if(res!==undefined){return res;}else {return value[prop.key];}},write:canReflect_1_19_2_canReflect.setKeyValue},// read a normal object
{name:"object",// this is the default
test:function(){return true;},read:function(value,prop,i,options){if(value==null){return undefined;}else {if(typeof value==="object"){if(prop.key in value){return value[prop.key];}// TODO: remove in 5.0.
//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(prop.at&&specialRead[prop.key]&&"@"+prop.key in value){options.foundAt=true;dev.warn("Use %"+prop.key+" in place of @"+prop.key+".");return undefined;}}//!steal-remove-end
}else {return value[prop.key];}}},write:function(base,prop,newVal){var propValue=base[prop];// if newVal is observable object, lets try to update
if(newVal!=null&&typeof newVal==="object"&&canReflect_1_19_2_canReflect.isMapLike(propValue)){dev.warn("can-stache-key: Merging data into \""+prop+"\" because its parent is non-observable");canReflect_1_19_2_canReflect.update(propValue,newVal);}else if(propValue!=null&&propValue[setValueSymbol$3]!==undefined){canReflect_1_19_2_canReflect.setValue(propValue,newVal);}else {base[prop]=newVal;}}}],reads:function(keyArg){var key=""+keyArg;var keys=[];var last=0;var at=false;if(key.charAt(0)==="@"){last=1;at=true;}var keyToAdd="";for(var i=last;i<key.length;i++){var character=key.charAt(i);if(character==="."||character==="@"){if(key.charAt(i-1)!=="\\"){keys.push({key:keyToAdd,at:at});at=character==="@";keyToAdd="";}else {keyToAdd=keyToAdd.substr(0,keyToAdd.length-1)+".";}}else {keyToAdd+=character;}}keys.push({key:keyToAdd,at:at});return keys;},// This should be able to set a property similar to how read works.
write:function(parent,key,value,options){var keys=typeof key==="string"?observeReader.reads(key):key;var last;options=options||{};if(keys.length>1){last=keys.pop();parent=observeReader.read(parent,keys,options).value;keys.push(last);}else {last=keys[0];}if(!parent){return;}var keyValue=peek$3(parent,last.key);// here's where we need to figure out the best way to write
// if property being set points at a compute, set the compute
if(observeReader.valueReadersMap.isValueLike.test(keyValue,keys.length-1,keys,options)){observeReader.valueReadersMap.isValueLike.write(keyValue,value,options);}else {if(observeReader.valueReadersMap.isValueLike.test(parent,keys.length-1,keys,options)){parent=parent[getValueSymbol$2]();}if(observeReader.propertyReadersMap.map.test(parent)){observeReader.propertyReadersMap.map.write(parent,last.key,value,options);}else if(observeReader.propertyReadersMap.object.test(parent)){observeReader.propertyReadersMap.object.write(parent,last.key,value,options);if(options.observation){options.observation.update();}}}}};observeReader.propertyReaders.forEach(function(reader){observeReader.propertyReadersMap[reader.name]=reader;});observeReader.valueReaders.forEach(function(reader){observeReader.valueReadersMap[reader.name]=reader;});observeReader.set=observeReader.write;var canStacheKey_1_4_3_canStacheKey=observeReader;var TemplateContext=function(options){options=options||{};this.vars=new canSimpleMap_4_3_3_canSimpleMap(options.vars||{});this.helpers=new canSimpleMap_4_3_3_canSimpleMap(options.helpers||{});this.partials=new canSimpleMap_4_3_3_canSimpleMap(options.partials||{});this.tags=new canSimpleMap_4_3_3_canSimpleMap(options.tags||{});};var canViewScope_4_13_7_templateContext=TemplateContext;var canCid_1_3_1_canCid=createCommonjsModule(function(module){/**
 * @module {function} can-cid
 * @parent can-typed-data
 * @collection can-infrastructure
 * @package ./package.json
 * @description Utility for getting a unique identifier for an object.
 * @signature `cid(object, optionalObjectType)`
 *
 * Get a unique identifier for the object, optionally prefixed by a type name.
 *
 * Once set, the unique identifier does not change, even if the type name
 * changes on subsequent calls.
 *
 * ```js
 * var cid = require("can-cid");
 * var x = {};
 * var y = {};
 *
 * console.log(cid(x, "demo")); // -> "demo1"
 * console.log(cid(x, "prod")); // -> "demo1"
 * console.log(cid(y));         // -> "2"
 * ```
 *
 * @param {Object} object The object to uniquely identify.
 * @param {String} name   An optional type name with which to prefix the identifier
 *
 * @return {String} Returns the unique identifier
 */var _cid=0;// DOM nodes shouldn't all use the same property
var domExpando="can"+new Date();var cid=function(object,name){var propertyName=object.nodeName?domExpando:"_cid";if(!object[propertyName]){_cid++;object[propertyName]=(name||'')+_cid;}return object[propertyName];};cid.domExpando=domExpando;cid.get=function(object){var type=typeof object;var isObject=type!==null&&(type==="object"||type==="function");return isObject?cid(object):type+":"+object;};if(canNamespace_1_0_0_canNamespace.cid){throw new Error("You can't have two versions of can-cid, check your dependencies");}else {module.exports=canNamespace_1_0_0_canNamespace.cid=cid;}});var singleReference;function getKeyName(key,extraKey){var keyName=extraKey?canCid_1_3_1_canCid(key)+":"+extraKey:canCid_1_3_1_canCid(key);return keyName||key;}// weak maps are slow
/* if(typeof WeakMap !== "undefined") {
	var globalMap = new WeakMap();
	singleReference = {
		set: function(obj, key, value){
			var localMap = globalMap.get(obj);
			if( !localMap ) {
				globalMap.set(obj, localMap = new WeakMap());
			}
			localMap.set(key, value);
		},
		getAndDelete: function(obj, key){
			return globalMap.get(obj).get(key);
		},
		references: globalMap
	};
} else {*/singleReference={// obj is a function ... we need to place `value` on it so we can retreive it
// we can't use a global map
set:function(obj,key,value,extraKey){// check if it has a single reference map
obj[getKeyName(key,extraKey)]=value;},getAndDelete:function(obj,key,extraKey){var keyName=getKeyName(key,extraKey);var value=obj[keyName];delete obj[keyName];return value;}};/*}*/var canSingleReference_1_3_0_canSingleReference=singleReference;var Compute=function(newVal){if(arguments.length){return canReflect_1_19_2_canReflect.setValue(this,newVal);}else {return canReflect_1_19_2_canReflect.getValue(this);}};var canViewScope_4_13_7_makeComputeLike=function(observable){var compute=Compute.bind(observable);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(compute,"name",{value:"Compute<"+canReflect_1_19_2_canReflect.getName(observable)+">"});}//!steal-remove-end
compute.on=compute.bind=compute.addEventListener=function(event,handler){var translationHandler=function(newVal,oldVal){handler.call(compute,{type:'change'},newVal,oldVal);};canSingleReference_1_3_0_canSingleReference.set(handler,this,translationHandler);observable.on(translationHandler);};compute.off=compute.unbind=compute.removeEventListener=function(event,handler){observable.off(canSingleReference_1_3_0_canSingleReference.getAndDelete(handler,this));};canReflect_1_19_2_canReflect.assignSymbols(compute,{"can.getValue":function(){return canReflect_1_19_2_canReflect.getValue(observable);},"can.setValue":function(newVal){return canReflect_1_19_2_canReflect.setValue(observable,newVal);},"can.onValue":function(handler,queue){return canReflect_1_19_2_canReflect.onValue(observable,handler,queue);},"can.offValue":function(handler,queue){return canReflect_1_19_2_canReflect.offValue(observable,handler,queue);},"can.valueHasDependencies":function(){return canReflect_1_19_2_canReflect.valueHasDependencies(observable);},"can.getPriority":function(){return canReflect_1_19_2_canReflect.getPriority(observable);},"can.setPriority":function(newPriority){canReflect_1_19_2_canReflect.setPriority(observable,newPriority);},"can.isValueLike":true,"can.isFunctionLike":false});compute.isComputed=true;return compute;};var canStacheHelpers_1_2_0_canStacheHelpers=createCommonjsModule(function(module){if(canNamespace_1_0_0_canNamespace.stacheHelpers){throw new Error("You can't have two versions of can-stache-helpers, check your dependencies");}else {module.exports=canNamespace_1_0_0_canNamespace.stacheHelpers={};}});var dispatchSymbol$2=canSymbol_1_7_0_canSymbol.for("can.dispatch");var setElementSymbol$1=canSymbol_1_7_0_canSymbol.for("can.setElement");// The goal of this is to create a high-performance compute that represents a key value from can.view.Scope.
// If the key value is something like {{name}} and the context is a can.Map, a faster
// binding path will be used where new rebindings don't need to be looked for with every change of
// the observable property.
// However, if the property changes to a compute, then the slower `can.compute.read` method of
// observing values will be used.
// ideally, we would know the order things were read.  If the last thing read
// was something we can observe, and the value of it matched the value of the observation,
// and the key matched the key of the observation
// it's a fair bet that we can just listen to that last object.
// If the `this` is not that object ... freak out.  Though `this` is not necessarily part of it.  can-observation could make
// this work.
var getFastPathRoot=canObservationRecorder_1_3_1_canObservationRecorder.ignore(function(computeData){if(computeData.reads&&// a single property read
computeData.reads.length===1){var root=computeData.root;if(root&&root[canSymbol_1_7_0_canSymbol.for("can.getValue")]){root=canReflect_1_19_2_canReflect.getValue(root);}// on a map
return root&&canReflect_1_19_2_canReflect.isObservableLike(root)&&canReflect_1_19_2_canReflect.isMapLike(root)&&// that isn't calling a function
typeof root[computeData.reads[0].key]!=="function"&&root;}return;});var isEventObject=function(obj){return obj&&typeof obj.batchNum==="number"&&typeof obj.type==="string";};function getMutated(scopeKeyData){// The _thisArg is the value before the last `.`. For example if the key was `foo.bar.zed`,
// _thisArg would be the value at foo.bar.
// This should be improved as `foo.bar` might not be observable.
var value$$1=canObservationRecorder_1_3_1_canObservationRecorder.peekValue(scopeKeyData._thisArg);// Something like `string@split` would provide a primitive which can't be a mutated subject
return !canReflect_1_19_2_canReflect.isPrimitive(value$$1)?value$$1:scopeKeyData.root;}function callMutateWithRightArgs(method,mutated,reads,mutator){if(reads.length){method.call(canReflectDependencies_1_1_2_canReflectDependencies,mutated,reads[reads.length-1].key,mutator);}else {method.call(canReflectDependencies_1_1_2_canReflectDependencies,mutated,mutator);}}var warnOnUndefinedProperty;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){warnOnUndefinedProperty=function(options){if(options.key!=="debugger"&&!options.parentHasKey){var filename=options.scope.peek('scope.filename');var lineNumber=options.scope.peek('scope.lineNumber');var reads=canStacheKey_1_4_3_canStacheKey.reads(options.key);var firstKey=reads[0].key;var key=reads.map(function(read){return read.key+(read.at?"()":"");}).join(".");var pathsForKey=options.scope.getPathsForKey(firstKey);var paths=Object.keys(pathsForKey);var firstKeyValue=options.scope.get(firstKey);var includeSuggestions=paths.length&&paths.indexOf(firstKey)<0;var warning=[(filename?filename+':':'')+(lineNumber?lineNumber+': ':'')+'Unable to find key "'+key+'".'];if(includeSuggestions){warning[0]=warning[0]+' Did you mean'+(paths.length>1?' one of these':'')+'?\n';paths.forEach(function(path){warning.push('\t"'+path+'" which will read from');warning.push(pathsForKey[path]);warning.push("\n");});}else if(firstKeyValue){warning[0]=warning[0]+' Found "'+firstKey+'" with value: %o\n';}if(firstKeyValue){dev.warn.apply(dev,[warning.join("\n"),firstKeyValue]);}else {dev.warn.apply(dev,warning);}}};}//!steal-remove-end
// could we make this an observation first ... and have a getter for the compute?
// This is a fast-path enabled Observation wrapper use many places in can-stache.
// The goal of this is to:
//
// 1.  Make something that can be passed to can-view-live directly, hopefully
//     avoiding creating expensive computes.  Instead we will only be creating
//     `ScopeKeyData` which are thin wrappers.
var ScopeKeyData=function(scope,key,options){this.startingScope=scope;this.key=key;this.read=this.read.bind(this);this.dispatch=this.dispatch.bind(this);// special case debugger helper so that it is called with helperOtions
// when you do {{debugger}} as it already is with {{debugger()}}
if(key==="debugger"){// prevent "Unable to find key" warning
this.startingScope={_context:canStacheHelpers_1_2_0_canStacheHelpers};this.read=function(){var helperOptions={scope:scope};var debuggerHelper=canStacheHelpers_1_2_0_canStacheHelpers["debugger"];return debuggerHelper(helperOptions);};}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(this.read,"name",{value:canReflect_1_19_2_canReflect.getName(this)+".read"});Object.defineProperty(this.dispatch,"name",{value:canReflect_1_19_2_canReflect.getName(this)+".dispatch"});}//!steal-remove-end
var observation=this.observation=new canObservation_4_2_0_canObservation(this.read,this);this.options=canAssign_1_3_3_canAssign({observation:this.observation},options);// things added later
this.fastPath=undefined;this.root=undefined;this.reads=undefined;this.setRoot=undefined;// This is read by call expressions so it needs to be observable
this._thisArg=new canSimpleObservable_2_5_0_canSimpleObservable();this.parentHasKey=undefined;var valueDependencies=new Set();valueDependencies.add(observation);this.dependencies={valueDependencies:valueDependencies};// This is basically what .get() should give, but it
// isn't used to figure out the last value.
this._latestValue=undefined;};value(ScopeKeyData.prototype);function fastOnBoundSet_Value(){this._value=this.newVal;}function fastOnBoundSetValue(){this.value=this.newVal;}canAssign_1_3_3_canAssign(ScopeKeyData.prototype,{constructor:ScopeKeyData,dispatch:function dispatch(newVal){var old=this.value;this._latestValue=this.value=newVal;// call the base implementation in can-event-queue
this[dispatchSymbol$2].call(this,this.value,old);},onBound:function onBound(){this.bound=true;canReflect_1_19_2_canReflect.onValue(this.observation,this.dispatch,"notify");// TODO: we should check this sometime in the background.
var fastPathRoot=getFastPathRoot(this);if(fastPathRoot){// rewrite the observation to call its event handlers
this.toFastPath(fastPathRoot);}this._latestValue=this.value=canObservationRecorder_1_3_1_canObservationRecorder.peekValue(this.observation);},onUnbound:function onUnbound(){this.bound=false;canReflect_1_19_2_canReflect.offValue(this.observation,this.dispatch,"notify");this.toSlowPath();},set:function(newVal){var root=this.root||this.setRoot;if(root){if(this.reads.length){canStacheKey_1_4_3_canStacheKey.write(root,this.reads,newVal,this.options);}else {canReflect_1_19_2_canReflect.setValue(root,newVal);}}else {this.startingScope.set(this.key,newVal,this.options);}},get:function(){if(canObservationRecorder_1_3_1_canObservationRecorder.isRecording()){canObservationRecorder_1_3_1_canObservationRecorder.add(this);if(!this.bound){canObservation_4_2_0_canObservation.temporarilyBind(this);}}if(this.bound===true&&this.fastPath===true){return this._latestValue;}else {return canObservationRecorder_1_3_1_canObservationRecorder.peekValue(this.observation);}},toFastPath:function(fastPathRoot){var self=this,observation=this.observation;this.fastPath=true;// there won't be an event in the future ...
observation.dependencyChange=function(target,newVal){if(isEventObject(newVal)){throw "no event objects!";}// but I think we will be able to get at it b/c there should only be one
// dependency we are binding to ...
if(target===fastPathRoot&&typeof newVal!=="function"){self._latestValue=newVal;this.newVal=newVal;}else {// restore
self.toSlowPath();}return canObservation_4_2_0_canObservation.prototype.dependencyChange.apply(this,arguments);};if(observation.hasOwnProperty("_value")){// can-observation 4.1+
observation.onBound=fastOnBoundSet_Value;}else {// can-observation < 4.1
observation.onBound=fastOnBoundSetValue;}},toSlowPath:function(){this.observation.dependencyChange=canObservation_4_2_0_canObservation.prototype.dependencyChange;this.observation.onBound=canObservation_4_2_0_canObservation.prototype.onBound;this.fastPath=false;},read:function(){var data;if(this.root){// if we've figured out a root observable, start reading from there
data=canStacheKey_1_4_3_canStacheKey.read(this.root,this.reads,this.options);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){// remove old dependency
if(this.reads.length){callMutateWithRightArgs(canReflectDependencies_1_1_2_canReflectDependencies.deleteMutatedBy,getMutated(this),this.reads,this);}}//!steal-remove-end
// update thisArg and add new dependency
this.thisArg=data.parent;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var valueDeps=new Set();valueDeps.add(this);callMutateWithRightArgs(canReflectDependencies_1_1_2_canReflectDependencies.addMutatedBy,data.parent||this.root,this.reads,{valueDependencies:valueDeps});}//!steal-remove-end
return data.value;}// If the key has not already been located in a observable then we need to search the scope for the
// key.  Once we find the key then we need to return it's value and if it is found in an observable
// then we need to store the observable so the next time this compute is called it can grab the value
// directly from the observable.
data=this.startingScope.read(this.key,this.options);this.scope=data.scope;this.reads=data.reads;this.root=data.rootObserve;this.setRoot=data.setRoot;this.thisArg=data.thisArg;this.parentHasKey=data.parentHasKey;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(data.rootObserve){var rootValueDeps=new Set();rootValueDeps.add(this);callMutateWithRightArgs(canReflectDependencies_1_1_2_canReflectDependencies.addMutatedBy,getMutated(this),data.reads,{valueDependencies:rootValueDeps});}if(data.value===undefined&&this.options.warnOnMissingKey===true){warnOnUndefinedProperty({scope:this.startingScope,key:this.key,parentHasKey:data.parentHasKey});}}//!steal-remove-end
return data.value;},hasDependencies:function(){// ScopeKeyData is unique in that when these things are read, it will temporarily bind
// to make sure the right value is returned. This is for can-stache.
// Helpers warns about a missing helper.
if(!this.bound){canObservation_4_2_0_canObservation.temporarilyBind(this);}return canReflect_1_19_2_canReflect.valueHasDependencies(this.observation);}});Object.defineProperty(ScopeKeyData.prototype,"thisArg",{get:function(){return this._thisArg.get();},set:function(newVal){this._thisArg.set(newVal);}});var scopeKeyDataPrototype={"can.getValue":ScopeKeyData.prototype.get,"can.setValue":ScopeKeyData.prototype.set,"can.valueHasDependencies":ScopeKeyData.prototype.hasDependencies,"can.getValueDependencies":function(){return this.dependencies;},"can.getPriority":function(){return canReflect_1_19_2_canReflect.getPriority(this.observation);},"can.setPriority":function(newPriority){canReflect_1_19_2_canReflect.setPriority(this.observation,newPriority);},"can.setElement":function(element){this.observation[setElementSymbol$1](element);}};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){scopeKeyDataPrototype["can.getName"]=function(){return canReflect_1_19_2_canReflect.getName(this.constructor)+"{{"+this.key+"}}";};}//!steal-remove-end
canReflect_1_19_2_canReflect.assignSymbols(ScopeKeyData.prototype,scopeKeyDataPrototype);// Creates a compute-like for legacy reasons ...
Object.defineProperty(ScopeKeyData.prototype,"compute",{get:function(){var compute=canViewScope_4_13_7_makeComputeLike(this);Object.defineProperty(this,"compute",{value:compute,writable:false,configurable:false});return compute;},configurable:true});Object.defineProperty(ScopeKeyData.prototype,"initialValue",{get:function(){if(!this.bound){canObservation_4_2_0_canObservation.temporarilyBind(this);}return canObservationRecorder_1_3_1_canObservationRecorder.peekValue(this);},set:function(){throw new Error("initialValue should not be set");},configurable:true});var canViewScope_4_13_7_scopeKeyData=ScopeKeyData;var canViewScope_4_13_7_compute_data=function(scope,key,options){return new canViewScope_4_13_7_scopeKeyData(scope,key,options||{args:[]});};// ### LetContext
// Instances of this are used to create a `let` variable context.
// Like Object.create, but only keeps Symbols and properties in `propertiesToKeep`
function objectCreateWithSymbolsAndSpecificProperties(obj,propertiesToKeep){var newObj={};// copy over all Symbols from obj
if("getOwnPropertySymbols"in Object){Object.getOwnPropertySymbols(obj).forEach(function(key){newObj[key]=obj[key];});}// copy over specific properties from obj (also fake Symbols properties for IE support);
Object.getOwnPropertyNames(obj).forEach(function(key){if(propertiesToKeep.indexOf(key)>=0||key.indexOf("@@symbol")===0){newObj[key]=obj[key];}});return Object.create(newObj);}var LetContext=canSimpleMap_4_3_3_canSimpleMap.extend("LetContext",{});LetContext.prototype=objectCreateWithSymbolsAndSpecificProperties(canSimpleMap_4_3_3_canSimpleMap.prototype,[// SimpleMap properties
"setup","attr","serialize","get","set","log",// required by SimpleMap properties
"dispatch",// Construct properties (not added by can-event-queue)
"constructorExtends","newInstance","_inherit","_defineProperty","_overwrite","instance","extend","ReturnValue","setup","init"]);LetContext.prototype.constructor=LetContext;var canViewScope_4_13_7_letContext=LetContext;// # can-view-scope.js
//
// This provides the ability to lookup values across a higherarchy of objects.  This is similar to
// how closures work in JavaScript.
//
// This is done with the `Scope` type. It works by having a `_context` reference to
// an object whose properties can be searched for values.  It also has a `_parent` reference
// to the next Scope in which to check.  In this way, `Scope` is used to form a tree-like
// structure.  Leaves and Nodes in the tree only point to their parent.
// ## Helpers
function canHaveProperties(obj){return obj!=null;}function returnFalse(){return false;}// ## Scope
// Represents a node in the scope tree.
function Scope(context,parent,meta){// The object that will be looked on for values.
// If the type of context is TemplateContext, there will be special rules for it.
this._context=context;// The next Scope object whose context should be looked on for values.
this._parent=parent;// If this is a special context, it can be labeled here.
// Options are:
// - `viewModel` - This is a viewModel. This is mostly used by can-component to make `scope.vm` work.
// - `notContext` - This can't be looked within using `./` and `../`. It will be skipped.
//   This is for virtual contexts like those used by `%index`. This is very much like
//   `variable`.  Most things should switch to `variable` in the future.
// - `special` - This can't be looked within using `./` and `../`. It will be skipped.
//   This is for reading properties on the scope {{scope.index}}. It's different from variable
//   because it's never lookup up like {{key}}.
// - `variable` - This is used to define a variable (as opposed to "normal" context). These
//   will also be skipped when using `./` and `../`.
this._meta=meta||{};// A cache that can be used to store computes used to look up within this scope.
// For example if someone creates a compute to lookup `name`, another compute does not
// need to be created.
this.__cache={};}var parentContextSearch=/(\.\.\/)|(\.\/)|(this[\.@])/g;// ## Static Methods
// The following methods are exposed mostly for testing purposes.
canAssign_1_3_3_canAssign(Scope,{// ### Scope.read
// Scope.read was moved to can-stache-key.read
// can-stache-key.read reads properties from a parent. A much more complex version of getObject.
read:canStacheKey_1_4_3_canStacheKey.read,TemplateContext:canViewScope_4_13_7_templateContext,// ### keyInfo(key)
// Returns an object that details what the `key` means with the following:
// ```js
// {
//   remainingKey, // what would be read on a context (or this)
//   isScope, // if the scope itself is being read
//   inScope, // if a key on the scope is being read
//   parentContextWalkCount, // how many ../
//   isContextBased // if a "normal" context is explicitly being read
// }
// ```
keyInfo:function(attr){if(attr==="./"){attr="this";}var info={remainingKey:attr};// handle scope stuff first
info.isScope=attr==="scope";if(info.isScope){return info;}var firstSix=attr.substr(0,6);info.isInScope=firstSix==="scope."||firstSix==="scope@";if(info.isInScope){info.remainingKey=attr.substr(6);return info;}else if(firstSix==="scope/"){info.walkScope=true;info.remainingKey=attr.substr(6);return info;}else if(attr.substr(0,7)==="@scope/"){info.walkScope=true;info.remainingKey=attr.substr(7);return info;}info.parentContextWalkCount=0;// Searches for `../` and other context specifiers
info.remainingKey=attr.replace(parentContextSearch,function(token,parentContext,dotSlash,thisContext,index){info.isContextBased=true;if(parentContext!==undefined){info.parentContextWalkCount++;}return "";});// ../..
if(info.remainingKey===".."){info.parentContextWalkCount++;info.remainingKey="this";}else if(info.remainingKey==="."||info.remainingKey===""){info.remainingKey="this";}if(info.remainingKey==="this"){info.isContextBased=true;}return info;},// ### isTemplateContextOrCanNotHaveProperties
// Returns `true` if a template context or a `null` or `undefined`
// context.
isTemplateContextOrCanNotHaveProperties:function(currentScope){var currentContext=currentScope._context;if(currentContext instanceof canViewScope_4_13_7_templateContext){return true;}else if(!canHaveProperties(currentContext)){return true;}return false;},// ### shouldSkipIfSpecial
// Return `true` if special.
shouldSkipIfSpecial:function(currentScope){var isSpecialContext=currentScope._meta.special===true;if(isSpecialContext===true){return true;}if(Scope.isTemplateContextOrCanNotHaveProperties(currentScope)){return true;}return false;},// ### shouldSkipEverythingButSpecial
// Return `true` if not special.
shouldSkipEverythingButSpecial:function(currentScope){var isSpecialContext=currentScope._meta.special===true;if(isSpecialContext===false){return true;}if(Scope.isTemplateContextOrCanNotHaveProperties(currentScope)){return true;}return false;},// ### makeShouldExitOnSecondNormalContext
// This will keep checking until we hit a second "normal" context.
makeShouldExitOnSecondNormalContext:function(){var foundNormalContext=false;return function shouldExitOnSecondNormalContext(currentScope){var isNormalContext=!currentScope.isSpecial();var shouldExit=isNormalContext&&foundNormalContext;// leaks some state
if(isNormalContext){foundNormalContext=true;}return shouldExit;};},// ### makeShouldExitAfterFirstNormalContext
// This will not check anything after the first normal context.
makeShouldExitAfterFirstNormalContext:function(){var foundNormalContext=false;return function shouldExitAfterFirstNormalContext(currentScope){if(foundNormalContext){return true;}var isNormalContext=!currentScope.isSpecial();// leaks some state
if(isNormalContext){foundNormalContext=true;}return false;};},// ### makeShouldSkipSpecialContexts
// Skips `parentContextWalkCount` contexts. This is used to
// walk past scopes when `../` is used.
makeShouldSkipSpecialContexts:function(parentContextWalkCount){var walkCount=parentContextWalkCount||0;return function shouldSkipSpecialContexts(currentScope){// after walking past the correct number of contexts,
// should not skip notContext scopes
// so that ../foo can be used to read from a notContext scope
if(walkCount<0&&currentScope._meta.notContext){return false;}if(currentScope.isSpecial()){return true;}walkCount--;if(walkCount<0){return false;}return true;};}});// ## Prototype methods
canAssign_1_3_3_canAssign(Scope.prototype,{// ### scope.add
// Creates a new scope and sets the current scope to be the parent.
// ```
// var scope = new can.view.Scope([
//   {name:"Chris"},
//   {name: "Justin"}
// ]).add({name: "Brian"});
// scope.attr("name") //-> "Brian"
// ```
add:function(context,meta){if(context!==this._context){return new this.constructor(context,this,meta);}else {return this;}},// ### scope.find
// This is the equivalent of Can 3's scope walking.
find:function(attr,options){var keyReads=canStacheKey_1_4_3_canStacheKey.reads(attr);var howToRead={shouldExit:returnFalse,shouldSkip:Scope.shouldSkipIfSpecial,shouldLookForHelper:true,read:canStacheKey_1_4_3_canStacheKey.read};var result=this._walk(keyReads,options,howToRead);return result.value;},// ### scope.readFromSpecialContext
readFromSpecialContext:function(key){return this._walk([{key:key,at:false}],{special:true},{shouldExit:returnFalse,shouldSkip:Scope.shouldSkipEverythingButSpecial,shouldLookForHelper:false,read:canStacheKey_1_4_3_canStacheKey.read});},// ### scope.readFromTemplateContext
readFromTemplateContext:function(key,readOptions){var keyReads=canStacheKey_1_4_3_canStacheKey.reads(key);return canStacheKey_1_4_3_canStacheKey.read(this.templateContext,keyReads,readOptions);},// ### Scope.prototype.read
// Reads from the scope chain and returns the first non-`undefined` value.
// `read` deals mostly with setting up "context based" keys to start reading
// from the right scope. Once the right scope is located, `_walk` is called.
/**
	 * @hide
	 * @param {can.stache.key} attr A dot-separated path. Use `"\."` if you have a property name that includes a dot.
	 * @param {can.view.Scope.readOptions} options that configure how this gets read.
	 * @return {{}}
	 *   @option {Object} parent the value's immediate parent
	 *   @option {can.Map|can.compute} rootObserve the first observable to read from.
	 *   @option {Array<String>} reads An array of properties that can be used to read from the rootObserve to get the value.
	 *   @option {*} value the found value
	 */read:function(attr,options){options=options||{};return this.readKeyInfo(Scope.keyInfo(attr),options||{});},readKeyInfo:function(keyInfo,options){// Identify context based keys. Context based keys try to
// specify a particular context a key should be within.
var readValue,keyReads,howToRead={read:options.read||canStacheKey_1_4_3_canStacheKey.read};// 1.A. Handle reading the scope itself
if(keyInfo.isScope){return {value:this};}// 1.B. Handle reading something on the scope
else if(keyInfo.isInScope){keyReads=canStacheKey_1_4_3_canStacheKey.reads(keyInfo.remainingKey);// check for a value on Scope.prototype
readValue=canStacheKey_1_4_3_canStacheKey.read(this,keyReads,options);// otherwise, check the templateContext
if(typeof readValue.value==='undefined'&&!readValue.parentHasKey){readValue=this.readFromTemplateContext(keyInfo.remainingKey,options);}return canAssign_1_3_3_canAssign(readValue,{thisArg:keyReads.length>0?readValue.parent:undefined});}// 1.C. Handle context-based reads. They should skip over special stuff.
// this.key, ../.., .././foo
else if(keyInfo.isContextBased){// TODO: REMOVE
// options && options.special === true && console.warn("SPECIAL!!!!");
if(keyInfo.remainingKey!=="this"){keyReads=canStacheKey_1_4_3_canStacheKey.reads(keyInfo.remainingKey);}else {keyReads=[];}howToRead.shouldExit=Scope.makeShouldExitOnSecondNormalContext();howToRead.shouldSkip=Scope.makeShouldSkipSpecialContexts(keyInfo.parentContextWalkCount);howToRead.shouldLookForHelper=true;return this._walk(keyReads,options,howToRead);}// 1.D. Handle scope walking with scope/key
else if(keyInfo.walkScope){howToRead.shouldExit=returnFalse;howToRead.shouldSkip=Scope.shouldSkipIfSpecial;howToRead.shouldLookForHelper=true;keyReads=canStacheKey_1_4_3_canStacheKey.reads(keyInfo.remainingKey);return this._walk(keyReads,options,howToRead);}// 1.E. Handle reading without context clues
// {{foo}}
else {keyReads=canStacheKey_1_4_3_canStacheKey.reads(keyInfo.remainingKey);var isSpecialRead=options&&options.special===true;// TODO: remove
// options && options.special === true && console.warn("SPECIAL!!!!");
howToRead.shouldExit=Scope.makeShouldExitOnSecondNormalContext();howToRead.shouldSkip=isSpecialRead?Scope.shouldSkipEverythingButSpecial:Scope.shouldSkipIfSpecial;howToRead.shouldLookForHelper=isSpecialRead?false:true;return this._walk(keyReads,options,howToRead);}},// ### scope._walk
// This is used to walk up the scope chain.
_walk:function(keyReads,options,howToRead){// The current scope and context we are trying to find "keyReads" within.
var currentScope=this,currentContext,// If no value can be found, this is a list of of every observed
// object and property name to observe.
undefinedObserves=[],// Tracks the first found observe.
currentObserve,// Tracks the reads to get the value from `currentObserve`.
currentReads,// Tracks the most likely observable to use as a setter.
setObserveDepth=-1,currentSetReads,currentSetObserve,readOptions=canAssign_1_3_3_canAssign({/* Store found observable, incase we want to set it as the rootObserve. */foundObservable:function(observe,nameIndex){currentObserve=observe;currentReads=keyReads.slice(nameIndex);},earlyExit:function(parentValue,nameIndex){var isVariableScope=currentScope._meta.variable===true,updateSetObservable=false;if(isVariableScope===true&&nameIndex===0){// we MUST have pre-defined the key in a variable scope
updateSetObservable=canReflect_1_19_2_canReflect.hasKey(parentValue,keyReads[nameIndex].key);}else {updateSetObservable=// Has more matches
nameIndex>setObserveDepth||// The same number of matches but it has the key
nameIndex===setObserveDepth&&typeof parentValue==="object"&&canReflect_1_19_2_canReflect.hasOwnKey(parentValue,keyReads[nameIndex].key);}if(updateSetObservable){currentSetObserve=currentObserve;currentSetReads=currentReads;setObserveDepth=nameIndex;}}},options);var isRecording=canObservationRecorder_1_3_1_canObservationRecorder.isRecording(),readAContext=false;// Goes through each scope context provided until it finds the key (attr). Once the key is found
// then it's value is returned along with an observe, the current scope and reads.
// While going through each scope context searching for the key, each observable found is returned and
// saved so that either the observable the key is found in can be returned, or in the case the key is not
// found in an observable the closest observable can be returned.
while(currentScope){if(howToRead.shouldSkip(currentScope)===true){currentScope=currentScope._parent;continue;}if(howToRead.shouldExit(currentScope)===true){break;}readAContext=true;currentContext=currentScope._context;// Prevent computes from temporarily observing the reading of observables.
var getObserves=canObservationRecorder_1_3_1_canObservationRecorder.trap();var data=howToRead.read(currentContext,keyReads,readOptions);// Retrieve the observes that were read.
var observes=getObserves();// If a **value was was found**, return value and location data.
if(data.value!==undefined||data.parentHasKey){if(!observes.length&&isRecording){// if we didn't actually observe anything
// the reads and currentObserve don't mean anything
// we just point to the current object so setting is fast
currentObserve=data.parent;currentReads=keyReads.slice(keyReads.length-1);}else {canObservationRecorder_1_3_1_canObservationRecorder.addMany(observes);}return {scope:currentScope,rootObserve:currentObserve,value:data.value,reads:currentReads,thisArg:data.parent,parentHasKey:data.parentHasKey};}// Otherwise, save all observables that were read. If no value
// is found, we will observe on all of them.
else {undefinedObserves.push.apply(undefinedObserves,observes);}currentScope=currentScope._parent;}// The **value was not found** in the scope
// if not looking for a "special" key, check in can-stache-helpers
if(howToRead.shouldLookForHelper){var helper=this.getHelperOrPartial(keyReads);if(helper){// Don't return parent so `.bind` is not used.
return {value:helper};}}// The **value was not found**, return `undefined` for the value.
// Make sure we listen to everything we checked for when the value becomes defined.
// Once it becomes defined, we won't have to listen to so many things.
canObservationRecorder_1_3_1_canObservationRecorder.addMany(undefinedObserves);return {setRoot:currentSetObserve,reads:currentSetReads,value:undefined,noContextAvailable:!readAContext};},// ### scope.getDataForScopeSet
// Returns an object with data needed by `.set` to figure out what to set,
// and how.
// {
//   parent: what is being set
//   key: try setting a key value
//   how: "setValue" | "set" | "updateDeep" | "write" | "setKeyValue"
// }
// This works by changing how `readKeyInfo` will read individual scopes.
// Specifically, with something like `{{foo.bar}}` it will read `{{foo}}` and
// only check if a `bar` property exists.
getDataForScopeSet:function getDataForScopeSet(key,options){var keyInfo=Scope.keyInfo(key);var firstSearchedContext;// Overwrite the options to use this read.
var opts=canAssign_1_3_3_canAssign({// This read is used by `._walk` to read from the scope.
// This will use `hasKey` on the last property instead of reading it.
read:function(context,keys){// If nothing can be found with the keys we are looking for, save the
// first possible match.  This is where we will write to.
if(firstSearchedContext===undefined&&!(context instanceof canViewScope_4_13_7_letContext)){firstSearchedContext=context;}// If we have multiple keys ...
if(keys.length>1){// see if we can find the parent ...
var parentKeys=keys.slice(0,keys.length-1);var parent=canStacheKey_1_4_3_canStacheKey.read(context,parentKeys,options).value;// If there is a parent, see if it has the last key
if(parent!=null&&canReflect_1_19_2_canReflect.hasKey(parent,keys[keys.length-1].key)){return {parent:parent,parentHasKey:true,value:undefined};}else {return {};}}// If we have only one key, try to find a context with this key
else if(keys.length===1){if(canReflect_1_19_2_canReflect.hasKey(context,keys[0].key)){return {parent:context,parentHasKey:true,value:undefined};}else {return {};}}// If we have no keys, we are reading `this`.
else {return {value:context};}}},options);// Use the read above to figure out what we are probably writing to.
var readData=this.readKeyInfo(keyInfo,opts);if(keyInfo.remainingKey==="this"){// If we are setting a context, then return that context
return {parent:readData.value,how:"setValue"};}// Now we are trying to set a property on something.  Parent will
// be the something we are setting a property on.
var parent;var props=keyInfo.remainingKey.split(".");var propName=props.pop();// If we got a `thisArg`, that's the parent.
if(readData.thisArg){parent=readData.thisArg;}// Otherwise, we didn't find anything, use the first searched context.
// TODO: there is likely a bug here when trying to set foo.bar where nothing in the scope
// has a foo.
else if(firstSearchedContext){parent=firstSearchedContext;}if(parent===undefined){return {error:"Attempting to set a value at "+key+" where the context is undefined."};}// Now we need to figure out how we would update this value.  The following does that.
if(!canReflect_1_19_2_canReflect.isObservableLike(parent)&&canReflect_1_19_2_canReflect.isObservableLike(parent[propName])){if(canReflect_1_19_2_canReflect.isMapLike(parent[propName])){return {parent:parent,key:propName,how:"updateDeep",warn:"can-view-scope: Merging data into \""+propName+"\" because its parent is non-observable"};}else if(canReflect_1_19_2_canReflect.isValueLike(parent[propName])){return {parent:parent,key:propName,how:"setValue"};}else {return {parent:parent,how:"write",key:propName,passOptions:true};}}else {return {parent:parent,how:"write",key:propName,passOptions:true};}},// ### scope.getHelper
// read a helper from the templateContext or global helpers list
getHelper:function(keyReads){console.warn(".getHelper is deprecated, use .getHelperOrPartial");return this.getHelperOrPartial(keyReads);},getHelperOrPartial:function(keyReads){// try every template context
var scope=this,context,helper;while(scope){context=scope._context;if(context instanceof canViewScope_4_13_7_templateContext){helper=canStacheKey_1_4_3_canStacheKey.read(context.helpers,keyReads,{proxyMethods:false});if(helper.value!==undefined){return helper.value;}helper=canStacheKey_1_4_3_canStacheKey.read(context.partials,keyReads,{proxyMethods:false});if(helper.value!==undefined){return helper.value;}}scope=scope._parent;}return canStacheKey_1_4_3_canStacheKey.read(canStacheHelpers_1_2_0_canStacheHelpers,keyReads,{proxyMethods:false}).value;},// ### scope.get
// Gets a value from the scope without being observable.
get:function(key,options){options=canAssign_1_3_3_canAssign({isArgument:true},options);var res=this.read(key,options);return res.value;},peek:canObservationRecorder_1_3_1_canObservationRecorder.ignore(function(key,options){return this.get(key,options);}),// TODO: Remove in 6.0
peak:canObservationRecorder_1_3_1_canObservationRecorder.ignore(function(key,options){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){dev.warn('peak is deprecated, please use peek instead');}//!steal-remove-end
return this.peek(key,options);}),// ### scope.getScope
// Returns the first scope that passes the `tester` function.
getScope:function(tester){var scope=this;while(scope){if(tester(scope)){return scope;}scope=scope._parent;}},// ### scope.getContext
// Returns the first context whose scope passes the `tester` function.
getContext:function(tester){var res=this.getScope(tester);return res&&res._context;},// ### scope.getTemplateContext
// Returns the template context scope
// This function isn't named right.
getTemplateContext:function(){var lastScope;// find the first reference scope
var templateContext=this.getScope(function(scope){lastScope=scope;return scope._context instanceof canViewScope_4_13_7_templateContext;});// if there is no reference scope, add one as the root
if(!templateContext){templateContext=new Scope(new canViewScope_4_13_7_templateContext());// add templateContext to root of the scope chain so it
// can be found using `getScope` next time it is looked up
lastScope._parent=templateContext;}return templateContext;},addTemplateContext:function(){return this.add(new canViewScope_4_13_7_templateContext());},addLetContext:function(values){return this.add(new canViewScope_4_13_7_letContext(values||{}),{variable:true});},// ### scope.getRoot
// Returns the top most context that is not a references scope.
// Used by `.read` to provide `%root`.
getRoot:function(){var cur=this,child=this;while(cur._parent){child=cur;cur=cur._parent;}if(cur._context instanceof canViewScope_4_13_7_templateContext){cur=child;}return cur._context;},// first viewModel scope
getViewModel:function(){var vmScope=this.getScope(function(scope){return scope._meta.viewModel;});return vmScope&&vmScope._context;},// _top_ viewModel scope
getTop:function(){var top;this.getScope(function(scope){if(scope._meta.viewModel){top=scope;}// walk entire scope tree
return false;});return top&&top._context;},// ### scope.getPathsForKey
// Finds all paths that will return a value for a specific key
// NOTE: this is for development purposes only and is removed in production
getPathsForKey:function getPathsForKey(key){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var paths={};var getKeyDefinition=function(obj,key){if(!obj||typeof obj!=="object"){return {};}var keyExistsOnObj=key in obj;var objHasKey=canReflect_1_19_2_canReflect.hasKey(obj,key);return {isDefined:keyExistsOnObj||objHasKey,isFunction:keyExistsOnObj&&typeof obj[key]==="function"};};// scope.foo@bar -> bar
var reads=canStacheKey_1_4_3_canStacheKey.reads(key);var keyParts=reads.map(function(read){return read.key;});var scopeIndex=keyParts.indexOf("scope");if(scopeIndex>-1){keyParts.splice(scopeIndex,2);}var normalizedKey=keyParts.join(".");// check scope.vm.<key>
var vm=this.getViewModel();var vmKeyDefinition=getKeyDefinition(vm,normalizedKey);if(vmKeyDefinition.isDefined){paths["scope.vm."+normalizedKey+(vmKeyDefinition.isFunction?"()":"")]=vm;}// check scope.top.<key>
var top=this.getTop();var topKeyDefinition=getKeyDefinition(top,normalizedKey);if(topKeyDefinition.isDefined){paths["scope.top."+normalizedKey+(topKeyDefinition.isFunction?"()":"")]=top;}// find specific paths (like ../key)
var cur="";this.getScope(function(scope){// `notContext` and `special` contexts can't be read using `../`
var canBeRead=!scope.isSpecial();if(canBeRead){var contextKeyDefinition=getKeyDefinition(scope._context,normalizedKey);if(contextKeyDefinition.isDefined){paths[cur+normalizedKey+(contextKeyDefinition.isFunction?"()":"")]=scope._context;}cur+="../";}// walk entire scope tree
return false;});return paths;}//!steal-remove-end
},// ### scope.hasKey
// returns whether or not this scope has the key
hasKey:function hasKey(key){var reads=canStacheKey_1_4_3_canStacheKey.reads(key);var readValue;if(reads[0].key==="scope"){// read properties like `scope.vm.foo` directly from the scope
readValue=canStacheKey_1_4_3_canStacheKey.read(this,reads.slice(1),key);}else {// read normal properties from the scope's context
readValue=canStacheKey_1_4_3_canStacheKey.read(this._context,reads,key);}return readValue.foundLastParent&&readValue.parentHasKey;},set:function(key,value,options){options=options||{};var data=this.getDataForScopeSet(key,options);var parent=data.parent;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(data.error){return dev.error(data.error);}}//!steal-remove-end
if(data.warn){dev.warn(data.warn);}switch(data.how){case"set":parent.set(data.key,value,data.passOptions?options:undefined);break;case"write":canStacheKey_1_4_3_canStacheKey.write(parent,data.key,value,options);break;case"setValue":canReflect_1_19_2_canReflect.setValue("key"in data?parent[data.key]:parent,value);break;case"setKeyValue":canReflect_1_19_2_canReflect.setKeyValue(parent,data.key,value);break;case"updateDeep":canReflect_1_19_2_canReflect.updateDeep(parent[data.key],value);break;}},// ### scope.attr
// Gets or sets a value in the scope without being observable.
attr:canObservationRecorder_1_3_1_canObservationRecorder.ignore(function(key,value,options){dev.warn("can-view-scope::attr is deprecated, please use peek, get or set");options=canAssign_1_3_3_canAssign({isArgument:true},options);// Allow setting a value on the context
if(arguments.length===2){return this.set(key,value,options);}else {return this.get(key,options);}}),// ### scope.computeData
// Finds the first location of the key in the scope and then provides a get-set compute that represents the key's value
// and other information about where the value was found.
computeData:function(key,options){return canViewScope_4_13_7_compute_data(this,key,options);},// ### scope.compute
// Provides a get-set compute that represents a key's value.
compute:function(key,options){return this.computeData(key,options).compute;},// ### scope.cloneFromRef
//
// This takes a scope and essentially copies its chain from
// right before the last TemplateContext. And it does not include the ref.
// this is a helper function to provide lexical semantics for refs.
// This will not be needed for leakScope: false.
cloneFromRef:function(){var scopes=[];var scope=this,context,parent;while(scope){context=scope._context;if(context instanceof canViewScope_4_13_7_templateContext){parent=scope._parent;break;}scopes.unshift(scope);scope=scope._parent;}if(parent){scopes.forEach(function(scope){// For performance, re-use _meta, don't copy it.
parent=parent.add(scope._context,scope._meta);});return parent;}else {return this;}},isSpecial:function(){return this._meta.notContext||this._meta.special||this._context instanceof canViewScope_4_13_7_templateContext||this._meta.variable;}});// Legacy name for _walk.
Scope.prototype._read=Scope.prototype._walk;canReflect_1_19_2_canReflect.assignSymbols(Scope.prototype,{"can.hasKey":Scope.prototype.hasKey,"can.isScopeLike":true});var templateContextPrimitives=["filename","lineNumber"];// create getters/setters for primitives on the templateContext
// scope.filename -> scope.readFromTemplateContext("filename")
templateContextPrimitives.forEach(function(key){Object.defineProperty(Scope.prototype,key,{get:function(){return this.readFromTemplateContext(key).value;},set:function(val){this.templateContext[key]=val;}});});canDefineLazyValue_1_1_1_defineLazyValue(Scope.prototype,'templateContext',function(){return this.getTemplateContext()._context;});canDefineLazyValue_1_1_1_defineLazyValue(Scope.prototype,'root',function(){dev.warn('`scope.root` is deprecated. Use either `scope.top`: https://canjs.com/doc/can-stache/keys/scope.html#scope_top or `scope.vm`: https://canjs.com/doc/can-stache/keys/scope.html#scope_vm instead.');return this.getRoot();});canDefineLazyValue_1_1_1_defineLazyValue(Scope.prototype,'vm',function(){return this.getViewModel();});canDefineLazyValue_1_1_1_defineLazyValue(Scope.prototype,'top',function(){return this.getTop();});canDefineLazyValue_1_1_1_defineLazyValue(Scope.prototype,'helpers',function(){return canStacheHelpers_1_2_0_canStacheHelpers;});var specialKeywords=['index','key','element','event','viewModel','arguments','helperOptions','args'];// create getters for "special" keys
// scope.index -> scope.readFromSpecialContext("index")
specialKeywords.forEach(function(key){Object.defineProperty(Scope.prototype,key,{get:function(){return this.readFromSpecialContext(key).value;}});});//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Scope.prototype.log=function(){var scope=this;var indent="";var contextType="";while(scope){contextType=scope._meta.notContext?" (notContext)":scope._meta.special?" (special)":"";console.log(indent,canReflect_1_19_2_canReflect.getName(scope._context)+contextType,scope._context);scope=scope._parent;indent+=" ";}};}//!steal-remove-end
canNamespace_1_0_0_canNamespace.view=canNamespace_1_0_0_canNamespace.view||{};var canViewScope_4_13_7_canViewScope=canNamespace_1_0_0_canNamespace.view.Scope=Scope;function KeyObservable(root,key){key=""+key;this.key=key;this.root=root;settable.call(this,function(){return canStacheKey_1_4_3_canStacheKey.get(this,key);},root);}KeyObservable.prototype=Object.create(settable.prototype);KeyObservable.prototype.set=function(newVal){canStacheKey_1_4_3_canStacheKey.set(this.root,this.key,newVal);};var keyObservable=KeyObservable;var isViewSymbol=canSymbol_1_7_0_canSymbol.for("can.isView");// this creates a noop that marks that a renderer was called
// this is for situations where a helper function calls a renderer
// that was not provided such as
// {{#if false}} ... {{/if}}
// with no {{else}}
var createNoOpRenderer=function(metadata){return function noop(){if(metadata){metadata.rendered=true;}};};var utils$1={last:function(arr){return arr!=null&&arr[arr.length-1];},// A generic empty function
emptyHandler:function(){},// Converts a string like "1" into 1. "null" into null, etc.
// This doesn't have to do full JSON, so removing eval would be good.
jsonParse:function(str){// if it starts with a quote, assume a string.
if(str[0]==="'"){return str.substr(1,str.length-2);}else if(str==="undefined"){return undefined;}else {return JSON.parse(str);}},mixins:{last:function(){return this.stack[this.stack.length-1];},add:function(chars){this.last().add(chars);},subSectionDepth:function(){return this.stack.length-1;}},// Sets .fn and .inverse on a helperOptions object and makes sure
// they can reference the current scope and options.
createRenderers:function(helperOptions,scope,truthyRenderer,falseyRenderer,isStringOnly){helperOptions.fn=truthyRenderer?this.makeRendererConvertScopes(truthyRenderer,scope,isStringOnly,helperOptions.metadata):createNoOpRenderer(helperOptions.metadata);helperOptions.inverse=falseyRenderer?this.makeRendererConvertScopes(falseyRenderer,scope,isStringOnly,helperOptions.metadata):createNoOpRenderer(helperOptions.metadata);helperOptions.isSection=!!(truthyRenderer||falseyRenderer);},// Returns a new renderer function that makes sure any data or helpers passed
// to it are converted to a can.view.Scope and a can.view.Options.
makeRendererConvertScopes:function(renderer,parentScope,observeObservables,metadata){var convertedRenderer=function(newScope,newOptions){// prevent binding on fn.
// If a non-scope value is passed, add that to the parent scope.
if(newScope!==undefined&&!(newScope instanceof canViewScope_4_13_7_canViewScope)){if(parentScope){newScope=parentScope.add(newScope);}else {newScope=new canViewScope_4_13_7_canViewScope(newScope||{});}}if(metadata){metadata.rendered=true;}var result=renderer(newScope||parentScope);return result;};return observeObservables?convertedRenderer:canObservationRecorder_1_3_1_canObservationRecorder.ignore(convertedRenderer);},makeView:function(renderer){var view=canObservationRecorder_1_3_1_canObservationRecorder.ignore(function(scope){if(!(scope instanceof canViewScope_4_13_7_canViewScope)){scope=new canViewScope_4_13_7_canViewScope(scope);}return renderer(scope);});view[isViewSymbol]=true;return view;},// Calls the truthy subsection for each item in a list and returning them in a string.
getItemsStringContent:function(items,isObserveList,helperOptions){var txt="",len=canStacheKey_1_4_3_canStacheKey.get(items,'length'),isObservable=canReflect_1_19_2_canReflect.isObservableLike(items);for(var i=0;i<len;i++){var item=isObservable?new keyObservable(items,i):items[i];txt+=helperOptions.fn(item);}return txt;},// Calls the truthy subsection for each item in a list and returns them in a document Fragment.
getItemsFragContent:function(items,helperOptions,scope){var result=[],len=canStacheKey_1_4_3_canStacheKey.get(items,'length'),isObservable=canReflect_1_19_2_canReflect.isObservableLike(items),hashExprs=helperOptions.exprData&&helperOptions.exprData.hashExprs,hashOptions;// Check if using hash
if(canReflect_1_19_2_canReflect.size(hashExprs)>0){hashOptions={};canReflect_1_19_2_canReflect.eachKey(hashExprs,function(exprs,key){hashOptions[exprs.key]=key;});}for(var i=0;i<len;i++){var aliases={};var item=isObservable?new keyObservable(items,i):items[i];if(canReflect_1_19_2_canReflect.size(hashOptions)>0){if(hashOptions.value){aliases[hashOptions.value]=item;}if(hashOptions.index){aliases[hashOptions.index]=i;}}result.push(helperOptions.fn(scope.add(aliases,{notContext:true}).add({index:i},{special:true}).add(item)));}return result;}};var last=utils$1.last;var decodeHTML=typeof document!=="undefined"&&function(){var el=document$1().createElement('div');return function(html){if(html.indexOf("&")===-1){return html.replace(/\r\n/g,"\n");}el.innerHTML=html;return el.childNodes.length===0?"":el.childNodes.item(0).nodeValue;};}();// ## HTMLSectionBuilder
//
// Contains a stack of HTMLSections.
// An HTMLSection is created everytime a subsection is found. For example:
//
//     {{#if(items)}} {{#items}} X
//
// At the point X was being processed, there would be 2 HTMLSections in the
// stack.  One for the content of `{{#if(items)}}` and the other for the
// content of `{{#items}}`
var HTMLSectionBuilder=function(filename){if(filename){this.filename=filename;}this.stack=[new HTMLSection()];};canAssign_1_3_3_canAssign(HTMLSectionBuilder.prototype,utils$1.mixins);canAssign_1_3_3_canAssign(HTMLSectionBuilder.prototype,{startSubSection:function(process){var newSection=new HTMLSection(process);this.stack.push(newSection);return newSection;},// Ends the current section and returns a renderer.
// But only returns a renderer if there is a template.
endSubSectionAndReturnRenderer:function(){if(this.last().isEmpty()){this.stack.pop();return null;}else {var htmlSection=this.endSection();return utils$1.makeView(htmlSection.compiled.hydrate.bind(htmlSection.compiled));}},startSection:function(process,commentName){var newSection=new HTMLSection(process);this.last().add({comment:commentName||"#section",callbacks:[newSection.targetCallback]});this.last().add({comment:"can-end-placeholder"});// adding a section within a section ...
// the stack has section ...
this.stack.push(newSection);},endSection:function(){this.last().compile();return this.stack.pop();},inverse:function(){this.last().inverse();},compile:function(){var compiled=this.stack.pop().compile();// ignore observations here.  the render fn
//  itself doesn't need to be observable.
return utils$1.makeView(compiled.hydrate.bind(compiled));},push:function(chars){this.last().push(chars);},pop:function(){return this.last().pop();},removeCurrentNode:function(){this.last().removeCurrentNode();}});var HTMLSection=function(process){this.data="targetData";this.targetData=[];// A record of what targetData element we are within.
this.targetStack=[];var self=this;this.targetCallback=function(scope){process.call(this,scope,self.compiled.hydrate.bind(self.compiled),self.inverseCompiled&&self.inverseCompiled.hydrate.bind(self.inverseCompiled));};};canAssign_1_3_3_canAssign(HTMLSection.prototype,{inverse:function(){this.inverseData=[];this.data="inverseData";},// Adds a DOM node.
push:function(data){this.add(data);this.targetStack.push(data);},pop:function(){return this.targetStack.pop();},add:function(data){if(typeof data==="string"){data=decodeHTML(data);}if(this.targetStack.length){last(this.targetStack).children.push(data);}else {this[this.data].push(data);}},compile:function(){this.compiled=canViewTarget_5_0_0_canViewTarget(this.targetData,document$1());if(this.inverseData){this.inverseCompiled=canViewTarget_5_0_0_canViewTarget(this.inverseData,document$1());delete this.inverseData;}this.targetStack=this.targetData=null;return this.compiled;},removeCurrentNode:function(){var children=this.children();return children.pop();},children:function(){if(this.targetStack.length){return last(this.targetStack).children;}else {return this[this.data];}},// Returns if a section is empty
isEmpty:function(){return !this.targetData.length;}});HTMLSectionBuilder.HTMLSection=HTMLSection;var html_section=HTMLSectionBuilder;var canDomData_1_0_3_canDomData=createCommonjsModule(function(module){var isEmptyObject=function(obj){/* jshint -W098 */for(var prop in obj){return false;}return true;};var data=new WeakMap();// delete this node's `data`
// returns true if the node was deleted.
var deleteNode=function(node){var nodeDeleted=false;if(data.has(node)){nodeDeleted=true;data.delete(node);}return nodeDeleted;};var setData=function(node,name,value){var store=data.get(node);if(store===undefined){store={};data.set(node,store);}if(name!==undefined){store[name]=value;}return store;};/*
 * Core of domData that does not depend on mutationDocument
 * This is separated in order to prevent circular dependencies
 */var domData={_data:data,get:function(node,key){var store=data.get(node);return key===undefined?store:store&&store[key];},set:setData,clean:function(node,prop){var itemData=data.get(node);if(itemData&&itemData[prop]){delete itemData[prop];}if(isEmptyObject(itemData)){deleteNode(node);}},delete:deleteNode};if(canNamespace_1_0_0_canNamespace.domData){throw new Error("You can't have two versions of can-dom-data, check your dependencies");}else {module.exports=canNamespace_1_0_0_canNamespace.domData=domData;}});var slice$1$1=[].slice;// a b c
// a b c d
// [[2,0, d]]
function defaultIdentity(a,b){return a===b;}function makeIdentityFromMapSchema(typeSchema){if(typeSchema.identity&&typeSchema.identity.length){return function identityCheck(a,b){var aId=canReflect_1_19_2_canReflect.getIdentity(a,typeSchema),bId=canReflect_1_19_2_canReflect.getIdentity(b,typeSchema);return aId===bId;};}else {return defaultIdentity;}}function makeIdentityFromListSchema(listSchema){return listSchema.values!=null?makeIdentityFromMapSchema(canReflect_1_19_2_canReflect.getSchema(listSchema.values)):defaultIdentity;}function makeIdentity(oldList,oldListLength){var listSchema=canReflect_1_19_2_canReflect.getSchema(oldList),typeSchema;if(listSchema!=null){if(listSchema.values!=null){typeSchema=canReflect_1_19_2_canReflect.getSchema(listSchema.values);}else {return defaultIdentity;}}if(typeSchema==null&&oldListLength>0){typeSchema=canReflect_1_19_2_canReflect.getSchema(canReflect_1_19_2_canReflect.getKeyValue(oldList,0));}if(typeSchema){return makeIdentityFromMapSchema(typeSchema);}else {return defaultIdentity;}}function reverseDiff(oldDiffStopIndex,newDiffStopIndex,oldList,newList,identity){var oldIndex=oldList.length-1,newIndex=newList.length-1;while(oldIndex>oldDiffStopIndex&&newIndex>newDiffStopIndex){var oldItem=oldList[oldIndex],newItem=newList[newIndex];if(identity(oldItem,newItem,oldIndex)){oldIndex--;newIndex--;continue;}else {// use newIndex because it reflects any deletions
return [{type:"splice",index:newDiffStopIndex,deleteCount:oldIndex-oldDiffStopIndex+1,insert:slice$1$1.call(newList,newDiffStopIndex,newIndex+1)}];}}// if we've reached of either the new or old list
// we simply return
return [{type:"splice",index:newDiffStopIndex,deleteCount:oldIndex-oldDiffStopIndex+1,insert:slice$1$1.call(newList,newDiffStopIndex,newIndex+1)}];}/**
 * @module {function} can-diff/list/list
 * @parent can-diff
 *
 * @description Return a difference of two lists.
 *
 * @signature `diffList( oldList, newList, [identity] )`
 *
 * Compares two lists and produces a sequence of patches that can be applied to make `oldList` take
 * the shape of `newList`.
 *
 * ```js
 * var diffList = require("can-diff/list/list");
 *
 * console.log(diff([1], [1, 2])); // -> [{type: "splice", index: 1, deleteCount: 0, insert: [2]}]
 * console.log(diff([1, 2], [1])); // -> [{type: "splice", index: 1, deleteCount: 1, insert: []}]
 *
 * // with an optional identity function:
 * diffList(
 *     [{id:1},{id:2}],
 *     [{id:1},{id:3}],
 *     (a,b) => a.id === b.id
 * ); // -> [{type: "splice", index: 1, deleteCount: 1, insert: [{id:3}]}]
 * ```
 *
 * The patch algorithm is linear with respect to the length of the lists and therefore does not produce a
 * [perfect edit distance](https://en.wikipedia.org/wiki/Edit_distance) (which would be at least quadratic).
 *
 * It is designed to work with most common list change scenarios, when items are inserted or removed
 * to a list (as opposed to moved with in the last).
 *
 * For example, it is able to produce the following patches:
 *
 * ```js
 * diffList(
 *     ["a","b","c","d"],
 *     ["a","b","X","Y","c","d"]
 * ); // -> [{type: "splice", index: 2, deleteCount: 0, insert: ["X","Y"]}]
 * ```
 *
 * @param  {ArrayLike} oldList The source array or list to diff from.
 * @param  {ArrayLike} newList The array or list to diff to.
 * @param  {function|can-reflect.getSchema} schemaOrIdentity An optional identity function or a schema with
 * an identity property for comparing elements.  If a `schemaOrIdentity` is not provided, the schema of
 * the `oldList` will be used.  If a schema can not be found, items a default identity function will be created
 * that checks if the two values are strictly equal `===`.
 * @return {Array} An array of [can-symbol/types/Patch] objects representing the differences
 *
 * Returns the difference between two ArrayLike objects (that have nonnegative
 * integer keys and the `length` property) as an array of patch objects.
 *
 * A patch object returned by this function has the following properties:
 * - **type**: the type of patch (`"splice"`).
 * - **index**:  the index of newList where the patch begins
 * - **deleteCount**: the number of items deleted from that index in newList
 * - **insert**: an Array of items newly inserted at that index in newList
 *
 * Patches should be applied in the order they are returned.
 */var list=function(oldList,newList,schemaOrIdentity){var oldIndex=0,newIndex=0,oldLength=canReflect_1_19_2_canReflect.size(oldList),newLength=canReflect_1_19_2_canReflect.size(newList),patches=[];var schemaType=typeof schemaOrIdentity,identity;if(schemaType==="function"){identity=schemaOrIdentity;}else if(schemaOrIdentity!=null){if(schemaOrIdentity.type==="map"){identity=makeIdentityFromMapSchema(schemaOrIdentity);}else {identity=makeIdentityFromListSchema(schemaOrIdentity);}}else {identity=makeIdentity(oldList,oldLength);}while(oldIndex<oldLength&&newIndex<newLength){var oldItem=oldList[oldIndex],newItem=newList[newIndex];if(identity(oldItem,newItem,oldIndex)){oldIndex++;newIndex++;continue;}// look for single insert, does the next newList item equal the current oldList.
// 1 2 3
// 1 2 4 3
if(newIndex+1<newLength&&identity(oldItem,newList[newIndex+1],oldIndex)){patches.push({index:newIndex,deleteCount:0,insert:[newList[newIndex]],type:"splice"});oldIndex++;newIndex+=2;continue;}// look for single removal, does the next item in the oldList equal the current newList item.
// 1 2 3
// 1 3
else if(oldIndex+1<oldLength&&identity(oldList[oldIndex+1],newItem,oldIndex+1)){patches.push({index:newIndex,deleteCount:1,insert:[],type:"splice"});oldIndex+=2;newIndex++;continue;}// just clean up the rest and exit
// 1 2 3
// 1 2 5 6 7
else {// iterate backwards to `newIndex`
// "a", "b", "c", "d", "e"
// "a", "x", "y", "z", "e"
// -> {}
patches.push.apply(patches,reverseDiff(oldIndex,newIndex,oldList,newList,identity));return patches;}}if(newIndex===newLength&&oldIndex===oldLength){return patches;}// a b
// a b c d e
patches.push({type:"splice",index:newIndex,deleteCount:oldLength-oldIndex,insert:slice$1$1.call(newList,newIndex)});return patches;};var global$1=global_1();var xmlnsAttrNamespaceURI="http://www.w3.org/2000/xmlns/";var xlinkHrefAttrNamespaceURI="http://www.w3.org/1999/xlink";var attrsNamespacesURI={'xmlns':xmlnsAttrNamespaceURI,'xlink:href':xlinkHrefAttrNamespaceURI};var formElements={"INPUT":true,"TEXTAREA":true,"SELECT":true,"BUTTON":true},// Used to convert values to strings.
toString$1$1=function(value){if(value==null){return "";}else {return ""+value;}},isSVG=function(el){return el.namespaceURI==="http://www.w3.org/2000/svg";},truthy=function(){return true;},getSpecialTest=function(special){return special&&special.test||truthy;},propProp=function(prop,obj){obj=obj||{};obj.get=function(){return this[prop];};obj.set=function(value){if(this[prop]!==value){this[prop]=value;}};return obj;},booleanProp=function(prop){return {isBoolean:true,set:function(value){if(prop in this){this[prop]=value;}else {canDomMutate_2_0_9_node.setAttribute.call(this,prop,"");}},remove:function(){this[prop]=false;}};},setupMO=function(el,callback){var attrMO=canDomData_1_0_3_canDomData.get(el,"attrMO");if(!attrMO){var onMutation=function(){callback.call(el);};var MO=mutationObserver();if(MO){var observer=new MO(onMutation);observer.observe(el,{childList:true,subtree:true});canDomData_1_0_3_canDomData.set(el,"attrMO",observer);}else {canDomData_1_0_3_canDomData.set(el,"attrMO",true);canDomData_1_0_3_canDomData.set(el,"canBindingCallback",{onMutation:onMutation});}}},_findOptionToSelect=function(parent,value){var child=parent.firstChild;while(child){if(child.nodeName==="OPTION"&&value===child.value){return child;}if(child.nodeName==="OPTGROUP"){var groupChild=_findOptionToSelect(child,value);if(groupChild){return groupChild;}}child=child.nextSibling;}},setChildOptions=function(el,value){var option;if(value!=null){option=_findOptionToSelect(el,value);}if(option){option.selected=true;}else {el.selectedIndex=-1;}},forEachOption=function(parent,fn){var child=parent.firstChild;while(child){if(child.nodeName==="OPTION"){fn(child);}if(child.nodeName==="OPTGROUP"){forEachOption(child,fn);}child=child.nextSibling;}},collectSelectedOptions=function(parent){var selectedValues=[];forEachOption(parent,function(option){if(option.selected){selectedValues.push(option.value);}});return selectedValues;},markSelectedOptions=function(parent,values){forEachOption(parent,function(option){option.selected=values.indexOf(option.value)!==-1;});},// Create a handler, only once, that will set the child options any time
// the select's value changes.
setChildOptionsOnChange=function(select,aEL){var handler=canDomData_1_0_3_canDomData.get(select,"attrSetChildOptions");if(handler){return Function.prototype;}handler=function(){setChildOptions(select,select.value);};canDomData_1_0_3_canDomData.set(select,"attrSetChildOptions",handler);aEL.call(select,"change",handler);return function(rEL){canDomData_1_0_3_canDomData.clean(select,"attrSetChildOptions");rEL.call(select,"change",handler);};},// cache of rules already calculated by `attr.getRule`
behaviorRules=new Map(),// # isPropWritable
// check if a property is writable on an element by finding its property descriptor
// on the element or its prototype chain
isPropWritable=function(el,prop){var desc=Object.getOwnPropertyDescriptor(el,prop);if(desc){return desc.writable||desc.set;}else {var proto=Object.getPrototypeOf(el);if(proto){return isPropWritable(proto,prop);}}return false;},// # cacheRule
// add a rule to the rules Map so it does not need to be calculated more than once
cacheRule=function(el,attrOrPropName,rule){var rulesForElementType;rulesForElementType=behaviorRules.get(el.prototype);if(!rulesForElementType){rulesForElementType={};behaviorRules.set(el.constructor,rulesForElementType);}rulesForElementType[attrOrPropName]=rule;return rule;};var specialAttributes={checked:{get:function(){return this.checked;},set:function(val){// - `set( truthy )` => TRUE
// - `set( "" )`     => TRUE
// - `set()`         => TRUE
// - `set(undefined)` => false.
var notFalse=!!val||val===""||arguments.length===0;this.checked=notFalse;if(notFalse&&this.type==="radio"){this.defaultChecked=true;}},remove:function(){this.checked=false;},test:function(){return this.nodeName==="INPUT";}},"class":{get:function(){if(isSVG(this)){return this.getAttribute("class");}return this.className;},set:function(val){val=val||"";if(isSVG(this)){canDomMutate_2_0_9_node.setAttribute.call(this,"class",""+val);}else {this.className=val;}}},disabled:booleanProp("disabled"),focused:{get:function(){return this===document.activeElement;},set:function(val){var cur=attr.get(this,"focused");var docEl=this.ownerDocument.documentElement;var element=this;function focusTask(){if(val){element.focus();}else {element.blur();}}if(cur!==val){if(!docEl.contains(element)){var connectionDisposal=canDomMutate_2_0_9_canDomMutate.onNodeConnected(element,function(){connectionDisposal();focusTask();});}else {// THIS MIGHT NEED TO BE PUT IN THE MUTATE QUEUE
canQueues_1_3_2_canQueues.enqueueByQueue({mutate:[focusTask]},null,[]);}}return true;},addEventListener:function(eventName,handler,aEL){aEL.call(this,"focus",handler);aEL.call(this,"blur",handler);return function(rEL){rEL.call(this,"focus",handler);rEL.call(this,"blur",handler);};},test:function(){return this.nodeName==="INPUT";}},"for":propProp("htmlFor"),innertext:propProp("innerText"),innerhtml:propProp("innerHTML"),innerHTML:propProp("innerHTML",{addEventListener:function(eventName,handler,aEL){var handlers=[];var el=this;["change","blur"].forEach(function(eventName){var localHandler=function(){handler.apply(this,arguments);};canDomEvents_1_3_13_canDomEvents.addEventListener(el,eventName,localHandler);handlers.push([eventName,localHandler]);});return function(rEL){handlers.forEach(function(info){rEL.call(el,info[0],info[1]);});};}}),required:booleanProp("required"),readonly:booleanProp("readOnly"),selected:{get:function(){return this.selected;},set:function(val){val=!!val;canDomData_1_0_3_canDomData.set(this,"lastSetValue",val);this.selected=val;},addEventListener:function(eventName,handler,aEL){var option=this;var select=this.parentNode;var lastVal=option.selected;var localHandler=function(changeEvent){var curVal=option.selected;lastVal=canDomData_1_0_3_canDomData.get(option,"lastSetValue")||lastVal;if(curVal!==lastVal){lastVal=curVal;canDomEvents_1_3_13_canDomEvents.dispatch(option,eventName);}};var removeChangeHandler=setChildOptionsOnChange(select,aEL);canDomEvents_1_3_13_canDomEvents.addEventListener(select,"change",localHandler);aEL.call(option,eventName,handler);return function(rEL){removeChangeHandler(rEL);canDomEvents_1_3_13_canDomEvents.removeEventListener(select,"change",localHandler);rEL.call(option,eventName,handler);};},test:function(){return this.nodeName==="OPTION"&&this.parentNode&&this.parentNode.nodeName==="SELECT";}},style:{set:function(){var el=global$1.document&&document$1().createElement("div");if(el&&el.style&&"cssText"in el.style){return function(val){this.style.cssText=val||"";};}else {return function(val){canDomMutate_2_0_9_node.setAttribute.call(this,"style",val);};}}()},textcontent:propProp("textContent"),value:{get:function(){var value=this.value;if(this.nodeName==="SELECT"){if("selectedIndex"in this&&this.selectedIndex===-1){value=undefined;}}return value;},set:function(value){var providedValue=value;var nodeName=this.nodeName.toLowerCase();if(nodeName==="input"||nodeName==="textarea"){// Do some input types support non string values?
value=toString$1$1(value);}if(this.value!==value||nodeName==="option"){this.value=value;}if(nodeName==="input"||nodeName==="textarea"){this.defaultValue=value;}if(nodeName==="select"){canDomData_1_0_3_canDomData.set(this,"attrValueLastVal",value);//If it's null then special case
setChildOptions(this,value===null?value:this.value);// If not in the document reset the value when inserted.
var docEl=this.ownerDocument.documentElement;if(!docEl.contains(this)){var select=this;var connectionDisposal=canDomMutate_2_0_9_canDomMutate.onNodeConnected(select,function(){connectionDisposal();setChildOptions(select,value===null?value:select.value);});}// MO handler is only set up **ONCE**
setupMO(this,function(){var value=canDomData_1_0_3_canDomData.get(this,"attrValueLastVal");attr.set(this,"value",value);canDomEvents_1_3_13_canDomEvents.dispatch(this,"change");});}// Warnings area
//!steal-remove-start
if(process.env.NODE_ENV!=="production"){var settingADateInputToADate=nodeName==="input"&&this.type==="date"&&providedValue instanceof Date;if(settingADateInputToADate){dev.warn("Binding a Date to the \"value\" property on an <input type=\"date\"> will not work as expected. Use valueAsDate:bind instead. See https://canjs.com/doc/guides/forms.html#Dateinput for more information.");}}//!steal-remove-end
},test:function(){return formElements[this.nodeName];}},values:{get:function(){return collectSelectedOptions(this);},set:function(values){values=values||[];// set new DOM state
markSelectedOptions(this,values);// store new DOM state
canDomData_1_0_3_canDomData.set(this,"stickyValues",attr.get(this,"values"));// MO handler is only set up **ONCE**
// TODO: should this be moved into addEventListener?
setupMO(this,function(){// Get the previous sticky state
var previousValues=canDomData_1_0_3_canDomData.get(this,"stickyValues");// Set DOM to previous sticky state
attr.set(this,"values",previousValues);// Get the new result after trying to maintain the sticky state
var currentValues=canDomData_1_0_3_canDomData.get(this,"stickyValues");// If there are changes, trigger a `values` event.
var changes=list(previousValues.slice().sort(),currentValues.slice().sort());if(changes.length){canDomEvents_1_3_13_canDomEvents.dispatch(this,"values");}});},addEventListener:function(eventName,handler,aEL){var localHandler=function(){canDomEvents_1_3_13_canDomEvents.dispatch(this,"values");};canDomEvents_1_3_13_canDomEvents.addEventListener(this,"change",localHandler);aEL.call(this,eventName,handler);return function(rEL){canDomEvents_1_3_13_canDomEvents.removeEventListener(this,"change",localHandler);rEL.call(this,eventName,handler);};}}};var attr={// cached rules (stored on `attr` for testing purposes)
rules:behaviorRules,// special attribute behaviors (stored on `attr` for testing purposes)
specialAttributes:specialAttributes,// # attr.getRule
//
// get the behavior rule for an attribute or property on an element
//
// Rule precendence:
//   1. "special" behaviors - use the special behavior getter/setter
//   2. writable properties - read and write as a property
//   3. all others - read and write as an attribute
//
// Once rule is determined it will be cached for all elements of the same type
// so that it does not need to be calculated again
getRule:function(el,attrOrPropName){var special=specialAttributes[attrOrPropName];// always use "special" if available
// these are not cached since they would have to be cached separately
// for each element type and it is faster to just look up in the
// specialAttributes object
if(special){return special;}// next use rules cached in a previous call to getRule
var rulesForElementType=behaviorRules.get(el.constructor);var cached=rulesForElementType&&rulesForElementType[attrOrPropName];if(cached){return cached;}// if the element doesn't have a property of this name, it must be an attribute
if(!(attrOrPropName in el)){return this.attribute(attrOrPropName);}// if there is a property, check if it is writable
var newRule=isPropWritable(el,attrOrPropName)?this.property(attrOrPropName):this.attribute(attrOrPropName);// cache the new rule and return it
return cacheRule(el,attrOrPropName,newRule);},attribute:function(attrName){return {get:function(){return this.getAttribute(attrName);},set:function(val){if(attrsNamespacesURI[attrName]){canDomMutate_2_0_9_node.setAttributeNS.call(this,attrsNamespacesURI[attrName],attrName,val);}else {canDomMutate_2_0_9_node.setAttribute.call(this,attrName,val);}}};},property:function(propName){return {get:function(){return this[propName];},set:function(val){this[propName]=val;}};},findSpecialListener:function(attributeName){return specialAttributes[attributeName]&&specialAttributes[attributeName].addEventListener;},setAttrOrProp:function(el,attrName,val){return this.set(el,attrName,val);},// ## attr.set
// Set the value an attribute on an element.
set:function(el,attrName,val){var rule=this.getRule(el,attrName);var setter=rule&&rule.set;if(setter){return setter.call(el,val);}},// ## attr.get
// Gets the value of an attribute or property.
// First checks if the property is an `specialAttributes` and if so calls the special getter.
// Then checks if the attribute or property is a property on the element.
// Otherwise uses `getAttribute` to retrieve the value.
get:function(el,attrName){var rule=this.getRule(el,attrName);var getter=rule&&rule.get;if(getter){return rule.test?rule.test.call(el)&&getter.call(el):getter.call(el);}},// ## attr.remove
// Removes an attribute from an element. First checks specialAttributes to see if the attribute is special and has a setter. If so calls the setter with `undefined`. Otherwise `removeAttribute` is used.
// If the attribute previously had a value and the browser doesn't support MutationObservers we then trigger an "attributes" event.
remove:function(el,attrName){attrName=attrName.toLowerCase();var special=specialAttributes[attrName];var setter=special&&special.set;var remover=special&&special.remove;var test=getSpecialTest(special);if(typeof remover==="function"&&test.call(el)){remover.call(el);}else if(typeof setter==="function"&&test.call(el)){setter.call(el,undefined);}else {canDomMutate_2_0_9_node.removeAttribute.call(el,attrName);}}};var canAttributeObservable_2_0_2_behaviors=attr;var setElementSymbol$2=canSymbol_1_7_0_canSymbol.for("can.setElement");var elementSymbol=canSymbol_1_7_0_canSymbol.for("can.element");function ListenUntilRemovedAndInitialize(observable,handler,placeholder,queueName,handlerName){this.observable=observable;this.handler=handler;this.placeholder=placeholder;this.queueName=queueName;this.handler[elementSymbol]=placeholder;if(observable[setElementSymbol$2]){observable[setElementSymbol$2](placeholder);}else {console.warn("no can.setElement symbol on observable",observable);}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){// register that the handler changes the parent element
canReflect_1_19_2_canReflect.assignSymbols(handler,{"can.getChangesDependencyRecord":function(){var s=new Set();s.add(placeholder);return {valueDependencies:s};}});Object.defineProperty(handler,"name",{value:handlerName});}//!steal-remove-end
this.setup();}ListenUntilRemovedAndInitialize.prototype.setup=function(){// reinsertion case, not applicable during initial setup
if(this.setupNodeReinserted){// do not set up again if disconnected
if(!canDomMutate_2_0_9_IsConnected.isConnected(this.placeholder)){return;}this.setupNodeReinserted();}this.teardownNodeRemoved=canDomMutate_2_0_9_canDomMutate.onNodeRemoved(this.placeholder,this.teardown.bind(this));//!steal-remove-start
if(process.env.NODE_ENV!=='production'){canReflectDependencies_1_1_2_canReflectDependencies.addMutatedBy(this.placeholder,this.observable);}//!steal-remove-end
canReflect_1_19_2_canReflect.onValue(this.observable,this.handler,this.queueName);this.handler(canReflect_1_19_2_canReflect.getValue(this.observable));};ListenUntilRemovedAndInitialize.prototype.teardown=function(){// do not teardown if still connected.
if(canDomMutate_2_0_9_IsConnected.isConnected(this.placeholder)){return;}this.teardownNodeRemoved();this.setupNodeReinserted=canDomMutate_2_0_9_canDomMutate.onNodeInserted(this.placeholder,this.setup.bind(this));//!steal-remove-start
if(process.env.NODE_ENV!=='production'){canReflectDependencies_1_1_2_canReflectDependencies.deleteMutatedBy(this.placeholder,this.observable);}//!steal-remove-end
canReflect_1_19_2_canReflect.offValue(this.observable,this.handler,this.queueName);};var helpers$2={range:{create:function(el,rangeName){var start,end,next;if(el.nodeType===Node.COMMENT_NODE){start=el;next=el.nextSibling;if(next&&next.nodeType===Node.COMMENT_NODE&&next.nodeValue==="can-end-placeholder"){end=next;end.nodeValue="/"+(start.nodeValue=rangeName);}else {dev.warn("can-view-live: creating an end comment for ",rangeName,el);}}else {dev.warn("can-view-live: forcing a comment range for ",rangeName,el);start=el.ownerDocument.createComment(rangeName);el.parentNode.replaceChild(start,el);}if(!end){end=el.ownerDocument.createComment("/"+rangeName);start.parentNode.insertBefore(end,start.nextSibling);}return {start:start,end:end};},remove:function(range){// TODO: Ideally this would be able to remove from the end, but
// dispatch in the right order.
// For now, we might want to remove nodes in the right order.
var parentNode=range.start.parentNode,cur=range.end.previousSibling,remove;while(cur&&cur!==range.start){remove=cur;cur=cur.previousSibling;canDomMutate_2_0_9_node.removeChild.call(parentNode,remove);}canDomMutate_2_0_9_canDomMutate.flushRecords();},update:function(range,frag){var parentNode=range.start.parentNode;if(parentNode){canDomMutate_2_0_9_node.insertBefore.call(parentNode,frag,range.end);// this makes it so `connected` events will be called immediately
canDomMutate_2_0_9_canDomMutate.flushRecords();}}},ListenUntilRemovedAndInitialize:ListenUntilRemovedAndInitialize,getAttributeParts:function(newVal){var attrs={},attr;canViewParser_4_1_3_canViewParser.parseAttrs(newVal,{attrStart:function(name){attrs[name]="";attr=name;},attrValue:function(value){attrs[attr]+=value;},attrEnd:function(){}});return attrs;},// #### addTextNodeIfNoChildren
// Append an empty text node to a parent with no children;
//  do nothing if the parent already has children.
addTextNodeIfNoChildren:function(frag){if(!frag.firstChild){frag.appendChild(frag.ownerDocument.createTextNode(""));}},// #### makeString
// any -> string converter (including nullish)
makeString:function(txt){return txt==null?"":""+txt;}};/**
 * @function can-view-live.attr attr
 * @parent can-view-live
 *
 * @signature `live.attr(el, attributeName, observable)`
 *
 * Keep an attribute live to a [can-reflect]-ed observable.
 *
 * ```js
 * var div = document.createElement('div');
 * var value = new SimpleObservable("foo bar");
 * live.attr(div,"class", value);
 * ```
 *
 * @param {HTMLElement} el The element whos attribute will be kept live.
 * @param {String} attributeName The attribute name.
 * @param {Object} observable An observable value.
 *
 * @body
 *
 * ## How it works
 *
 * This listens for the changes in the observable and uses those changes to
 * set the specified attribute.
 */var attr_1=function(el,attributeName,compute){var handlerName="";//!steal-remove-start
if(process.env.NODE_ENV!=='production'){// register that the handler changes the parent element
handlerName="live.attr update::"+canReflect_1_19_2_canReflect.getName(compute);}//!steal-remove-end
new helpers$2.ListenUntilRemovedAndInitialize(compute,function liveUpdateAttr(newVal){canAttributeObservable_2_0_2_behaviors.set(el,attributeName,newVal);},el,"dom",handlerName);};// This provides live binding for stache attributes.
var attrs=function(el,compute,scope,options){var handlerName="";if(!canReflect_1_19_2_canReflect.isObservableLike(compute)){// Non-live case (`compute` was not a compute):
//  set all attributes on the element and don't
//  worry about setting up live binding since there
//  is not compute to bind on.
var attrs=helpers$2.getAttributeParts(compute);for(var name in attrs){canDomMutate_2_0_9_node.setAttribute.call(el,name,attrs[name]);}return;}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){handlerName="live.attrs update::"+canReflect_1_19_2_canReflect.getName(compute);}//!steal-remove-end
// last set of attributes
var oldAttrs={};new helpers$2.ListenUntilRemovedAndInitialize(compute,function canViewLive_updateAttributes(newVal){var newAttrs=helpers$2.getAttributeParts(newVal),name;for(name in newAttrs){var newValue=newAttrs[name],// `oldAttrs` was set on the last run of setAttrs in this context
//  (for this element and compute)
oldValue=oldAttrs[name];// Only fire a callback
//  if the value of the attribute has changed
if(newValue!==oldValue){// set on DOM attributes (dispatches an "attributes" event as well)
canDomMutate_2_0_9_node.setAttribute.call(el,name,newValue);// get registered callback for attribute name and fire
var callback=canViewCallbacks_5_0_0_canViewCallbacks.attr(name);if(callback){callback(el,{attributeName:name,scope:scope,options:options});}}// remove key found in new attrs from old attrs
delete oldAttrs[name];}// any attrs left at this point are not set on the element now,
// so remove them.
for(name in oldAttrs){canDomMutate_2_0_9_node.removeAttribute.call(el,name);}oldAttrs=newAttrs;},el,"dom",handlerName);};var viewInsertSymbol=canSymbol_1_7_0_canSymbol.for("can.viewInsert");function makeCommentFragment(comment){var doc=document$1();return canFragment_1_3_1_canFragment([doc.createComment(comment),doc.createComment("can-end-placeholder")]);}/**
 * @function can-view-live.html html
 * @parent can-view-live
 * @release 2.0.4
 *
 * Live binds a compute's value to a collection of elements.
 *
 * @signature `live.html(el, compute, [parentNode])`
 *
 * `live.html` is used to setup incremental live-binding on a block of html.
 *
 * ```js
 * // a compute that changes its list
 * var greeting = compute(function(){
 *   return "Welcome <i>"+me.attr("name")+"</i>"
 * });
 *
 * var placeholder = document.createTextNode(" ");
 * $("#greeting").append(placeholder);
 *
 * live.html(placeholder, greeting);
 * ```
 *
 * @param {HTMLElement} el An html element to replace with the live-section.
 *
 * @param {can.compute} compute A [can.compute] whose value is HTML.
 *
 * @param {HTMLElement} [parentNode] An overwritable parentNode if `el`'s parent is
 * a documentFragment.
 *
 *
 */var html=function(el,compute,viewInsertSymbolOptions){var observableName="";var updateRange=helpers$2.range.update;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){// register that the handler changes the parent element
updateRange=helpers$2.range.update.bind(null);observableName=canReflect_1_19_2_canReflect.getName(compute);Object.defineProperty(updateRange,"name",{value:"live.html update::"+observableName});}//!steal-remove-end
if(el.nodeType!==Node.COMMENT_NODE){var commentFrag=makeCommentFragment(observableName);var startCommentNode=commentFrag.firstChild;el.parentNode.replaceChild(commentFrag,el);el=startCommentNode;}// replace element with a comment node
var range=helpers$2.range.create(el,observableName);var useQueue=false;new helpers$2.ListenUntilRemovedAndInitialize(compute,function canViewLive_updateHTML(val){// If val has the can.viewInsert symbol, call it and get something usable for val back
if(val&&typeof val[viewInsertSymbol]==="function"){val=val[viewInsertSymbol](viewInsertSymbolOptions);}var isFunction=typeof val==="function";// translate val into a document fragment if it's DOM-like
var frag=isFunction?makeCommentFragment(observableName):canFragment_1_3_1_canFragment(val);if(isFunction){val(frag.firstChild);}if(useQueue===true){helpers$2.range.remove(range);updateRange(range,frag);}else {helpers$2.range.update(range,frag);useQueue=true;}},range.start,"dom","live.html replace::"+observableName);};var onValueSymbol$3=canSymbol_1_7_0_canSymbol.for("can.onValue");var offValueSymbol$1=canSymbol_1_7_0_canSymbol.for("can.offValue");var onPatchesSymbol$1=canSymbol_1_7_0_canSymbol.for("can.onPatches");var offPatchesSymbol=canSymbol_1_7_0_canSymbol.for("can.offPatches");// Patcher takes a observable that might wrap a list type.
// When the observable changes, it will diff, and emit patches,
// and if the list emits patches, it will emit those too.
// It is expected that only `domUI` handlers are registered.
/*
var observable = new SimpleObservable( new DefineList([ "a", "b", "c" ]) )
var patcher = new Patcher(observable)
canReflect.onPatches( patcher,function(patches){
  console.log(patches) // a patch removing c, then a
})
var newList = new DefineList(["a","b"]);
observable.set(newList);
newList.unshift("X");
[
    {type: "splice", index: 2, deleteCount: 1}
]
var patches2 = [
    {type: "splice", index: 0, deleteCount: 0, inserted: ["X"]}
]
 */var Patcher=function(observableOrList,priority){// stores listeners for this patcher
this.handlers=new canKeyTree_1_2_2_canKeyTree([Object,Array],{// call setup when the first handler is bound
onFirst:this.setup.bind(this),// call teardown when the last handler is removed
onEmpty:this.teardown.bind(this)});// save this value observable or patch emitter (list)
this.observableOrList=observableOrList;// if we were passed an observable value that we need to read its array for changes
this.isObservableValue=canReflect_1_19_2_canReflect.isValueLike(this.observableOrList)||canReflect_1_19_2_canReflect.isObservableLike(this.observableOrList);if(this.isObservableValue){this.priority=canReflect_1_19_2_canReflect.getPriority(observableOrList);}else {this.priority=priority||0;}this.onList=this.onList.bind(this);this.onPatchesNotify=this.onPatchesNotify.bind(this);// needs to be unique so the derive queue doesn't only add one.
this.onPatchesDerive=this.onPatchesDerive.bind(this);// stores patches that have happened between notification and
// when we queue the  `onPatches` handlers in the `domUI` queue
this.patches=[];//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(this.onList,"name",{value:"live.list new list::"+canReflect_1_19_2_canReflect.getName(observableOrList)});Object.defineProperty(this.onPatchesNotify,"name",{value:"live.list notify::"+canReflect_1_19_2_canReflect.getName(observableOrList)});Object.defineProperty(this.onPatchesDerive,"name",{value:"live.list derive::"+canReflect_1_19_2_canReflect.getName(observableOrList)});}//!steal-remove-end
};Patcher.prototype={constructor:Patcher,setup:function(){if(this.observableOrList[onValueSymbol$3]){// if we have an observable value, listen to when it changes to get a
// new list.
canReflect_1_19_2_canReflect.onValue(this.observableOrList,this.onList,"notify");// listen on the current value (which shoudl be a list) if there is one
this.setupList(canReflect_1_19_2_canReflect.getValue(this.observableOrList));}else {this.setupList(this.observableOrList);}},teardown:function(){if(this.observableOrList[offValueSymbol$1]){canReflect_1_19_2_canReflect.offValue(this.observableOrList,this.onList,"notify");}if(this.currentList&&this.currentList[offPatchesSymbol]){this.currentList[offPatchesSymbol](this.onPatchesNotify,"notify");}},// listen to the list for patches
setupList:function(list$$1){this.currentList=list$$1;if(list$$1&&list$$1[onPatchesSymbol$1]){// If observable, set up bindings on list changes
list$$1[onPatchesSymbol$1](this.onPatchesNotify,"notify");}},// when the list changes, teardown the old list bindings
// and setup the new list
onList:function onList(newList){var current=this.currentList||[];newList=newList||[];if(current[offPatchesSymbol]){current[offPatchesSymbol](this.onPatchesNotify,"notify");}var patches=list(current,newList);this.currentList=newList;this.onPatchesNotify(patches);if(newList[onPatchesSymbol$1]){// If observable, set up bindings on list changes
newList[onPatchesSymbol$1](this.onPatchesNotify,"notify");}},// This is when we get notified of patches on the underlying list.
// Save the patches and queue up a `derive` task that will
// call `domUI` updates.
onPatchesNotify:function onPatchesNotify(patches){// we are going to collect all patches
this.patches.push.apply(this.patches,patches);// TODO: share priority
canQueues_1_3_2_canQueues.deriveQueue.enqueue(this.onPatchesDerive,this,[],{priority:this.priority});},// Let handlers (which should only be registered in `domUI`) know about patches
// that they can apply.
onPatchesDerive:function onPatchesDerive(){var patches=this.patches;this.patches=[];canQueues_1_3_2_canQueues.enqueueByQueue(this.handlers.getNode([]),this.currentList,[patches,this.currentList],null,["Apply patches",patches]);}};canReflect_1_19_2_canReflect.assignSymbols(Patcher.prototype,{"can.onPatches":function(handler,queue){this.handlers.add([queue||"mutate",handler]);},"can.offPatches":function(handler,queue){this.handlers.delete([queue||"mutate",handler]);}});var patcher=Patcher;var patchSort=function(patches){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var deletes=[],inserts=[],moves=[];patches.forEach(function(patch){if(patch.type==="move"){moves.push(patch);}else {if(patch.deleteCount){deletes.push(patch);}if(patch.insert&&patch.insert.length){inserts.push(inserts);}}});if(deletes.length+inserts.length>2){console.error("unable to group patches",patches);throw new Error("unable to group patches");}if(moves.length&&(deletes.length||inserts.length)){console.error("unable to sort a move with a delete or insert");throw new Error("unable to sort a move with a delete or insert");}}//!steal-remove-end
var splitPatches=[];patches.forEach(function(patch){if(patch.type==="move"){splitPatches.push({patch:patch,kind:"move"});}else {if(patch.deleteCount){splitPatches.push({type:"splice",index:patch.index,deleteCount:patch.deleteCount,insert:[]});}if(patch.insert&&patch.insert.length){splitPatches.push({type:"splice",index:patch.index,deleteCount:0,insert:patch.insert});}}});if(patches.length!==2){return patches;}var first=splitPatches[0],second=splitPatches[1];// if insert before a delete
if(first.insert&&first.insert.length&&second.deleteCount){// lets swap the order.
var insert=first,remove=second;if(insert.index<remove.index){remove.index=remove.index-insert.insert.length;}else if(insert.index>remove.index){insert.index=insert.index-remove.deleteCount;}else {throw "indexes the same!";}return [remove,insert];}return patches;};function SetObservable(initialValue,setter){this.setter=setter;canSimpleObservable_2_5_0_canSimpleObservable.call(this,initialValue);}SetObservable.prototype=Object.create(canSimpleObservable_2_5_0_canSimpleObservable.prototype);SetObservable.prototype.constructor=SetObservable;SetObservable.prototype.set=function(newVal){this.setter(newVal);};canReflect_1_19_2_canReflect.assignSymbols(SetObservable.prototype,{"can.setValue":SetObservable.prototype.set});var setObservable=SetObservable;var splice$1=[].splice;// #### renderAndAddRangeNode
// a helper function that renders something and adds its nodeLists to newNodeLists
// in the right way for stache.
var renderAndAddRangeNode=function(render,context,args,document){// call the renderer, passing in the new nodeList as the last argument
var itemHTML=render.apply(context,args.concat()),// and put the output into a document fragment
itemFrag=canFragment_1_3_1_canFragment(itemHTML);var rangeNode=document.createTextNode("");itemFrag.appendChild(rangeNode);return itemFrag;};function getFrag(first,last){var frag=first.ownerDocument.createDocumentFragment();var current,lastInserted;// hopefully this doesn't dispatch removed?
while(last!==first){current=last;last=current.previousSibling;frag.insertBefore(current,lastInserted);lastInserted=current;}frag.insertBefore(last,lastInserted);return frag;}var onPatchesSymbol$2=canSymbol_1_7_0_canSymbol.for("can.onPatches");var offPatchesSymbol$1=canSymbol_1_7_0_canSymbol.for("can.offPatches");function ListDOMPatcher(el,compute,render,context,falseyRender){this.patcher=new patcher(compute);var observableName=canReflect_1_19_2_canReflect.getName(compute);// argument cleanup
// function callback binding
// argument saving -----
this.value=compute;this.render=render;this.context=context;this.falseyRender=falseyRender;this.range=helpers$2.range.create(el,observableName);// A mapping of indices to observables holding that index.
this.indexMap=[];// A mapping of each item's end node
this.itemEndNode=[];// A mapping of each item to its pending patches.
this.domQueue=[];this.isValueLike=canReflect_1_19_2_canReflect.isValueLike(this.value);this.isObservableLike=canReflect_1_19_2_canReflect.isObservableLike(this.value);// Setup binding and teardown to add and remove events
this.onPatches=this.onPatches.bind(this);this.processDomQueue=this.processDomQueue.bind(this);this.teardownValueBinding=this.teardownValueBinding.bind(this);this.meta={reasonLog:"live.html add::"+observableName,element:this.range.start};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(this.onPatches,"name",{value:"live.list update::"+canReflect_1_19_2_canReflect.getName(compute)});}//!steal-remove-end
this.setupValueBinding();}var onPatchesSymbol$2=canSymbol_1_7_0_canSymbol.for("can.onPatches");var offPatchesSymbol$1=canSymbol_1_7_0_canSymbol.for("can.offPatches");ListDOMPatcher.prototype={setupValueBinding:function(){// Teardown when the placeholder element is removed.
this.teardownNodeRemoved=canDomMutate_2_0_9_canDomMutate.onNodeRemoved(this.range.start,this.teardownValueBinding);// Listen to when the patcher produces patches.
this.patcher[onPatchesSymbol$2](this.onPatches,"notify");// Initialize with the patcher's value
if(this.patcher.currentList&&this.patcher.currentList.length){this.add(this.patcher.currentList,0);}else {this.addFalseyIfEmpty();}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){canReflectDependencies_1_1_2_canReflectDependencies.addMutatedBy(this.range.start,this.patcher.observableOrList);}//!steal-remove-end
},teardownValueBinding:function(){this.exit=true;// Stop listening for teardowns
this.teardownNodeRemoved();this.patcher[offPatchesSymbol$1](this.onPatches,"notify");// Todo: I bet this is no longer necessary?
//this.remove({
//	length: this.patcher.currentList ? this.patcher.currentList.length : 0
//}, 0, true);
//!steal-remove-start
if(process.env.NODE_ENV!=='production'){canReflectDependencies_1_1_2_canReflectDependencies.deleteMutatedBy(this.range.start,this.patcher.observableOrList);}//!steal-remove-end
},onPatches:function ListDOMPatcher_onPatches(patches){if(this.exit){return;}var sortedPatches=[];patches.forEach(function(patch){sortedPatches.push.apply(sortedPatches,patchSort([patch]));});// adjust so things can happen
for(var i=0,patchLen=sortedPatches.length;i<patchLen;i++){var patch=sortedPatches[i];if(patch.type==="move"){this.addToDomQueue(this.move,[patch.toIndex,patch.fromIndex]);}else if(patch.type==="splice"){if(patch.deleteCount){// Remove any items scheduled for deletion from the patch.
this.addToDomQueue(this.remove,[{length:patch.deleteCount},patch.index]);}if(patch.insert&&patch.insert.length){// Insert any new items at the index
this.addToDomQueue(this.add,[patch.insert,patch.index]);}}else {// all other patch types are ignored
continue;}}},addToDomQueue:function(fn,args){this.domQueue.push({fn:fn,args:args});canQueues_1_3_2_canQueues.domQueue.enqueue(this.processDomQueue,this,[this.domQueue],this.meta);},processDomQueue:function(){this.domQueue.forEach(function(queueItem){var fn=queueItem.fn;var args=queueItem.args;fn.apply(this,args);}.bind(this));this.domQueue=[];},add:function(items,index){//if (!afterPreviousEvents) {
//	return;
//}
// Collect new html and mappings
var ownerDocument=this.range.start.ownerDocument,frag=ownerDocument.createDocumentFragment(),newEndNodes=[],newIndicies=[],render=this.render,context=this.context;// For each new item,
items.forEach(function(item,key){var itemIndex=new canSimpleObservable_2_5_0_canSimpleObservable(key+index),itemCompute=new setObservable(item,function(newVal){canReflect_1_19_2_canReflect.setKeyValue(this.patcher.currentList,itemIndex.get(),newVal);}.bind(this)),itemFrag=renderAndAddRangeNode(render,context,[itemCompute,itemIndex],ownerDocument);newEndNodes.push(itemFrag.lastChild);// Hookup the fragment (which sets up child live-bindings) and
// add it to the collection of all added elements.
frag.appendChild(itemFrag);// track indicies;
newIndicies.push(itemIndex);},this);// The position of elements is always after the initial text placeholder node
// TODO: this should probably happen earlier.
// remove falsey if there's something there
if(!this.indexMap.length){// remove all leftover things
helpers$2.range.remove(this.range);this.itemEndNode=[];}// figure out where we are placing things.
var placeholder,endNodesLength=this.itemEndNode.length;if(index===endNodesLength){placeholder=this.range.end;}else if(index===0){placeholder=this.range.start.nextSibling;}else if(index<endNodesLength){placeholder=this.itemEndNode[index-1].nextSibling;}else {throw new Error("Unable to place item");}canDomMutate_2_0_9_node.insertBefore.call(placeholder.parentNode,frag,placeholder);splice$1.apply(this.itemEndNode,[index,0].concat(newEndNodes));// update indices after insert point
splice$1.apply(this.indexMap,[index,0].concat(newIndicies));for(var i=index+newIndicies.length,len=this.indexMap.length;i<len;i++){this.indexMap[i].set(i);}},remove:function(items,index){//if (!afterPreviousEvents) {
//	return;
//}
// If this is because an element was removed, we should
// check to make sure the live elements are still in the page.
// If we did this during a teardown, it would cause an infinite loop.
//if (!duringTeardown && this.data.teardownCheck(this.placeholder.parentNode)) {
//	return;
//}
if(index<0){index=this.indexMap.length+index;}var removeStart;var removeEnd;var removeCount=items.length;var endIndex=index+removeCount-1;if(index===0){removeStart=this.range.start;}else {removeStart=this.itemEndNode[index-1];}removeEnd=this.itemEndNode[endIndex].nextSibling;this.itemEndNode.splice(index,items.length);if(removeStart&&removeEnd){helpers$2.range.remove({start:removeStart,end:removeEnd});}var indexMap=this.indexMap;// update indices after remove point
indexMap.splice(index,items.length);for(var i=index,len=indexMap.length;i<len;i++){indexMap[i].set(i);}// don't remove elements during teardown.  Something else will probably be doing that.
if(!this.exit){// adds the falsey section if the list is empty
this.addFalseyIfEmpty();}},// #### addFalseyIfEmpty
// Add the results of redering the "falsey" or inverse case render to the
// master nodeList and the DOM if the live list is empty
addFalseyIfEmpty:function(){if(this.falseyRender&&this.indexMap.length===0){// If there are no items ... we should render the falsey template
var falseyFrag=renderAndAddRangeNode(this.falseyRender,this.currentList,[this.currentList],this.range.start.ownerDocument);helpers$2.range.update(this.range,falseyFrag);}},move:function move(newIndex,currentIndex){//if (!afterPreviousEvents) {
//	return;
//}
// The position of elements is always after the initial text
// placeholder node
var currentFirstNode,currentEndNode=this.itemEndNode[currentIndex];if(currentIndex>0){currentFirstNode=this.itemEndNode[currentIndex-1].nextSibling;}else {currentFirstNode=this.range.start.nextSibling;}var newIndexFirstNode;if(currentIndex<newIndex){// we need to advance one spot, because removing at
// current index will shift everything left
newIndexFirstNode=this.itemEndNode[newIndex].nextSibling;}else {if(newIndex>0){newIndexFirstNode=this.itemEndNode[newIndex-1].nextSibling;}else {newIndexFirstNode=this.range.start.nextSibling;}}// need to put this at the newIndex
var frag=getFrag(currentFirstNode,currentEndNode);newIndexFirstNode.parentNode.insertBefore(frag,newIndexFirstNode);// update endNodes
this.itemEndNode.splice(currentIndex,1);this.itemEndNode.splice(newIndex,0,currentEndNode);// Update indexMap
newIndex=newIndex+1;currentIndex=currentIndex+1;var indexMap=this.indexMap;// Convert back to a zero-based array index
newIndex=newIndex-1;currentIndex=currentIndex-1;// Grab the index compute from the `indexMap`
var indexCompute=indexMap[currentIndex];// Remove the index compute from the `indexMap`
[].splice.apply(indexMap,[currentIndex,1]);// Move the index compute to the correct index in the `indexMap`
[].splice.apply(indexMap,[newIndex,0,indexCompute]);var i=Math.min(currentIndex,newIndex);var len=indexMap.length;for(len;i<len;i++){// set each compute to have its current index in the map as its value
indexMap[i].set(i);}}};/**
 * @function can-view-live.list list
 * @parent can-view-live
 * @release 2.0.4
 *
 * @signature `live.list(el, list, render, context)`
 *
 * Live binds a compute's list incrementally.
 *
 * ```js
 * // a compute that change's it's list
 * var todos = compute(function(){
 *   return new Todo.List({page: can.route.attr("page")})
 * })
 *
 * var placeholder = document.createTextNode(" ");
 * $("ul#todos").append(placeholder);
 *
 * can.view.live.list(
 *   placeholder,
 *   todos,
 *   function(todo, index){
 *     return "<li>"+todo.attr("name")+"</li>"
 *   });
 * ```
 *
 * @param {HTMLElement} el An html element to replace with the live-section.
 *
 * @param {Object} list An observable value or list type. If an observable value, it should contain
 * a falsey value or a list type.
 *
 * @param {function(this:*,*,index):String} render(index, index) A function that when called with
 * the incremental item to render and the index of the item in the list.
 *
 * @param {Object} context The `this` the `render` function will be called with.
 *
 * @body
 *
 * ## How it works
 *
 * If `list` is an observable value, `live.list` listens to changes in in that
 * observable value.  It will generally change from one list type (often a list type that implements `onPatches`)
 * to another.  When the value changes, a diff will be performed and the DOM updated.  Also, `live.list`
 * will listen to `.onPatches` on the new list and apply any patches emitted from it.
 *
 *
 */var list$1=function(el,list,render,context,falseyRender){new ListDOMPatcher(el,list,render,context,falseyRender);};/**
 * @function can-view-live.text text
 * @parent can-view-live
 * @release 2.0.4
 *
 * @signature `live.text(el, compute)`
 *
 * Replaces one element with some content while keeping [can-view-live.nodeLists nodeLists] data correct.
 */var text=function(el,compute){var handlerName="";//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(arguments.length>2){// TODO: remove
throw new Error("too many arguments");}handlerName="live.text update::"+canReflect_1_19_2_canReflect.getName(compute);}//!steal-remove-end
// TODO: we can remove this at some point
if(el.nodeType!==Node.TEXT_NODE){var textNode;textNode=document.createTextNode("");el.parentNode.replaceChild(textNode,el);el=textNode;}new helpers$2.ListenUntilRemovedAndInitialize(compute,function liveTextUpdateTextNode(newVal){el.nodeValue=helpers$2.makeString(newVal);},el,"dom",// TODO: should this still be domUI?
handlerName);};/**	
 * @module {{}} can-view-live can-view-live	
 * @parent can-views	
 * @collection can-infrastructure	
 * @package ./package.json	
 *	
 * Setup live-binding between the DOM and a compute manually.	
 *	
 * @option {Object} An object with the live-binding methods:	
 * [can-view-live.html], [can-view-live.list], [can-view-live.text], and	
 * [can-view-live.attr].	
 *
 *	
 * @body	
 *	
 * ## Use	
 *	
 *  [can-view-live] is an object with utility methods for setting up	
 *  live-binding in relation to different parts of the DOM and DOM elements.  For	
 *  example, to make an `<h2>`'s text stay live with	
 *  a compute:	
 *	
 *  ```js	
 *  var live = require("can-view-live");	
 *  var text = canCompute("Hello World");	
 *  var textNode = $("h2").text(" ")[0].childNodes[0];	
 *  live.text(textNode, text);	
 *  ```	
 *	
 */var live$1={};live$1.attr=attr_1;live$1.attrs=attrs;live$1.html=html;live$1.list=list$1;live$1.text=text;var canViewLive_5_0_5_canViewLive=live$1;var noop$8=function(){};var TextSectionBuilder=function(filename){if(filename){this.filename=filename;}this.stack=[new TextSection()];};canAssign_1_3_3_canAssign(TextSectionBuilder.prototype,utils$1.mixins);canAssign_1_3_3_canAssign(TextSectionBuilder.prototype,{// Adds a subsection.
startSection:function(process){var subSection=new TextSection();this.last().add({process:process,truthy:subSection});this.stack.push(subSection);},endSection:function(){this.stack.pop();},inverse:function(){this.stack.pop();var falseySection=new TextSection();this.last().last().falsey=falseySection;this.stack.push(falseySection);},compile:function(state){var renderer=this.stack[0].compile();//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(renderer,"name",{value:"textSectionRenderer<"+state.tag+"."+state.attr+">"});}//!steal-remove-end
return function(scope){function textSectionRender(){return renderer(scope);}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(textSectionRender,"name",{value:"textSectionRender<"+state.tag+"."+state.attr+">"});}//!steal-remove-end
var observation=new canObservation_4_2_0_canObservation(textSectionRender,null,{isObservable:false});canReflect_1_19_2_canReflect.onValue(observation,noop$8);var value=canReflect_1_19_2_canReflect.getValue(observation);if(canReflect_1_19_2_canReflect.valueHasDependencies(observation)){if(state.textContentOnly){canViewLive_5_0_5_canViewLive.text(this,observation);}else if(state.attr){canViewLive_5_0_5_canViewLive.attr(this,state.attr,observation);}else {canViewLive_5_0_5_canViewLive.attrs(this,observation,scope);}canReflect_1_19_2_canReflect.offValue(observation,noop$8);}else {if(state.textContentOnly){this.nodeValue=value;}else if(state.attr){canDomMutate_2_0_9_node.setAttribute.call(this,state.attr,value);}else {canViewLive_5_0_5_canViewLive.attrs(this,value);}}};}});var passTruthyFalsey=function(process,truthy,falsey){return function(scope){return process.call(this,scope,truthy,falsey);};};var TextSection=function(){this.values=[];};canAssign_1_3_3_canAssign(TextSection.prototype,{add:function(data){this.values.push(data);},last:function(){return this.values[this.values.length-1];},compile:function(){var values=this.values,len=values.length;for(var i=0;i<len;i++){var value=this.values[i];if(typeof value==="object"){values[i]=passTruthyFalsey(value.process,value.truthy&&value.truthy.compile(),value.falsey&&value.falsey.compile());}}return function(scope){var txt="",value;for(var i=0;i<len;i++){value=values[i];txt+=typeof value==="string"?value:value.call(this,scope);}return txt;};}});var text_section=TextSectionBuilder;// ### Arg
// `new Arg(Expression [,modifierOptions] )`
// Used to identify an expression that should return a value.
var Arg=function(expression,modifiers){this.expr=expression;this.modifiers=modifiers||{};this.isCompute=false;};Arg.prototype.value=function(){return this.expr.value.apply(this.expr,arguments);};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Arg.prototype.sourceText=function(){return (this.modifiers.compute?"~":"")+this.expr.sourceText();};}//!steal-remove-end
var arg=Arg;// ### Literal
// For inline static values like `{{"Hello World"}}`
var Literal=function(value){this._value=value;};Literal.prototype.value=function(){return this._value;};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Literal.prototype.sourceText=function(){return JSON.stringify(this._value);};}//!steal-remove-end
var literal=Literal;// ## Helpers
function getObservableValue_fromDynamicKey_fromObservable(key,root,helperOptions,readOptions){// This needs to return something similar to a ScopeKeyData with intialValue and parentHasKey
var getKeys=function(){return canStacheKey_1_4_3_canStacheKey.reads((""+canReflect_1_19_2_canReflect.getValue(key)).replace(/\./g,"\\."));};var parentHasKey;var computeValue=new setter(function getDynamicKey(){var readData=canStacheKey_1_4_3_canStacheKey.read(canReflect_1_19_2_canReflect.getValue(root),getKeys());parentHasKey=readData.parentHasKey;return readData.value;},function setDynamicKey(newVal){canStacheKey_1_4_3_canStacheKey.write(canReflect_1_19_2_canReflect.getValue(root),getKeys(),newVal);});// This prevents lazy evalutaion
canObservation_4_2_0_canObservation.temporarilyBind(computeValue);// peek so no observable that might call getObservableValue_fromDynamicKey_fromObservable will re-evaluate if computeValue changes.
computeValue.initialValue=canObservationRecorder_1_3_1_canObservationRecorder.peekValue(computeValue);computeValue.parentHasKey=parentHasKey;// Todo:
// 1. We should warn here if `initialValue` is undefined.  We can expose the warning function
//    in can-view-scope and call it here.
// 2. We should make this lazy if possible.  We can do that by making getter/setters for
//    initialValue and parentHasKey (and possibly @@can.valueHasDependencies)
return computeValue;}// If not a Literal or an Arg, convert to an arg for caching.
function convertToArgExpression(expr){if(!(expr instanceof arg)&&!(expr instanceof literal)){return new arg(expr);}else {return expr;}}function toComputeOrValue(value){// convert to non observable value
if(canReflect_1_19_2_canReflect.isObservableLike(value)){// we only want to do this for things that `should` have dependencies, but dont.
if(canReflect_1_19_2_canReflect.isValueLike(value)&&canReflect_1_19_2_canReflect.valueHasDependencies(value)===false){return canReflect_1_19_2_canReflect.getValue(value);}// if compute data
if(value.compute){return value.compute;}else {return canViewScope_4_13_7_makeComputeLike(value);}}return value;}// try to make it a compute no matter what.  This is useful for
// ~ operator.
function toCompute(value){if(value){if(value.isComputed){return value;}if(value.compute){return value.compute;}else {return canViewScope_4_13_7_makeComputeLike(value);}}return value;}var expressionHelpers={getObservableValue_fromDynamicKey_fromObservable:getObservableValue_fromDynamicKey_fromObservable,convertToArgExpression:convertToArgExpression,toComputeOrValue:toComputeOrValue,toCompute:toCompute};var Hashes=function(hashes){this.hashExprs=hashes;};Hashes.prototype.value=function(scope,helperOptions){var hash={};for(var prop in this.hashExprs){var val=expressionHelpers.convertToArgExpression(this.hashExprs[prop]),value=val.value.apply(val,arguments);hash[prop]={call:!val.modifiers||!val.modifiers.compute,value:value};}return new canObservation_4_2_0_canObservation(function(){var finalHash={};for(var prop in hash){finalHash[prop]=hash[prop].call?canReflect_1_19_2_canReflect.getValue(hash[prop].value):expressionHelpers.toComputeOrValue(hash[prop].value);}return finalHash;});};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Hashes.prototype.sourceText=function(){var hashes=[];canReflect_1_19_2_canReflect.eachKey(this.hashExprs,function(expr,prop){hashes.push(prop+"="+expr.sourceText());});return hashes.join(" ");};}//!steal-remove-end
var hashes=Hashes;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var canSymbol=canSymbol_1_7_0_canSymbol;}//!steal-remove-end
// ### Bracket
// For accessing properties using bracket notation like `foo[bar]`
var Bracket=function(key,root,originalKey){this.root=root;this.key=key;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){this[canSymbol.for("can-stache.originalKey")]=originalKey;}//!steal-remove-end
};Bracket.prototype.value=function(scope,helpers){var root=this.root?this.root.value(scope,helpers):scope.peek("this");return expressionHelpers.getObservableValue_fromDynamicKey_fromObservable(this.key.value(scope,helpers),root,scope,helpers,{});};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Bracket.prototype.sourceText=function(){if(this.rootExpr){return this.rootExpr.sourceText()+"["+this.key+"]";}else {return "["+this.key+"]";}};}//!steal-remove-end
Bracket.prototype.closingTag=function(){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){return this[canSymbol.for('can-stache.originalKey')]||'';}//!steal-remove-end
};var bracket=Bracket;var setIdentifier=function SetIdentifier(value){this.value=value;};var sourceTextSymbol=canSymbol_1_7_0_canSymbol.for("can-stache.sourceText");var isViewSymbol$1=canSymbol_1_7_0_canSymbol.for("can.isView");// ### Call
// `new Call( new Lookup("method"), [new ScopeExpr("name")], {})`
// A call expression like `method(arg1, arg2)` that, by default,
// calls `method` with non compute values.
var Call=function(methodExpression,argExpressions){this.methodExpr=methodExpression;this.argExprs=argExpressions.map(expressionHelpers.convertToArgExpression);};Call.prototype.args=function(scope,ignoreArgLookup){var hashExprs={};var args=[];var gotIgnoreFunction=typeof ignoreArgLookup==="function";for(var i=0,len=this.argExprs.length;i<len;i++){var arg=this.argExprs[i];if(arg.expr instanceof hashes){canAssign_1_3_3_canAssign(hashExprs,arg.expr.hashExprs);}if(!gotIgnoreFunction||!ignoreArgLookup(i)){var value=arg.value.apply(arg,arguments);args.push({// always do getValue unless compute is false
call:!arg.modifiers||!arg.modifiers.compute,value:value});}}return function(doNotWrapArguments){var finalArgs=[];if(canReflect_1_19_2_canReflect.size(hashExprs)>0){finalArgs.hashExprs=hashExprs;}for(var i=0,len=args.length;i<len;i++){if(doNotWrapArguments){finalArgs[i]=args[i].value;}else {finalArgs[i]=args[i].call?canReflect_1_19_2_canReflect.getValue(args[i].value):expressionHelpers.toCompute(args[i].value);}}return finalArgs;};};Call.prototype.value=function(scope,helperOptions){var callExpression=this;// proxyMethods must be false so that the `requiresOptionsArgument` and any
// other flags stored on the function are preserved
var method=this.methodExpr.value(scope,{proxyMethods:false});canObservation_4_2_0_canObservation.temporarilyBind(method);var func=canReflect_1_19_2_canReflect.getValue(method);var getArgs=callExpression.args(scope,func&&func.ignoreArgLookup);var computeFn=function(newVal){var func=canReflect_1_19_2_canReflect.getValue(method);if(typeof func==="function"){if(canReflect_1_19_2_canReflect.isObservableLike(func)){func=canReflect_1_19_2_canReflect.getValue(func);}var args=getArgs(func.isLiveBound);if(func.requiresOptionsArgument){if(args.hashExprs&&helperOptions&&helperOptions.exprData){helperOptions.exprData.hashExprs=args.hashExprs;}// For #581
if(helperOptions!==undefined){args.push(helperOptions);}}// we are calling a view!
if(func[isViewSymbol$1]===true){// if not a scope, we should create a scope that
// includes the template scope
if(!(args[0]instanceof canViewScope_4_13_7_canViewScope)){args[0]=scope.getTemplateContext().add(args[0]);}}if(arguments.length){args.unshift(new setIdentifier(newVal));}// if this is a call like `foo.bar()` the method.thisArg will be set to `foo`
// for a call like `foo()`, method.thisArg will not be set and we will default
// to setting the scope as the context of the function
return func.apply(method.thisArg||scope.peek("this"),args);}};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(computeFn,"name",{value:"{{"+this.sourceText()+"}}"});}//!steal-remove-end
if(helperOptions&&helperOptions.doNotWrapInObservation){return computeFn();}else {var computeValue=new setter(computeFn,computeFn);return computeValue;}};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Call.prototype.sourceText=function(){var args=this.argExprs.map(function(arg){return arg.sourceText();});return this.methodExpr.sourceText()+"("+args.join(",")+")";};}//!steal-remove-end
Call.prototype.closingTag=function(){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(this.methodExpr[sourceTextSymbol]){return this.methodExpr[sourceTextSymbol];}}//!steal-remove-end
return this.methodExpr.key;};var call$1=Call;var Helper=function(methodExpression,argExpressions,hashExpressions){this.methodExpr=methodExpression;this.argExprs=argExpressions;this.hashExprs=hashExpressions;this.mode=null;};Helper.prototype.args=function(scope){var args=[];for(var i=0,len=this.argExprs.length;i<len;i++){var arg=this.argExprs[i];// TODO: once we know the helper, we should be able to avoid compute conversion
args.push(expressionHelpers.toComputeOrValue(arg.value.apply(arg,arguments)));}return args;};Helper.prototype.hash=function(scope){var hash={};for(var prop in this.hashExprs){var val=this.hashExprs[prop];// TODO: once we know the helper, we should be able to avoid compute conversion
hash[prop]=expressionHelpers.toComputeOrValue(val.value.apply(val,arguments));}return hash;};Helper.prototype.value=function(scope,helperOptions){// If a literal, this means it should be treated as a key. But helpers work this way for some reason.
// TODO: fix parsing so numbers will also be assumed to be keys.
var methodKey=this.methodExpr instanceof literal?""+this.methodExpr._value:this.methodExpr.key,helperInstance=this,// proxyMethods must be false so that the `requiresOptionsArgument` and any
// other flags stored on the function are preserved
helperFn=scope.computeData(methodKey,{proxyMethods:false}),initialValue=helperFn&&helperFn.initialValue,thisArg=helperFn&&helperFn.thisArg;if(typeof initialValue==="function"){helperFn=function helperFn(){var args=helperInstance.args(scope),helperOptionArg=canAssign_1_3_3_canAssign(canAssign_1_3_3_canAssign({},helperOptions),{hash:helperInstance.hash(scope),exprData:helperInstance});args.push(helperOptionArg);return initialValue.apply(thisArg||scope.peek("this"),args);};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(helperFn,"name",{configurable:true,value:canReflect_1_19_2_canReflect.getName(this)});}//!steal-remove-end
}//!steal-remove-start
else if(process.env.NODE_ENV!=='production'){var filename=scope.peek('scope.filename');var lineNumber=scope.peek('scope.lineNumber');dev.warn((filename?filename+':':'')+(lineNumber?lineNumber+': ':'')+'Unable to find helper "'+methodKey+'".');}//!steal-remove-end
return helperFn;};Helper.prototype.closingTag=function(){return this.methodExpr.key;};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Helper.prototype.sourceText=function(){var text=[this.methodExpr.sourceText()];if(this.argExprs.length){text.push(this.argExprs.map(function(arg){return arg.sourceText();}).join(" "));}if(canReflect_1_19_2_canReflect.size(this.hashExprs)>0){text.push(hashes.prototype.sourceText.call(this));}return text.join(" ");};canReflect_1_19_2_canReflect.assignSymbols(Helper.prototype,{"can.getName":function(){return canReflect_1_19_2_canReflect.getName(this.constructor)+"{{"+this.sourceText()+"}}";}});}//!steal-remove-end
var helper=Helper;var sourceTextSymbol$1=canSymbol_1_7_0_canSymbol.for("can-stache.sourceText");// ### Lookup
// `new Lookup(String, [Expression])`
// Finds a value in the scope or a helper.
var Lookup=function(key,root,sourceText){this.key=key;this.rootExpr=root;canReflect_1_19_2_canReflect.setKeyValue(this,sourceTextSymbol$1,sourceText);};Lookup.prototype.value=function(scope,readOptions){if(this.rootExpr){return expressionHelpers.getObservableValue_fromDynamicKey_fromObservable(this.key,this.rootExpr.value(scope),scope,{},{});}else {return scope.computeData(this.key,canAssign_1_3_3_canAssign({warnOnMissingKey:true},readOptions));}};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Lookup.prototype.sourceText=function(){if(this[sourceTextSymbol$1]){return this[sourceTextSymbol$1];}else if(this.rootExpr){return this.rootExpr.sourceText()+"."+this.key;}else {return this.key;}};}//!steal-remove-end
var lookup=Lookup;// ## Expression Types
//
// These expression types return a value. They are assembled by `expression.parse`.
var last$1=utils$1.last;var sourceTextSymbol$2=canSymbol_1_7_0_canSymbol.for("can-stache.sourceText");// ### Hash
// A placeholder. This isn't actually used.
var Hash$2=function(){};// jshint ignore:line
// NAME - \w
// KEY - foo, foo.bar, foo@bar, %foo (special), &foo (references), ../foo, ./foo
// ARG - ~KEY, KEY, CALLEXPRESSION, PRIMITIVE
// CALLEXPRESSION = KEY(ARG,ARG, NAME=ARG)
// HELPEREXPRESSION = KEY ARG ARG NAME=ARG
// DOT .NAME
// AT @NAME
//
var keyRegExp=/[\w\.\\\-_@\/\&%]+/,tokensRegExp=/('.*?'|".*?"|=|[\w\.\\\-_@\/*%\$]+|[\(\)]|,|\~|\[|\]\s*|\s*(?=\[))/g,bracketSpaceRegExp=/\]\s+/,literalRegExp=/^('.*?'|".*?"|-?[0-9]+\.?[0-9]*|true|false|null|undefined)$/;var isTokenKey=function(token){return keyRegExp.test(token);};var testDot=/^[\.@]\w/;var isAddingToExpression=function(token){return isTokenKey(token)&&testDot.test(token);};var ensureChildren=function(type){if(!type.children){type.children=[];}return type;};var Stack$1=function(){this.root={children:[],type:"Root"};this.current=this.root;this.stack=[this.root];};canAssign_1_3_3_canAssign(Stack$1.prototype,{top:function(){return last$1(this.stack);},isRootTop:function(){return this.top()===this.root;},popTo:function(types){this.popUntil(types);this.pop();},pop:function(){if(!this.isRootTop()){this.stack.pop();}},first:function(types){var curIndex=this.stack.length-1;while(curIndex>0&&types.indexOf(this.stack[curIndex].type)===-1){curIndex--;}return this.stack[curIndex];},firstParent:function(types){var curIndex=this.stack.length-2;while(curIndex>0&&types.indexOf(this.stack[curIndex].type)===-1){curIndex--;}return this.stack[curIndex];},popUntil:function(types){while(types.indexOf(this.top().type)===-1&&!this.isRootTop()){this.stack.pop();}return this.top();},addTo:function(types,type){var cur=this.popUntil(types);ensureChildren(cur).children.push(type);},addToAndPush:function(types,type){this.addTo(types,type);this.stack.push(type);},push:function(type){this.stack.push(type);},topLastChild:function(){return last$1(this.top().children);},replaceTopLastChild:function(type){var children=ensureChildren(this.top()).children;children.pop();children.push(type);return type;},replaceTopLastChildAndPush:function(type){this.replaceTopLastChild(type);this.stack.push(type);},replaceTopAndPush:function(type){var children;if(this.top()===this.root){children=ensureChildren(this.top()).children;}else {this.stack.pop();// get parent and clean
children=ensureChildren(this.top()).children;}children.pop();children.push(type);this.stack.push(type);return type;}});// converts
// - "../foo" -> "../@foo",
// - "foo" -> "@foo",
// - ".foo" -> "@foo",
// - "./foo" -> "./@foo"
// - "foo.bar" -> "foo@bar"
var convertKeyToLookup=function(key){var lastPath=key.lastIndexOf("./");var lastDot=key.lastIndexOf(".");if(lastDot>lastPath){return key.substr(0,lastDot)+"@"+key.substr(lastDot+1);}var firstNonPathCharIndex=lastPath===-1?0:lastPath+2;var firstNonPathChar=key.charAt(firstNonPathCharIndex);if(firstNonPathChar==="."||firstNonPathChar==="@"){return key.substr(0,firstNonPathCharIndex)+"@"+key.substr(firstNonPathCharIndex+1);}else {return key.substr(0,firstNonPathCharIndex)+"@"+key.substr(firstNonPathCharIndex);}};var convertToAtLookup=function(ast){if(ast.type==="Lookup"){canReflect_1_19_2_canReflect.setKeyValue(ast,sourceTextSymbol$2,ast.key);ast.key=convertKeyToLookup(ast.key);}return ast;};var convertToHelperIfTopIsLookup=function(stack){var top=stack.top();// if two scopes, that means a helper
if(top&&top.type==="Lookup"){var base=stack.stack[stack.stack.length-2];// That lookup shouldn't be part of a Helper already or
if(base.type!=="Helper"&&base){stack.replaceTopAndPush({type:"Helper",method:top});}}};var expression={toComputeOrValue:expressionHelpers.toComputeOrValue,convertKeyToLookup:convertKeyToLookup,Literal:literal,Lookup:lookup,Arg:arg,Hash:Hash$2,Hashes:hashes,Call:call$1,Helper:helper,Bracket:bracket,SetIdentifier:setIdentifier,tokenize:function(expression){var tokens=[];(expression.trim()+' ').replace(tokensRegExp,function(whole,arg$$1){if(bracketSpaceRegExp.test(arg$$1)){tokens.push(arg$$1[0]);tokens.push(arg$$1.slice(1));}else {tokens.push(arg$$1);}});return tokens;},lookupRules:{"default":function(ast,methodType,isArg){return ast.type==="Helper"?helper:lookup;},"method":function(ast,methodType,isArg){return lookup;}},methodRules:{"default":function(ast){return ast.type==="Call"?call$1:helper;},"call":function(ast){return call$1;}},// ## expression.parse
//
// - {String} expressionString - A stache expression like "abc foo()"
// - {Object} options
//   - baseMethodType - Treat this like a Helper or Call.  Default to "Helper"
//   - lookupRule - "default" or "method"
//   - methodRule - "default" or "call"
parse:function(expressionString,options){options=options||{};var ast=this.ast(expressionString);if(!options.lookupRule){options.lookupRule="default";}if(typeof options.lookupRule==="string"){options.lookupRule=expression.lookupRules[options.lookupRule];}if(!options.methodRule){options.methodRule="default";}if(typeof options.methodRule==="string"){options.methodRule=expression.methodRules[options.methodRule];}var expr=this.hydrateAst(ast,options,options.baseMethodType||"Helper");return expr;},hydrateAst:function(ast,options,methodType,isArg){var hashes$$1;if(ast.type==="Lookup"){var LookupRule=options.lookupRule(ast,methodType,isArg);var lookup$$1=new LookupRule(ast.key,ast.root&&this.hydrateAst(ast.root,options,methodType),ast[sourceTextSymbol$2]);return lookup$$1;}else if(ast.type==="Literal"){return new literal(ast.value);}else if(ast.type==="Arg"){return new arg(this.hydrateAst(ast.children[0],options,methodType,isArg),{compute:true});}else if(ast.type==="Hash"){throw new Error("");}else if(ast.type==="Hashes"){hashes$$1={};ast.children.forEach(function(hash){hashes$$1[hash.prop]=this.hydrateAst(hash.children[0],options,methodType,true);},this);return new hashes(hashes$$1);}else if(ast.type==="Call"||ast.type==="Helper"){//get all arguments and hashes
hashes$$1={};var args=[],children=ast.children,ExpressionType=options.methodRule(ast);if(children){for(var i=0;i<children.length;i++){var child=children[i];if(child.type==="Hashes"&&ast.type==="Helper"&&ExpressionType!==call$1){child.children.forEach(function(hash){hashes$$1[hash.prop]=this.hydrateAst(hash.children[0],options,ast.type,true);},this);}else {args.push(this.hydrateAst(child,options,ast.type,true));}}}return new ExpressionType(this.hydrateAst(ast.method,options,ast.type),args,hashes$$1);}else if(ast.type==="Bracket"){var originalKey;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){originalKey=ast[canSymbol_1_7_0_canSymbol.for("can-stache.originalKey")];}//!steal-remove-end
return new bracket(this.hydrateAst(ast.children[0],options),ast.root?this.hydrateAst(ast.root,options):undefined,originalKey);}},ast:function(expression){var tokens=this.tokenize(expression);return this.parseAst(tokens,{index:0});},parseAst:function(tokens,cursor){// jshint maxdepth: 6
var stack=new Stack$1(),top,firstParent,lastToken;while(cursor.index<tokens.length){var token=tokens[cursor.index],nextToken=tokens[cursor.index+1];cursor.index++;// Hash
if(nextToken==="="){//convertToHelperIfTopIsLookup(stack);
top=stack.top();// If top is a Lookup, we might need to convert to a helper.
if(top&&top.type==="Lookup"){// Check if current Lookup is part of a Call, Helper, or Hash
// If it happens to be first within a Call or Root, that means
// this is helper syntax.
firstParent=stack.firstParent(["Call","Helper","Hash"]);if(firstParent.type==="Call"||firstParent.type==="Root"){stack.popUntil(["Call"]);top=stack.top();stack.replaceTopAndPush({type:"Helper",method:top.type==="Root"?last$1(top.children):top});}}firstParent=stack.first(["Call","Helper","Hashes","Root"]);// makes sure we are adding to Hashes if there already is one
// otherwise we create one.
var hash={type:"Hash",prop:token};if(firstParent.type==="Hashes"){stack.addToAndPush(["Hashes"],hash);}else {stack.addToAndPush(["Helper","Call","Root"],{type:"Hashes",children:[hash]});stack.push(hash);}cursor.index++;}// Literal
else if(literalRegExp.test(token)){convertToHelperIfTopIsLookup(stack);// only add to hash if there's not already a child.
firstParent=stack.first(["Helper","Call","Hash","Bracket"]);if(firstParent.type==="Hash"&&firstParent.children&&firstParent.children.length>0){stack.addTo(["Helper","Call","Bracket"],{type:"Literal",value:utils$1.jsonParse(token)});}else if(firstParent.type==="Bracket"&&firstParent.children&&firstParent.children.length>0){stack.addTo(["Helper","Call","Hash"],{type:"Literal",value:utils$1.jsonParse(token)});}else {stack.addTo(["Helper","Call","Hash","Bracket"],{type:"Literal",value:utils$1.jsonParse(token)});}}// Lookup
else if(keyRegExp.test(token)){lastToken=stack.topLastChild();firstParent=stack.first(["Helper","Call","Hash","Bracket"]);// if we had `foo().bar`, we need to change to a Lookup that looks up from lastToken.
if(lastToken&&(lastToken.type==="Call"||lastToken.type==="Bracket")&&isAddingToExpression(token)){stack.replaceTopLastChildAndPush({type:"Lookup",root:lastToken,key:token.slice(1)// remove leading `.`
});}else if(firstParent.type==='Bracket'){// a Bracket expression without children means we have
// parsed `foo[` of an expression like `foo[bar]`
// so we know to add the Lookup as a child of the Bracket expression
if(!(firstParent.children&&firstParent.children.length>0)){stack.addToAndPush(["Bracket"],{type:"Lookup",key:token});}else {// check if we are adding to a helper like `eq foo[bar] baz`
// but not at the `.baz` of `eq foo[bar].baz xyz`
if(stack.first(["Helper","Call","Hash","Arg"]).type==='Helper'&&token[0]!=='.'){stack.addToAndPush(["Helper"],{type:"Lookup",key:token});}else {// otherwise, handle the `.baz` in expressions like `foo[bar].baz`
stack.replaceTopAndPush({type:"Lookup",key:token.slice(1),root:firstParent});}}}else {// if two scopes, that means a helper
convertToHelperIfTopIsLookup(stack);stack.addToAndPush(["Helper","Call","Hash","Arg","Bracket"],{type:"Lookup",key:token});}}// Arg
else if(token==="~"){convertToHelperIfTopIsLookup(stack);stack.addToAndPush(["Helper","Call","Hash"],{type:"Arg",key:token});}// Call
// foo[bar()]
else if(token==="("){top=stack.top();lastToken=stack.topLastChild();if(top.type==="Lookup"){stack.replaceTopAndPush({type:"Call",method:convertToAtLookup(top)});// Nested Call
// foo()()
}else if(lastToken&&lastToken.type==="Call"){stack.replaceTopAndPush({type:"Call",method:lastToken});}else {throw new Error("Unable to understand expression "+tokens.join(''));}}// End Call
else if(token===")"){stack.popTo(["Call"]);}// End Call argument
else if(token===","){// The {{let foo=zed, bar=car}} helper is not in a call
// expression.
var call=stack.first(["Call"]);if(call.type!=="Call"){stack.popUntil(["Hash"]);}else {stack.popUntil(["Call"]);}}// Bracket
else if(token==="["){top=stack.top();lastToken=stack.topLastChild();// foo()[bar] => top -> root, lastToken -> {t: call, m: "@foo"}
// foo()[bar()] => same as above last thing we see was a call expression "rotate"
// test['foo'][0] => lastToken => {root: test, t: Bracket, c: 'foo' }
// log(thing['prop'][0]) =>
//
//     top -> {Call, children|args: [Bracket(Lookup(thing), c: ['[prop]'])]}
//     last-> Bracket(Lookup(thing), c: ['[prop]'])
if(lastToken&&(lastToken.type==="Call"||lastToken.type==="Bracket")){// must be on top of the stack as it recieves new stuff ...
// however, what we really want is to
stack.replaceTopLastChildAndPush({type:"Bracket",root:lastToken});}else if(top.type==="Lookup"||top.type==="Bracket"){var bracket$$1={type:"Bracket",root:top};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){canReflect_1_19_2_canReflect.setKeyValue(bracket$$1,canSymbol_1_7_0_canSymbol.for("can-stache.originalKey"),top.key);}//!steal-remove-end
stack.replaceTopAndPush(bracket$$1);}else if(top.type==="Call"){stack.addToAndPush(["Call"],{type:"Bracket"});}else if(top===" "){stack.popUntil(["Lookup","Call"]);convertToHelperIfTopIsLookup(stack);stack.addToAndPush(["Helper","Call","Hash"],{type:"Bracket"});}else {stack.replaceTopAndPush({type:"Bracket"});}}// End Bracket
else if(token==="]"){stack.pop();}else if(token===" "){stack.push(token);}}return stack.root.children[0];}};var expression_1=expression;//
// This provides helper utilities for Mustache processing. Currently,
// only stache uses these helpers.  Ideally, these utilities could be used
// in other libraries implementing Mustache-like features.
var expression$1=expression_1;var toDOMSymbol$1=canSymbol_1_7_0_canSymbol.for("can.toDOM");// Lazily lookup the context only if it's needed.
function HelperOptions(scope,exprData,stringOnly){this.metadata={rendered:false};this.stringOnly=stringOnly;this.scope=scope;this.exprData=exprData;}canDefineLazyValue_1_1_1_defineLazyValue(HelperOptions.prototype,"context",function(){return this.scope.peek("this");});// ## Helpers
var mustacheLineBreakRegExp=/(?:(^|\r?\n)(\s*)(\{\{([\s\S]*)\}\}\}?)([^\S\n\r]*)($|\r?\n))|(\{\{([\s\S]*)\}\}\}?)/g,mustacheWhitespaceRegExp=/\s*\{\{--\}\}\s*|\s*(\{\{\{?)-|-(\}\}\}?)\s*/g,k=function(){};var viewInsertSymbol$1=canSymbol_1_7_0_canSymbol.for("can.viewInsert");// DOM, safeString or the insertSymbol can opt-out of updating as text
function valueShouldBeInsertedAsHTML(value){return value!==null&&typeof value==="object"&&(typeof value[toDOMSymbol$1]==="function"||typeof value[viewInsertSymbol$1]==="function"||typeof value.nodeType==="number");}var core={expression:expression$1,// ## mustacheCore.makeEvaluator
// Given a scope and expression, returns a function that evaluates that expression in the scope.
//
// This function first reads lookup values in the args and hash.  Then it tries to figure out
// if a helper is being called or a value is being read.  Finally, depending on
// if it's a helper, or not, and which mode the expression is in, it returns
// a function that can quickly evaluate the expression.
/**
	 * @hide
	 * Given a mode and expression data, returns a function that evaluates that expression.
	 * @param {can-view-scope} The scope in which the expression is evaluated.
	 * @param {can.view.Options} The option helpers in which the expression is evaluated.
	 * @param {String} mode Either null, #, ^. > is handled elsewhere
	 * @param {Object} exprData Data about what was in the mustache expression
	 * @param {renderer} [truthyRenderer] Used to render a subsection
	 * @param {renderer} [falseyRenderer] Used to render the inverse subsection
	 * @param {String} [stringOnly] A flag to indicate that only strings will be returned by subsections.
	 * @return {Function} An 'evaluator' function that evaluates the expression.
	 */makeEvaluator:function(scope,mode,exprData,truthyRenderer,falseyRenderer,stringOnly){if(mode==="^"){var temp=truthyRenderer;truthyRenderer=falseyRenderer;falseyRenderer=temp;}var value,helperOptions=new HelperOptions(scope,exprData,stringOnly);// set up renderers
utils$1.createRenderers(helperOptions,scope,truthyRenderer,falseyRenderer,stringOnly);if(exprData instanceof expression$1.Call){value=exprData.value(scope,helperOptions);}else if(exprData instanceof expression$1.Bracket){value=exprData.value(scope);}else if(exprData instanceof expression$1.Lookup){value=exprData.value(scope);}else if(exprData instanceof expression$1.Literal){value=exprData.value.bind(exprData);}else if(exprData instanceof expression$1.Helper&&exprData.methodExpr instanceof expression$1.Bracket){// Brackets get wrapped in Helpers when used in attributes
// like `<p class="{{ foo[bar] }}" />`
value=exprData.methodExpr.value(scope,helperOptions);}else {value=exprData.value(scope,helperOptions);if(typeof value==="function"){return value;}}// {{#something()}}foo{{/something}}
// return evaluator for no mode or rendered value if a renderer was called
if(!mode||helperOptions.metadata.rendered){return value;}else if(mode==="#"||mode==="^"){return function(){// Get the value
var finalValue=canReflect_1_19_2_canReflect.getValue(value);var result;// if options.fn or options.inverse was called, we take the observable's return value
// as what should be put in the DOM.
if(helperOptions.metadata.rendered){result=finalValue;}// If it's an array, render.
else if(typeof finalValue!=="string"&&canReflect_1_19_2_canReflect.isListLike(finalValue)){var isObserveList=canReflect_1_19_2_canReflect.isObservableLike(finalValue)&&canReflect_1_19_2_canReflect.isListLike(finalValue);if(canReflect_1_19_2_canReflect.getKeyValue(finalValue,"length")){if(stringOnly){result=utils$1.getItemsStringContent(finalValue,isObserveList,helperOptions);}else {result=canFragment_1_3_1_canFragment(utils$1.getItemsFragContent(finalValue,helperOptions,scope));}}else {result=helperOptions.inverse(scope);}}else {result=finalValue?helperOptions.fn(finalValue||scope):helperOptions.inverse(scope);}// We always set the rendered result back to false.
// - Future calls might change from returning a value to calling `.fn`
// - We are calling `.fn` and `.inverse` ourselves.
helperOptions.metadata.rendered=false;return result;};}else;},// ## mustacheCore.makeLiveBindingPartialRenderer
// Returns a renderer function that live binds a partial.
/**
	 * @hide
	 * Returns a renderer function that live binds a partial.
	 * @param {String} expressionString
	 * @param {Object} state The html state of where the expression was found.
	 * @return {function(this:HTMLElement,can-view-scope,can.view.Options)} A renderer function
	 * live binds a partial.
	 */makeLiveBindingPartialRenderer:function(expressionString,state){expressionString=expressionString.trim();var exprData,partialName=expressionString.split(/\s+/).shift();if(partialName!==expressionString){exprData=core.expression.parse(expressionString);}return function(scope){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){scope.set('scope.filename',state.filename);scope.set('scope.lineNumber',state.lineNo);}//!steal-remove-end
var partialFrag=new canObservation_4_2_0_canObservation(function(){var localPartialName=partialName;var partialScope=scope;// If the second parameter of a partial is a custom context
if(exprData&&exprData.argExprs.length===1){var newContext=canReflect_1_19_2_canReflect.getValue(exprData.argExprs[0].value(scope));if(typeof newContext==="undefined"){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){dev.warn('The context ('+exprData.argExprs[0].key+') you passed into the'+'partial ('+partialName+') is not defined in the scope!');}//!steal-remove-end
}else {partialScope=scope.add(newContext);}}// Look up partials in templateContext first
var partial=canReflect_1_19_2_canReflect.getKeyValue(partialScope.templateContext.partials,localPartialName);var renderer;if(partial){renderer=function(){return partial.render?partial.render(partialScope):partial(partialScope);};}// Use can.view to get and render the partial.
else {var scopePartialName=partialScope.read(localPartialName,{isArgument:true}).value;if(scopePartialName===null||!scopePartialName&&localPartialName[0]==='*'){return canFragment_1_3_1_canFragment("");}if(scopePartialName){localPartialName=scopePartialName;}renderer=function(){if(typeof localPartialName==="function"){return localPartialName(partialScope,{});}else {var domRenderer=core.getTemplateById(localPartialName);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(!domRenderer){dev.warn((state.filename?state.filename+':':'')+(state.lineNo?state.lineNo+': ':'')+'Unable to find partial "'+localPartialName+'".');}}//!steal-remove-end
return domRenderer?domRenderer(partialScope,{}):document$1().createDocumentFragment();}};}var res=canObservationRecorder_1_3_1_canObservationRecorder.ignore(renderer)();return canFragment_1_3_1_canFragment(res);});canViewLive_5_0_5_canViewLive.html(this,partialFrag);};},// ## mustacheCore.makeStringBranchRenderer
// Return a renderer function that evalutes to a string and caches
// the evaluator on the scope.
/**
	 * @hide
	 * Return a renderer function that evaluates to a string.
	 * @param {String} mode
	 * @param {can.stache.Expression} expression
	 * @param {Object} state The html state of where the expression was found.
	 * @return {function(can.view.Scope,can.view.Options, can-stache.view, can.view.renderer)}
	 */makeStringBranchRenderer:function(mode,expressionString,state){var exprData=core.expression.parse(expressionString),// Use the full mustache expression as the cache key.
fullExpression=mode+expressionString;// A branching renderer takes truthy and falsey renderer.
var branchRenderer=function branchRenderer(scope,truthyRenderer,falseyRenderer){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){scope.set('scope.filename',state.filename);scope.set('scope.lineNumber',state.lineNo);}//!steal-remove-end
// Check the scope's cache if the evaluator already exists for performance.
var evaluator=scope.__cache[fullExpression];if(mode||!evaluator){evaluator=makeEvaluator(scope,mode,exprData,truthyRenderer,falseyRenderer,true);if(!mode){scope.__cache[fullExpression]=evaluator;}}var gotObservableValue=evaluator[canSymbol_1_7_0_canSymbol.for("can.onValue")],res;// Run the evaluator and return the result.
if(gotObservableValue){res=canReflect_1_19_2_canReflect.getValue(evaluator);}else {res=evaluator();}if(res==null){return "";}return res.nodeType===11?res.textContent:""+res;};branchRenderer.exprData=exprData;return branchRenderer;},// ## mustacheCore.makeLiveBindingBranchRenderer
// Return a renderer function that evaluates the mustache expression and
// sets up live binding if a compute with dependencies is found. Otherwise,
// the element's value is set.
//
// This function works by creating a `can.compute` from the mustache expression.
// If the compute has dependent observables, it passes the compute to `can.view.live`; otherwise,
// it updates the element's property based on the compute's value.
/**
	 * @hide
	 * Returns a renderer function that evaluates the mustache expression.
	 * @param {String} mode
	 * @param {can.stache.Expression} expression
	 * @param {Object} state The html state of where the expression was found.
	 */makeLiveBindingBranchRenderer:function(mode,expressionString,state){// Pre-process the expression.
var exprData=core.expression.parse(expressionString);// A branching renderer takes truthy and falsey renderer.
var branchRenderer=function branchRenderer(scope,truthyRenderer,falseyRenderer){// If this is within a tag, make sure we only get string values.
var stringOnly=state.tag;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){scope.set('scope.filename',state.filename);scope.set('scope.lineNumber',state.lineNo);}//!steal-remove-end
// Get the evaluator. This does not need to be cached (probably) because if there
// an observable value, it will be handled by `can.view.live`.
var evaluator=makeEvaluator(scope,mode,exprData,truthyRenderer,falseyRenderer,stringOnly);// Create a compute that can not be observed by other
// computes. This is important because this renderer is likely called by
// parent expressions.  If this value changes, the parent expressions should
// not re-evaluate. We prevent that by making sure this compute is ignored by
// everyone else.
//var compute = can.compute(evaluator, null, false);
var gotObservableValue=evaluator[canSymbol_1_7_0_canSymbol.for("can.onValue")];var observable;if(gotObservableValue){observable=evaluator;}else {//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(evaluator,"name",{value:"{{"+(mode||"")+expressionString+"}}"});}//!steal-remove-end
observable=new canObservation_4_2_0_canObservation(evaluator,null,{isObservable:false});}// Bind on the computeValue to set the cached value. This helps performance
// so live binding can read a cached value instead of re-calculating.
canReflect_1_19_2_canReflect.onValue(observable,k);var value=canReflect_1_19_2_canReflect.getValue(observable);// If value is a function and not a Lookup ({{foo}}),
// it's a helper that returned a function and should be called.
if(typeof value==="function"&&!(exprData instanceof expression$1.Lookup)){// A helper function should do it's own binding.  Similar to how
// we prevented this function's compute from being noticed by parent expressions,
// we hide any observables read in the function by saving any observables that
// have been read and then setting them back which overwrites any `can.__observe` calls
// performed in value.
canObservationRecorder_1_3_1_canObservationRecorder.ignore(value)(this);}// If the computeValue has observable dependencies, setup live binding.
else if(canReflect_1_19_2_canReflect.valueHasDependencies(observable)){// Depending on where the template is, setup live-binding differently.
if(state.attr){canViewLive_5_0_5_canViewLive.attr(this,state.attr,observable);}else if(state.tag){canViewLive_5_0_5_canViewLive.attrs(this,observable);}else if(state.text&&!valueShouldBeInsertedAsHTML(value)){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(value!==null&&typeof value==="object"){dev.warn("Previously, the result of "+expressionString+" in "+state.filename+":"+state.lineNo+", was being inserted as HTML instead of TEXT. Please use stache.safeString(obj) "+"if you would like the object to be treated as HTML.");}}//!steal-remove-end
canViewLive_5_0_5_canViewLive.text(this,observable);}else {canViewLive_5_0_5_canViewLive.html(this,observable);}}// If the computeValue has no observable dependencies, just set the value on the element.
else {if(state.attr){canDomMutate_2_0_9_canDomMutate.setAttribute(this,state.attr,value);}else if(state.tag){canViewLive_5_0_5_canViewLive.attrs(this,value);}else if(state.text&&!valueShouldBeInsertedAsHTML(value)){this.nodeValue=helpers$2.makeString(value);}else if(value!=null){if(typeof value[viewInsertSymbol$1]==="function"){var insert=value[viewInsertSymbol$1]({});this.parentNode.replaceChild(insert,this);}else {this.parentNode.replaceChild(canFragment_1_3_1_canFragment(value,this.ownerDocument),this);//domMutateNode.replaceChild.call(this.parentNode, frag(value, this.ownerDocument), this);
}}}// Unbind the compute.
canReflect_1_19_2_canReflect.offValue(observable,k);};branchRenderer.exprData=exprData;return branchRenderer;},// ## mustacheCore.splitModeFromExpression
// Returns the mustache mode split from the rest of the expression.
/**
	 * @hide
	 * Returns the mustache mode split from the rest of the expression.
	 * @param {can.stache.Expression} expression
	 * @param {Object} state The state of HTML where the expression was found.
	 */splitModeFromExpression:function(expression,state){expression=expression.trim();var mode=expression.charAt(0);if("#/{&^>!<".indexOf(mode)>=0){expression=expression.substr(1).trim();}else {mode=null;}// Triple braces do nothing within a tag.
if(mode==="{"&&state.node){mode=null;}return {mode:mode,expression:expression};},// ## mustacheCore.cleanLineEndings
// Removes line breaks accoding to the mustache specification.
/**
	 * @hide
	 * Prunes line breaks accoding to the mustache specification.
	 * @param {String} template
	 * @return {String}
	 */cleanLineEndings:function(template){// Finds mustache tags with space around them or no space around them.
return template.replace(mustacheLineBreakRegExp,function(whole,returnBefore,spaceBefore,special,expression,spaceAfter,returnAfter,// A mustache magic tag that has no space around it.
spaceLessSpecial,spaceLessExpression,matchIndex){// IE 8 will provide undefined
spaceAfter=spaceAfter||"";returnBefore=returnBefore||"";spaceBefore=spaceBefore||"";var modeAndExpression=splitModeFromExpression(expression||spaceLessExpression,{});// If it's a partial or tripple stache, leave in place.
if(spaceLessSpecial||">{".indexOf(modeAndExpression.mode)>=0){return whole;}else if("^#!/".indexOf(modeAndExpression.mode)>=0){// Return the magic tag and a trailing linebreak if this did not
// start a new line and there was an end line.
// Add a normalized leading space, if there was any leading space, in case this abuts a tag name
spaceBefore=returnBefore+spaceBefore&&" ";return spaceBefore+special+(matchIndex!==0&&returnAfter.length?returnBefore+"\n":"");}else {// There is no mode, return special with spaces around it.
return spaceBefore+special+spaceAfter+(spaceBefore.length||matchIndex!==0?returnBefore+"\n":"");}});},// ## mustacheCore.cleanWhitespaceControl
// Removes whitespace according to the whitespace control.
/**
	 * @hide
	 * Prunes whitespace according to the whitespace control.
	 * @param {String} template
	 * @return {String}
	 */cleanWhitespaceControl:function(template){return template.replace(mustacheWhitespaceRegExp,"$1$2");},getTemplateById:function(){}};// ## Local Variable Cache
//
// The following creates slightly more quickly accessible references of the following
// core functions.
var makeEvaluator=core.makeEvaluator,splitModeFromExpression=core.splitModeFromExpression;var mustache_core=core;/**
 * @module {function} can-globals/base-url/base-url base-url
 * @parent can-globals/modules
 *
 * @signature `baseUrl(optionalBaseUrlToSet)`
 *
 * Get and/or set the "base" (containing path) of the document.
 *
 * ```js
 * var baseUrl = require("can-globals/base-url/base-url");
 *
 * console.log(baseUrl());           // -> "http://localhost:8080"
 * console.log(baseUrl(baseUrl() + "/foo/bar")); // -> "http://localhost:8080/foo/bar"
 * console.log(baseUrl());           // -> "http://localhost:8080/foo/bar"
 * ```
 *
 * @param {String} setUrl An optional base url to override reading the base URL from the known path.
 *
 * @return {String} Returns the set or computed base URL
 */canGlobals_1_2_2_canGlobalsInstance.define('base-url',function(){var global=canGlobals_1_2_2_canGlobalsInstance.getKeyValue('global');var domDocument=canGlobals_1_2_2_canGlobalsInstance.getKeyValue('document');if(domDocument&&'baseURI'in domDocument){return domDocument.baseURI;}else if(global.location){var href=global.location.href;var lastSlash=href.lastIndexOf("/");return lastSlash!==-1?href.substr(0,lastSlash):href;}else if(typeof process!=="undefined"){return process.cwd();}});var baseUrl=canGlobals_1_2_2_canGlobalsInstance.makeExport('base-url');/**
 * @module {function} can-parse-uri can-parse-uri
 * @parent can-js-utilities
 * @collection can-infrastructure
 * @package ./package.json
 * @signature `parseURI(url)`
 *
 * Parse a URI into its components.
 *
 * ```js
 * import {parseURI} from "can"
 * parseURI("http://foo:8080/bar.html?query#change")
 * //-> {
 * //  authority: "//foo:8080",
 * //  hash: "#change",
 * //  host: "foo:8080",
 * //  hostname: "foo",
 * //  href: "http://foo:8080/bar.html?query#change",
 * //  pathname: "/bar.html",
 * //  port: "8080",
 * //  protocol: "http:",
 * //  search: "?query"
 * // }
 * ```
 *
 * @param {String} url The URL you want to parse.
 *
 * @return {Object} Returns an object with properties for each part of the URL. `null`
 * is returned if the url can not be parsed.
 */var canParseUri_1_2_2_canParseUri=canNamespace_1_0_0_canNamespace.parseURI=function(url){var m=String(url).replace(/^\s+|\s+$/g,'').match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);// authority = '//' + user + ':' + pass '@' + hostname + ':' port
return m?{href:m[0]||'',protocol:m[1]||'',authority:m[2]||'',host:m[3]||'',hostname:m[4]||'',port:m[5]||'',pathname:m[6]||'',search:m[7]||'',hash:m[8]||''}:null;};var canJoinUris_1_2_0_canJoinUris=canNamespace_1_0_0_canNamespace.joinURIs=function(base,href){function removeDotSegments(input){var output=[];input.replace(/^(\.\.?(\/|$))+/,'').replace(/\/(\.(\/|$))+/g,'/').replace(/\/\.\.$/,'/../').replace(/\/?[^\/]*/g,function(p){if(p==='/..'){output.pop();}else {output.push(p);}});return output.join('').replace(/^\//,input.charAt(0)==='/'?'/':'');}href=canParseUri_1_2_2_canParseUri(href||'');base=canParseUri_1_2_2_canParseUri(base||'');return !href||!base?null:(href.protocol||base.protocol)+(href.protocol||href.authority?href.authority:base.authority)+removeDotSegments(href.protocol||href.authority||href.pathname.charAt(0)==='/'?href.pathname:href.pathname?(base.authority&&!base.pathname?'/':'')+base.pathname.slice(0,base.pathname.lastIndexOf('/')+1)+href.pathname:base.pathname)+(href.protocol||href.authority||href.pathname?href.search:href.search||base.search)+href.hash;};function noop$1$1(){}var resolveValue=noop$1$1;var evaluateArgs=noop$1$1;var __testing={};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var canReflect=canReflect_1_19_2_canReflect;var canSymbol$1=canSymbol_1_7_0_canSymbol;__testing={allowDebugger:true};resolveValue=function(value){if(value&&value[canSymbol$1.for("can.getValue")]){return canReflect.getValue(value);}return value;};evaluateArgs=function(left,right){switch(arguments.length){case 0:return true;case 1:return !!resolveValue(left);case 2:return resolveValue(left)===resolveValue(right);default:canLog_1_0_2_canLog.log(['Usage:','  {{debugger}}: break any time this helper is evaluated','  {{debugger condition}}: break when `condition` is truthy','  {{debugger left right}}: break when `left` === `right`'].join('\n'));throw new Error('{{debugger}} must have less than three arguments');}};}//!steal-remove-end
function debuggerHelper(left,right){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var shouldBreak=evaluateArgs.apply(null,Array.prototype.slice.call(arguments,0,-1));if(!shouldBreak){return;}var options=arguments[arguments.length-1],scope=options&&options.scope;var get=function(path){return scope.get(path);};// This makes sure `get`, `options` and `scope` are available
debuggerHelper._lastGet=get;canLog_1_0_2_canLog.log('Use `get(<path>)` to debug this template');var allowDebugger=__testing.allowDebugger;// forgotten debugger
// jshint -W087
if(allowDebugger){debugger;return;}// jshint +W087
}//!steal-remove-end
canLog_1_0_2_canLog.warn('Forgotten {{debugger}} helper');}debuggerHelper.requiresOptionsArgument=true;var Debugger={helper:debuggerHelper,evaluateArgs:evaluateArgs,resolveValue:resolveValue,// used only for testing purposes
__testing:__testing};var truthyObservable=function(observable){return new canObservation_4_2_0_canObservation(function truthyObservation(){var val=canReflect_1_19_2_canReflect.getValue(observable);return !!val;});};function makeConverter(getterSetter){getterSetter=getterSetter||{};return function(newVal,source){var args=canReflect_1_19_2_canReflect.toArray(arguments);if(newVal instanceof setIdentifier){return typeof getterSetter.set==="function"?getterSetter.set.apply(this,[newVal.value].concat(args.slice(1))):source(newVal.value);}else {return typeof getterSetter.get==="function"?getterSetter.get.apply(this,args):args[0];}};}var converter=makeConverter;var bindAndRead=function(value){if(value&&canReflect_1_19_2_canReflect.isValueLike(value)){canObservation_4_2_0_canObservation.temporarilyBind(value);return canReflect_1_19_2_canReflect.getValue(value);}else {return value;}};function forOfInteger(integer,variableName,options){var result=[];for(var i=0;i<integer;i++){var variableScope={};if(variableName!==undefined){variableScope[variableName]=i;}result.push(options.fn(options.scope.add({index:i},{special:true}).addLetContext(variableScope)));}return options.stringOnly?result.join(''):result;}function forOfObject(object,variableName,options){var result=[];canReflect_1_19_2_canReflect.each(object,function(val,key){// Allow key to contain a dot, for example: "My.key.has.dot"
var value=new keyObservable(object,key.replace(/\./g,"\\."));var variableScope={};if(variableName!==undefined){variableScope[variableName]=value;}result.push(options.fn(options.scope.add({key:key},{special:true}).addLetContext(variableScope)));});return options.stringOnly?result.join(''):result;}// this is called with the ast ... we are going to use that to our advantage.
var forHelper=function(helperOptions){// lookup
// TODO: remove in prod
// make sure we got called with the right stuff
if(helperOptions.exprData.argExprs.length!==1){throw new Error("for(of) broken syntax");}// TODO: check if an instance of helper;
var helperExpr=helperOptions.exprData.argExprs[0].expr;var variableName,valueLookup,valueObservable;if(helperExpr instanceof expression_1.Lookup){valueObservable=helperExpr.value(helperOptions.scope);}else if(helperExpr instanceof expression_1.Helper){// TODO: remove in prod
var inLookup=helperExpr.argExprs[0];if(inLookup.key!=="of"){throw new Error("for(of) broken syntax");}variableName=helperExpr.methodExpr.key;valueLookup=helperExpr.argExprs[1];valueObservable=valueLookup.value(helperOptions.scope);}var items=valueObservable;var args=[].slice.call(arguments),options=args.pop(),resolved=bindAndRead(items);if(resolved&&resolved===Math.floor(resolved)){return forOfInteger(resolved,variableName,helperOptions);}if(resolved&&!canReflect_1_19_2_canReflect.isListLike(resolved)){return forOfObject(resolved,variableName,helperOptions);}if(options.stringOnly){var parts=[];canReflect_1_19_2_canReflect.eachIndex(resolved,function(value,index){var variableScope={};if(variableName!==undefined){variableScope[variableName]=value;}parts.push(helperOptions.fn(options.scope.add({index:index},{special:true}).addLetContext(variableScope)));});return parts.join("");}else {// Tells that a helper has been called, this function should be returned through
// checking its value.
options.metadata.rendered=true;return function(el){var cb=function(item,index){var variableScope={};if(variableName!==undefined){variableScope[variableName]=item;}return options.fn(options.scope.add({index:index},{special:true}).addLetContext(variableScope),options.options);};canViewLive_5_0_5_canViewLive.list(el,items,cb,options.context,function(list){return options.inverse(options.scope,options.options);});};}};forHelper.isLiveBound=true;forHelper.requiresOptionsArgument=true;forHelper.ignoreArgLookup=function ignoreArgLookup(index){return index===0;};var ForOf=forHelper;function isVariable(scope){return scope._meta.variable===true;}// This sets variables so it needs to not causes changes.
var letHelper=canObservationRecorder_1_3_1_canObservationRecorder.ignore(function(options){if(options.isSection){return options.fn(options.scope.addLetContext(options.hash));}var variableScope=options.scope.getScope(isVariable);if(!variableScope){throw new Error("There is no variable scope!");}canReflect_1_19_2_canReflect.assignMap(variableScope._context,options.hash);return document.createTextNode("");});var Let=letHelper;var keepNodeSymbol=canSymbol_1_7_0_canSymbol.for("done.keepNode");function portalHelper(elementObservable,options){var debugName="portal("+canReflect_1_19_2_canReflect.getName(elementObservable)+")";function portalContents(){var frag=options.fn(options.scope.addLetContext({}),options.options);var child=frag.firstChild;while(child){// makes sure DoneJS does not remove these nodes
child[keepNodeSymbol]=true;child=child.nextSibling;}return frag;}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(portalContents,"name",{value:debugName+" contents"});}//!steal-remove-end
// Where we are portalling
var portalElement,startPortalledPlaceholder,endPortalledPlaceholder,commentPlaceholderDispose;function teardownPortalledContent(){if(portalElement){canReflect_1_19_2_canReflect.offValue(elementObservable,getElementAndRender);portalElement=null;}if(startPortalledPlaceholder&&endPortalledPlaceholder){var parentNode=startPortalledPlaceholder.parentNode;if(parentNode){helpers$2.range.remove({start:startPortalledPlaceholder,end:endPortalledPlaceholder});canDomMutate_2_0_9_node.removeChild.call(parentNode,startPortalledPlaceholder);canDomMutate_2_0_9_node.removeChild.call(parentNode,endPortalledPlaceholder);startPortalledPlaceholder=endPortalledPlaceholder=null;}}}function teardownEverything(){if(commentPlaceholderDispose){commentPlaceholderDispose();}teardownPortalledContent();}// The element has changed
function getElementAndRender(){// remove the old rendered content and unbind if we've bound before
teardownPortalledContent();canReflect_1_19_2_canReflect.onValue(elementObservable,getElementAndRender);portalElement=canReflect_1_19_2_canReflect.getValue(elementObservable);if(portalElement){startPortalledPlaceholder=portalElement.ownerDocument.createComment(debugName+" contents");endPortalledPlaceholder=portalElement.ownerDocument.createComment("can-end-placeholder");startPortalledPlaceholder[keepNodeSymbol]=true;endPortalledPlaceholder[keepNodeSymbol]=true;portalElement.appendChild(startPortalledPlaceholder);portalElement.appendChild(endPortalledPlaceholder);var observable=new canObservation_4_2_0_canObservation(portalContents,null,{isObservable:false});canViewLive_5_0_5_canViewLive.html(startPortalledPlaceholder,observable);}else {options.metadata.rendered=true;}}getElementAndRender();return function(placeholderElement){var commentPlaceholder=placeholderElement.ownerDocument.createComment(debugName);placeholderElement.parentNode.replaceChild(commentPlaceholder,placeholderElement);commentPlaceholderDispose=canDomMutate_2_0_9_canDomMutate.onNodeRemoved(commentPlaceholder,teardownEverything);return commentPlaceholder;};}portalHelper.isLiveBound=true;portalHelper.requiresOptionsArgument=true;var Portal$1=portalHelper;var debuggerHelper$1=Debugger.helper;var builtInHelpers={};var builtInConverters={};var converterPackages=new WeakMap();// ## Helpers
var helpersCore={looksLikeOptions:function(options){return options&&typeof options.fn==="function"&&typeof options.inverse==="function";},resolve:function(value){if(value&&canReflect_1_19_2_canReflect.isValueLike(value)){return canReflect_1_19_2_canReflect.getValue(value);}else {return value;}},resolveHash:function(hash){var params={};for(var prop in hash){params[prop]=helpersCore.resolve(hash[prop]);}return params;},bindAndRead:function(value){if(value&&canReflect_1_19_2_canReflect.isValueLike(value)){canObservation_4_2_0_canObservation.temporarilyBind(value);return canReflect_1_19_2_canReflect.getValue(value);}else {return value;}},registerHelper:function(name,callback){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(canStacheHelpers_1_2_0_canStacheHelpers[name]){dev.warn('The helper '+name+' has already been registered.');}}//!steal-remove-end
// mark passed in helper so it will be automatically passed
// helperOptions (.fn, .inverse, etc) when called as Call Expressions
callback.requiresOptionsArgument=true;// store on global helpers list
canStacheHelpers_1_2_0_canStacheHelpers[name]=callback;},registerHelpers:function(helpers){var name,callback;for(name in helpers){callback=helpers[name];helpersCore.registerHelper(name,helpersCore.makeSimpleHelper(callback));}},registerConverter:function(name,getterSetter){helpersCore.registerHelper(name,converter(getterSetter));},makeSimpleHelper:function(fn){return function(){var realArgs=[];canReflect_1_19_2_canReflect.eachIndex(arguments,function(val){realArgs.push(helpersCore.resolve(val));});return fn.apply(this,realArgs);};},addHelper:function(name,callback){if(typeof name==="object"){return helpersCore.registerHelpers(name);}return helpersCore.registerHelper(name,helpersCore.makeSimpleHelper(callback));},addConverter:function(name,getterSetter){if(typeof name==="object"){if(!converterPackages.has(name)){converterPackages.set(name,true);canReflect_1_19_2_canReflect.eachKey(name,function(getterSetter,name){helpersCore.addConverter(name,getterSetter);});}return;}var helper=converter(getterSetter);helper.isLiveBound=true;helpersCore.registerHelper(name,helper);},// add helpers that set up their own internal live-binding
// these helpers will not be wrapped in computes and will
// receive observable arguments when called with Call Expressions
addLiveHelper:function(name,callback){callback.isLiveBound=true;return helpersCore.registerHelper(name,callback);},getHelper:function(name,scope){var helper=scope&&scope.getHelper(name);if(!helper){helper=canStacheHelpers_1_2_0_canStacheHelpers[name];}return helper;},__resetHelpers:function(){// remove all helpers from can-stache-helpers object
for(var helper in canStacheHelpers_1_2_0_canStacheHelpers){delete canStacheHelpers_1_2_0_canStacheHelpers[helper];}// Clear converterPackages map before re-adding converters
converterPackages.delete(builtInConverters);helpersCore.addBuiltInHelpers();helpersCore.addBuiltInConverters();},addBuiltInHelpers:function(){canReflect_1_19_2_canReflect.each(builtInHelpers,function(helper,helperName){canStacheHelpers_1_2_0_canStacheHelpers[helperName]=helper;});},addBuiltInConverters:function(){helpersCore.addConverter(builtInConverters);},_makeLogicHelper:function(name,logic){var logicHelper=canAssign_1_3_3_canAssign(function(){var args=Array.prototype.slice.call(arguments,0),options;if(helpersCore.looksLikeOptions(args[args.length-1])){options=args.pop();}function callLogic(){// if there are options, we want to prevent re-rendering if values are still truthy
if(options){return logic(args)?true:false;}else {return logic(args);}}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(callLogic,"name",{value:name+"("+args.map(function(arg){return canReflect_1_19_2_canReflect.getName(arg);}).join(",")+")",configurable:true});}//!steal-remove-end
var callFn=new canObservation_4_2_0_canObservation(callLogic);if(options){return callFn.get()?options.fn():options.inverse();}else {return callFn.get();}},{requiresOptionsArgument:true,isLiveBound:true});//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(logicHelper,"name",{value:name,configurable:true});}//!steal-remove-end
return logicHelper;}};// ## IF HELPER
var ifHelper=canAssign_1_3_3_canAssign(function ifHelper(expr,options){var value;// if it's a function, wrap its value in a compute
// that will only change values from true to false
if(expr&&canReflect_1_19_2_canReflect.isValueLike(expr)){value=canReflect_1_19_2_canReflect.getValue(new truthyObservable(expr));}else {value=!!helpersCore.resolve(expr);}if(options){return value?options.fn(options.scope||this):options.inverse(options.scope||this);}return !!value;},{requiresOptionsArgument:true,isLiveBound:true});//## EQ/IS HELPER
var isHelper=helpersCore._makeLogicHelper("eq",function eqHelper(args){var curValue,lastValue;for(var i=0;i<args.length;i++){curValue=helpersCore.resolve(args[i]);curValue=typeof curValue==="function"?curValue():curValue;if(i>0){if(curValue!==lastValue){return false;}}lastValue=curValue;}return true;});var andHelper=helpersCore._makeLogicHelper("and",function andHelper(args){if(args.length===0){return false;}var last;for(var i=0,len=args.length;i<len;i++){last=helpersCore.resolve(args[i]);if(!last){return last;}}return last;});var orHelper=helpersCore._makeLogicHelper("or",function orHelper(args){if(args.length===0){return false;}var last;for(var i=0,len=args.length;i<len;i++){last=helpersCore.resolve(args[i]);if(last){return last;}}return last;});var switchHelper=function(expression,options){helpersCore.resolve(expression);var found=false;var caseHelper=function(value,options){if(!found&&helpersCore.resolve(expression)===helpersCore.resolve(value)){found=true;return options.fn(options.scope);}};caseHelper.requiresOptionsArgument=true;// create default helper as a value-like function
// so that either {{#default}} or {{#default()}} will work
var defaultHelper=function(options){if(!found){return options?options.scope.peek('this'):true;}};defaultHelper.requiresOptionsArgument=true;canReflect_1_19_2_canReflect.assignSymbols(defaultHelper,{"can.isValueLike":true,"can.isFunctionLike":false,"can.getValue":function(){// pass the helperOptions passed to {{#switch}}
return this(options);}});var newScope=options.scope.add({case:caseHelper,default:defaultHelper},{notContext:true});return options.fn(newScope,options);};switchHelper.requiresOptionsArgument=true;// ## ODD HELPERS
var domDataHelper=function(attr,value){var data=(helpersCore.looksLikeOptions(value)?value.context:value)||this;return function setDomData(el){canDomData_1_0_3_canDomData.set(el,attr,data);};};var joinBaseHelper=function(firstExpr/* , expr... */){var args=[].slice.call(arguments);var options=args.pop();var moduleReference=args.map(function(expr){var value=helpersCore.resolve(expr);return typeof value==="function"?value():value;}).join("");var templateModule=canReflect_1_19_2_canReflect.getKeyValue(options.scope.templateContext.helpers,'module');var parentAddress=templateModule?templateModule.uri:undefined;var isRelative=moduleReference[0]===".";if(isRelative&&parentAddress){return canJoinUris_1_2_0_canJoinUris(parentAddress,moduleReference);}else {var baseURL=typeof System!=="undefined"&&(System.renderingBaseURL||System.baseURL)||baseUrl();// Make sure one of them has a needed /
if(moduleReference[0]!=="/"&&baseURL[baseURL.length-1]!=="/"){baseURL+="/";}return canJoinUris_1_2_0_canJoinUris(baseURL,moduleReference);}};joinBaseHelper.requiresOptionsArgument=true;// ## LEGACY HELPERS
// ### each
var eachHelper=function(items){var args=[].slice.call(arguments),options=args.pop(),hashExprs=options.exprData.hashExprs,resolved=helpersCore.bindAndRead(items),hashOptions,aliases;// Check if using hash
if(canReflect_1_19_2_canReflect.size(hashExprs)>0){hashOptions={};canReflect_1_19_2_canReflect.eachKey(hashExprs,function(exprs,key){hashOptions[exprs.key]=key;});}if((canReflect_1_19_2_canReflect.isObservableLike(resolved)&&canReflect_1_19_2_canReflect.isListLike(resolved)||canReflect_1_19_2_canReflect.isListLike(resolved)&&canReflect_1_19_2_canReflect.isValueLike(items))&&!options.stringOnly){// Tells that a helper has been called, this function should be returned through
// checking its value.
options.metadata.rendered=true;return function(el){var cb=function(item,index){var aliases={};if(canReflect_1_19_2_canReflect.size(hashOptions)>0){if(hashOptions.value){aliases[hashOptions.value]=item;}if(hashOptions.index){aliases[hashOptions.index]=index;}}return options.fn(options.scope.add(aliases,{notContext:true}).add({index:index},{special:true}).add(item),options.options);};canViewLive_5_0_5_canViewLive.list(el,items,cb,options.context,function(list){return options.inverse(options.scope.add(list),options.options);});};}var expr=helpersCore.resolve(items),result;if(!!expr&&canReflect_1_19_2_canReflect.isListLike(expr)){result=utils$1.getItemsFragContent(expr,options,options.scope);return options.stringOnly?result.join(''):result;}else if(canReflect_1_19_2_canReflect.isObservableLike(expr)&&canReflect_1_19_2_canReflect.isMapLike(expr)||expr instanceof Object){result=[];canReflect_1_19_2_canReflect.each(expr,function(val,key){var value=new keyObservable(expr,key);aliases={};if(canReflect_1_19_2_canReflect.size(hashOptions)>0){if(hashOptions.value){aliases[hashOptions.value]=value;}if(hashOptions.key){aliases[hashOptions.key]=key;}}result.push(options.fn(options.scope.add(aliases,{notContext:true}).add({key:key},{special:true}).add(value)));});return options.stringOnly?result.join(''):result;}};eachHelper.isLiveBound=true;eachHelper.requiresOptionsArgument=true;eachHelper.ignoreArgLookup=function ignoreArgLookup(index){return index===1;};// ### index
// This is legacy for `{{index(5)}}`
var indexHelper=canAssign_1_3_3_canAssign(function indexHelper(offset,options){if(!options){options=offset;offset=0;}var index=options.scope.peek("scope.index");return ""+((typeof index==="function"?index():index)+offset);},{requiresOptionsArgument:true});// ### WITH HELPER
var withHelper=function(expr,options){var ctx=expr;if(!options){// hash-only case if no current context expression
options=expr;expr=true;ctx=options.hash;}else {expr=helpersCore.resolve(expr);if(options.hash&&canReflect_1_19_2_canReflect.size(options.hash)>0){// presumably rare case of both a context object AND hash keys
// Leaving it undocumented for now, but no reason not to support it.
ctx=options.scope.add(options.hash,{notContext:true}).add(ctx);}}return options.fn(ctx||{});};withHelper.requiresOptionsArgument=true;// ### data helper
var dataHelper=function(attr,value){var data=(helpersCore.looksLikeOptions(value)?value.context:value)||this;return function setData(el){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){dev.warn('The {{data}} helper has been deprecated; use {{domData}} instead: https://canjs.com/doc/can-stache.helpers.domData.html');}//!steal-remove-end
canDomData_1_0_3_canDomData.set(el,attr,data);};};// ## UNLESS HELPER
var unlessHelper=function(expr,options){if(!options){return !ifHelper.apply(this,[expr]);}return ifHelper.apply(this,[expr,canAssign_1_3_3_canAssign(canAssign_1_3_3_canAssign({},options),{fn:options.inverse,inverse:options.fn})]);};unlessHelper.requiresOptionsArgument=true;unlessHelper.isLiveBound=true;// ## Converters
// ## NOT converter
var notConverter={get:function(obs,options){if(helpersCore.looksLikeOptions(options)){return canReflect_1_19_2_canReflect.getValue(obs)?options.inverse():options.fn();}else {return !canReflect_1_19_2_canReflect.getValue(obs);}},set:function(newVal,obs){canReflect_1_19_2_canReflect.setValue(obs,!newVal);}};// ## Register as defaults
canAssign_1_3_3_canAssign(builtInHelpers,{'debugger':debuggerHelper$1,each:eachHelper,eachOf:eachHelper,index:indexHelper,'if':ifHelper,is:isHelper,eq:isHelper,unless:unlessHelper,'with':withHelper,console:console,data:dataHelper,domData:domDataHelper,'switch':switchHelper,joinBase:joinBaseHelper,and:andHelper,or:orHelper,'let':Let,'for':ForOf,portal:Portal$1});canAssign_1_3_3_canAssign(builtInConverters,{'not':notConverter});// add all the built-in helpers when stache is loaded
helpersCore.addBuiltInHelpers();helpersCore.addBuiltInConverters();var core$1=helpersCore;var mustacheLineBreakRegExp$1=/(?:(^|\r?\n)(\s*)(\{\{([\s\S]*)\}\}\}?)([^\S\n\r]*)($|\r?\n))|(\{\{([\s\S]*)\}\}\}?)/g,mustacheWhitespaceRegExp$1=/(\s*)(\{\{\{?)(-?)([\s\S]*?)(-?)(\}\}\}?)(\s*)/g;function splitModeFromExpression$1(expression,state){expression=expression.trim();var mode=expression.charAt(0);if("#/{&^>!<".indexOf(mode)>=0){expression=expression.substr(1).trim();}else {mode=null;}// Triple braces do nothing within a tag.
if(mode==="{"&&state.node){mode=null;}return {mode:mode,expression:expression};}function cleanLineEndings(template){// Finds mustache tags with space around them or no space around them.
return template.replace(mustacheLineBreakRegExp$1,function(whole,returnBefore,spaceBefore,special,expression,spaceAfter,returnAfter,// A mustache magic tag that has no space around it.
spaceLessSpecial,spaceLessExpression,matchIndex){// IE 8 will provide undefined
spaceAfter=spaceAfter||"";returnBefore=returnBefore||"";spaceBefore=spaceBefore||"";var modeAndExpression=splitModeFromExpression$1(expression||spaceLessExpression,{});// If it's a partial or tripple stache, leave in place.
if(spaceLessSpecial||">{".indexOf(modeAndExpression.mode)>=0){return whole;}else if("^#!/".indexOf(modeAndExpression.mode)>=0){// Return the magic tag and a trailing linebreak if this did not
// start a new line and there was an end line.
// Add a normalized leading space, if there was any leading space, in case this abuts a tag name
spaceBefore=returnBefore+spaceBefore&&" ";return spaceBefore+special+(matchIndex!==0&&returnAfter.length?returnBefore+"\n":"");}else {// There is no mode, return special with spaces around it.
return spaceBefore+special+spaceAfter+(spaceBefore.length||matchIndex!==0?returnBefore+"\n":"");}});}function whiteSpaceReplacement(whole,spaceBefore,bracketBefore,controlBefore,expression,controlAfter,bracketAfter,spaceAfter){if(controlBefore==='-'){spaceBefore='';}if(controlAfter==='-'){spaceAfter='';}return spaceBefore+bracketBefore+expression+bracketAfter+spaceAfter;}function cleanWhitespaceControl(template){return template.replace(mustacheWhitespaceRegExp$1,whiteSpaceReplacement);}var cleanLineEndings_1=cleanLineEndings;var cleanWhitespaceControl_1=cleanWhitespaceControl;var canStacheAst_1_1_0_controls={cleanLineEndings:cleanLineEndings_1,cleanWhitespaceControl:cleanWhitespaceControl_1};var parse$8=function(filename,source){if(arguments.length===1){source=arguments[0];filename=undefined;}var template=source;template=canStacheAst_1_1_0_controls.cleanWhitespaceControl(template);template=canStacheAst_1_1_0_controls.cleanLineEndings(template);var imports=[],dynamicImports=[],importDeclarations=[],ases={},attributes=new Map(),inImport=false,inFrom=false,inAs=false,isUnary=false,importIsDynamic=false,currentAs="",currentFrom="",currentAttrName=null;function processImport(line){if(currentAs){ases[currentAs]=currentFrom;currentAs="";}if(importIsDynamic){dynamicImports.push(currentFrom);}else {imports.push(currentFrom);}importDeclarations.push({specifier:currentFrom,loc:{line:line},attributes:attributes});// Reset this scope value so that the next import gets new attributes.
attributes=new Map();}var program=canViewParser_4_1_3_canViewParser(template,{filename:filename,start:function(tagName,unary){if(tagName==="can-import"){isUnary=unary;importIsDynamic=false;// assume static import unless there is content (chars/tags/special).
inImport=true;}else if(tagName==="can-dynamic-import"){isUnary=unary;importIsDynamic=true;inImport=true;}else if(inImport){importIsDynamic=true;// found content inside can-import tag.
inImport=false;}},attrStart:function(attrName){currentAttrName=attrName;// Default to a boolean attribute, the attrValue hook will replace that.
attributes.set(currentAttrName,true);if(attrName==="from"){inFrom=true;}else if(attrName==="as"||attrName==="export-as"){inAs=true;}},attrEnd:function(attrName){if(attrName==="from"){inFrom=false;}else if(attrName==="as"||attrName==="export-as"){inAs=false;}},attrValue:function(value){if(inImport){attributes.set(currentAttrName,value);}if(inFrom&&inImport){currentFrom=value;}else if(inAs&&inImport){currentAs=value;}},end:function(tagName,unary,line){if((tagName==="can-import"||tagName==="can-dynamic-import")&&isUnary){processImport(line);}},close:function(tagName,unary,line){if(tagName==="can-import"||tagName==="can-dynamic-import"){processImport(line);}},chars:function(text){if(text.trim().length>0){importIsDynamic=true;}},special:function(){importIsDynamic=true;}},true);return {intermediate:program,program:program,imports:imports,dynamicImports:dynamicImports,importDeclarations:importDeclarations,ases:ases,exports:ases};};var canStacheAst_1_1_0_canStacheAst={parse:parse$8};var global$2=global_1();var stealOptimized=function(moduleName,parentName){if(typeof global$2.stealRequire!=="undefined"){return steal.import(moduleName,{name:parentName});}};var global$3=global_1();function isFunction$1$1(fn){return typeof fn==="function";}// since stealJS uses a SystemJS fork and SystemJS is exposed globally we can use this loader for SystemJS or stealJS
var system=function(moduleName,parentName){if(typeof global$3.System==="object"&&isFunction$1$1(global$3.System["import"])){return global$3.System["import"](moduleName,{name:parentName});}};var es6=createCommonjsModule(function(module){// check for `noModule` in HTMLScriptElement. if its present, then the browser can handle dynamic loading because if
// HTMLScriptElement.noModule is `true` the browser used to run fallback scripts in older browsers that do not support JavaScript modules
if("HTMLScriptElement"in global_1()&&"noModule"in HTMLScriptElement.prototype){// "import()" is a syntax error on some platforms and will cause issues if this module is bundled
//  into a larger script bundle, so only eval it to code if the platform is known to support it.
module.exports=new Function("moduleName",// if moduleName has no extension, treat it as a javascript file and add .js extension
"if (!(moduleName.match(/[^\\\\\\/]\\.([^.\\\\\\/]+)$/) || [null]).pop()) {\n"+"moduleName += '.js';\n"+"}\n"+"return import(moduleName.replace(/['\"]+/g, ''));\n");}else {module.exports=function(){};}});var node$1$1=function(moduleName){if(isNode$2()){return Promise.resolve(commonjsRequire());}};var global$4=global_1();// AMD loader
var require=function(moduleName){if(global$4.define&&global$4.define.amd){return new Promise(function(resolve,reject){global$4.require([moduleName],function(value){resolve(value);});});}};/**
 * @module {function} can-util/js/import/import import
 * @parent can-util/js
 * @signature `importModule(moduleName, parentName)`
 * @hide
 *
 * ```js
 * var importModule = require("can-util/js/import/import");
 *
 * importModule("foo.stache").then(function(){
 *   // module was imported
 * });
 * ```
 *
 * @param {String} moduleName The module to be imported.
 * @param {String} [parentName] A parent module that will be used as a reference for resolving relative module imports.
 * @return {Promise} A Promise that will resolve when the module has been imported.
 */// array of loader functions, last in first out
var loader=[];/**
 * add a loader-function to the list of loader
 * the function should return a promise that resolves when the module has been loaded
 * otherwise the loader function should return null or undefined
 * 
 * @signature `import.addLoader(loader)`
 * @param fn callable
 */function addLoader(fn){if(typeof fn==="function"){loader.push(fn);}}/**
 * clear the list of loaders
 */function flushLoader(){loader=[];}/**
 * a bunch of presets that can be used in a certain environment 
 * 
 * @param preset string
 */function preset(preset){flushLoader();switch(preset){case"stealjs":addLoader(stealOptimized);addLoader(system);break;case"ES2020":case"es2020":case"dynamic-import":addLoader(es6);break;case"node":addLoader(node$1$1);break;case"all":default:addLoader(stealOptimized);addLoader(es6);addLoader(node$1$1);addLoader(require);addLoader(system);break;}}// by default, add all available loaders to the list
preset('all');var canImportModule_1_3_2_canImportModule=canNamespace_1_0_0_canNamespace.import=function(moduleName,parentName){return new Promise(function(resolve,reject){try{var loaderPromise;// last added loader will be called first
for(var i=loader.length-1;i>=0;i--){loaderPromise=loader[i](moduleName,parentName);if(loaderPromise){break;}}if(loaderPromise){loaderPromise.then(resolve,reject);}else {reject("no proper module-loader available");}}catch(err){reject(err);}});};var addLoader_1=addLoader;var flushLoader_1=flushLoader;var preset_1=preset;canImportModule_1_3_2_canImportModule.addLoader=addLoader_1;canImportModule_1_3_2_canImportModule.flushLoader=flushLoader_1;canImportModule_1_3_2_canImportModule.preset=preset_1;/* jshint undef: false */var getIntermediateAndImports=canStacheAst_1_1_0_canStacheAst.parse;var makeRendererConvertScopes=utils$1.makeRendererConvertScopes;var last$2=utils$1.last;// Make sure that we can also use our modules with Stache as a plugin
if(!canViewCallbacks_5_0_0_canViewCallbacks.tag("content")){// This was moved from the legacy view/scanner.js to here.
// This makes sure content elements will be able to have a callback.
canViewCallbacks_5_0_0_canViewCallbacks.tag("content",function(el,tagData){return tagData.scope;});}var isViewSymbol$2=canSymbol_1_7_0_canSymbol.for("can.isView");var wrappedAttrPattern=/[{(].*[)}]/;var colonWrappedAttrPattern=/^on:|(:to|:from|:bind)$|.*:to:on:.*/;var svgNamespace="http://www.w3.org/2000/svg",xmlnsAttrNamespaceURI$1="http://www.w3.org/2000/xmlns/",xlinkHrefAttrNamespaceURI$1="http://www.w3.org/1999/xlink";var namespaces={"svg":svgNamespace,// this allows a partial to start with g.
"g":svgNamespace,"defs":svgNamespace,"path":svgNamespace,"filter":svgNamespace,"feMorphology":svgNamespace,"feGaussianBlur":svgNamespace,"feOffset":svgNamespace,"feComposite":svgNamespace,"feColorMatrix":svgNamespace,"use":svgNamespace},attrsNamespacesURI$1={'xmlns':xmlnsAttrNamespaceURI$1,'xlink:href':xlinkHrefAttrNamespaceURI$1},textContentOnlyTag={style:true,script:true};function stache(filename,template){if(arguments.length===1){template=arguments[0];filename=undefined;}var inlinePartials={};// Remove line breaks according to mustache's specs.
if(typeof template==="string"){template=mustache_core.cleanWhitespaceControl(template);template=mustache_core.cleanLineEndings(template);}// The HTML section that is the root section for the entire template.
var section=new html_section(filename),// Tracks the state of the parser.
state={node:null,attr:null,// A stack of which node / section we are in.
// There is probably a better way of doing this.
sectionElementStack:[],// If text should be inserted and HTML escaped
text:false,// which namespace we are in
namespaceStack:[],// for style and script tags
// we create a special TextSectionBuilder and add things to that
// when the element is done, we compile the text section and
// add it as a callback to `section`.
textContentOnly:null},// This function is a catch all for taking a section and figuring out
// how to create a "renderer" that handles the functionality for a
// given section and modify the section to use that renderer.
// For example, if an HTMLSection is passed with mode `#` it knows to
// create a liveBindingBranchRenderer and pass that to section.add.
// jshint maxdepth:5
makeRendererAndUpdateSection=function(section,mode,stache,lineNo){if(mode===">"){// Partials use liveBindingPartialRenderers
section.add(mustache_core.makeLiveBindingPartialRenderer(stache,copyState({filename:section.filename,lineNo:lineNo})));}else if(mode==="/"){var createdSection=section.last();if(createdSection.startedWith==="<"){inlinePartials[stache]=section.endSubSectionAndReturnRenderer();// Remove *TWO* nodes because we now have a start and an end comment for the section....
section.removeCurrentNode();section.removeCurrentNode();}else {section.endSection();}// to avoid "Blocks are nested too deeply" when linting
//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(section instanceof html_section){var last=state.sectionElementStack[state.sectionElementStack.length-1];if(last.tag&&last.type==="section"&&stache!==""&&stache!==last.tag){if(filename){dev.warn(filename+":"+lineNo+": unexpected closing tag {{/"+stache+"}} expected {{/"+last.tag+"}}");}else {dev.warn(lineNo+": unexpected closing tag {{/"+stache+"}} expected {{/"+last.tag+"}}");}}}}//!steal-remove-end
if(section instanceof html_section){state.sectionElementStack.pop();}}else if(mode==="else"){section.inverse();}else {// If we are an HTMLSection, we will generate a
// a LiveBindingBranchRenderer; otherwise, a StringBranchRenderer.
// A LiveBindingBranchRenderer function processes
// the mustache text, and sets up live binding if an observable is read.
// A StringBranchRenderer function processes the mustache text and returns a
// text value.
var makeRenderer=section instanceof html_section?mustache_core.makeLiveBindingBranchRenderer:mustache_core.makeStringBranchRenderer;if(mode==="{"||mode==="&"){// Adds a renderer function that just reads a value or calls a helper.
section.add(makeRenderer(null,stache,copyState({filename:section.filename,lineNo:lineNo})));}else if(mode==="#"||mode==="^"||mode==="<"){// Adds a renderer function and starts a section.
var renderer=makeRenderer(mode,stache,copyState({filename:section.filename,lineNo:lineNo}));var sectionItem={type:"section"};section.startSection(renderer,stache);section.last().startedWith=mode;// If we are a directly nested section, count how many we are within
if(section instanceof html_section){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var tag=typeof renderer.exprData.closingTag==='function'?renderer.exprData.closingTag():stache;sectionItem.tag=tag;}//!steal-remove-end
state.sectionElementStack.push(sectionItem);}}else {// Adds a renderer function that only updates text.
section.add(makeRenderer(null,stache,copyState({text:true,filename:section.filename,lineNo:lineNo})));}}},isDirectlyNested=function(){var lastElement=state.sectionElementStack[state.sectionElementStack.length-1];return state.sectionElementStack.length?lastElement.type==="section"||lastElement.type==="custom":true;},// Copys the state object for use in renderers.
copyState=function(overwrites){var cur={tag:state.node&&state.node.tag,attr:state.attr&&state.attr.name,// <content> elements should be considered direclty nested
directlyNested:isDirectlyNested(),textContentOnly:!!state.textContentOnly};return overwrites?canAssign_1_3_3_canAssign(cur,overwrites):cur;},addAttributesCallback=function(node,callback){if(!node.attributes){node.attributes=[];}node.attributes.unshift(callback);};canViewParser_4_1_3_canViewParser(template,{filename:filename,start:function(tagName,unary,lineNo){var matchedNamespace=namespaces[tagName];if(matchedNamespace&&!unary){state.namespaceStack.push(matchedNamespace);}// either add templates: {} here or check below and decorate
// walk up the stack/targetStack until you find the first node
// with a templates property, and add the popped renderer
state.node={tag:tagName,children:[],namespace:matchedNamespace||last$2(state.namespaceStack)};},end:function(tagName,unary,lineNo){var isCustomTag=canViewCallbacks_5_0_0_canViewCallbacks.tag(tagName);var directlyNested=isDirectlyNested();if(unary){// If it's a custom tag with content, we need a section renderer.
section.add(state.node);if(isCustomTag){// Call directlyNested now as it's stateful.
addAttributesCallback(state.node,function(scope){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){scope.set('scope.lineNumber',lineNo);}//!steal-remove-end
canViewCallbacks_5_0_0_canViewCallbacks.tagHandler(this,tagName,{scope:scope,subtemplate:null,templateType:"stache",directlyNested:directlyNested});});}}else {section.push(state.node);state.sectionElementStack.push({type:isCustomTag?"custom":null,tag:isCustomTag?null:tagName,templates:{},directlyNested:directlyNested});// If it's a custom tag with content, we need a section renderer.
if(isCustomTag){section.startSubSection();}else if(textContentOnlyTag[tagName]){state.textContentOnly=new text_section(filename);}}state.node=null;},close:function(tagName,lineNo){var matchedNamespace=namespaces[tagName];if(matchedNamespace){state.namespaceStack.pop();}var isCustomTag=canViewCallbacks_5_0_0_canViewCallbacks.tag(tagName),renderer;if(isCustomTag){renderer=section.endSubSectionAndReturnRenderer();}if(textContentOnlyTag[tagName]){section.last().add(state.textContentOnly.compile(copyState()));state.textContentOnly=null;}var oldNode=section.pop();if(isCustomTag){if(tagName==="can-template"){// If we find a can-template we want to go back 2 in the stack to get it's inner content
// rather than the <can-template> element itself
var parent=state.sectionElementStack[state.sectionElementStack.length-2];if(renderer){// Only add the renderer if the template has content
parent.templates[oldNode.attrs.name]=makeRendererConvertScopes(renderer);}section.removeCurrentNode();}else {// Get the last element in the stack
var current=state.sectionElementStack[state.sectionElementStack.length-1];addAttributesCallback(oldNode,function(scope){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){scope.set('scope.lineNumber',lineNo);}//!steal-remove-end
canViewCallbacks_5_0_0_canViewCallbacks.tagHandler(this,tagName,{scope:scope,subtemplate:renderer?makeRendererConvertScopes(renderer):renderer,templateType:"stache",templates:current.templates,directlyNested:current.directlyNested});});}}state.sectionElementStack.pop();},attrStart:function(attrName,lineNo){if(state.node.section){state.node.section.add(attrName+"=\"");}else {state.attr={name:attrName,value:""};}},attrEnd:function(attrName,lineNo){var matchedAttrNamespacesURI=attrsNamespacesURI$1[attrName];if(state.node.section){state.node.section.add("\" ");}else {if(!state.node.attrs){state.node.attrs={};}if(state.attr.section){state.node.attrs[state.attr.name]=state.attr.section.compile(copyState());}else if(matchedAttrNamespacesURI){state.node.attrs[state.attr.name]={value:state.attr.value,namespaceURI:attrsNamespacesURI$1[attrName]};}else {state.node.attrs[state.attr.name]=state.attr.value;}var attrCallback=canViewCallbacks_5_0_0_canViewCallbacks.attr(attrName);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var decodedAttrName=canAttributeEncoder_1_1_4_canAttributeEncoder.decode(attrName);var weirdAttribute=!!wrappedAttrPattern.test(decodedAttrName)||!!colonWrappedAttrPattern.test(decodedAttrName);if(weirdAttribute&&!attrCallback){dev.warn("unknown attribute binding "+decodedAttrName+". Is can-stache-bindings imported?");}}//!steal-remove-end
if(attrCallback){if(!state.node.attributes){state.node.attributes=[];}state.node.attributes.push(function(scope){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){scope.set('scope.lineNumber',lineNo);}//!steal-remove-end
attrCallback(this,{attributeName:attrName,scope:scope});});}state.attr=null;}},attrValue:function(value,lineNo){var section=state.node.section||state.attr.section;if(section){section.add(value);}else {state.attr.value+=value;}},chars:function(text,lineNo){(state.textContentOnly||section).add(text);},special:function(text,lineNo){var firstAndText=mustache_core.splitModeFromExpression(text,state),mode=firstAndText.mode,expression=firstAndText.expression;if(expression==="else"){var inverseSection;if(state.attr&&state.attr.section){inverseSection=state.attr.section;}else if(state.node&&state.node.section){inverseSection=state.node.section;}else {inverseSection=state.textContentOnly||section;}inverseSection.inverse();return;}if(mode==="!"){return;}if(state.node&&state.node.section){makeRendererAndUpdateSection(state.node.section,mode,expression,lineNo);if(state.node.section.subSectionDepth()===0){state.node.attributes.push(state.node.section.compile(copyState()));delete state.node.section;}}// `{{}}` in an attribute like `class="{{}}"`
else if(state.attr){if(!state.attr.section){state.attr.section=new text_section(filename);if(state.attr.value){state.attr.section.add(state.attr.value);}}makeRendererAndUpdateSection(state.attr.section,mode,expression,lineNo);}// `{{}}` in a tag like `<div {{}}>`
else if(state.node){if(!state.node.attributes){state.node.attributes=[];}if(!mode){state.node.attributes.push(mustache_core.makeLiveBindingBranchRenderer(null,expression,copyState({filename:section.filename,lineNo:lineNo})));}else if(mode==="#"||mode==="^"){if(!state.node.section){state.node.section=new text_section(filename);}makeRendererAndUpdateSection(state.node.section,mode,expression,lineNo);}else {throw new Error(mode+" is currently not supported within a tag.");}}else {makeRendererAndUpdateSection(state.textContentOnly||section,mode,expression,lineNo);}},comment:function(text){// create comment node
section.add({comment:text});},done:function(lineNo){//!steal-remove-start
// warn if closing magic tag is missed #675
if(process.env.NODE_ENV!=='production'){var last=state.sectionElementStack[state.sectionElementStack.length-1];if(last&&last.tag&&last.type==="section"){if(filename){dev.warn(filename+":"+lineNo+": closing tag {{/"+last.tag+"}} was expected");}else {dev.warn(lineNo+": closing tag {{/"+last.tag+"}} was expected");}}}//!steal-remove-end
}});var renderer=section.compile();var scopifiedRenderer=canObservationRecorder_1_3_1_canObservationRecorder.ignore(function(scope,options){// if an object is passed to options, assume it is the helpers object
if(options&&!options.helpers&&!options.partials&&!options.tags){options={helpers:options};}// mark passed in helper so they will be automatically passed
// helperOptions (.fn, .inverse, etc) when called as Call Expressions
canReflect_1_19_2_canReflect.eachKey(options&&options.helpers,function(helperValue){helperValue.requiresOptionsArgument=true;});// helpers, partials, tags, vars
var templateContext=new canViewScope_4_13_7_templateContext(options);// copy inline partials over
canReflect_1_19_2_canReflect.eachKey(inlinePartials,function(partial,partialName){canReflect_1_19_2_canReflect.setKeyValue(templateContext.partials,partialName,partial);});// allow the current renderer to be called with {{>scope.view}}
canReflect_1_19_2_canReflect.setKeyValue(templateContext,'view',scopifiedRenderer);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){canReflect_1_19_2_canReflect.setKeyValue(templateContext,'filename',section.filename);}//!steal-remove-end
// now figure out the final structure ...
if(!(scope instanceof canViewScope_4_13_7_canViewScope)){scope=new canViewScope_4_13_7_canViewScope(templateContext).add(scope);}else {// we are going to split ...
var templateContextScope=new canViewScope_4_13_7_canViewScope(templateContext);templateContextScope._parent=scope._parent;scope._parent=templateContextScope;}return renderer(scope.addLetContext());});// Identify is a view type
scopifiedRenderer[isViewSymbol$2]=true;return scopifiedRenderer;}// At this point, can.stache has been created
canAssign_1_3_3_canAssign(stache,core$1);stache.safeString=function(text){return canReflect_1_19_2_canReflect.assignSymbols({},{"can.toDOM":function(){return text;}});};stache.async=function(source){var iAi=getIntermediateAndImports(source);var importPromises=iAi.imports.map(function(moduleName){return canImportModule_1_3_2_canImportModule(moduleName);});return Promise.all(importPromises).then(function(){return stache(iAi.intermediate);});};var templates={};stache.from=mustache_core.getTemplateById=function(id){if(!templates[id]){var el=document$1().getElementById(id);if(el){templates[id]=stache("#"+id,el.innerHTML);}}return templates[id];};stache.registerPartial=function(id,partial){templates[id]=typeof partial==="string"?stache(partial):partial;};stache.addBindings=canViewCallbacks_5_0_0_canViewCallbacks.attrs;var canStache_5_1_1_canStache=canNamespace_1_0_0_canNamespace.stache=stache;var viewModelSymbol=canSymbol_1_7_0_canSymbol.for('can.viewModel');var canViewModel_4_0_3_canViewModel=canNamespace_1_0_0_canNamespace.viewModel=function(el,attr,val){if(typeof el==="string"){el=document$1().querySelector(el);}else if(canReflect_1_19_2_canReflect.isListLike(el)&&!el.nodeType){el=el[0];}if(canReflect_1_19_2_canReflect.isObservableLike(attr)&&canReflect_1_19_2_canReflect.isMapLike(attr)){el[viewModelSymbol]=attr;return;}var scope=el[viewModelSymbol];if(!scope){scope=new canSimpleMap_4_3_3_canSimpleMap();el[viewModelSymbol]=scope;}switch(arguments.length){case 0:case 1:return scope;case 2:return canReflect_1_19_2_canReflect.getKeyValue(scope,attr);default:canReflect_1_19_2_canReflect.setKeyValue(scope,attr,val);return el;}};var isDomEventTarget$2=util.isDomEventTarget;var canEvent={on:function on(eventName,handler,queue){if(isDomEventTarget$2(this)){canDomEvents_1_3_13_canDomEvents.addEventListener(this,eventName,handler,queue);}else {canReflect_1_19_2_canReflect.onKeyValue(this,eventName,handler,queue);}},off:function off(eventName,handler,queue){if(isDomEventTarget$2(this)){canDomEvents_1_3_13_canDomEvents.removeEventListener(this,eventName,handler,queue);}else {canReflect_1_19_2_canReflect.offKeyValue(this,eventName,handler,queue);}},one:function one(event,handler,queue){// Unbind the listener after it has been executed
var one=function(){canEvent.off.call(this,event,one,queue);return handler.apply(this,arguments);};// Bind the altered listener
canEvent.on.call(this,event,one,queue);return this;}};var canAttributeObservable_2_0_2_event=canEvent;var isRadioInput$1=function isRadioInput(el){return el.nodeName.toLowerCase()==="input"&&el.type==="radio";};// Determine the event or events we need to listen to when this value changes.
var canAttributeObservable_2_0_2_getEventName=function getEventName(el,prop){var event="change";if(isRadioInput$1(el)&&prop==="checked"){event="can-attribute-observable-radiochange";}if(canAttributeObservable_2_0_2_behaviors.findSpecialListener(prop)){event=prop;}return event;};function getRoot(){return document$1().documentElement;}function findParentForm(el){while(el){if(el.nodeName==='FORM'){break;}el=el.parentNode;}return el;}function shouldReceiveEventFromRadio(source,dest){// Must have the same name attribute and parent form
var name=source.getAttribute('name');return name&&name===dest.getAttribute('name')&&findParentForm(source)===findParentForm(dest);}function isRadioInput$1$1(el){return el.nodeName==='INPUT'&&el.type==='radio';}function attachRootListener(domEvents,eventTypeTargets){var root=getRoot();var newListener=function(event){var target=event.target;if(!isRadioInput$1$1(target)){return;}for(var eventType in eventTypeTargets){var newEvent={type:eventType};var listeningNodes=eventTypeTargets[eventType];listeningNodes.forEach(function(el){if(shouldReceiveEventFromRadio(target,el)){domEvents.dispatch(el,newEvent,false);}});}};domEvents.addEventListener(root,'change',newListener);return newListener;}function detachRootListener(domEvents,listener){var root=getRoot();domEvents.removeEventListener(root,'change',listener);}/**
 * @module {events} can-event-dom-radiochange
 * @parent can-dom-utilities
 * @collection can-infrastructure
 * @package ./package.json
 *
 * A custom event for listening to changes of inputs with type "radio",
 * which fires when a conflicting radio input changes. A "conflicting"
 * radio button has the same "name" attribute and exists within in the
 * same form, or lack thereof. This event coordinates state bound to
 * whether a radio is checked. The "change" event does not fire for deselected
 * radios. By using this event instead, deselected radios receive notification.
 *
 * ```js
 * var domEvents = require('can-dom-events');
 * var radioChange = require('can-event-dom-radiochange');
 * domEvents.addEvent(radioChange);
 *
 * var target = document.createElement('input');
 *
 * function handler () {
 * 	console.log('radiochange event fired');
 * }
 *
 * domEvents.addEventListener(target, 'radiochange', handler);
 * domEvents.removeEventListener(target, 'radiochange', handler);
 * ```
 */var radioChangeEvent={defaultEventType:'radiochange',addEventListener:function(target,eventType,handler){if(!isRadioInput$1$1(target)){throw new Error('Listeners for '+eventType+' must be radio inputs');}var eventTypeTrackedRadios=radioChangeEvent._eventTypeTrackedRadios;if(!eventTypeTrackedRadios){eventTypeTrackedRadios=radioChangeEvent._eventTypeTrackedRadios={};if(!radioChangeEvent._rootListener){radioChangeEvent._rootListener=attachRootListener(this,eventTypeTrackedRadios);}}var trackedRadios=radioChangeEvent._eventTypeTrackedRadios[eventType];if(!trackedRadios){trackedRadios=radioChangeEvent._eventTypeTrackedRadios[eventType]=new Set();}trackedRadios.add(target);target.addEventListener(eventType,handler);},removeEventListener:function(target,eventType,handler){target.removeEventListener(eventType,handler);var eventTypeTrackedRadios=radioChangeEvent._eventTypeTrackedRadios;if(!eventTypeTrackedRadios){return;}var trackedRadios=eventTypeTrackedRadios[eventType];if(!trackedRadios){return;}trackedRadios.delete(target);if(trackedRadios.size===0){delete eventTypeTrackedRadios[eventType];for(var key in eventTypeTrackedRadios){if(eventTypeTrackedRadios.hasOwnProperty(key)){return;}}delete radioChangeEvent._eventTypeTrackedRadios;detachRootListener(this,radioChangeEvent._rootListener);delete radioChangeEvent._rootListener;}}};var canEventDomRadiochange_2_2_1_canEventDomRadiochange=canNamespace_1_0_0_canNamespace.domEventRadioChange=radioChangeEvent;var onValueSymbol$4=canSymbol_1_7_0_canSymbol.for('can.onValue');var offValueSymbol$2=canSymbol_1_7_0_canSymbol.for('can.offValue');var onEmitSymbol$1=canSymbol_1_7_0_canSymbol.for('can.onEmit');var offEmitSymbol$1=canSymbol_1_7_0_canSymbol.for('can.offEmit');// We register a namespaced radiochange event with the global
// event registry so it does not interfere with user-defined events.
var internalRadioChangeEventType="can-attribute-observable-radiochange";canDomEvents_1_3_13_canDomEvents.addEvent(canEventDomRadiochange_2_2_1_canEventDomRadiochange,internalRadioChangeEventType);var isSelect=function isSelect(el){return el.nodeName.toLowerCase()==="select";};var isMultipleSelect$1=function isMultipleSelect(el,prop){return isSelect(el)&&prop==="value"&&el.multiple;};var slice$2=Array.prototype.slice;function canUtilAEL(){var args=slice$2.call(arguments,0);args.unshift(this);return canDomEvents_1_3_13_canDomEvents.addEventListener.apply(null,args);}function canUtilREL(){var args=slice$2.call(arguments,0);args.unshift(this);return canDomEvents_1_3_13_canDomEvents.removeEventListener.apply(null,args);}function AttributeObservable(el,prop,bindingData,event){if(typeof bindingData==="string"){event=bindingData;bindingData=undefined;}this.el=el;this.bound=false;this.prop=isMultipleSelect$1(el,prop)?"values":prop;this.event=event||canAttributeObservable_2_0_2_getEventName(el,prop);this.handler=this.handler.bind(this);// If we have an event
// remove onValue/offValue and add onEvent
if(event!==undefined){this[onValueSymbol$4]=null;this[offValueSymbol$2]=null;this[onEmitSymbol$1]=AttributeObservable.prototype.on;this[offEmitSymbol$1]=AttributeObservable.prototype.off;}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){// register what changes the element's attribute
canReflectDependencies_1_1_2_canReflectDependencies.addMutatedBy(this.el,this.prop,this);canReflect_1_19_2_canReflect.assignSymbols(this,{"can.getName":function getName(){return "AttributeObservable<"+el.nodeName.toLowerCase()+"."+this.prop+">";}});}//!steal-remove-end
}AttributeObservable.prototype=Object.create(settable.prototype);canAssign_1_3_3_canAssign(AttributeObservable.prototype,{constructor:AttributeObservable,get:function get(){if(canObservationRecorder_1_3_1_canObservationRecorder.isRecording()){canObservationRecorder_1_3_1_canObservationRecorder.add(this);if(!this.bound){canObservation_4_2_0_canObservation.temporarilyBind(this);}}var value=canAttributeObservable_2_0_2_behaviors.get(this.el,this.prop);if(typeof value==='function'){value=value.bind(this.el);}return value;},set:function set(newVal){var setterDispatchedEvents=canAttributeObservable_2_0_2_behaviors.setAttrOrProp(this.el,this.prop,newVal);// update the observation internal value
if(!setterDispatchedEvents){this._value=newVal;}return newVal;},handler:function handler(newVal,event){var old=this._value;var queuesArgs=[];this._value=canAttributeObservable_2_0_2_behaviors.get(this.el,this.prop);// If we have an event then we want to enqueue on all changes
// otherwise only enquue when there are changes to the value
if(event!==undefined||this._value!==old){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(typeof this._log==="function"){this._log(old,newVal);}}//!steal-remove-end
queuesArgs=[this.handlers.getNode([]),this,[newVal,old]];//!steal-remove-start
if(process.env.NODE_ENV!=='production'){queuesArgs=[this.handlers.getNode([]),this,[newVal,old]/* jshint laxcomma: true */,null,[this.el,this.prop,"changed to",newVal,"from",old,"by",event]/* jshint laxcomma: false */];}//!steal-remove-end
// adds callback handlers to be called w/i their respective queue.
canQueues_1_3_2_canQueues.enqueueByQueue.apply(canQueues_1_3_2_canQueues,queuesArgs);}},onBound:function onBound(){var observable=this;observable.bound=true;// make sure `this.handler` gets the new value instead of
// the event object passed to the event handler
observable._handler=function(event){observable.handler(canAttributeObservable_2_0_2_behaviors.get(observable.el,observable.prop),event);};if(observable.event===internalRadioChangeEventType){canAttributeObservable_2_0_2_event.on.call(observable.el,"change",observable._handler);}var specialBinding=canAttributeObservable_2_0_2_behaviors.findSpecialListener(observable.prop);if(specialBinding){observable._specialDisposal=specialBinding.call(observable.el,observable.prop,observable._handler,canUtilAEL);}canAttributeObservable_2_0_2_event.on.call(observable.el,observable.event,observable._handler);// initial value
this._value=canAttributeObservable_2_0_2_behaviors.get(this.el,this.prop);},onUnbound:function onUnbound(){var observable=this;observable.bound=false;if(observable.event===internalRadioChangeEventType){canAttributeObservable_2_0_2_event.off.call(observable.el,"change",observable._handler);}if(observable._specialDisposal){observable._specialDisposal.call(observable.el,canUtilREL);observable._specialDisposal=null;}canAttributeObservable_2_0_2_event.off.call(observable.el,observable.event,observable._handler);},valueHasDependencies:function valueHasDependencies(){return true;},getValueDependencies:function getValueDependencies(){var m=new Map();var s=new Set();s.add(this.prop);m.set(this.el,s);return {keyDependencies:m};}});canReflect_1_19_2_canReflect.assignSymbols(AttributeObservable.prototype,{"can.isMapLike":false,"can.getValue":AttributeObservable.prototype.get,"can.setValue":AttributeObservable.prototype.set,"can.onValue":AttributeObservable.prototype.on,"can.offValue":AttributeObservable.prototype.off,"can.valueHasDependencies":AttributeObservable.prototype.hasDependencies,"can.getValueDependencies":AttributeObservable.prototype.getValueDependencies});var canAttributeObservable_2_0_2_canAttributeObservable=AttributeObservable;// # can-stache-bindings.js
//
// This module provides CanJS's default data and event bindings.
// It's broken up into several parts:
//
// - Behaviors - Binding behaviors that run given an attribute or element.
// - Attribute Syntaxes - Hooks up custom attributes to their behaviors.
// - getObservableFrom - Methods that return a observable cross bound to the scope, viewModel, or element.
// - bind - Methods for setting up cross binding
// - getBindingInfo - A helper that returns the details of a data binding given an attribute.
// - makeDataBinding - A helper method for setting up a data binding.
// - initializeValues - A helper that initializes a data binding.
// Contains all of the stache bindings that will be exported.
var bindings=new Map();var onMatchStr="on:",vmMatchStr="vm:",elMatchStr="el:",byMatchStr=":by:",toMatchStr=":to",fromMatchStr=":from",bindMatchStr=":bind",viewModelBindingStr="viewModel",attributeBindingStr="attribute",scopeBindingStr="scope",viewModelOrAttributeBindingStr="viewModelOrAttribute",viewModelSymbol$1=canSymbol_1_7_0_canSymbol.for("can.viewModel"),preventDataBindingsSymbol=canSymbol_1_7_0_canSymbol.for("can.preventDataBindings");var throwOnlyOneTypeOfBindingError=function(){throw new Error("can-stache-bindings - you can not have contextual bindings ( this:from='value' ) and key bindings ( prop:from='value' ) on one element.");};// This function checks if there bindings that are trying
// to set a property ON the viewModel _conflicting_ with bindings trying to
// set THE viewModel ITSELF.
// If there is a conflict, an error is thrown.
var checkBindingState=function(bindingState,siblingBindingData){var isSettingOnViewModel=siblingBindingData.parent.exports&&siblingBindingData.child.source===viewModelBindingStr;if(isSettingOnViewModel){var bindingName=siblingBindingData.child.name;var isSettingViewModel=isSettingOnViewModel&&(bindingName==='this'||bindingName==='.');if(isSettingViewModel){if(bindingState.isSettingViewModel||bindingState.isSettingOnViewModel){throwOnlyOneTypeOfBindingError();}else {return {isSettingViewModel:true,initialViewModelData:undefined};}}else {// just setting on viewModel
if(bindingState.isSettingViewModel){throwOnlyOneTypeOfBindingError();}else {return {isSettingOnViewModel:true,initialViewModelData:bindingState.initialViewModelData};}}}else {return bindingState;}};var getEventBindingData=function(attributeName,el,scope){var bindingCode=attributeName.substr(onMatchStr.length);var viewModel=el&&el[viewModelSymbol$1];var elUsed=startsWith.call(bindingCode,elMatchStr);var vmUsed=startsWith.call(bindingCode,vmMatchStr);var byUsed=bindingCode.indexOf(byMatchStr)>-1;var scopeUsed;// The values being returned
var bindingContext;var eventName;var bindingContextObservable;var shortBindingCode="";// if explicit context is specified, trim the string down
// else, determine value of which scope being used elUsed, vmUsed, scopeUsed
if(vmUsed){shortBindingCode="vm";bindingCode=bindingCode.substr(vmMatchStr.length);}else if(elUsed){shortBindingCode="el";bindingCode=bindingCode.substr(elMatchStr.length);}else if(!vmUsed&&!elUsed){if(byUsed){scopeUsed=true;}else if(viewModel){vmUsed=true;}else {elUsed=true;}}// if by is used, take the appropriate path to determine the bindingContext
// and create the bindingKeyValue
var bindingContextKey;if(byUsed){var byIndex=bindingCode.indexOf(byMatchStr);bindingContextKey=bindingCode.substr(byIndex+byMatchStr.length);bindingCode=bindingCode.substr(0,byIndex);}eventName=bindingCode;if(elUsed){if(byUsed){throw new Error('binding with :by in element scope is not currently supported');}else {bindingContext=el;}}else if(vmUsed){bindingContext=viewModel;if(byUsed){bindingContext=viewModel.get(bindingContextKey);bindingContextObservable=new canViewScope_4_13_7_canViewScope(viewModel).computeData(bindingContextKey);}}else if(scopeUsed){bindingContext=scope;if(byUsed){bindingContext=bindingContext.get(bindingContextKey);bindingContextObservable=scope.computeData(bindingContextKey);}}return {// single observable object to listen to eventName directly on one observable object
bindingContext:bindingContext,// this observable emits the bindingContext
bindingContextObservable:bindingContextObservable,// the eventName string
eventName:eventName,// which binding code was explicitly set by the user
bindingCode:shortBindingCode};};var onKeyValueSymbol$5=canSymbol_1_7_0_canSymbol.for("can.onKeyValue");var makeScopeFromEvent=function(element,event,viewModel,args,data,bindingContext){// TODO: Remove in 6.0.  In 4 and 5 arguments were wrong.
var shiftArgumentsForLegacyArguments=bindingContext&&bindingContext[onKeyValueSymbol$5]!==undefined;var specialValues={element:element,event:event,viewModel:viewModel,arguments:shiftArgumentsForLegacyArguments?Array.prototype.slice.call(args,1):args,args:args};// make a scope with these things just under
return data.scope.add(specialValues,{special:true});};var runEventCallback=function(el,ev,data,scope,expr,attributeName,attrVal){// create "special" values that can be looked up using
// {{scope.element}}, etc
var updateFn=function(){var value=expr.value(scope,{doNotWrapInObservation:true});value=canReflect_1_19_2_canReflect.isValueLike(value)?canReflect_1_19_2_canReflect.getValue(value):value;return typeof value==='function'?value(el):value;};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(updateFn,"name",{value:attributeName+'="'+attrVal+'"'});}//!steal-remove-end
canQueues_1_3_2_canQueues.batch.start();var mutateQueueArgs=[];mutateQueueArgs=[updateFn,null,null,{}];//!steal-remove-start
if(process.env.NODE_ENV!=='production'){mutateQueueArgs=[updateFn,null,null,{reasonLog:[el,ev,attributeName+"="+attrVal]}];}//!steal-remove-end
canQueues_1_3_2_canQueues.mutateQueue.enqueue.apply(canQueues_1_3_2_canQueues.mutateQueue,mutateQueueArgs);canQueues_1_3_2_canQueues.batch.stop();};// ## Behaviors
var behaviors={// ## completeBindings
// Given a list of bindings, initializes the bindings, then the viewModel then completes the bindings.
// Arguments:
// - bindings  - An array of `{binding, siblingBindingData}`
// - initialViewModelData - Extra initial viewModel values
// - makeViewModel - `makeViewModel(props, hasBindings, bindingsState)`
// - bindingContext - optional, `{scope}`
// Returns:
// `{viewModel, onTeardowns, bindingsState}`
initializeViewModel:function(bindings,initialViewModelData,makeViewModel,bindingContext){var onCompleteBindings=[],onTeardowns={};var bindingsState={// if we have a binding like {something}="foo"
isSettingOnViewModel:false,// if we have binding like {this}="bar"
isSettingViewModel:false,initialViewModelData:initialViewModelData||{}};bindings.forEach(function(dataBinding){// Immediately bind to the parent so we can read its value
dataBinding.binding.startParent();var siblingBindingData=dataBinding.siblingBindingData;bindingsState=checkBindingState(bindingsState,siblingBindingData);// For bindings that change the viewModel,
// save the initial value on the viewModel.
if(siblingBindingData.parent.exports){var parentValue=siblingBindingData.child.setCompute?canViewScope_4_13_7_makeComputeLike(dataBinding.binding.parent):dataBinding.binding.parentValue;if(parentValue!==undefined){if(bindingsState.isSettingViewModel){// the initial data is the context
// TODO: this is covered by can-component’s tests but not can-stache-bindings’ tests
bindingsState.initialViewModelData=parentValue;}else {bindingsState.initialViewModelData[cleanVMName(siblingBindingData.child.name,bindingContext.scope)]=parentValue;}}}// Save what needs to happen after the `viewModel` is created.
onCompleteBindings.push(dataBinding.binding.start.bind(dataBinding.binding));onTeardowns[siblingBindingData.bindingAttributeName]=dataBinding.binding.stop.bind(dataBinding.binding);});var viewModel=makeViewModel(bindingsState.initialViewModelData,bindings.length>0,bindingsState);// bind on the viewModel so we can updat ethe parent
for(var i=0,len=onCompleteBindings.length;i<len;i++){onCompleteBindings[i]();}return {viewModel:viewModel,onTeardowns:onTeardowns,bindingsState:bindingsState};},// ### bindings.behaviors.viewModel
// Sets up all of an element's data binding attributes to a "soon-to-be-created"
// `viewModel`.
// This is primarily used by `Component` to ensure that its
// `viewModel` is initialized with values from the data bindings as quickly as possible.
// Component could look up the data binding values itself.  However, that lookup
// would have to be duplicated when the bindings are established.
// Instead, this uses the `makeDataBinding` helper, which allows creation of the `viewModel`
// after scope values have been looked up.
//
// Arguments:
// - `makeViewModel(initialViewModelData)` - a function that returns the `viewModel`.
// - `initialViewModelData` any initial data that should already be added to the `viewModel`.
//
// Returns:
// - `function` - a function that tears all the bindings down. Component
// wants all the bindings active so cleanup can be done during a component being removed.
viewModel:function(el,tagData,makeViewModel,initialViewModelData,options){if(typeof options==="boolean"){options={staticDataBindingsOnly:options};}else if(typeof options==="undefined"){options={};}var staticDataBindingsOnly=options.staticDataBindingsOnly;var makeDataBindingFn=options.makeDataBinding||makeDataBinding;var attributeViewModelBindings=canAssign_1_3_3_canAssign({},initialViewModelData),// The data around the binding.
bindingContext=canAssign_1_3_3_canAssign({element:el,// this gets defined later
viewModel:undefined},tagData),// global settings for the bindings
bindingSettings={attributeViewModelBindings:attributeViewModelBindings,alreadyUpdatedChild:true,// force viewModel bindings in cases when it is ambiguous whether you are binding
// on viewModel or an attribute (:to, :from, :bind)
favorViewModel:true,makeDataBinding:makeDataBindingFn,getSiblingBindingData:options.getSiblingBindingData||getSiblingBindingData},dataBindings=[];// For each attribute, we create a dataBinding object.
// These look like: `{binding, siblingBindingData}`
canReflect_1_19_2_canReflect.eachListLike(el.attributes||[],function(node){var dataBinding=makeDataBindingFn(node,bindingContext,bindingSettings);if(dataBinding){dataBindings.push(dataBinding);}});// If there are no binding, exit.
if(staticDataBindingsOnly&&dataBindings.length===0){return;}// Initialize the viewModel
var completedData=behaviors.initializeViewModel(dataBindings,initialViewModelData,function(){// we need to make sure we have the viewModel available
bindingContext.viewModel=makeViewModel.apply(this,arguments);},bindingContext),onTeardowns=completedData.onTeardowns,bindingsState=completedData.bindingsState,siblingBindingDatas={};// Listen to attribute changes and re-initialize
// the bindings.
var attributeDisposal;if(!bindingsState.isSettingViewModel){// We need to update the child on any new bindings.
bindingSettings.alreadyUpdatedChild=false;attributeDisposal=canDomMutate_2_0_9_canDomMutate.onNodeAttributeChange(el,function(ev){var attrName=ev.attributeName,value=el.getAttribute(attrName);if(onTeardowns[attrName]){onTeardowns[attrName]();}// Parent attribute bindings we always re-setup.
var parentBindingWasAttribute=siblingBindingDatas[attrName]&&siblingBindingDatas[attrName].parent.source===attributeBindingStr;if(value!==null||parentBindingWasAttribute){var dataBinding=makeDataBinding({name:attrName,value:value},bindingContext,bindingSettings);if(dataBinding){// The viewModel is created, so call callback immediately.
dataBinding.binding.start();siblingBindingDatas[attrName]=dataBinding.siblingBindingData;onTeardowns[attrName]=dataBinding.binding.stop.bind(dataBinding.binding);}}});}return function(){if(attributeDisposal){attributeDisposal();attributeDisposal=undefined;}for(var attrName in onTeardowns){onTeardowns[attrName]();}};},// ### bindings.behaviors.data
// This is called when an individual data binding attribute is placed on an element.
// For example `{^value}="name"`.
data:function(el,attrData){if(el[preventDataBindingsSymbol]===true||canDomData_1_0_3_canDomData.get(el,"preventDataBindings")){return;}var viewModel,getViewModel=canObservationRecorder_1_3_1_canObservationRecorder.ignore(function(){return viewModel||(viewModel=canViewModel_4_0_3_canViewModel(el));}),teardown,attributeDisposal,removedDisposal,bindingContext={element:el,templateType:attrData.templateType,scope:attrData.scope,parentNodeList:attrData.nodeList,get viewModel(){return getViewModel();}};// Setup binding
var dataBinding=makeDataBinding({name:attrData.attributeName,value:el.getAttribute(attrData.attributeName)},bindingContext,{syncChildWithParent:false,getSiblingBindingData:getSiblingBindingData});//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(dataBinding.siblingBindingData.child.source==="viewModel"&&!canDomData_1_0_3_canDomData.get(el,"viewModel")){dev.warn('This element does not have a viewModel. (Attempting to bind `'+dataBinding.siblingBindingData.bindingAttributeName+'="'+dataBinding.siblingBindingData.parent.name+'"`)');}}//!steal-remove-end
// Flag to prevent start binding twice in dev mode
var started=false;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(el.nodeName==='INPUT'){try{dataBinding.binding.start();started=true;}catch(error){throw new Error(error.message+' <input> elements always set properties to Strings.');}}}//!steal-remove-end
if(!started){dataBinding.binding.start();started=true;}var attributeListener=function(ev){var attrName=ev.attributeName,value=el.getAttribute(attrName);if(attrName===attrData.attributeName){if(teardown){teardown();}if(value!==null){var dataBinding=makeDataBinding({name:attrName,value:value},bindingContext,{syncChildWithParent:false,getSiblingBindingData:getSiblingBindingData});if(dataBinding){// The viewModel is created, so call callback immediately.
dataBinding.binding.start();teardown=dataBinding.binding.stop.bind(dataBinding.binding);}teardown=dataBinding.onTeardown;}}};var tearItAllDown=function(){if(teardown){teardown();teardown=undefined;}if(removedDisposal){removedDisposal();removedDisposal=undefined;}if(attributeDisposal){attributeDisposal();attributeDisposal=undefined;}};// Listen for changes
teardown=dataBinding.binding.stop.bind(dataBinding.binding);attributeDisposal=canDomMutate_2_0_9_canDomMutate.onNodeAttributeChange(el,attributeListener);removedDisposal=canDomMutate_2_0_9_canDomMutate.onNodeDisconnected(el,function(){var doc=el.ownerDocument;var ownerNode=doc.contains?doc:doc.documentElement;if(!ownerNode||ownerNode.contains(el)===false){tearItAllDown();}});},// ### bindings.behaviors.event
// The following section contains code for implementing the can-EVENT attribute.
// This binds on a wildcard attribute name. Whenever a view is being processed
// and can-xxx (anything starting with can-), this callback will be run.  Inside, its setting up an event handler
// that calls a method identified by the value of this attribute.
event:function(el,data){var eventBindingData;// Get the `event` name and if we are listening to the element or viewModel.
// The attribute name is the name of the event.
var attributeName=canAttributeEncoder_1_1_4_canAttributeEncoder.decode(data.attributeName),// the name of the event we are binding
event,// the context to which we bind the event listener
bindingContext,// if the bindingContext is null, then use this observable to watch for changes
bindingContextObservable;// check for `on:event:value:to` type things and call data bindings
if(attributeName.indexOf(toMatchStr+":")!==-1||attributeName.indexOf(fromMatchStr+":")!==-1||attributeName.indexOf(bindMatchStr+":")!==-1){return this.data(el,data);}if(startsWith.call(attributeName,onMatchStr)){eventBindingData=getEventBindingData(attributeName,el,data.scope);event=eventBindingData.eventName;bindingContext=eventBindingData.bindingContext;bindingContextObservable=eventBindingData.bindingContextObservable;//!steal-remove-start
if(process.env.NODE_ENV!=="production"){if(!eventBindingData.bindingCode&&el[viewModelSymbol$1]&&"on"+event in el){dev.warn("The "+event+" event is bound the view model for <"+el.tagName.toLowerCase()+">. Use "+attributeName.replace(onMatchStr,"on:el:")+" to bind to the element instead.");}}//!steal-remove-end
}else {throw new Error("can-stache-bindings - unsupported event bindings "+attributeName);}// This is the method that the event will initially trigger. It will look up the method by the string name
// passed in the attribute and call it.
var handler=function(ev){var attrVal=el.getAttribute(canAttributeEncoder_1_1_4_canAttributeEncoder.encode(attributeName));if(!attrVal){return;}var viewModel=el[viewModelSymbol$1];// expression.parse will read the attribute
// value and parse it identically to how mustache helpers
// get parsed.
var expr=expression_1.parse(attrVal,{lookupRule:function(){return expression_1.Lookup;},methodRule:"call"});var runScope=makeScopeFromEvent(el,ev,viewModel,arguments,data,bindingContext);if(expr instanceof expression_1.Hashes){var hashExprs=expr.hashExprs;var key=Object.keys(hashExprs)[0];var value=expr.hashExprs[key].value(runScope);var isObservableValue=canReflect_1_19_2_canReflect.isObservableLike(value)&&canReflect_1_19_2_canReflect.isValueLike(value);runScope.set(key,isObservableValue?canReflect_1_19_2_canReflect.getValue(value):value);}else if(expr instanceof expression_1.Call){runEventCallback(el,ev,data,runScope,expr,attributeName,attrVal);}else {throw new Error("can-stache-bindings: Event bindings must be a call expression. Make sure you have a () in "+data.attributeName+"="+JSON.stringify(attrVal));}};var attributesDisposal,removalDisposal,removeObservation,currentContext;// Unbind the event when the attribute is removed from the DOM
var attributesHandler=function(ev){var isEventAttribute=ev.attributeName===attributeName;var isRemoved=!el.getAttribute(attributeName);var isEventAttributeRemoved=isEventAttribute&&isRemoved;if(isEventAttributeRemoved){unbindEvent();}};var removalHandler=function(){var doc=el.ownerDocument;var ownerNode=doc.contains?doc:doc.documentElement;if(!ownerNode||!ownerNode.contains(el)){unbindEvent();}};var unbindEvent=function(){if(bindingContext){map$1.off.call(bindingContext,event,handler);}if(attributesDisposal){attributesDisposal();attributesDisposal=undefined;}if(removalDisposal){removalDisposal();removalDisposal=undefined;}if(removeObservation){removeObservation();removeObservation=undefined;}};function updateListener(newVal,oldVal){if(oldVal){map$1.off.call(oldVal,event,handler);}if(newVal){map$1.on.call(newVal,event,handler);currentContext=newVal;}}// Bind the handler defined above to the element we're currently processing and the event name provided in this
// attribute name (can-click="foo")
attributesDisposal=canDomMutate_2_0_9_canDomMutate.onNodeAttributeChange(el,attributesHandler);removalDisposal=canDomMutate_2_0_9_canDomMutate.onNodeDisconnected(el,removalHandler);if(!bindingContext&&bindingContextObservable){// on value changes of the observation, rebind the listener to the new context
removeObservation=function(){if(currentContext){map$1.off.call(currentContext,event,handler);}canReflect_1_19_2_canReflect.offValue(bindingContextObservable,updateListener);};canReflect_1_19_2_canReflect.onValue(bindingContextObservable,updateListener);}else {try{map$1.on.call(bindingContext,event,handler);}catch(error){if(/Unable to bind/.test(error.message)){var msg='can-stache-bindings - Unable to bind "'+event+'"';msg+=': "'+event+'" is a property on a plain object "';msg+=JSON.stringify(bindingContext);msg+='". Binding is available with observable objects only.';msg+=' For more details check https://canjs.com/doc/can-stache-bindings.html#Callafunctionwhenaneventhappensonavalueinthescope_animation_';throw new Error(msg);}else {throw error;}}}}};// ## Attribute Syntaxes
// The following sets up the bindings functions to be called
// when called in a template.
// value:to="bar" data bindings
// these are separate so that they only capture at the end
// to avoid (toggle)="bar" which is encoded as :lp:toggle:rp:="bar"
bindings.set(/[\w\.:]+:to$/,behaviors.data);bindings.set(/[\w\.:]+:from$/,behaviors.data);bindings.set(/[\w\.:]+:bind$/,behaviors.data);bindings.set(/[\w\.:]+:raw$/,behaviors.data);// value:to:on:input="bar" data bindings
bindings.set(/[\w\.:]+:to:on:[\w\.:]+/,behaviors.data);bindings.set(/[\w\.:]+:from:on:[\w\.:]+/,behaviors.data);bindings.set(/[\w\.:]+:bind:on:[\w\.:]+/,behaviors.data);// `(EVENT)` event bindings.
bindings.set(/on:[\w\.:]+/,behaviors.event);// ## getObservableFrom
// An object of helper functions that make a getter/setter observable
// on different types of objects.
var getObservableFrom={// ### getObservableFrom.viewModelOrAttribute
viewModelOrAttribute:function(bindingData,bindingContext){var viewModel=bindingContext.element[viewModelSymbol$1];// if we have a viewModel, use it; otherwise, setup attribute binding
if(viewModel){return this.viewModel.apply(this,arguments);}else {return this.attribute.apply(this,arguments);}},// ### getObservableFrom.scope
// Returns a compute from the scope.  This handles expressions like `someMethod(.,1)`.
scope:function(bindingData,bindingContext){var scope=bindingContext.scope,scopeProp=bindingData.name,mustBeGettable=bindingData.exports;if(!scopeProp){return new canSimpleObservable_2_5_0_canSimpleObservable();}else {// Check if we need to spend time building a scope-key-data
// If we have a '(', it likely means a call expression.
if(mustBeGettable||scopeProp.indexOf("(")>=0||scopeProp.indexOf("=")>=0){var parentExpression=expression_1.parse(scopeProp,{baseMethodType:"Call"});if(parentExpression instanceof expression_1.Hashes){return new canSimpleObservable_2_5_0_canSimpleObservable(function(){var hashExprs=parentExpression.hashExprs;var key=Object.keys(hashExprs)[0];var value=parentExpression.hashExprs[key].value(scope);var isObservableValue=canReflect_1_19_2_canReflect.isObservableLike(value)&&canReflect_1_19_2_canReflect.isValueLike(value);scope.set(key,isObservableValue?canReflect_1_19_2_canReflect.getValue(value):value);});}else {return parentExpression.value(scope);}}else {var observation={};canReflect_1_19_2_canReflect.assignSymbols(observation,{"can.getValue":function getValue(){},"can.valueHasDependencies":function hasValueDependencies(){return false;},"can.setValue":function setValue(newVal){var expr=expression_1.parse(cleanVMName(scopeProp,scope),{baseMethodType:"Call"});var value=expr.value(scope);canReflect_1_19_2_canReflect.setValue(value,newVal);},// Register what the custom observation changes
"can.getWhatIChange":function getWhatIChange(){var data=scope.getDataForScopeSet(cleanVMName(scopeProp,scope));var m=new Map();var s=new Set();s.add(data.key);m.set(data.parent,s);return {mutate:{keyDependencies:m}};},"can.getName":function getName(){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var result="ObservableFromScope<>";var data=scope.getDataForScopeSet(cleanVMName(scopeProp,scope));if(data.parent&&data.key){result="ObservableFromScope<"+canReflect_1_19_2_canReflect.getName(data.parent)+"."+data.key+">";}return result;}//!steal-remove-end
}});var data=scope.getDataForScopeSet(cleanVMName(scopeProp,scope));if(data.parent&&data.key){// Register what changes the Scope's parent key
canReflectDependencies_1_1_2_canReflectDependencies.addMutatedBy(data.parent,data.key,observation);}return observation;}}},// ### getObservableFrom.viewModel
// Returns a compute that's two-way bound to the `viewModel` returned by
// `options.bindingSettings()`.
// Arguments:
// - bindingData - {source, name, setCompute}
// - bindingContext - {scope, element}
// - bindingSettings - {getViewModel}
viewModel:function(bindingData,bindingContext){var scope=bindingContext.scope,vmName=bindingData.name,setCompute=bindingData.setCompute;var setName=cleanVMName(vmName,scope);var isBoundToContext=vmName==="."||vmName==="this";var keysToRead=isBoundToContext?[]:canStacheKey_1_4_3_canStacheKey.reads(vmName);function getViewModelProperty(){var viewModel=bindingContext.viewModel;return canStacheKey_1_4_3_canStacheKey.read(viewModel,keysToRead,{}).value;}//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(getViewModelProperty,"name",{value:"<"+bindingContext.element.tagName.toLowerCase()+">."+vmName});}//!steal-remove-end
var observation=new setter(getViewModelProperty,function setViewModelProperty(newVal){var viewModel=bindingContext.viewModel;if(setCompute){// If there is a binding like `foo:from="~bar"`, we need
// to set the observable itself.
var oldValue=canReflect_1_19_2_canReflect.getKeyValue(viewModel,setName);if(canReflect_1_19_2_canReflect.isObservableLike(oldValue)){canReflect_1_19_2_canReflect.setValue(oldValue,newVal);}else {canReflect_1_19_2_canReflect.setKeyValue(viewModel,setName,new canSimpleObservable_2_5_0_canSimpleObservable(canReflect_1_19_2_canReflect.getValue(newVal)));}}else {if(isBoundToContext){canReflect_1_19_2_canReflect.setValue(viewModel,newVal);}else {canStacheKey_1_4_3_canStacheKey.write(viewModel,keysToRead,newVal);}}});//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var viewModel=bindingContext.viewModel;if(viewModel&&setName){canReflectDependencies_1_1_2_canReflectDependencies.addMutatedBy(viewModel,setName,observation);}}//!steal-remove-end
return observation;},// ### getObservableFrom.attribute
// Returns a compute that is two-way bound to an attribute or property on the element.
attribute:function(bindingData,bindingContext){if(bindingData.name==="this"){return canReflect_1_19_2_canReflect.assignSymbols({},{"can.getValue":function(){return bindingContext.element;},"can.valueHasDependencies":function(){return false;},"can.getName":function getName(){//!steal-remove-start
return "<"+bindingContext.element.nodeName+">";//!steal-remove-end
}});}else {return new canAttributeObservable_2_0_2_canAttributeObservable(bindingContext.element,bindingData.name,{},bindingData.event);}}};var startsWith=String.prototype.startsWith||function(text){return this.indexOf(text)===0;};// Gets an event name in the after part.
function getEventName(result){if(result.special.on!==undefined){return result.tokens[result.special.on+1];}}var siblingBindingRules={to:{child:{exports:true,syncSibling:false},parent:{exports:false,syncSibling:false}},from:{child:{exports:false,syncSibling:false},parent:{exports:true,syncSibling:false}},bind:{child:{exports:true,syncSibling:false},parent:{exports:true,syncSibling:true}},raw:{child:{exports:false,syncSibling:false},parent:{exports:true,syncSibling:false}}};var bindingNames=[];var special$1={vm:true,on:true};canReflect_1_19_2_canReflect.eachKey(siblingBindingRules,function(value,key){bindingNames.push(key);special$1[key]=true;});// "on:click:value:to" //-> {tokens: [...], special: {on: 0, to: 3}}
function tokenize(source){var splitByColon=source.split(":");// combine tokens that are not to, from, vm,
var result={tokens:[],special:{}};splitByColon.forEach(function(token){if(special$1[token]){result.special[token]=result.tokens.push(token)-1;}else {result.tokens.push(token);}});return result;}// ## getChildBindingStr
var getChildBindingStr=function(tokens,favorViewModel){if(tokens.indexOf('vm')>=0){return viewModelBindingStr;}else if(tokens.indexOf('el')>=0){return attributeBindingStr;}else {return favorViewModel?viewModelBindingStr:viewModelOrAttributeBindingStr;}};// ## getSiblingBindingData
// Returns information about the binding read from an attribute node.
// Arguments:
// - node - An attribute node like: `{name, value}`
// - bindingSettings - Optional.  Has {favorViewModel: Boolean}
// Returns an object with:
// - `parent` - {source, name, event, exports, syncSibling}
// - `child` - {source, name, event, exports, syncSibling, setCompute}
// - `bindingAttributeName` - debugging name.
// - `initializeValues` - should parent and child be initialized to their counterpart.
//
// `parent` and `child` properties:
//
// - `source` - where is the value read from: "scope", "attribute", "viewModel".
// - `name` - the name of the property that should be read
// - `event` - an optional event name to listen to
// - `exports` - if the value is exported to its sibling
// - `syncSibling` - if the value is sticky. When this value is updated, should the value be checked after
//   and its sibling be updated immediately.
// - `setCompute` - set the value to a compute.
function getSiblingBindingData(node,bindingSettings){var siblingBindingData,attributeName=canAttributeEncoder_1_1_4_canAttributeEncoder.decode(node.name),attributeValue=node.value||"";var result=tokenize(attributeName),dataBindingName,specialIndex;// check if there's a match of a binding name with at least a value before it
bindingNames.forEach(function(name){if(result.special[name]!==undefined&&result.special[name]>0){dataBindingName=name;specialIndex=result.special[name];return false;}});if(dataBindingName){var childEventName=getEventName(result);var initializeValues=childEventName&&dataBindingName!=="bind"?false:true;siblingBindingData={parent:canAssign_1_3_3_canAssign({source:scopeBindingStr,name:result.special.raw?'"'+attributeValue+'"':attributeValue},siblingBindingRules[dataBindingName].parent),child:canAssign_1_3_3_canAssign({source:getChildBindingStr(result.tokens,bindingSettings&&bindingSettings.favorViewModel),name:result.tokens[specialIndex-1],event:childEventName},siblingBindingRules[dataBindingName].child),bindingAttributeName:attributeName,initializeValues:initializeValues};if(attributeValue.trim().charAt(0)==="~"){siblingBindingData.child.setCompute=true;}return siblingBindingData;}}// ## makeDataBinding
// Makes a data binding for an attribute `node`.  Returns an object with information
// about the binding, including an `onTeardown` method that undoes the binding.
// If the data binding involves a `viewModel`, an `onCompleteBinding` method is returned on
// the object.  This method must be called after the element has a `viewModel` with the
// `viewModel` to complete the binding.
//
// Arguments:
// - `node` - an attribute node or an object with a `name` and `value` property.
// - `bindingContext` - The stache context  `{scope, element, parentNodeList}`
// - `bindingSettings` - Settings to control the behavior.
//   - `getViewModel`  - a function that returns the `viewModel` when called.  This function can be passed around (not called) even if the
//      `viewModel` doesn't exist yet.
//   - `attributeViewModelBindings` - properties already specified as being a viewModel<->attribute (as opposed to viewModel<->scope) binding.
//   - `favorViewModel`
//   - `alreadyUpdatedChild`
// Returns:
// - `undefined` - If this isn't a data binding.
// - `object` - An object with information about the binding:
//   - siblingBindingData: the binding behavior
//   - binding: canBinding
var makeDataBinding=function(node,bindingContext,bindingSettings){// Get information about the binding.
var siblingBindingData=bindingSettings.getSiblingBindingData(node,bindingSettings);if(!siblingBindingData){return;}// Get computes for the parent and child binding
var parentObservable=getObservableFrom[siblingBindingData.parent.source](siblingBindingData.parent,bindingContext,bindingSettings),childObservable=getObservableFrom[siblingBindingData.child.source](siblingBindingData.child,bindingContext,bindingSettings,parentObservable);var childToParent=!!siblingBindingData.child.exports;var parentToChild=!!siblingBindingData.parent.exports;// Check for child:bind="~parent" (it’s not supported because it’s unclear
// what the “right” behavior should be)
//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(siblingBindingData.child.setCompute&&childToParent&&parentToChild){dev.warn("Two-way binding computes is not supported.");}}//!steal-remove-end
var bindingOptions={child:childObservable,childToParent:childToParent,// allow cycles if one directional
cycles:childToParent===true&&parentToChild===true?0:100,onInitDoNotUpdateChild:bindingSettings.alreadyUpdatedChild||siblingBindingData.initializeValues===false,onInitDoNotUpdateParent:siblingBindingData.initializeValues===false,onInitSetUndefinedParentIfChildIsDefined:true,parent:parentObservable,parentToChild:parentToChild,priority:bindingContext.parentNodeList?bindingContext.parentNodeList.nesting+1:undefined,queue:"dom",sticky:siblingBindingData.parent.syncSibling?"childSticksToParent":undefined,element:bindingContext.element};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var nodeHTML=canAttributeEncoder_1_1_4_canAttributeEncoder.decode(node.name)+"="+JSON.stringify(node.value);var tagStart="<"+bindingContext.element.nodeName.toLowerCase(),tag=tagStart+">";var makeUpdateName=function(child,childName){if(child==="viewModel"){return tag+"."+childName;}else if(child==="scope"){return "{{"+childName+"}}";}else {return ""+child+"."+childName;}};bindingOptions.debugName=tagStart+" "+nodeHTML+">";bindingOptions.updateChildName=bindingOptions.debugName+" updates "+makeUpdateName(siblingBindingData.child.source,siblingBindingData.child.name)+" from "+makeUpdateName(siblingBindingData.parent.source,siblingBindingData.parent.name);bindingOptions.updateParentName=bindingOptions.debugName+" updates "+makeUpdateName(siblingBindingData.parent.source,siblingBindingData.parent.name)+" from "+makeUpdateName(siblingBindingData.child.source,siblingBindingData.child.name);}//!steal-remove-end
// Create the binding
var canBinding=new canBind_1_5_1_canBind(bindingOptions);return {siblingBindingData:siblingBindingData,binding:canBinding};};var cleanVMName=function(name,scope){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(name.indexOf("@")>=0&&scope){var filename=scope.peek('scope.filename');var lineNumber=scope.peek('scope.lineNumber');dev.warn((filename?filename+':':'')+(lineNumber?lineNumber+': ':'')+'functions are no longer called by default so @ is unnecessary in \''+name+'\'.');}}//!steal-remove-end
return name.replace(/@/g,"");};var canStacheBindings={behaviors:behaviors,getSiblingBindingData:getSiblingBindingData,bindings:bindings,getObservableFrom:getObservableFrom,makeDataBinding:makeDataBinding};canStacheBindings[canSymbol_1_7_0_canSymbol.for("can.callbackMap")]=bindings;var canStacheBindings_5_0_5_canStacheBindings=canStacheBindings;const rendererSymbol=Symbol.for("can.stacheRenderer");const viewInsertSymbol$2=Symbol.for("can.viewInsert");// make bindings work
canStache_5_1_1_canStache.addBindings(canStacheBindings_5_0_5_canStacheBindings);var mixinStacheView=function mixinStacheView(Base=HTMLElement){class StacheClass extends Base{render(props,renderOptions){if(super.render){super.render(props);}// cache renderer function so `stache(...)` is only called
// for the first instance of each StacheElement constructor
let renderer=this.constructor[rendererSymbol];if(!renderer){const view=this.constructor.view;const viewName=canReflect_1_19_2_canReflect.getName(this.constructor)+"View";renderer=typeof view==="function"?view:canStache_5_1_1_canStache(viewName,view||"");this.constructor[rendererSymbol]=renderer;}const frag=renderer(new canViewScope_4_13_7_canViewScope(this,null,{viewModel:true}),renderOptions);const viewRoot=this.viewRoot||this;canDomMutate_2_0_9_node.appendChild.call(viewRoot,frag);}connect(){if(super.connect){super.connect();}const removedDisposal=canDomMutate_2_0_9_canDomMutate.onNodeRemoved(this,()=>{var doc=this.ownerDocument;var rootNode=doc.contains?doc:doc.documentElement;if(!rootNode||!rootNode.contains(this)){removedDisposal();this.disconnect();}});}[viewInsertSymbol$2](){return this;}}StacheClass.prototype[Symbol.for("can.preventDataBindings")]=true;return StacheClass;};const viewModelSymbol$2=Symbol.for("can.viewModel");var mixinViewmodelSymbol=function mixinViewModelSymbol(BaseClass=HTMLElement){class ViewModelClass extends BaseClass{}// can-stache-bindings uses viewModel symbol
canDefineLazyValue_1_1_1_defineLazyValue(ViewModelClass.prototype,viewModelSymbol$2,function(){return this;});return ViewModelClass;};const getValueSymbol$3=Symbol.for("can.getValue");const setValueSymbol$4=Symbol.for("can.setValue");const metaSymbol$7=Symbol.for("can.meta");var mixinBindings=function mixinBindings(Base=HTMLElement){return class BindingsClass extends Base{bindings(bindings){if(this[metaSymbol$7]===undefined){this[metaSymbol$7]={};}const bindingsObservables={};canReflect_1_19_2_canReflect.eachKey(bindings,(parent,propName)=>{// Create an observable for reading/writing the viewModel
// even though it doesn't exist yet.
const child=key(this,propName);bindingsObservables[propName]={parent,child};});this[metaSymbol$7]._connectedBindings=bindingsObservables;return this;}initialize(props){var savedBindings=this[metaSymbol$7]&&this[metaSymbol$7]._connectedBindings;if(savedBindings){props=props||{};if(this[metaSymbol$7]._bindings===undefined){this[metaSymbol$7]._bindings=[];}canReflect_1_19_2_canReflect.eachKey(savedBindings,(binding,propName)=>{const{child,parent}=binding;var canGetParentValue=parent!=null&&!!parent[getValueSymbol$3];var canSetParentValue=parent!=null&&!!parent[setValueSymbol$4];// If we can get or set the value, then we’ll create a binding
if(canGetParentValue||canSetParentValue){// Create the binding similar to what’s in can-stache-bindings
var canBinding=new canBind_1_5_1_canBind({child:child,parent:parent,queue:"dom",element:this,//!steal-remove-start
// For debugging: the names that will be assigned to the updateChild
// and updateParent functions within can-bind
updateChildName:"update <"+this.nodeName.toLowerCase()+">."+propName,updateParentName:"update "+canReflect_1_19_2_canReflect.getName(parent)+" from <"+this.nodeName.toLowerCase()+">."+propName//!steal-remove-end
});this[metaSymbol$7]._bindings.push({binding:canBinding,siblingBindingData:{parent:{source:"scope",exports:canGetParentValue},child:{source:"viewModel",exports:canSetParentValue,name:propName},bindingAttributeName:propName}});}else {// Can’t get or set the value, so assume it’s not an observable
props[propName]=parent;}});this[metaSymbol$7].other=true;}if(super.initialize){super.initialize(props);}}render(props,renderOptions){const viewRoot=this.viewRoot||this;viewRoot.innerHTML="";if(super.render){super.render(props,renderOptions);}}disconnect(){delete this[metaSymbol$7]._bindings;if(super.disconnect){super.disconnect();}}};};const metaSymbol$8=Symbol.for("can.meta");const inSetupSymbol$5=Symbol.for("can.initializing");var mixinInitializeBindings=function mixinBindings(Base=HTMLElement){return class InitializeBindingsClass extends Base{initialize(props){var bindings=this[metaSymbol$8]&&this[metaSymbol$8]._bindings;if(bindings&&bindings.length){// set inSetup to false so that observations read in `initializeViewModel`
// correctly set up bindings
const origInSetup=this[inSetupSymbol$5];this[inSetupSymbol$5]=false;const bindingContext={element:this};// Initialize the viewModel.  Make sure you
// save it so the observables can access it.
var initializeData=canStacheBindings_5_0_5_canStacheBindings.behaviors.initializeViewModel(bindings,props,properties=>{super.initialize(properties);return this;},bindingContext);this[metaSymbol$8]._connectedBindingsTeardown=function(){for(var attrName in initializeData.onTeardowns){initializeData.onTeardowns[attrName]();}};// restore inSetup to the original value
this[inSetupSymbol$5]=origInSetup;}else {if(super.initialize){super.initialize(props);}}}disconnect(){if(this[metaSymbol$8]&&this[metaSymbol$8]._connectedBindingsTeardown){this[metaSymbol$8]._connectedBindingsTeardown();this[metaSymbol$8]._connectedBindingsTeardown=null;}if(super.disconnect){super.disconnect();}}};};const{mixins:mixins$6}=mixins;const metaSymbol$9=Symbol.for("can.meta");// `attributeChangedCallback` cannot be overwritten so we need to create a named
// function to check if we have had a `attributeChangedCallback` set.
function baseAttributeChangedCallback(){/* jshint validthis: true */if(this.attributeChangedCallback!==baseAttributeChangedCallback){// `this.attributeChangedCallback` is being set up within `can-observable-bindings`
this.attributeChangedCallback.apply(this,arguments);}}var mixinBindBehaviour=function mixinBindBehaviour(Base=HTMLElement){class BindingPropsClass extends Base{initialize(props){if(this[metaSymbol$9]===undefined){this[metaSymbol$9]={};}if(this[metaSymbol$9]._bindings===undefined){this[metaSymbol$9]._bindings=[];}// `_uninitializedBindings` are being set within `observedAttributes` which creates the bindings
Object.keys(this.constructor[metaSymbol$9]._uninitializedBindings).forEach(propName=>{const binding=this.constructor[metaSymbol$9]._uninitializedBindings[propName](this);// Add bindings to the instance `metaSymbol` to be set up during `mixin-initialize-bindings`
this[metaSymbol$9]._bindings.push({binding,siblingBindingData:{parent:{source:"scope",exports:true},child:{source:"viewModel",exports:true,name:propName},bindingAttributeName:propName}});});if(super.initialize){super.initialize(props);}}}// To prevent inifinite loop, use a named function so we can differentiate
// make it writable so it can be set elsewhere  
Object.defineProperty(BindingPropsClass.prototype,'attributeChangedCallback',{value:baseAttributeChangedCallback,writable:true});return BindingPropsClass;};// We can't set `observedAttributes` on the `StacheElement.prototype` as static properties are
// not copied over with `Object.create`
var initializeObservedAttributes=function initializeObservedAttributes(ctr){Object.defineProperty(ctr,'observedAttributes',{get(){// We only want to return `observedAttributes` if we have a `bind` on the
// property definition
let hasBindDefinition=false;// Run finalizeClass to set up the property definitions
mixins$6.finalizeClass(this);if(this[metaSymbol$9]===undefined){this[metaSymbol$9]={};}if(this[metaSymbol$9]._uninitializedBindings===undefined){this[metaSymbol$9]._uninitializedBindings={};}// Check that we have property definitions
const definitions=this.prototype._define&&this.prototype._define.definitions;if(definitions){// Run through all defitions so we can check if they have a `bind` function
Object.keys(definitions).forEach(propName=>{const definition=definitions[propName];if(typeof definition.bind==='function'){const bindFn=definition.bind(propName,this);// Set up the bindings so that they can be called during initialize
// to setup binding starts
this[metaSymbol$9]._uninitializedBindings[propName]=bindFn;hasBindDefinition=true;}});}// Only return `this.observedAttributes` if we have binds otherwise
// we create an inifinite loop
return hasBindDefinition?this.observedAttributes:[];}});};mixinBindBehaviour.initializeObservedAttributes=initializeObservedAttributes;const{initializeObservedAttributes:initializeObservedAttributes$1}=mixinBindBehaviour;const{createConstructorFunction:createConstructorFunction$3}=mixins;const initializeSymbol=Symbol.for("can.initialize");const teardownHandlersSymbol$1=Symbol.for("can.teardownHandlers");const isViewSymbol$3=Symbol.for("can.isView");// Calling a renderer like {{foo()}} gets the template scope
// added no matter what. This checks for that condition.
// https://github.com/canjs/can-stache/issues/719
function rendererWasCalledWithData(scope){return scope instanceof canViewScope_4_13_7_canViewScope&&scope._parent&&scope._parent._context instanceof canViewScope_4_13_7_canViewScope.TemplateContext;}function addContext(rawRenderer,tagData){function renderer(data){if(rendererWasCalledWithData(data)){return rawRenderer(tagData.scope.addLetContext(data._context));}else {// if it was called programmatically (not in stache), just add the data
return rawRenderer(tagData.scope.addLetContext(data));}}// Marking as a view will add the template scope ... but it should
// already be present in `tagData.scope`.
// However, I mark this as a renderer because that is what it is.
renderer[isViewSymbol$3]=true;return renderer;}function DeriveElement(BaseElement=HTMLElement){class StacheElement extends// add lifecycle methods
// this needs to happen after other mixins that implement these methods
// so that this.<lifecycleMethod> is the actual lifecycle method which
// controls whether the methods farther "down" the chain are called
mixinLifecycleMethods(// mixin .bindings() method and behavior
mixinBindings(// Find all prop definitions and extract `{ bind: () => {} }` for binding initialization
mixinBindBehaviour(// Initialize the bindings
mixinInitializeBindings(// mix in viewModel symbol used by can-stache-bindings
mixinViewmodelSymbol(// mix in stache renderer from `static view` property
mixinStacheView(// add getters/setters from `static props` property
mixinProps(BaseElement))))))){[initializeSymbol](el,tagData){const teardownBindings=canStacheBindings_5_0_5_canStacheBindings.behaviors.viewModel(el,tagData,function makeViewModel(initialViewmodelData){for(let prop in tagData.templates){// It's ok to modify the argument. The argument is created
// just for what gets passed into creating the VM.
initialViewmodelData[prop]=addContext(tagData.templates[prop],tagData);}el.render(initialViewmodelData);return el;});if(el[teardownHandlersSymbol$1]){el[teardownHandlersSymbol$1].push(teardownBindings);}}}const StacheElementConstructorFunction=createConstructorFunction$3(StacheElement);// Initialize the `observedAttributes`
initializeObservedAttributes$1(StacheElementConstructorFunction);return StacheElementConstructorFunction;}var canStacheElement=canNamespace_1_0_0_canNamespace.StacheElement=DeriveElement();var Compute$1=function(newVal){if(arguments.length){return canReflect_1_19_2_canReflect.setValue(this,newVal);}else {return canReflect_1_19_2_canReflect.getValue(this);}};var translationHelpers=new WeakMap();var makeCompute=function(observable){var compute=Compute$1.bind(observable);compute.on=compute.bind=compute.addEventListener=function(event,handler){var translationHandler=translationHelpers.get(handler);if(!translationHandler){translationHandler=function(newVal,oldVal){handler.call(compute,{type:"change"},newVal,oldVal);};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(translationHandler,"name",{value:"translationHandler("+event+")::"+canReflect_1_19_2_canReflect.getName(observable)+".onValue("+canReflect_1_19_2_canReflect.getName(handler)+")"});}//!steal-remove-end
translationHelpers.set(handler,translationHandler);}canReflect_1_19_2_canReflect.onValue(observable,translationHandler);};compute.off=compute.unbind=compute.removeEventListener=function(event,handler){canReflect_1_19_2_canReflect.offValue(observable,translationHelpers.get(handler));};canReflect_1_19_2_canReflect.assignSymbols(compute,{"can.getValue":function(){return canReflect_1_19_2_canReflect.getValue(observable);},"can.setValue":function(newVal){return canReflect_1_19_2_canReflect.setValue(observable,newVal);},"can.onValue":function(handler,queue){return canReflect_1_19_2_canReflect.onValue(observable,handler,queue);},"can.offValue":function(handler,queue){return canReflect_1_19_2_canReflect.offValue(observable,handler,queue);},"can.valueHasDependencies":function(){return canReflect_1_19_2_canReflect.valueHasDependencies(observable);},"can.getPriority":function(){return canReflect_1_19_2_canReflect.getPriority(observable);},"can.setPriority":function(newPriority){canReflect_1_19_2_canReflect.setPriority(observable,newPriority);},"can.isValueLike":true,"can.isFunctionLike":false});compute.isComputed=true;return compute;};// # String Coercion Helper Functions
// ## stringify
// Converts an object, array, Map or List to a string.
// It attempts the following flow to convert to a string:
// if `obj` is an object:
//   - call `.serialize` on `obj`, if available
//   - shallow copy `obj` using `.slice` or `can-reflect.assign`
//   - convert each proprety to a string recursively
// else
//   - call `.toString` on `obj`, if available.
function stringify$1(obj){if(obj&&typeof obj==="object"){if("serialize"in obj){obj=obj.serialize();// Get array from array-like or shallow-copy object.
}else if(typeof obj.slice==="function"){obj=obj.slice();}else {canReflect_1_19_2_canReflect.assign({},obj);}// Convert each object property or array item into a string.
canReflect_1_19_2_canReflect.eachKey(obj,function(val,prop){obj[prop]=stringify$1(val);});// If `obj` supports `.toString` call it.
}else if(obj!==undefined&&obj!==null&&typeof obj.toString==="function"){obj=obj.toString();}return obj;}// ## stringCoercingMapDecorator
// Coercies the arguments of `can-map.attr` to strings.
// everything in the backing Map is a string
// add type coercion during Map setter to coerce all values to strings so unexpected conflicts don't happen.
// https://github.com/canjs/canjs/issues/2206
// A proposal to change this behavior is currently open:
// https://github.com/canjs/can-route/issues/125
function stringCoercingMapDecorator(map){var decoratorSymbol=canSymbol_1_7_0_canSymbol.for("can.route.stringCoercingMapDecorator");if(!map.attr[decoratorSymbol]){var attrUndecoratedFunction=map.attr;map.attr=function(key){var serializable=typeof key==="string"&&(this.define===undefined||this.define[key]===undefined||!!this.define[key].serialize),args;if(serializable){// if setting non-str non-num attr
args=stringify$1(Array.apply(null,arguments));}else {args=arguments;}return attrUndecoratedFunction.apply(this,args);};canReflect_1_19_2_canReflect.setKeyValue(map.attr,decoratorSymbol,true);}return map;}var stringCoercingMapDecorator_1=stringCoercingMapDecorator;var stringify_1=stringify$1;var stringCoercion={stringCoercingMapDecorator:stringCoercingMapDecorator_1,stringify:stringify_1};var stringify$1$1=stringCoercion.stringify;var Stringify={};Stringify[canSymbol_1_7_0_canSymbol.for("can.new")]=function(value){return stringify$1$1(value);};Stringify[canSymbol_1_7_0_canSymbol.for("can.isMember")]=function(value){return typeof value==="string";};class RouteData extends canObservableObject{static get propertyDefaults(){return {type:Stringify};}}var routedata=RouteData;var urlDataObservable=new canSimpleObservable_2_5_0_canSimpleObservable(null);canReflect_1_19_2_canReflect.setName(urlDataObservable,"route.urlData");var bindingProxy={defaultBinding:null,urlDataObservable:urlDataObservable,bindings:{},call:function(){var args=canReflect_1_19_2_canReflect.toArray(arguments),prop=args.shift(),binding=urlDataObservable.value;if(binding===null){throw new Error("there is no current binding!!!");}var method=binding[prop.indexOf("can.")===0?canSymbol_1_7_0_canSymbol.for(prop):prop];if(method.apply){return method.apply(binding,args);}else {return method;}}};var bindingProxy_1=bindingProxy;var regexps={curlies:/\{\s*([\w.]+)\s*\}/g,colon:/\:([\w.]+)/g};/**
 * @module {function} can-diff/map/map
 * @parent can-diff
 *
 * @description Return a difference of two maps or objects.
 *
 * @signature `diffMap(oldObject, newObject)`
 *
 * Find the differences between two objects, based on properties and values.
 *
 * ```js
 * var diffObject = require("can-diff/map/map");
 *
 * diffMap({a: 1, b: 2}, {b: 3, c: 4})) // ->
 *   [{key: "a", type: "remove"},
 *    {key: "b", type: "set": value: 3},
 *    {key: "c", type: "add", "value": 4}]
 * ```
 *
 * @param {Object} oldObject The object to diff from.
 * @param {Object} newObject The object to diff to.
 * @return {Array} An array of object-[can-symbol/types/Patch patch] objects
 *
 * The object-patch object format has the following keys:
 * - **type**:  the type of operation on this property: add, remove, or set
 * - **key**:   the mutated property on the new object
 * - **value**: the new value (if type is "add" or "set")
 *
 */var map$2=function(oldObject,newObject){var oldObjectClone,patches=[];// clone oldObject so properties can be deleted
oldObjectClone=canReflect_1_19_2_canReflect.assignMap({},oldObject);canReflect_1_19_2_canReflect.eachKey(newObject,function(value,newProp){// look for added properties
if(!oldObject||!oldObject.hasOwnProperty(newProp)){patches.push({key:newProp,type:'add',value:value});// look for changed properties
}else if(newObject[newProp]!==oldObject[newProp]){patches.push({key:newProp,type:'set',value:value});}// delete properties found in newObject
// so we can find removed properties
delete oldObjectClone[newProp];});// loop over removed properties
for(var oldProp in oldObjectClone){patches.push({key:oldProp,type:'delete'});}return patches;};// This file contains the function that allows the registration of routes
// `RegExp` used to match route variables of the type '{name}'.
// Any word character or a period is matched.
// ### removeBackslash
// Removes all backslashes (`\`) from a string.
function removeBackslash(string){return string.replace(/\\/g,"");}// ### wrapQuote
// Converts input to a string and readies string for regex
// input by escaping the following special characters: `[ ] ( ) { } \ ^ $ . | ? * +`.
function wrapQuote(string){return (string+"").replace(/([.?*+\^$\[\]\\(){}|\-])/g,"\\$1");}var RouteRegistry={routes:{},register:function(url,defaults){// If the root ends with a forward slash (`/`)
// and url starts with a forward slash (`/`), remove the leading
// forward slash (`/`) of the url.
var root=bindingProxy_1.call("root");if(root.lastIndexOf("/")===root.length-1&&url.indexOf("/")===0){url=url.substr(1);}// `matcher` will be a regex
// fall back to legacy `:foo` RegExp if necessary
var matcher;if(regexps.colon.test(url)){//!steal-remove-start
if(process.env.NODE_ENV!=="production"){dev.warn("update route \""+url+"\" to \""+url.replace(regexps.colon,function(name,key){return "{"+key+"}";})+"\"");}//!steal-remove-end
matcher=regexps.colon;}else {matcher=regexps.curlies;}defaults=defaults||{};// Extract the variable names and replace with `RegExp` that will match
// an actual URL with values.
var lastIndex=matcher.lastIndex=0,names=[],res,test="",next,querySeparator=bindingProxy_1.call("querySeparator"),matchSlashes=bindingProxy_1.call("matchSlashes");// res will be something like ["{foo}","foo"]
while(res=matcher.exec(url)){names.push(res[1]);test+=removeBackslash(url.substring(lastIndex,matcher.lastIndex-res[0].length));// If matchSlashes is false (the default) don't greedily match any slash in the string, assume its part of the URL
next="\\"+(removeBackslash(url.substr(matcher.lastIndex,1))||querySeparator+(matchSlashes?"":"|/"));// A name without a default value HAS to have a value.
// A name that has a default value can be empty.
// The `\\` is for string-escaping giving single `\` for `RegExp` escaping.
test+="([^"+next+"]"+(defaults[res[1]]?"*":"+")+")";lastIndex=matcher.lastIndex;}test+=removeBackslash(url.substr(lastIndex));//!steal-remove-start
if(process.env.NODE_ENV!=="production"){// warn if new route uses same map properties as an existing route
canReflect_1_19_2_canReflect.eachKey(RouteRegistry.routes,function(r){var existingKeys=r.names.concat(Object.keys(r.defaults)).sort(),keys=names.concat(Object.keys(defaults)).sort(),sameMapKeys=!list(existingKeys,keys).length,sameDefaultValues=!map$2(r.defaults,defaults).length,//the regex removes the trailing slash
matchingRoutesWithoutTrailingSlash=r.route.replace(/\/$/,"")===url.replace(/\/$/,"");if(sameMapKeys&&sameDefaultValues&&!matchingRoutesWithoutTrailingSlash){dev.warn("two routes were registered with matching keys:\n"+"\t(1) route.register(\""+r.route+"\", "+JSON.stringify(r.defaults)+")\n"+"\t(2) route.register(\""+url+"\", "+JSON.stringify(defaults)+")\n"+"(1) will always be chosen since it was registered first");}});}//!steal-remove-end
// Add route in a form that can be easily figured out.
return RouteRegistry.routes[url]={// A regular expression that will match the route when variable values
// are present; i.e. for (`{page}/{type}`) the `RegExp` is `/([\w\.]*)/([\w\.]*)/` which
// will match for any value of `{page}` and `{type}` (word chars or period).
test:new RegExp("^"+test+"($|"+wrapQuote(querySeparator)+")"),// The original URL, same as the index for this entry in routes.
route:url,// An `array` of all the variable names in this route.
names:names,// Default values provided for the variables.
defaults:defaults,// The number of parts in the URL separated by `/`.
length:url.split("/").length};}};var register=RouteRegistry;var digitTest=/^\d+$/,keyBreaker=/([^\[\]]+)|(\[\])/g,paramTest=/([^?#]*)(#.*)?$/,entityRegex=/%([^0-9a-f][0-9a-f]|[0-9a-f][^0-9a-f]|[^0-9a-f][^0-9a-f])/i,startChars={"#":true,"?":true},prep=function(str){if(startChars[str.charAt(0)]===true){str=str.substr(1);}str=str.replace(/\+/g,' ');try{return decodeURIComponent(str);}catch(e){return decodeURIComponent(str.replace(entityRegex,function(match,hex){return '%25'+hex;}));}};function isArrayLikeName(name){return digitTest.test(name)||name==='[]';}function idenity(value){return value;}var canDeparam_1_2_3_canDeparam=canNamespace_1_0_0_canNamespace.deparam=function(params,valueDeserializer){valueDeserializer=valueDeserializer||idenity;var data={},pairs,lastPart;if(params&&paramTest.test(params)){pairs=params.split('&');pairs.forEach(function(pair){var parts=pair.split('='),key=prep(parts.shift()),value=prep(parts.join('=')),current=data;if(key){parts=key.match(keyBreaker);for(var j=0,l=parts.length-1;j<l;j++){var currentName=parts[j],nextName=parts[j+1],currentIsArray=isArrayLikeName(currentName)&&current instanceof Array;if(!current[currentName]){if(currentIsArray){current.push(isArrayLikeName(nextName)?[]:{});}else {// If what we are pointing to looks like an `array`
current[currentName]=isArrayLikeName(nextName)?[]:{};}}if(currentIsArray){current=current[current.length-1];}else {current=current[currentName];}}lastPart=parts.pop();if(isArrayLikeName(lastPart)){current.push(valueDeserializer(value));}else {current[lastPart]=valueDeserializer(value);}}});}return data;};// ## Helper Functions
// ### decode
// Restore escaped HTML from its URI value.
// It isn't compatable with named character references (`&copy;`, etc).
function decode(str){try{return decodeURIComponent(str);}catch(ex){return unescape(str);}}// ### toURLFragment
// If the `root` ends with `/` and the url starts with it, remove `/`.
// TODO: I'm not totally sure this belongs here. This might be shifted to can-route-pushstate.
function toURLFragment(url){var root=bindingProxy_1.call("root");if(root.lastIndexOf("/")===root.length-1&&url.indexOf("/")===0){url=url.substr(1);}return url;}// ### canRoute_getRule
function canRoute_getRule(url){url=toURLFragment(url);// See if the url matches any routes by testing it against the `route.test` `RegExp`.
// By comparing the URL length the most specialized route that matches is used.
var route={length:-1};canReflect_1_19_2_canReflect.eachKey(register.routes,function(temp,name){if(temp.test.test(url)&&temp.length>route.length){route=temp;}});// If a route was matched.
if(route.length>-1){return route;}}function canRoute_deparam(url){var route=canRoute_getRule(url),querySeparator=bindingProxy_1.call("querySeparator"),paramsMatcher=bindingProxy_1.call("paramsMatcher");url=toURLFragment(url);// If a route was matched.
if(route){// Since `RegExp` backreferences are used in `route.test` (parens)
// the parts will contain the full matched string and each variable (back-referenced) value.
var parts=url.match(route.test),// Start will contain the full matched string; parts contain the variable values.
start=parts.shift(),// The remainder will be the `&amp;key=value` list at the end of the URL.
remainder=url.substr(start.length-(parts[parts.length-1]===querySeparator?1:0)),// If there is a remainder and it contains a `&amp;key=value` list deparam it.
obj=remainder&&paramsMatcher.test(remainder)?canDeparam_1_2_3_canDeparam(remainder.slice(1)):{};// Add the default values for this route.
obj=canReflect_1_19_2_canReflect.assignDeep(canReflect_1_19_2_canReflect.assignDeep({},route.defaults),obj);// Overwrite each of the default values in `obj` with those in
// parts if that part is not empty.
parts.forEach(function(part,i){if(part&&part!==querySeparator){obj[route.names[i]]=decode(part);}});return obj;}// If no route was matched, it is parsed as a `&amp;key=value` list.
if(url.charAt(0)!==querySeparator){url=querySeparator+url;}return paramsMatcher.test(url)?canDeparam_1_2_3_canDeparam(url.slice(1)):{};}canRoute_deparam.getRule=canRoute_getRule;var deparam_1=canRoute_deparam;var canParam_1_2_0_canParam=createCommonjsModule(function(module){var standardsMode=false;function buildParam(prefix,obj,add){if(Array.isArray(obj)){for(var i=0,l=obj.length;i<l;++i){var inner=obj[i];var shouldIncludeIndex=typeof inner==='object';var arrayIndex=shouldIncludeIndex?'['+i+']':'[]';buildParam(prefix+arrayIndex,inner,add);}}else if(obj&&typeof obj==="object"){for(var name in obj){buildParam(prefix+'['+name+']',obj[name],add);}}else {add(prefix,obj);}}if(canNamespace_1_0_0_canNamespace.param){throw new Error("You can't have two versions of can-param, check your dependencies");}else {module.exports=canNamespace_1_0_0_canNamespace.param=function param(object){var pairs=[],add=function(key,value){value=standardsMode&&value==null?'':value;pairs.push(encodeURIComponent(key)+'='+encodeURIComponent(value));};for(var name in object){if(!standardsMode||typeof object[name]!=='undefined'){buildParam(name,object[name],add);}}return pairs.join('&').replace(/%20/g,'+');};/**
	 * @function can-param.setStandardsMode setStandardsMode
	 * @parent can-param.methods
	 * @description Set whether to treat null and undefined specially when serializing
	 * 
	 * @signature `param.setStandardsMode(boolean)`
	 *
	 * Set whether to serialize values in a manner more consistent with jQuery[1] and URLSearchParams[2], or to use the classic
	 * can-param value serialization.  By default this value is false (classic mode).
	 *
	 * The differences between the two are:
	 * - `null` serializes to an empty string in standards mode, "null" in classic mode
	 * - `undefined` is removed from the serialized form entirely in standards mode, serialized to "undefined" in classic mode
	 *
	 * All other values are treated the same in both modes.
	 *
	 * @param  {boolean} value `true` to use DOM/jQuery style param serialization, `false` to use classic can-param serializtion
	 *
	 * @body
	 * <hr>
	 * [1] [https://api.jquery.com/jquery.param/]
   * 
	 * [2] [https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams]
	 */canNamespace_1_0_0_canNamespace.param.setStandardsMode=function(value){standardsMode=!!value;};}});// ## matchesData
// Checks if a route matches the data provided. If any route variable
// is not present in the data, the route does not match. If all route
// variables are present in the data, the number of matches is returned
// to allow discerning between general and more specific routes.
function matchesData(route,data){var count=0,defaults={};// Look at default route values, if they match increment count
for(var name in route.defaults){if(route.defaults[name]===data[name]){defaults[name]=1;count++;}}for(var i=0;i<route.names.length;i++){// If a route name isn't present in data, the route doesn't match.
if(!data.hasOwnProperty(route.names[i])){return -1;}if(!defaults[route.names[i]]){count++;}}return count;}// ## getMatchedRoute
function getMatchedRoute(data,routeName){// Check if the provided data keys match the names in any routes;
// Get the one with the most matches.
var route,// Need to have at least 1 match.
matches=0,matchCount,propCount=0;delete data.route;canReflect_1_19_2_canReflect.eachKey(data,function(){propCount++;});// Otherwise find route.
canReflect_1_19_2_canReflect.eachKey(register.routes,function(temp,name){// best route is the first with all defaults matching
matchCount=matchesData(temp,data);if(matchCount>matches){route=temp;matches=matchCount;}if(matchCount>=propCount){return false;}});// If we have a route name in our `register` data, and it's
// just as good as what currently matches, use that
if(register.routes[routeName]&&matchesData(register.routes[routeName],data)===matches){route=register.routes[routeName];}// If this is match...
return route;}function paramFromRoute(route,data){var cpy,res,after,matcher;if(route){cpy=canReflect_1_19_2_canReflect.assignMap({},data);// fall back to legacy :foo RegExp if necessary
matcher=regexps.colon.test(route.route)?regexps.colon:regexps.curlies;// Create the url by replacing the var names with the provided data.
// If the default value is found an empty string is inserted.
res=route.route.replace(matcher,function(whole,name){delete cpy[name];return data[name]===route.defaults[name]?"":encodeURIComponent(data[name]);}).replace("\\","");// Remove matching default values
canReflect_1_19_2_canReflect.eachKey(route.defaults,function(val,name){if(cpy[name]===val){delete cpy[name];}});// The remaining elements of data are added as
// `&amp;` separated parameters to the url.
after=canParam_1_2_0_canParam(cpy);// if we are paraming for setting the hash
// we also want to make sure the route value is updated
//if (_setRoute) {
//    register.matched(route.route);
//}
return res+(after?bindingProxy_1.call("querySeparator")+after:"");}// If no route was found, there is no hash URL, only paramters.
return canReflect_1_19_2_canReflect.size(data)===0?"":bindingProxy_1.call("querySeparator")+canParam_1_2_0_canParam(data);}function canRoute_param(data,currentRouteName){return paramFromRoute(getMatchedRoute(data,currentRouteName),data);}var param_1=canRoute_param;canRoute_param.paramFromRoute=paramFromRoute;canRoute_param.getMatchedRoute=getMatchedRoute;// ### formatAttributes
// Creates HTML-like attributes from an object.
// It escapes hyperlink references.
function formatAttributes(props){var tags=[];canReflect_1_19_2_canReflect.eachKey(props,function(value,name){// Converts `"className"` to `"class"`.
var attributeName=name==="className"?"class":name,// Escapes `value` if `name` is `"href"`.
attributeValue=name==="href"?value:canString_1_1_0_canString.esc(value);tags.push(attributeName+"=\""+attributeValue+"\"");});return tags.join(" ");}// ### matchCheck
// It recursively compares property values in `matcher` to those in `source`.
// It returns `false` if there's a property in `source` that's not in `matcher`,
// or if the two values aren't loosely equal.
function matchCheck(source,matcher){/*jshint eqeqeq:false*/for(var property in source){var sourceProperty=source[property],matcherProperty=matcher[property];if(sourceProperty&&matcherProperty&&typeof sourceProperty==="object"&&typeof matcher==="object"){return matchCheck(sourceProperty,matcherProperty);}if(sourceProperty!=matcherProperty){return false;}}return true;}// ### canRoute_url
function canRoute_url(options,merge){if(merge){var baseOptions=deparam_1(bindingProxy_1.call("can.getValue"));options=canReflect_1_19_2_canReflect.assignMap(canReflect_1_19_2_canReflect.assignMap({},baseOptions),options);}return bindingProxy_1.call("root")+param_1(options);}var urlHelpers={url:canRoute_url,link:function canRoute_link(name,options,props,merge){return "<a "+formatAttributes(canReflect_1_19_2_canReflect.assignMap({href:canRoute_url(options,merge)},props))+">"+name+"</a>";},isCurrent:function canRoute_isCurrent(options,subsetMatch){var getValueSymbol=bindingProxy_1.call("can.getValue");if(subsetMatch){// Everything in `options` shouhld be in `baseOptions`.
var baseOptions=deparam_1(getValueSymbol);return matchCheck(options,baseOptions);}else {return getValueSymbol===param_1(options);}}};// Regular expression for identifying &amp;key=value lists.
var paramsMatcher=/^(?:&[^=]+=[^&]*)+/;function getHash(){var loc=location_1();return loc.href.split(/#!?/)[1]||"";}function HashchangeObservable(){var dispatchHandlers=this.dispatchHandlers.bind(this);var self=this;this._value="";this.handlers=new canKeyTree_1_2_2_canKeyTree([Object,Array],{onFirst:function(){self._value=getHash();canDomEvents_1_3_13_canDomEvents.addEventListener(window,'hashchange',dispatchHandlers);},onEmpty:function(){canDomEvents_1_3_13_canDomEvents.removeEventListener(window,'hashchange',dispatchHandlers);}});}HashchangeObservable.prototype=Object.create(canSimpleObservable_2_5_0_canSimpleObservable.prototype);HashchangeObservable.constructor=HashchangeObservable;canReflect_1_19_2_canReflect.assign(HashchangeObservable.prototype,{// STUFF NEEDED FOR can-route integration
paramsMatcher:paramsMatcher,querySeparator:"&",// don't greedily match slashes in routing rules
matchSlashes:false,root:"#!",dispatchHandlers:function(){var old=this._value;this._value=getHash();if(old!==this._value){canQueues_1_3_2_canQueues.enqueueByQueue(this.handlers.getNode([]),this,[this._value,old]//!steal-remove-start
/* jshint laxcomma: true */,null,[canReflect_1_19_2_canReflect.getName(this),"changed to",this._value,"from",old]/* jshint laxcomma: false *///!steal-remove-end
);}},get:function(){canObservationRecorder_1_3_1_canObservationRecorder.add(this);return getHash();},set:function(path){var loc=location_1();if(!path&&!loc.hash);else if(loc.hash!=="#"+path){loc.hash="!"+path;}return path;}});Object.defineProperty(HashchangeObservable.prototype,"value",{get:function(){return canReflect_1_19_2_canReflect.getValue(this);},set:function(value){canReflect_1_19_2_canReflect.setValue(this,value);}});canReflect_1_19_2_canReflect.assignSymbols(HashchangeObservable.prototype,{"can.getValue":HashchangeObservable.prototype.get,"can.setValue":HashchangeObservable.prototype.set,"can.onValue":HashchangeObservable.prototype.on,"can.offValue":HashchangeObservable.prototype.off,"can.isMapLike":false,"can.valueHasDependencies":function(){return true;},//!steal-remove-start
"can.getName":function(){return "HashchangeObservable<"+this._value+">";}//!steal-remove-end
});var canRouteHash_1_0_2_canRouteHash=HashchangeObservable;/* globals WorkerGlobalScope */// A bit of weirdness to avoid complaining linters
var funcConstructor=Function;/**
 * @module {function} can-globals/is-browser-window/is-web-worker is-web-worker
 * @parent can-globals/modules
 * @signature `isWebWorker()`
 *
 * Returns `true` if the code is running within a [web worker](https://developer.mozilla.org/en-US/docs/Web/API/Worker).
 *
 * ```js
 * var isWebWorker = require("can-globals/is-web-worker/is-web-worker");
 * var GLOBAL = require("can-globals/global/global");
 *
 * if(isWebWorker()) {
 *   ...
 * }
 * ```
 *
 * @return {Boolean} True if the environment is a web worker.
 */canGlobals_1_2_2_canGlobalsInstance.define('isWebWorker',function(){var global=funcConstructor('return this')();return typeof WorkerGlobalScope!=="undefined"&&global instanceof WorkerGlobalScope;});var isWebWorker=canGlobals_1_2_2_canGlobalsInstance.makeExport('isWebWorker');var stringCoercingMapDecorator$1=stringCoercion.stringCoercingMapDecorator;// ## hashchangeObservable
// `hashchangeObservable` is an instance of `Hashchange`, instances of
// `Hashchange` are two-way bound to `window.location.hash` once the
// instances have a listener.
var hashchangeObservable=new canRouteHash_1_0_2_canRouteHash();bindingProxy_1.bindings.hashchange=hashchangeObservable;bindingProxy_1.defaultBinding="hashchange";bindingProxy_1.urlDataObservable.value=hashchangeObservable;// ## canRoute
function canRoute(url,defaults){//!steal-remove-start
if(typeof process!=="undefined"&&process.env.NODE_ENV!=="production"){dev.warn("Call route.register(url,defaults) instead of calling route(url, defaults)");}//!steal-remove-end
register.register(url,defaults);return canRoute;}// ## Helper Functions
// A ~~throttled~~ debounced function called multiple times will only fire once the
// timer runs down. Each call resets the timer.
var timer;// A dummy events object used to dispatch url change events on.
var currentRuleObservable=new canObservation_4_2_0_canObservation(function canRoute_matchedRoute(){var url=bindingProxy_1.call("can.getValue");return canRoute.rule(url);});// ### updateUrl
// If the `route.data` changes, update the hash.
// Using `.serialize()` retrieves the raw data contained in the `observable`.
// This function is ~~throttled~~ debounced so it only updates once even if multiple values changed.
// This might be able to use batchNum and avoid this.
function updateUrl(serializedData){// collect attributes that are changing
clearTimeout(timer);timer=setTimeout(function(){// indicate that the hash is set to look like the data
var serialized=canReflect_1_19_2_canReflect.serialize(canRoute.data),currentRouteName=currentRuleObservable.get(),route=param_1.getMatchedRoute(serialized,currentRouteName),path=param_1.paramFromRoute(route,serialized);bindingProxy_1.call("can.setValue",path);var onStartComplete=canRoute._onStartComplete;if(onStartComplete){canRoute._onStartComplete=undefined;onStartComplete();}},10);}// ### updateRouteData
// Deparameterizes the portion of the hash of interest and assign the
// values to the `route.data` removing existing values no longer in the hash.
// updateRouteData is called typically by hashchange which fires asynchronously
// So it’s possible that someone started changing the data before the
// hashchange event fired.  For this reason, it will not set the route data
// if the data is changing or the hash already matches the hash that was set.
function updateRouteData(){var hash=bindingProxy_1.call("can.getValue");// if the hash data is currently changing, or
// the hash is what we set it to anyway, do NOT change the hash
canQueues_1_3_2_canQueues.batch.start();var state=canRoute.deparam(hash);delete state.route;canReflect_1_19_2_canReflect.update(canRoute.data,state);canQueues_1_3_2_canQueues.batch.stop();}/**
 * @static
 */Object.defineProperty(canRoute,"routes",{/**
	 * @property {Object} routes
	 * @hide
	 *
	 * A list of routes recognized by the router indixed by the url used to add it.
	 * Each route is an object with these members:
	 *
	 *  - test - A regular expression that will match the route when variable values
	 *    are present; i.e. for {page}/{type} the `RegExp` is /([\w\.]*)/([\w\.]*)/ which
	 *    will match for any value of {page} and {type} (word chars or period).
	 *
	 *  - route - The original URL, same as the index for this entry in routes.
	 *
	 *  - names - An array of all the variable names in this route
	 *
	 *  - defaults - Default values provided for the variables or an empty object.
	 *
	 *  - length - The number of parts in the URL separated by '/'.
	 */get:function(){return register.routes;},set:function(newVal){return register.routes=newVal;}});// ## canRoute.defaultBinding
Object.defineProperty(canRoute,"defaultBinding",{get:function(){return bindingProxy_1.defaultBinding;},set:function(newVal){bindingProxy_1.defaultBinding=newVal;var observable=bindingProxy_1.bindings[bindingProxy_1.defaultBinding];if(observable){bindingProxy_1.urlDataObservable.value=observable;}}});// ## canRoute.urlData
Object.defineProperty(canRoute,"urlData",{get:function(){return bindingProxy_1.urlDataObservable.value;},set:function(newVal){canRoute._teardown();bindingProxy_1.urlDataObservable.value=newVal;}});canReflect_1_19_2_canReflect.assignMap(canRoute,{// ## canRoute.param
param:param_1,// ## canRoute.deparam
deparam:deparam_1,// ## canRoute.map
map:function(data){//!steal-remove-start
if(typeof process!=="undefined"&&process.env.NODE_ENV!=="production"){dev.warn("Set route.data directly instead of calling route.map");}//!steal-remove-end
canRoute.data=data;},// ## canRoute.start
start:function(val){if(canRoute.data instanceof routedata){var routeData=canRoute.data;var definePropertyWithDefault=function(defaults,name){var defaultValue=defaults[name];var propertyType=defaultValue!=null?canType_1_1_6_canType.maybeConvert(defaultValue.constructor):canType_1_1_6_canType.maybeConvert(String);canReflect_1_19_2_canReflect.defineInstanceKey(routeData.constructor,name,{type:propertyType});};canReflect_1_19_2_canReflect.eachKey(canRoute.routes,function(route){canReflect_1_19_2_canReflect.eachIndex(route.names,function(name){definePropertyWithDefault(route.defaults,name);});canReflect_1_19_2_canReflect.eachKey(route.defaults,function(value,key){definePropertyWithDefault(route.defaults,key);});});}if(val!==true){canRoute._setup();if(isBrowserWindow()||isWebWorker()){// We can't use updateRouteData because we want to merge the route data
// into .data
var hash=bindingProxy_1.call("can.getValue");canQueues_1_3_2_canQueues.batch.start();// get teh data
var state=canRoute.deparam(hash);delete state.route;canReflect_1_19_2_canReflect.assign(canRoute.data,state);canQueues_1_3_2_canQueues.batch.stop();updateUrl();}}return canRoute;},// ## canRoute.url
url:urlHelpers.url,link:urlHelpers.link,isCurrent:urlHelpers.isCurrent,bindings:bindingProxy_1.bindings,// ready calls setup
// setup binds and listens to data changes
// bind listens to whatever you should be listening to
// data changes tries to set the path
// we need to be able to
// easily kick off calling updateRouteData
// 	teardown whatever is there
//  turn on a particular binding
// called when the route is ready
_setup:function(){if(!canRoute._canBinding){var bindingOptions={// The parent is the hashchange observable
parent:bindingProxy_1.urlDataObservable.value,setParent:updateUrl,// The child is route.data
child:canRoute.serializedObservation,setChild:updateRouteData,// On init, we do not want the child set to the parent’s value; this is
// handled by start() for reasons mentioned there.
onInitDoNotUpdateChild:true,// Cycles are allowed because updateUrl is async; if another change
// happens during its setTimeout, then without cycles the change would
// be ignored :( TODO: Can this be removed if updateUrl stops using
// setTimeout in a major version?
cycles:1,// Listen for changes in the notify queue
queue:"notify"};// For debugging: the names that will be assigned to the updateChild and
// updateParent functions within can-bind
//!steal-remove-start
if(typeof process!=="undefined"&&process.env.NODE_ENV!=="production"){bindingOptions.updateChildName="can-route.updateRouteData";bindingOptions.updateParentName="can-route.updateUrl";}//!steal-remove-end
// Create a new binding with can-bind
canRoute._canBinding=new canBind_1_5_1_canBind(bindingOptions);// …and turn it on!
canRoute._canBinding.start();}},_teardown:function(){if(canRoute._canBinding){canRoute._canBinding.stop();canRoute._canBinding=null;}clearTimeout(timer);},stop:function(){this._teardown();return canRoute;},currentRule:makeCompute(currentRuleObservable),register:register.register,rule:function(url){var rule=deparam_1.getRule(url);if(rule){return rule.route;}}});// The functions in the following list applied to `canRoute` (e.g. `canRoute.attr('...')`) will
// instead act on the `canRoute.data` observe.
var bindToCanRouteData=function(name,args){if(!canRoute.data[name]){return canRoute.data.addEventListener.apply(canRoute.data,args);}return canRoute.data[name].apply(canRoute.data,args);};["addEventListener","removeEventListener","bind","unbind","on","off"].forEach(function(name){// exposing all internal eventQueue evt’s to canRoute
canRoute[name]=function(eventName,handler){if(eventName==="__url"){return bindingProxy_1.call("can.onValue",handler);}return bindToCanRouteData(name,arguments);};});["delegate","undelegate","removeAttr","compute","_get","___get","each"].forEach(function(name){canRoute[name]=function(){// `delegate` and `undelegate` require
// the `can/map/delegate` plugin
return bindToCanRouteData(name,arguments);};});var routeData,serializedObservation,serializedCompute;function setRouteData(data){routeData=data;return routeData;}Object.defineProperty(canRoute,"serializedObservation",{get:function(){if(!serializedObservation){serializedObservation=new canObservation_4_2_0_canObservation(function canRoute_data_serialized(){return canReflect_1_19_2_canReflect.serialize(canRoute.data);});}return serializedObservation;}});Object.defineProperty(canRoute,"serializedCompute",{get:function(){if(!serializedCompute){serializedCompute=makeCompute(canRoute.serializedObservation);}return serializedCompute;}});var viewModelSymbol$3=canSymbol_1_7_0_canSymbol.for("can.viewModel");Object.defineProperty(canRoute,"data",{get:function(){if(routeData){return routeData;}else {return setRouteData(new routedata());}},set:function(data){if(canReflect_1_19_2_canReflect.isConstructorLike(data)){data=new data();}if(data&&data[viewModelSymbol$3]!==undefined){data=data[viewModelSymbol$3];}// if it’s a map, we make it always set strings for backwards compat
if("attr"in data){setRouteData(stringCoercingMapDecorator$1(data));}else {setRouteData(data);}}});canRoute.attr=function(prop,value){console.warn("can-route: can-route.attr is deprecated. Use methods on can-route.data instead.");if("attr"in canRoute.data){return canRoute.data.attr.apply(canRoute.data,arguments);}else {if(arguments.length>1){canReflect_1_19_2_canReflect.setKeyValue(canRoute.data,prop,value);return canRoute.data;}else if(typeof prop==="object"){canReflect_1_19_2_canReflect.assignDeep(canRoute.data,prop);return canRoute.data;}else if(arguments.length===1){return canReflect_1_19_2_canReflect.getKeyValue(canRoute.data,prop);}else {return canReflect_1_19_2_canReflect.unwrap(canRoute.data);}}};canReflect_1_19_2_canReflect.setKeyValue(canRoute,canSymbol_1_7_0_canSymbol.for("can.isFunctionLike"),false);// LEGACY
canRoute.matched=canRoute.currentRule;canRoute.current=canRoute.isCurrent;var canRoute_5_0_2_canRoute=canNamespace_1_0_0_canNamespace.route=canRoute;var looksLikeOptions=core$1.looksLikeOptions;var calculateArgs=function(){var finalParams,finalMerge,optionsArg;canReflect_1_19_2_canReflect.eachIndex(arguments,function(arg){if(typeof arg==="boolean"){finalMerge=arg;}else if(arg&&typeof arg==="object"){if(!looksLikeOptions(arg)){finalParams=core$1.resolveHash(arg);}else {optionsArg=arg;}}});if(!finalParams&&optionsArg){finalParams=core$1.resolveHash(optionsArg.hash);}return {finalParams:finalParams||{},finalMerge:finalMerge,optionsArg:optionsArg};};// go through arguments ... if there's a boolean ... if there's a plain object
var routeUrl=function(){var args=calculateArgs.apply(this,arguments);return canRoute_5_0_2_canRoute.url(args.finalParams,typeof args.finalMerge==="boolean"?args.finalMerge:undefined);};core$1.registerHelper('routeUrl',routeUrl);var routeCurrent=function(){var args=calculateArgs.apply(this,arguments);var result=canRoute_5_0_2_canRoute.isCurrent(args.finalParams,typeof args.finalMerge==="boolean"?args.finalMerge:undefined);if(args.optionsArg&&!(args.optionsArg instanceof expression_1.Call)){if(result){return args.optionsArg.fn();}else {return args.optionsArg.inverse();}}else {return result;}};routeCurrent.callAsMethod=true;core$1.registerHelper('routeCurrent',routeCurrent);/**
 * @module {function} can-key/sub/sub
 * @parent can-key
 * @hide
 *
 * Replace templated parts of a string with values.
 *
 * @signature `sub(str, data, remove)`
 *
 * `sub` is used to replace templated parts of a string with values.
 *
 * ```js
 * var sub = require("can-key/sub/sub");
 *
 * sub("foo_{bar}", {bar: "baz"}); // -> "foo_baz"
 * ```
 *
 * If `null` or `undefined` values are found, `null` is returned:
 *
 * ```js
 * sub("foo_{bar}", {}); // -> null
 * ```
 *
 * If an object value is found, the templated part of the string is replace with `""`
 * and the object is added to an array that is returned.
 *
 * ```js
 * var data = {element: div, selector: "li" }
 * var res = sub("{element} {selector} click", data);
 * res //-> [" li click", div]
 * ```
 *
 * @param {String} str   a string with {curly brace} delimited property names
 * @param {Object} data  an object from which to read properties
 * @return {String|null|Array} the supplied string with delimited properties replaced with their values
 *                       if all properties exist on the object, null otherwise
 *
 * If `remove` is true, the properties found in delimiters in `str` are removed from `data`.
 *
 *
 */var sub=function sub(str,data,remove){var obs=[];str=str||'';obs.push(str.replace(canKey_1_2_1_utils.strReplacer,function(whole,inside){// Convert inside to type.
var ob=get_1(data,inside);if(ob===undefined||ob===null){obs=null;return '';}// If a container, push into objs (which will return objects found).
if(!canReflect_1_19_2_canReflect.isPrimitive(ob)&&obs){obs.push(ob);return '';}return ''+ob;}));return obs===null?obs:obs.length<=1?obs[0]:obs;};// # can-query-logic/set.js
// This file defines the set mechanics of types.
// It provides ways for types to define how to perform
// `union`, `difference`, `intersection` operations.
//
// It also derives other operators (`isEqual`, `isSubset`, etc) from these
// core operators.
//
// `.memberOf` is a property that defines if a value is within the set. It's
// currently a different thing.
// This is what we are defining
var set$2$1;// ## HELPERS =========
//
// Used to make sure an object serializes to itself.
// This makes sure the empty object won't try to clone itself.
var addSerializeToThis=function(obj){return canReflect_1_19_2_canReflect.assignSymbols(obj,{"can.serialize":function(){return this;}});};// Reverses the arguments of a function.
function reverseArgs(fn){return function(first,second){return fn.call(this,second,first);};}// This symbol is put on constructor functions to track the comparator operators
// available to that type.
var setComparisonsSymbol=canSymbol_1_7_0_canSymbol.for("can.setComparisons");// Adds comparators to a type. They are stored like:
// Type[@can.setComparisons] = Map({
//    [type1]: Map({[type2]: {union, different, intersection}})
// })
//
// Why do we need the outer object?
function addComparators(type1,type2,comparators){var comparisons=type1[setComparisonsSymbol];if(!type1[setComparisonsSymbol]){comparisons=type1[setComparisonsSymbol]=new Map();}var subMap=comparisons.get(type1);if(!subMap){subMap=new Map();comparisons.set(type1,subMap);}var existingComparators=subMap.get(type2);if(existingComparators){for(var prop in comparators){if(existingComparators.hasOwnProperty(prop)){console.warn("Overwriting "+type1.name+" "+prop+" "+type2.name+" comparitor");}existingComparators[prop]=comparators[prop];}}else {subMap.set(type2,comparators);}}// This type is used for primitives in JS, but it can be used for
// any value that should only === itself.
function Identity(){}var typeMap={"number":Identity,"string":Identity,"undefined":Identity,"boolean":Identity};// `get.intersection`, etc is used to look within the types
// maps and get the right comparator operators.
var get$1$1={};/*
var algebraSymbol = {
    "intersection": "∩",
    "union": "∪",
    "difference": "\\"
};
*/["intersection","difference","union"].forEach(function(prop){get$1$1[prop]=function(forwardComparators,value1,value2){if(value2===set$2$1.UNIVERSAL){if(prop==="intersection"){return value1;}if(prop==="union"){return set$2$1.UNIVERSAL;}if(prop==="difference"){return set$2$1.EMPTY;}}if(value1===set$2$1.UNIVERSAL){if(prop==="intersection"){return value1;}if(prop==="union"){return set$2$1.UNIVERSAL;}}if(forwardComparators&&forwardComparators[prop]){var result=forwardComparators[prop](value1,value2);// console.log("",/*name1,*/ value1, algebraSymbol[prop], /*name2,*/ value2,"=", result);
if(result===undefined&&forwardComparators.undefinedIsEmptySet===true){return set$2$1.EMPTY;}else {return result;}}else {throw new Error("Unable to perform "+prop+" between "+set$2$1.getType(value1).name+" and "+set$2$1.getType(value2).name);}};});set$2$1={// The special types
// All values within the "universe". Other sets can equal UNIVERSAL.
UNIVERSAL:canReflect_1_19_2_canReflect.assignSymbols({name:"UNIVERSAL"},{"can.serialize":function(){return this;},"can.isMember":function(){return true;}}),// Nothing
EMPTY:canReflect_1_19_2_canReflect.assignSymbols({name:"EMPTY"},{"can.serialize":function(){return this;},"can.isMember":function(){return false;}}),// The set exists, but we lack the language to represent it.
UNDEFINABLE:addSerializeToThis({name:"UNDEFINABLE"}),// We don't know if this exists. Intersection between two paginated sets.
UNKNOWABLE:addSerializeToThis({name:"UNKNOWABLE"}),Identity:Identity,isSpecial:function(setA){return setA===set$2$1.UNIVERSAL||setA===set$2$1.EMPTY||setA===set$2$1.UNDEFINABLE||setA===set$2$1.UNKNOWABLE;},isDefinedAndHasMembers:function(setA){if(setA!==set$2$1.EMPTY&&setA!==set$2$1.UNDEFINABLE&&setA!==set$2$1.UNKNOWABLE){return !!setA;}else {return false;}},getType:function(value){if(value===set$2$1.UNIVERSAL){return set$2$1.UNIVERSAL;}if(value===set$2$1.EMPTY){return set$2$1.EMPTY;}if(value===set$2$1.UNKNOWABLE){return set$2$1.UNKNOWABLE;}if(value===null){return Identity;}if(typeMap.hasOwnProperty(typeof value)){return typeMap[typeof value];}return value.constructor;},// This tries to get two comparable values from objects.
// In many ways this is similar to what JavaScript does if it sees
// `new Date() > new Date()`, it tries to coerce one value into the other value.
ownAndMemberValue:function(startOwnValue,startMemberValue){// If either side has a value, then try to type-coerse.
if(startOwnValue!=null||startMemberValue!=null){// First try to get `.valueOf` from either side
var ownValue=startOwnValue!=null?startOwnValue.valueOf():startOwnValue,memberValue=startMemberValue!=null?startMemberValue.valueOf():startMemberValue;// If we ot passed a null on either side, return extracted values
if(startOwnValue==null||startMemberValue==null){return {own:ownValue,member:memberValue};}// If we read the values, but they aren't the same type ...
// we will try to convert the member to the same type as the `startOwnValue`'s type.
// And then read `.valueOf()` from that.
if(ownValue==null||ownValue.constructor!==memberValue.constructor){memberValue=new startOwnValue.constructor(memberValue).valueOf();}return {own:ownValue,member:memberValue};}return {own:startMemberValue,member:startOwnValue};},getComparisons:function(Type1,Type2){var comparisons=Type1[setComparisonsSymbol];if(comparisons){var subMap=comparisons.get(Type1);if(subMap){return subMap.get(Type2);}}},hasComparisons:function(Type){return !!Type[setComparisonsSymbol];},defineComparison:function(type1,type2,comparators){addComparators(type1,type2,comparators);if(type1!==type2){var reverse={};for(var prop in comparators){// difference can not be reversed
if(prop!=="difference"){reverse[prop]=reverseArgs(comparators[prop]);}}addComparators(type2,type1,reverse);}},/**
	 * Checks if A is a subset of B.  If A is a subset of B if:
	 * - A \ B = EMPTY (A has nothing outside what's in B)
	 * - A ∩ B = defined
	 */isSubset:function(value1,value2){// check primary direction
if(value1===value2){return true;}var Type1=set$2$1.getType(value1),Type2=set$2$1.getType(value2);var forwardComparators=set$2$1.getComparisons(Type1,Type2);if(forwardComparators){// A set is a subset, if it intersects with the set, and it has nothing
// outside the other set.
var intersection=get$1$1.intersection(forwardComparators,value1,value2);// [a, b] \ [a, b, c]
var difference=get$1$1.difference(forwardComparators,value1,value2);// they intersect, but value2 has nothing value1 outside value2
if(intersection===set$2$1.UNKNOWABLE||difference===set$2$1.UNKNOWABLE){// {sort: "a", page: 0-2} E {sort: "b", page: 2-3}
return undefined;}else if(intersection!==set$2$1.EMPTY&&difference===set$2$1.EMPTY){return true;}else {return false;}}else {throw new Error("Unable to perform subset comparison between "+Type1.name+" and "+Type2.name);}},isProperSubset:function(setA,setB){return set$2$1.isSubset(setA,setB)&&!set$2$1.isEqual(setA,setB);},isEqual:function(value1,value2){if(value1===set$2$1.UNKNOWABLE||value2===set$2$1.UNKNOWABLE){return set$2$1.UNKNOWABLE;}//console.group("is", value1, "==", value2);
var isSpecial1=set$2$1.isSpecial(value1),isSpecial2=set$2$1.isSpecial(value2);// Both have to be specail because some other sets will be equal to UNIVERSAL without being UNIVERSAL
if(isSpecial1&&isSpecial2){return isSpecial1===isSpecial2;}var Type1=set$2$1.getType(value1),Type2=set$2$1.getType(value2);if(value1===value2){return true;}var forwardComparators=set$2$1.getComparisons(Type1,Type2);var reverseComparators=set$2$1.getComparisons(Type2,Type1);if(forwardComparators&&reverseComparators){// Two sets are equal if there's an intersection, but not difference
var intersection=get$1$1.intersection(forwardComparators,value1,value2);var difference=get$1$1.difference(forwardComparators,value1,value2);if(intersection!==set$2$1.EMPTY&&difference===set$2$1.EMPTY){var reverseIntersection=get$1$1.intersection(reverseComparators,value2,value1);var reverseDifference=get$1$1.difference(reverseComparators,value2,value1);//console.groupEnd();
return reverseIntersection!==set$2$1.EMPTY&&reverseDifference===set$2$1.EMPTY;}else {//console.groupEnd();
return false;}}else {var values=set$2$1.ownAndMemberValue(value1,value2);if(canReflect_1_19_2_canReflect.isPrimitive(values.own)&&canReflect_1_19_2_canReflect.isPrimitive(values.member)){return values.own===values.member;}else {// try to convert ...
throw new Error("Unable to perform equal comparison between "+Type1.name+" and "+Type2.name);}}},union:function(value1,value2){if(value1===set$2$1.UNIVERSAL||value2===set$2$1.UNIVERSAL){return set$2$1.UNIVERSAL;}if(value1===set$2$1.EMPTY){return value2;}else if(value2===set$2$1.EMPTY){return value1;}if(value1===set$2$1.UNKNOWABLE||value2===set$2$1.UNKNOWABLE){return set$2$1.UNKNOWABLE;}var Type1=set$2$1.getType(value1),Type2=set$2$1.getType(value2);var forwardComparators=set$2$1.getComparisons(Type1,Type2);return get$1$1.union(forwardComparators,value1,value2);},intersection:function(value1,value2){if(value1===set$2$1.UNIVERSAL){return value2;}if(value2===set$2$1.UNIVERSAL){return value1;}if(value1===set$2$1.EMPTY||value2===set$2$1.EMPTY){return set$2$1.EMPTY;}if(value1===set$2$1.UNKNOWABLE||value2===set$2$1.UNKNOWABLE){return set$2$1.UNKNOWABLE;}var Type1=set$2$1.getType(value1),Type2=set$2$1.getType(value2);var forwardComparators=set$2$1.getComparisons(Type1,Type2);if(forwardComparators){return get$1$1.intersection(forwardComparators,value1,value2);}else {throw new Error("Unable to perform intersection comparison between "+Type1.name+" and "+Type2.name);}},difference:function(value1,value2){if(value1===set$2$1.EMPTY){return set$2$1.EMPTY;}if(value2===set$2$1.EMPTY){return value1;}if(value1===set$2$1.UNKNOWABLE||value2===set$2$1.UNKNOWABLE){return set$2$1.UNKNOWABLE;}var Type1=set$2$1.getType(value1),Type2=set$2$1.getType(value2);var forwardComparators=set$2$1.getComparisons(Type1,Type2);if(forwardComparators){return get$1$1.difference(forwardComparators,value1,value2);}else {throw new Error("Unable to perform difference comparison between "+Type1.name+" and "+Type2.name);}},indexWithEqual:function(arr,value){for(var i=0,len=arr.length;i<len;i++){if(set$2$1.isEqual(arr[i],value)){return i;}}return -1;}};function identityIntersection(v1,v2){return v1===v2?v1:set$2$1.EMPTY;}function identityDifference(v1,v2){return v1===v2?set$2$1.EMPTY:v1;}function identityUnion(v1,v2){return v1===v2?v1:set$2$1.UNDEFINABLE;}var identityComparitor={intersection:identityIntersection,difference:identityDifference,union:identityUnion};set$2$1.defineComparison(Identity,Identity,identityComparitor);set$2$1.defineComparison(set$2$1.UNIVERSAL,set$2$1.UNIVERSAL,identityComparitor);var set_1$1$1=set$2$1;var replacer=/\{([^\}]+)\}/g;// Returns data from a url, given a fixtue URL. For example, given
// "todo/{id}" and "todo/5", it will return an object with an id property
// equal to 5.
var canFixture_3_1_7_dataFromUrl=function dataFromUrl(fixtureUrl,url){if(!fixtureUrl){// if there's no url, it's a match
return {};}var order=[],// Sanitizes fixture URL
fixtureUrlAdjusted=fixtureUrl.replace('.','\\.').replace('?','\\?'),// Creates a regular expression out of the adjusted fixture URL and
// runs it on the URL we passed in.
res=new RegExp(fixtureUrlAdjusted.replace(replacer,function(whole,part){order.push(part);return "([^\/]+)";})+"$").exec(url),data={};// If there were no matches, return null;
if(!res){return null;}// Shift off the URL and just keep the data.
res.shift();order.forEach(function(name){// Add data from regular expression onto data object.
data[name]=res.shift();});return data;};function getValue$2(value){return value==null?value:value.valueOf();}var arrayUnionIntersectionDifference=function arrayUnionIntersectionDifference(arr1,arr2){var set=new Set();var intersection=[];var union=[];var difference=arr1.slice(0);arr1.forEach(function(value){set.add(getValue$2(value));union.push(value);});arr2.forEach(function(value){if(set.has(getValue$2(value))){intersection.push(value);var index=set_1$1$1.indexWithEqual(difference,value);if(index!==-1){difference.splice(index,1);}}else {union.push(value);}});return {intersection:intersection,union:union,difference:difference};};function isMemberThatUsesTestOnValues(value){return this.constructor.test(this.values,value);}var isMemberThatUsesTestOnValues_1=isMemberThatUsesTestOnValues;var comparisonsCommon={isMemberThatUsesTestOnValues:isMemberThatUsesTestOnValues_1};/*
 * # types
 * This folder is for SetTypes that are used to compare against a single value.
 * For example, `new comparisons.GreaterThan(5)` is used to compare against 
 */// this is a placeholder for types that have cycle dependencies
var types={};function NotIdentity(value){this.value=value;}// Not comparisons ---------
var Identity$1=set_1$1$1.Identity;// Only difference is needed w/ universal
set_1$1$1.defineComparison(set_1$1$1.UNIVERSAL,Identity$1,{// A \ B -> what's in b, but not in A
difference:function(universe,value){return new NotIdentity(value);}});// Only difference is needed w/ universal
set_1$1$1.defineComparison(set_1$1$1.UNIVERSAL,NotIdentity,{// A \ B -> what's in b, but not in A
difference:function(universe,not){return not.value;}});set_1$1$1.defineComparison(NotIdentity,NotIdentity,{/*
    // not 5 and not 6
    union: function(obj1, obj2){
        // must unroll the value

    },
    // {foo: zed, abc: d}
    intersection: function(obj1, obj2){

    },
    // A \ B -> what's in b, but not in A
    difference: function(obj1, obj2){

    }
    */});set_1$1$1.defineComparison(NotIdentity,Identity$1,{// not 5 and not 6
union:function(not,primitive){// NOT(5) U 5
if(set_1$1$1.isEqual(not.value,primitive)){return set_1$1$1.UNIVERSAL;}// NOT(4) U 6
else {throw new Error("Not,Identity Union is not filled out");}},// {foo: zed, abc: d}
intersection:function(not,primitive){return set_1$1$1.isEqual(!not.value,primitive)?primitive:set_1$1$1.EMPTY;},// A \ B -> what's in b, but not in A
difference:function difference(not,primitive){// NOT(5) \ 3 -> UNDEFINABLE
// NOT(3) \ 3 -> NOT(3)
if(set_1$1$1.isEqual(not.value,primitive)){return not;}else {return set_1$1$1.UNDEFINABLE;}}});set_1$1$1.defineComparison(Identity$1,NotIdentity,{difference:function(primitive,not){if(set_1$1$1.isEqual(primitive,not.value)){return primitive;}else {return set_1$1$1.UNDEFINABLE;}}});NotIdentity.prototype.isMember=function(value){if(this.value&&typeof this.value.isMember==="function"){return !this.value.isMember(value);}else {var values=set_1$1$1.ownAndMemberValue(this.value,value);return values.own!==values.member;}};var valuesNot=types.Not=NotIdentity;var comparisons={All:function(values){this.values=values;}};comparisons.All.prototype.isMember=comparisonsCommon.isMemberThatUsesTestOnValues;var is=comparisons;comparisons.All.test=function(allValues,recordValues){return allValues.every(function(allValue){return recordValues.some(function(recordValue){var values=set_1$1$1.ownAndMemberValue(allValue,recordValue);return values.own===values.member;});});};function makeThrowCannotCompare(type,left,right){return function(){throw new Error("can-query-logic: Cannot perform "+type+" between "+left+" and "+right);};}function throwComparatorAllTypes(type1,type2){return {union:makeThrowCannotCompare("union",type1,type2),difference:makeThrowCannotCompare("difference",type1,type2),intersection:makeThrowCannotCompare("intersection",type1,type2)};}function throwComparatorDifference(type1,type2){return {difference:makeThrowCannotCompare("difference",type1,type2)};}var comparators={UNIVERSAL_All:{difference:function(universe,all){return new valuesNot(all);}},All_UNIVERSAL:{difference:function(){return set_1$1$1.EMPTY;}},All_All:{union:function(a,b){return new is.Or([a,b]);}},In_All:throwComparatorDifference("In","All"),All_In:throwComparatorAllTypes("All","In"),NotIn_All:throwComparatorDifference("NotIn","All"),All_NotIn:throwComparatorAllTypes("All","NotIn"),GreaterThan_All:throwComparatorDifference("GreaterThan","All"),All_GreaterThan:throwComparatorAllTypes("All","GreaterThan"),GreaterThanEqual_All:throwComparatorDifference("GreaterThanEqual","All"),All_GreaterThanEqual:throwComparatorAllTypes("All","GreaterThanEqual"),LessThan_All:throwComparatorDifference("LessThan","All"),All_LessThan:throwComparatorAllTypes("All","LessThan"),LessThanEqual_All:throwComparatorDifference("LessThanEqual","All"),All_LessThanEqual:throwComparatorAllTypes("All","LessThanEqual"),All_And:throwComparatorDifference("All","And"),And_All:throwComparatorAllTypes("And","All"),All_Or:throwComparatorDifference("All","Or"),Or_All:throwComparatorAllTypes("Or","All")};var comparisons_1=comparisons;var comparators_1=comparators;var arrayComparisons={comparisons:comparisons_1,comparators:comparators_1};var isMemberSymbol$2=canSymbol_1_7_0_canSymbol.for("can.isMember");// $ne	Matches all values that are not equal to a specified value.
// $eq	Matches values that are equal to a specified value.
//
// $gt	Matches values that are greater than a specified value.
// $gte	Matches values that are greater than or equal to a specified value.
// $lt	Matches values that are less than a specified value.
// $lte	Matches values that are less than or equal to a specified value.
// $in	Matches any of the values specified in an array.
// $nin	Matches none of the values specified in an array.
var comparisons$1=canReflect_1_19_2_canReflect.assign(arrayComparisons.comparisons,{In:function In(values){// TODO: change this to store as `Set` later.
this.values=values;},NotIn:function NotIn(values){this.values=values;},GreaterThan:function GreaterThan(value){this.value=value;},GreaterThanEqual:function GreaterThanEqual(value){this.value=value;},LessThan:function LessThan(value){this.value=value;},LessThanEqual:function LessThanEqual(value){this.value=value;},// This is used to And something like `GT(3)` n `LT(4)`.
// These are all value comparisons.
And:function ValueAnd(ands){this.values=ands;},// This is used to OR something like `GT(4)` n `LT(3)`.
// These are all value comparisons.
Or:function ValueOr(ors){this.values=ors;}});comparisons$1.Or.prototype.orValues=function(){return this.values;};comparisons$1.In.test=function(values,b){return values.some(function(value){var values=set_1$1$1.ownAndMemberValue(value,b);return values.own===values.member;});};comparisons$1.NotIn.test=function(values,b){return !comparisons$1.In.test(values,b);};comparisons$1.NotIn.testValue=function(value,b){return !comparisons$1.In.testValue(value,b);};function nullIsFalse(test){return function(arg1,arg2){if(arg1==null||arg2==null){return false;}else {return test(arg1,arg2);}};}function nullIsFalseTwoIsOk(test){return function(arg1,arg2){if(arg1===arg2){return true;}else if(arg1==null||arg2==null){return false;}else {return test(arg1,arg2);}};}comparisons$1.GreaterThan.test=nullIsFalse(function(a,b){return a>b;});comparisons$1.GreaterThanEqual.test=nullIsFalseTwoIsOk(function(a,b){return a>=b;});comparisons$1.LessThan.test=nullIsFalse(function(a,b){return a<b;});comparisons$1.LessThanEqual.test=nullIsFalseTwoIsOk(function(a,b){return a<=b;});function isMemberThatUsesTest(value){var values=set_1$1$1.ownAndMemberValue(this.value,value);return this.constructor.test(values.member,values.own);}[comparisons$1.GreaterThan,comparisons$1.GreaterThanEqual,comparisons$1.LessThan,comparisons$1.LessThanEqual,comparisons$1.LessThan].forEach(function(Type){Type.prototype.isMember=isMemberThatUsesTest;});[comparisons$1.In,comparisons$1.NotIn].forEach(function(Type){Type.prototype.isMember=comparisonsCommon.isMemberThatUsesTestOnValues;});comparisons$1.And.prototype.isMember=function(value){return this.values.every(function(and){return and.isMember(value);});};comparisons$1.Or.prototype.isMember=function(value){return this.values.some(function(and){return and.isMember(value);});};Object.keys(comparisons$1).forEach(function(name){comparisons$1[name].prototype[isMemberSymbol$2]=comparisons$1[name].prototype.isMember;});var is$1=comparisons$1;function makeNot(Type){return {test:function(vA,vB){return !Type.test(vA,vB);}};}function makeEnum(type,Type,emptyResult){return function(a,b){var result=arrayUnionIntersectionDifference(a.values,b.values);if(result[type].length){return new Type(result[type]);}else {return emptyResult||set_1$1$1.EMPTY;}};}function swapArgs(fn){return function(a,b){return fn(b,a);};}function makeSecondValue(Type,prop){return function(universe,value){return new Type(value[prop||"value"]);};}function returnBiggerValue(gtA,gtB){if(gtA.value<gtB.value){return gtB;}else {return gtA;}}function returnSmallerValue(gtA,gtB){if(gtA.value>gtB.value){return gtB;}else {return gtA;}}function makeAndIf(Comparison,Type){return function(ltA,ltB){if(Comparison.test(ltA.value,ltB.value)){return makeAnd([ltA,new Type(ltB.value)]);}else {return set_1$1$1.EMPTY;}};}function make_InIfEqual_else_andIf(Comparison,Type){var elseCase=makeAndIf(Comparison,Type);return function(a,b){if(a.value===b.value){return new is$1.In([a.value]);}else {return elseCase(a,b);}};}function make_filterFirstValueAgainstSecond(Comparison,Type,defaultReturn){return function(inSet,gt){var values=inSet.values.filter(function(value){return Comparison.test(gt,value);});return values.length?new Type(values):defaultReturn||set_1$1$1.EMPTY;};}var isMemberTest={test:function isMemberTest(set,value){return set.isMember(value);}};function isOr(value){return value instanceof is$1.Or;}function isAnd(value){return value instanceof is$1.And;}function isAndOrOr(value){return isAnd(value)||isOr(value);}// `value` - has a test function to check values
// `with` - the type we use to combined with the "other" value.
// `combinedUsing` - If there are values, how do we stick it together with `with`
function combineFilterFirstValuesAgainstSecond(options){return function(inSet,gt){var values=inSet.values.filter(function(value){return options.values.test(gt,value);});var range;if(options.complement){range=set_1$1$1.difference(set_1$1$1.UNIVERSAL,gt);}else if(options.with){range=new options.with(gt.value);}else {range=gt;}return values.length?options.combinedUsing([new options.arePut(values),range]):range;};}function makeOrUnless(Comparison,result){return function(setA,setB){if(Comparison.test(setA.value,setB.value)){return result||set_1$1$1.UNIVERSAL;}else {return makeOr([setA,setB]);}};}function makeAndUnless(Comparison,result){return function(setA,setB){if(Comparison.test(setA.value,setB.value)){return result||set_1$1$1.EMPTY;}else {return makeAnd([setA,setB]);}};}function makeComplementSecondArgIf(Comparison){return function(setA,setB){if(Comparison.test(setA.value,setB.value)){return set_1$1$1.difference(set_1$1$1.UNIVERSAL,setB);}else {return setA;}};}function makeAnd(ands){return comparisons$1.And?new comparisons$1.And(ands):set_1$1$1.UNDEFINABLE;}function makeOr(ors){return comparisons$1.Or?new comparisons$1.Or(ors):set_1$1$1.UNDEFINABLE;}function combineValueWithRangeCheck(inSet,rangeSet,RangeOrEqType){var gte=new RangeOrEqType(rangeSet.value);var leftValues=inSet.values.filter(function(value){return !gte.isMember(value);});if(!leftValues.length){return gte;}if(leftValues.length<inSet.values.length){return makeOr([new is$1.In(leftValues),gte]);}else {return makeOr([inSet,rangeSet]);}}// This tries to unify In([1]) with GT(1) -> GTE(1)
function makeOrWithInAndRange(inSet,rangeSet){if(rangeSet instanceof is$1.Or){var firstResult=makeOrWithInAndRange(inSet,rangeSet.values[0]);if(!(firstResult instanceof is$1.Or)){return set_1$1$1.union(firstResult,rangeSet.values[1]);}var secondResult=makeOrWithInAndRange(inSet,rangeSet.values[1]);if(!(secondResult instanceof is$1.Or)){return set_1$1$1.union(secondResult,rangeSet.values[0]);}return makeOr([inSet,rangeSet]);}else {if(rangeSet instanceof is$1.GreaterThan){return combineValueWithRangeCheck(inSet,rangeSet,is$1.GreaterThanEqual);}if(rangeSet instanceof is$1.LessThan){return combineValueWithRangeCheck(inSet,rangeSet,is$1.LessThanEqual);}return makeOr([inSet,rangeSet]);}}var In_RANGE={union:combineFilterFirstValuesAgainstSecond({values:makeNot(isMemberTest),arePut:is$1.In,combinedUsing:function(ors){return makeOrWithInAndRange(ors[0],ors[1]);}}),intersection:make_filterFirstValueAgainstSecond(isMemberTest,is$1.In,set_1$1$1.EMPTY),difference:make_filterFirstValueAgainstSecond(makeNot(isMemberTest),is$1.In,set_1$1$1.EMPTY)};var RANGE_IN={difference:swapArgs(combineFilterFirstValuesAgainstSecond({values:isMemberTest,arePut:is$1.NotIn,combinedUsing:makeAnd}))};var NotIn_RANGE=function(){return {union:make_filterFirstValueAgainstSecond(makeNot(isMemberTest),is$1.NotIn,set_1$1$1.UNIVERSAL),intersection:combineFilterFirstValuesAgainstSecond({values:isMemberTest,arePut:is$1.NotIn,combinedUsing:makeAnd}),difference:combineFilterFirstValuesAgainstSecond({values:makeNot(isMemberTest),arePut:is$1.NotIn,combinedUsing:makeAnd,complement:true})};};var RANGE_NotIn={difference:swapArgs(make_filterFirstValueAgainstSecond(isMemberTest,is$1.In,set_1$1$1.EMPTY))};var RANGE_And_Union=function(gt,and){var union1=set_1$1$1.union(gt,and.values[0]);var union2=set_1$1$1.union(gt,and.values[1]);if(!isAndOrOr(union1)&&!isAndOrOr(union2)){return set_1$1$1.intersection(union1,union2);}else {return new is$1.Or([gt,and]);}};var RANGE_And_Intersection=function(gt,and){var and1=and.values[0],and2=and.values[1];var intersection1=set_1$1$1.intersection(gt,and1);var intersection2=set_1$1$1.intersection(gt,and2);if(intersection1===set_1$1$1.EMPTY||intersection2===set_1$1$1.EMPTY){return set_1$1$1.EMPTY;}if(!isAndOrOr(intersection1)){return new set_1$1$1.intersection(intersection1,and2);}if(!isAndOrOr(intersection2)){return new set_1$1$1.intersection(intersection2,and1);}else {return new is$1.And([gt,and]);}};var RANGE_And_Difference=function(gt,and){var and1=and.values[0],and2=and.values[1];var difference1=set_1$1$1.difference(gt,and1);var difference2=set_1$1$1.difference(gt,and2);if(difference1===set_1$1$1.EMPTY){return difference2;}if(difference2===set_1$1$1.EMPTY){return difference1;}return new is$1.Or([difference1,difference2]);};var And_RANGE_Difference=function(and,gt){var and1=and.values[0],and2=and.values[1];var difference1=set_1$1$1.difference(and1,gt);var difference2=set_1$1$1.difference(and2,gt);return set_1$1$1.intersection(difference1,difference2);};var RANGE_Or={union:function(gt,or){var or1=or.values[0],or2=or.values[1];var union1=set_1$1$1.union(gt,or1);if(!isAndOrOr(union1)){return set_1$1$1.union(union1,or2);}var union2=set_1$1$1.union(gt,or2);if(!isAndOrOr(union2)){return set_1$1$1.union(or1,union2);}else {return new is$1.Or([gt,or]);}},intersection:function(gt,or){var or1=or.values[0],or2=or.values[1];var intersection1=set_1$1$1.intersection(gt,or1);var intersection2=set_1$1$1.intersection(gt,or2);if(intersection1===set_1$1$1.EMPTY){return intersection2;}if(intersection2===set_1$1$1.EMPTY){return intersection1;}return set_1$1$1.union(intersection1,intersection2);},// v \ (a || b) -> (v \ a) n (v \ b)
difference:function(gt,or){var or1=or.values[0],or2=or.values[1];var difference1=set_1$1$1.difference(gt,or1);var difference2=set_1$1$1.difference(gt,or2);return set_1$1$1.intersection(difference1,difference2);}};var Or_RANGE={// ( a || b ) \ v -> (a \ v) U (b \ v)
difference:function(or,gt){var or1=or.values[0],or2=or.values[1];var difference1=set_1$1$1.difference(or1,gt);var difference2=set_1$1$1.difference(or2,gt);return set_1$1$1.union(difference1,difference2);}};var comparators$1=canReflect_1_19_2_canReflect.assign(arrayComparisons.comparators,{// In
In_In:{union:makeEnum("union",is$1.In),intersection:makeEnum("intersection",is$1.In),difference:makeEnum("difference",is$1.In)},UNIVERSAL_In:{difference:makeSecondValue(is$1.NotIn,"values")},In_NotIn:{union:swapArgs(makeEnum("difference",is$1.NotIn,set_1$1$1.UNIVERSAL)),// what does In have on its own
intersection:makeEnum("difference",is$1.In),difference:makeEnum("intersection",is$1.In)},NotIn_In:{difference:makeEnum("union",is$1.NotIn)},In_GreaterThan:In_RANGE,GreaterThan_In:RANGE_IN,In_GreaterThanEqual:In_RANGE,GreaterThanEqual_In:RANGE_IN,In_LessThan:In_RANGE,LessThan_In:RANGE_IN,In_LessThanEqual:In_RANGE,LessThanEqual_In:RANGE_IN,In_And:In_RANGE,And_In:RANGE_IN,In_Or:In_RANGE,Or_In:RANGE_IN,// NotIn ===============================
NotIn_NotIn:{union:makeEnum("intersection",is$1.NotIn,set_1$1$1.UNIVERSAL),intersection:makeEnum("union",is$1.NotIn),difference:makeEnum("difference",is$1.In)},UNIVERSAL_NotIn:{difference:makeSecondValue(is$1.In,"values")},NotIn_GreaterThan:NotIn_RANGE(),GreaterThan_NotIn:RANGE_NotIn,NotIn_GreaterThanEqual:NotIn_RANGE(),GreaterThanEqual_NotIn:RANGE_NotIn,NotIn_LessThan:NotIn_RANGE(),LessThan_NotIn:RANGE_NotIn,NotIn_LessThanEqual:NotIn_RANGE(),LessThanEqual_NotIn:RANGE_NotIn,NotIn_And:NotIn_RANGE(),And_NotIn:RANGE_NotIn,NotIn_Or:NotIn_RANGE(),Or_NotIn:RANGE_NotIn,// GreaterThan ===============================
GreaterThan_GreaterThan:{union:returnSmallerValue,intersection:returnBiggerValue,// {$gt:5} \ {gt: 6} -> AND( {$gt:5}, {$lte: 6} )
difference:makeAndIf(is$1.LessThan,is$1.LessThanEqual)},UNIVERSAL_GreaterThan:{difference:makeSecondValue(is$1.LessThanEqual)},GreaterThan_GreaterThanEqual:{union:returnSmallerValue,intersection:returnBiggerValue,// {$gt:5} \ {gte: 6} -> AND( {$gt:5}, {$lt: 6} )
difference:makeAndIf(is$1.LessThan,is$1.LessThan)},GreaterThanEqual_GreaterThan:{difference:make_InIfEqual_else_andIf(is$1.LessThan,is$1.LessThanEqual)},GreaterThan_LessThan:{union:function(){var makeOrUnlessLessThan=makeOrUnless(is$1.LessThan);return function greaterThan_lessThan_union(a,b){if(comparisons$1.In.test([a.value],b.value)){return new is$1.NotIn([a.value]);}else {return makeOrUnlessLessThan(a,b);}};}(),intersection:makeAndUnless(is$1.GreaterThan),difference:makeComplementSecondArgIf(is$1.LessThan)},LessThan_GreaterThan:{difference:makeComplementSecondArgIf(is$1.GreaterThan)},GreaterThan_LessThanEqual:{union:makeOrUnless(is$1.LessThanEqual),intersection:makeAndUnless(is$1.GreaterThanEqual),difference:makeComplementSecondArgIf(is$1.LessThanEqual)},LessThanEqual_GreaterThan:{difference:makeComplementSecondArgIf(is$1.GreaterThanEqual)},GreaterThan_And:{union:RANGE_And_Union,intersection:RANGE_And_Intersection,difference:RANGE_And_Difference},And_GreaterThan:{difference:And_RANGE_Difference},GreaterThan_Or:RANGE_Or,Or_GreaterThan:Or_RANGE,// GreaterThanEqual =========
GreaterThanEqual_GreaterThanEqual:{union:returnSmallerValue,intersection:returnBiggerValue,// {gte: 2} \ {gte: 3} = {gte: 2} AND {lt: 3}
difference:makeAndIf(is$1.LessThan,is$1.LessThan)},UNIVERSAL_GreaterThanEqual:{difference:makeSecondValue(is$1.LessThan)},GreaterThanEqual_LessThan:{union:makeOrUnless(is$1.LessThanEqual),intersection:makeAndUnless(is$1.GreaterThanEqual),difference:makeComplementSecondArgIf(is$1.LessThanEqual)},LessThan_GreaterThanEqual:{difference:makeComplementSecondArgIf(is$1.GreaterThanEqual)},GreaterThanEqual_LessThanEqual:{union:makeOrUnless(is$1.LessThanEqual),// intersect on a number
intersection:function(){var makeAnd=makeAndUnless(is$1.GreaterThan);return function gte_lte_intersection(gte,lte){var inSet=new is$1.In([gte.value]);if(inSet.isMember(lte.value)){return inSet;}else {return makeAnd(gte,lte);}};}(),difference:makeComplementSecondArgIf(is$1.LessThanEqual)},LessThanEqual_GreaterThanEqual:{difference:makeComplementSecondArgIf(is$1.GreaterThanEqual)},GreaterThanEqual_And:{union:RANGE_And_Union,intersection:RANGE_And_Intersection,difference:RANGE_And_Difference},And_GreaterThanEqual:{difference:And_RANGE_Difference},GreaterThanEqual_Or:RANGE_Or,Or_GreaterThanEqual:Or_RANGE,// LessThan
LessThan_LessThan:{union:returnBiggerValue,intersection:returnSmallerValue,difference:makeAndIf(is$1.GreaterThan,is$1.GreaterThanEqual)},UNIVERSAL_LessThan:{difference:makeSecondValue(is$1.GreaterThanEqual)},LessThan_LessThanEqual:{union:returnBiggerValue,intersection:returnSmallerValue,// {lt: 3} \ {lte: 2} -> {lt: 3} AND {gt: 2}
difference:makeAndIf(is$1.GreaterThan,is$1.GreaterThan)},LessThanEqual_LessThan:{difference:make_InIfEqual_else_andIf(is$1.GreaterThanEqual,is$1.GreaterThanEqual)},LessThan_And:{union:RANGE_And_Union,intersection:RANGE_And_Intersection,difference:RANGE_And_Difference},And_LessThan:{difference:And_RANGE_Difference},LessThan_Or:RANGE_Or,Or_LessThan:Or_RANGE,// LessThanEqual
LessThanEqual_LessThanEqual:{union:returnBiggerValue,intersection:returnSmallerValue,difference:function(lteA,lteB){if(lteA.value>=lteB.value){return makeAnd([lteA,new is$1.GreaterThan(lteB.value)]);}else {return set_1$1$1.EMPTY;}}},UNIVERSAL_LessThanEqual:{difference:makeSecondValue(is$1.GreaterThan)},LessThanEqual_And:{union:RANGE_And_Union,intersection:RANGE_And_Intersection,difference:RANGE_And_Difference},And_LessThanEqual:{difference:And_RANGE_Difference},LessThanEqual_Or:RANGE_Or,Or_LessThanEqual:Or_RANGE,// AND =====
And_And:{// (a n b) U (c n d) => (a U c) n (b U d)?
// union both ways ... if one is unviersal, the other is the result.
// (a ∩ b) ∪ (c ∩ d) where Z = (a ∩ b)
// -> Z ∪ (c ∩ d)
// -> (Z ∪ c) ∩ (Z ∪ d)
// -> ((a ∩ b) ∪ c) ∪ ((a ∩ b) ∪ d)
union:function(and1,and2){var union1=set_1$1$1.union(and1,and2.values[0]);var union2=set_1$1$1.union(and1,and2.values[1]);if(isAndOrOr(union1)||isAndOrOr(union2)){// try the other direction
union1=set_1$1$1.union(and2,and1.values[0]);union2=set_1$1$1.union(and2,and1.values[1]);}if(isAndOrOr(union1)||isAndOrOr(union2)){return new is$1.Or([and1,and2]);}else {return set_1$1$1.intersection(union1,union2);}/*
			var combo1 = [
					set.union(and1.values[0], and2.values[0]),
					set.union(and1.values[1], and2.values[1])
				],
				combo2 = [
					set.union(and1.values[0], and2.values[1]),
					set.union(and1.values[1], and2.values[0])
				];
			if (combo1.every(function(aSet) {
				return set.isEqual(set.UNIVERSAL, aSet);
			})) {
				return set.intersection.apply(set, combo2);
			}
			if (combo2.every(function(aSet) {
				return set.isEqual(set.UNIVERSAL, aSet);
			})) {
				return set.intersection.apply(set, combo1);
			}
			return new is.Or([and1, and2]);*/},intersection:function(and1,and2){var intersection1=set_1$1$1.intersection(and1.values[0],and2.values[0]);var intersection2=set_1$1$1.intersection(and1.values[1],and2.values[1]);if(!isAndOrOr(intersection1)||!isAndOrOr(intersection2)){return set_1$1$1.intersection(intersection1,intersection2);}intersection1=set_1$1$1.intersection(and1.values[0],and2.values[1]);intersection2=set_1$1$1.intersection(and1.values[1],and2.values[0]);if(!isAndOrOr(intersection1)||!isAndOrOr(intersection2)){return set_1$1$1.intersection(intersection1,intersection2);}else {return new is$1.And([and1,and2]);}},// (a ∩ b) \ (c ∩ d) where Z = (a ∩ b)
// -> Z \ (c ∩ d)
// -> (Z \ c) ∪ (Z \ d)
// -> ((a ∩ b) \ c) ∪ ((a ∩ b) \ d)
difference:function(){return function(and1,and2){var d1=set_1$1$1.difference(and1,and2.values[0]);var d2=set_1$1$1.difference(and1,and2.values[1]);return set_1$1$1.union(d1,d2);};/*
			function getDiffIfPartnerIsEmptyAndOtherComboNotDisjoint(inOrderDiffs, reverseOrderDiffs, diffedAnd) {
				var diff;
				if (inOrderDiffs[0] === set.EMPTY) {
					diff = inOrderDiffs[1];
				}
				if (inOrderDiffs[1] === set.EMPTY) {
					diff = inOrderDiffs[0];
				}
				if (diff) {
					// check if a diff equals itself (and therefor is disjoint)

					if (set.isEqual(diffedAnd.values[0], reverseOrderDiffs[0] ) ) {
						// is disjoint
						return diffedAnd;
					}
					if ( set.isEqual(diffedAnd.values[1], reverseOrderDiffs[1] ) ) {
						return diffedAnd;
					}
					return diff;
				}
			}
			return function(and1, and2) {
				var inOrderDiffs = [
						set.difference(and1.values[0], and2.values[0]),
						set.difference(and1.values[1], and2.values[1])
					],
					reverseOrderDiffs = [
						set.difference(and1.values[0], and2.values[1]),
						set.difference(and1.values[1], and2.values[0])
					];

				var diff = getDiffIfPartnerIsEmptyAndOtherComboNotDisjoint(inOrderDiffs, reverseOrderDiffs, and1);
				if (diff) {
					return diff;
				}
				diff = getDiffIfPartnerIsEmptyAndOtherComboNotDisjoint(reverseOrderDiffs, inOrderDiffs, and1);
				if (diff) {
					return diff;
				} else {
					// if one is a double And ... that's the outer \\ inner
					if (isAndOrOr(inOrderDiffs[0]) && isAndOrOr(inOrderDiffs[1])) {
						return new is.Or([inOrderDiffs[0], inOrderDiffs[1]]);
					} else if ( isAndOrOr(reverseOrderDiffs[0]) && isAndOrOr(reverseOrderDiffs[1]) ) {
						return new is.Or([reverseOrderDiffs[0], reverseOrderDiffs[1]]);
					}
					return set.UNKNOWABLE;
				}
			};*/}()},And_Or:{// (a ∩ b) ∪ (c u d) where Z = (c u d)
// -> Z u (a ∩ b)
// -> (Z u a) ∩ (Z u b)
// -> ((c u d) u a) ∩ ((c u d) u b)
union:function(and,or){var aUnion=set_1$1$1.union(and.values[0],or);var bUnion=set_1$1$1.union(and.values[1],or);if(!isAndOrOr(aUnion)||!isAndOrOr(bUnion)){return set_1$1$1.intersection(aUnion,bUnion);}return new is$1.Or([and,or]);},// (a ∩ b) ∩ (c u d) where Z = (a ∩ b)
// -> Z ∩ (c u d)
// -> (Z ∩ c) u (Z ∩ d)
// -> (a ∩ b ∩ c) u (a ∩ b ∩ d)
intersection:function(and,or){var aIntersection=set_1$1$1.intersection(and,or.values[0]);var bIntersection=set_1$1$1.intersection(and,or.values[1]);if(!isOr(aIntersection)&&!isOr(bIntersection)){return set_1$1$1.union(aIntersection,bIntersection);}return new is$1.And([and,or]);},// (a ∩ b) \ (c u d) where Z = (a ∩ b)
// -> Z \ (c u d)
// -> (Z \ c) ∩ (Z \ d)
// -> ((a ∩ b) \ c) ∩ ((a ∩ b) \ d)
difference:function(and,or){var aDiff=set_1$1$1.difference(and,or.values[0]);var bDiff=set_1$1$1.difference(and,or.values[1]);return set_1$1$1.intersection(aDiff,bDiff);}},Or_And:{// (a ∪ b) \ (c ∩ d) where Z = (a ∪ b)
// -> Z \ (c ∩ d)
// -> (Z \ c) ∪ (Z \ d)
// -> ((a ∪ b) \ c) ∪ ((a ∪ b) \ d)
difference:function(or,and){var aDiff=set_1$1$1.difference(or,and.values[0]);var bDiff=set_1$1$1.difference(or,and.values[1]);return set_1$1$1.union(aDiff,bDiff);}},UNIVERSAL_And:{difference:function(universe,and){var inverseFirst=set_1$1$1.difference(universe,and.values[0]),inverseSecond=set_1$1$1.difference(universe,and.values[1]);return set_1$1$1.union(inverseFirst,inverseSecond);}},Or_Or:{// (a ∪ b) ∪ (c ∪ d)
union:function(or1,or2){var union1=set_1$1$1.union(or1.values[0],or2.values[0]);var union2=set_1$1$1.union(or1.values[1],or2.values[1]);if(!isAndOrOr(union1)||!isAndOrOr(union2)){return set_1$1$1.union(union1,union2);}union1=set_1$1$1.union(or1.values[0],or2.values[1]);union2=set_1$1$1.union(or1.values[1],or2.values[0]);if(!isAndOrOr(union1)||!isAndOrOr(union2)){return set_1$1$1.union(union1,union2);}else {return new is$1.Or([or1,or2]);}},// (a ∪ b) ∩ (c ∪ d) where Z = (a ∪ b)
// -> Z ∩ (c ∪ d)
// -> (Z ∩ c) ∪ (Z ∪ d)
// -> ((a ∪ b) ∩ c) ∪ ((a ∪ b) ∩ d)
intersection:function(or1,or2){var c=or2.values[0],d=or2.values[1];var intersection1=set_1$1$1.intersection(or1,c);var intersection2=set_1$1$1.intersection(or1,d);if(!isOr(intersection1)||!isOr(intersection2)){return set_1$1$1.union(intersection1,intersection2);}intersection1=set_1$1$1.union(or2,or1.values[0]);intersection2=set_1$1$1.union(or2,or1.values[1]);if(!isOr(intersection1)||!isOr(intersection2)){return set_1$1$1.union(intersection1,intersection2);}else {return new is$1.Or([or1,or2]);}},// (a ∪ b) \ (c ∪ d) where Z = (a ∪ b)
// -> Z \ (c ∪ d)
// -> (Z \ c) ∩ (Z \ d)
// -> ((a ∪ b) \ c) ∩ ((a ∪ b) \ d)
difference:function(or1,or2){var d1=set_1$1$1.difference(or1,or2.values[0]);var d2=set_1$1$1.difference(or1,or2.values[1]);return set_1$1$1.intersection(d1,d2);}},UNIVERSAL_Or:{difference:function(universe,or){var inverseFirst=set_1$1$1.difference(universe,or.values[0]),inverseSecond=set_1$1$1.difference(universe,or.values[1]);return set_1$1$1.intersection(inverseFirst,inverseSecond);}}});// Registers all the comparisons above
var names=Object.keys(comparisons$1);names.forEach(function(name1,i){if(!comparators$1[name1+"_"+name1]){console.warn("no "+name1+"_"+name1);}else {set_1$1$1.defineComparison(comparisons$1[name1],comparisons$1[name1],comparators$1[name1+"_"+name1]);}if(!comparators$1["UNIVERSAL_"+name1]){console.warn("no UNIVERSAL_"+name1);}else {set_1$1$1.defineComparison(set_1$1$1.UNIVERSAL,comparisons$1[name1],comparators$1["UNIVERSAL_"+name1]);}for(var j=i+1;j<names.length;j++){var name2=names[j];if(!comparators$1[name1+"_"+name2]){console.warn("no "+name1+"_"+name2);}else {set_1$1$1.defineComparison(comparisons$1[name1],comparisons$1[name2],comparators$1[name1+"_"+name2]);}if(!comparators$1[name2+"_"+name1]){console.warn("no "+name2+"_"+name1);}else {set_1$1$1.defineComparison(comparisons$1[name2],comparisons$1[name1],comparators$1[name2+"_"+name1]);}}});var comparisons_1$1=comparisons$1;// THIS IS REALLY INTEGERS!!!
var makeRealNumberRangeInclusive=function(min,max){function RealNumberRangeInclusive(start,end){this.start=arguments.length>0?+start:min;this.end=arguments.length>1?+end:max;this.range=new comparisons_1$1.And([new comparisons_1$1.GreaterThanEqual(this.start),new comparisons_1$1.LessThanEqual(this.end)]);}var universeRange=new RealNumberRangeInclusive(min,max);function isUniversal(range){return set_1$1$1.isSubset(universeRange.range,range.range);}function rangeFromAnd(aSet){var values={};aSet.values.forEach(function(value){if(value instanceof comparisons_1$1.GreaterThanEqual){values.start=value.value;}if(value instanceof comparisons_1$1.GreaterThan){values.start=value.value+1;}if(value instanceof comparisons_1$1.LessThanEqual){values.end=value.value;}if(value instanceof comparisons_1$1.LessThan){values.end=value.value-1;}});if("start"in values&&"end"in values){return new RealNumberRangeInclusive(values.start,values.end);}}function toRange(aSet){var range;if(aSet instanceof comparisons_1$1.And){range=rangeFromAnd(aSet);}if(aSet instanceof comparisons_1$1.Or){// check if next to each other ...
var first=rangeFromAnd(aSet.values[0]),second=rangeFromAnd(aSet.values[1]);if(first&&second){var firstValues=first.range.values,secondValues=second.range.values;if(firstValues[1].value+1===secondValues[0].value){range=new RealNumberRangeInclusive(firstValues[0].value,secondValues[1].value);}else if(secondValues[1].value+1===firstValues[0].value){range=new RealNumberRangeInclusive(secondValues[0].value,firstValues[1].value);}else {return set_1$1$1.UNDEFINABLE;}}else {return set_1$1$1.UNDEFINABLE;}}if(range&&isUniversal(range)){return set_1$1$1.UNIVERSAL;}else {return range;}}function intersection(range1,range2){var intersection=toRange(set_1$1$1.intersection(range1.range,range2.range));if(intersection){return intersection;}else {return set_1$1$1.EMPTY;}}function difference(range1,range2){var difference=toRange(set_1$1$1.difference(range1.range,range2.range));if(difference){return difference;}else {return set_1$1$1.EMPTY;}}set_1$1$1.defineComparison(RealNumberRangeInclusive,RealNumberRangeInclusive,{union:function(range1,range2){var union=toRange(set_1$1$1.union(range1.range,range2.range));if(union){return union;}else {return set_1$1$1.EMPTY;}},intersection:intersection,difference:difference});set_1$1$1.defineComparison(set_1$1$1.UNIVERSAL,RealNumberRangeInclusive,{difference:function(universe,range){if(isUniversal(range)){return set_1$1$1.EMPTY;}else {return difference(universeRange,range);}}});return RealNumberRangeInclusive;};// this is intended to be used for $or ... it
// ors expected key values
// `{age: 22}` U `{name: "Justin"}`
function ValuesOr(values){// the if values can be unioned into a single value
this.values=values;}ValuesOr.prototype.isMember=function(props){return this.values.some(function(value){return value&&value.isMember?value.isMember(props):value===props;});};// Or comparisons
set_1$1$1.defineComparison(set_1$1$1.UNIVERSAL,ValuesOr,{difference:function(){return set_1$1$1.UNDEFINABLE;}});var valuesOr=types.ValuesOr=ValuesOr;function ValuesAnd(values){this.values=values;}ValuesAnd.prototype.isMember=function(props){return this.values.every(function(value){return value&&value.isMember?value.isMember(props):value===props;});};// Or comparisons
set_1$1$1.defineComparison(set_1$1$1.UNIVERSAL,ValuesAnd,{difference:function(){return set_1$1$1.UNDEFINABLE;}});var valuesAnd=types.ValuesAnd=ValuesAnd;// Define the sub-types that BasicQuery will use
function KeysAnd(values){var vals=this.values={};canReflect_1_19_2_canReflect.eachKey(values,function(value,key){if(canReflect_1_19_2_canReflect.isPlainObject(value)&&!set_1$1$1.isSpecial(value)){vals[key]=new KeysAnd(value);}else {vals[key]=value;}});}var isMemberSymbol$3=canSymbol_1_7_0_canSymbol.for("can.isMember");KeysAnd.prototype.isMember=function(props,root,rootKey){var equal=true;var preKey=rootKey?rootKey+".":"";canReflect_1_19_2_canReflect.eachKey(this.values,function(value,key){var isMember=value&&(value[isMemberSymbol$3]||value.isMember);if(isMember){if(!isMember.call(value,get_1(props,key),root||props,preKey+key)){equal=false;}}else {if(value!==get_1(props,key)){equal=false;}}});return equal;};// ====== DEFINE COMPARISONS ========
// Helpers ----------------------------
function checkIfUniversalAndReturnUniversal(setA){return set_1$1$1.isEqual(setA,set_1$1$1.UNIVERSAL)?set_1$1$1.UNIVERSAL:setA;}var MISSING={};function eachInUnique(a,acb,b,bcb,defaultReturn){var bCopy=canAssign_1_3_3_canAssign({},b),res;for(var prop in a){res=acb(prop,a[prop],prop in b?b[prop]:MISSING,a,b);if(res!==undefined){return res;}delete bCopy[prop];}for(prop in bCopy){res=bcb(prop,MISSING,b[prop],a,b);if(res!==undefined){return res;}}return defaultReturn;}function keyDiff(valuesA,valuesB){var keyResults=arrayUnionIntersectionDifference(Object.keys(valuesA),Object.keys(valuesB));return {aOnlyKeys:keyResults.difference,aAndBKeys:keyResults.intersection,bOnlyKeys:arrayUnionIntersectionDifference(Object.keys(valuesB),Object.keys(valuesA)).difference};}function notEmpty(value){return value!==set_1$1$1.EMPTY;}// Difference of two ANDs is used two places
function difference(objA,objB){var valuesA=objA.values,valuesB=objB.values,diff=keyDiff(valuesA,valuesB),aOnlyKeys=diff.aOnlyKeys,aAndBKeys=diff.aAndBKeys,bOnlyKeys=diff.bOnlyKeys;// check if all aAndB are equal
// With the shared keys, perform vA \ vB difference. If the DIFFERENCE is:
// - EMPTY: vA has nothing outside vB. vA is equal or subset of vB.
//   - IF sB has keys not in sA, the shared keys will be part of the result;
//     OTHERWISE, if all empty, sA is subset of sB, EMPTY will be returned
//                (even if sA has some extra own keys)
// - NON-EMPTY: something in sA that is not in sB
//   Now we need to figure out if it's "product-able" or not.
//   Product-able -> some part of B is in A.
//   Perform B ∩ A intersection.  INTERSECTION is:
//   - EMPTY: NOT "product-able". DISJOINT.  Must return something.
//   - non-EMPTY: Use to performa  product (in the future.)
var sharedKeysAndValues={},productAbleKeysAndData={},disjointKeysAndValues={};aAndBKeys.forEach(function(key){var difference=set_1$1$1.difference(valuesA[key],valuesB[key]);if(difference===set_1$1$1.EMPTY){sharedKeysAndValues[key]=valuesA[key];}else {var intersection=set_1$1$1.intersection(valuesA[key],valuesB[key]);var isProductable=intersection!==set_1$1$1.EMPTY;if(isProductable){productAbleKeysAndData[key]={// Products with `difference U intersection` would be subtracted
// from produts with `intersection`
difference:difference,intersection:intersection};}else {disjointKeysAndValues[key]=valuesA[key];}}});var productAbleKeys=Object.keys(productAbleKeysAndData);var singleProductKeyAndValue;if(productAbleKeys.length===1){singleProductKeyAndValue={};singleProductKeyAndValue[productAbleKeys[0]]=productAbleKeysAndData[productAbleKeys[0]].difference;}// Now that we've got the shared keys organized
// we can make decisions based on this information
// and A-only and B-only keys.
// if we have any disjoint keys, these sets can not intersect
// {age: 21, ...} \ {age: 22, ...} ->  {age: 21, ...}
if(Object.keys(disjointKeysAndValues).length){return objA;}// contain all the same keys
if(aOnlyKeys.length===0&&bOnlyKeys.length===0){if(productAbleKeys.length>1){return set_1$1$1.UNDEFINABLE;}// {color: [RED, GREEN], ...X...} \ {color: [RED], ...X...} -> {color: [GREEN], ...X...}
else if(productAbleKeys.length===1){canAssign_1_3_3_canAssign(sharedKeysAndValues,singleProductKeyAndValue);return new KeysAnd(sharedKeysAndValues);}else {// {...X...} \ {...X...} -> EMPTY
return set_1$1$1.EMPTY;}}// sA is likely a subset of sB
if(aOnlyKeys.length>0&&bOnlyKeys.length===0){if(productAbleKeys.length>1){return set_1$1$1.UNDEFINABLE;}// {age: 35, color: [RED, GREEN], ...X...} \ {color: [RED], ...X...} -> {age: 35, color: [GREEN], ...X...}
else if(productAbleKeys.length===1){canAssign_1_3_3_canAssign(sharedKeysAndValues,singleProductKeyAndValue);aOnlyKeys.forEach(function(key){sharedKeysAndValues[key]=valuesA[key];});return new KeysAnd(sharedKeysAndValues);}else {// sharedKeysAndValues
return set_1$1$1.EMPTY;}}// sB is likely subset of sA
// {}, {foo: "bar"} -> {foo: NOT("bar")}
if(aOnlyKeys.length===0&&bOnlyKeys.length>0){// Lets not figure out productAbleKeys right now.
// Example:
// {color: [RED, GREEN], ...X...}
// \ {age: 35, color: [RED], ...X...}
// = OR( {color: [GREEN], ...X...}, {age: NOT(35), color: [RED], ...X...} )
if(productAbleKeys.length>1){return set_1$1$1.UNDEFINABLE;}var productAbleOr;if(productAbleKeys.length===1){// we add the intersection to the AND
// the difference is the or
var productableKey=productAbleKeys[0];productAbleOr=canAssign_1_3_3_canAssign({},sharedKeysAndValues);productAbleOr[productableKey]=productAbleKeysAndData[productableKey].difference;sharedKeysAndValues[productableKey]=productAbleKeysAndData[productableKey].intersection;}var ands=bOnlyKeys.map(function(key){var shared=canAssign_1_3_3_canAssign({},sharedKeysAndValues);var result=shared[key]=set_1$1$1.difference(set_1$1$1.UNIVERSAL,valuesB[key]);return result===set_1$1$1.EMPTY?result:new KeysAnd(shared);}).filter(notEmpty);if(productAbleOr){ands.push(new KeysAnd(productAbleOr));}// {c: "g"}
// \ {c: "g", age: 22, name: "justin"}
// = OR[ AND(name: NOT("justin"), c:"g"), AND(age: NOT(22), c: "g") ]
if(ands.length>1){return new types.ValuesOr(ands);}else if(ands.length===1){// {c: "g"}
// \ {c: "g", age: 22}
// = AND(age: NOT(22), c: "g")
return ands[0];}else {return set_1$1$1.EMPTY;}}// {name: "Justin"} \\ {age: 35} -> {name: "Justin", age: NOT(35)}
if(aOnlyKeys.length>0&&bOnlyKeys.length>0){if(productAbleKeys.length){throw new Error("Can't handle any productable keys right now");}// add everything in sA into the result:
aOnlyKeys.forEach(function(key){sharedKeysAndValues[key]=valuesA[key];});if(bOnlyKeys.length===1){// TODO: de-duplicate below
var key=bOnlyKeys[0];var shared=canAssign_1_3_3_canAssign({},sharedKeysAndValues);shared[key]=set_1$1$1.difference(set_1$1$1.UNIVERSAL,valuesB[key]);return new KeysAnd(shared);}// {foo: "bar"} \\ {name: "Justin", age: 35} -> UNDEFINABLE
else {return set_1$1$1.UNDEFINABLE;}}}// KeysAnd comaprisons
set_1$1$1.defineComparison(KeysAnd,KeysAnd,{// {name: "Justin"} or {age: 35} -> new OR[{name: "Justin"},{age: 35}]
// {age: 2} or {age: 3} -> {age: new OR[2,3]}
// {age: 3, name: "Justin"} OR {age: 4} -> {age: 3, name: "Justin"} OR {age: 4}
union:function(objA,objB){// first see if we can union a single property
// {age: 21, color: ["R"]} U {age: 21, color: ["B"]} -> {age: 21, color: ["R","B"]}
var diff=keyDiff(objA.values,objB.values);// find the different keys
var aAndBKeysThatAreNotEqual=[],sameKeys={};diff.aAndBKeys.forEach(function(key){if(!set_1$1$1.isEqual(objA.values[key],objB.values[key])){aAndBKeysThatAreNotEqual.push(key);}else {sameKeys[key]=objA.values[key];}});var aUnequal={},bUnequal={};aAndBKeysThatAreNotEqual.forEach(function(key){aUnequal[key]=objA.values[key];bUnequal[key]=objB.values[key];});// if all keys are shared
if(!diff.aOnlyKeys.length&&!diff.bOnlyKeys.length){if(aAndBKeysThatAreNotEqual.length===1){var keyValue=aAndBKeysThatAreNotEqual[0];var result=sameKeys[keyValue]=set_1$1$1.union(objA.values[keyValue],objB.values[keyValue]);// if there is only one property, we can just return the universal set
return canReflect_1_19_2_canReflect.size(sameKeys)===1&&set_1$1$1.isEqual(result,set_1$1$1.UNIVERSAL)?set_1$1$1.UNIVERSAL:new KeysAnd(sameKeys);}else if(aAndBKeysThatAreNotEqual.length===0){// these things are equal
return objA;}}// If everything shared is the same
if(aAndBKeysThatAreNotEqual.length===0){// the set with the extra keys is a subset
if(diff.aOnlyKeys.length>0&&diff.bOnlyKeys.length===0){return checkIfUniversalAndReturnUniversal(objB);}else if(diff.aOnlyKeys.length===0&&diff.bOnlyKeys.length>0){return checkIfUniversalAndReturnUniversal(objA);}}// (count > 5 && age > 25 ) || (count > 7 && age > 35 && name > "Justin" )
//
// ( age > 25 ) || ( name > "Justin" && age > 35)  A U (B & C) => (A U B) & (A U C)
// ( age > 25 || name > "Justin" ) && (age > 25)
// lets see if one side is different
if(diff.aOnlyKeys.length>0&&diff.bOnlyKeys.length===0){// collect shared value
if(set_1$1$1.isSubset(new KeysAnd(aUnequal),new KeysAnd(bUnequal))){return objB;}}if(diff.bOnlyKeys.length>0&&diff.aOnlyKeys.length===0){// collect shared value
if(set_1$1$1.isSubset(new KeysAnd(bUnequal),new KeysAnd(aUnequal))){return objA;}}return new types.ValuesOr([objA,objB]);},// {foo: zed, abc: d}
intersection:function(objA,objB){// combine all properties ... if the same property, try to take
// an intersection ... if an intersection isn't possible ... freak out?
var valuesA=objA.values,valuesB=objB.values,foundEmpty=false;var resultValues={};eachInUnique(valuesA,function(prop,aVal,bVal){resultValues[prop]=bVal===MISSING?aVal:set_1$1$1.intersection(aVal,bVal);if(resultValues[prop]===set_1$1$1.EMPTY){foundEmpty=true;}},valuesB,function(prop,aVal,bVal){resultValues[prop]=bVal;if(resultValues[prop]===set_1$1$1.EMPTY){foundEmpty=true;}});if(foundEmpty){return set_1$1$1.EMPTY;}else {return new KeysAnd(resultValues);}},// A \ B -> what's in A, but not in B
difference:difference});set_1$1$1.defineComparison(set_1$1$1.UNIVERSAL,KeysAnd,{// A \ B -> what's in A, but not in B
difference:function(universe,and){return difference({values:{}},and);}});var keysAnd=types.KeysAnd=KeysAnd;var andOrNot={KeysAnd:keysAnd,ValuesOr:valuesOr,ValuesNot:valuesNot,ValuesAnd:valuesAnd};// mongo puts these first https://docs.mongodb.com/manual/reference/bson-type-comparison-order/#bson-types-comparison-order
var typeNumber={"undefined":0,"null":1,"number":3,"string":4,"object":5,"boolean":6};var getTypeNumber=function(obj){var type=typeof obj;if(obj===null){type="null";}return typeNumber[type];};var typeCompare={$gt:function(valueA,valueB){return getTypeNumber(valueA)>getTypeNumber(valueB);},$lt:function(valueA,valueB){return getTypeNumber(valueA)<getTypeNumber(valueB);}};var defaultCompare={$gt:function(valueA,valueB){if(valueA==null||valueB==null){return typeCompare.$gt(valueA,valueB);}return valueA>valueB;},$lt:function(valueA,valueB){if(valueA==null||valueB==null){return typeCompare.$gt(valueA,valueB);}return valueA<valueB;}};var helpers$3={// given two arrays of items, combines and only returns the unique ones
uniqueConcat:function(itemsA,itemsB,getId){var ids=new Set();return itemsA.concat(itemsB).filter(function(item){var id=getId(item);if(!ids.has(id)){ids.add(id);return true;}else {return false;}});},// Get the index of an item by it's identity
// Starting from the middle of the items
// return the index of match in the right direction
// or in the left direction
// otherwise return the last index
// see getIdentityIndexByDirection
getIdentityIndex:function(compare,items,props,startIndex,schema){var identity=canReflect_1_19_2_canReflect.getIdentity(props,schema),starterItem=items[startIndex];// check if the middle has a match
if(compare(props,starterItem)===0){if(identity===canReflect_1_19_2_canReflect.getIdentity(starterItem,schema)){return startIndex;}}var rightResult=this.getIdentityIndexByDirection(compare,items,props,startIndex+1,1,schema),leftResult;if(rightResult.index){return rightResult.index;}else {leftResult=this.getIdentityIndexByDirection(compare,items,props,startIndex-1,-1,schema);}if(leftResult.index!==undefined){return leftResult.index;}// put at the last index item that doesn't match an identity
return rightResult.lastIndex;},// Get the index of an item by it's identity
// for a given direction (right or left)
// 1 for right
// -1 for left
getIdentityIndexByDirection:function(compare,items,props,startIndex,direction,schema){var currentIndex=startIndex;var identity=canReflect_1_19_2_canReflect.getIdentity(props,schema);while(currentIndex>=0&&currentIndex<items.length){var currentItem=items[currentIndex];var computed=compare(props,currentItem);if(computed===0){if(identity===canReflect_1_19_2_canReflect.getIdentity(currentItem,schema)){return {index:currentIndex};}}else {return {lastIndex:currentIndex-direction};}currentIndex=currentIndex+direction;}return {lastIndex:currentIndex-direction};},//
getIndex:function(compare,items,props,schema){if(!items){return undefined;}if(items.length===0){return 0;}// check the start and the end
if(compare(props,items[0])===-1){return 0;}else if(compare(props,items[items.length-1])===1){return items.length;}var low=0,high=items.length;// From lodash lodash 4.6.1 <https://lodash.com/>
// Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
while(low<high){var mid=low+high>>>1,item=items[mid],computed=compare(props,item);if(computed===0){return this.getIdentityIndex(compare,items,props,mid,schema);}else if(computed===-1){high=mid;}else {low=mid+1;}}return high;// bisect by calling sortFunc
},sortData:function(sortPropValue){if(sortPropValue[0]==="-"){return {prop:sortPropValue.slice(1),desc:true};}else {return {prop:sortPropValue,desc:false};}},defaultCompare:defaultCompare,typeCompare:typeCompare,sorter:function(sortPropValue,sorters){var data=helpers$3.sortData(sortPropValue);var compare;if(sorters&&sorters[data.prop]){compare=sorters[data.prop];}else {compare=defaultCompare;}return function(item1,item2){var item1Value=canReflect_1_19_2_canReflect.getKeyValue(item1,data.prop);var item2Value=canReflect_1_19_2_canReflect.getKeyValue(item2,data.prop);var temp;if(data.desc){temp=item1Value;item1Value=item2Value;item2Value=temp;}if(compare.$lt(item1Value,item2Value)){return -1;}if(compare.$gt(item1Value,item2Value)){return 1;}return 0;};},valueHydrator:function(value){if(canReflect_1_19_2_canReflect.isBuiltIn(value)){return value;}else {throw new Error("can-query-logic doesn't support comparison operator: "+JSON.stringify(value));}}};var helpers_1$3=helpers$3;// TYPES FOR FILTERING
var KeysAnd$1=andOrNot.KeysAnd,Or=andOrNot.ValuesOr,Not=andOrNot.ValuesNot,And=andOrNot.ValuesAnd;// TYPES FOR PAGINATION
var RecordRange=makeRealNumberRangeInclusive(0,Infinity);// ## makeSort
// Takes:
// - `schemaKeys` - a schema
// - `hydrateAndValue` - Useful to create something like `new GreaterThan( new MaybeDate("10-20-82") )`
//
// Makes a `new Sort(key)` constructor function. This constructor function is used like:
//
// ```
// new Sort("dueDate")
// ```
//
// That constructor function has all the comparison methods (union, intersection, difference)
// built to compare against the `key` value.
//
// Instances of `Sort` have a `compare` method that will
// return a function that can be passed to `Array.prototype.sort`.
//
// That compare function will read the right property and return `-1` or `1`
// WILL MAKE A TYPE FOR SORTING
function makeSort(schema,hydrateAndValue){var schemaKeys=schema.keys;// Makes gt and lt functions that `helpers.sorter` can use
// to make a `compare` function for `Array.sort(compare)`.`
var sorters={};canReflect_1_19_2_canReflect.eachKey(schemaKeys,function(schemaProp,key){sorters[key]={// valueA is GT valueB
$gt:function(valueA,valueB){// handle sorting with null / undefined values
if(valueA==null||valueB==null){return helpers_1$3.typeCompare.$gt(valueA,valueB);}// The following can certainly be done faster
var $gt=hydrateAndValue({$gt:valueB},key,schemaProp,helpers_1$3.valueHydrator);var $eq=hydrateAndValue({$eq:valueA},key,schemaProp,helpers_1$3.valueHydrator);return set_1$1$1.isEqual(set_1$1$1.union($gt,$eq),$gt);/*
				var hydratedIn =  hydrateAndValue({
						$eq: valueA
					}, key, schemaProp,
					helpers.valueHydrator);
				return $gt[require("can-symbol").for("can.isMember")](hydratedIn.values[0]);*/},$lt:function(valueA,valueB){if(valueA==null||valueB==null){return helpers_1$3.typeCompare.$lt(valueA,valueB);}var $lt=hydrateAndValue({$lt:valueB},key,schemaProp,helpers_1$3.valueHydrator);var $eq=hydrateAndValue({$eq:valueA},key,schemaProp,helpers_1$3.valueHydrator);return set_1$1$1.isEqual(set_1$1$1.union($lt,$eq),$lt);/*
				// This doesn't work because it will try to create new SetType(new In([]))
				var hydratedValue =  hydrateAndValue({
						$eq: valueA
					}, key, schemaProp,
					helpers.valueHydrator);
				return $lt[require("can-symbol").for("can.isMember")](hydratedValue);*//*
				// This doesn't work because of maybe types.
				var hydratedIn =  hydrateAndValue({
						$eq: valueA
					}, key, schemaProp,
					helpers.valueHydrator);
				return $lt[require("can-symbol").for("can.isMember")](hydratedIn.values[0]); */}};});function Sort(key){this.key=key;this.schema=schema;this.compare=helpers_1$3.sorter(key,sorters);}function identityIntersection(v1,v2){return v1.key===v2.key?v1:set_1$1$1.EMPTY;}function identityDifference(v1,v2){return v1.key===v2.key?set_1$1$1.EMPTY:v1;}function identityUnion(v1,v2){return v1.key===v2.key?v1:set_1$1$1.UNDEFINABLE;}set_1$1$1.defineComparison(Sort,Sort,{intersection:identityIntersection,difference:identityDifference,union:identityUnion});return Sort;}var DefaultSort=makeSort({keys:{},identity:["id"]});// Define the BasicQuery type
function BasicQuery(query){canAssign_1_3_3_canAssign(this,query);if(!this.filter){this.filter=set_1$1$1.UNIVERSAL;}if(!this.page){this.page=new RecordRange();}if(!this.sort){this.sort="id";}if(typeof this.sort==="string"){this.sort=new DefaultSort(this.sort);}}// BasicQuery's static properties
BasicQuery.KeysAnd=KeysAnd$1;BasicQuery.Or=Or;BasicQuery.Not=Not;BasicQuery.And=And;BasicQuery.RecordRange=RecordRange;BasicQuery.makeSort=makeSort;// BasicQuery's prototype methods.
// These are "additional" features beyond what `set` provides.
// These typically pertain to actual data results of a query.
canReflect_1_19_2_canReflect.assignMap(BasicQuery.prototype,{count:function(){return this.page.end-this.page.start+1;},sortData:function(data){return data.slice(0).sort(this.sort.compare);},filterMembersAndGetCount:function(bData,parentQuery){var parentIsUniversal;if(parentQuery){parentIsUniversal=set_1$1$1.isEqual(parentQuery.page,set_1$1$1.UNIVERSAL);if(parentIsUniversal&&!set_1$1$1.isEqual(parentQuery.filter,set_1$1$1.UNIVERSAL)&&!set_1$1$1.isSubset(this,parentQuery)){throw new Error("can-query-logic: Unable to get members from a set that is not a superset of the current set.");}}else {parentQuery=new BasicQuery();}// reduce response to items in data that meet where criteria
var aData=bData.filter(function(data){return this.filter.isMember(data);},this);var count=aData.length;// sort the data if needed
if(count&&this.sort.key!==parentQuery.sort.key){aData=this.sortData(aData);}var thisIsUniversal=set_1$1$1.isEqual(this.page,set_1$1$1.UNIVERSAL);if(parentIsUniversal==null){parentIsUniversal=set_1$1$1.isEqual(parentQuery.page,set_1$1$1.UNIVERSAL);}if(parentIsUniversal){if(thisIsUniversal){return {data:aData,count:count};}else {return {data:aData.slice(this.page.start,this.page.end+1),count:count};}}// everything but range is equal
else if(this.sort.key===parentQuery.sort.key&&set_1$1$1.isEqual(parentQuery.filter,this.filter)){return {data:aData.slice(this.page.start-parentQuery.page.start,this.page.end-parentQuery.page.start+1),count:count};}else {// parent starts at something ...
throw new Error("can-query-logic: Unable to get members from the parent set for this subset.");}},filterFrom:function(bData,parentQuery){return this.filterMembersAndGetCount(bData,parentQuery).data;},merge:function(b,aItems,bItems,getId){var union=set_1$1$1.union(this,b);if(union===set_1$1$1.UNDEFINABLE){return undefined;}else {var combined=helpers_1$3.uniqueConcat(aItems,bItems,getId);return union.sortData(combined);}},index:function(props,items){// make sure we have the property
var data=helpers_1$3.sortData(this.sort.key);if(!canReflect_1_19_2_canReflect.hasOwnKey(props,data.prop)){return undefined;}// use the passed sort's compare function
return helpers_1$3.getIndex(this.sort.compare,items,props,this.sort.schema);},isMember:function(props){// Use the AND type for it's isMember method
return this.filter.isMember(props);},removePagination:function(){this.page=new RecordRange();}});// Helpers used for the `set` comparators
var CLAUSE_TYPES=["filter","page","sort"];function getDifferentClauseTypes(queryA,queryB){var differentTypes=[];CLAUSE_TYPES.forEach(function(clause){if(!set_1$1$1.isEqual(queryA[clause],queryB[clause])){differentTypes.push(clause);}});return differentTypes;}function isSubset(subLetter,superLetter,meta){if(meta[subLetter+"FilterIsSubset"]){if(meta[superLetter+"PageIsUniversal"]){return true;}else {return meta[subLetter+"PageIsSubset"]&&meta.sortIsEqual;}}else {return false;}}// This type contains a bunch of lazy getters that
// cache their value after being read.
// This helps performance.
function MetaInformation(queryA,queryB){this.queryA=queryA;this.queryB=queryB;}canReflect_1_19_2_canReflect.eachKey({"pageIsEqual":function(){return set_1$1$1.isEqual(this.queryA.page,this.queryB.page);},"aPageIsUniversal":function(){return set_1$1$1.isEqual(this.queryA.page,set_1$1$1.UNIVERSAL);},"bPageIsUniversal":function(){return set_1$1$1.isEqual(this.queryB.page,set_1$1$1.UNIVERSAL);},"pagesAreUniversal":function(){return this.pageIsEqual&&this.aPageIsUniversal;},"sortIsEqual":function(){return this.queryA.sort.key===this.queryB.sort.key;},"aFilterIsSubset":function(){return set_1$1$1.isSubset(this.queryA.filter,this.queryB.filter);},"bFilterIsSubset":function(){return set_1$1$1.isSubset(this.queryB.filter,this.queryA.filter);},"aPageIsSubset":function(){return set_1$1$1.isSubset(this.queryA.page,this.queryB.page);},"bPageIsSubset":function(){return set_1$1$1.isSubset(this.queryB.page,this.queryA.page);},"filterIsEqual":function(){return set_1$1$1.isEqual(this.queryA.filter,this.queryB.filter);},"aIsSubset":function(){return isSubset("a","b",this);},"bIsSubset":function(){return isSubset("b","a",this);}},function(def,prop){canDefineLazyValue_1_1_1_defineLazyValue(MetaInformation.prototype,prop,def);});function metaInformation(queryA,queryB){var meta=new MetaInformation(queryA,queryB);return meta;}// Define comparators
set_1$1$1.defineComparison(BasicQuery,BasicQuery,{union:function(queryA,queryB){var meta=metaInformation(queryA,queryB);var filterUnion=set_1$1$1.union(queryA.filter,queryB.filter);if(meta.pagesAreUniversal){// We ignore the sort.
return new BasicQuery({filter:filterUnion,sort:meta.sortIsEqual?queryA.sort.key:undefined});}if(meta.filterIsEqual){if(meta.sortIsEqual){return new BasicQuery({filter:queryA.filter,sort:queryA.sort.key,page:set_1$1$1.union(queryA.page,queryB.page)});}else {if(meta.aIsSubset){return queryB;}else if(meta.bIsSubset){return queryA;}// we can't specify which pagination would bring in everything.
// but a union does exist.
return set_1$1$1.UNDEFINABLE;}}else {throw new Error("different filters, non-universal pages");}},intersection:function(queryA,queryB){// {age: 35} U {name: "JBM"} -> {age: 35, name: "JBM"}
// { filter: {age: 35},
//   page: {0, 10},
//   sort: "foo" }
// U
// { filter: {name: "JBM"},
//   page: {0, 10},
//   sort: "foo" }
var meta=metaInformation(queryA,queryB);if(meta.pagesAreUniversal){// We ignore the sort.
var filterResult=set_1$1$1.intersection(queryA.filter,queryB.filter);if(set_1$1$1.isDefinedAndHasMembers(filterResult)){return new BasicQuery({filter:filterResult,sort:meta.sortIsEqual?queryA.sort.key:undefined});}else {return filterResult;}}// check if disjoint wheres
if(set_1$1$1.intersection(queryA.filter,queryB.filter)===set_1$1$1.EMPTY){return set_1$1$1.EMPTY;}if(meta.filterIsEqual){if(meta.sortIsEqual){return new BasicQuery({filter:queryA.filter,sort:queryA.sort.key,page:set_1$1$1.intersection(queryA.page,queryB.page)});}else {if(meta.aIsSubset){return queryA;}else if(meta.bIsSubset){return queryB;}return set_1$1$1.UNKNOWABLE;//throw new Error("same filter, different sorts, non universal pages");
}}else {if(meta.aIsSubset){return queryA;}else if(meta.bIsSubset){return queryB;}else {// filters are different, both pagination isn't universal
return set_1$1$1.UNDEFINABLE;}}},difference:function(queryA,queryB){var differentClauses=getDifferentClauseTypes(queryA,queryB);var meta=metaInformation(queryA,queryB);var clause;if(differentClauses.length>1){if(meta.aIsSubset){return set_1$1$1.EMPTY;}if(meta.pagesAreUniversal){return new BasicQuery({filter:set_1$1$1.difference(queryA.filter,queryB.filter),sort:queryA.sort.key});}return set_1$1$1.UNDEFINABLE;}else {switch(clause=differentClauses[0]){// if all the clauses are the same, then there can't be a difference
case undefined:{return set_1$1$1.EMPTY;}case"sort":{// if order is the only difference, then there can't be a difference
// if items are paged but the order is different, though, the sets are not comparable
// Either way, the result is false
if(meta.pagesAreUniversal){return set_1$1$1.EMPTY;}else {return set_1$1$1.UNKNOWABLE;}}case"page":case"filter":{// if there's only one clause to evaluate or the clauses are where + id,
// then we can try to determine the difference set.
// Note that any difference in the ID clause will cause the result to be
// true (if A has no ID but B has ID) or false (any case where A has ID)
var result=set_1$1$1.difference(queryA[clause],queryB[clause]);if(set_1$1$1.isSpecial(result)){return result;}else {var query={filter:queryA.filter,page:queryA.page,sort:queryA.sort.key};query[clause]=result;return new BasicQuery(query);}}}}}});var basicQuery=BasicQuery;var Serializer=function(entries){var serializers=this.serializers=new Map();if(entries){entries.forEach(function(entry){var key=entry[0],value=entry[1];serializers.set(key,value);});}this.serialize=this.serialize.bind(this);};Serializer.prototype.add=function(serializers){canReflect_1_19_2_canReflect.assign(this.serializers,serializers instanceof Serializer?serializers.serializers:serializers);};Serializer.prototype.serialize=function(item){if(!item){return item;}var Type=item.constructor;var serializer=this.serializers.get(Type);if(!serializer){return canReflect_1_19_2_canReflect.serialize(item);}else {return serializer(item,this.serialize);}};var serializer=Serializer;function makeNew(Constructor){return function(value){return new Constructor(value);};}var hydrateMap={};function addHydrateFrom(key,hydrate){hydrateMap[key]=function(value,unknownHydrator){return hydrate(unknownHydrator?unknownHydrator(value[key]):value[key]);};Object.defineProperty(hydrateMap[key],"name",{value:"hydrate "+key,writable:true});}function addHydrateFromValues(key,hydrate){hydrateMap[key]=function(value,unknownHydrator){var clones=value[key];if(unknownHydrator){clones=clones.map(function(value){return unknownHydrator(value);});}return hydrate(clones);};Object.defineProperty(hydrateMap[key],"name",{value:"hydrate "+key,writable:true});}// https://docs.mongodb.com/manual/reference/operator/query-comparison/
addHydrateFrom("$eq",function(value){return new comparisons_1$1.In([value]);});addHydrateFrom("$ne",function(value){return new comparisons_1$1.NotIn([value]);});addHydrateFrom("$gt",makeNew(comparisons_1$1.GreaterThan));addHydrateFrom("$gte",makeNew(comparisons_1$1.GreaterThanEqual));addHydrateFromValues("$in",makeNew(comparisons_1$1.In));addHydrateFrom("$lt",makeNew(comparisons_1$1.LessThan));addHydrateFrom("$lte",makeNew(comparisons_1$1.LessThanEqual));addHydrateFromValues("$all",makeNew(comparisons_1$1.All));// This is a mapping of types to their opposite. The $not hydrator
// uses this to create a more specific type, since they are logical opposites.
var oppositeTypeMap={LessThan:{Type:comparisons_1$1.GreaterThanEqual,prop:"value"},LessThanEqual:{Type:comparisons_1$1.GreaterThan,prop:"value"},GreaterThan:{Type:comparisons_1$1.LessThanEqual,prop:"value"},GreaterThanEqual:{Type:comparisons_1$1.LessThan,prop:"value"},In:{Type:comparisons_1$1.NotIn,prop:"values"},NotIn:{Type:comparisons_1$1.In,prop:"values"}};hydrateMap.$not=function(value,unknownHydrator){// Many nots can be hydrated to their opposite.
var hydratedValue=hydrateValue(value.$not,unknownHydrator);var typeName=hydratedValue.constructor.name||hydratedValue.constructor.toString().match(/^\s*function\s*(\S*)\s*\(/)[1];if(oppositeTypeMap[typeName]){var options=oppositeTypeMap[typeName];var OppositeConstructor=options.Type;var prop=options.prop;return new OppositeConstructor(hydratedValue[prop]);}return new valuesNot(hydratedValue);};addHydrateFromValues("$nin",makeNew(comparisons_1$1.NotIn));var serializer$1=new serializer([[comparisons_1$1.In,function(isIn,serialize){return isIn.values.length===1?serialize(isIn.values[0]):{$in:isIn.values.map(serialize)};}],[comparisons_1$1.NotIn,function(notIn,serialize){return notIn.values.length===1?{$ne:serialize(notIn.values[0])}:{$nin:notIn.values.map(serialize)};}],[comparisons_1$1.GreaterThan,function(gt,serialize){return {$gt:serialize(gt.value)};}],[comparisons_1$1.GreaterThanEqual,function(gte,serialize){return {$gte:serialize(gte.value)};}],[comparisons_1$1.LessThan,function(lt,serialize){return {$lt:serialize(lt.value)};}],[comparisons_1$1.LessThanEqual,function(lt,serialize){return {$lte:serialize(lt.value)};}],[comparisons_1$1.And,function(and,serialize){var obj={};and.values.forEach(function(clause){canReflect_1_19_2_canReflect.assignMap(obj,serialize(clause));});return obj;}],[comparisons_1$1.All,function(all,serialize){return {$all:serialize(all.values)};}]/*[is.Or, function(or, serialize) {
		return {
			$or: or.values.map(function(value) {
				return serialize(value, serialize);
			})
		};
	}]*/]);function hydrateValue(value,hydrateUnknown){if(!hydrateUnknown){hydrateUnknown=function(){throw new Error("can-query-logic doesn't recognize operator: "+JSON.stringify(value));};}if(Array.isArray(value)){return new comparisons_1$1.In(value.map(function(value){return hydrateUnknown(value);}));}else if(value&&typeof value==="object"){var keys=Object.keys(value);var allKeysAreComparisons=keys.every(function(key){return hydrateMap[key];});if(allKeysAreComparisons){var andClauses=keys.map(function(key){var part={};part[key]=value[key];var hydrator=hydrateMap[key];return hydrator(part,hydrateUnknown);});if(andClauses.length>1){return new comparisons_1$1.And(andClauses);}else {return andClauses[0];}}else {return hydrateUnknown(value);}}else {return new comparisons_1$1.In([hydrateUnknown(value)]);}}var comparisons$2={// value - something from a query, for example {$in: [1,2]}
hydrate:hydrateValue,serializer:serializer$1};var schemaHelpers;var schemaHelpers_1=schemaHelpers={// Number is a ranged type
isRangedType:function(Type){return Type&&canReflect_1_19_2_canReflect.isConstructorLike(Type)&&!set_1$1$1.hasComparisons(Type)&&!Type[canSymbol_1_7_0_canSymbol.for("can.SetType")]&&Type.prototype.valueOf&&Type.prototype.valueOf!==Object.prototype.valueOf;},categorizeOrValues:function categorizeOrValues(values){var categories={primitives:[],valueOfTypes:[],others:[]};values.forEach(function(value){if(canReflect_1_19_2_canReflect.isPrimitive(value)){categories.primitives.push(value);}else if(schemaHelpers.isRangedType(value)){categories.valueOfTypes.push(value);}else {categories.others.push(value);}});return categories;}};var comparisonSetTypeSymbol=canSymbol_1_7_0_canSymbol.for("can.ComparisonSetType");var isMemberSymbol$4=canSymbol_1_7_0_canSymbol.for("can.isMember");// This helper function seperates out sets that relate to the "maybe" values
// like `null` or `undefined`. For example, if `rangeToBeSplit`
// is `In([null, 3])`, it will produce `{enum: In([null]), range: In(3)}`
function splitByRangeAndEnum(maybeUniverse,rangeToBeSplit){var enumSet;// If it's an AND
if(rangeToBeSplit instanceof comparisons_1$1.And){// recursively split each value
var sets=rangeToBeSplit.values.map(function(setInAnd){return splitByRangeAndEnum(maybeUniverse,setInAnd);});// take the intersections
return sets.reduce(function(last,maybe){return {range:set_1$1$1.intersection(last.range,maybe.range),enum:set_1$1$1.intersection(last.enum,maybe.enum)};},{range:set_1$1$1.UNIVERSAL,enum:maybeUniverse});}else if(rangeToBeSplit instanceof comparisons_1$1.In){var shouldBeInValues=rangeToBeSplit.values.filter(function(value){return maybeUniverse.isMember(value);});if(shouldBeInValues.length){var valuesCopy=rangeToBeSplit.values.slice(0);canReflect_1_19_2_canReflect.removeValues(valuesCopy,shouldBeInValues);return {enum:new comparisons_1$1.In(shouldBeInValues),range:valuesCopy.length?new comparisons_1$1.In(valuesCopy):set_1$1$1.EMPTY};}else {return {enum:set_1$1$1.EMPTY,range:rangeToBeSplit};}}else if(rangeToBeSplit instanceof comparisons_1$1.NotIn){// Gets the 'maybe' values in the range
enumSet=set_1$1$1.intersection(maybeUniverse,rangeToBeSplit);// We should remove all the values within $in matching an in values.
var rangeValues=rangeToBeSplit.values.filter(function(value){return !maybeUniverse.isMember(value);});return {range:rangeValues.length?new comparisons_1$1.NotIn(rangeValues):set_1$1$1.UNIVERSAL,enum:enumSet};}else {return {enum:set_1$1$1.EMPTY,range:rangeToBeSplit};}}// Builds a type for ranged values plus some other enum values.
// This is great for 'maybe' values. For example, it might be a string OR `null` OR `undefined`
// `makeMaybe([null, undefined])`
function makeMaybe(inValues,makeChildType){var maybeUniverse=new comparisons_1$1.In(inValues);function Maybe(values){// Maybe has two sub-sets:
// - `.range` - Selects the non-enum values. Ex: `GreaterThan(3)`
// - `.enum` - Selects the enum values. This is ALWAYS an `In`. Ex: `In([null])`.
// Maybe is effectively an OR with these two properties.
var result=splitByRangeAndEnum(maybeUniverse,values.range);this.range=result.range||set_1$1$1.EMPTY;if(values.enum){if(result.enum!==set_1$1$1.EMPTY){this.enum=set_1$1$1.union(result.enum,values.enum);}else {this.enum=values.enum;}}else {this.enum=result.enum;}if(this.enum===set_1$1$1.EMPTY&&this.range===set_1$1$1.EMPTY){return set_1$1$1.EMPTY;}}Maybe.prototype.orValues=function(){var values=[];if(this.range!==set_1$1$1.EMPTY){values.push(this.range);}if(this.enum!==set_1$1$1.EMPTY){values.push(this.enum);}return values;};Maybe.prototype[isMemberSymbol$4]=function isMember(){var rangeIsMember=this.range[isMemberSymbol$4]||this.range.isMember,enumIsMember=this.enum[isMemberSymbol$4]||this.enum.isMember;return rangeIsMember.apply(this.range,arguments)||enumIsMember.apply(this.enum,arguments);};set_1$1$1.defineComparison(Maybe,Maybe,{union:function(maybeA,maybeB){var enumSet=set_1$1$1.union(maybeA.enum,maybeB.enum);var range=set_1$1$1.union(maybeA.range,maybeB.range);return new Maybe({enum:enumSet,range:range});},difference:function(maybeA,maybeB){var enumSet=set_1$1$1.difference(maybeA.enum,maybeB.enum);var range=set_1$1$1.difference(maybeA.range,maybeB.range);return new Maybe({enum:enumSet,range:range});},intersection:function(maybeA,maybeB){var enumSet=set_1$1$1.intersection(maybeA.enum,maybeB.enum);var range=set_1$1$1.intersection(maybeA.range,maybeB.range);return new Maybe({enum:enumSet,range:range});}});Maybe.inValues=inValues;set_1$1$1.defineComparison(set_1$1$1.UNIVERSAL,Maybe,{difference:function(universe,maybe){var primary,secondary;if(maybe.range===set_1$1$1.UNIVERSAL){// there is only the enum
return new Maybe({range:maybe.range,enum:set_1$1$1.difference(maybeUniverse,maybe.enum)});}// there is only a primary
if(maybe.enum===set_1$1$1.EMPTY){var rangeSet=set_1$1$1.difference(set_1$1$1.UNIVERSAL,maybe.range);var notPresent=set_1$1$1.difference(maybeUniverse,maybe.range);// make sure they are included
var enumSet=set_1$1$1.difference(notPresent,rangeSet);return new Maybe({range:rangeSet,enum:enumSet});// check enum things that aren't included in primary
}else {primary=set_1$1$1.difference(universe,maybe.range);secondary=set_1$1$1.difference(maybeUniverse,maybe.enum);}return new Maybe({enum:secondary,range:primary});}});makeChildType=makeChildType||function(v){return v;};Maybe.hydrate=function(value,childHydrate){return new Maybe({range:childHydrate(value,makeChildType)});};return Maybe;}makeMaybe.canMakeMaybeSetType=function(Type){var schema=canReflect_1_19_2_canReflect.getSchema(Type);if(schema&&schema.type==="Or"){var categories=schemaHelpers_1.categorizeOrValues(schema.values);return categories.valueOfTypes.length===1&&categories.valueOfTypes.length+categories.primitives.length===schema.values.length;}return false;};// Given an __Or__ type like:
// ```
// var MaybeString = {
//   "can.new"(val){ ... },
// 	 "can.getSchema"(){ return  { type: "Or", values: [String, undefined, null] }
// });
// ```
//
// This creates two types:
// - `Value` - A value type used for what's within `GreaterThan`, etc.
// - `Maybe` - A SetType for this property. It will have `GreaterThan` within its
//            `{enum, range}` sub values.
//
// This creates the outer `SetType` and the innermost `Value` type while the Comparisons
// are used inbetween.
//
// The `MaybeString` could probably be directly used to hydrate values to what they should be.
makeMaybe.makeMaybeSetTypes=function(Type){var schema=canReflect_1_19_2_canReflect.getSchema(Type);var categories=schemaHelpers_1.categorizeOrValues(schema.values);var ComparisonSetType;// No need to build the comparison type if we are given it.
if(Type[comparisonSetTypeSymbol]){ComparisonSetType=Type[comparisonSetTypeSymbol];}else {ComparisonSetType=function(value){this.setValue=value;this.value=canReflect_1_19_2_canReflect.new(Type,value);};ComparisonSetType.prototype.valueOf=function(){return this.value&&typeof this.value.valueOf==="function"?this.value.valueOf():this.value;};canReflect_1_19_2_canReflect.assignSymbols(ComparisonSetType.prototype,{"can.serialize":function(){return this.setValue;}});//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(ComparisonSetType,"name",{value:"Or["+categories.valueOfTypes[0].name+","+categories.primitives.map(String).join(" ")+"]"});}//!steal-remove-end
}return {Maybe:makeMaybe(categories.primitives,function hydrateMaybesValueType(value){return new ComparisonSetType(value);}),ComparisonSetType:ComparisonSetType};};var makeMaybe_1=makeMaybe;var setTypeSymbol=canSymbol_1_7_0_canSymbol.for("can.SetType"),isMemberSymbol$5=canSymbol_1_7_0_canSymbol.for("can.isMember"),newSymbol$2=canSymbol_1_7_0_canSymbol.for("can.new");function makeEnumSetType(allValues,hydrate){function Enum(values){var arr=Array.isArray(values)?values:[values];this.values=hydrate?arr.map(hydrate):arr;}canReflect_1_19_2_canReflect.assignSymbols(Enum.prototype,{"can.serialize":function(){return this.values.length===1?this.values[0]:this.values;}});Enum.prototype[isMemberSymbol$5]=function(value){return this.values.some(function(val){return set_1$1$1.isEqual(val,value);});};Enum.UNIVERSAL=new Enum(allValues);var difference=function(enum1,enum2){var result=arrayUnionIntersectionDifference(enum1.values,enum2.values);if(result.difference.length){return new Enum(result.difference);}else {return set_1$1$1.EMPTY;}};set_1$1$1.defineComparison(Enum,Enum,{union:function(enum1,enum2){var result=arrayUnionIntersectionDifference(enum1.values,enum2.values);if(result.union.length){return new Enum(result.union);}else {return set_1$1$1.EMPTY;}},intersection:function(enum1,enum2){var result=arrayUnionIntersectionDifference(enum1.values,enum2.values);if(result.intersection.length){return new Enum(result.intersection);}else {return set_1$1$1.EMPTY;}},difference:difference});set_1$1$1.defineComparison(Enum,set_1$1$1.UNIVERSAL,{difference:function(enumA){return difference(enumA,{values:allValues.slice(0)});}});set_1$1$1.defineComparison(set_1$1$1.UNIVERSAL,Enum,{difference:function(universe,enumB){return difference({values:allValues.slice(0)},enumB);}});return Enum;}function makeEnum$1(Type,allValues,hydrate){var Enum=makeEnumSetType(allValues,hydrate);Type[setTypeSymbol]=Enum;Type[isMemberSymbol$5]=function(value){return allValues.some(function(val){return set_1$1$1.isEqual(val,value);});};return Enum;}makeEnum$1.canMakeEnumSetType=function(Type){var schema=canReflect_1_19_2_canReflect.getSchema(Type);if(schema&&schema.type==="Or"){var categories=schemaHelpers_1.categorizeOrValues(schema.values);return categories.primitives.length===schema.values.length;}return false;};makeEnum$1.makeEnumSetType=function(Type){var schema=canReflect_1_19_2_canReflect.getSchema(Type);var categories=schemaHelpers_1.categorizeOrValues(schema.values);var hydrate=Type[newSymbol$2]?Type[newSymbol$2].bind(Type):undefined;return makeEnumSetType(categories.primitives,hydrate);};var makeEnum_1=makeEnum$1;var setTypeSymbol$1=canSymbol_1_7_0_canSymbol.for("can.SetType");var schemaSymbol=canSymbol_1_7_0_canSymbol.for("can.getSchema");var defaultQuery=new basicQuery({});function getSchemaProperties(value){var constructor=value.constructor;if(constructor&&constructor[schemaSymbol]){var schema=constructor[schemaSymbol]();return schema.keys||{};}else {return {};}}function hydrateFilter(values,schemaProperties,hydrateUnknown){var valuesIsObject=values&&typeof values==="object";if(valuesIsObject&&"$or"in values){return hydrateOrs(values.$or,schemaProperties,hydrateUnknown);}else if(valuesIsObject&&"$and"in values){return hydrateAnds(values.$and,schemaProperties,hydrateUnknown);}else {return hydrateAndValues(values,schemaProperties,hydrateUnknown);}}var setTypeMap=new WeakMap();// This is used to hydrate a value directly within a `filter`'s And.
function hydrateAndValue(value,prop,SchemaType,hydrateChild){// The `SchemaType` is the type of value on `instances` of
// the schema. `Instances` values are different from `Set` values.
if(SchemaType){// If there's a `SetType`, we will use that
var SetType=SchemaType[setTypeSymbol$1];if(SetType){/// If it exposes a hydrate, this means it can use the current hydrator to
// hydrate its children.
// I'm not sure why it's not taking the `unknown` hydrator instead.
if(SetType.hydrate){return SetType.hydrate(value,comparisons$2.hydrate);}// If the SetType implemented `union`, `intersection`, `difference`
// We can create instances of it directly.
else if(set_1$1$1.hasComparisons(SetType)){// Todo ... canReflect.new
return new SetType(value);}// If the SetType did not implement the comparison methods,
// it's probably just a "Value" comparison type. We will hydrate
// as a comparison converter, but create an instance of this `"Value"`
// comparison type within the comparison converter.
else {// inner types
return comparisons$2.hydrate(value,function(value){return new SetType(value);});}}else {// There is a `SchemaType`, but it doesn't have a `SetType`.
// Can we create the SetType from the `SchemaType`?
if(makeEnum_1.canMakeEnumSetType(SchemaType)){if(!setTypeMap.has(SchemaType)){setTypeMap.set(SchemaType,makeEnum_1.makeEnumSetType(SchemaType));}SetType=setTypeMap.get(SchemaType);return new SetType(value);}// It could also have a `ComparisonSetType` which are the values
// within the Maybe type.
else if(makeMaybe_1.canMakeMaybeSetType(SchemaType)){if(!setTypeMap.has(SchemaType)){setTypeMap.set(SchemaType,makeMaybe_1.makeMaybeSetTypes(SchemaType));}SetType=setTypeMap.get(SchemaType).Maybe;return SetType.hydrate(value,comparisons$2.hydrate);}// We can't create the `SetType`, so lets hydrate with the default behavior.
else {return comparisons$2.hydrate(value,hydrateChild);}}}else {// HERE {$gt: 1} -> new is.GreaterThan(1)
return comparisons$2.hydrate(value,hydrateChild);}}function hydrateAndValues(values,schemaProperties,hydrateUnknown){schemaProperties=schemaProperties||{};function hydrateChild(value){if(value){if(Array.isArray(value)){return value.map(hydrateUnknown);}else if(canReflect_1_19_2_canReflect.isPlainObject(value)){// lets try to get the schema ...
return hydrateAndValues(value,getSchemaProperties(value));}}if(hydrateUnknown){return hydrateUnknown(value);}else {return value;}}var clone={};canReflect_1_19_2_canReflect.eachKey(values,function(value,prop){clone[prop]=hydrateAndValue(value,prop,schemaProperties[prop],hydrateChild);});return new basicQuery.KeysAnd(clone);}// This tries to combine a bunch of OR-ed ANDS into a single AND.
// Example: [{name: "j", age: 3},{name: "j", age: 4}] //-> {name: "j", age: in[3,4]}
function combineAnds(ands){var firstKeys=Object.keys(ands[0].values);var keys={};var keysCompare=new comparisons_1$1.In(firstKeys);firstKeys.map(function(key){keys[key]=[];});var sameKeys=ands.every(function(and){// have to have the same keys
if(!set_1$1$1.isEqual(keysCompare,new comparisons_1$1.In(Object.keys(and.values)))){return false;}canReflect_1_19_2_canReflect.eachKey(and.values,function(value,key){keys[key].push(value);});return true;});if(!sameKeys){return;}// now try to union everything and see if it simplifies ...
var unequalKeys=[];firstKeys.forEach(function(key){var isEqual=keys[key].reduce(function(newSet,lastSetOrFalse){if(lastSetOrFalse===false){return false;}if(lastSetOrFalse===undefined){return newSet;}var res=set_1$1$1.isEqual(newSet,lastSetOrFalse);return res?newSet:false;});if(!isEqual){unequalKeys.push(key);}});if(unequalKeys.length!==1){return;}var unionKey=unequalKeys[0];// lets see if we can union that one value
var unioned=keys[unionKey].reduce(function(cur,last){return set_1$1$1.union(cur,last);},set_1$1$1.EMPTY);var result={};firstKeys.map(function(key){result[key]=keys[key][0];});result[unionKey]=unioned;return new basicQuery.KeysAnd(result);}function hydrateOrs(values,schemaProperties,hydrateUnknown){var comparisons=values.map(function(value){return hydrateAndValues(value,schemaProperties,hydrateUnknown);});var combined=combineAnds(comparisons);if(combined){return combined;}return new basicQuery.Or(comparisons);}function hydrateAnds(values,schemaProperties,hydrateUnknown){var comparisons=values.map(function(value){return hydrateAndValues(value,schemaProperties,hydrateUnknown);});return new basicQuery.And(comparisons);}function recursivelyAddOrs(ors,value,serializer$$1,key){value.orValues().forEach(function(orValue){if(typeof orValue.orValues==="function"){recursivelyAddOrs(ors,orValue,serializer$$1,key);}else {var result={};result[key]=serializer$$1(orValue);ors.push(result);}});}var basicQuery$1=function(schema){var id=schema.identity&&schema.identity[0];var keys=schema.keys;var serializeMap=[[basicQuery.Or,function(or,serializer$$1){return or.values.map(function(value){return serializer$$1(value);});}],[basicQuery.And,function(and,serializer$$1){return {$and:and.values.map(function(value){return serializer$$1(value);})};}],[basicQuery.Not,function(nots,serializer$$1){return {$not:serializer$$1(nots.value)};}],// this destructures ANDs with OR-like clauses
[basicQuery.KeysAnd,function(and,serializer$$1){var ors=[];var result={};canReflect_1_19_2_canReflect.eachKey(and.values,function(value,key){// is value universal ... if not, we don't need to add anything
if(typeof value.orValues==="function"){recursivelyAddOrs(ors,value,serializer$$1,key);}else {result[key]=serializer$$1(value);}});if(ors.length){if(ors.length===1){return ors[0];}else {return {$or:ors.map(function(orPart){return canReflect_1_19_2_canReflect.assign(canReflect_1_19_2_canReflect.serialize(result),orPart);})};}}else {return result;}}],[basicQuery.RecordRange,function(range){return {start:range.start,end:range.end};}],[basicQuery,function(basicQuery$$1,childSerializer){var filter=set_1$1$1.isEqual(basicQuery$$1.filter,set_1$1$1.UNIVERSAL)?{}:childSerializer(basicQuery$$1.filter);var res={};if(canReflect_1_19_2_canReflect.size(filter)!==0){res.filter=filter;}if(!set_1$1$1.isEqual(basicQuery$$1.page,defaultQuery.page)){// we always provide the start, even if it's 0
res.page={start:basicQuery$$1.page.start};if(basicQuery$$1.page.end!==defaultQuery.page.end){res.page.end=basicQuery$$1.page.end;}}if(basicQuery$$1.sort.key!==id){res.sort=basicQuery$$1.sort.key;}return res;}]];// Makes a sort type that can make a compare function using the SetType
var Sort=basicQuery.makeSort(schema,hydrateAndValue);var serializer$$1=new serializer(serializeMap);serializer$$1.add(comparisons$2.serializer);return {hydrate:function(data){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var AcceptedFields=makeEnum_1(function(){},["filter","sort","page"]);var diff=set_1$1$1.difference(new AcceptedFields(Object.keys(data)),AcceptedFields.UNIVERSAL);if(diff.values&&diff.values.length){dev.warn("can-query-logic: Ignoring keys: "+diff.values.join(", ")+".");}}//!steal-remove-end
var filter=canReflect_1_19_2_canReflect.serialize(data.filter);// this mutates
var filterAnd=hydrateFilter(filter,keys,helpers_1$3.valueHydrator);// Conver the filter arguments
var query={filter:filterAnd};if(data.page){query.page=new basicQuery.RecordRange(data.page.start,data.page.end);}if(data.sort){query.sort=new Sort(data.sort);}else {query.sort=new Sort(id);}return new basicQuery(query);},serializer:serializer$$1};};var schemaSymbol$1=canSymbol_1_7_0_canSymbol.for("can.getSchema");var newSymbol$3=canSymbol_1_7_0_canSymbol.for("can.new");// Creates an algebra used to convert primitives to types and back
function QueryLogic(Type,options){Type=Type||{};var passedHydrator=options&&options.toQuery;var passedSerializer=options&&options.toParams;var schema;if(Type[schemaSymbol$1]){schema=Type[schemaSymbol$1]();}else {schema=Type;}// check that the basics are here
var id=schema.identity&&schema.identity[0];if(!id){//console.warn("can-query given a type without an identity schema.  Using `id` as the identity id.");
schema.identity=["id"];}var converter=basicQuery$1(schema),hydrate,serialize;if(passedHydrator){hydrate=function(query){return converter.hydrate(passedHydrator(query));};}else {hydrate=converter.hydrate;}if(passedSerializer){serialize=function(query){return passedSerializer(converter.serializer.serialize(query));};}else {serialize=converter.serializer.serialize;}this.hydrate=hydrate;this.serialize=serialize;this.schema=schema;}function makeNewSet(prop){return function(qA,qB){var queryA=this.hydrate(qA),queryB=this.hydrate(qB);var unionQuery=set_1$1$1[prop](queryA,queryB);return this.serialize(unionQuery);};}function makeReturnValue(prop){return function(qA,qB){var queryA=this.hydrate(qA),queryB=this.hydrate(qB);return set_1$1$1[prop](queryA,queryB);};}canReflect_1_19_2_canReflect.assignSymbols(QueryLogic.prototype,{"can.getSchema":function(){return this.schema;}});canReflect_1_19_2_canReflect.assign(QueryLogic.prototype,{union:makeNewSet("union"),difference:makeNewSet("difference"),intersection:makeNewSet("intersection"),isEqual:makeReturnValue("isEqual"),isProperSubset:makeReturnValue("isProperSubset"),isSubset:makeReturnValue("isSubset"),isSpecial:set_1$1$1.isSpecial,isDefinedAndHasMembers:set_1$1$1.isDefinedAndHasMembers,count:function(a){var queryA=this.hydrate(a);return queryA.page.end-queryA.page.start+1;},// identity keys
identityKeys:function(){//console.warn("you probably can get the identity keys some other way");
return this.schema.identity;},filterMembers:function(a,b,bData){var queryA=this.hydrate(a);if(arguments.length>=3){var queryB=this.hydrate(b);return queryA.filterFrom(bData,queryB);}else {return queryA.filterFrom(b);}},// filterMembersAndGetCount
filterMembersAndGetCount:function(a,b,bData){var queryA=this.hydrate(a),queryB=this.hydrate(b);return queryA.filterMembersAndGetCount(bData,queryB);},// unionMembers
unionMembers:function(a,b,aData,bData){var queryA=this.hydrate(a),queryB=this.hydrate(b);var schema=this.schema;return queryA.merge(queryB,aData,bData,function(obj){return canReflect_1_19_2_canReflect.getIdentity(obj,schema);});},// isMember
isMember:function(query,props){return this.hydrate(query).isMember(props);},memberIdentity:function(props){// console.warn("you probably can get the member identity some other way");
return canReflect_1_19_2_canReflect.getIdentity(props,this.schema);},index:function(query,items,props){return this.hydrate(query).index(props,items);},insert:function(query,items,item){var index=this.index(query,items,item);if(index===undefined){index=items.length;}var copy=items.slice(0);copy.splice(index,0,item);return copy;},isPaginated:function(query){var basicQuery$$1=this.hydrate(query);return !set_1$1$1.isEqual(basicQuery$$1.page,set_1$1$1.UNIVERSAL);},removePagination:function(query){var basicQuery$$1=this.hydrate(query);basicQuery$$1.removePagination();return this.serialize(basicQuery$$1);}});// Copy everything on `set` to QueryLogic
for(var prop in set_1$1$1){if(QueryLogic[prop]===undefined){QueryLogic[prop]=set_1$1$1[prop];}}QueryLogic.makeEnum=function(values){var Type=function(){};Type[newSymbol$3]=function(val){return val;};makeEnum_1(Type,values);return Type;};QueryLogic.KeysAnd=basicQuery.KeysAnd;QueryLogic.ValuesOr=basicQuery.Or;QueryLogic.In=comparisons_1$1.In;QueryLogic.NotIn=comparisons_1$1.NotIn;QueryLogic.GreaterThan=comparisons_1$1.GreaterThan;QueryLogic.GreaterThanEqual=comparisons_1$1.GreaterThanEqual;QueryLogic.LessThan=comparisons_1$1.LessThan;QueryLogic.LessThanEqual=comparisons_1$1.LessThanEqual;QueryLogic.ValueAnd=comparisons_1$1.And;QueryLogic.ValueOr=comparisons_1$1.Or;var canQueryLogic_1_2_4_canQueryLogic=QueryLogic;function deepMatches(a,b){if(a===b){return true;}else if(Array.isArray(a)&&Array.isArray(b)){return a.every(function(aVal,i){return deepMatches(aVal,b[i]);});}else if(a&&b&&canReflect_1_19_2_canReflect.isPlainObject(a)&&canReflect_1_19_2_canReflect.isPlainObject(b)){for(var prop in a){if(!b.hasOwnProperty(prop)){return false;}if(!deepMatches(a[prop],b[prop])){return false;}}return true;}else {return false;}}function removeFixtureAndXHR(query){if(query.fixture||query.xhr||query.data){var clone=canReflect_1_19_2_canReflect.serialize(query);delete clone.fixture;delete clone.xhr;delete clone.data;return clone;}else {return query;}}function identityIntersection$1(v1,v2){return v1.value===v2.value?v1:set_1$1$1.EMPTY;}function identityDifference$1(v1,v2){return v1.value===v2.value?set_1$1$1.EMPTY:v1;}function identityUnion$1(v1,v2){return v1.value===v2.value?v1:set_1$1$1.UNDEFINABLE;}var identityComparitor$1={intersection:identityIntersection$1,difference:identityDifference$1,union:identityUnion$1};function makeComparatorType(compare){var Type=function(){};var SetType=function(value){this.value=value;};SetType.prototype.isMember=function(value,root,keys){return compare(this.value,value,root,keys);};canReflect_1_19_2_canReflect.assignSymbols(Type,{"can.SetType":SetType});set_1$1$1.defineComparison(SetType,SetType,identityComparitor$1);set_1$1$1.defineComparison(set_1$1$1.UNIVERSAL,SetType,{difference:function(){return set_1$1$1.UNDEFINABLE;}});return Type;}function quickEqual(queryA,queryB){var dataA=queryA.data,dataB=queryB.data;if(dataA&&dataB){if(!deepMatches(dataA,dataB)){return false;}}var q1=new canQueryLogic_1_2_4_canQueryLogic.KeysAnd(removeFixtureAndXHR(queryA)),q2=new canQueryLogic_1_2_4_canQueryLogic.KeysAnd(removeFixtureAndXHR(queryB));return set_1$1$1.isEqual(q1,q2);}function quickSubset(queryA,queryB){return set_1$1$1.isSubset(new canQueryLogic_1_2_4_canQueryLogic.KeysAnd(queryA),new canQueryLogic_1_2_4_canQueryLogic.KeysAnd(queryB));}// Define types
var types$1={};canReflect_1_19_2_canReflect.eachKey({IsEmptyOrNull:function(a,b){if(a==null&&canReflect_1_19_2_canReflect.size(b)===0){return true;}else if(b==null&&canReflect_1_19_2_canReflect.size(a)===0){return true;}else {return quickEqual(a,b);}},isEmptyOrSubset:function(a,b){if(a==null&&canReflect_1_19_2_canReflect.size(b)===0){return true;}else if(b==null&&canReflect_1_19_2_canReflect.size(a)===0){return true;}else {return quickSubset(a,b);}},TemplateUrl:function(a,b){return !!canFixture_3_1_7_dataFromUrl(a,b);},StringIgnoreCase:function(a,b){return b&&a?a.toLowerCase()===b.toLowerCase():b===a;},Ignore:function(){return true;}},function(compare,name){types$1[name]=makeComparatorType(compare);});var schema$1={identity:["id"],keys:{url:types$1.TemplateUrl,fixture:types$1.Ignore,xhr:types$1.Ignore,type:types$1.StringIgnoreCase,method:types$1.StringIgnoreCase,helpers:types$1.Ignore,headers:types$1.IsEmptyOrNull,data:types$1.IsEmptyOrSubset}};var query=new canQueryLogic_1_2_4_canQueryLogic(schema$1);var canFixture_3_1_7_matches={fixture:quickEqual,request:function(requestData,fixtureData){return query.isMember({filter:fixtureData},requestData);},matches:function(settings,fixture,exact){if(exact){return this.fixture(settings,fixture);}else {return this.request(settings,fixture);}},makeComparatorType:makeComparatorType};function getItems(data){if(Array.isArray(data)){return data;}else {return data.data;}}function indexOf$1(records,identity,queryLogic){var schema=canReflect_1_19_2_canReflect.getSchema(queryLogic);for(var i=0;i<records.length;i++){if(identity===canReflect_1_19_2_canReflect.getIdentity(records[i],schema)){return i;}}return -1;}// update could remove all other records that would be in the set
function makeSimpleStore(baseConnection){baseConnection.constructor=makeSimpleStore;var behavior=Object.create(baseConnection);// this stores data like:
// queries: {[queryKey]: {queryKey, query, recordIds}}
// records
return canReflect_1_19_2_canReflect.assignMap(behavior,{getRecordFromParams:function(record){var id=canReflect_1_19_2_canReflect.getIdentity(record,this.queryLogic.schema);return this.getRecord(id);},log:function(){this._log=true;},getSets:function(){return this.getQueries();},getQueries:function(){return Promise.resolve(this.getQueriesSync());},getQueriesSync:function(){return this.getQueryDataSync().map(function(queryData){return queryData.query;});},getListData:function(query){query=query||{};var listData=this.getListDataSync(query);if(listData){return Promise.resolve(listData);}return Promise.reject({title:"no data",status:"404",detail:"No data available for this query.\nAvailable queries: "+JSON.stringify(this.getQueriesSync())});},getPaginatedListDataSync:function(superSetQueryData){var records=this.getAllRecords();var queryWithoutPagination=this.queryLogic.removePagination(superSetQueryData.query);var matchingSuperRecordsNoPagination=this.queryLogic.filterMembersAndGetCount(queryWithoutPagination,{},records);var startIndex=indexOf$1(matchingSuperRecordsNoPagination.data,superSetQueryData.startIdentity,this.queryLogic);var matchingSuperRecords=matchingSuperRecordsNoPagination.data.slice(startIndex,startIndex+this.queryLogic.count(superSetQueryData.query));return {count:matchingSuperRecordsNoPagination.data.length,data:matchingSuperRecords};},getListDataSync:function(query){var queryData=this.getQueryDataSync(),superSetQueryData,isPaginated=this.queryLogic.isPaginated(query);for(var i=0;i<queryData.length;i++){var checkSet=queryData[i].query;if(this.queryLogic.isSubset(query,checkSet)){superSetQueryData=queryData[i];}}var records=this.getAllRecords();if(isPaginated&&this.queryLogic.isPaginated(superSetQueryData.query)){var result=this.getPaginatedListDataSync(superSetQueryData);return this.queryLogic.filterMembersAndGetCount(query,superSetQueryData.query,result.data);}var matching=this.queryLogic.filterMembersAndGetCount(query,{},records);if(matching&&matching.count){return matching;}// now check if we have a query  for it
if(superSetQueryData){return {count:0,data:[]};}},updateListData:function(data,query){var queryData=this.getQueryDataSync();query=query||{};var clonedData=canReflect_1_19_2_canReflect.serialize(data);var records=getItems(clonedData);// Update or create all records
this.updateRecordsSync(records);var isPaginated=this.queryLogic.isPaginated(query);var identity=records.length?canReflect_1_19_2_canReflect.getIdentity(records[0],this.queryLogic.schema):undefined;if(isPaginated){// we are going to merge with some paginated set
for(var i=0;i<queryData.length;i++){var checkSet=queryData[i].query;var union=this.queryLogic.union(checkSet,query);if(this.queryLogic.isDefinedAndHasMembers(union)){var siblingRecords=this.getPaginatedListDataSync(queryData[i]);var res=this.queryLogic.unionMembers(checkSet,query,siblingRecords.data,records);identity=canReflect_1_19_2_canReflect.getIdentity(res[0],this.queryLogic.schema);queryData[i]={query:union,startIdentity:identity};this.updateQueryDataSync(queryData);return Promise.resolve();}}queryData.push({query:query,startIdentity:identity});this.updateQueryDataSync(queryData);return Promise.resolve();}// we need to remove everything that would have matched this query before, but that's not in data
// but what if it's in another set -> we remove it
var allRecords=this.getAllRecords();var curretMatching=this.queryLogic.filterMembers(query,allRecords);if(curretMatching.length){var toBeDeleted=new Map();curretMatching.forEach(function(record){toBeDeleted.set(canReflect_1_19_2_canReflect.getIdentity(record,this.queryLogic.schema),record);},this);// remove what's in records
records.forEach(function(record){toBeDeleted.delete(canReflect_1_19_2_canReflect.getIdentity(record,this.queryLogic.schema));},this);this.destroyRecords(canReflect_1_19_2_canReflect.toArray(toBeDeleted));}// the queries that are not consumed by query
var allQueries=this.getQueryDataSync();var notSubsets=allQueries.filter(function(existingQueryData){return !this.queryLogic.isSubset(existingQueryData.query,query);},this),superSets=notSubsets.filter(function(existingQueryData){return this.queryLogic.isSubset(query,existingQueryData.query);},this);// would need to note the first record ... so we can do a query w/o pagination
//
// if there are sets that are parents of query
if(superSets.length){this.updateQueryDataSync(notSubsets);}else {this.updateQueryDataSync(notSubsets.concat([{query:query,startIdentity:identity}]));}// setData.push({query: query, items: data});
return Promise.resolve();},getData:function(params){var id=canReflect_1_19_2_canReflect.getIdentity(params,canReflect_1_19_2_canReflect.getSchema(this.queryLogic));var res=this.getRecord(id);if(res){return Promise.resolve(res);}else {return Promise.reject({title:"no data",status:"404",detail:"No record with matching identity ("+id+")."});}},createData:function(record){this.updateRecordsSync([record]);return Promise.resolve(canReflect_1_19_2_canReflect.assignMap({},this.getRecordFromParams(record)));},updateData:function(record){if(this.errorOnMissingRecord&&!this.getRecordFromParams(record)){var id=canReflect_1_19_2_canReflect.getIdentity(record,this.queryLogic.schema);return Promise.reject({title:"no data",status:"404",detail:"No record with matching identity ("+id+")."});}this.updateRecordsSync([record]);return Promise.resolve(canReflect_1_19_2_canReflect.assignMap({},this.getRecordFromParams(record)));},destroyData:function(record){var id=canReflect_1_19_2_canReflect.getIdentity(record,this.queryLogic.schema),savedRecord=this.getRecordFromParams(record);if(this.errorOnMissingRecord&&!savedRecord){return Promise.reject({title:"no data",status:"404",detail:"No record with matching identity ("+id+")."});}this.destroyRecords([record]);return Promise.resolve(canReflect_1_19_2_canReflect.assignMap({},savedRecord||record));}});}var canMemoryStore_1_0_3_makeSimpleStore=makeSimpleStore;var canMemoryStore_1_0_3_canMemoryStore=canNamespace_1_0_0_canNamespace.memoryStore=function memoryStore(baseConnection){baseConnection.constructor=memoryStore;var behavior=Object.create(canMemoryStore_1_0_3_makeSimpleStore(baseConnection));canReflect_1_19_2_canReflect.assignMap(behavior,{clear:function(){this._instances={};this._queryData=[];},_queryData:[],updateQueryDataSync:function(queries){this._queryData=queries;},getQueryDataSync:function(){return this._queryData;},_instances:{},getRecord:function(id){return this._instances[id];},getAllRecords:function(){var records=[];for(var id in this._instances){records.push(this._instances[id]);}return records;},destroyRecords:function(records){canReflect_1_19_2_canReflect.eachIndex(records,function(record){var id=canReflect_1_19_2_canReflect.getIdentity(record,this.queryLogic.schema);delete this._instances[id];},this);},updateRecordsSync:function(records){records.forEach(function(record){var id=canReflect_1_19_2_canReflect.getIdentity(record,this.queryLogic.schema);this._instances[id]=record;},this);}// ## External interface
/**
		 * @function can-memory-store.getQueries getQueries
		 * @parent can-memory-store.data-methods
		 *
		 * Returns the queries contained within the cache.
		 *
		 * @signature `connection.getQueries()`
		 *
		 *   Returns the queries added by [can-memory-store.updateListData].
		 *
		 *   @return {Promise<Array<can-query-logic/query>>} A promise that resolves to the list of queries.
		 *
		 * @body
		 *
		 * ## Use
		 *
		 * ```js
		 * connection.getSets() //-> Promise( [{type: "completed"},{user: 5}] )
		 * ```
		 *
		 *//**
		 * @function can-memory-store.clear clear
		 * @parent can-memory-store.data-methods
		 *
		 * Resets the memory store so it contains nothing.
		 *
		 * @signature `connection.clear()`
		 *
		 *   Removes all instances and lists being stored in memory.
		 *
		 *   ```js
		 *   memoryStore({queryLogic: new QueryLogic()});
		 *
		 *   cacheConnection.updateInstance({id: 5, name: "justin"});
		 *
		 *   cacheConnection.getData({id: 5}).then(function(data){
		 *     data //-> {id: 5, name: "justin"}
		 *     cacheConnection.clear();
		 *     cacheConnection.getData({id: 5}).catch(function(err){
		 *       err -> {message: "no data", error: 404}
		 *     });
		 *   });
		 *   ```
		 *
		 *//**
		 * @function can-memory-store.getListData getListData
		 * @parent can-memory-store.data-methods
		 *
		 * Gets a list of data from the memory store.
		 *
		 * @signature `connection.getListData(query)`
		 *
		 *   Goes through each query add by [can-memory-store.updateListData]. If
		 *   `query` is a subset, uses [can-connect/base/base.queryLogic] to get the data for the requested `query`.
		 *
		 *   @param {can-query-logic/query} query An object that represents the data to load.
		 *
		 *   @return {Promise<can-connect.listData>} A promise that resolves if `query` is a subset of
		 *   some data added by [can-memory-store.updateListData].  If it is not,
		 *   the promise is rejected.
		 *//**
		 * @function can-connect/data/memory-cache.getListDataSync getListDataSync
		 * @parent can-connect/data/memory-cache.data-methods
		 *
		 * Synchronously gets a query of data from the memory cache.
		 *
		 * @signature `connection.getListDataSync(query)`
		 * @hide
		 *//**
		 * @function can-memory-store.updateListData updateListData
		 * @parent can-memory-store.data-methods
		 *
		 * Saves a query of data in the cache.
		 *
		 * @signature `connection.updateListData(listData, query)`
		 *
		 *   Tries to merge this query of data with any other saved queries of data. If
		 *   unable to merge this data, saves the query by itself.
		 *
		 *   @param {can-connect.listData} listData The data that belongs to `query`.
		 *   @param {can-query-logic/query} query The query `listData` belongs to.
		 *   @return {Promise} Promise resolves if and when the data has been successfully saved.
		 *//**
		 * @function can-memory-store.getData getData
		 * @parent can-memory-store.data-methods
		 *
		 * Get an instance's data from the memory cache.
		 *
		 * @signature `connection.getData(params)`
		 *
		 *   Looks in the instance store for the requested instance.
		 *
		 *   @param {Object} params An object that should have the [conenction.id] of the element
		 *   being retrieved.
		 *
		 *   @return {Promise} A promise that resolves to the item if the memory cache has this item.
		 *   If the memory cache does not have this item, it rejects the promise.
		 *//**
		 * @function can-memory-store.createData createData
		 * @parent can-memory-store.data-methods
		 *
		 * Called when an instance is created and should be added to cache.
		 *
		 * @signature `connection.createData(record)`
		 *
		 *   Adds `record` to the stored list of instances. Then, goes
		 *   through every query and adds record the queries it belongs to.
		 *//**
		 * @function can-memory-store.updateData updateData
		 * @parent can-memory-store.data-methods
		 *
		 * Called when an instance is updated.
		 *
		 * @signature `connection.updateData(record)`
		 *
		 *   Overwrites the stored instance with the new record. Then, goes
		 *   through every query and adds or removes the instance if it belongs or not.
		 *//**
		 * @function can-memory-store.destroyData destroyData
		 * @parent can-memory-store.data-methods
		 *
		 * Called when an instance should be removed from the cache.
		 *
		 * @signature `connection.destroyData(record)`
		 *
		 *   Goes through each query of data and removes any data that matches
		 *   `record`'s [can-connect/base/base.id]. Finally removes this from the instance store.
		 */});return behavior;};// Returns a function that calls the method on a connection.
// Wires up fixture signature to a connection signature.
var connectToConnection=function(method,convert){return function(req,res){// have to get data from
this.connection[method](convert.call(this,req.data)).then(function(data){res(data);},function(err){res(parseInt(err.status,10),err);});};};// Returns a new makeItems function for a different baseItems;
var makeMakeItems=function(baseItems,idProp){return function(){// clone baseItems
var items=[],maxId=0,idType="number";baseItems.forEach(function(item){items.push(canReflect_1_19_2_canReflect.serialize(item));var type=typeof item[idProp];if(type==="number"){maxId=Math.max(item[idProp],maxId);}else {idType=type;}});return {maxId:maxId,items:items,idType:idType};};};var stringToAny=function(str){switch(str){case"NaN":case"Infinity":return +str;case"null":return null;case"undefined":return undefined;case"true":case"false":return str==="true";default:var val=+str;if(!isNaN(val)){return val;}else {return str;}}};// A store constructor function
var Store=function(connection,makeItems,idProp){var schema=connection.queryLogic.schema;var identityKey=schema.identity[0],keys=schema.keys;if(!keys||!keys[identityKey]){console.warn("No type specified for identity key. Going to convert strings to reasonable type.");}this.connection=connection;this.makeItems=makeItems;this.idProp=idProp;this.reset();// we have to make sure the methods can be called without their context
for(var method in Store.prototype){this[method]=this[method].bind(this);}};var doNotConvert=function(v){return v;};function typeConvert(data){var schema=this.connection.queryLogic.schema;var idType=this.idType;var identityKey=schema.identity[0],keys=schema.keys;if(!keys||!keys[identityKey]){keys={};keys[identityKey]=function(value){if(idType==="string"){return ""+value;}else {return typeof value==="string"?stringToAny(value):value;}};}// this probably needs to be recursive, but this is ok for now
var copy={};canReflect_1_19_2_canReflect.eachKey(data,function(value,key){if(keys[key]){copy[key]=canReflect_1_19_2_canReflect.serialize(canReflect_1_19_2_canReflect.convert(value,keys[key]));}else {copy[key]=value;}});// clone the data
return copy;}canReflect_1_19_2_canReflect.assignMap(Store.prototype,{getListData:connectToConnection("getListData",doNotConvert),getData:connectToConnection("getData",typeConvert),// used
createData:function(req,res){var idProp=this.idProp;// add an id
req.data[idProp]=++this.maxId;this.connection.createData(typeConvert.call(this,req.data)).then(function(data){res(data);},function(err){res(403,err);});},createInstance:function(record){var idProp=this.idProp;if(!(idProp in record)){record[idProp]=++this.maxId;}return this.connection.createData(record);},updateData:connectToConnection("updateData",typeConvert),updateInstance:function(record){return this.connection.updateData(record);},destroyInstance:function(record){return this.connection.destroyData(record);},destroyData:connectToConnection("destroyData",typeConvert),reset:function(newItems){if(newItems){this.makeItems=makeMakeItems(newItems,this.idProp);}var itemData=this.makeItems();this.maxId=itemData.maxId;this.idType=itemData.idType;this.connection.updateListData(itemData.items,{});},get:function(params){var id=this.connection.queryLogic.memberIdentity(params);return this.connection.getRecord(id);},getList:function(set){return this.connection.getListDataSync(set);}});function looksLikeAQueryLogic(obj){return obj&&"identityKeys"in obj;}// ## fixture.store
// Make a store of objects to use when making requests against fixtures.
Store.make=function(count,make,queryLogic){/*jshint eqeqeq:false */// Figure out makeItems which populates data
var makeItems,idProp;if(typeof count==="number"){if(!queryLogic){queryLogic=new canQueryLogic_1_2_4_canQueryLogic({});}else if(!looksLikeAQueryLogic(queryLogic)){queryLogic=new canQueryLogic_1_2_4_canQueryLogic(queryLogic);}idProp=queryLogic.identityKeys()[0]||"id";makeItems=function(){var items=[];var maxId=0;for(var i=0;i<count;i++){//call back provided make
var item=make(i,items);if(!item[idProp]){item[idProp]=i;}maxId=Math.max(item[idProp],maxId);items.push(item);}return {maxId:maxId,items:items};};}else if(Array.isArray(count)){queryLogic=make;if(!queryLogic){queryLogic=new canQueryLogic_1_2_4_canQueryLogic({});}else if(!looksLikeAQueryLogic(queryLogic)){queryLogic=new canQueryLogic_1_2_4_canQueryLogic(queryLogic);}idProp=queryLogic.identityKeys()[0]||"id";makeItems=makeMakeItems(count,idProp);}var connection=canMemoryStore_1_0_3_canMemoryStore({queryLogic:queryLogic,errorOnMissingRecord:true});return new Store(connection,makeItems,idProp);};var canFixture_3_1_7_store=Store;var canFixture_3_1_7_core=createCommonjsModule(function(module,exports){// Adds
var fixtures=[];exports.fixtures=fixtures;function isStoreLike(fixture){return fixture&&(fixture.getData||fixture.getListData);}var methodMapping={item:{'GET':'getData','PUT':'updateData','DELETE':'destroyData'},list:{'GET':'getListData','POST':'createData'}};function getMethodAndPath(route){// Match URL if it has GET, POST, PUT, DELETE or PATCH.
var matches=route.match(/(GET|POST|PUT|DELETE|PATCH) (.+)/i);if(!matches){return [undefined,route];}var method=matches[1];var path=matches[2];return [method,path];}function inferIdProp(url){var wrappedInBraces=/\{(.*)\}/;var matches=url.match(wrappedInBraces);var isUniqueMatch=matches&&matches.length===2;if(isUniqueMatch){return matches[1];}}function getItemAndListUrls(url,idProp){idProp=idProp||inferIdProp(url);if(!idProp){return [undefined,url];}var itemRegex=new RegExp('\\/\\{'+idProp+"\\}.*");var rootIsItemUrl=itemRegex.test(url);var listUrl=rootIsItemUrl?url.replace(itemRegex,""):url;var itemUrl=rootIsItemUrl?url:url.trim()+"/{"+idProp+"}";return [itemUrl,listUrl];}function addStoreFixture(root,store){var settings={};var typeAndUrl=getMethodAndPath(root);var type=typeAndUrl[0];var url=typeAndUrl[1];var itemAndListUrls=getItemAndListUrls(url,store.idProp);var itemUrl=itemAndListUrls[0];var listUrl=itemAndListUrls[1];if(type){var warning=['fixture("'+root+'", fixture) must use a store method, not a store directly.'];if(itemUrl){var itemAction=methodMapping.item[type];if(itemAction){settings[type+' '+itemUrl]=store[itemAction];var itemWarning='Replace with fixture("'+type+' '+itemUrl+'", fixture.'+itemAction+') for items.';warning.push(itemWarning);}}var listAction=methodMapping.list[type];if(listAction){settings[type+' '+listUrl]=store[listAction];var listWarning='Replace with fixture("'+type+' '+listUrl+'", fixture.'+listAction+') for lists.';warning.push(listWarning);}var message=warning.join(' ');dev.warn(message);}else {var itemMapping=methodMapping.item;for(var itemMethod in itemMapping){var storeItemMethod=itemMapping[itemMethod];settings[itemMethod+' '+itemUrl]=store[storeItemMethod];}var listMapping=methodMapping.list;for(var listMethod in listMapping){var storeListMethod=listMapping[listMethod];settings[listMethod+' '+listUrl]=store[storeListMethod];}}return settings;}function getSettingsFromString(route){var typeAndUrl=getMethodAndPath(route);var type=typeAndUrl[0];var url=typeAndUrl[1];if(type){return {type:type,url:url};}return {url:url};}// Check if the same fixture was previously added, if so, we remove it
// from our array of fixture overwrites.
function upsertFixture(fixtureList,settings,fixture){var index=exports.index(settings,true);var oldFixture;if(index>-1){oldFixture=fixtures.splice(index,1);}if(fixture==null){return oldFixture;}if(typeof fixture==="object"){var data=fixture;fixture=function(){return data;};}settings.fixture=fixture;fixtures.unshift(settings);return oldFixture;}// Adds a fixture to the list of fixtures.
exports.add=function(settings,fixture){// If a fixture isn't provided, we assume that settings is
// an array of fixtures, and we should iterate over it, and set up
// the new fixtures.
if(fixture===undefined){var oldFixtures=[];if(Array.isArray(settings)){canReflect_1_19_2_canReflect.eachIndex(settings,function(ajaxSettings){var fixture=ajaxSettings.fixture;ajaxSettings=canReflect_1_19_2_canReflect.assignMap({},ajaxSettings);delete ajaxSettings.fixture;return exports.add(ajaxSettings,fixture);});}else {canReflect_1_19_2_canReflect.eachKey(settings,function(fixture,url){oldFixtures=oldFixtures.concat(exports.add(url,fixture));});return oldFixtures;}}// When a fixture is passed a store like:
// `fixture("/things/{id}", store)`
if(isStoreLike(fixture)){settings=addStoreFixture(settings,fixture);return exports.add(settings);}if(typeof settings==='string'){settings=getSettingsFromString(settings);}return upsertFixture(fixtures,settings,fixture);};var $fixture=exports.add;$fixture.on=true;$fixture.delay=10;function FixtureResponse(fixture,response){this.statusCode=response[0];this.responseBody=response[1];this.headers=response[2];this.statusText=response[3];this.fixture=fixture;}// Calls a dynamic fixture and calls `cb` with the response data.
exports.callDynamicFixture=function(xhrSettings,fixtureSettings,cb){// this is for legacy.  In the future, people should get it from fixtureSettings probably.
xhrSettings.data=fixtureSettings.data;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var json=JSON.stringify(xhrSettings.data);canLog_1_0_2_canLog.log(""+xhrSettings.type.toUpperCase()+" "+xhrSettings.url+" "+json.substr(0,50)+" -> handler(req,res)");}//!steal-remove-end
var response=function(){var res=exports.extractResponse.apply(xhrSettings,arguments);//!steal-remove-start
canLog_1_0_2_canLog.log("can-fixture: "+xhrSettings.type.toUpperCase()+" "+xhrSettings.url+" ",xhrSettings.data," => ",new FixtureResponse(fixtureSettings.fixture,res));//!steal-remove-end
return cb.apply(this,res);};var callFixture=function(){// fall the fixture
var result=fixtureSettings.fixture(xhrSettings,response,xhrSettings.headers,fixtureSettings);if(canReflect_1_19_2_canReflect.isPromise(result)){// If we have a promise, wait for it to resolve
result.then(function(result){if(result!==undefined){// Resolve with fixture results
response(200,result);}});}else {if(result!==undefined){// Resolve with fixture results
response(200,result);}}};if(!xhrSettings.async){callFixture();return null;}else {return setTimeout(callFixture,$fixture.delay);}};exports.index=function(settings,exact){for(var i=0;i<fixtures.length;i++){if(canFixture_3_1_7_matches.matches(settings,fixtures[i],exact)){return i;}}return -1;};exports.get=function(xhrSettings){if(!$fixture.on){return;}// First try an exact match
var index=exports.index(xhrSettings,true);// If that doesn't work, try a looser match.
if(index===-1){index=exports.index(xhrSettings,false);}var fixtureSettings=index>=0?canReflect_1_19_2_canReflect.assignMap({},fixtures[index]):undefined;if(fixtureSettings){var url=fixtureSettings.fixture,data=canFixture_3_1_7_dataFromUrl(fixtureSettings.url,xhrSettings.url);if(typeof fixtureSettings.fixture==="string"){// check that we might have a replacement
// here we could read data from first url and translate into next
if(data){// Template static fixture URLs
url=sub(url,data);}// Override the AJAX settings, changing the URL to the fixture file,
// removing the data, and changing the type to GET.
fixtureSettings.url=url;fixtureSettings.data=null;fixtureSettings.type="GET";if(!fixtureSettings.error){// If no error handling is provided, we provide one and throw an
// error.
fixtureSettings.error=function(xhr,error$$1,message){throw "fixtures.js Error "+error$$1+" "+message;};}}else if(canReflect_1_19_2_canReflect.isPlainObject(xhrSettings.data)||xhrSettings.data==null){var xhrData=canReflect_1_19_2_canReflect.assignMap({},xhrSettings.data||{});fixtureSettings.data=canReflect_1_19_2_canReflect.assignMap(xhrData,data);}else {fixtureSettings.data=xhrSettings.data;}}return fixtureSettings;};exports.matches=canFixture_3_1_7_matches;// A helper function that takes what's called with response
// and moves some common args around to make it easier to call
exports.extractResponse=function(status,response,headers,statusText){// if we get response(RESPONSE, HEADERS)
if(typeof status!=="number"){headers=response;response=status;status=200;}// if we get response(200, RESPONSE, STATUS_TEXT)
if(typeof headers==="string"){statusText=headers;headers={};}return [status,response,headers,statusText];};});canFixture_3_1_7_core.fixtures;canFixture_3_1_7_core.add;canFixture_3_1_7_core.callDynamicFixture;canFixture_3_1_7_core.index;canFixture_3_1_7_core.get;canFixture_3_1_7_core.matches;canFixture_3_1_7_core.extractResponse;/* global require, window, global *//* global setTimeout, clearTimeout, XMLHttpRequest */// This overwrites the default XHR with a mock XHR object.
// The mock XHR object's `.send` method is able to
// call the fixture callbacks or create a real XHR request
// and then respond normally.
// Save the real XHR object as XHR
var XHR=XMLHttpRequest,// Get a global reference.
GLOBAL=typeof commonjsGlobal$1!=="undefined"?commonjsGlobal$1:window;// Figure out props and events on XHR object
// but start with some defaults
var props$2=["type","url","async","response","responseText","responseType","responseXML","responseURL","status","statusText","readyState"];var events=["abort","error","load","loadend","loadstart","progress","readystatechange"];(function(){var x=new XHR();for(var prop in x){if(prop.indexOf("on")===0){if(events.indexOf(prop.substr(2))===-1){events.push(prop.substr(2));}}else if(props$2.indexOf(prop)===-1&&typeof x[prop]!=='function'){props$2.push(prop);}}})();// DEFINE HELPERS
// Call all of an event for an XHR object
function callEvents(xhr,ev){var evs=xhr.__events[ev]||[],fn;for(var i=0,len=evs.length;i<len;i++){fn=evs[i];fn.call(xhr);}}function defineNonEnumerable$2(obj,prop,value){Object.defineProperty(obj,prop,{enumerable:false,configurable:true,writable:true,value:value});}GLOBAL.XMLHttpRequest=function(){var mockXHR=this;var realXHR=new XHR();// store real xhr on mockXHR
defineNonEnumerable$2(this,"_xhr",realXHR);// create other properties needed by prototype functions
defineNonEnumerable$2(this,"_requestHeaders",{});defineNonEnumerable$2(this,"__events",{});// wire up events to forward from real xhr to fake xhr
events.forEach(function(eventName){realXHR["on"+eventName]=function(){callEvents(mockXHR,eventName);if(mockXHR["on"+eventName]){return mockXHR["on"+eventName].apply(mockXHR,arguments);}};});// The way code detects if the browser supports onload is to check
// if a new XHR object has the onload property, so setting it to null
// passes that check.
this.onload=null;};GLOBAL.XMLHttpRequest._XHR=XHR;// Methods on the mock XHR:
canReflect_1_19_2_canReflect.assignMap(XMLHttpRequest.prototype,{setRequestHeader:function(name,value){this._requestHeaders[name]=value;},open:function(type,url,async){this.type=type;this.url=url;this.async=async===false?false:true;},getAllResponseHeaders:function(){return this._xhr.getAllResponseHeaders.apply(this._xhr,arguments);},addEventListener:function(ev,fn){var evs=this.__events[ev]=this.__events[ev]||[];evs.push(fn);},removeEventListener:function(ev,fn){var evs=this.__events[ev]=this.__events[ev]||[];var idx=evs.indexOf(fn);if(idx>=0){evs.splice(idx,1);}},setDisableHeaderCheck:function(val){this._disableHeaderCheck=!!val;},getResponseHeader:function(key){return this._xhr.getResponseHeader(key);},abort:function(){var xhr=this._xhr;// If we are aborting a delayed fixture we have to make the fake
// steps that are expected for `abort` to
if(this.timeoutId!==undefined){clearTimeout(this.timeoutId);xhr.open(this.type,this.url,this.async===false?false:true);xhr.send();}return xhr.abort();},// This needs to compile the information necessary to see if
// there is a corresponding fixture.
// If there isn't a fixture, this should create a real XHR object
// linked to the mock XHR instance and make a data request.
// If there is a fixture, depending on the type of fixture the following happens:
// - dynamic fixtures - call the dynamic fixture, use the result to update the
//   mock XHR object and trigger its callbacks.
// - redirect fixtures - create a real XHR linked to the mock XHR for the new url.
send:function(data){// derive the XHR settings object from the XHR object
var type=this.type.toLowerCase()||'get';var xhrSettings={url:this.url,data:data,headers:this._requestHeaders,type:type,method:type,async:this.async,xhr:this};// if get or delete, the url should not include the querystring.
// the querystring should be the data.
if(!xhrSettings.data&&xhrSettings.type==="get"||xhrSettings.type==="delete"){xhrSettings.data=canDeparam_1_2_3_canDeparam(xhrSettings.url.split("?")[1]);xhrSettings.url=xhrSettings.url.split("?")[0];}// Try to convert the request body to POJOs.
if(typeof xhrSettings.data==="string"){try{xhrSettings.data=JSON.parse(xhrSettings.data);}catch(e){xhrSettings.data=canDeparam_1_2_3_canDeparam(xhrSettings.data);}}// See if the XHR settings match a fixture.
var fixtureSettings=canFixture_3_1_7_core.get(xhrSettings);var mockXHR=this;// If a dynamic fixture is being used, we call the dynamic fixture function and then
// copy the response back onto the `mockXHR` in the right places.
if(fixtureSettings&&typeof fixtureSettings.fixture==="function"){this.timeoutId=canFixture_3_1_7_core.callDynamicFixture(xhrSettings,fixtureSettings,function(status,body,headers,statusText){body=typeof body==="string"?body:JSON.stringify(body);// we are no longer using the real XHR
// set it to an object so that props like readyState can be set
mockXHR._xhr={open:function(){},send:function(){},abort:function(){},getResponseHeader:function(){}};canReflect_1_19_2_canReflect.assignMap(mockXHR,{readyState:4,status:status});var success=status>=200&&status<300||status===304;if(success){canReflect_1_19_2_canReflect.assignMap(mockXHR,{statusText:statusText||"OK",responseText:body});}else {canReflect_1_19_2_canReflect.assignMap(mockXHR,{statusText:statusText||"error",responseText:body});}mockXHR.getAllResponseHeaders=function(){var ret=[];canReflect_1_19_2_canReflect.eachKey(headers||{},function(value,name){Array.prototype.push.apply(ret,[name,': ',value,'\r\n']);});return ret.join('');};if(mockXHR.onreadystatechange){mockXHR.onreadystatechange({target:mockXHR});}// fire progress events
callEvents(mockXHR,"progress");if(mockXHR.onprogress){mockXHR.onprogress();}callEvents(mockXHR,"load");if(mockXHR.onload){mockXHR.onload();}callEvents(mockXHR,"loadend");if(mockXHR.onloadend){mockXHR.onloadend();}});return;}// At this point there is either not a fixture or a redirect fixture.
// Either way we are doing a request.
var makeRequest=function(){mockXHR._xhr.open(mockXHR._xhr.type,mockXHR._xhr.url,mockXHR._xhr.async);if(mockXHR._requestHeaders){Object.keys(mockXHR._requestHeaders).forEach(function(key){mockXHR._xhr.setRequestHeader(key,mockXHR._requestHeaders[key]);});}return mockXHR._xhr.send(data);};if(fixtureSettings&&typeof fixtureSettings.fixture==="number"){canLog_1_0_2_canLog.log("can-fixture: "+xhrSettings.url+" => delay "+fixtureSettings.fixture+"ms");this.timeoutId=setTimeout(makeRequest,fixtureSettings.fixture);return;}// if we do have a fixture, update the real XHR object.
if(fixtureSettings){canLog_1_0_2_canLog.log("can-fixture: "+xhrSettings.url+" => "+fixtureSettings.url);canReflect_1_19_2_canReflect.assignMap(mockXHR,fixtureSettings);}// Make the request.
return makeRequest();}});// when props of mockXHR are get/set, return the prop from the real XHR
props$2.forEach(function(prop){Object.defineProperty(XMLHttpRequest.prototype,prop,{get:function(){return this._xhr[prop];},set:function(newVal){try{this._xhr[prop]=newVal;}catch(e){}}});});var fixture=canFixture_3_1_7_core.add;// HELPERS START
var noop$2$1=function(){};canReflect_1_19_2_canReflect.assignMap(fixture,{rand:function randomize(arr,min,max){if(typeof arr==='number'){if(typeof min==='number'){return arr+Math.floor(Math.random()*(min-arr+1));}else {return Math.floor(Math.random()*(arr+1));}}// clone the array because we will remove items from it.
var choices=arr.slice(0);// get a random set
if(min===undefined){min=1;max=choices.length;}else if(max===undefined){max=min;}// get a random selection of arr
var result=[];// set max
//random max
var selectedCount=min+Math.round(randomize(max-min));for(var i=0;i<selectedCount;i++){var selectedIndex=randomize(choices.length-1),selected=choices.splice(selectedIndex,1)[0];result.push(selected);}return result;},xhr:function(xhr){return canReflect_1_19_2_canReflect.assignMap({},{abort:noop$2$1,getAllResponseHeaders:function(){return "";},getResponseHeader:function(){return "";},open:noop$2$1,overrideMimeType:noop$2$1,readyState:4,responseText:"",responseXML:null,send:noop$2$1,setRequestHeader:noop$2$1,status:200,statusText:"OK"},xhr);},store:canFixture_3_1_7_store.make,fixtures:canFixture_3_1_7_core.fixtures});if(typeof window!=="undefined"&&typeof commonjsRequire.resolve!=="function"){window.fixture=function(){dev.warn("You are using the global fixture. Make sure you import can-fixture.");return fixture.apply(this,arguments);};}canNamespace_1_0_0_canNamespace.fixture=fixture;var behaviorsMap={};function behavior(name,behavior){if(typeof name!=="string"){behavior=name;name=undefined;}var behaviorMixin=function(base){// basically Object.create
var Behavior=function(){};Object.defineProperty(Behavior,"name",{value:name,configurable:true});Behavior.prototype=base;var newBehavior=new Behavior();// allows behaviors to be a simple object, not always a function
var res=typeof behavior==="function"?behavior.apply(newBehavior,arguments):behavior;for(var prop in res){if(res.hasOwnProperty(prop)){Object.defineProperty(newBehavior,prop,Object.getOwnPropertyDescriptor(res,prop));}else {// we only copy values from up the proto chain
newBehavior[prop]=res[prop];}}newBehavior.__behaviorName=name;return newBehavior;};if(name){behaviorMixin.behaviorName=name;behaviorsMap[name]=behaviorMixin;}behaviorMixin.isBehavior=true;return behaviorMixin;}behavior.map=behaviorsMap;var canConnect_4_0_6_behavior=behavior;var behavior$1=canConnect_4_0_6_behavior;/**
 *
 * @param {Array<String,Behavior,function>} behaviors - An array of behavior names or custom behaviors.
 * The order of named execution gets run in order.
 * @param {Object} options
 * @hide
 */var connect=function(behaviors,options){behaviors=behaviors.map(function(behavior,index){var sortedIndex=-1;if(typeof behavior==="string"){sortedIndex=connect.order.indexOf(behavior);behavior=behavior.map[behavior];}else if(behavior.isBehavior){sortedIndex=connect.order.indexOf(behavior.behaviorName);}else {behavior=connect.behavior(behavior);}return {originalIndex:index,sortedIndex:sortedIndex,behavior:behavior};});behaviors.sort(function(b1,b2){// if both have a sorted index
if(~b1.sortedIndex&&~b2.sortedIndex){return b1.sortedIndex-b2.sortedIndex;}return b1.originalIndex-b2.originalIndex;});behaviors=behaviors.map(function(b){return b.behavior;});var behavior=connect.base(connect.behavior("options",function(){return options;})());behaviors.forEach(function(behave){behavior=behave(behavior);});if(behavior.init){behavior.init();}return behavior;};connect.order=["data/localstorage-cache","data/url","data/parse","cache-requests","data/combine-requests","constructor","constructor/store","can/map","can/ref","fall-through-cache","data/worker","real-time","data/callbacks-cache","data/callbacks","constructor/callbacks-once"];connect.behavior=behavior$1;var canConnect_4_0_6_connect=connect;/**
 * @module can-connect/base/base base
 * @group can-connect/base/base.options 0 behavior options
 * @group can-connect/base/base.identifiers 1 identifiers
 * @parent can-connect.behaviors
 *
 * The first behavior added to every `can-connect` connection. Provides methods to uniquely identify instances and
 * lists.
 *
 * @signature `base(connectionOptions)`
 *
 * Provides instance and list identifiers. Added automatically to every connection created by the `connect` helper.
 * So even if we do:
 *
 * ```js
 * var connection = connect([],{});
 * ```
 *
 * The connection still has the identification functionality provided by `base`:
 *
 * ```js
 * connection.id({id: 1, ...}) //-> 1
 * ```
 *
 * `can-connect` connections are typically created by the `connect` helper rather than by calling the behaviors directly.
 * This ensures the behaviors are called in the required order and is more elegant than requiring the user to chain
 * together the calls to all the behaviors.
 *
 * See the [can-connect/base/base.id id] and [can-connect/base/base.listQuery listQuery] methods for more specifics on
 * how ids are determined.
 *
 * @param {Object} connectionOptions Object containing the configuration for the behaviors of the connection. Added to the
 * prototype of the returned connection object. `base` is almost always configured with an [can-connect/base/base.queryLogic] option since it
 * [can-connect/base/base.id defines how to read the identity properties] and the majority of behaviors also require the queryLogic.
 *
 * @return {Object} A `can-connect` connection containing the methods provided by `base`.
 */var base$1=canConnect_4_0_6_behavior("base",function(baseConnection){var setQueryLogic;return {/**
		 * @function can-connect/base/base.id id
		 * @parent can-connect/base/base.identifiers
		 *
		 * Uniquely identify an instance or raw instance data.
		 *
		 * @signature `connection.id(instance)`
		 *
		 *   Returns the instance id as determined by [can-connect/base/base.queryLogic]'s id values.
		 *
		 *   @param {Instance|Object} instance An instance or raw properties for an instance.
		 *
		 *   @return {String|Number} A string or number uniquely representing `instance`.
		 *
		 *
		 * @body
		 *
		 * ## Use
		 *
		 * Many behaviors, such as the [can-connect/constructor/store/store], need to have a unique identifier for an
		 * instance or instance data.  This `connection.id` method should return that.
		 *
		 * Typically, an item's id is a simply property value on the object. For example, "Todo" data might look like:
		 *
		 * ```js
		 * {_id: 5, name: "do the dishes"}
		 * ```
		 *
		 * In this case, [can-connect/base/base.queryLogic]'s `id` property should be set to "_id":
		 *
		 * ```js
		 * import QueryLogic from "can-query-logic";
		 *
		 * var queryLogic = new QueryLogic({
		 *   identity: ["_id"]
	 	 * });
		 *
		 * connect([...],{queryLogic: queryLogic});
		 * ```
		 *
		 */id:function(instance){if(this.queryLogic){return canReflect_1_19_2_canReflect.getIdentity(instance,this.queryLogic.schema);}else if(this.idProp){return instance[this.idProp];}else {throw new Error("can-connect/base/base - Please add a queryLogic option.");}},/**
		 * @function can-connect/base/base.listQuery listQuery
		 * @parent can-connect/base/base.identifiers
		 *
		 * Uniquely identify the set of data a list contains.
		 *
		 * @signature `connection.listQuery(list)`
		 *
		 *   Returns the value of the property referenced by [can-connect/base/base.listQueryProp] if it exists.
		 *   By default, this will return `list[Symbol.for("can.listQuery")]`.
		 *
		 *   @param {can-connect.List} list A list instance.
		 *
		 *   @return {can-query-logic/query} An object that can be passed to `JSON.stringify` to represent the list.
		 *
		 * @body
		 *
		 * ## Use
		 *
		 * Many behaviors, such as the [can-connect/constructor/store/store], need to have a unique identifier for a list.
		 * This `connection.listQuery` method should return that.
		 *
		 * Typically, a list's set identifier is a property on the list object.  As example, a list of Todos might look like
		 * the following:
		 *
		 * ```js
		 * var dueTodos = todoConnection.getList({filter: {due: "today"}});
		 * dueTodos; // [{_id: 5, name: "do dishes", due:"today"}, {_id: 6, name: "walk dog", due:"today"}, ...]
		 * dueTodos[Symbol.for("can.listQuery")]; //-> {filter: {due: "today"}}
		 * todoConnection.listQuery(dueTodos); //-> {filter: {due: "today"}}
		 * ```
		 *
		 * In the above example the [can-connect/base/base.listQueryProp] would be the default `@can.listQuery`.
		 */listQuery:function(list){return list[this.listQueryProp];},/**
		 * @property {Symbol} can-connect/base/base.listQueryProp listQueryProp
		 * @parent can-connect/base/base.identifiers
		 *
		 * Specifies the property that uniquely identifies a list.
		 *
		 * @option {Symbol} The property that uniquely identifies the list.
		 * Defaults to `Symbol.for("can.listQuery")`.
		 *
		 * ```js
		 * var dataUrl = require("can-connect/data/url/");
		 * var connection = connect([dataUrl], {
		 *   listQueryProp: "set"
		 * });
		 *
		 * var list = [{id: 1, ...}, {id: 2, ...}]
		 * list.set = {complete: true};
		 *
		 * connection.listQuery(list) //-> {complete: true}
		 * ```
		 *
		 */listQueryProp:canSymbol_1_7_0_canSymbol.for("can.listQuery"),init:function(){},/**
		 * @property {can-query-logic} can-connect/base/base.queryLogic queryLogic
		 * @parent can-connect/base/base.options
		 *
		 * Configuration for list comparison, instance identification and membership
		 * calculations. A way for the `can-connect` behaviors to understand what the properties of a request mean and act
		 * on them.
		 *
		 * @option {can-query-logic} A [can-query-logic queryLogic] that is used to perform calculations using set
		 * definition objects passed to [can-connect/connection.getListData] and [can-connect/connection.getList].
		 * Needed to enable [can-connect/fall-through-cache/fall-through-cache caching],
		 * [can-connect/data/combine-requests/combine-requests request combining], [can-connect/real-time/real-time] and other
		 * behaviors. By default no queryLogic is provided.
		 *
		 * An example of the types of calculations behaviors will make using the queryLogic:
		 * ```js
		 * var queryLogic = new QueryLogic({
		 *   identity: ['_uid'],
		 *   keys: {
		 *     _uid: Number
		 *   }
		 * });
		 *
		 * var todoConnection = connect([...behaviors...],{
		 *   queryLogic: queryLogic
		 * });
		 *
		 * todoConnection.queryLogic.memberIdentity({_uid: 5, ...}); //-> 5
		 * todoConnection.id({_uid: 5, ...}); //-> 5
		 * todoConnection.queryLogic.intersection(
		 *   {page: {first: 0, last: 10}},
		 *   {page: {first:  d5, last: 20}}); //-> {first:5, last:10}
		 * ```
		 */get queryLogic(){if(setQueryLogic){return setQueryLogic;}else if(baseConnection.queryLogic){return baseConnection.queryLogic;}else if(baseConnection.algebra){return baseConnection.algebra;}},set queryLogic(newVal){setQueryLogic=newVal;}/**
		 * @property {can-query-logic} can-connect/base/base.algebra algebra
		 * @parent can-connect/base/base.options
		 *
		 * @description Legacy configuration for [can-set-legacy]. Use [can-connect/base/base.queryLogic] instead.
		 *//**
		 * @property {can-connect/DataInterface} can-connect/base/base.cacheConnection cacheConnection
		 * @parent can-connect/base/base.options
		 *
		 * An underlying `can-connect` connection used when fetching data from a cache.
		 *
		 * @option {can-connect/DataInterface} A connection that provides access to a cache via [can-connect/DataInterface]
		 * requests. Several behaviors including [can-connect/fall-through-cache/fall-through-cache] expect this property.
		 *
		 * @body
		 *
		 * ## Use
		 *
		 * ```js
		 * import {memoryStore, connect, QueryLogic} from "can";
		 *
		 * var cacheConnection = memoryStore({
		 *   queryLogic: new QueryLogic({identity: ["id"]})
		 * });
		 *
		 * var todoConnection = connect([...behaviors...],{
		 *   cacheConnection: cacheConnection
		 * });
		 * ```
		 */};});canConnect_4_0_6_connect.base=base$1;var canConnect_4_0_6_canConnect=canNamespace_1_0_0_canNamespace.connect=canConnect_4_0_6_connect;var assign$1$1=canReflect_1_19_2_canReflect.assignMap;/**
 * @module {function} can-connect/helpers/weak-reference-map WeakReferenceMap
 * @parent can-connect.modules
 *
 * Provides a map that only contains keys that are referenced.
 *
 * @signature `new WeakReferenceMap()`
 *
 *   Creates a new weak reference map.
 *
 * @body
 *
 * ## Use
 *
 * ```
 * var WeakReferenceMap = require("can-connect/helpers/weak-reference-map");
 * var wrm = new WeakReferenceMap();
 * var task1 = {id: 1, name: "do dishes"};
 *
 * wrm.addReference("1", task1);
 * wrm.has("1") //-> true
 * wrm.addReference("1", task1);
 * wrm.has("1") //-> true
 * wrm.deleteReference("1");
 * wrm.has("1") //-> true
 * wrm.deleteReference("1");
 * wrm.has("1") //-> false
 * ```
 */var WeakReferenceMap=function(){this.set={};};// if weakmap, we can add and never worry ...
// otherwise, we need to have a count ...
assign$1$1(WeakReferenceMap.prototype,/**
 * @prototype
 */{/**
	 * @function can-connect/helpers/weak-reference-map.prototype.has has
	 * @signature `weakReferenceMap.has(key)`
	 *
	 *   Returns if key is in the set.
	 *
	 *   @param  {String} key A key to look for.
	 *   @return {Boolean} If the key exists.
	 */has:function(key){return !!this.set[key];},/**
	 * @function can-connect/helpers/weak-reference-map.prototype.addReference addReference
	 * @signature `WeakReferenceMap.addReference(key, item)`
	 *
	 *   Adds a reference to item as key and increments the reference count. This should be called
	 *   when a value should be managed by something, typically the [can-connect/constructor/store/store].
	 *
	 *   @param  {String} key The key of the item in the store.
	 */addReference:function(key,item,referenceCount){// !steal-remove-start
if(typeof key==='undefined'){throw new Error("can-connect: You must provide a key to store a value in a WeakReferenceMap");}// !steal-remove-end
var data=this.set[key];if(!data){data=this.set[key]={item:item,referenceCount:0,key:key};}data.referenceCount+=referenceCount||1;},referenceCount:function(key){var data=this.set[key];if(data){return data.referenceCount;}},/**
	 * @function can-connect/helpers/weak-reference-map.prototype.deleteReference deleteReference
	 * @signature `weakReferenceMap.deleteReference(key)`
	 *
	 *   Decrements the reference count for key and removes it if the reference count is `0`. This should be called
	 *   when a value should not be managed by something, typically the [can-connect/constructor/store/store].
	 *
	 *   @param  {String} key The key of the item in the store.
	 */deleteReference:function(key){var data=this.set[key];if(data){data.referenceCount--;if(data.referenceCount===0){delete this.set[key];}}},/**
	 * @function can-connect/helpers/weak-reference-map.prototype.get get
	 * @signature `weakReferenceMap.get(key)`
	 *
	 *   Returns the value stored at key if it's in the store.
	 *
	 *   @param  {String} key The key of the item in the store.
	 *   @return {*|undefined} The item if it's available.
	 */get:function(key){var data=this.set[key];if(data){return data.item;}},/**
	 * @function can-connect/helpers/weak-reference-map.prototype.forEach forEach
	 * @signature `weakReferenceMap.forEach(callback)`
	 *
	 *   Calls `callback` for every value in the store.
	 *
	 *   @param  {function(*,String)} callback(item,key) A callback handler.
	 */forEach:function(cb){for(var id in this.set){cb(this.set[id].item,id);}}});var weakReferenceMap=WeakReferenceMap;var updateDeepExceptIdentity=function updateExceptIdentity(obj,data,schema){if(!schema){schema=canReflect_1_19_2_canReflect.getSchema(obj);}if(!schema){throw new Error("can-diff/update-except-id is unable to update without a schema.");}// copy the keys onto data
schema.identity.forEach(function(key){var id=canReflect_1_19_2_canReflect.getKeyValue(obj,key);if(id!==undefined){canReflect_1_19_2_canReflect.setKeyValue(data,key,id);}});canReflect_1_19_2_canReflect.updateDeep(obj,data);};var idMerge=function(list$$1,update,id,make){var patches=list(list$$1,update,function(a,b){return id(a)===id(b);});patches.forEach(function(patch){canReflect_1_19_2_canReflect.splice(list$$1,patch.index,patch.deleteCount,patch.insert.map(make));});};/**
 * @module {connect.Behavior} can-connect/constructor/constructor constructor
 * @parent can-connect.behaviors
 * @group can-connect/constructor/constructor.options 1 behavior options
 * @group can-connect/constructor/constructor.crud 2 CRUD methods
 * @group can-connect/constructor/constructor.callbacks 3 CRUD callbacks
 * @group can-connect/constructor/constructor.hydrators 4 hydrators
 * @group can-connect/constructor/constructor.serializers 5 serializers
 * @group can-connect/constructor/constructor.helpers 6 helpers
 *
 * Adds an interface to interact with custom types via the connection instead of plain Objects and Arrays.
 *
 * @signature `constructor( baseConnection )`
 *
 * Adds an interface that allows the connection to operate on custom types. These fall into the categories:
 * - [can-connect/constructor/constructor#CRUDMethods CRUD Methods] - create, read, update and delete typed instances via the data source
 * - [can-connect/constructor/constructor#CRUDCallbacks CRUD Callbacks] - activities run on typed instances following data source operations
 * - [can-connect/constructor/constructor#Hydrator Hydrators] - conversion of raw data to typed data
 * - [can-connect/constructor/constructor#Serializers Serializers] - conversion of typed data to raw data
 *
 * @param {{}} baseConnection `can-connect` connection object that is having the `constructor` behavior added
 * on to it.
 *
 * @return {Object} A `can-connect` connection containing the method implementations provided by `constructor`.
 *
 * @body
 *
 * ## Use
 *
 * The `constructor` behavior allows you to instantiate the raw representation of the data source's data into a
 * custom typed representation with additional methods and behaviors.

 * An example might be loading data from a `"/todos"` service and being able to call `.timeLeft()`  on the todos that
 * you get back like:
 *
 * ```js
 * todoConnection.get({id: 6}).then(function(todo){
 *   todo.timeLeft() //-> 60000
 * })
 * ```
 *
 * The following creates a `todoConnection` that does exactly that:
 *
 * ```js
 * // require connection plugins
 * var constructor = require("can-connect/constructor/");
 * var dataUrl = require("can-connect/data/url/");
 *
 * // define type constructor function
 * var Todo = function(data){
 *   // add passed properties to new instance
 *   for(var prop in data) {
 *    this[prop] = data;
 *   }
 * };
 *
 * // add method to get time left before due, in milliseconds
 * Todo.prototype.timeLeft = function(){
 *   return new Date() - this.dueDate
 * };
 *
 * // create connection, passing function to instantiate new instances
 * var todoConnection = connect([constuctor, dataUrl], {
 *   url: "/todos",
 *   instance: function(data){
 *     return new Todo(data);
 *   }
 * });
 * ```
 *
 * The `constructor` behavior is still useful even if you want to keep your data as untyped objects (which is the
 * default behavior when no [can-connect/constructor/constructor.instance `instance`] implementation is provided).  The
 * behavior provides an interface to the data held by the client. For example,
 * [can-connect/constructor/constructor.updatedInstance] provides an extension point for logic that needs to be executed
 * after an instance held by the client finishes an update request. This is valuable whether that instance is typed or not.
 * Extensions like [can-connect/real-time/real-time] or [can-connect/fall-through-cache/fall-through-cache]
 * require this interface for advanced behavior.
 *
 * ## Interface
 *
 * `constructor` provides the following categories of methods to interact with typed data:
 *
 * ### <span id="CRUDMethods">CRUD Methods</span>
 *
 * Methods that create, read, update and delete (CRUD) typed representations of raw connection data:
 *
 * - [can-connect/constructor/constructor.get] - retrieve a single typed instance from the data source
 * - [can-connect/constructor/constructor.getList] - retrieve a typed list of instances from the data source
 * - [can-connect/constructor/constructor.save] - save a typed instance's data to the data source
 * - [can-connect/constructor/constructor.destroy] - delete a typed instance's data from the data source
 *
 * ### <span id="CRUDCallbacks">CRUD Callbacks</span>
 *
 * "CRUD Methods" call these methods with request response data and a related instance. Their implementation here
 * updates the related instance with that data:
 *
 * - [can-connect/constructor/constructor.createdInstance] - after [can-connect/constructor/constructor.save saving] new instance to data source, update that instance with response data
 * - [can-connect/constructor/constructor.updatedInstance] - after [can-connect/constructor/constructor.save saving] existing instance to data source, update that instance with response data
 * - [can-connect/constructor/constructor.destroyedInstance] - after [can-connect/constructor/constructor.destroy deleting] instance from data source, update that instance with response data
 * - [can-connect/constructor/constructor.updatedList] - after new data is read from the data source, update an existing list with instances created from that data
 *
 * ### <span id="CRUDMethods">Hydrators</span>
 *
 * These methods are used to create a typed instance or typed list given raw data objects:
 * - [can-connect/constructor/constructor.hydrateInstance] - create a typed instance given raw instance data
 * - [can-connect/constructor/constructor.hydrateList] - create a typed list of typed instances given given raw list data
 *
 * ### <span id="Serializers">Serializers</span>
 *
 * These methods convert a typed instance or typed list into a raw object:
 * - [can-connect/constructor/constructor.serializeInstance] - return raw data representing the state of the typed instance argument
 * - [can-connect/constructor/constructor.serializeList] - return raw data representing the state of the typed list argument
 *
 */var makeArray=canReflect_1_19_2_canReflect.toArray;var assign$2=canReflect_1_19_2_canReflect.assignMap;var constructor_1=canConnect_4_0_6_behavior("constructor",function(baseConnection){var behavior={// stores references to instances
// for now, only during create
/**
		 * @property {can-connect/helpers/weak-reference-map} can-connect/constructor/constructor.cidStore cidStore
		 * @parent can-connect/constructor/constructor.helpers
		 *
		 * Temporarily hold references to new instances via their [can-cid] while they are undergoing creation.
		 *
		 * @option {can-connect/helpers/weak-reference-map} Temporarily holds references to instances by
		 * [can-cid] when they are in the process of being created and don't yet have an `id`s. This is typically
		 * accessed in `createdData` handlers (e.g [can-connect/real-time/real-time.createdData real-time.createdData]) that
		 * need to lookup the instance that was being created during a particular request.
		 */cidStore:new weakReferenceMap(),_cid:0,/**
		 * @function can-connect/constructor/constructor.get get
		 * @parent can-connect/constructor/constructor.crud
		 *
		 * Retrieve a single instance from the connection data source.
		 *
		 * @signature `connection.get(params)`
		 *
		 * Retrieves instance data from [can-connect/connection.getData], runs the resulting data through
		 * [can-connect/constructor/constructor.hydrateInstance], creating a typed instance with the retrieved data.
		 *
		 * @param {Object} params data specifying the instance to retrieve.  Normally, this is something like like:
		 * `{id: 5}`.
		 *
		 * @return {Promise<can-connect/Instance>} `Promise` resolving to the instance returned by
		 * [can-connect/constructor/constructor.hydrateInstance].
		 *
		 * ### Usage
		 *
		 * Call `.get()` with the parameters that identify the instance you want to load.  `.get()` will return a promise
		 * that resolves to that instance:
		 * ```js
		 * todoConnection.get({id: 6}).then(function(todo){
		 *   todo.id; // 6
		 *   todo.name; // 'Take out the garbage'
		 * });
		 * ```
		 *
		 * `.get()` above will call [can-connect/connection.getData `getData`] on the [can-connect/data/url/url]
		 * behavior, which will make an HTTP GET request to `/todos/6`.
		 */get:function(params){var self=this;return this.getData(params).then(function(data){return self.hydrateInstance(data);});},/**
		 * @function can-connect/constructor/constructor.getList getList
		 * @parent can-connect/constructor/constructor.crud
		 *
		 * Retrieve a list of instances from the connection data source.
		 *
		 * @signature `connection.getList(set)`
		 *
		 * Retrieves list data from [can-connect/connection.getListData] and runs the resulting data through
		 * [can-connect/constructor/constructor.hydrateList], creating a typed list of typed instances from  the retrieved
		 * data.
		 *
		 * @param {can-query-logic/query} query data specifying the range of instances to retrieve. This might look something like:
		 * ```{start: 0, end: 50, due: 'today'}```
		 *
		 * @return {Promise<can-connect.List<can-connect/Instance>>} `Promise` resolving to the typed list returned by
		 * [can-connect/constructor/constructor.hydrateList].
		 *
		 * ### Usage
		 *
		 * Call `getList` with the parameters that specify the set of data you want to load.  `.getList()` will return
		 * a promise that resolves to a [can-connect.List] created from that set.
		 *
		 * ```js
		 * todoConnection.getList({due: 'today'}).then(function(todos){
		 *   todos[0].name; // 'Take out the garbage'
		 *   todos[0].due > startOfDay && todos[0].due < endOfDay; // true
		 * })
		 * ```
		 *
		 */getList:function(set){set=set||{};var self=this;return this.getListData(set).then(function(data){return self.hydrateList(data,set);});},/**
		 * @function can-connect/constructor/constructor.hydrateList hydrateList
		 * @parent can-connect/constructor/constructor.hydrators
		 *
		 * Produce a typed list from the provided raw list data.
		 *
		 * @signature `connection.hydrateList(listData, set)`
		 *
		 *   Call [can-connect/constructor/constructor.hydrateInstance] for each item in the raw list data, and then call
		 *   [can-connect/constructor/constructor.list] with an array of the typed instances returned from
		 *   [can-connect/constructor/constructor.hydrateInstance] .  If [can-connect/constructor/constructor.list] is not
		 *   provided as an argument or implemented by another behavior, a normal array is created.
		 *
		 *   @param {can-connect.listData} listData the raw list data returned by the data source, often via [can-connect/connection.getListData]
		 *   @param {can-query-logic/query} query description of the set of data `listData` represents
		 *
		 *   @return {can-connect.List} a typed list containing typed instances generated from `listData`
		 */hydrateList:function(listData,set){if(Array.isArray(listData)){listData={data:listData};}var arr=[];for(var i=0;i<listData.data.length;i++){arr.push(this.hydrateInstance(listData.data[i]));}listData.data=arr;if(this.list){return this.list(listData,set);}else {var list=listData.data.slice(0);list[this.listQueryProp||"__listQuery"]=set;copyMetadata(listData,list);return list;}},/**
		 * @function can-connect/constructor/constructor.hydrateInstance hydrateInstance
		 * @parent can-connect/constructor/constructor.hydrators
		 *
		 * Produce a typed object containing the provided raw data.
		 *
		 * @signature `connection.hydrateInstance(props)`
		 *
		 * If [can-connect/constructor/constructor.instance] has been passed as an option, or defined by another behavior,
		 * pass `props` to it and return the value. Otherwise, return a clone of `props`.
		 *
		 * @param {Object} props the raw instance data returned by the data source, often via [can-connect/connection.getData]
		 * @return {can-connect/Instance} a typed instance containing the data from `props`
		 */hydrateInstance:function(props){if(this.instance){return this.instance(props);}else {return assign$2({},props);}},/**
		 * @function can-connect/constructor/constructor.save save
		 * @parent can-connect/constructor/constructor.crud
		 *
		 * @description Create or update an instance on the connection data source
		 *
		 * @signature `connection.save( instance )`
		 *
		 *   First checks if the instance has an [can-connect/base/base.id] or not.  If it has an id, the instance will be
		 *   updated; otherwise, it will be created.
		 *
		 *   When creating an instance, the instance is added to the [can-connect/constructor/constructor.cidStore], and its
		 *   [can-connect/constructor/constructor.serializeInstance serialized data] is passed to
		 *   [can-connect/connection.createData].  If `createData`'s promise resolves to anything other than `undefined`,
		 *   [can-connect/constructor/constructor.createdInstance] is called with that data.
		 *
		 *   When updating an instance, its [can-connect/constructor/constructor.serializeInstance serialized data] is
		 *   passed to [can-connect/connection.updateData]. If `updateData`'s promise resolves to anything other than
		 *   `undefined`, [can-connect/constructor/constructor.updatedInstance] is called with that data.
		 *
		 *   @param {can-connect/Instance} instance the instance to create or save
		 *
		 *   @return {Promise<can-connect/Instance>} `Promise` resolving to the same instance that was passed to `save`
		 *
		 * @body
		 *
		 * ## Use
		 *
		 * To use `save` to create an instance, create a connection, then an instance, and call `.save()` on it:
		 *
		 * ```js
		 * // Create a connection
	     * var constructor = require('can-connect/constructor/');
		 * var dataUrl = require('can-connect/data/url/');
		 * var todoConnection = connect([dataUrl, constructor], {
		 *   url: "/todos"
		 * });
		 *
		 * // Create an instance
		 * var todo = {name: "do dishes"};
		 *
		 * // Call .save()
		 * todoConnection.save(todo)
		 * ```
		 *
		 * `.save(todo)` above will call [can-connect/data/url/url.createData `createData`] on the [can-connect/data/url/url]
		 * behavior, which will make an HTTP POST request to `/todos` with the serialized `todo` data.  The server response
		 * data may look something like:
		 *
		 * ```js
		 * {
		 *  id: 5,
		 *  ownerId: 9
		 * }
		 * ```
		 *
		 * That data will be passed to [can-connect/constructor/constructor.createdInstance] which by default
		 * adds those properties to `todo`, resulting in `todo` looking like:
		 *
		 * ```js
		 * {
		 *  name: "do dishes",
		 *  id: 5,
		 *  ownerId: 9
		 * }
		 * ```
		 *
		 * As an example of updating an instance, change a property on `todo` and call `.save()` again:
		 *
		 * ```js
		 * // Change a property
		 * todo.name = "Do dishes now!!";
		 *
		 * // Call .save()
		 * todoConnection.save(todo)
		 * ```
		 *
		 * The `.save(todo)` above will call [can-connect/data/url/url.updateData `updateData`] on the
		 * [can-connect/data/url/url] behavior, which will make an HTTP PUT request to `/todos` with the serialized `todo`
		 * data.
		 *
		 * A successful server response body should look something like:
		 *
		 * ```js
		 * {
		 *  name: "Do dishes now!!",
		 *  id: 5,
		 *  ownerId: 9
		 * }
		 * ```
		 *
		 * This data will be passed to [can-connect/constructor/constructor.updatedInstance] which by default sets
		 * all of `todo`'s properties to look like the response data, even removing properties that are missing from the
		 * response data.
		 */save:function(instance){var serialized=this.serializeInstance(instance);var id=this.id(instance);var self=this;if(id===undefined){// If `id` is undefined, we are creating this instance.
// It should be given a local id and temporarily added to the cidStore
// so other hooks can get back the instance that's being created.
var cid=this._cid++;// cid is really a token to be able to reference this transaction.
this.cidStore.addReference(cid,instance);// Call the data layer.
// If the data returned is undefined, don't call `createdInstance`
return this.createData(serialized,cid).then(function(data){canQueues_1_3_2_canQueues.batch.start();// if undefined is returned, this can't be created, or someone has taken care of it
if(data!==undefined){self.createdInstance(instance,data);}self.cidStore.deleteReference(cid,instance);canQueues_1_3_2_canQueues.batch.stop();return instance;});}else {return this.updateData(serialized).then(function(data){canQueues_1_3_2_canQueues.batch.start();if(data!==undefined){self.updatedInstance(instance,data);}canQueues_1_3_2_canQueues.batch.stop();return instance;});}},/**
		 * @function can-connect/constructor/constructor.destroy destroy
		 * @parent can-connect/constructor/constructor.crud
		 * @description Delete an instance from the connection data source
		 *
		 * @signature `connection.destroy( instance )`
		 *
		 *   To destroy an instance, it's [can-connect/constructor/constructor.serializeInstance serialized data] is passed
		 *   to [can-connect/connection.destroyData]. If [can-connect/connection.destroyData]'s promise resolves to anything
		 *   other than `undefined`, [can-connect/constructor/constructor.destroyedInstance] is called.
		 *
		 *   @param {can-connect/Instance} instance the instance being deleted from the data source
		 *
		 *   @return {Promise<can-connect/Instance>} `Promise` resolving to the same instance that was passed to `destroy`
		 *
		 * @body
		 *
		 * ## Use
		 *
		 * To use `destroy`, create a connection, retrieve an instance, and then call `.destroy()` with it.
		 *
		 * ```js
		 * // create a connection
		 * var constructor = require('can-connect/constructor/');
		 * var dataUrl = require('can-connect/data/url/');
		 * var todoConnection = connect([dataUrl, constructor], {
		 *   url: "/todos"
		 * })
		 *
		 * // retrieve a todo instance
		 * todoConnection.get({id: 5}).then(function(todo){
		 *   // Call .destroy():
		 *   todoConnection.destroy(todo)
		 * });
		 * ```
		 *
		 * `.destroy()` above will call [can-connect/connection.destroyData `destroyData`] on the [can-connect/data/url/url]
		 * behavior, which will make an HTTP DELETE request to `/todos/5` with the serialized `todo` data.  The server
		 * response data may look something like:
		 *
		 * ```js
		 * {
		 *   deleted: true
		 * }
		 * ```
		 *
		 * That response data will be passed to [can-connect/constructor/constructor.destroyedInstance], which by default
		 * adds those properties to `todo`.
		 */// ## destroy
// Calls the data interface `destroyData` and as long as it
// returns something, uses that data to call `destroyedInstance`.
destroy:function(instance){var serialized=this.serializeInstance(instance),self=this,id=this.id(instance);if(id!==undefined){return this.destroyData(serialized).then(function(data){if(data!==undefined){self.destroyedInstance(instance,data);}return instance;});}else {this.destroyedInstance(instance,{});return Promise.resolve(instance);}},/**
		 * @function can-connect/constructor/constructor.createdInstance createdInstance
		 * @parent can-connect/constructor/constructor.callbacks
		 *
		 * A method run whenever a new instance has been saved to the data source. Updates the instance with response data.
		 *
		 * @signature `connection.createdInstance( instance, props )`
		 *
		 * `createdInstance` is run whenever a new instance is saved to the data source. This implementation updates the
		 * instance with the data returned by [can-connect/connection.createData] which made the request to save the raw
		 * instance data.
		 *
		 * @param {can-connect/Instance} instance the instance that was created
		 * @param {Object} props the data returned from [can-connect/connection.createData] that will update the properties of `instance`
		 */createdInstance:function(instance,props){assign$2(instance,props);},/**
		 * @function can-connect/constructor/constructor.updatedInstance updatedInstance
		 * @parent can-connect/constructor/constructor.callbacks
		 *
		 * A method run whenever an existing instance has been saved to the data source. Overwrites the instance with response
		 * data.
		 *
		 * @signature `connection.updatedInstance( instance, props )`
		 *
		 * `updatedInstance` is run whenever an existing instance is saved to the data source. This implementation overwrites
		 * the instance with the data returned bu [can-connect/connection.updatedData] which made the request to save the
		 * modified instance data.
		 *
		 * @param {can-connect/Instance} instance the instance that was updated
		 * @param {Object} props the data from [can-connect/connection.updateData] that will overwrite the properties of `instance`
		 */updatedInstance:function(instance,data){updateDeepExceptIdentity(instance,data,this.queryLogic.schema);},/**
		 * @function can-connect/constructor/constructor.updatedList updatedList
		 * @parent can-connect/constructor/constructor.callbacks
		 *
		 * A method run whenever new data for an existing list is retrieved from the data source. Updates the list to
		 * include the new data.
		 *
		 * @signature `connection.updatedList( list, listData, set )`
		 *
		 * [can-connect/constructor/constructor.hydrateInstance Hydrates instances] from `listData`'s data and attempts to
		 * merge them into `list`.  The merge is able to identify simple insertions and removals of elements instead of
		 * replacing the entire list.
		 *
		 * @param {can-connect/Instance} list an existing list
		 * @param {can-connect.listData} listData raw data that should be included as part of `list` after conversion to typed instances
		 * @param {can-query-logic/query} query description of the set of data `list` represents
		 */updatedList:function(list,listData,set){var instanceList=[];for(var i=0;i<listData.data.length;i++){instanceList.push(this.hydrateInstance(listData.data[i]));}// This only works with "referenced" instances because it will not
// update and assume the instance is already updated
// this could be overwritten so that if the ids match, then a merge of properties takes place
idMerge(list,instanceList,this.id.bind(this),this.hydrateInstance.bind(this));copyMetadata(listData,list);},/**
		 * @function can-connect/constructor/constructor.destroyedInstance destroyedInstance
		 * @parent can-connect/constructor/constructor.callbacks
		 *
		 * A method run whenever an instance has been deleted from the data source. Overwrites the instance with response data.
		 *
		 * @signature `connection.destroyedInstance( instance, props )`
		 *
		 * `destroyedInstance` is run whenever an existing instance is deleted from the data source. This implementation
		 * overwrites the instance with the data returned by [can-connect/connection.destroyData] which made the request to
		 * delete the raw instance data.
		 *
		 * @param {can-connect/Instance} instance the instance that was deleted
		 * @param {Object} props the data returned from [can-connect/connection.destroyData] that will overwrite the
		 * properties of `instance`
		 */destroyedInstance:function(instance,data){updateDeepExceptIdentity(instance,data,this.queryLogic.schema);},/**
		 * @function can-connect/constructor/constructor.serializeInstance serializeInstance
		 * @parent can-connect/constructor/constructor.serializers
		 *
		 * @description Generate the serialized form of a typed instance.
		 *
		 * @signature `connection.serializeInstance( instance )`
		 *
		 *   Generate a raw object representation of a typed instance. This default implementation simply clones the
		 *   `instance` object, copying all the properties of the object (excluding properties of it's prototypes) to a new
		 *   object. This is equivalent to `Object.assign({}, instance)`.
		 *
		 * @param {can-connect/Instance} instance the instance to serialize
		 * @return {Object} a serialized representation of the instance
		 */serializeInstance:function(instance){return assign$2({},instance);},/**
		 * @function can-connect/constructor/constructor.serializeList serializeList
		 * @parent can-connect/constructor/constructor.serializers
		 *
		 * @description Generate the serialized form of a typed list.
		 *
		 * @signature `connection.serializeList( list )`
		 *
		 *   Generate a raw array representation of a typed list. This default implementation simply returns a plain `Array`
		 *   containing the result of calling [can-connect/constructor/constructor.serializeInstance] on each item in the
		 *   typed list.
		 *
		 * @param {can-connect.List} list The instance to serialize.
		 * @return {Object|Array} A serialized representation of the list.
		 */serializeList:function(list){var self=this;return makeArray(list).map(function(instance){return self.serializeInstance(instance);});},/**
		 * @function can-connect/constructor/constructor.isNew isNew
		 * @parent can-connect/constructor/constructor.helpers
		 *
		 * Returns if the instance has not been loaded from or saved to the data source.
		 *
		 * @signature `connection.isNew(instance)`
		 * @param {Object} instance the instance to test
		 * @return {Boolean} `true` if [can-connect/base/base.id] is `null` or `undefined`
		 */isNew:function(instance){var id=this.id(instance);return !(id||id===0);}/**
		 * @property can-connect/constructor/constructor.list list
		 * @parent can-connect/constructor/constructor.options
		 *
		 * Behavior option provided to create a typed list from a raw array.
		 *
		 * @signature `connection.list( listData, set )`
		 *
		 * Takes a `listData` argument with a `data` property, that is an array of typed instances, each produced by
		 * [can-connect/constructor/constructor.hydrateInstance], and returns a new typed list containing those typed
		 * instances.
		 * This method is passed as an option to the connection.
		 * Called by [can-connect/constructor/constructor.hydrateList].
		 *
		 * @param {can-connect.listData} listData an object with a `data` property, which is an array of instances.
		 * @param {can-query-logic/query} query the set description of this list
		 * @return {can-connect.List} a typed list type containing the typed instances
		 *
		 * ### Usage
		 *
		 * The following example makes the connection produce `MyList` typed lists including a `completed` method:
		 *
		 * ```js
		 * var constructor = require("can-connect/constructor/");
		 * var dataUrl = require("can-connect/data/url/");
		 *
		 * // define custom list type constructor
		 * var MyList = function(items) {
		 *  this.push.apply(this, items);
		 * }
		 * // inherit Array functionality
		 * MyList.prototype = Object.create(Array.prototype);
		 * // add custom methods to new list type
		 * MyList.prototype.completed = function(){
		 *  return this.filter(function(){ return this.completed });
		 * };
		 *
		 * // create connection
		 * var todosConnection = connect([constructor, dataUrl], {
		 *   url: "/todos",
		 *   list: function(listData, set){
		 *     // create custom list instance
		 *     var collection = new MyList(listData.data);
		 *     // add set info for use by other behaviors
		 *     collection.__listQuery = set;
		 *     return collection;
		 *   }
		 * });
		 *
		 * // use connection to get typed list & use custom method
		 * todosConnection.getList({}).then(function(todoList){
		 *   console.log("There are", todoList.completed().length, "completed todos");
		 * });
		 * ```
		 *
		 * **Note:** we added the [can-connect/base/base.listQueryProp] property (`Symbol.for("can.listQuery")` by default) on the list. This is
		 * expected by other behaviors.
		 *//**
		 * @property can-connect/constructor/constructor.instance instance
		 * @parent can-connect/constructor/constructor.options
		 *
		 * Behavior option provided to create a typed form of passed raw data.
		 *
		 * @signature `connection.instance( props )`
		 *
		 * Creates a typed instance for the passed raw data object. This method is passed as an option to the connection.
		 * Called by [can-connect/constructor/constructor.hydrateInstance].
		 *
		 * @param {Object} props a raw object containing the properties from the data source
		 * @return {can-connect/Instance} the typed instance created from the passed `props` object
		 *
		 * ### Usage
		 *
		 * The following example makes the connection produce `Todo` typed objects including a `complete` method:
		 *
		 * ```js
		 * var constructor = require("can-connect/constructor/");
		 * var dataUrl = require("can-connect/data/url/");
		 *
		 * // define type constructor
		 * var Todo = function(rawData){
		 *   // add raw data to new instance
		 *   Object.assign(this, rawData);
		 * };
		 *
		 * // add methods to custom type
		 * Todo.prototype.complete = function(){
		 *   this.completed = true;
		 * }
		 *
		 * // create connection
		 * var todosConnection = connect([constructor, dataUrl], {
		 *   url: "/todos",
		 *   instance: function(rawData) {
		 *     return new Todo(rawData);
		 *   }
		 * });
		 *
		 * // use connection to get typed instance & use custom method
		 * todosConnection.get({id: 5}).then(function(todo){
		 *   todo.completed; // false
		 *   todo.complete();
		 *   todo.completed; // true
		 * });
		 * ```
		 *
		 */};return behavior;});function copyMetadata(listData,list){for(var prop in listData){if(prop!=="data"){// this is map infultrating constructor, but it's alright here.
if(typeof list.set==="function"){list.set(prop,listData[prop]);}else if(typeof list.attr==="function"){list.attr(prop,listData[prop]);}else {list[prop]=listData[prop];}}}}var assignDeepExceptIdentity=function assignExceptIdentity(obj,data,schema){if(!schema){schema=canReflect_1_19_2_canReflect.getSchema(obj);}if(!schema){throw new Error("can-diff/update-except-id is unable to update without a schema.");}// copy the keys onto data
schema.identity.forEach(function(key){var id=canReflect_1_19_2_canReflect.getKeyValue(obj,key);if(id!==undefined){canReflect_1_19_2_canReflect.setKeyValue(data,key,id);}});canReflect_1_19_2_canReflect.assignDeep(obj,data);};function smartMerge(instance,props){props=canReflect_1_19_2_canReflect.serialize(props);if(canReflect_1_19_2_canReflect.isMoreListLikeThanMapLike(instance)){mergeList(instance,props);}else {mergeMap(instance,props);}return instance;}// date is expected to be mutable here
function mergeMap(instance,data){// for each key in
canReflect_1_19_2_canReflect.eachKey(instance,function(value,prop){if(!canReflect_1_19_2_canReflect.hasKey(data,prop)){canReflect_1_19_2_canReflect.deleteKeyValue(instance,prop);return;}var newValue=canReflect_1_19_2_canReflect.getKeyValue(data,prop);canReflect_1_19_2_canReflect.deleteKeyValue(data,prop);// cases:
// a. list
// b. map
// c. primitive
// if the data is typed, we would just replace it
if(canReflect_1_19_2_canReflect.isPrimitive(value)){canReflect_1_19_2_canReflect.setKeyValue(instance,prop,newValue);return;}var newValueIsList=Array.isArray(newValue),currentValueIsList=canReflect_1_19_2_canReflect.isMoreListLikeThanMapLike(value);if(currentValueIsList&&newValueIsList){mergeList(value,newValue);}else if(!newValueIsList&&!currentValueIsList&&canReflect_1_19_2_canReflect.isMapLike(value)&&canReflect_1_19_2_canReflect.isPlainObject(newValue)){// TODO: the `TYPE` should probably be infered from the `_define` property definition.
var schema=canReflect_1_19_2_canReflect.getSchema(value);if(schema&&schema.identity&&schema.identity.length){var id=canReflect_1_19_2_canReflect.getIdentity(value,schema);if(id!=null&&id===canReflect_1_19_2_canReflect.getIdentity(newValue,schema)){mergeMap(value,newValue);return;}}canReflect_1_19_2_canReflect.setKeyValue(instance,prop,canReflect_1_19_2_canReflect.new(value.constructor,newValue));}else {canReflect_1_19_2_canReflect.setKeyValue(instance,prop,newValue);}});canReflect_1_19_2_canReflect.eachKey(data,function(value,prop){canReflect_1_19_2_canReflect.setKeyValue(instance,prop,value);});}function mergeList(list$$1,data){var ItemType,itemSchema;var listSchema=canReflect_1_19_2_canReflect.getSchema(list$$1);if(listSchema){ItemType=listSchema.values;}if(ItemType){itemSchema=canReflect_1_19_2_canReflect.getSchema(ItemType);}if(!itemSchema&&canReflect_1_19_2_canReflect.size(list$$1)>0){itemSchema=canReflect_1_19_2_canReflect.getSchema(canReflect_1_19_2_canReflect.getKeyValue(list$$1,0));}var identity;if(itemSchema&&itemSchema.identity&&itemSchema.identity.length){identity=function(a,b){var aId=canReflect_1_19_2_canReflect.getIdentity(a,itemSchema),bId=canReflect_1_19_2_canReflect.getIdentity(b,itemSchema);var eq=aId===bId;if(eq){// If id is the same we merge data in. Case #2
mergeMap(a,b);}return eq;};}else {identity=function(a,b){var eq=a===b;if(eq){// If id is the same we merge data in. Case #2
if(!canReflect_1_19_2_canReflect.isPrimitive(a)){mergeMap(a,b);}}return eq;};}var patches=list(list$$1,data,identity);var hydrate=ItemType?canReflect_1_19_2_canReflect.new.bind(canReflect_1_19_2_canReflect,ItemType):function(v){return v;};// If there are no patches then data contains only updates for all of the existing items, and we just leave.
if(!patches.length){return list$$1;}// Apply patches (add new, remove) #3. For any insertion use a hydrator.
patches.forEach(function(patch){applyPatch(list$$1,patch,hydrate);});}function applyPatch(list$$1,patch,makeInstance){// Splice signature compared to patch:
//   array.splice(start, deleteCount, item1, item2, ...)
//   patch = {index: 1, deleteCount: 0, insert: [1.5]}
var insert=makeInstance&&patch.insert.map(function(val){return makeInstance(val);})||patch.insert;var args=[patch.index,patch.deleteCount].concat(insert);list$$1.splice.apply(list$$1,args);return list$$1;}smartMerge.applyPatch=applyPatch;var mergeDeep=smartMerge;function flatten(arrays){return arrays.reduce(function(ret,val){return ret.concat(val);},[]);}// return a function that validates it's argument has all the properties in the interfacePropArrays
function makeInterfaceValidator(interfacePropArrays){var props=flatten(interfacePropArrays);return function(base){var missingProps=props.reduce(function(missing,prop){return prop in base?missing:missing.concat(prop);},[]);return missingProps.length?{message:"missing expected properties",related:missingProps}:undefined;};}var canValidateInterface_1_0_3_index=makeInterfaceValidator;// return wrapped can-connect behavior mixin that validates interface of the input behavior being extended
// deprecate this and use can-validate-interface decorator once available
var validate=function(extendingBehavior,interfaces){var validatedBehaviour=validateArgumentInterface(extendingBehavior,0,interfaces,function(errors,baseBehavior){throw new BehaviorInterfaceError(baseBehavior,extendingBehavior,errors);});// copy properties on behavior to validator wrapped behavior
Object.keys(extendingBehavior).forEach(function(k){validatedBehaviour[k]=extendingBehavior[k];});// add interfaces for building behavior ordering
validatedBehaviour.__interfaces=interfaces;return validatedBehaviour;};function validateArgumentInterface(func,argIndex,interfaces,errorHandler){return function(){var errors=canValidateInterface_1_0_3_index(interfaces)(arguments[argIndex]);if(errors&&errorHandler){errorHandler(errors,arguments[argIndex]);}return func.apply(this,arguments);};}// change to 'BehaviourInterfaceError extends Error' once we drop support for pre-ES2015
function BehaviorInterfaceError(baseBehavior,extendingBehavior,missingProps){var extendingName=extendingBehavior.behaviorName||'anonymous behavior',baseName=baseBehavior.__behaviorName||'anonymous behavior',message='can-connect: Extending behavior "'+extendingName+'" found base behavior "'+baseName+'" was missing required properties: '+JSON.stringify(missingProps.related),instance=new Error(message);if(Object.setPrototypeOf){Object.setPrototypeOf(instance,Object.getPrototypeOf(this));}return instance;}BehaviorInterfaceError.prototype=Object.create(Error.prototype,{constructor:{value:Error}});if(Object.setPrototypeOf){Object.setPrototypeOf(BehaviorInterfaceError,Error);}else {/* jshint proto: true */BehaviorInterfaceError.__proto__=Error;}var map$3=createCommonjsModule(function(module){var each=canReflect_1_19_2_canReflect.each;var isPlainObject=canReflect_1_19_2_canReflect.isPlainObject;var getNameSymbol=canSymbol_1_7_0_canSymbol.for("can.getName");function smartMergeExceptIdentity(dest,source,schema){if(!schema){schema=canReflect_1_19_2_canReflect.getSchema(dest);}if(!schema){throw new Error("can-connect/can/map/ is unable to update without a schema.");}schema.identity.forEach(function(key){var id=canReflect_1_19_2_canReflect.getKeyValue(dest,key);if(id!==undefined){canReflect_1_19_2_canReflect.setKeyValue(source,key,id);}});mergeDeep(dest,source);}var canMapBehavior=canConnect_4_0_6_behavior("can/map",function(baseConnection){// overwrite
var behavior={init:function(){if(!this.Map){if(this.ObjectType){this.Map=this.ObjectType;}else {throw new Error("can-connect/can/map/map must be configured with a Map or ObjectType type");}}if(!this[getNameSymbol]){this[getNameSymbol]=function(){if(this.name){return "Connection{"+this.name+"}";}else if(this.Map){return "Connection{"+canReflect_1_19_2_canReflect.getName(this.Map)+"}";}else if(typeof this.url==="string"){return "Connection{"+this.url+"}";}else {return "Connection{}";}};}this.List=this.List||this.ArrayType||this.Map.List;var hasList=Boolean(this.List);if(!hasList){Object.defineProperty(this,'List',{get:function(){throw new Error("can-connect/can/map/map - "+canReflect_1_19_2_canReflect.getName(this)+" should be configured with an ArrayType or List type.");}});}overwrite(this,this.Map,mapOverwrites);if(hasList){overwrite(this,this.List,listOverwrites);}if(!this.queryLogic){this.queryLogic=new canQueryLogic_1_2_4_canQueryLogic(this.Map);}var connection=this;// ### Setup store updates
if(this.Map[canSymbol_1_7_0_canSymbol.for("can.onInstanceBoundChange")]){var canConnectMap_onMapBoundChange=function(instance,isBound){var method=isBound?"addInstanceReference":"deleteInstanceReference";if(connection[method]){connection[method](instance);}};//!steal-remove-start
Object.defineProperty(canConnectMap_onMapBoundChange,"name",{value:canReflect_1_19_2_canReflect.getName(this.Map)+" boundChange",configurable:true});//!steal-remove-end
this.Map[canSymbol_1_7_0_canSymbol.for("can.onInstanceBoundChange")](canConnectMap_onMapBoundChange);}else {console.warn("can-connect/can/map is unable to listen to onInstanceBoundChange on the Map type");}if(hasList){if(this.List[canSymbol_1_7_0_canSymbol.for("can.onInstanceBoundChange")]){var canConnectMap_onListBoundChange=function(list,isBound){var method=isBound?"addListReference":"deleteListReference";if(connection[method]){connection[method](list);}};//!steal-remove-start
Object.defineProperty(canConnectMap_onListBoundChange,"name",{value:canReflect_1_19_2_canReflect.getName(this.List)+" boundChange",configurable:true});//!steal-remove-end
this.List[canSymbol_1_7_0_canSymbol.for("can.onInstanceBoundChange")](canConnectMap_onListBoundChange);}else {console.warn("can-connect/can/map is unable to listen to onInstanceBoundChange on the List type");}}// Adds the instance when its `id` property is set
if(this.Map[canSymbol_1_7_0_canSymbol.for("can.onInstancePatches")]){this.Map[canSymbol_1_7_0_canSymbol.for("can.onInstancePatches")](function canConnectMap_onInstancePatches(instance,patches){patches.forEach(function(patch){if((patch.type==="add"||patch.type==="set")&&patch.key===connection.idProp&&instance[canSymbol_1_7_0_canSymbol.for("can.isBound")]()){connection.addInstanceReference(instance);}});});}else {console.warn("can-connect/can/map is unable to listen to onInstancePatches on the Map type");}baseConnection.init.apply(this,arguments);},/**
		 * @function can-connect/can/map/map.serializeInstance serializeInstance
		 * @parent can-connect/can/map/map.serializers
		 *
		 * Returns the properties of an instance that should be sent to the data source when saving. Done by calling
		 * [can-define/map/map.prototype.serialize `instance.serialize()`].
		 *
		 * @signature `connection.serializeInstance(instance)`
		 * Simply calls [can-define/map/map.prototype.serialize] on the `instance` argument.
		 *
		 * @param {can-connect/can/map/map._Map} instance the instance to serialize
		 * @return {Object} the result of calling [can-define/map/map.prototype.serialize `instance.serialize()`]
		 */serializeInstance:function(instance){return canReflect_1_19_2_canReflect.serialize(instance);},/**
		 * @function can-connect/can/map/map.serializeList serializeList
		 * @parent can-connect/can/map/map.serializers
		 *
		 * Returns the properties of a list that should be sent to the data source when saving. Done by calling
		 * [can-define/list/list.prototype.serialize `list.serialize()`].
		 *
		 * @signature `connection.serializeList(list)`
		 * Simply calls [can-define/list/list.prototype.serialize] on the `list` argument.
		 *
		 * @param {can-connect/can/map/map._List} list the list to serialize
		 * @return {Object} the result of calling [can-define/list/list.prototype.serialize `list.serialize()`]
		 */serializeList:function(list){return canReflect_1_19_2_canReflect.serialize(list);},/**
		 * @property {Boolean} can-connect/can/map/map.updateInstanceWithAssignDeep updateInstanceWithAssignDeep
		 * @parent can-connect/can/map/map.options
		 *
		 * Use the response from `save()` and `destroy()` to assign properties, never delete them.
		 *
		 * @option {Boolean}
		 *
		 * Setting `updateInstanceWithAssignDeep` to `true` changes how instances get updated. Instead of using
		 * [can-diff/merge-deep/merge-deep], records will be updated with [can-reflect.assignDeep].
		 *
		 * The following example shows that the response from `.save()` only includes the `id`
		 * property. Normally, this would delete all other properties (`name`).  But setting `updateInstanceWithAssignDeep`
		 * to `true` prevents this:
		 *
		 * **Usage:**
		 *
		 * ```js
		 * import {DefineMap, restModel} from "can";
		 *
		 * var Todo = DefineMap.extend({
		 *   id: {type: "number", identity: true},
		 *   name: "string"
		 * });
		 *
		 * // restModel uses `can-connect/can/map/map`
		 * restModel({
		 *   Map: Todo,
		 *   url: "/todos",
		 *   updateInstanceWithAssignDeep: true
		 * });
		 *
		 *
		 * var todo = new Todo({name: "learn canjs"})
		 *
		 * var savePromise = todo.save()
		 * // SERVER SENDS
		 * // -> POST /todos {name: "learn canjs"}
		 *
		 * // SERVER RESPONDS WITH:
		 * // <- {id: 5}
		 *
		 * savePromise.then(function(){
		 *   // Name still exists even though the server did not
		 *   // respond with it.
		 *   todo.name //-> "learn canjs"
		 * })
		 * ```
		 *
		 * __NOTE__: [can-diff/merge-deep/merge-deep] is able to work _MUCH_ better with nested
		 * data than [can-reflect.assignDeep]. Specifically, it is able to better
		 * prevent overwriting one instance's data with another. The _Use_ section of [can-diff/merge-deep/merge-deep]
		 * goes over this ability. Make sure you understand its capabilities before turning it off.
		 *//**
		 * @property {connection.Map} can-connect/can/map/map._Map Map
		 * @parent can-connect/can/map/map.options
		 *
		 * Specify the type of the `[can-define/map/map DefineMap]` that should be instantiated by the connection.
		 *
		 * @option {connection.Map}
		 *
		 * **Usage:**
		 *
		 * ```js
		 * var DefineMap = require("can-define/map/map");
		 * var canMap = require("can-connect/can/map/map");
		 * var constructor = require("can-connect/constructor/constructor");
		 * var dataUrl = require("can-connect/data/url/url");
		 *
		 * var Todo = DefineMap.extend({
		 *   completed: "boolean",
		 *   complete: function(){
		 *     this.completed = true
		 *   }
		 * });
		 *
		 * var todoConnection = connect([dataUrl, constructor, canMap], {
		 *   Map: Todo,
		 *   url: "/todos"
		 * });
		 *
		 * todoConnect.get({id:1}).then(function(item) {
		 *   item instanceof Todo // true
		 * });
		 * ```
		 *//**
		 * @property {connection.List} can-connect/can/map/map._List List
		 * @parent can-connect/can/map/map.options
		 *
		 * Specify the type of the `[can-define/list/list DefineList]` that should be instantiated by the connection.
		 *
		 * @option {connection.List} If this option is not specified it defaults to the [can-connect/can/map/map._Map Map].List
		 * property.
		 *
		 * **Usage:**
		 * ```js
		 * var DefineMap = require("can-define/map/map");
		 * var DefineList = require("can-define/list/list");
		 * var canMap = require("can-connect/can/map/map");
		 * var constructor = require("can-connect/constructor/constructor");
		 * var dataUrl = require("can-connect/data/url/url");
		 *
		 * var Todo = DefineMap.extend({
		 *   completed: "boolean",
		 *   complete: function(){
		 *     this.completed = true
		 *   }
		 * });
		 *
		 * var Todo.List = DefineList.extend({
		 *   "#": Todo,
		 *   completed: function(){
		 *     this.filter(function(todo){
		 *       return todo.completed;
		 *     });
		 *   }
		 * });
		 *
		 * var todoConnection = connect([dataUrl, constructor, canMap],{
		 *   Map: Todo,
		 *   List: Todo.List,
		 *   url: "/todos"
		 * });
		 *
		 * todoConnection.getList({}).then(function(list) {
		 *   list instanceOf Todo.List // true
		 * })
		 * ```
		 *
		 *//**
		 * @function can-connect/can/map/map.instance instance
		 * @parent can-connect/can/map/map.hydrators
		 *
		 * Creates a [can-connect/can/map/map._Map] instance given raw data.
		 *
		 * @signature `connection.instance(props)`
		 *
		 *   Create an instance of [can-connect/can/map/map._Map].
		 *
		 *   @param {Object} props the raw instance data.
		 *   @return [can-connect/can/map/map._Map] a [can-connect/can/map/map._Map] instance containing the `props`.
		 */instance:function(props){var _Map=this.Map;return new _Map(props);},/**
		 * @function can-connect/can/map/map.list list
		 * @parent can-connect/can/map/map.hydrators
		 *
		 * Creates a [can-connect/can/map/map._List] instance given raw data.
		 *
		 * @signature `connection.list(listData, set)`
		 *
		 *   Creates an instance of [can-connect/can/map/map._List] if available, otherwise creates
		 *   [can-connect/can/map/map._Map].List if available.
		 *
		 *   This will add properties on the raw `listData` array to the created list instance. e.g:
		 *   ```js
		 *   var listData = [{id: 1, name:"do dishes"}, ...];
		 *   listData.loadedFrom; // "shard 5"
		 *
		 *   var todoList = todoConnection.list(listData, {});
		 *   todoList.loadedFrom; // "shard 5"
		 *   ```
		 *
		 *   @param {can-connect.listData} listData the raw list data.
		 *   @param {can-query-logic/query} query the set the data belongs to.
		 *   @return {can-connect.List} a [can-connect/can/map/map._List] instance containing instances of
		 *   [can-connect/can/map/map._Map] built from the list items in `listData`.
		 */list:function(listData,set){var _List=this.List||this.Map&&this.Map.List;var list=canReflect_1_19_2_canReflect.new(_List,listData.data);canReflect_1_19_2_canReflect.eachKey(listData,function(val,prop){if(prop!=='data'){canReflect_1_19_2_canReflect.setKeyValue(list,prop,val);}});list[this.listQueryProp]=set;return list;},/**
		 * @function can-connect/can/map/map.updatedList updatedList
		 * @parent can-connect/can/map/map.instance-callbacks
		 *
		 * Implements the [can-connect/constructor/constructor.updatedList] callback so it updates the list and it's items
		 * during a single [can-event/batch/batch batched event].
		 *
		 * @signature `connection.updatedList(list, listData, set)`
		 *
		 *   Updates the list and the items within it during a single [can-event/batch/batch batched event].
		 *
		 *   @param {can-connect.List} list the list to be updated.
		 *   @param {can-connect.listData} listData raw list data.
		 *   @param {can-query-logic/query} query the set of the list being updated.
		 */updatedList:function(list,listData,set){canQueues_1_3_2_canQueues.batch.start();var enqueueOptions={};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){enqueueOptions={reasonLog:["set",set,"list",list,"updated with",listData]};}//!steal-remove-end
canQueues_1_3_2_canQueues.mutateQueue.enqueue(baseConnection.updatedList,this,arguments,enqueueOptions);canQueues_1_3_2_canQueues.batch.stop();},save:function(instance){canReflect_1_19_2_canReflect.setKeyValue(instance,"_saving",true);//canEvent.dispatch.call(instance, "_saving", [true, false]);
var done=function(){canReflect_1_19_2_canReflect.setKeyValue(instance,"_saving",false);//canEvent.dispatch.call(instance, "_saving", [false, true]);
};var base=baseConnection.save.apply(this,arguments);base.then(done,done);return base;},destroy:function(instance){canReflect_1_19_2_canReflect.setKeyValue(instance,"_destroying",true);//canEvent.dispatch.call(instance, "_destroying", [true, false]);
var done=function(){canReflect_1_19_2_canReflect.setKeyValue(instance,"_destroying",false);//canEvent.dispatch.call(instance, "_destroying", [false, true]);
};var base=baseConnection.destroy.apply(this,arguments);base.then(done,done);return base;}};each([/**
		 * @function can-connect/can/map/map.createdInstance createdInstance
		 * @parent can-connect/can/map/map.instance-callbacks
		 *
		 * Implements the [can-connect/constructor/constructor.createdInstance] callback so it dispatches an event and
		 * updates the instance.
		 *
		 * @signature `connection.createdInstance(instance, props)`
		 *
		 *   Updates the instance with `props` and dispatches a "created" event on the instance and the instances's
		 *   constructor function ([can-connect/can/map/map._Map]).
		 *
		 *   Calls [can-connect/constructor/store/store.stores.moveCreatedInstanceToInstanceStore] to ensure new instances
		 *   are moved into the [can-connect/constructor/store/store.instanceStore] after being saved.
		 *
		 *   @param {can-connect/can/map/map._Map} instance a [can-connect/can/map/map._Map] instance
		 *   @param {Object} props the data in the response from [can-connect/connection.createData]
		 */"created",/**
		 * @function can-connect/can/map/map.updatedInstance updatedInstance
		 * @parent can-connect/can/map/map.instance-callbacks
		 *
		 * Implements the [can-connect/constructor/constructor.updatedInstance] callback so it dispatches an event and
		 * updates the instance.
		 *
		 * @signature `connection.updatedInstance(instance, props)`
		 *
		 *   Updates the instance with `props` and dispatches an "updated" event on the instance and the instances's
		 *   constructor function ([can-connect/can/map/map._Map]).
		 *
		 *   @param {can-connect/can/map/map._Map} instance a [can-connect/can/map/map._Map] instance
		 *   @param {Object} props the data in the response from [can-connect/connection.updateData]
		 */"updated",/**
		 * @function can-connect/can/map/map.destroyedInstance destroyedInstance
		 * @parent can-connect/can/map/map.instance-callbacks
		 *
		 * Implements the [can-connect/constructor/constructor.destroyedInstance] callback so it dispatches an event and
		 * updates the instance.
		 *
		 * @signature `connection.destroyedInstance(instance, props)`
		 *
		 *   Updates the instance with `props` and dispatches a "destroyed" event on the instance and the instances's
		 *   constructor function ([can-connect/can/map/map._Map]).
		 *
		 *   @param {can-connect/can/map/map._Map} instance a [can-connect/can/map/map._Map] instance
		 *   @param {Object} props the data in the response from [can-connect/connection.destroyData]
		 */"destroyed"],function(funcName){// Each of these is pretty much the same, except for the events they trigger.
behavior[funcName+"Instance"]=function(instance,props){// Update attributes if attributes have been passed
if(props&&typeof props==='object'){if(funcName==="destroyed"&&canReflect_1_19_2_canReflect.size(props)===0);else {if(this.constructor.removeAttr){updateDeepExceptIdentity(instance,props,this.queryLogic.schema);}// this is legacy
else if(this.updateInstanceWithAssignDeep){assignDeepExceptIdentity(instance,props,this.queryLogic.schema);}else {smartMergeExceptIdentity(instance,props,this.queryLogic.schema);}}}// This happens in constructor/store, but we don't call base, so we have to do it ourselves.
if(funcName==="created"&&this.moveCreatedInstanceToInstanceStore){this.moveCreatedInstanceToInstanceStore(instance);}canMapBehavior.callbackInstanceEvents(funcName,instance);};});return behavior;});/**
 * @function can-connect/can/map/map.callbackInstanceEvents callbackInstanceEvents
 * @parent can-connect/can/map/map.static
 *
 * Utility function to dispatch events for instance callbacks, e.g. [can-connect/can/map/map.updatedInstance].
 *
 * @signature `connection.callbackInstanceEvents(cbName, instance)`
 *
 *   Used to dispatch events as part of instance callbacks implementations. This method could be useful in other
 *   behaviors that implement instance callbacks. E.g. a behavior overriding the
 *   [can-connect/can/map/map.updatedInstance `updatedInstance`] callback:
 *
 *   ```
 *   connect([canMap, {
 *       updatedInstance: function(instance, props) {
 *           instance = smartMerge(instance, props);
 *           canMapBehavior.callbackInstanceEvents("updated", instance);
 *       }
 *   }], {})
 *   ```
 *
 *   @param {String} eventName name of the the event to be triggered
 *   @param {can-connect/can/map/map._Map} instance a [can-connect/can/map/map._Map] instance.
 */canMapBehavior.callbackInstanceEvents=function(funcName,instance){var constructor=instance.constructor;// triggers change event that bubble's like
// handler( 'change','1.destroyed' ). This is used
// to remove items on destroyed from Model Lists.
// but there should be a better way.
canQueues_1_3_2_canQueues.batch.start();map$1.dispatch.call(instance,{type:funcName,target:instance});//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(this.id){dev.log("can-connect/can/map/map.js - "+(constructor.shortName||this.name)+" "+this.id(instance)+" "+funcName);}}//!steal-remove-end
// Call event on the instance's Class
map$1.dispatch.call(constructor,funcName,[instance]);canQueues_1_3_2_canQueues.batch.stop();};var mapOverwrites={static:{/**
		 * @function can-connect/can/map/map.getList getList
		 * @parent can-connect/can/map/map.map-static
		 *
		 * Retrieve a list of instance.
		 *
		 * @signature `Map.getList(query)`
		 *
		 * `.getList` is added to the configured [can-connect/can/map/map._Map] type. Retrieves a [can-connect/can/map/map._List] of
		 * [can-connect/can/map/map._Map] instances via the connection.
		 *
		 * ```js
		 * // import connection plugins
		 * var canMap = require("can-connect/can/map/map");
		 * var constructor = require("can-connect/constructor/constructor");
		 * var dataUrl = require("can-connect/data/url/url");
		 *
		 * // define connection types
		 * var Todo = DefineMap.extend({
		 *   id: "number",
		 *   complete: "boolean",
		 *   name: "string"
		 * });
		 *
		 * Todo.List = DefineList.extend({
		 *   completed: function() {
		 *     return this.filter(function(item) { return item.completed; });
		 *   }
		 * });
		 *
		 * // create connection
		 * connect([canMap, constructor, dataUrl],{
		 *   Map: Todo,
		 *   url: "/todos"
		 * })
		 *
		 * // retrieve instances
		 * Todo.getList({filter: {due: "today"}}).then(function(todos){
		 *   ...
		 * });
		 * ```
		 *
		 * @param {can-query-logic/query} query Definition of the list being retrieved.
		 * @return {Promise<Map>} `Promise` returning the [can-connect/can/map/map._List] of instances being retrieved
		 *
		 *
		 *
		 *
		 */getList:function(base,connection){return function(set){return connection.getList(set);};},/**
		 * @function can-connect/can/map/map.findAll findAll
		 * @parent can-connect/can/map/map.map-static
		 * @hide
		 *
		 * Alias of [can-connect/can/map/map.getList]. You should use `.getList()`.
		 */findAll:function(base,connection){return function(set){return connection.getList(set);};},/**
		 * @function can-connect/can/map/map.get get
		 * @parent can-connect/can/map/map.map-static
		 *
		 * Use it to get a single instance by id.
		 *
		 * @signature `Map.get(params)`
		 *
		 * `.get()` is added to the configured [can-connect/can/map/map._Map] type.
		 * Use it to get a single instance by the identity keys of the Map type.
		 *
		 * ```js
		 * // import connection plugins
		 * var canMap = require("can-connect/can/map/map");
		 * var constructor = require("can-connect/constructor/constructor");
		 * var dataUrl = require("can-connect/data/url/url");
		 *
		 * // define connection type
		 * var Todo = DefineMap.extend({
		 *   id: "number",
		 *   complete: "boolean",
		 *   name: "string"
		 * });
		 *
		 * // create connection
		 * connect([canMap, constructor, dataUrl],{
		 *   Map: Todo,
		 *   url: "/todos"
		 * })
		 *
		 * // retrieve instance
		 * Todo.get({id: 5}).then(function(todo){
		 *   ...
		 * });
		 * ```
		 *
		 * @param {Object} params Identifying parameters of the instance to retrieve. Typically, this is an object
		 * with the identity property and its value like: `{_id: 5}`.
		 * @return {Promise<Map>} `Promise` returning the [can-connect/can/map/map._Map] instance being retrieved
		 *
		 * @body
		 *
		 * ## Get a single record by filtering non-identity keys
		 *
		 * Sometimes, you want a single record, but by filtering non-identity keys.  Instead of using
		 * `.get`, use `.getList` like:
		 *
		 * ```js
		 * var firstCompleteTodo = Todo.getList({
		 *   filter: {complete: false},
		 *   page: {start: 0, end: 0}
		 * }).then(function(list){
		 *   return list.length ? list[0] : Promise.reject({message: "reject message"});
		 * });
		 * ```
		 *
		 */get:function(base,connection){return function(params){// adds .then for compat
return connection.get(params);};},/**
		 * @function can-connect/can/map/map.findOne findOne
		 * @parent can-connect/can/map/map.map-static
		 * @hide
		 *
		 * Alias of [can-connect/can/map/map.get]. You should use `.get()`.
		 */findOne:function(base,connection){return function(params){// adds .then for compat
return connection.get(params);};}},prototype:{isNew:function(base,connection){/**
			 * @function can-connect/can/map/map.prototype.isNew isNew
			 * @parent can-connect/can/map/map.map
			 *
			 * If the data is not in the dat
			 *
			 * @signature `instance.isNew()`
			 *
			 * Returns if the instance has not been loaded from or saved to the data source.
			 *
			 * ```js
			 * connect([...],{
			 *   Map: Todo
			 * });
			 *
			 * var todo = new Todo();
			 * todo.isNew()   //-> true
			 *
			 * todo.save().then(function(){
			 *   todo.isNew() //-> false
			 * })
			 * ```
			 *
			 * @return {Boolean} Returns `true` if [can-connect/base/base.id] is `null` or `undefined`.
			 */return function(){return connection.isNew(this);};},isSaving:function(base,connection){/**
			 * @function can-connect/can/map/map.prototype.isSaving isSaving
			 * @parent can-connect/can/map/map.map
			 *
			 * Returns if the instance is currently being saved.
			 *
			 * @signature `instance.isSaving()`
			 *
			 * Observes if a promise returned by [can-connect/connection.save `connection.save`] is in progress for this
			 * instance.  This is often used in a template like:
			 *
			 * ```html
			 * <button on:click="todo.save()"
			 *    disabled:from="todo.isSaving()">
			 *   Save Changes
			 * </button>
			 * ```
			 *
			 *   @return {Boolean} Returns `true` if [can-connect/connection.save `connection.save`] has been called for this
			 *   instance but the returned promise has not yet resolved.
			 */return function(){return !!canReflect_1_19_2_canReflect.getKeyValue(this,"_saving");};},isDestroying:function(base,connection){/**
			 * @function can-connect/can/map/map.prototype.isDestroying isDestroying
			 * @parent can-connect/can/map/map.map
			 *
			 * Returns if the instance is currently being destroyed.
			 *
			 * @signature `instance.isDestroying()`
			 *
			 * Observes if a promise returned by [can-connect/connection.destroy `connection.destroy`] is in progress for this
			 * instance.  This is often used in a template like:
			 *
			 * ```html
			 * <button on:click="todo.destroy()"
			 *         disabled:from="todo.isDestroying()">
			 *   Delete
			 * </button>
			 * ```
			 *
			 *   @return {Boolean} `true` if [can-connect/connection.destroy `connection.destroy`] has been called for this
			 *   instance but the returned promise has not resolved.
			 */return function(){return !!canReflect_1_19_2_canReflect.getKeyValue(this,"_destroying");};},save:function(base,connection){/**
			 * @function can-connect/can/map/map.prototype.save save
			 * @parent can-connect/can/map/map.map
			 *
			 * Save or update client data to the persisted data source.
			 *
			 * @signature `instance.save(success, error)`
			 *
			 * Calls [can-connect/connection.save].
			 *
			 * ```js
			 * // import connection plugins
			 * var canMap = require("can-connect/can/map/map");
			 * var constructor = require("can-connect/constructor/constructor");
			 * var dataUrl = require("can-connect/data/url/url");
			 *
			 * // define connection types
			 * var Todo = DefineMap.extend({
			 *   id: "number",
			 *   complete: "boolean",
			 *   name: "string"
			 * });
			 *
			 * // create connection
			 * connect([canMap, constructor, dataUrl], {
			 *   Map: Todo,
			 *   url: "/todos"
			 * })
			 *
			 * new Todo({name: "dishes"}).save();
			 * ```
			 *
			 *   @param {function} success A function that is called if the save is successful.
			 *   @param {function} error A function that is called if the save is rejected.
			 *   @return {Promise<Instance>} A promise that resolves to the instance if successful.
			 *
			 *
			 */return function(success,error){// return only one item for compatability
var promise=connection.save(this);promise.then(success,error);return promise;};},destroy:function(base,connection){/**
			 * @function can-connect/can/map/map.prototype.destroy destroy
			 * @parent can-connect/can/map/map.map
			 *
			 * Delete an instance from the service via the connection.
			 *
			 * @signature `instance.destroy(success, error)`
			 *
			 * Calls [can-connect/connection.destroy] for the `instance`.
			 *
			 * ```js
			 * // import connection plugins
			 * var canMap = require("can-connect/can/map/map");
			 * var constructor = require("can-connect/constructor/constructor");
			 * var dataUrl = require("can-connect/data/url/url");
			 *
			 * // define connection types
			 * var Todo = DefineMap.extend({
			 *   id: "number",
			 *   complete: "boolean",
			 *   name: "string"
			 * });
			 *
			 * // create connection
			 * connect([canMap, constructor, dataUrl],{
			 *   Map: Todo,
			 *   url: "/todos"
			 * })
			 *
			 * // read instance
			 * Todo.get({id: 5}).then(function(todo){
			 *   if (todo.complete) {
			 *     // delete instance
			 *     todo.destroy();
			 *   }
			 * });
			 * ```
			 *
			 * @param {function} success a function that is called if the [can-connect/connection.destroy] call is successful.
			 * @param {function} error a function that is called if the [can-connect/connection.destroy] call is rejected.
			 * @return {Promise<Instance>} a promise that resolves to the instance if successful
			 *
			 *
			 */return function(success,error){var promise=connection.destroy(this);promise.then(success,error);return promise;};}},properties:{_saving:{enumerable:false,value:false,configurable:true,writable:true},_destroying:{enumerable:false,value:false,configurable:true,writable:true}}};var listOverwrites={static:{_bubbleRule:function(base,connection){return function(eventName,list){var bubbleRules=base(eventName,list);bubbleRules.push('destroyed');return bubbleRules;};}},prototype:{setup:function(base,connection){return function(params){// If there was a plain object passed to the List constructor,
// we use those as parameters for an initial getList.
if(isPlainObject(params)&&!Array.isArray(params)){this[connection.listQueryProp]=params;base.apply(this);this.replace(canReflect_1_19_2_canReflect.isPromise(params)?params:connection.getList(params));}else {// Otherwise, set up the list like normal.
base.apply(this,arguments);}};}},properties:{}};var overwrite=function(connection,Constructor,overwrites){var prop;for(prop in overwrites.properties){canReflect_1_19_2_canReflect.defineInstanceKey(Constructor,prop,overwrites.properties[prop]);}for(prop in overwrites.prototype){Constructor.prototype[prop]=overwrites.prototype[prop](Constructor.prototype[prop],connection);}if(overwrites.static){for(prop in overwrites.static){Constructor[prop]=overwrites.static[prop](Constructor[prop],connection);}}};module.exports=canMapBehavior;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var validate$$1=validate;module.exports=validate$$1(canMapBehavior,['id','get','updatedList','destroy','save','getList']);}//!steal-remove-end
});var assign$3=canReflect_1_19_2_canReflect.assignMap;var WeakReferenceSet=function(){this.set=[];};// if weakmap, we can add and never worry ...
// otherwise, we need to have a count ...
assign$3(WeakReferenceSet.prototype,{has:function(item){return this._getIndex(item)!==-1;},addReference:function(item,referenceCount){var index=this._getIndex(item);var data=this.set[index];if(!data){data={item:item,referenceCount:0};this.set.push(data);}data.referenceCount+=referenceCount||1;},deleteReference:function(item){var index=this._getIndex(item);var data=this.set[index];if(data){data.referenceCount--;if(data.referenceCount===0){this.set.splice(index,1);}}},delete:function(item){var index=this._getIndex(item);if(index!==-1){this.set.splice(index,1);}},get:function(item){var data=this.set[this._getIndex(item)];if(data){return data.item;}},referenceCount:function(item){var data=this.set[this._getIndex(item)];if(data){return data.referenceCount;}},_getIndex:function(item){var index;this.set.every(function(data,i){if(data.item===item){index=i;return false;}return true;});return index!==undefined?index:-1;},/**
	 * @function can-connect/helpers/weak-reference-map.prototype.forEach forEach
	 * @signature `weakReferenceMap.forEach(callback)`
	 *
	 *   Calls `callback` for every value in the store.
	 *
	 *   @param  {function(*,String)} callback(item,key) A callback handler.
	 */forEach:function(cb){return this.set.forEach(cb);}});var weakReferenceSet=WeakReferenceSet;var sortedSetJson=function(set){if(set==null){return set;}else {return JSON.stringify(canReflect_1_19_2_canReflect.cloneKeySort(set));}};var store=createCommonjsModule(function(module){/**
 * @module {connect.Behavior} can-connect/constructor/store/store constructor/store
 * @parent can-connect.behaviors
 * @group can-connect/constructor/store/store.stores 0 stores
 * @group can-connect/constructor/store/store.callbacks 1 CRUD callbacks
 * @group can-connect/constructor/store/store.crud 2 CRUD methods
 * @group can-connect/constructor/store/store.hydrators 3 hydrators
 *
 * Adds support for keeping references to active lists and instances. Prevents different copies of an instance from
 * being used by the application at once. Allows other behaviors to look up instances currently active in the
 * application.
 *
 *
 * @signature `constructorStore( baseConnection )`
 *
 * Overwrites `baseConnection` so it contains a store for instances and lists.  This behavior:
 * - extends the [can-connect/constructor/store/store.hydrateInstance] and
 * [can-connect/constructor/store/store.hydrateList] methods to return instances or lists from the store, if available
 * - overwrites "CRUD" methods to make sure that while requests are pending, new lists and instances have references
 * kept in the store. This prevents duplicated instances from being created during concurrent requests.
 * - provides methods to add and remove items in the store by counting references
 *
 * @param {{}} baseConnection `can-connect` connection object that is having the `constructor/store` behavior added
 * on to it. Should already contain a behavior that provides the InstanceInteface
 * (e.g [can-connect/constructor/constructor]). If the `connect` helper is used to build the connection, the behaviors
 * will automatically be ordered as required.
 *
 * @return {Object} a `can-connect` connection containing the method implementations provided by `constructor/store`.
 *
 * @body
 *
 * ## Use
 *
 * The `constructor-store` behavior is used to:
 *  - provide a store of instances and lists in use by the client
 *  - prevent multiple instances from being generated for the same [can-connect/base/base.id] or multiple
 *    lists for the same [can-connect/base/base.listQuery].
 *
 * The store provides access to an instance by its [can-connect/base/base.id] or a list by its
 * [can-connect/base/base.listQuery]. This is used by other behaviors to lookup instances that should have changes applied.
 * Two examples, when there is a new instance that should be added to a list ([can-connect/real-time/real-time]) or
 * when newer data is available for a cached instance that is used in the page
 * ([can-connect/fall-through-cache/fall-through-cache]).
 *
 * Below you can see how `constructor-store`'s behavior be used to prevent multiple instances from being generated. This
 * example allows you to create multiple instances of a `todoEditor` that loads and edits a todo instance:
 *
 * @demo demos/can-connect/constructor-store.html
 *
 * You can see in this example that you can edit one todo and the other todos update.  This is because each `todoEditor`
 * is acting on same instance in memory. When it updates the todo's name here:
 *
 * ```
 * var updateData = function(newName) {
 *   todo.name = newName; // update name on todo instance
 *   ...
 * };
 * ```
 *
 * The other widgets update because they are bound to the same instance:
 *
 * ```
 * todo.on("name", updateElement); // when todo name changes update input element
 * todosConnection.addInstanceReference(todo); // previous line is a new usage of todo, so increase reference count
 * ```
 *
 * Each `todoEditor` receives the same instance because it was added to the
 * [can-connect/constructor/store/store.instanceStore connnection.instanceStore] by
 * [can-connect/constructor/store/store.addInstanceReference]. During all instance retrievals, a connection using the
 * `constructor/store` behavior checks the [can-connect/constructor/store/store.instanceStore] for an instance with a
 * matching `id` and return that if it exists. This example always requests `id: 5`, so all the `todoEditor`s use the
 * same instance held in the [can-connect/constructor/store/store.instanceStore].
 *
 * This widget cleans itself up when it is removed by removing the listener on the `todo` instance and
 * [can-connect/constructor/store/store.deleteInstanceReference reducing the instance reference count]:
 *
 * ```
 * todo.off("name", updateElement); // stop listening to todo name change
 * todosConnection.deleteInstanceReference(todo); // previous line removed a usage of todo, so reduce reference count
 * ```
 * This is done to prevent a memory leak produced by keeping instances in the `instanceStore` when they are no longer
 * needed by the application.
 *
 * **Note:** a hazard of sharing the same instance is that if new instance data is loaded from the server during
 * on-going editing of the instance, the new server data will replace the data that is edited but not yet saved.
 * This is because whenever data is loaded from the server, it is passed to
 * [can-connect/constructor/constructor.updatedInstance] which updates the shared instance properties with the new
 * server data.
 */// shared across all connections
var pendingRequests=0;var noRequestsTimer=null;var requests={increment:function(connection){pendingRequests++;clearTimeout(noRequestsTimer);},decrement:function(connection){pendingRequests--;if(pendingRequests===0){noRequestsTimer=setTimeout(function(){requests.dispatch("end");},module.exports.requestCleanupDelay);}if(pendingRequests<0){pendingRequests=0;}},count:function(){return pendingRequests;}};map$1(requests);var constructorStore=canConnect_4_0_6_canConnect.behavior("constructor/store",function(baseConnection){var behavior={/**
		 * @property {can-connect/helpers/weak-reference-map} can-connect/constructor/store/store.instanceStore instanceStore
		 * @parent can-connect/constructor/store/store.stores
		 *
		 * A mapping of instances keyed by their [can-connect/base/base.id].
		 *
		 * @type {can-connect/helpers/weak-reference-map}
		 *
		 * Stores instances by their [can-connect/base/base.id]. Holds instances based on reference counts which
		 * are incremented by [can-connect/constructor/store/store.addInstanceReference] and decremented by
		 * [can-connect/constructor/store/store.deleteInstanceReference]. Once a reference count is 0, the instance is no
		 * longer held in the store. Once a reference count is greater than 0, the instance is added to the store.
		 *
		 * ```js
		 * connection.addInstanceReference(todo5);
		 * connection.instanceStore.get("5") //-> todo5
		 * ```
		 */instanceStore:new weakReferenceMap(),// This really should be a set ... we just need it "weak" so we know how many references through binding
// it has.
newInstanceStore:new weakReferenceSet(),/**
		 * @property {can-connect/helpers/weak-reference-map} can-connect/constructor/store/store.listStore listStore
		 * @parent can-connect/constructor/store/store.stores
		 *
		 * A mapping of lists keyed by their [can-connect/base/base.listQuery].
		 *
		 * @type {can-connect/helpers/weak-reference-map}
		 *
		 * Stores lists by their [can-connect/base/base.listQuery]. Hold lists based on reference counts which are incremented
		 * by [can-connect/constructor/store/store.addListReference] and decremented by
		 * [can-connect/constructor/store/store.deleteListReference]. Once a reference count is 0, the list is no
		 * longer held in the store. Once a reference count is greater than 0, the list is added to the store.
		 *
		 * ```js
		 * connection.addInstanceReference(allTodos, {});
		 * connection.instanceStore.get({}) //-> allTodos
		 * ```
		 */listStore:new weakReferenceMap(),// Set up the plain objects for tracking requested lists and instances for this connection,
// and add a handler to the requests counter to flush list and instance references when all
// requests have completed
//
// This function is called automatically when connect() is called on this behavior,
// and should not need to be called manually.
init:function(){if(baseConnection.init){baseConnection.init.apply(this,arguments);}if(!this.hasOwnProperty("_requestInstances")){this._requestInstances={};}if(!this.hasOwnProperty("_requestLists")){this._requestLists={};}requests.on("end",function onRequestsEnd_deleteStoreReferences(){var id;for(id in this._requestInstances){this.instanceStore.deleteReference(id);}this._requestInstances={};for(id in this._requestLists){this.listStore.deleteReference(id);this._requestLists[id].forEach(this.deleteInstanceReference.bind(this));}this._requestLists={};}.bind(this));},_finishedRequest:function(){requests.decrement(this);},/**
		 * @function can-connect/constructor/store/store.addInstanceReference addInstanceReference
		 * @parent can-connect/constructor/store/store.stores
		 *
		 * Add a reference to the [can-connect/constructor/store/store.instanceStore] so an instance can be easily looked up.
		 *
		 * @signature `connection.addInstanceReference( instance )`
		 * Adds a reference to an instance by [can-connect/base/base.id] to the [can-connect/constructor/store/store.instanceStore].
		 * Keeps a count of the number of references, removing the instance from the store when the count reaches 0.
		 *
		 * @param {can-connect/Instance} instance the instance to add
		 *
		 * @body
		 *
		 * ## Use
		 *
		 * The [can-connect/constructor/store/store.instanceStore] contains a mapping of instances keyed by their
		 * [can-connect/base/base.id]. The [can-connect/constructor/store/store.instanceStore] is used to prevent creating
		 * the same instance multiple times, and for finding active instance for a given id.  Instances need to be added to
		 * this store for this to work.  To do this, call `addInstanceReference`:
		 *
		 * ```
		 * // a basic connection
		 * var constructorStore = require("can-connect/constructor/store/");
		 * var constructor = require("can-connect/constructor/");
		 * var dataUrl = require("can-connect/data/url/");
		 * var todoConnection = connect([dataUrl, constructorStore, constructor], {
		 *   url: "/todos"
		 * });
		 *
		 * var originalTodo;
		 *
		 * // get a todo
		 * todoConnection.get({id: 5}).then(function( todo ){
		 *   // add it to the store
		 *   todoConnection.addInstanceReference(todo);
		 *   originalTodo = todo;
		 * });
		 * ```
		 *
		 * Now, if you were to retrieve the same data sometime later, it would be the same instance:
		 *
		 * ```
		 * todoConnection.get({id: 5}).then(function( todo ){
		 *   todo === originalTodo // true
		 * });
		 * ```
		 *
		 * The `.getData` response data (underlying the call to `todoConnection.get`) is passed, along with the existing todo
		 * instance (`originalTodo`) to [can-connect/constructor/constructor.updatedInstance]. That updates the shared
		 * instance with the newly retrieved data.
		 *
		 * All the referenced instances are held in memory.  Use
		 * [can-connect/constructor/store/store.deleteInstanceReference] to remove them.
		 *
		 * Typically, `addInstanceReference` is called when something expresses interest in the instance, such
		 * as an event binding, and `deleteInstanceReference` is called when the interest is removed.
		 */addInstanceReference:function(instance,id){var ID=id||this.id(instance);if(ID===undefined){// save in the newInstanceStore store temporarily.
this.newInstanceStore.addReference(instance);}else {this.instanceStore.addReference(ID,instance);}},/**
		 * @function can-connect/constructor/store/store.callbacks.createdInstance createdInstance
		 * @parent can-connect/constructor/store/store.callbacks
		 *
		 * Calls `createdInstance` on the underlying behavior and moves the new instance from the `newInstanceStore` to
		 * `instanceStore` if needed.
		 *
		 * @signature `connection.createdInstance( instance, props )`
		 * Calls the base behavior. Then calls [can-connect/constructor/store/store.stores.moveCreatedInstanceToInstanceStore]
		 * to move any pre-creation instance references to the standard instance reference store.
		 *
		 * @param {can-connect/Instance} instance the instance that was created
		 * @param {Object} props the data returned from [can-connect/connection.createData]
		 */createdInstance:function(instance,props){// when an instance is created, and it is in the newInstance store
// transfer it to the instanceStore
baseConnection.createdInstance.apply(this,arguments);this.moveCreatedInstanceToInstanceStore(instance);},/**
		 * @function can-connect/constructor/store/store.stores.moveCreatedInstanceToInstanceStore moveCreatedInstanceToInstanceStore
		 * @parent can-connect/constructor/store/store.stores
		 *
		 * Moves recently created instances into the [can-connect/constructor/store/store.instanceStore].
		 *
		 * @signature `moveCreatedInstanceToInstanceStore( instance )`
		 * Checks if an instance has an `id` and is in the `newInstanceStore`. If so, it adds it into the
		 * [can-connect/constructor/store/store.instanceStore] and removes it from the `newInstanceStore`.
		 *
		 * A new instances may have been added to the `newInstanceStore` if [can-connect/constructor/store/store.addInstanceReference]
		 * is called on is before the instance has been saved. This is done so we can keep track of references for unsaved
		 * instances and update the references to be keyed by `id` when one is available. Without this a request for a
		 * currently referenced instance that was just saved for the first time will erroneously result in a new instance.
		 *
		 * @param {can-connect/Instance} instance an instance.  If it was "referenced" (bound to) prior to
		 * being created, this will check for that condition and move this instance into the
		 * [can-connect/constructor/store/store.instanceStore].
		 */moveCreatedInstanceToInstanceStore:function(instance){var ID=this.id(instance);if(this.newInstanceStore.has(instance)&&ID!==undefined){var referenceCount=this.newInstanceStore.referenceCount(instance);this.newInstanceStore.delete(instance);this.instanceStore.addReference(ID,instance,referenceCount);}},addInstanceMetaData:function(instance,name,value){var data=this.instanceStore.set[this.id(instance)];if(data){data[name]=value;}},getInstanceMetaData:function(instance,name){var data=this.instanceStore.set[this.id(instance)];if(data){return data[name];}},deleteInstanceMetaData:function(instance,name){var data=this.instanceStore.set[this.id(instance)];delete data[name];},/**
		 * @function can-connect/constructor/store/store.deleteInstanceReference deleteInstanceReference
		 * @parent can-connect/constructor/store/store.stores
		 *
		 * Remove a reference from the [can-connect/constructor/store/store.instanceStore] so an instance can be garbage
		 * collected.
		 *
		 * @signature `connection.addInstanceReference( instance )`
		 * Decrements the number of references to an instance in the [can-connect/constructor/store/store.instanceStore].
		 * Removes the instance if there are no longer any references.
		 *
		 * @param {can-connect/Instance} instance the instance to remove
		 *
		 * ### Usage
		 *
		 * `deleteInstanceReference` is called to remove references to instances in the
		 * [can-connect/constructor/store/store.instanceStore] so that instances maybe garbage collected.  It's usually
		 * called when the application or some part of the application no longer is interested in an instance.
		 *
		 * [can-connect/constructor/store/store.addInstanceReference] has an example of adding an instance to the store.
		 * The following continues that example to remove the `originalTodo` instance from the store:
		 *
		 * ```
		 * todoConnection.deleteInstanceReference(originalTodo);
		 * ```
		 *
		 * Also see the [can-connect/constructor/store/store#Use usage example on the index page] for a more complete
		 * example of the lifecycle of a reference.
		 */deleteInstanceReference:function(instance){var ID=this.id(instance);if(ID===undefined){// if there is no id, remove this from the newInstanceStore
this.newInstanceStore.deleteReference(instance);}else {this.instanceStore.deleteReference(this.id(instance),instance);}},/**
		 * @property {WeakReferenceMap} can-connect/constructor/store/store.addListReference addListReference
		 * @parent can-connect/constructor/store/store.stores
		 *
		 * Add a reference to the [can-connect/constructor/store/store.listStore] so a list can be easily looked up.
		 *
		 * @signature `connection.addListReference( list[, set] )`
		 * Adds a reference to a list by `set` (or by [can-connect/base/base.listQuery]) to the
		 * [can-connect/constructor/store/store.listStore].  Keeps a count of the number of references, removing the list
		 * from the store when the count reaches 0.
		 *
		 * @param {can-connect.List} list The list to add.
		 * @param {can-query-logic/query} [query] The set this list represents if it can't be identified with [can-connect/base/base.listQuery].
		 *
		 * @body
		 *
		 * ## Use
		 *
		 * The [can-connect/constructor/store/store.listStore] contains a mapping of lists keyed by their `set`. The
		 * [can-connect/constructor/store/store.listStore] is used to prevent creating the same list multiple times and for
		 * identifying a list for a given set. Lists need to be added to this store for this to work.  To do this, call
		 * `addListReference`:
		 *
		 * ```
		 * // A basic connection:
		 * var constructorStore = require("can-connect/constructor/store/");
		 * var constructor = require("can-connect/constructor/");
		 * var dataUrl = require("can-connect/data/url/");
		 * var todoConnection = connect([dataUrl, constructorStore, constructor], {
		 *   url: "/todos"
		 * });
		 *
		 * var dueToday;
		 *
		 * // get a todo list
		 * todoConnection.getList({due: "today"}).then(function( todos ){
		 *   // add it to the store
		 *   todoConnection.addListReference(todos, {due: "today"});
		 *   dueToday = todos;
		 * });
		 * ```
		 *
		 * Now, if you were to retrieve the same set of data sometime later, it would be the same list instance:
		 *
		 * ```
		 * todoConnection.get({due: "today"}).then(function( todos ){
		 *   todos === dueToday //-> true
		 * });
		 * ```
		 *
		 * The `.getListData`  response data (underlying the call to `todoConnection.getList`) is passed, along with the
		 * existing list (`dueToday`) to [can-connect/constructor/constructor.updatedList]. That updates the shared list
		 * instance with the newly retrieved data.
		 *
		 * All the referenced lists stay in memory.  Use [can-connect/constructor/store/store.deleteListReference]
		 * to remove them.
		 *
		 * Typically, `addListReference` is called when something expresses interest in the list, such
		 * as an event binding, and `deleteListReference` is called when interest is removed.
		 *
		 */addListReference:function(list,set){var id=sortedSetJson(set||this.listQuery(list));if(id){this.listStore.addReference(id,list);list.forEach(function(instance){this.addInstanceReference(instance);}.bind(this));}},/**
		 * @function can-connect/constructor/store/store.deleteListReference deleteListReference
		 * @parent can-connect/constructor/store/store.stores
		 *
		 * Removes a reference from the [can-connect/constructor/store/store.listStore] so a list can can be garbage
		 * collected.
		 *
		 * @signature `connection.addInstanceReference( instance )`
		 * Decrements the number of references to a list in the [can-connect/constructor/store/store.listStore].
		 * Removes the list if there are no longer any references.
		 *
		 * @param {can-connect/Instance} list the list to remove
		 *
		 * ### Usage
		 *
		 * `deleteListReference` is called to remove references to instances in the
		 * [can-connect/constructor/store/store.listStore] so that lists maybe garbage collected.  It's usually called when
		 * the application or some part of the application no longer is interested in a list.
		 *
		 * [can-connect/constructor/store/store.addListReference] has an example of adding a list to the store.  The
		 * following continues that example to remove the `dueToday` list from the store:
		 *
		 * ```
		 * todoConnection.deleteListReference(dueToday);
		 * ```
		 *
		 * Also see the [can-connect/constructor/store/store#Use usage example on the index page] for a more complete
		 * example of the lifecycle of a reference.
		 */deleteListReference:function(list,set){var id=sortedSetJson(set||this.listQuery(list));if(id){this.listStore.deleteReference(id,list);list.forEach(this.deleteInstanceReference.bind(this));}},/**
		 * @function can-connect/constructor/store/store.hydratedInstance hydratedInstance
		 * @parent can-connect/constructor/store/store.hydrators
		 *
		 * Keeps new instances in the [can-connect/constructor/store/store.instanceStore] for the lifetime of any
		 * concurrent requests.
		 *
		 * @signature `hydratedInstance(instance)`
		 * Adds a reference for new instances for the lifetime of any concurrent requests. Called when a new instance is
		 * created during [can-connect/constructor/store/store.hydrateInstance hydration]. This prevents concurrent requests
		 * for the same data from returning different instances.
		 *
		 * @param {can-connect/Instance} instance the newly hydrated instance
		 */// ## hydratedInstance
hydratedInstance:function(instance){if(requests.count()>0){var id=this.id(instance);if(!this._requestInstances[id]){this.addInstanceReference(instance);this._requestInstances[id]=instance;}}},/**
		 * @function can-connect/constructor/store/store.hydrateInstance hydrateInstance
		 * @parent can-connect/constructor/store/store.hydrators
		 *
		 * Returns an instance given raw data, returning it from the [can-connect/constructor/store/store.instanceStore] if
		 * available.
		 *
		 * @signature `connection.hydrateInstance(props)`
		 * Overwrites the base `hydrateInstance` so that if a matching instance is in the
		 * [can-connect/constructor/store/store.instanceStore], that instance will be
		 * [can-connect/constructor/constructor.updatedInstance updated] with `props` and returned.  If there isn't a
		 * matching instance, the base `hydrateInstance` will be called.
		 *
		 * @param {Object} props the raw data used to create an instance
		 * @return {can-connect/Instance} a typed instance either created or updated with the data from `props`.
		 */hydrateInstance:function(props){var id=this.id(props);if((id||id===0)&&this.instanceStore.has(id)){var storeInstance=this.instanceStore.get(id);// TODO: find a way to prevent this from being called so many times.
this.updatedInstance(storeInstance,props);return storeInstance;}var instance=baseConnection.hydrateInstance.call(this,props);this.hydratedInstance(instance);return instance;},/**
		 * @function can-connect/constructor/store/store.hydratedList hydratedList
		 * @parent can-connect/constructor/store/store.hydrators
		 *
		 * Keeps new lists in the [can-connect/constructor/store/store.listStore] for the lifetime of any concurrent
		 * requests.
		 *
		 * @signature `hydratedList(list)`
		 * Adds a reference for new lists for the lifetime of any concurrent requests. Called when a new list is
		 * created during [can-connect/constructor/store/store.hydrateList hydration]. This prevents concurrent requests
		 * for the same data from returning different instances.
		 *
		 * @param {can-connect.List} list the newly hydrated list
		 */hydratedList:function(list,set){if(requests.count()>0){var id=sortedSetJson(set||this.listQuery(list));if(id){if(!this._requestLists[id]){this.addListReference(list,set);this._requestLists[id]=list;}}}},/**
		 * @function can-connect/constructor/store/store.hydrateList hydrateList
		 * @parent can-connect/constructor/store/store.hydrators
		 *
		 * Returns a list given raw data, returning it from the [can-connect/constructor/store/store.listStore] if
		 * available.
		 *
		 * @signature `connection.hydrateList( listData, set )`
		 *
		 *   Overwrites the base `hydrateList` so that if a matching list is in the
		 *   [can-connect/constructor/store/store.listStore], that list will be
		 *   [can-connect/constructor/constructor.updatedList updated] with `listData` and returned.
		 *   If there isn't a matching list, the base `hydrateList` will be called.
		 *
		 *   @param {can-connect.listData} listData raw list data to hydrate into a list type
		 *   @param {can-query-logic/query} query the parameters that represent the set of data in `listData`
		 *   @return {List} a typed list from either created or updated with the data from `listData`
		 */hydrateList:function(listData,set){set=set||this.listQuery(listData);var id=sortedSetJson(set);if(id&&this.listStore.has(id)){var storeList=this.listStore.get(id);this.updatedList(storeList,listData,set);return storeList;}var list=baseConnection.hydrateList.call(this,listData,set);this.hydratedList(list,set);return list;},/**
		 * @function can-connect/constructor/store/store.getList getList
		 * @parent can-connect/constructor/store/store.crud
		 *
		 * Extends the underlying [can-connect/connection.getList] so any [can-connect/constructor/store/store.hydrateInstance instances hydrated]
		 * or [can-connect/constructor/store/store.hydrateList lists hydrated] during this request are kept in the store until
		 * all the concurrent requests complete.
		 *
		 * @signature `connection.getList( set )`
		 * Increments an internal request counter so instances hydrated during this request will be stored, and then
		 * decrements the counter after the request is complete. This prevents concurrent requests for the same data from
		 * returning different instances.
		 *
		 * @param {can-query-logic/query} listQuery parameters specifying the list to retrieve
		 * @return {Promise<can-connect/Instance>} `Promise` returned by the underlying behavior's [can-connect/connection.getList]
		 */getList:function(listQuery){var self=this;requests.increment(this);var promise=baseConnection.getList.call(this,listQuery);promise.then(function(instances){self._finishedRequest();},function(){self._finishedRequest();});return promise;},/**
		 * @function can-connect/constructor/store/store.get get
		 * @parent can-connect/constructor/store/store.crud
		 *
		 * Extends the underlying [can-connect/connection.get] so any [can-connect/constructor/store/store.hydrateInstance instances hydrated]
		 * during this request are kept in the store until all the concurrent requests complete.
		 *
		 * @signature `connection.get( params )`
		 * Increments an internal request counter so instances hydrated during this request will be stored, and then
		 * decrements the counter after the request is complete. This prevents concurrent requests for the same data from
		 * returning different instances.
		 *
		 * @param {Object} params params used to specify which instance to retrieve.
		 * @return {Promise<can-connect/Instance>} `Promise` returned by the underlying behavior's [can-connect/connection.get]
		 */get:function(params){var self=this;requests.increment(this);var promise=baseConnection.get.call(this,params);promise.then(function(instance){self._finishedRequest();},function(){self._finishedRequest();});return promise;},/**
		 * @function can-connect/constructor/store/store.save save
		 * @parent can-connect/constructor/store/store.crud
		 *
		 * Extends the underlying [can-connect/connection.save] so any [can-connect/constructor/store/store.hydrateInstance instances hydrated]
		 * during this request are kept in the store until all the concurrent requests complete.
		 *
		 * @signature `connection.save( instance )`
		 *
		 * Increments an internal request counter so instances hydrated during this request will be stored, and then
		 * decrements the counter after the request is complete. This prevents concurrent requests for the same data from
		 * returning different instances.
		 *
		 * @param {Object} instance a typed instance being saved
		 * @return {Promise<can-connect/Instance>} `Promise` returned by the underlying behavior's [can-connect/connection.save]
		 */save:function(instance){var self=this;requests.increment(this);var updating=!this.isNew(instance);if(updating){this.addInstanceReference(instance);}var promise=baseConnection.save.call(this,instance);promise.then(function(instances){if(updating){self.deleteInstanceReference(instance);}self._finishedRequest();},function(){self._finishedRequest();});return promise;},/**
		 * @function can-connect/constructor/store/store.destroy destroy
		 * @parent can-connect/constructor/store/store.crud
		 *
		 * Extends the underlying [can-connect/connection.destroy] so any [can-connect/constructor/store/store.hydrateInstance instances hydrated]
		 * during this request are kept in the store until all the concurrent requests complete.
		 *
		 * @signature `connection.destroy( instance )`
		 * Increments an internal request counter so instances hydrated during this request will be stored, and then
		 * decrements the counter after the request is complete. This prevents concurrent requests for the same data from
		 * returning different instances.
		 *
		 * @param {Object} instance a typed instance being deleted
		 * @return {Promise<can-connect/Instance>} `Promise` returned by the underlying behavior's [can-connect/connection.destroy]
		 */destroy:function(instance){var self=this;// Add to instance store, for the duration of the
// destroy callback
this.addInstanceReference(instance);requests.increment(this);var promise=baseConnection.destroy.call(this,instance);promise.then(function(instance){self._finishedRequest();self.deleteInstanceReference(instance);},function(){self._finishedRequest();});return promise;},/**
		 * @function can-connect/constructor/store/store.updatedList updatedList
		 * @parent can-connect/constructor/store/store.callbacks
		 *
		 * Extends the underlying [can-connect/connection.updatedList] so any instances that have been added or removed
		 * from the list have their reference counts updated accordingly.
		 *
		 * @signature `connection.updatedList( list, listData, set )`
		 * Increments an internal request counter so instances on this list during this request will be stored, and decrements
		 * the same counter for all items previously on the list (found in `listData.data`).
		 *
		 * @param {can-connect.List} list a typed list of instances being updated
		 * @param {Object} listData an object representing the previous state of the list
		 * @param {Object} set the retrieval set used to get the list
		 */updatedList:function(list,listData,set){var oldList=list.slice(0);if(!listData.data&&typeof listData.length==="number"){listData={data:listData};}if(baseConnection.updatedList){baseConnection.updatedList.call(this,list,listData,set);list.forEach(function(instance){this.addInstanceReference(instance);}.bind(this));}else if(listData.data){listData.data.forEach(function(instance){this.addInstanceReference(instance);}.bind(this));}oldList.forEach(this.deleteInstanceReference.bind(this));}};return behavior;});constructorStore.requests=requests;// The number of ms to wait after all known requests have finished,
//  before starting request cleanup.
// If a new request comes in before timeout, wait until that request
//  has finished (+ delay) before starting cleanup.
// This is configurable, for use cases where more waiting is desired,
//  or for the can-connect tests which expect everything to clean up
//  in 1ms.
constructorStore.requestCleanupDelay=10;module.exports=constructorStore;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var validate$$1=validate;module.exports=validate$$1(constructorStore,['hydrateInstance','hydrateList','getList','get','save','destroy']);}//!steal-remove-end
});var callbacks=createCommonjsModule(function(module){/**
 * @module can-connect/data/callbacks/callbacks data/callbacks
 * @parent can-connect.behaviors
 *
 * Extend [can-connect/DataInterface] methods to call callbacks with the raw response data.
 *
 * @signature `dataCallbacks( baseConnection )`
 *
 * Extends the [can-connect/DataInterface] create, update, read & delete methods to call 'callback' methods following
 * their execution. Callbacks are called with the data returned from the underlying behavior's [can-connect/DataInterface]
 * implementation.
 *
 * For example:
 * ```
 * var dataUrl = require("can-connect/data/url/");
 * var dataCallbacks = require("can-connect/data/url");
 * var logging = {
 *   createdData: function(responseData) {
 *     console.log('New Todo Saved: ', responseData);
 *     return responseData;
 *   }
 * };
 * var todoConnection = connect([dataUrl, dataCallbacks, logging}],  {
 *   url: '/todos'
 * });
 *
 * // create a new todo
 * todoConnection.createData({name: "do the dishes", completed: false}).then(function(responseData) {
 *   responseData; // {id: 5}
 * });
 *
 * // after create request is completed, following is logged by the "logging" createdData callback:
 * // > New Todo Saved: {id: 5}
 * ```
 *
 * @param {{}} baseConnection `can-connect` connection object that is having the `data/callbacks` behavior added
 * on to it. Should already contain a behavior that provides the DataInterface (e.g [can-connect/data/url/url]). If
 * the `connect` helper is used to build the connection, the behaviors will automatically be ordered as required.
 *
 * @return {{}} a `can-connect` connection containing the method implementations provided by `data/callbacks`.
 */var each=canReflect_1_19_2_canReflect.each;// wires up the following methods
var pairs={/**
	 * @function can-connect/data/callbacks/callbacks.getListData getListData
	 * @parent can-connect/data/callbacks/callbacks
	 *
	 * Call `gotListData` with the data returned from underlying behavior's implementation of
	 * [can-connect/connection.gotListData].
	 *
	 * @signature `getListData(listQuery)`
	 *
	 *   Extends the underlying behavior's [can-connect/connection.getListData] to call `gotListData` with the returned
	 *   response data. The result of the call to `gotListData` will be used as the new response data.
	 *
	 *   @param {Object} listQuery an object that represents the set of data to be loaded
	 *   @return {Promise<Object>} `Promise` resolving the raw response data, possibly modified by `gotListData`.
	 */getListData:"gotListData",/**
	 * @function can-connect/data/callbacks/callbacks.createData createData
	 * @parent can-connect/data/callbacks/callbacks
	 *
	 * Call `createdData` with the data returned from underlying behavior's implementation of
	 * [can-connect/connection.createData].
	 *
	 * @signature `createData(instanceData, cid)`
	 *
	 *   Extends the underlying behavior's [can-connect/connection.createData] to call `createdData` with the returned
	 *   response data. The result of the call to `createdData` will be used as the new response data.
	 *
	 *   @param {Object} instanceData the raw data of an instance
	 *   @param {Number} cid unique id that represents the instance that is being created
	 *   @return {Promise<Object>} `Promise` resolving the raw response data, possibly modified by `createdData`.
	 */createData:"createdData",/**
	 * @function can-connect/data/callbacks/callbacks.updateData updatedData
	 * @parent can-connect/data/callbacks/callbacks
	 *
	 * Call `updatedData` with the data returned from underlying behavior's implementation of
	 * [can-connect/connection.updateData].
	 *
	 * @signature `updateData(instanceData)`
	 *
	 *   Extends the underlying behavior's [can-connect/connection.updateData] to call `updatedData` with the returned
	 *   response data. The result of the call to `updatedData` will be used as the new response data.
	 *
	 *   @param {Object} instanceData the raw data of an instance
	 *   @return {Promise<Object>} `Promise` resolving the raw response data, possibly modified by `updatedData`.
	 */updateData:"updatedData",/**
	 * @function can-connect/data/callbacks/callbacks.destroyData destroyData
	 * @parent can-connect/data/callbacks/callbacks
	 *
	 * Call `destroyedData` with the data returned from underlying behavior's implementation of
	 * [can-connect/connection.destroyData].
	 *
	 * @signature `destroyData(params, cid)`
	 *
	 *   Extends the underlying behavior's [can-connect/connection.destroyData] to call `destroyedData` with the returned
	 *   response data. The result of the call to `destroyedData` will be used as the new response data.
	 *
	 *   @param {Object} instanceData the raw data of an instance
	 *   @return {Promise<Object>} `Promise` resolving the raw response data, possibly modified by `destroyedData`.
	 */destroyData:"destroyedData"};var dataCallbackBehavior=canConnect_4_0_6_canConnect.behavior("data/callbacks",function(baseConnection){var behavior={};// overwrites createData to createdData
each(pairs,function(callbackName,name){behavior[name]=function(params,cid){var self=this;return baseConnection[name].call(this,params).then(function(data){if(self[callbackName]){return self[callbackName].call(self,data,params,cid);}else {return data;}});};});return behavior;});module.exports=dataCallbackBehavior;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var validate$$1=validate;module.exports=validate$$1(dataCallbackBehavior,["getListData","createData","updateData","destroyData"]);}//!steal-remove-end
});/**
 * @module {connect.Behavior} can-connect/data/parse/parse
 * @parent can-connect.behaviors
 *
 * Extract response data into a format needed for other extensions.
 *
 * @signature `dataParse( baseConnection )`
 *
 *   Overwrites the [can-connect/DataInterface] methods to run their results through
 *   either [can-connect/data/parse/parse.parseInstanceData] or [can-connect/data/parse/parse.parseListData].
 *
 *   @param {{}} baseConnection The base connection.
 *
 * @body
 *
 * ## Use
 *
 * `data/parse` is used to modify the response data of "data interface" methods to comply with what
 * is expected by "instance interface" methods.  For example, if a service was returning list data
 * at the `/services/todos` url like:
 *
 * ```
 * {
 *   todos: [
 *     {todo: {id: 0, name: "dishes"}},
 *     {todo: {id: 2, name: "lawn"}}
 *   ]
 * }
 * ```
 *
 * That service does not return [can-connect.listData] in the right format which should look like:
 *
 * ```
 * {
 *   data: [
 *     {id: 0, name: "dishes"},
 *     {id: 2, name: "lawn"}
 *   ]
 * }
 * ```
 *
 * To correct this, you can configure `data-parse` to use the [can-connect/data/parse/parse.parseListProp] and [can-connect/data/parse/parse.parseInstanceProp]
 * as follows:
 *
 * ```
 * connect([
 *   require("can-connect/data/parse/parse"),
 *   require("can-connect/data/url/url")
 * ],{
 *  parseListProp: "todos",
 *  parseInstanceProp: "todo"
 * })
 * ```
 *
 */var each$1=canReflect_1_19_2_canReflect.each;var parse$1$1=canConnect_4_0_6_behavior("data/parse",function(baseConnection){var behavior={/**
     * @function can-connect/data/parse/parse.parseListData parseListData
     * @parent can-connect/data/parse/parse
     *
     * @description Given a response from [can-connect/connection.getListData] returns its data in the
     * proper [can-connect.listData] format.
     *
     * @signature `connection.parseListData(responseData)`
     *
     *   This function uses [can-connect/data/parse/parse.parseListProp] to find the array
     *   containing the data for each instance.  Then it uses [can-connect/data/parse/parse.parseInstanceData]
     *   on each item in the array  Finally, it returns data in the
     *   [can-connect.listData] format.
     *
     *   @param {Object} responseData The response data from the AJAX request.
     *
     *   @return {can-connect.listData} An object like `{data: [props, props, ...]}`.
     *
     * @body
     *
     * ## Use
     *
     * `parseListData` comes in handy when dealing with an irregular API
     * that can be improved with data transformation.
     *
     * Suppose an endpoint responds with a status of 200 OK, even when the
     * request generates an empty result set. Worse yet, instead of representing
     * an emtpy set with an empty list, it removes the property.
     *
     * A request to `/services/todos` may return:
     *
     * ```js
     * {
     *   todos: [
     *     {todo: {id: 0, name: "dishes"}},
     *     {todo: {id: 2, name: "lawn"}}
     *   ]
     * }
     * ```
     *
     * What if a request for `/services/todos?filterName=bank` responds with
     * 200 OK:
     *
     * ```
     * {
     * }
     * ```
     *
     * This response breaks its own schema. One way to bring it in line
     * with a format compatible with [can-connect.listData] is:
     *
     * ```js
     * connect([
     *   require("can-connect/data/parse/parse"),
     *   require("can-connect/data/url/url")
     * ],{
     *   parseListProp: "todos",
     *   parseListData(responseData) {
     *     if (responseData && !responseData.todos) {
     *       responseData = { todos: [] };
     *     }
     *
     *     return responseData;
     *   }
     * })
     * ```
     */parseListData:function(responseData){// call any base parseListData
if(baseConnection.parseListData){responseData=baseConnection.parseListData.apply(this,arguments);}var result;if(Array.isArray(responseData)){result={data:responseData};}else {var prop=this.parseListProp||'data';responseData.data=get_1(responseData,prop);result=responseData;if(prop!=="data"){delete responseData[prop];}if(!Array.isArray(result.data)){throw new Error('Could not get any raw data while converting using .parseListData');}}var arr=[];for(var i=0;i<result.data.length;i++){arr.push(this.parseInstanceData(result.data[i]));}result.data=arr;return result;},/**
     * @function can-connect/data/parse/parse.parseInstanceData parseInstanceData
     * @parent can-connect/data/parse/parse
     *
     * @description Returns the properties that should be used to [can-connect/constructor/constructor.hydrateInstance make an instance]
     * given the results of [can-connect/connection.getData], [can-connect/connection.createData], [can-connect/connection.updateData],
     * and [can-connect/connection.destroyData].
     *
     * @signature `connection.parseInstanceData(responseData)`
     *
     *   This function will use [can-connect/data/parse/parse.parseInstanceProp] to find the data object
     *   representing the instance that will be created.
     *
     *   @param {Object} responseData The response data from [can-connect/connection.getData], [can-connect/connection.createData], or [can-connect/connection.updateData].
     *
     *   @return {Object} The data that should be passed to [can-connect/constructor/constructor.hydrateInstance].
     *
     * @body
     *
     * ## Use
     *
     * `parseInstanceData` comes in handy when dealing with an irregular API
     * that can be improved with data transformation.
     *
     * Suppose a request to `/services/todos` returns:
     * ```
     * {
     *   baseUrl: "/proxy/share",
     *   todo: {
     *     id: 0,
     *     name: "dishes",
     *     friendFaceUrl: "friendface?id=0",
     *     fiddlerUrl: "fiddler?id=0"
     *   }
     * }
     * ```
     *
     * The baseUrl property is meta-data that needs to be incorporated into the
     * instance data. One way to deal with this is:
     *
     * ```
     * connect([
     *   require("can-connect/data/parse/parse"),
     *   require("can-connect/data/url/url")
     * ],{
     *   parseInstanceProp: "todo",
     *   parseInstanceData(responseData) {
     *     ['friendFaceUrl', 'fiddlerUrl'].map(urlProp => {
     *       responseData.todo[urlProp] = [
     *         responseData.baseUrl,
     *         responseData.todo[urlProp]
     *       ].join('/');
     *     });
     *
     *     return responseData;
     *   }
     * })
     * ```
     *
     * This results in an object like:
     *
     * ```js
     * {
     *   id: 0,
     *   name: "dishes",
     *   friendFaceUrl: "/proxy/share/friendface?id=0",
     *   fiddlerUrl: "/proxy/share/fiddler?id=0"
     * }
     * ```
     */parseInstanceData:function(props){// call any base parseInstanceData
if(baseConnection.parseInstanceData){// It's possible this might be looking for a property that only exists in some
// responses. So if it doesn't return anything, go back to using props.
props=baseConnection.parseInstanceData.apply(this,arguments)||props;}return this.parseInstanceProp?get_1(props,this.parseInstanceProp)||props:props;}/**
		 * @property {String} can-connect/data/parse/parse.parseListProp parseListProp
		 * @parent can-connect/data/parse/parse
		 *
		 * The property to find the array-like data that represents each instance item.
		 *
		 * @option {String} [can-connect/data/parse/parse.parseListData] uses this property to find an array-like data struture
		 * on the result of [can-connect/connection.getListData].
		 *
		 * @body
		 *
		 * ## Use
		 *
		 * Set `parseListProp` if your response data does not look like: `{data: [props, props]}`.
		 *
		 * For example, if [can-connect/connection.getListData] returns data like:
		 *
		 * ```
		 * {
		 * 	  todos: [{id: 1, name: "dishes"}, {id: 2, name: "lawn"}]
		 * }
		 * ```
		 *
		 * Set `parseListProp` to `"todos"` like:
		 *
		 * ```
		 * connect([
         *   require("can-connect/data/parse/parse"),
         *   require("can-connect/data/url/url")
         * ],{
		 *   url : "/todos",
		 *   parseListProp: "todos"
		 * });
		 * ```
		 *
		 *//**
		 * @property {String} can-connect/data/parse/parse.parseInstanceProp parseInstanceProp
		 * @parent can-connect/data/parse/parse
		 *
		 * The property to find the data that represents an instance item.
		 *
		 * @option {String} [can-connect/data/parse/parse.parseInstanceData] uses this property's value to
		 * [can-connect/constructor/constructor.hydrateInstance make an instance].
		 *
		 * @body
		 *
		 * ## Use
		 *
		 * Set `parseInstanceData` if your response data does not directly contain the data you would like to pass to
		 * [connection.hydrateInstance].
		 *
		 * For example, if [can-connect/connection.getData] returns data like:
		 *
		 * ```
		 * {
		 *   todo: {
		 * 	   id: 1,
		 *     name: "dishes"
		 *   }
		 * }
		 * ```
		 *
		 * Set `parseInstanceProp` to `"todo"` like:
		 *
		 * ```
		 * connect([
         *   require("can-connect/data/parse/parse"),
         *   require("can-connect/data/url/url")
         * ],{
		 *   url : "/todos",
		 *   parseInstanceProp: "todo"
		 * });
		 * ```
		 */};each$1(pairs,function(parseFunction,name){behavior[name]=function(params){var self=this;return baseConnection[name].call(this,params).then(function(){return self[parseFunction].apply(self,arguments);});};});return behavior;});var pairs={getListData:"parseListData",getData:"parseInstanceData",createData:"parseInstanceData",updateData:"parseInstanceData",destroyData:"parseInstanceData"};/**
 * @module {function} can-ajax can-ajax
 * @parent can-dom-utilities
 * @collection can-infrastructure
 * @package ./package.json
 *
 * Make an asynchronous HTTP (AJAX) request.
 *
 * @signature `ajax( ajaxOptions )`
 *
 *    Is used to make an asynchronous HTTP (AJAX) request similar to [jQuery.ajax()](http://api.jquery.com/jQuery.ajax/).
 *
 *    ```js
 *    import { ajax } from "can";
 *
 *    ajax({
 *      url: "http://query.yahooapis.com/v1/public/yql",
 *      data: {
 *        format: "json",
 *        q: 'select * from geo.places where text="sunnyvale, ca"'
 *      }
 *    }).then(function(response){
 *      console.log( response.query.count ); // => 2
 *    });
 *    ```
 *
 *    @param {Object} ajaxOptions Configuration options for the AJAX request.
 *      - __url__ `{String}` The requested url.
 *      - __type__ `{String}` The method of the request. Ex: `GET`, `PUT`, `POST`, etc. Capitalization is ignored. _Default is `GET`_.
 *      - __data__ `{Object}` The data of the request. If data needs to be urlencoded (e.g. for GET requests or for CORS) it is serialized with [can-param].
 *      - __dataType__ `{String}` Type of data. _Default is `json`_.
 *      - __crossDomain__ `{Boolean}` If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. Default: `false` for same-domain requests, `true` for cross-domain requests.
 *      - __xhrFields__ `{Object}` Any fields to be set directly on the xhr request, [https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest] such as the withCredentials attribute that indicates whether or not cross-site Access-Control requests should be made using credentials such as cookies or authorization headers.
 *      - __beforeSend__ `{callback}` A pre-request callback function that can be used to modify the XHR object before it is sent. Use this to set custom headers, etc. The XHR and settings objects are passed as arguments.
 *      - __success__ `{callback}` A callback passed the response body when the request completes without error.  Using the promise returned from ajax() should be preferred to passing a success callback
 *      - __error__ `{callback}` A callback passed the XHR object when the request fails to complete correctly.  Using the promise returned from ajax() should be preferred to passing an error callback
 *      - __async__ `{Boolean}` Set `async` to `false` to create a synchronous XHR that blocks the thread until the request completes. success() or error() is called synchronously on completion, but promise callbacks are still resolved asychronously.  Synchronous AJAX calls are **not recommended** and are only supported here for legacy reasons.
 * 
 *    @return {Promise} A Promise that resolves to the data. The Promise instance is abortable and exposes an `abort` method. Invoking abort on the Promise instance indirectly rejects it.
 *
 *
 * @signature `ajaxSetup( ajaxOptions )`
 *
 *    Is used to persist ajaxOptions across all ajax requests and they can be over-written in the ajaxOptions of the actual request.
 *    [https://api.jquery.com/jquery.ajaxsetup/]
 *
 *    ```js
 *    import { ajax } from "can";
 *
 *    ajax.ajaxSetup({xhrFields: {withCredentials: true}});
 *
 *    ajax({
 *      url: "http://query.yahooapis.com/v1/public/yql",
 *      data: {
 *        format: "json",
 *        q: 'select * from geo.places where text="sunnyvale, ca"'
 *      }
 *    }).then(function(response){
 *      console.log( response.query.count ); // => 2
 *    });
 *    ```
 */// from https://gist.github.com/mythz/1334560
var xhrs=[function(){return new XMLHttpRequest();},function(){return new ActiveXObject("Microsoft.XMLHTTP");},function(){return new ActiveXObject("MSXML2.XMLHTTP.3.0");},function(){return new ActiveXObject("MSXML2.XMLHTTP");}],_xhrf=null;// used to check for Cross Domain requests
var originUrl=canParseUri_1_2_2_canParseUri(global_1().location.href);var globalSettings={};var makeXhr=function(){if(_xhrf!=null){return _xhrf();}for(var i=0,l=xhrs.length;i<l;i++){try{var f=xhrs[i],req=f();if(req!=null){_xhrf=f;return req;}}catch(e){continue;}}return function(){};};var contentTypes={json:"application/json",form:"application/x-www-form-urlencoded"};var _xhrResp=function(xhr,options){try{var type=options.dataType||xhr.getResponseHeader("Content-Type").split(";")[0];if(type&&(xhr.responseText||xhr.responseXML)){switch(type){case"text/xml":case"xml":return xhr.responseXML;case"text/json":case"application/json":case"text/javascript":case"application/javascript":case"application/x-javascript":case"json":return xhr.responseText&&JSON.parse(xhr.responseText);default:return xhr.responseText;}}else {return xhr;}}catch(e){return xhr;}};function ajax(o){var xhr=makeXhr(),timer,n=0;var deferred={},isFormData;var promise=new Promise(function(resolve,reject){deferred.resolve=resolve;deferred.reject=reject;});var requestUrl;var isAborted=false;promise.abort=function(){isAborted=true;xhr.abort();};o=[{userAgent:"XMLHttpRequest",lang:"en",type:"GET",data:null,dataType:"json"},globalSettings,o].reduce(function(a,b,i){return canReflect_1_19_2_canReflect.assignDeep(a,b);});var async=o.async!==false;// Set the default contentType
if(!o.contentType){o.contentType=o.type.toUpperCase()==="GET"?contentTypes.form:contentTypes.json;}//how jquery handles check for cross domain
if(o.crossDomain==null){try{requestUrl=canParseUri_1_2_2_canParseUri(o.url);o.crossDomain=!!(requestUrl.protocol&&requestUrl.protocol!==originUrl.protocol||requestUrl.host&&requestUrl.host!==originUrl.host);}catch(e){o.crossDomain=true;}}if(o.timeout){timer=setTimeout(function(){xhr.abort();if(o.timeoutFn){o.timeoutFn(o.url);}},o.timeout);}xhr.onreadystatechange=function(){try{if(xhr.readyState===4){if(timer){clearTimeout(timer);}if(xhr.status<300){if(o.success){o.success(_xhrResp(xhr,o));}}else if(o.error){o.error(xhr,xhr.status,xhr.statusText);}if(o.complete){o.complete(xhr,xhr.statusText);}if(xhr.status>=200&&xhr.status<300){deferred.resolve(_xhrResp(xhr,o));}else {deferred.reject(_xhrResp(xhr,o));}}else if(o.progress){o.progress(++n);}}catch(e){deferred.reject(e);}};var url=o.url,data=null,type=o.type.toUpperCase();var isJsonContentType=o.contentType===contentTypes.json;var isPost=type==="POST"||type==="PUT"||type==="PATCH";if(!isPost&&o.data){url+="?"+(isJsonContentType?JSON.stringify(o.data):canParam_1_2_0_canParam(o.data));}xhr.open(type,url,async);// For CORS to send a "simple" request (to avoid a preflight check), the following methods are allowed: GET/POST/HEAD,
// see https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Simple_requests
var isSimpleCors=o.crossDomain&&['GET','POST','HEAD'].indexOf(type)!==-1;isFormData=typeof FormData!=="undefined"&&o.data instanceof FormData;if(isPost){if(isFormData){// do not set "Content-Type" let the browser handle it
// do not stringify FormData XHR handles it natively
data=o.data;}else {if(isJsonContentType&&!isSimpleCors){data=typeof o.data==="object"?JSON.stringify(o.data):o.data;xhr.setRequestHeader("Content-Type","application/json");}else {data=canParam_1_2_0_canParam(o.data);// CORS simple: `Content-Type` has to be `application/x-www-form-urlencoded`:
xhr.setRequestHeader("Content-Type","application/x-www-form-urlencoded");}}}else {xhr.setRequestHeader("Content-Type",o.contentType);}// CORS simple: no custom headers, so we don't add `X-Requested-With` header:
if(!isSimpleCors){xhr.setRequestHeader("X-Requested-With","XMLHttpRequest");}if(o.xhrFields){for(var f in o.xhrFields){xhr[f]=o.xhrFields[f];}}function send(){if(!isAborted){xhr.send(data);}}if(o.beforeSend){var result=o.beforeSend.call(o,xhr,o);if(canReflect_1_19_2_canReflect.isPromise(result)){result.then(send).catch(deferred.reject);return promise;}}send();return promise;}var canAjax_2_4_8_canAjax=canNamespace_1_0_0_canNamespace.ajax=ajax;var ajaxSetup=function(o){globalSettings=o||{};};canAjax_2_4_8_canAjax.ajaxSetup=ajaxSetup;var methodMapping={item:{'GET':'getData','PUT':'updateData','DELETE':'destroyData'},list:{'GET':'getListData','POST':'createData'}};function inferIdProp(url){var wrappedInBraces=/\{(.*)\}/;var matches=url.match(wrappedInBraces);var isUniqueMatch=matches&&matches.length===2;if(isUniqueMatch){return matches[1];}}function getItemAndListUrls(url,idProp){idProp=idProp||inferIdProp(url)||"id";var itemRegex=new RegExp('\\/\\{'+idProp+"\\}.*");var rootIsItemUrl=itemRegex.test(url);var listUrl=rootIsItemUrl?url.replace(itemRegex,""):url;var itemUrl=rootIsItemUrl?url:url.trim()+"/{"+idProp+"}";return {item:itemUrl,list:listUrl};}var canMakeRest_0_1_4_canMakeRest=function(url,idProp){var data={};canReflect_1_19_2_canReflect.eachKey(getItemAndListUrls(url,idProp),function(url,type){canReflect_1_19_2_canReflect.eachKey(methodMapping[type],function(interfaceMethod,method){data[interfaceMethod]={method:method,url:url};});});return data;};var makePromise=function(obj){if(obj&&typeof obj.then==="function"&&!canReflect_1_19_2_canReflect.isPromise(obj)){return new Promise(function(resolve,reject){obj.then(resolve,reject);});}else {return obj;}};var url=createCommonjsModule(function(module){/**
 * @module {connect.Behavior} can-connect/data/url/url data/url
 * @parent can-connect.behaviors
 * @group can-connect/data/url/url.data-methods data methods
 * @group can-connect/data/url/url.option options
 *
 * @option {connect.Behavior}
 *
 * Uses the [can-connect/data/url/url.url] option to implement the behavior of
 * [can-connect/connection.getListData],
 * [can-connect/connection.getData],
 * [can-connect/connection.createData],
 * [can-connect/connection.updateData], and
 * [can-connect/connection.destroyData] to make an AJAX request
 * to urls.
 *
 * @body
 *
 * ## Use
 *
 * The `data/url` behavior implements many of the [can-connect/DataInterface]
 * methods to send instance data to a URL.
 *
 * For example, the following `todoConnection`:
 *
 * ```js
 * var todoConnection = connect([
 *   require("can-connect/data/url/url")
 * ],{
 *   url: {
 *     getListData: "GET /todos",
 *     getData: "GET /todos/{id}",
 *     createData: "POST /todos",
 *     updateData: "PUT /todos/{id}",
 *     destroyData: "DELETE /todos/{id}"
 *   }
 * });
 * ```
 *
 * Will make the following request when the following
 * methods are called:
 *
 * ```
 * // GET /todos?due=today
 * todoConnection.getListData({due: "today"});
 *
 * // GET /todos/5
 * todosConnection.getData({id: 5})
 *
 * // POST /todos \
 * // name=take out trash
 * todosConnection.createData({
 *   name: "take out trash"
 * });
 *
 * // PUT /todos/5 \
 * // name=do the dishes
 * todosConnection.updateData({
 *   name: "do the dishes",
 *   id: 5
 * });
 *
 * // DELETE /todos/5
 * todosConnection.destroyData({
 *   id: 5
 * });
 * ```
 *
 * There's a few things to notice:
 *
 * 1. URL values can include simple templates like `{id}`
 *    that replace that part of the URL with values in the data
 *    passed to the method.
 * 2. GET and DELETE request data is put in the URL using [can-param].
 * 3. POST and PUT requests put data that is not templated in the URL in POST or PUT body
 *    as JSON-encoded data.  To use form-encoded requests instead, add the property
 *    `contentType:'application/x-www-form-urlencoded'` to your [can-connect/data/url/url.url].
 * 4. If a provided URL doesn't include the method, the following default methods are provided:
 *    - `getListData` - `GET`
 *    - `getData` - `GET`
 *    - `createData` - `POST`
 *    - `updateData` - `PUT`
 *    - `destroyData` - `DELETE`
 *
 * If [can-connect/data/url/url.url] is provided as a string like:
 *
 * ```js
 * var todoConnection = connect([
 *   require("can-connect/data/url/url")
 * ],{
 *   url: "/todos"
 * });
 * ```
 *
 * This does the same thing as the first `todoConnection` example.
 */var defaultRest=canMakeRest_0_1_4_canMakeRest("/resource/{id}");// # can-connect/data/url/url
// For each pair, create a function that checks the url object
// and creates an ajax request.
var urlBehavior=canConnect_4_0_6_behavior("data/url",function(baseConnection){var behavior={};canReflect_1_19_2_canReflect.eachKey(defaultRest,function(defaultData,dataInterfaceName){behavior[dataInterfaceName]=function(params){var meta=methodMetaData[dataInterfaceName];var defaultBeforeSend;if(typeof this.url==="object"){defaultBeforeSend=this.url.beforeSend;if(typeof this.url[dataInterfaceName]==="function"){return makePromise(this.url[dataInterfaceName](params));}else if(this.url[dataInterfaceName]){var promise=makeAjax(this.url[dataInterfaceName],params,defaultData.method,this.ajax||canAjax_2_4_8_canAjax,findContentType(this.url,defaultData.method),meta,defaultBeforeSend);return makePromise(promise);}}var resource=typeof this.url==="string"?this.url:this.url.resource;if(resource){var idProps=canReflect_1_19_2_canReflect.getSchema(this.queryLogic).identity;var resourceWithoutTrailingSlashes=resource.replace(/\/+$/,"");var result=canMakeRest_0_1_4_canMakeRest(resourceWithoutTrailingSlashes,idProps[0])[dataInterfaceName];return makePromise(makeAjax(result.url,params,result.method,this.ajax||canAjax_2_4_8_canAjax,findContentType(this.url,result.method),meta,defaultBeforeSend));}return baseConnection[name].call(this,params);};});return behavior;});/**
 * @property {String|Object} can-connect/data/url/url.url url
 * @parent can-connect/data/url/url.option
 *
 * Specify the url and methods that should be used for the "Data Methods".
 *
 * @option {String} If a string is provided, it's assumed to be a RESTful interface. For example,
 * if the following is provided:
 *
 * ```
 * url: "/services/todos"
 * ```
 *
 * ... the following methods and requests are used:
 *
 *  - `getListData` - `GET /services/todos`
 *  - `getData` - `GET /services/todos/{id}`
 *  - `createData` - `POST /services/todos`
 *  - `updateData` - `PUT /services/todos/{id}`
 *  - `destroyData` - `DELETE /services/todos/{id}`
 *
 * @option {Object} If an object is provided, it can customize each method and URL directly
 * like:
 *
 * ```js
 * url: {
 *   getListData: "GET /services/todos",
 *   getData: "GET /services/todo/{id}",
 *   createData: "POST /services/todo",
 *   updateData: "PUT /services/todo/{id}",
 *   destroyData: "DELETE /services/todo/{id}"
 * }
 * ```
 *
 * You can provide a `resource` property that works like providing `url` as a string, but overwrite
 * other values like:
 *
 * ```js
 * url: {
 *   resource: "/services/todo",
 *   getListData: "GET /services/todos"
 * }
 * ```
 *
 * You can also customize per-method the parameters passed to the [can-connect/data/url/url.ajax ajax implementation], like:
 * ```js
 * url: {
 *   resource: "/services/todos",
 *   getListData: {
 *     url: "/services/todos",
 *     type: "GET",
 *     beforeSend: () => {
 *       return fetch('/services/context').then(processContext);
 *     }
 *   }
 * }
 * ```
 * This can be particularly useful for passing a handler for the [can-ajax <code>beforeSend</code>] hook.
 *
 * The [can-ajax <code>beforeSend</code>] hook can also be passed for all request methods. This can be useful when
 * attaching a session token header to a request:
 * 
 * ```js
 * url: {
 *   resource: "/services/todos",
 *   beforeSend: (xhr) => {
 *     xhr.setRequestHeader('Authorization', `Bearer: ${Session.current.token}`);
 *   }
 * }
 * ```
 *
 * Finally, you can provide your own method to totally control how the request is made:
 *
 * ```js
 * url: {
 *   resource: "/services/todo",
 *   getListData: "GET /services/todos",
 *   getData: function(param){
 *     return new Promise(function(resolve, reject){
 *       $.get("/services/todo", {identifier: param.id}).then(resolve, reject);
 *     });
 *   }
 * }
 * ```
 *//**
  * @property {function} can-connect/data/url/url.ajax ajax
  * @parent can-connect/data/url/url.option
  *
  * Specify the ajax functionality that should be used to make the request.
  *
  * @option {function} Provides an alternate function to be used to make
  * ajax requests.  By default [can-ajax] provides the ajax
  * functionality. jQuery's ajax method can be substituted as follows:
  *
  * ```js
  * connect([
  *   require("can-connect/data/url/url")
  * ],{
  *   url: "/things",
  *   ajax: $.ajax
  * });
  * ```
  *
  *   @param {Object} settings Configuration options for the AJAX request.
  *   @return {Promise} A Promise that resolves to the data.
  */// ## methodMetaData
// Metadata on different methods that is passed to makeAjax
var methodMetaData={/**
	 * @function can-connect/data/url/url.getListData getListData
	 * @parent can-connect/data/url/url.data-methods
	 *
	 * @signature `getListData(set)`
	 *
	 *   Retrieves list data for a particular set given the [can-connect/data/url/url.url] settings.
	 *   If `url.getListData` is a function, that function will be called.  If `url.getListData` is a
	 *   string, a request to that string will be made. If `url` is a string, a `GET` request is made to
	 *   `url`.
	 *
	 *   @param {can-query-logic/query} query A object that represents the set of data needed to be loaded.
	 *   @return {Promise<can-connect.listData>} A promise that resolves to the ListData format.
	 */getListData:{},/**
	 * @function can-connect/data/url/url.getData getData
	 * @parent can-connect/data/url/url.data-methods
	 *
	 * @signature `getData(params)`
	 *
	 *   Retrieves raw instance data given the [can-connect/data/url/url.url] settings.
	 *   If `url.getData` is a function, that function will be called.  If `url.getData` is a
	 *   string, a request to that string will be made. If `url` is a string, a `GET` request is made to
	 *   `url+"/"+IDPROP`.
	 *
	 *   @param {Object} params A object that represents the set of data needed to be loaded.
	 *   @return {Promise<Object>} A promise that resolves to the instance data.
	 */getData:{},/**
	 * @function can-connect/data/url/url.createData createData
	 * @parent can-connect/data/url/url.data-methods
	 *
	 * @signature `createData(instanceData, cid)`
	 *
	 *   Creates instance data given the serialized form of the data and
	 *   the [can-connect/data/url/url.url] settings.
	 *   If `url.createData` is a function, that function will be called.  If `url.createData` is a
	 *   string, a request to that string will be made. If `url` is a string, a `POST` request is made to
	 *   `url`.
	 *
	 *   @param {Object} instanceData The serialized data of the instance.
	 *   @param {Number} cid A unique id that represents the instance that is being created.
	 *   @return {Promise<Object>} A promise that resolves to the newly created instance data.
	 */createData:{},/**
	 * @function can-connect/data/url/url.updateData updateData
	 * @parent can-connect/data/url/url.data-methods
	 *
	 * @signature `updateData(instanceData)`
	 *
	 * Updates instance data given the serialized form of the data and
	 *   the [can-connect/data/url/url.url] settings.
	 *   If `url.updateData` is a function, that function will be called.  If `url.updateData` is a
	 *   string, a request to that string will be made. If `url` is a string, a `PUT` request is made to
	 *   `url+"/"+IDPROP`.
	 *
	 *   @param {Object} instanceData The serialized data of the instance.
	 *   @return {Promise<Object>} A promise that resolves to the updated instance data.
	 */updateData:{},/**
	 * @function can-connect/data/url/url.destroyData destroyData
	 * @parent can-connect/data/url/url.data-methods
	 *
	 * @signature `destroyData(instanceData)`
	 *
	 * Deletes instance data given the serialized form of the data and
	 *   the [can-connect/data/url/url.url] settings.
	 *   If `url.destroyData` is a function, that function will be called.  If `url.destroyData` is a
	 *   string, a request to that string will be made. If `url` is a string, a `DELETE` request is made to
	 *   `url+"/"+IDPROP`.
	 *
	 *   @param {Object} instanceData The serialized data of the instance.
	 *   @return {Promise<Object>} A promise that resolves to the deleted instance data.
	 */destroyData:{includeData:false}};var findContentType=function(url,method){if(typeof url==='object'&&url.contentType){var acceptableType=url.contentType==='application/x-www-form-urlencoded'||url.contentType==='application/json';if(acceptableType){return url.contentType;}else {//!steal-remove-start
if(process.env.NODE_ENV!=='production'){dev.warn("Unacceptable contentType on can-connect request. "+"Use 'application/json' or 'application/x-www-form-urlencoded'");}//!steal-remove-end
}}return method==="GET"?"application/x-www-form-urlencoded":"application/json";};function urlParamEncoder(key,value){return encodeURIComponent(value);}var makeAjax=function(ajaxOb,data,type,ajax,contentType,reqOptions,defaultBeforeSend){var params={};// A string here would be something like `"GET /endpoint"`.
if(typeof ajaxOb==='string'){// Split on spaces to separate the HTTP method and the URL.
var parts=ajaxOb.split(/\s+/);params.url=parts.pop();if(parts.length){params.type=parts.pop();}}else {// If the first argument is an object, just load it into `params`.
canReflect_1_19_2_canReflect.assignMap(params,ajaxOb);}// If the `data` argument is a plain object, copy it into `params`.
params.data=typeof data==="object"&&!Array.isArray(data)?canReflect_1_19_2_canReflect.assignMap(params.data||{},data):data;// Substitute in data for any templated parts of the URL.
params.url=replaceWith(params.url,params.data,urlParamEncoder,true);params.contentType=contentType;if(reqOptions.includeData===false){delete params.data;}return ajax(canReflect_1_19_2_canReflect.assignMap({type:type||'post',dataType:'json',beforeSend:defaultBeforeSend},params));};module.exports=urlBehavior;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var validate$$1=validate;module.exports=validate$$1(urlBehavior,['url']);}//!steal-remove-end
});var indexByIdentity=function(items,item,schema){var length=canReflect_1_19_2_canReflect.size(items);if(!schema&&length>0){schema=canReflect_1_19_2_canReflect.getSchema(items[0]);}if(!schema){schema=canReflect_1_19_2_canReflect.getSchema(item);}if(!schema){throw new Error("No schema to use to get identity.");}var id=canReflect_1_19_2_canReflect.getIdentity(item,schema);for(var i=0;i<length;i++){var connId=canReflect_1_19_2_canReflect.getIdentity(items[i],schema);// this was ==
if(id===connId){return i;}}return -1;};/**
 * @module can-connect/real-time/real-time real-time
 * @parent can-connect.behaviors
 * @group can-connect/real-time/real-time.methods 0 methods
 * @group can-connect/real-time/real-time.callbacks 1 data callbacks
 *
 * Update lists to include or exclude instances based
 * on set logic.
 *
 * @signature `realTime( baseConnection )`
 *
 *   Overwrites the "data callback" methods and provides
 *   [can-connect/real-time/real-time.createInstance],
 *   [can-connect/real-time/real-time.updateInstance], and
 *   [can-connect/real-time/real-time.destroyInstance] methods
 *   that
 *   update lists to include or exclude a created,
 *   updated, or destroyed instance.
 *
 *   An instance is put in a list if it is a
 *   [can-query-logic/queryLogic.prototype.isSubset]
 *   of the [can-connect/base/base.listQuery].  The item is inserted using [can-query-logic.prototype.index].
 *
 * @body
 *
 * ## Use
 *
 * To use `real-time`, create a connection with its dependent
 * behaviors like:
 *
 * ```js
 * var todoConnection = connect(
 *    ["data/callbacks",
 *     "real-time",
 *     "constructor/callbacks-once",
 *     "constructor/store",
 *     "constructor",
 *     "data/url"],{
 *   url: "/todos"
 * });
 * ```
 *
 * Next, use the connection to load lists and save those lists in the
 * store:
 *
 * ```js
 * todoConnection.getList({complete: false}).then(function(todos){
 *   todoConnection.addListReference(todos);
 * })
 * ```
 *
 * Finally, use one of the  [can-connect/real-time/real-time.createInstance],
 * [can-connect/real-time/real-time.updateInstance], and
 * [can-connect/real-time/real-time.destroyInstance] methods to tell the connection
 * that data has changed.  The connection will update (by calling splice)
 * each list accordingly.
 *
 *
 * ## Example
 *
 * The following demo shows two lists that use this connection.  The
 * "Run Code" button sends the connection data changes which the
 * connection will then update lists accordingly:
 *
 *
 * @demo demos/can-connect/real-time.html
 *
 * This example creates a `todoList` function and `todoItem` function
 * that manage the behavior of a list of todos and a single todo respectfully.
 * It uses [Object.observe](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe)
 * to observe changes in the todo list and individual todo data. Other
 * frameworks will typically provide their own observable system.
 *
 * ### todoList
 *
 * When `todoList` is created, it is passed the `set` of data to load.  It uses
 * this to get todos from the `todoConnection` like:
 *
 *
 * ```js
 * todosConnection.getList(set).then(function(retrievedTodos){
 * ```
 *
 * It then adds those `todos` to the [can-connect/constructor/store/store.listStore] so
 * they can be updated automatically.  And, it listens to changes in `todos` and calls an `update` function:
 *
 * ```js
 * todosConnection.addListReference(todos);
 * Object.observe(todos, update, ["add", "update", "delete"] );
 * ```
 *
 * The update function is able to inserted new `todoItem`s in the page when items are added
 * to or removed from `todos`.  We exploit that by calling `update` as if it just added
 * each todo in the list:
 *
 * ```js
 * update(todos.map(function(todo, i){
 *   return {
 *     type: "add",
 *     name: ""+i
 *   };
 * }));
 * ```
 *
 * ### todoItem
 *
 * The `todoItem` creates an element that updates with changes
 * in its `todo`.  It listens to changes in the `todo` and saves
 * the todo in the [can-connect/constructor/store/store.instanceStore] with the
 * following:
 *
 * ```js
 * Object.observe(todo, update, ["add", "update", "delete"] );
 * todosConnection.addInstanceReference(todo);
 * ```
 *
 * A `todoItem` needs to be able to stop listening on the `todo` and remove itself from the
 * `instanceStore` if the `todo` is removed from the page.  To provide this teardown
 * functionality, `todoItem` listens to a `"removed"` event on its element and
 * `unobserves` the todo and removes it from the `instanceStore`:
 *
 * ```js
 * $(li).bind("removed", function(){
 *   Object.unobserve(todo, update, ["add", "update", "delete"] );
 *   todosConnection.deleteInstanceReference(todo);
 * });
 * ```
 */var spliceSymbol=canSymbol_1_7_0_canSymbol.for("can.splice");function updateList(list,getRecord,currentIndex,newIndex){if(currentIndex===-1){// item is not in the list
if(newIndex!==-1){// item should be in the list
canReflect_1_19_2_canReflect.splice(list,newIndex,0,[getRecord()]);}else {canReflect_1_19_2_canReflect.splice(list,0,0,[getRecord()]);}}else {// item is already in the list
if(newIndex===-1){// item should be removed from the lists
canReflect_1_19_2_canReflect.splice(list,currentIndex,1,[]);}else if(newIndex!==currentIndex){// item needs to be moved
if(currentIndex<newIndex){canReflect_1_19_2_canReflect.splice(list,newIndex,0,[getRecord()]);canReflect_1_19_2_canReflect.splice(list,currentIndex,1,[]);}else {canReflect_1_19_2_canReflect.splice(list,currentIndex,1,[]);canReflect_1_19_2_canReflect.splice(list,newIndex,0,[getRecord()]);}}else;}}function updateListWithItem(list,recordData,currentIndex,newIndex,connection,set){// this is cleaning up a bug with QueryLogic.index where it can return undefined
if(newIndex===undefined){newIndex=-1;}// we are inserting right where we already are.
if(currentIndex!==-1&&(newIndex===currentIndex+1||newIndex===currentIndex)){return;}if(list[spliceSymbol]!==undefined){updateList(list,function(){return connection.hydrateInstance(recordData);},currentIndex,newIndex);}else {var copy=connection.serializeList(list);updateList(copy,function(){return recordData;},currentIndex,newIndex);connection.updatedList(list,{data:copy},set);}}var realTime=canConnect_4_0_6_canConnect.behavior("real-time",function(baseConnection){var createPromise=Promise.resolve();var behavior;behavior={createData:function(){var promise=baseConnection.createData.apply(this,arguments);var cleanPromise=promise.catch(function(){return '';});createPromise=Promise.all([createPromise,cleanPromise]);return promise;},/**
		 * @function can-connect/real-time/real-time.createInstance createInstance
		 * @parent can-connect/real-time/real-time.methods
		 *
		 * Programatically indicate a new instance has been created.
		 *
		 * @signature `connection.createInstance(props)`
		 *
		 *   If there is no instance in the [can-connect/constructor/store/store.instanceStore]
		 *   for `props`'s [can-connect/base/base.id], an instance is [can-connect/constructor/constructor.hydrateInstance hydrated],
		 *   added to the store, and then [can-connect/real-time/real-time.createdData] is called with
		 *   `props` and the hydrated instance's serialized data. [can-connect/real-time/real-time.createdData]
		 *   will add this instance to any lists the instance belongs to.
		 *
		 *   If this instance has already been created, calls
		 *   [can-connect/real-time/real-time.updateInstance] with `props`.
		 *
		 *   @param {Object} props The raw properties of the instance was created.
		 *
		 *   @return {Promise<Instance>} A promise that resolves to the created instance.
		 *
		 * @body
		 *
		 * ## Use
		 *
		 * With a `real-time` connection, call `createInstance` when an instance is created that
		 * the connection itself did not make.  For instance, the following might listen to
		 * [socket.io](http://socket.io/) for when a `todo` is created and update the connection
		 * accordingly:
		 *
		 * ```js
		 * socket.on('todo created', function(todo){
		 *   todoConnection.createInstance(todo);
		 * });
		 * ```
		 *
		 */createInstance:function(props){var self=this;return new Promise(function(resolve,reject){// Wait until all create promises are done
// so that we can find data in the instance store
createPromise.then(function(){// Allow time for the store to get hydrated
setTimeout(function(){var id=self.id(props);var instance=self.instanceStore.get(id);var serialized;if(instance){// already created, lets update
resolve(self.updateInstance(props));}else {instance=self.hydrateInstance(props);serialized=self.serializeInstance(instance);self.addInstanceReference(instance);Promise.resolve(self.createdData(props,serialized)).then(function(){self.deleteInstanceReference(instance);resolve(instance);});}},1);});});},/**
		 * @function can-connect/real-time/real-time.createdData createdData
		 * @parent can-connect/real-time/real-time.callbacks
		 *
		 * Called whenever instance data is created.
		 *
		 * @signature `connection.createdData(props, params, [cid])`
		 *
		 *   Updates lists with the created instance.
		 *
		 *   Gets the instance created for this request. Then, updates the instance with
		 *   the response data `props`.
		 *
		 *   Next, it goes through every list in the [can-connect/constructor/store/store.listStore],
		 *   test if the instance's data belongs in that list.  If it does,
		 *   adds the instance's data to the serialized list data and
		 *   [can-connect/constructor/constructor.updatedList updates the list].
		 */createdData:function(props,params,cid){var instance;if(cid!==undefined){instance=this.cidStore.get(cid);}else {instance=this.instanceStore.get(this.id(props));}// pre-register so everything else finds this even if it doesn't have an id
this.addInstanceReference(instance,this.id(props));this.createdInstance(instance,props);create.call(this,this.serializeInstance(instance));this.deleteInstanceReference(instance);return undefined;},/**
		 * @function can-connect/real-time/real-time.updatedData updatedData
		 * @parent can-connect/real-time/real-time.callbacks
		 *
		 * Called whenever instance data is updated.
		 *
		 * @signature `connection.updatedData(props, params)`
		 *
		 *   Gets the instance that is updated, updates
		 *   it with `props` and the adds or removes it to
		 *   lists it belongs in.
		 *
		 *   @return {undefined} Returns `undefined` to prevent `.save` from calling `updatedInstance`.
		 */// Go through each list in the listStore and see if there are lists that should have this,
// or a list that shouldn't.
updatedData:function(props,params){var instance=this.instanceStore.get(this.id(params));this.updatedInstance(instance,props);update$1.call(this,this.serializeInstance(instance));// Returning undefined prevents other behaviors from running.
return undefined;},/**
		 * @function can-connect/real-time/real-time.updateInstance updateInstance
		 * @parent can-connect/real-time/real-time.methods
		 *
		 * Programatically indicate a new instance has been updated.
		 *
		 * @signature `connection.updateInstance(props)`
		 *
		 *   Calls [can-connect/real-time/real-time.updatedData] in the right way so
		 *   that the instance is updated and added to or removed from
		 *   any lists it belongs in.
		 *
		 *   @param {Object} props The properties of the instance that needs to be updated.
		 *
		 *   @return {Promise<Instance>} the updated instance.
		 *
		 * @body
		 *
		 * ## Use
		 *
		 * ```js
		 * socket.on('todo updated', function(todo){
		 *   todoConnection.updateInstance(todo);
		 * });
		 * ```
		 */updateInstance:function(props){var id=this.id(props);var instance=this.instanceStore.get(id);if(!instance){instance=this.hydrateInstance(props);}this.addInstanceReference(instance);var serialized=this.serializeInstance(instance),self=this;return Promise.resolve(this.updatedData(props,serialized)).then(function(){self.deleteInstanceReference(instance);return instance;});},/**
		 * @function can-connect/real-time/real-time.destroyedData destroyedData
		 * @parent can-connect/real-time/real-time.callbacks
		 *
		 * @signature `connection.destroyedData(props, params)`
		 *
		 * Gets the instance for this request.  Then tests if the instance
		 * is in any list in the [can-connect/constructor/store/store.listStore].  If
		 * it is, removes the instance from the list.
		 *
		 * @param {Object} props The properties of the destroyed instance.
		 * @param {Object} [params] The parameters used to destroy the data.
		 */destroyedData:function(props,params){var id=this.id(params||props);var instance=this.instanceStore.get(id);if(!instance){instance=this.hydrateInstance(props);}var serialized=this.serializeInstance(instance);this.destroyedInstance(instance,props);// we can pre-register it so everything else finds it
destroy.call(this,serialized);return undefined;},/**
		 * @function can-connect/real-time/real-time.destroyInstance destroyInstance
		 * @parent can-connect/real-time/real-time.methods
		 *
		 * Programatically indicate a new instance has been destroyed.
		 *
		 * @signature `connection.destroyInstance(props)`
		 *
		 *   Gets or creates an instance from `props` and uses
		 *   it to call [can-connect/real-time/real-time.destroyedData]
		 *   correctly.
		 *
		 * @param {Object} props The properties of the destroyed instance.
		 * @return {Promise<Instance>}  A promise with the destroyed instance.
		 *
		 * @body
		 * ## Use
		 *
		 * ```js
		 * socket.on('todo destroyed', function(todo){
		 *   todoConnection.destroyInstance(todo);
		 * });
		 * ```
		 */destroyInstance:function(props){var id=this.id(props);var instance=this.instanceStore.get(id);if(!instance){instance=this.hydrateInstance(props);}this.addInstanceReference(instance);var serialized=this.serializeInstance(instance),self=this;return Promise.resolve(this.destroyedData(props,serialized)).then(function(){self.deleteInstanceReference(instance);return instance;});}};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){behavior.gotListData=function(items,set){var self=this;if(this.queryLogic){if(Array.isArray(items)){items={data:items};}for(var item,i=0,l=items.data.length;i<l;i++){item=items.data[i];if(!self.queryLogic.isMember(set,item)){var msg=["One or more items were retrieved which do not match the 'Set' parameters used to load them. ","Read the docs for more information: https://canjs.com/doc/can-query-logic.html#TestingyourQueryLogic","\n\nBelow are the 'query' parameters:","\n"+dev.stringify(set),"\n\nAnd below is an item which does not match those parameters:","\n"+dev.stringify(item)].join("");dev.warn(msg);break;}}}return Promise.resolve(items);};}//!steal-remove-end
return behavior;});var create=function(props){var self=this;// go through each list
this.listStore.forEach(function(list,id){var set=JSON.parse(id);// ideally there should be speed up ... but this is fine for now.
var index=indexByIdentity(list,props,self.queryLogic.schema);if(self.queryLogic.isMember(set,props)){var newIndex=self.queryLogic.index(set,list,props);updateListWithItem(list,props,index,newIndex,self,set);}});};// ## update
// Goes through each list and sees if the list should be updated
// with the new.
var update$1=function(props){var self=this;this.listStore.forEach(function(list,id){var set=JSON.parse(id);// ideally there should be speed up ... but this is fine for now.
var currentIndex=indexByIdentity(list,props,self.queryLogic.schema);if(self.queryLogic.isMember(set,props)){var newIndex=self.queryLogic.index(set,list,props);updateListWithItem(list,props,currentIndex,newIndex,self,set);}else if(currentIndex!==-1){// its still in the list
// otherwise remove it
updateListWithItem(list,props,currentIndex,-1,self,set);}});};var destroy=function(props){var self=this;this.listStore.forEach(function(list,id){var set=JSON.parse(id);// ideally there should be speed up ... but this is fine for now.
var currentIndex=indexByIdentity(list,props,self.queryLogic.schema);if(currentIndex!==-1){// otherwise remove it
updateListWithItem(list,props,currentIndex,-1,self,set);}});};var callbacksOnce=createCommonjsModule(function(module){/**
 * @module {function} can-connect/constructor/callbacks-once/callbacks-once constructor/callbacks-once
 * @parent can-connect.behaviors
 *
 * Prevents duplicate calls to the instance callback methods.
 *
 * @signature `callbacksOnce( baseConnection )`
 *
 *   Prevents duplicate calls to the instance callback methods by tracking the last data the methods were called with.
 *   If called with the same data again, it does not call the base connection's instance callback.
 *
 *   @param {{}} baseConnection `can-connect` connection object that is having the `callbacks-once` behavior added
 *   on to it. Should already contain the behaviors that provide the Instance Callbacks
 *   (e.g [can-connect/constructor/constructor]). If the `connect` helper is used to build the connection, the
 *   behaviors will automatically be ordered as required.
 *
 *   @return {Object} A `can-connect` connection containing the methods provided by `callbacks-once`.
 *
 */var forEach=[].forEach;// wires up the following methods
var callbacks=[/**
	 * @function can-connect/constructor/callbacks-once/callbacks-once.createdInstance createdInstance
	 * @parent can-connect/constructor/callbacks-once/callbacks-once
	 *
	 * `createdInstance` callback handler that prevents sequential calls with the same arguments.
	 *
	 * @signature `createdInstance(instance, data)`
	 * Called with the instance created by [can-connect/constructor/constructor.save `connection.save`] and the response data of the
	 * underlying request. Prevents sequential calls to the underlying `createdInstance` handlers with the same arguments.
	 *
	 * @param {} instance the instance created by `connection.save`
	 * @param {} data the response data returned during `connection.save`
	 */"createdInstance",/**
	 * @function can-connect/constructor/callbacks-once/callbacks-once.updatedInstance updatedInstance
	 * @parent can-connect/constructor/callbacks-once/callbacks-once
	 *
	 * `updatedInstance` callback handler that prevents sequential calls with the same arguments.
	 *
	 * @signature `updatedInstance(instance, data)`
	 * Called with the instance updated by [can-connect/constructor/constructor.save`connection.save`] and the response data of the
	 * underlying request. Prevents sequential calls to the underlying `updatedInstance` handlers with the same arguments.
	 *
	 * @param {} instance the instance created by `connection.save`
	 * @param {} data the response data returned during `connection.save`
	 */"updatedInstance",/**
	 * @function can-connect/constructor/callbacks-once/callbacks-once.destroyedInstance destroyedInstance
	 * @parent can-connect/constructor/callbacks-once/callbacks-once
	 *
	 * `destroyedInstance` callback handler that prevents sequential calls with the same arguments.
	 *
	 * @signature `destroyedInstance(instance, data)`
	 * Called with the instance created by [can-connect/constructor/constructor.destroy `connection.destroy`] and the response data of the
	 * underlying request. Prevents sequential calls to the underlying `destroyedInstance` handlers with the same arguments.
	 *
	 * @param {} instance the instance created by `connection.destroy`
	 * @param {} data the response data returned during `connection.destroy`
	 */"destroyedInstance"];var callbacksOnceBehavior=canConnect_4_0_6_canConnect.behavior("constructor/callbacks-once",function(baseConnection){var behavior={};forEach.call(callbacks,function(name){behavior[name]=function(instance,data){var lastSerialized=this.getInstanceMetaData(instance,"last-data-"+name);var serialize=sortedSetJson(data);if(lastSerialized!==serialize){var result=baseConnection[name].apply(this,arguments);this.addInstanceMetaData(instance,"last-data-"+name,serialize);return result;}};});return behavior;});module.exports=callbacksOnceBehavior;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var validate$$1=validate;module.exports=validate$$1(callbacksOnceBehavior,callbacks);}//!steal-remove-end
});function realtimeRestModel(optionsOrUrl){// If optionsOrUrl is a string, make options = {url: optionsOrUrl}
var options=typeof optionsOrUrl==="string"?{url:optionsOrUrl}:optionsOrUrl;// If options.ObjectType or .ArrayType aren’t provided, define them
if(typeof options.ObjectType==="undefined"){options.ObjectType=class DefaultObjectType extends canObservableObject{};}if(typeof options.ArrayType==="undefined"){options.ArrayType=class DefaultArrayType extends canObservableArray{static get items(){return canType_1_1_6_canType.convert(options.ObjectType);}};}var behaviors=[constructor_1,map$3,store,callbacks,parse$1$1,url,realTime,callbacksOnce];return canConnect_4_0_6_canConnect(behaviors,options);}canNamespace_1_0_0_canNamespace.realtimeRestModel=realtimeRestModel;function restModel(optionsOrUrl){// If optionsOrUrl is a string, make options = {url: optionsOrUrl}
var options=typeof optionsOrUrl==="string"?{url:optionsOrUrl}:optionsOrUrl;// If options.ObjectType or .ArrayType aren’t provided, define them
if(typeof options.ObjectType==="undefined"){options.ObjectType=class DefaultObjectType extends canObservableObject{};}if(typeof options.ArrayType==="undefined"){options.ArrayType=class DefaultArrayType extends canObservableArray{static get items(){return canType_1_1_6_canType.convert(options.ObjectType);}};}var connection=[base$1,url,parse$1$1,constructor_1,map$3].reduce(function(prev,behavior){return behavior(prev);},options);connection.init();return connection;}canNamespace_1_0_0_canNamespace.restModel=restModel;var getItems$1=function(data){if(Array.isArray(data)){return data;}else {return data.data;}};var cacheRequests=createCommonjsModule(function(module){var forEach=Array.prototype.forEach;/**
 * @module can-connect/cache-requests/cache-requests cache-requests
 * @parent can-connect.behaviors
 * @group can-connect/cache-requests/cache-requests.data data interface
 * @group can-connect/cache-requests/cache-requests.queryLogic queryLogic
 *
 * Cache response data and use it to prevent unnecessary future requests or make future requests smaller.
 *
 * @signature `cacheRequests( baseConnection )`
 *
 *   Provide an implementation of [can-connect/cache-requests/cache-requests.getListData] that uses [can-connect/base/base.queryLogic] to
 *   determine what data is already in the [can-connect/base/base.cacheConnection cache] and what data needs to be
 *   loaded from the base connection.
 *
 *   It then gets data from the cache and the base connection (if needed), merges it, and returns it. Any data returned
 *   from the base connection is added to the cache.
 *
 *   @param {{}} baseConnection `can-connect` connection object that is having the `cache-requests` behavior added
 *   on to it. Should already contain the behaviors that provide the [can-connect/DataInterface]
 *   (e.g [can-connect/data/url/url]). If the `connect` helper is used to build the connection, the behaviors will
 *   automatically be ordered as required.
 *
 *   @return {Object} A `can-connect` connection containing the methods provided by `cache-requests`.
 *
 *
 * @body
 *
 * ## Use
 *
 * Use `cache-requests` in combination with a cache like [can-connect/data/memory-cache/memory-cache] or
 * [can-connect/data/localstorage-cache/localstorage-cache].  For example, to make it so response data is cached
 * in memory:
 *
 * ```js
 * var memoryStore = require("can-memory-store");
 * var dataUrl = require("can-connect/data/url/url");
 * var cacheRequests = require("can-connect/cache-requests/cache-requests");
 * var queryLogic = require("can-query-logic");
 *
 * var todoQueryLogic = new QueryLogic({});
 *
 * var cacheConnection = memoryStore({queryLogic: todoQueryLogic});
 * var todoConnection = connect([dataUrl, cacheRequests],{
 *   cacheConnection: cacheConnection,
 *   url: "/todos",
 *   queryLogic: todoQueryLogic
 * });
 * ```
 *
 * Now if today's todos are loaded:
 *
 * ```js
 * todoConnection.getListData({filter: {due: "today"}});
 * ```
 *
 * And later, a subset of those todos are loaded:
 *
 * ```js
 * todoConnection.getListData({filter: {due: "today", status: "critical"}});
 * ```
 *
 * The second request will be created from the original request's data.
 *
 * ## QueryLogic Usage
 *
 * `cache-requests` will "fill-in" the `cacheConnection` using [can-query-logic queryLogic].
 *
 * For example, if you requested paginated data like:
 *
 * ```
 * todoConnection.getListData({filter: {status: "critical"}})
 * ```
 *
 * And then later requested:
 *
 * ```
 * todoConnection.getListData({})
 * ```
 *
 * `cache-requests` will only request `{filter: {status: ["low","medium"]}}`, merging
 * that response with the data already present in the cache.
 *
 * That configuration looks like:
 *
 * ```js
 * var memoryStore = require("can-memory-store");
 * var dataUrl = require("can-connect/data/url/url");
 * var cacheRequests = require("can-connect/cache-requests/cache-requests");
 * var queryLogic = require("can-query-logic");
 *
 * var todoQueryLogic = new QueryLogic({
 *   keys: {
 *     status: QueryLogic.makeEnum(["low","medium","critical"])
 *   }
 * });
 *
 * var cacheConnection = memoryStore({queryLogic: todoQueryLogic});
 * var todoConnection = connect([dataUrl, cacheRequests], {
 *   cacheConnection: cacheConnection,
 *   url: "/todos",
 *   queryLogic: todoQueryLogic
 * })
 * ```
 *
 * **Note:** `cacheConnection` shares the same queryLogic configuration as the primary connection.
 */var cacheRequestsBehaviour=canConnect_4_0_6_canConnect.behavior("cache-requests",function(baseConnection){return {/**
		 * @function can-connect/cache-requests/cache-requests.getDiff getDiff
		 * @parent can-connect/cache-requests/cache-requests.queryLogic
		 *
		 * Compares the cached queries to the requested query and returns a description of what subset can be loaded from the
		 * cache and what subset must be loaded from the base connection.
		 *
		 * @signature `connection.getDiff( query, availableQueries )`
		 *
		 *   This determines the minimal amount of data that must be loaded from the base connection by going through each
		 *   cached query (`availableQueries`) and doing a [can-query-logic.prototype.isSubset isSubset] check and a
		 *   [can-query-logic.prototype.difference query difference] with the requested query (`query`).
		 *
		 *   If `query` is a subset of an `availableSet`, `{cached: query}` will be returned.
		 *
		 *   If `query` is neither a subset of, nor intersects with any `availableQueries`, `{needed: query}` is returned.
		 *
		 *   If `query` has an intersection with one or more `availableQueries`, a description of the difference that has the fewest
		 *   missing elements will be returned. An example diff description looks like:
		 *
		 *   ```
		 *   {
		 *     needed: {start: 50, end: 99}, // the difference, the query that is not cached
		 *     cached: {start: 0, end: 49}, // the intersection, the query that is cached
		 *     count: 49 // the size of the needed query
		 *   }
		 *   ```
		 *
		 *   @param {can-query-logic/query} query The query that is being requested.
		 *   @param {Array<can-query-logic/query>} availableQueries An array of [can-connect/connection.getSets available queries] in the
		 *     [can-connect/base/base.cacheConnection cache].
		 *   @return {Promise<{needed: can-query-logic/query, cached: can-query-logic/query, count: Integer}>} a difference description object. Described above.
		 *
		 */getDiff:function(params,availableQueries){var minSets,self=this;forEach.call(availableQueries,function(query){var curSets;var difference=self.queryLogic.difference(params,query);if(self.queryLogic.isDefinedAndHasMembers(difference)){var intersection=self.queryLogic.intersection(params,query);curSets={needed:difference,cached:self.queryLogic.isDefinedAndHasMembers(intersection)?intersection:false,count:self.queryLogic.count(difference)};}else if(self.queryLogic.isSubset(params,query)){curSets={cached:params,count:0};}if(curSets){if(!minSets||curSets.count<minSets.count){minSets=curSets;}}});if(!minSets){return {needed:params};}else {return {needed:minSets.needed,cached:minSets.cached};}},/**
		 * @function can-connect/cache-requests/cache-requests.unionMembers unionMembers
		 * @parent can-connect/cache-requests/cache-requests.queryLogic
		 *
		 * Create the requested data set, a union of the cached and un-cached data.
		 *
		 * @signature `connection.unionMembers(set, diff, neededData, cachedData)`
		 *
		 *   Uses [can-query-logic.prototype.unionMembers] to merge the two queries of data (`neededData` & `cachedData`).
		 *
		 * @param {can-query-logic/query} query The parameters of the data set requested.
		 * @param {Object} diff The result of [can-connect/cache-requests/cache-requests.getDiff].
		 * @param {can-connect.listData} neededData The data loaded from the base connection.
		 * @param {can-connect.listData} cachedData The data loaded from the [can-connect/base/base.cacheConnection].
		 *
		 * @return {can-connect.listData} A merged [can-connect.listData] representation of the the cached and requested data.
		 */unionMembers:function(params,diff,neededItems,cachedItems){// using the diff, re-construct everything
return {data:this.queryLogic.unionMembers(diff.needed,diff.cached,getItems$1(neededItems),getItems$1(cachedItems))};},/**
		 * @function can-connect/cache-requests/cache-requests.getListData getListData
		 * @parent can-connect/cache-requests/cache-requests.data
		 *
		 * Only request data that isn't already present in the [can-connect/base/base.cacheConnection cache].
		 *
		 * @signature `connection.getListData(set)`
		 *
		 *   Overwrites a base connection's `getListData` to use data in the [can-connect/base/base.cacheConnection cache]
		 *   whenever possible.  This works by [can-connect/connection.getSets getting the stored queries]
		 *   from the [can-connect/base/base.cacheConnection cache] and
		 *   doing a [can-connect/cache-requests/cache-requests.getDiff diff] to see what needs to be loaded from the base
		 *   connection and what can be loaded from the [can-connect/base/base.cacheConnection cache].
		 *
		 *   With that information, this `getListData` requests data from the cache or the base connection as needed.
		 *   Data loaded from different sources is combined via [can-connect/cache-requests/cache-requests.unionMembers].
		 *
		 * @param {can-query-logic/query} query the parameters of the list that is being requested.
		 * @return {Promise<can-connect.listData>} a promise that returns an object conforming to the [can-connect.listData] format.
		 */getListData:function(set){set=set||{};var self=this;return this.cacheConnection.getSets(set).then(function(queries){var diff=self.getDiff(set,queries);if(!diff.needed){return self.cacheConnection.getListData(diff.cached);}else if(!diff.cached){return baseConnection.getListData(diff.needed).then(function(data){return self.cacheConnection.updateListData(getItems$1(data),diff.needed).then(function(){return data;});});}else {var cachedPromise=self.cacheConnection.getListData(diff.cached);var needsPromise=baseConnection.getListData(diff.needed);var savedPromise=needsPromise.then(function(data){return self.cacheConnection.updateListData(getItems$1(data),diff.needed).then(function(){return data;});});// start the combine while we might be saving param and adding to cache
var combinedPromise=Promise.all([cachedPromise,needsPromise]).then(function(result){var cached=result[0],needed=result[1];return self.unionMembers(set,diff,needed,cached);});return Promise.all([combinedPromise,savedPromise]).then(function(data){return data[0];});}});}};});module.exports=cacheRequestsBehaviour;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var validate$$1=validate;module.exports=validate$$1(cacheRequestsBehaviour,['getListData','cacheConnection']);}//!steal-remove-end
});var callbacksCache=createCommonjsModule(function(module){/**
 * @module can-connect/data/callbacks-cache/callbacks-cache data/callbacks-cache
 * @parent can-connect.behaviors
 *
 * Implements the data interface callbacks to call the [can-connect/base/base.cacheConnection]
 * [can-connect/DataInterface]. These calls keep the [can-connect/base/base.cacheConnection] contents
 * up to date.
 *
 * @signature `dataCallbacksCache( baseConnection )`
 * Implements the data interface callbacks so that a corresponding [can-connect/DataInterface] method is called on the
 * [can-connect/base/base.cacheConnection]. This updates the [can-connect/base/base.cacheConnection] contents whenever
 * data is updated on the primary connection.
 *
 * @param {{}} baseConnection `can-connect` connection object that is having the `data/callbacks-cache` behavior added
 * on to it.
 *
 * @return {{}} a `can-connect` connection containing the method implementations provided by `data/callbacks-cache`.
 *
 * ### Example
 * Shows synchronization between primary connection and cacheConnection data when using this behavior:
 * ```
 * import dataUrl from "can-connect/data/url/";
 * import dataCallbacks from "can-connect/data/callbacks/";
 * import cacheCallbacks from "can-connect/data/callbacks-cache/";
 * import memoryCache from "can-connect/data/memory-cache/";
 *
 * var cacheConnection = connect([memoryCache], {});
 * var todoConnection = connect([dataUrl, dataCallback, cacheCallbacks], {
 *   cacheConnection,
 *   url: "/todo"
 * });
 *
 * todoConnection.createData({name:'do the dishes', completed: false}).then(function(data) {
 *   todoConnection.cacheConnection.getData({id: data.id}).then(function(cachedData) {
 *     // data returned from connection and data returned from cache have the same contents
 *     data.id === cachedData.id; // true
 *     data.name === cachedData.name; // true
 *     data.completed === cachedData.completed; // true
 *     data === cachedData; // false, since callbacks-cache creates a copy of the data when adding it to the cache
 *   })
 * });
 * ```
 */var assign=canReflect_1_19_2_canReflect.assignMap;var each=canReflect_1_19_2_canReflect.each;// wires up the following methods
var pairs={/**
	 * @function can-connect/data/callbacks-cache/callbacks-cache.createdData createdData
	 * @parent can-connect/data/callbacks-cache/callbacks-cache
	 *
	 * Data callback that updates the [can-connect/base/base.cacheConnection cache] when a new data record is created.
	 *
	 * @signature `connection.createdData(responseData, requestData, cid)`
	 *
	 * Calls `createData` on the [can-connect/base/base.cacheConnection] to add a newly created data record to the cache.
	 * Calls and returns the response from any underlying behavior's `createdData` callback.
	 *
	 * @param {{}} responseData the data returned by the data creation request
	 * @param {{}} requestData the data that was passed to the data creation request
	 * @param {Number} cid the unique identifier for this data. Used before data has a [can-connect/base/base.id] added
	 * at creation time.
	 *
	 * @return {{}} the data returned from an underlying behavior's `createdData` callback, if one exists. Otherwise
	 * returns the `responseData`.
	 */createdData:"createData",/**
	 * @function can-connect/data/callbacks-cache/callbacks-cache.updatedData updatedData
	 * @parent can-connect/data/callbacks-cache/callbacks-cache
	 *
	 * Data callback that updates the [can-connect/base/base.cacheConnection cache] when a data record is modified.
	 *
	 * @signature `connection.updatedData(responseData, requestData)`
	 *
	 * Calls `updateData` on the [can-connect/base/base.cacheConnection] to modify a data record stored in the cache.
	 * Calls and returns the response from any underlying behavior's `updatedData` callback.
	 *
	 * @param {{}} responseData the data returned by the data update request
	 * @param {{}} requestData the data that was passed to the data update request
	 *
	 * @return {{}} the data returned from an underlying behavior's `updatedData` callback, if one exists. Otherwise
	 * returns the `responseData`.
	 */updatedData:"updateData",/**
	 * @function can-connect/data/callbacks-cache/callbacks-cache.destroyedData destroyedData
	 * @parent can-connect/data/callbacks-cache/callbacks-cache
	 *
	 * Data callback that updates the [can-connect/base/base.cacheConnection cache] when a data record is deleted.
	 *
	 * @signature `connection.destroyedData(responseData, requestData)`
	 *
	 * Calls `destroyData` on the [can-connect/base/base.cacheConnection] to remove a data record stored in the cache.
	 * Calls and returns the response from any underlying behavior's `destroyedData` callback.
	 *
	 * @param {{}} responseData the data returned by the data destroy request
	 * @param {{}} requestData the data that was passed to the data destroy request
	 *
	 * @return {{}} the data returned from an underlying behavior's `destroyedData` callback, if one exists. Otherwise
	 * returns the `responseData`.
	 */destroyedData:"destroyData"};var callbackCache=canConnect_4_0_6_canConnect.behavior("data/callbacks-cache",function(baseConnection){var behavior={};each(pairs,function(crudMethod,dataCallback){behavior[dataCallback]=function(data,params,cid){// update the data in the cache
this.cacheConnection[crudMethod](assign(assign({},params),data));// return underlying dataCallback implementation if one exists or return input data
if(baseConnection[dataCallback]){return baseConnection[dataCallback].call(this,data,params,cid);}else {return data;}};});return behavior;});module.exports=callbackCache;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var validate$$1=validate;module.exports=validate$$1(callbackCache,[]);}//!steal-remove-end
});var deferred=function(){var def={};def.promise=new Promise(function(resolve,reject){def.resolve=resolve;def.reject=reject;});return def;};var forEach=[].forEach;/**
 * @module can-connect/data/combine-requests/combine-requests combine-requests
 * @parent can-connect.behaviors
 * @group can-connect/data/combine-requests.options 1 behavior options
 * @group can-connect/data/combine-requests.types 2 types
 * @group can-connect/data/combine-requests.data-methods 3 data methods
 * @group can-connect/data/combine-requests.queryLogic 4 queryLogic methods
 *
 * Combines multiple incoming lists requests into a single list request when possible.
 *
 * @signature `combineRequests( baseConnection )`
 *
 * Implements [can-connect/data/combine-requests.getListData] to collect the requested sets for some
 * [can-connect/data/combine-requests.time].  Once the configured amount of time has passed, it tries to take the
 * [can-connect/data/combine-requests.unionPendingRequests union] of the requested sets. It then makes requests with
 * those unified sets. Once the unified set requests have returned, the original requests are resolved by taking
 * [can-connect/data/combine-requests.filterMembers subsets] of the unified response data.
 *
 * @param {{}} baseConnection `can-connect` connection object that is having the `combine-requests` behavior added
 * on to it. Should already contain a behavior that provides `getListData` (e.g [can-connect/data/url/url]). If
 * the `connect` helper is used to build the connection, the behaviors will automatically be ordered as required.
 *
 * @return {{}} a `can-connect` connection containing the method implementations provided by `combine-requests`.
 *
 * @body
 *
 * ## Use
 *
 * Create a connection with the `combine-requests` plugin:
 *
 * ```
 * var combineRequests = require("can-connect/data/combine-requests/");
 * var dataUrl = require("can-connect/data/url/");
 * var todosConnection = connect([dataUrl, combineRequests], {
 *   url: "/todos"
 * });
 * ```
 * Since the configuration above doesn't include the [can-connect/data/combine-requests.time] option, the following
 * will only make a single request if all requests are made during the same "thread of execution" (i.e. before the
 * browser takes a break from executing the current JavaScript):
 *
 * ```
 * todosConnection.getListData({})
 * todosConnection.getListData({filter: {userId: 5}});
 * todosConnection.getListData({filter: {userId: 5, type: "critical"}});
 * ```
 *
 * The above requests can all be joined since [can-set] intuitively knows that
 * `({filter: {userId: 5}}` and `{filter: {userId: 5, type: "critical"}}` are subsets of the complete set of todos, `{}`.
 *
 * For more advanced combining, a [can-query-logic queryLogic] must be configured. This allows `combine-requests` to understand
 * what certain parameters of a set mean, and how they might be combined.
 *
 *
 *
 */var combineRequests=canConnect_4_0_6_canConnect.behavior("data/combine-requests",function(baseConnection){var pendingRequests;//[{set, deferred}]
return {/**
		 * @function can-connect/data/combine-requests.unionPendingRequests unionPendingRequests
		 * @parent can-connect/data/combine-requests.queryLogic
		 *
		 * Group pending requests by the request that they are a subset of.
		 *
		 * @signature `connection.unionPendingRequests( pendingRequests )`
		 *
		 * This is called by [can-connect/data/combine-requests.getListData] to determine which pending requests can be unified
		 * into a broader request. This produces a grouping of 'parent' sets to 'child' requests whose data will be
		 * derived from the data retrieved by the parent.
		 *
		 * After this grouping is returned, [can-connect/data/combine-requests.getListData] executes requests for the parent
		 * sets. After a parent request succeeds, the child requests will have their data calculated from the parent data.
		 *
		 * @param {Array<can-connect/data/combine-requests.PendingRequest>} pendingRequests
		 * an array of objects, each containing:
		 *   - `set` - the requested set
		 *   - `deferred` - a wrapper around a `Promise` that will be resolved with this sets data
		 *
		 * @return {Array<{set: Set, pendingRequests: can-connect/data/combine-requests.PendingRequest}>}
		 * an array of each of the unified requests to be made.  Each unified request should have:
		 *   - `set` - the set to request
		 *   - `pendingRequests` - the array of [can-connect/data/combine-requests.PendingRequest pending requests] the `set` satisfies
		 *
		 * ### Example
		 *
		 * This function converts something like:
		 *
		 * ```
		 * [
		 *   {set: {completed: false}, deferred: def1},
		 *   {set: {completed: true}, deferred: def2}
		 * ]
		 * ```
		 *
		 * to:
		 *
		 * ```
		 * [
		 *   {
		 *    set: {},
		 *    pendingRequests: [
		 *      {set: {completed: false}, deferred: def1},
		 *      {set: {completed: true}, deferred: def2}
		 *    ]
		 *   }
		 * ]
		 * ```
		 *
		 */unionPendingRequests:function(pendingRequests){// this should try to merge existing param requests, into an array of
// others to send out
// but this data structure keeps the original promises.
// we need the "biggest" sets first so they can swallow up everything else
// O(n log n)
var self=this;pendingRequests.sort(function(pReq1,pReq2){if(self.queryLogic.isSubset(pReq1.set,pReq2.set)){return 1;}else if(self.queryLogic.isSubset(pReq2.set,pReq1.set)){return -1;}else {return 0;}});// O(n^2).  This can probably be made faster, but there are rarely lots of pending requests.
var combineData=[];var current;doubleLoop(pendingRequests,{start:function(pendingRequest){current={set:pendingRequest.set,pendingRequests:[pendingRequest]};combineData.push(current);},iterate:function(pendingRequest){var combined=self.queryLogic.union(current.set,pendingRequest.set);if(self.queryLogic.isDefinedAndHasMembers(combined)){// add next
current.set=combined;current.pendingRequests.push(pendingRequest);// removes this from iteration
return true;}}});return Promise.resolve(combineData);},/**
		 * @property {Number} can-connect/data/combine-requests.time time
		 * @parent can-connect/data/combine-requests.options
		 *
		 * Specifies the amount of time to wait to combine requests.
		 *
		 * @option {Number} Defaults to `1`, meaning only requests made within the same "thread of execution" will be
		 * combined (i.e. requests made before the browser takes a break from the ongoing JavaScript execution).
		 *
		 * Increasing this number will mean that requests are delayed that length of time in case other requests
		 * are made. In general, we advise against increasing this amount of time except in cases where loads take a
		 * significant amount of time and the increased delay is unlikely to be noticed.
		 *
		 * ```
		 * var combineRequests = require("can-connect/data/combine-requests/");
		 * connect([... combineRequests, ...],{
		 *   time: 100
		 * })
		 * ```
		 */time:1,/**
		 * @function can-connect/data/combine-requests.getListData getListData
		 * @parent can-connect/data/combine-requests.data-methods
		 *
		 * Combines multiple list data requests into a single request, when possible.
		 *
		 * @signature `connection.getListData( set )`
		 *
		 * Extension of [can-connect/connection.getListData `getListData`] that tries to combine calls to it into a single
		 * call. The calls are fulfilled by an underlying behavior's `getListData` implementation.
		 *
		 * Waits for a configured [can-connect/data/combine-requests.time] then tries to unify the sets requested during it.
		 * After unification, calls for the unified sets are made to the underlying `getListData`. Once the unified
		 * data has returned, the individual calls to `getListData` are resolved with a
		 * [can-query-logic.prototype.filterMembers calculated subset] of the unified data.
		 *
		 * @param {can-query-logic/query} query the parameters of the requested set of data
		 * @return {Promise<can-connect.listData>} `Promise` resolving the data of the requested set
		 */getListData:function(set){set=set||{};var self=this;if(!pendingRequests){pendingRequests=[];setTimeout(function(){var combineDataPromise=self.unionPendingRequests(pendingRequests);pendingRequests=null;combineDataPromise.then(function(combinedData){// farm out requests
forEach.call(combinedData,function(combined){// clone combine.set to prevent mutations by baseConnection.getListData
var combinedSet=canReflect_1_19_2_canReflect.serialize(combined.set);baseConnection.getListData(combinedSet).then(function(data){if(combined.pendingRequests.length===1){combined.pendingRequests[0].deferred.resolve(data);}else {forEach.call(combined.pendingRequests,function(pending){// get the subset using the combine.set property before being passed down
// to baseConnection.getListData which might mutate it causing combinedRequests
// to resolve with an `undefined` value instead of an actual set
// https://github.com/canjs/can-connect/issues/139
pending.deferred.resolve({data:self.queryLogic.filterMembers(pending.set,combined.set,getItems$1(data))});});}},function(err){if(combined.pendingRequests.length===1){combined.pendingRequests[0].deferred.reject(err);}else {forEach.call(combined.pendingRequests,function(pending){pending.deferred.reject(err);});}});});});},this.time||1);}var deferred$$1=deferred();pendingRequests.push({deferred:deferred$$1,set:set});return deferred$$1.promise;}};});var combineRequests_1=combineRequests;//!steal-remove-start
var combineRequests_1=validate(combineRequests,['getListData']);//!steal-remove-end
/**
 * @typedef {PendingRequest} can-connect/data/combine-requests.PendingRequest PendingRequest
 * @parent can-connect/data/combine-requests.types
 *
 * @description Type to keep track of the multiple requests that were unified into a single request.
 *
 * @type {PendingRequest} Record of an individual request that has been unified as part of the combined request. After
 * the unified request completes instances of these types are processed to complete the individual requests with the
 * subset of the unified data.
 *
 * @option {can-query-logic/query} query a requested [can-set/Set set] of data that has been unified into the combined request
 * @option {{}} deferred a type that keeps track of the individual [can-connect/data/combine-requests.getListData]
 * promise that will be resolved after the unified request completes
 */// ### doubleLoop
var doubleLoop=function(arr,callbacks){var i=0;while(i<arr.length){callbacks.start(arr[i]);var j=i+1;while(j<arr.length){if(callbacks.iterate(arr[j])===true){arr.splice(j,1);}else {j++;}}i++;}};var combineRequests$1=combineRequests_1;var canLocalStore_1_0_1_canLocalStore=canNamespace_1_0_0_canNamespace.localStore=function localStore(baseConnection){baseConnection.constructor=localStore;var behavior=Object.create(canMemoryStore_1_0_3_makeSimpleStore(baseConnection));canReflect_1_19_2_canReflect.assignMap(behavior,{clear:function(){localStorage.removeItem(this.name+"/queries");localStorage.removeItem(this.name+"/records");this._recordsMap=null;return Promise.resolve();},updateQueryDataSync:function(queries){localStorage.setItem(this.name+"/queries",JSON.stringify(queries));},getQueryDataSync:function(){return JSON.parse(localStorage.getItem(this.name+"/queries"))||[];},getRecord:function(id){// a little side-effectual mischeif for performance
if(!this._recordsMap){this.getAllRecords();}return this._recordsMap[id];},getAllRecords:function(){// this._records is a in memory representation so things can be fast
// Must turn on `cacheLocalStorageReads` for this to work.
if(!this.cacheLocalStorageReads||!this._recordsMap){var recordsMap=JSON.parse(localStorage.getItem(this.name+"/records"))||{};this._recordsMap=recordsMap;}var records=[];for(var id in this._recordsMap){records.push(this._recordsMap[id]);}return records;},destroyRecords:function(records){if(!this._recordsMap){this.getAllRecords();}canReflect_1_19_2_canReflect.eachIndex(records,function(record){var id=canReflect_1_19_2_canReflect.getIdentity(record,this.queryLogic.schema);delete this._recordsMap[id];},this);localStorage.setItem(this.name+"/records",JSON.stringify(this._recordsMap));},updateRecordsSync:function(records){if(!this._recordsMap){this.getAllRecords();}records.forEach(function(record){var id=canReflect_1_19_2_canReflect.getIdentity(record,this.queryLogic.schema);this._recordsMap[id]=record;},this);localStorage.setItem(this.name+"/records",JSON.stringify(this._recordsMap));}// ## Identifiers
/**
		 * @property {String} can-connect/data/localstorage-cache/localstorage-cache.name name
		 * @parent can-connect/data/localstorage-cache/localstorage-cache.identifiers
		 *
		 * Specify a name to use when saving data in localstorage.
		 *
		 * @option {String} This name is used to find and save data in
		 * localstorage. Instances are saved in `{name}/instance/{id}`
		 * and sets are saved in `{name}/set/{set}`.
		 *
		 * @body
		 *
		 * ## Use
		 *
		 * ```
		 * var cacheConnection = connect(["data-localstorage-cache"],{
		 *   name: "todos"
		 * });
		 * ```
		 */// ## External interface
/**
		 * @function can-connect/data/localstorage-cache/localstorage-cache.clear clear
		 * @parent can-connect/data/localstorage-cache/localstorage-cache.data-methods
		 *
		 * Resets the memory cache so it contains nothing.
		 *
		 * @signature `connection.clear()`
		 *
		 *//**
		 * @function can-connect/data/localstorage-cache/localstorage-cache.getSets getSets
		 * @parent can-connect/data/localstorage-cache/localstorage-cache.data-methods
		 *
		 * Returns the sets contained within the cache.
		 *
		 * @signature `connection.getSets(set)`
		 *
		 *   Returns the sets added by [can-connect/data/localstorage-cache/localstorage-cache.updateListData].
		 *
		 *   @return {Promise<Array<Set>>} A promise that resolves to the list of sets.
		 *
		 * @body
		 *
		 * ## Use
		 *
		 * ```
		 * connection.getSets() //-> Promise( [{type: "completed"},{user: 5}] )
		 * ```
		 *
		 *//**
		 * @function can-connect/data/localstorage-cache/localstorage-cache.getListData getListData
		 * @parent can-connect/data/localstorage-cache/localstorage-cache.data-methods
		 *
		 * Gets a set of data from localstorage.
		 *
		 * @signature `connection.getListData(set)`
		 *
		 *   Goes through each set add by [can-connect/data/memory-cache.updateListData]. If
		 *   `set` is a subset, uses [can-connect/base/base.queryLogic] to get the data for the requested `set`.
		 *
		 *   @param {can-query-logic/query} query An object that represents the data to load.
		 *
		 *   @return {Promise<can-connect.listData>} A promise that resolves if `set` is a subset of
		 *   some data added by [can-connect/data/memory-cache.updateListData].  If it is not,
		 *   the promise is rejected.
		 *//**
		 * @function can-connect/data/localstorage-cache.getListDataSync getListDataSync
		 * @parent can-connect/data/localstorage-cache.data-methods
		 *
		 * Synchronously gets a set of data from localstorage.
		 *
		 * @signature `connection.getListDataSync(set)`
		 * @hide
		 *//**
		 * @function can-connect/data/localstorage-cache/localstorage-cache.getData getData
		 * @parent can-connect/data/localstorage-cache/localstorage-cache.data-methods
		 *
		 * Get an instance's data from localstorage.
		 *
		 * @signature `connection.getData(params)`
		 *
		 *   Looks in localstorage for the requested instance.
		 *
		 *   @param {Object} params An object that should have the [conenction.id] of the element
		 *   being retrieved.
		 *
		 *   @return {Promise} A promise that resolves to the item if the memory cache has this item.
		 *   If localstorage does not have this item, it rejects the promise.
		 *//**
		 * @function can-connect/data/localstorage-cache/localstorage-cache.updateListData updateListData
		 * @parent can-connect/data/localstorage-cache/localstorage-cache.data-methods
		 *
		 * Saves a set of data in the cache.
		 *
		 * @signature `connection.updateListData(listData, set)`
		 *
		 *   Tries to merge this set of data with any other saved sets of data. If
		 *   unable to merge this data, saves the set by itself.
		 *
		 *   @param {can-connect.listData} listData
		 *   @param {can-query-logic/query} query
		 *   @return {Promise} Promise resolves if and when the data has been successfully saved.
		 *//**
		 * @function can-connect/data/localstorage-cache/localstorage-cache.createData createData
		 * @parent can-connect/data/localstorage-cache/localstorage-cache.data-methods
		 *
		 * Called when an instance is created and should be added to cache.
		 *
		 * @signature `connection.createData(props)`
		 *
		 *   Adds `props` to the stored list of instances. Then, goes
		 *   through every set and adds props the sets it belongs to.
		 *//**
		 * @function can-connect/data/localstorage-cache/localstorage-cache.updateData updateData
		 * @parent can-connect/data/localstorage-cache/localstorage-cache.data-methods
		 *
		 * Called when an instance is updated.
		 *
		 * @signature `connection.updateData(props)`
		 *
		 *   Overwrites the stored instance with the new props. Then, goes
		 *   through every set and adds or removes the instance if it belongs or not.
		 *//**
		 * @function can-connect/data/localstorage-cache/localstorage-cache.destroyData destroyData
		 * @parent can-connect/data/localstorage-cache/localstorage-cache.data-methods
		 *
		 * Called when an instance should be removed from the cache.
		 *
		 * @signature `connection.destroyData(props)`
		 *
		 *   Goes through each set of data and removes any data that matches
		 *   `props`'s [can-connect/base/base.id]. Finally removes this from the instance store.
		 */});return behavior;};/**
 * @module can-connect/data/localstorage-cache/localstorage-cache localstorage-cache
 * @parent can-connect.deprecated
 * @group can-connect/data/localstorage-cache/localstorage-cache.identifiers 0 identifiers
 * @group can-connect/data/localstorage-cache/localstorage-cache.data-methods 1 data methods
 *
 * Saves raw data in localStorage.
 *
 * @deprecated {5.0} Use [can-local-store] instead.
 *
 * @signature `localStorage( baseConnection )`
 *
 *   Creates a cache of instances and a cache of sets of instances that is
 *   accessible to read via [can-connect/data/localstorage-cache/localstorage-cache.getSets],
 *   [can-connect/data/localstorage-cache/localstorage-cache.getData], and [can-connect/data/localstorage-cache/localstorage-cache.getListData].
 *   The caches are updated via [can-connect/data/localstorage-cache/localstorage-cache.createData],
 *   [can-connect/data/localstorage-cache/localstorage-cache.updateData], [can-connect/data/localstorage-cache/localstorage-cache.destroyData],
 *   and [can-connect/data/localstorage-cache/localstorage-cache.updateListData].
 *
 *   [can-connect/data/localstorage-cache/localstorage-cache.createData],
 *   [can-connect/data/localstorage-cache/localstorage-cache.updateData],
 *   [can-connect/data/localstorage-cache/localstorage-cache.destroyData] are able to move items in and out
 *   of sets.
 *
 * @body
 *
 * ## Use
 *
 * `data/localstorage-cache` is often used with a caching strategy like [can-connect/fall-through-cache/fall-through-cache] or
 * [can-connect/cache-requests/cache-requests].  Make sure you configure the connection's [can-connect/data/localstorage-cache/localstorage-cache.name].
 *
 * ```
 * var cacheConnection = connect([
 *   require("can-connect/data/localstorage-cache/localstorage-cache")
 * ],{
 *   name: "todos"
 * });
 *
 * var todoConnection = connect([
 *   require("can-connect/data/url/url"),
 *   require("can-connect/fall-through-cache/fall-through-cache")
 * ],
 * {
 *   url: "/services/todos",
 *   cacheConnection: cacheConnection
 * });
 * ```
 *
 */var localstorageCache=canLocalStore_1_0_1_canLocalStore;/**
 * @module can-connect/data/memory-cache/memory-cache memory-cache
 * @parent can-connect.deprecated
 * @group can-connect/data/memory-cache/memory-cache.data-methods data methods
 *
 * Saves raw data in JavaScript memory that disappears when the page refreshes.
 *
 * @deprecated {5.0} Use [can-memory-store] instead.
 *
 * @signature `memoryCache( baseConnection )`
 *
 *   Creates a cache of instances and a cache of sets of instances that is
 *   accessible to read via [can-connect/data/memory-cache/memory-cache.getSets],
 *   [can-connect/data/memory-cache/memory-cache.getData], and [can-connect/data/memory-cache/memory-cache.getListData].
 *   The caches are updated via [can-connect/data/memory-cache/memory-cache.createData],
 *   [can-connect/data/memory-cache/memory-cache.updateData], [can-connect/data/memory-cache/memory-cache.destroyData],
 *   and [can-connect/data/memory-cache/memory-cache.updateListData].
 *
 *   [can-connect/data/memory-cache/memory-cache.createData],
 *   [can-connect/data/memory-cache/memory-cache.updateData],
 *   [can-connect/data/memory-cache/memory-cache.destroyData] are able to move items in and out
 *   of sets.
 *
 * @body
 *
 * ## Use
 *
 * `data/memory-cache` is often used with a caching strategy like [can-connect/fall-through-cache/fall-through-cache] or
 * [can-connect/cache-requests/cache-requests].
 *
 * ```js
 * var cacheConnection = connect([
 *   require("can-connect/data/memory-cache/memory-cache")
 * ],{});
 *
 * var todoConnection = connect([
 *   require("can-connect/data/url/url"),
 *   require("can-connect/fall-through-cache/fall-through-cache")
 * ],
 * {
 *   url: "/services/todos",
 *   cacheConnection: cacheConnection
 * });
 * ```
 */var memoryCache=canMemoryStore_1_0_3_canMemoryStore;var fallThroughCache_1=createCommonjsModule(function(module){/**
 * @module can-connect/fall-through-cache/fall-through-cache fall-through-cache
 * @parent can-connect.behaviors
 * @group can-connect/fall-through-cache/fall-through-cache.data data callbacks
 * @group can-connect/fall-through-cache/fall-through-cache.hydrators hydrators
 *
 * Add fall-through caching with the `cacheConnection`.
 *
 * @signature `fallThroughCache( baseConnection )`
 *
 *   Implements a `getData` and `getListData` that
 *   check their [can-connect/base/base.cacheConnection] for data. If there is data,
 *   this data will be immediately returned.
 *   In the background, the `baseConnection` method will be called and used to update the instance or list.
 *
 * @body
 *
 * ## Use
 *
 * To use the `fall-through-cache`, create a connection with a
 * [can-connect/base/base.cacheConnection] and a behavior that implements
 * [can-connect/connection.getData] and [can-connect/connection.getListData].
 *
 * ```js
 * var QueryLogic = require("can-query-logic");
 *
 * var queryLogic = new QueryLogic();
 *
 * var cache = connect([
 *   require("can-local-store")
 * ],{
 *   name: "todos",
 *   queryLogic: queryLogic
 * });
 *
 * var todoConnection = connect([
 *    require("can-connect/fall-through-cache/fall-through-cache"),
 *    require("can-connect/data/url/url"),
 *    require("can-connect/constructor/constructor"),
 *    require("can-connect/constructor/store/store")
 *   ], {
 *   url: "/todos",
 *   cacheConnection: cache,
 *   queryLogic: queryLogic
 * });
 * ```
 *
 * Then, make requests.  If the cache has the data,
 * it will be returned immediately, and then the item or list updated later
 * with the response from the base connection:
 *
 * ```js
 * todoConnection.getList({due: "today"}).then(function(todos){
 *
 * })
 * ```
 *
 * ## Demo
 *
 * The following shows the `fall-through-cache` behavior.
 *
 * @demo demos/can-connect/fall-through-cache.html
 *
 * Clicking
 * "Completed" or "Incomplete" will make one of the following requests and
 * display the results in the page:
 *
 * ```
 * todoConnection.getList({completed: true});
 * todoConnection.getList({completed: false});
 * ```
 *
 * If you click back and forth between "Completed" and "Incomplete" multiple times
 * you'll notice that the old data is displayed immediately and then
 * updated after about a second.
 *
 */var fallThroughCache=canConnect_4_0_6_canConnect.behavior("fall-through-cache",function(baseConnection){var behavior={/**
		 * @function can-connect/fall-through-cache/fall-through-cache.hydrateList hydrateList
		 * @parent can-connect/fall-through-cache/fall-through-cache.hydrators
		 *
		 * Returns a List instance given raw data.
		 *
		 * @signature `connection.hydrateList(listData, set)`
		 *
		 *   Calls the base `hydrateList` to create a List for `listData`.
		 *
		 *   Then, Looks for registered hydrateList callbacks for a given `set` and
		 *   calls them.
		 *
		 *   @param {can-connect.listData} listData
		 *   @param {can-query-logic/query} query
		 *   @return {can-connect.List}
		 */hydrateList:function(listData,set){set=set||this.listQuery(listData);var id=sortedSetJson(set);var list=baseConnection.hydrateList.call(this,listData,set);if(this._getHydrateListCallbacks[id]){this._getHydrateListCallbacks[id].shift()(list);if(!this._getHydrateListCallbacks[id].length){delete this._getHydrateListCallbacks[id];}}return list;},_getHydrateListCallbacks:{},_getHydrateList:function(set,callback){var id=sortedSetJson(set);if(!this._getHydrateListCallbacks[id]){this._getHydrateListCallbacks[id]=[];}this._getHydrateListCallbacks[id].push(callback);},/**
		 * @function can-connect/fall-through-cache/fall-through-cache.getListData getListData
		 * @parent can-connect/fall-through-cache/fall-through-cache.data
		 *
		 * Get raw data from the cache if available, and then update
		 * the list later with data from the base connection.
		 *
		 * @signature `connection.getListData(set)`
		 *
		 *   Checks the [can-connect/base/base.cacheConnection] for `set`'s data.
		 *
		 *   If the cache connection has data, the cached data is returned. Prior to
		 *   returning the data, the [can-connect/constructor.hydrateList] method
		 *   is intercepted so we can get a handle on the list that's being created
		 *   for the returned data. Once the intercepted list is retrieved,
		 *   we use the base connection to get data and update the intercepted list and
		 *   the cacheConnection.
		 *
		 *   If the cache connection does not have data, the base connection
		 *   is used to load the data and the cached connection is updated with that
		 *   data.
		 *
		 *   @param {can-query-logic/query} query The set to load.
		 *
		 *   @return {Promise<can-connect.listData>} A promise that returns the
		 *   raw data.
		 */// if we do getList, the cacheConnection runs on
// if we do getListData, ... we need to register the list that is going to be created
// so that when the data is returned, it updates this
getListData:function(set){set=set||{};var self=this;return this.cacheConnection.getListData(set).then(function(data){// get the list that is going to be made
// it might be possible that this never gets called, but not right now
self._getHydrateList(set,function(list){self.addListReference(list,set);setTimeout(function(){baseConnection.getListData.call(self,set).then(function(listData){self.cacheConnection.updateListData(listData,set);self.updatedList(list,listData,set);self.deleteListReference(list,set);},function(e){// what do we do here?  self.rejectedUpdatedList ?
canLog_1_0_2_canLog.log("REJECTED",e);});},1);});// TODO: if we wired up all responses to updateListData, this one should not
// updateListData with itself.
// But, how would we do a bypass?
return data;},function(){var listData=baseConnection.getListData.call(self,set);listData.then(function(listData){self.cacheConnection.updateListData(listData,set);});return listData;});},/**
		 * @function can-connect/fall-through-cache/fall-through-cache.hydrateInstance hydrateInstance
		 * @parent can-connect/fall-through-cache/fall-through-cache.hydrators
		 *
		 * Returns an instance given raw data.
		 *
		 * @signature `connection.hydrateInstance(props)`
		 *
		 *   Calls the base `hydrateInstance` to create an Instance for `props`.
		 *
		 *   Then, Looks for registered hydrateInstance callbacks for a given [can-connect/base/base.id] and
		 *   calls them.
		 *
		 *   @param {Object} props
		 *   @return {can-connect/Instance}
		 */hydrateInstance:function(props){var id=this.id(props);var instance=baseConnection.hydrateInstance.apply(this,arguments);if(this._getMakeInstanceCallbacks[id]){this._getMakeInstanceCallbacks[id].shift()(instance);if(!this._getMakeInstanceCallbacks[id].length){delete this._getMakeInstanceCallbacks[id];}}return instance;},_getMakeInstanceCallbacks:{},_getMakeInstance:function(id,callback){if(!this._getMakeInstanceCallbacks[id]){this._getMakeInstanceCallbacks[id]=[];}this._getMakeInstanceCallbacks[id].push(callback);},/**
		 * @function can-connect/fall-through-cache/fall-through-cache.getData getData
		 * @parent can-connect/fall-through-cache/fall-through-cache.data
		 *
		 * Get raw data from the cache if available, and then update
		 * the instance later with data from the base connection.
		 *
		 * @signature `connection.getData(params)`
		 *
		 *   Checks the [can-connect/base/base.cacheConnection] for `params`'s data.
		 *
		 *   If the cache connection has data, the cached data is returned. Prior to
		 *   returning the data, the [can-connect/constructor/constructor.hydrateInstance] method
		 *   is intercepted so we can get a handle on the instance that's being created
		 *   for the returned data. Once the intercepted instance is retrieved,
		 *   we use the base connection to get data and update the intercepted instance and
		 *   the cacheConnection.
		 *
		 *   If the cache connection does not have data, the base connection
		 *   is used to load the data and the cached connection is updated with that
		 *   data.
		 *
		 *   @param {Object} params The set to load.
		 *
		 *   @return {Promise<Object>} A promise that returns the
		 *   raw data.
		 */getData:function(params){// first, always check the cache connection
var self=this;return this.cacheConnection.getData(params).then(function(instanceData){// get the list that is going to be made
// it might be possible that this never gets called, but not right now
self._getMakeInstance(self.id(instanceData)||self.id(params),function(instance){self.addInstanceReference(instance);setTimeout(function(){baseConnection.getData.call(self,params).then(function(instanceData2){self.cacheConnection.updateData(instanceData2);self.updatedInstance(instance,instanceData2);self.deleteInstanceReference(instance);},function(e){// what do we do here?  self.rejectedUpdatedList ?
canLog_1_0_2_canLog.log("REJECTED",e);});},1);});return instanceData;},function(){var listData=baseConnection.getData.call(self,params);listData.then(function(instanceData){self.cacheConnection.updateData(instanceData);});return listData;});}};return behavior;});module.exports=fallThroughCache;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var validate$$1=validate;module.exports=validate$$1(fallThroughCache,['hydrateList','hydrateInstance','getListData','getData']);}//!steal-remove-end
});var canStringToAny_1_2_1_canStringToAny=function(str){switch(str){case"NaN":case"Infinity":return +str;case"null":return null;case"undefined":return undefined;case"true":case"false":return str==="true";default:var val=+str;if(!isNaN(val)){return val;}else {return str;}}};function toBoolean(val){if(val==null){return val;}if(val==='false'||val==='0'||!val){return false;}return true;}var maybeBoolean=canReflect_1_19_2_canReflect.assignSymbols(toBoolean,{"can.new":toBoolean,"can.getSchema":function(){return {type:"Or",values:[true,false,undefined,null]};},"can.getName":function(){return "MaybeBoolean";},"can.isMember":function(value){return value==null||typeof value==="boolean";}});function toDate(str){var type=typeof str;if(type==='string'){str=Date.parse(str);return isNaN(str)?null:new Date(str);}else if(type==='number'){return new Date(str);}else {return str;}}function DateStringSet(dateStr){this.setValue=dateStr;var date=toDate(dateStr);this.value=date==null?date:date.getTime();}DateStringSet.prototype.valueOf=function(){return this.value;};canReflect_1_19_2_canReflect.assignSymbols(DateStringSet.prototype,{"can.serialize":function(){return this.setValue;}});var maybeDate=canReflect_1_19_2_canReflect.assignSymbols(toDate,{"can.new":toDate,"can.getSchema":function(){return {type:"Or",values:[Date,undefined,null]};},"can.ComparisonSetType":DateStringSet,"can.getName":function(){return "MaybeDate";},"can.isMember":function(value){return value==null||value instanceof Date;}});function toNumber(val){if(val==null){return val;}return +val;}var maybeNumber=canReflect_1_19_2_canReflect.assignSymbols(toNumber,{"can.new":toNumber,"can.getSchema":function(){return {type:"Or",values:[Number,undefined,null]};},"can.getName":function(){return "MaybeNumber";},"can.isMember":function(value){return value==null||typeof value==="number";}});function toString$2$1(val){if(val==null){return val;}return ''+val;}var maybeString=canReflect_1_19_2_canReflect.assignSymbols(toString$2$1,{"can.new":toString$2$1,"can.getSchema":function(){return {type:"Or",values:[String,undefined,null]};},"can.getName":function(){return "MaybeString";},"can.isMember":function(value){return value==null||typeof value==="string";}});var newSymbol$4=canSymbol_1_7_0_canSymbol.for("can.new"),serializeSymbol$1=canSymbol_1_7_0_canSymbol.for("can.serialize"),inSetupSymbol$6=canSymbol_1_7_0_canSymbol.for("can.initializing");var eventsProto$1,define$1,make$1,makeDefinition$1,getDefinitionsAndMethods$1,getDefinitionOrMethod$1;// UTILITIES
function isDefineType$1(func){return func&&(func.canDefineType===true||func[newSymbol$4]);}var peek$4=canObservationRecorder_1_3_1_canObservationRecorder.ignore(canReflect_1_19_2_canReflect.getValue.bind(canReflect_1_19_2_canReflect));var Object_defineNamedPrototypeProperty$1=Object.defineProperty;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object_defineNamedPrototypeProperty$1=function(obj,prop,definition){if(definition.get){Object.defineProperty(definition.get,"name",{value:"get "+canReflect_1_19_2_canReflect.getName(obj)+"."+prop,writable:true,configurable:true});}if(definition.set){Object.defineProperty(definition.set,"name",{value:"set "+canReflect_1_19_2_canReflect.getName(obj)+"."+prop,configurable:true});}return Object.defineProperty(obj,prop,definition);};}//!steal-remove-end
function defineConfigurableAndNotEnumerable$1(obj,prop,value){Object.defineProperty(obj,prop,{configurable:true,enumerable:false,writable:true,value:value});}function eachPropertyDescriptor$1(map,cb){for(var prop in map){if(map.hasOwnProperty(prop)){cb.call(map,prop,Object.getOwnPropertyDescriptor(map,prop));}}}function getEveryPropertyAndSymbol$1(obj){var props=Object.getOwnPropertyNames(obj);var symbols="getOwnPropertySymbols"in Object?Object.getOwnPropertySymbols(obj):[];return props.concat(symbols);}function cleanUpDefinition(prop,definition,shouldWarn,typePrototype){// cleanup `value` -> `default`
if(definition.value!==undefined&&(typeof definition.value!=="function"||definition.value.length===0)){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(shouldWarn){dev.warn("can-define: Change the 'value' definition for "+canReflect_1_19_2_canReflect.getName(typePrototype)+"."+prop+" to 'default'.");}}//!steal-remove-end
definition.default=definition.value;delete definition.value;}// cleanup `Value` -> `DEFAULT`
if(definition.Value!==undefined){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(shouldWarn){dev.warn("can-define: Change the 'Value' definition for "+canReflect_1_19_2_canReflect.getName(typePrototype)+"."+prop+" to 'Default'.");}}//!steal-remove-end
definition.Default=definition.Value;delete definition.Value;}}function isValueResolver(definition){// there's a function and it has one argument
return typeof definition.value==="function"&&definition.value.length;}var canDefine_2_8_1_canDefine=define$1=canNamespace_1_0_0_canNamespace.define=function(typePrototype,defines,baseDefine){// default property definitions on _data
var prop,dataInitializers=Object.create(baseDefine?baseDefine.dataInitializers:null),// computed property definitions on _computed
computedInitializers=Object.create(baseDefine?baseDefine.computedInitializers:null);var result=getDefinitionsAndMethods$1(defines,baseDefine,typePrototype);result.dataInitializers=dataInitializers;result.computedInitializers=computedInitializers;// Goes through each property definition and creates
// a `getter` and `setter` function for `Object.defineProperty`.
canReflect_1_19_2_canReflect.eachKey(result.definitions,function(definition,property){define$1.property(typePrototype,property,definition,dataInitializers,computedInitializers,result.defaultDefinition);});// Places a `_data` on the prototype that when first called replaces itself
// with a `_data` object local to the instance.  It also defines getters
// for any value that has a default value.
if(typePrototype.hasOwnProperty("_data")){for(prop in dataInitializers){canDefineLazyValue_1_1_1_defineLazyValue(typePrototype._data,prop,dataInitializers[prop].bind(typePrototype),true);}}else {canDefineLazyValue_1_1_1_defineLazyValue(typePrototype,"_data",function(){var map=this;var data={};for(var prop in dataInitializers){canDefineLazyValue_1_1_1_defineLazyValue(data,prop,dataInitializers[prop].bind(map),true);}return data;});}// Places a `_computed` on the prototype that when first called replaces itself
// with a `_computed` object local to the instance.  It also defines getters
// that will create the property's compute when read.
if(typePrototype.hasOwnProperty("_computed")){for(prop in computedInitializers){canDefineLazyValue_1_1_1_defineLazyValue(typePrototype._computed,prop,computedInitializers[prop].bind(typePrototype));}}else {canDefineLazyValue_1_1_1_defineLazyValue(typePrototype,"_computed",function(){var map=this;var data=Object.create(null);for(var prop in computedInitializers){canDefineLazyValue_1_1_1_defineLazyValue(data,prop,computedInitializers[prop].bind(map));}return data;});}// Add necessary event methods to this object.
getEveryPropertyAndSymbol$1(eventsProto$1).forEach(function(prop){Object.defineProperty(typePrototype,prop,{enumerable:false,value:eventsProto$1[prop],configurable:true,writable:true});});// also add any symbols
// add so instance defs can be dynamically added
Object.defineProperty(typePrototype,"_define",{enumerable:false,value:result,configurable:true,writable:true});// Places Symbol.iterator or @@iterator on the prototype
// so that this can be iterated with for/of and canReflect.eachIndex
var iteratorSymbol=canSymbol_1_7_0_canSymbol.iterator||canSymbol_1_7_0_canSymbol.for("iterator");if(!typePrototype[iteratorSymbol]){defineConfigurableAndNotEnumerable$1(typePrototype,iteratorSymbol,function(){return new define$1.Iterator(this);});}return result;};var onlyType$1=function(obj){for(var prop in obj){if(prop!=="type"){return false;}}return true;};define$1.extensions=function(){};// typePrototype - the prototype of the type we are defining `prop` on.
// `definition` - the user provided definition
define$1.property=function(typePrototype,prop,definition,dataInitializers,computedInitializers,defaultDefinition){var propertyDefinition=define$1.extensions.apply(this,arguments);if(propertyDefinition){definition=makeDefinition$1(prop,propertyDefinition,defaultDefinition||{},typePrototype);}var type=definition.type;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var hasZeroArgGetter=definition.get&&definition.get.length===0;var noSetter=!definition.set;var defaultInDefinition="default"in definition||"Default"in definition;var typeInDefinition=definition.type&&defaultDefinition&&definition.type!==defaultDefinition.type||definition.Type&&defaultDefinition&&definition.Type!==defaultDefinition.Type;if(hasZeroArgGetter&&noSetter&&defaultInDefinition){var defaultOrDefault="default"in definition?"default":"Default";dev.warn("can-define: "+defaultOrDefault+" value for property "+canReflect_1_19_2_canReflect.getName(typePrototype)+"."+prop+" ignored, as its definition has a zero-argument getter");}if(hasZeroArgGetter&&noSetter&&typeInDefinition){var typeOrType=definition.type?"type":"Type";dev.warn("can-define: "+typeOrType+" value for property "+canReflect_1_19_2_canReflect.getName(typePrototype)+"."+prop+" ignored, as its definition has a zero-argument getter");}if(type&&canReflect_1_19_2_canReflect.isConstructorLike(type)&&!isDefineType$1(type)){dev.warn("can-define: the definition for "+canReflect_1_19_2_canReflect.getName(typePrototype)+"."+prop+" uses a constructor for \"type\". Did you mean \"Type\"?");}}//!steal-remove-end
// Special case definitions that have only `type: "*"`.
if(type&&onlyType$1(definition)&&type===define$1.types["*"]){Object_defineNamedPrototypeProperty$1(typePrototype,prop,{get:make$1.get.data(prop),set:make$1.set.events(prop,make$1.get.data(prop),make$1.set.data(prop),make$1.eventType.data(prop)),enumerable:true,configurable:true});return;}definition.type=type;// Where the value is stored.  If there is a `get` the source of the value
// will be a compute in `this._computed[prop]`.  If not, the source of the
// value will be in `this._data[prop]`.
var dataProperty=definition.get||isValueResolver(definition)?"computed":"data",// simple functions that all read/get/set to the right place.
// - reader - reads the value but does not observe.
// - getter - reads the value and notifies observers.
// - setter - sets the value.
reader=make$1.read[dataProperty](prop),getter=make$1.get[dataProperty](prop),setter=make$1.set[dataProperty](prop),getInitialValue;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){if(definition.get){Object.defineProperty(definition.get,"name",{value:canReflect_1_19_2_canReflect.getName(typePrototype)+"'s "+prop+" getter",configurable:true});}if(definition.set){Object.defineProperty(definition.set,"name",{value:canReflect_1_19_2_canReflect.getName(typePrototype)+"'s "+prop+" setter",configurable:true});}if(isValueResolver(definition)){Object.defineProperty(definition.value,"name",{value:canReflect_1_19_2_canReflect.getName(typePrototype)+"'s "+prop+" value",configurable:true});}}//!steal-remove-end
// Determine the type converter
var typeConvert=function(val){return val;};if(definition.Type){typeConvert=make$1.set.Type(prop,definition.Type,typeConvert);}if(type){typeConvert=make$1.set.type(prop,type,typeConvert);}// make a setter that's going to fire of events
var eventsSetter=make$1.set.events(prop,reader,setter,make$1.eventType[dataProperty](prop));if(isValueResolver(definition)){computedInitializers[prop]=make$1.valueResolver(prop,definition,typeConvert);}// Determine a function that will provide the initial property value.
else if(definition.default!==undefined||definition.Default!==undefined){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){// If value is an object or array, give a warning
if(definition.default!==null&&typeof definition.default==='object'){dev.warn("can-define: The default value for "+canReflect_1_19_2_canReflect.getName(typePrototype)+"."+prop+" is set to an object. This will be shared by all instances of the DefineMap. Use a function that returns the object instead.");}// If value is a constructor, give a warning
if(definition.default&&canReflect_1_19_2_canReflect.isConstructorLike(definition.default)){dev.warn("can-define: The \"default\" for "+canReflect_1_19_2_canReflect.getName(typePrototype)+"."+prop+" is set to a constructor. Did you mean \"Default\" instead?");}}//!steal-remove-end
getInitialValue=canObservationRecorder_1_3_1_canObservationRecorder.ignore(make$1.get.defaultValue(prop,definition,typeConvert,eventsSetter));}// If property has a getter, create the compute that stores its data.
if(definition.get){computedInitializers[prop]=make$1.compute(prop,definition.get,getInitialValue);}// If the property isn't a getter, but has an initial value, setup a
// default value on `this._data[prop]`.
else if(getInitialValue){dataInitializers[prop]=getInitialValue;}// Define setter behavior.
// If there's a `get` and `set`, make the setter get the `lastSetValue` on the
// `get`'s compute.
if(definition.get&&definition.set){// the compute will set off events, so we can use the basic setter
setter=make$1.set.setter(prop,definition.set,make$1.read.lastSet(prop),setter,true);// If there's zero-arg `get`, warn on all sets in dev mode
if(definition.get.length===0){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){dev.warn("can-define: Set value for property "+canReflect_1_19_2_canReflect.getName(typePrototype)+"."+prop+" ignored, as its definition has a zero-argument getter");}//!steal-remove-end
}}// If there's a `set` and no `get`,
else if(definition.set){// Add `set` functionality to the eventSetter.
setter=make$1.set.setter(prop,definition.set,reader,eventsSetter,false);}// If there's neither `set` or `get` or `value` (resolver)
else if(dataProperty==="data"){// make a set that produces events.
setter=eventsSetter;}// If there's zero-arg `get` but not `set`, warn on all sets in dev mode
else if(definition.get&&definition.get.length<1){setter=function(){//!steal-remove-start
if(process.env.NODE_ENV!=='production'){dev.warn("can-define: Set value for property "+canReflect_1_19_2_canReflect.getName(typePrototype)+"."+prop+" ignored, as its definition has a zero-argument getter and no setter");}//!steal-remove-end
};}// Add type behavior to the setter.
if(type){setter=make$1.set.type(prop,type,setter);}if(definition.Type){setter=make$1.set.Type(prop,definition.Type,setter);}// Define the property.
Object_defineNamedPrototypeProperty$1(typePrototype,prop,{get:getter,set:setter,enumerable:"serialize"in definition?!!definition.serialize:!definition.get,configurable:true});};define$1.makeDefineInstanceKey=function(constructor){constructor[canSymbol_1_7_0_canSymbol.for("can.defineInstanceKey")]=function(property,value){var defineResult=this.prototype._define;if(typeof value==="object"){// change `value` to default.
cleanUpDefinition(property,value,false,this);}var definition=getDefinitionOrMethod$1(property,value,defineResult.defaultDefinition,this);if(definition&&typeof definition==="object"){define$1.property(constructor.prototype,property,definition,defineResult.dataInitializers,defineResult.computedInitializers,defineResult.defaultDefinition);defineResult.definitions[property]=definition;}else {defineResult.methods[property]=definition;}this.prototype.dispatch({action:"can.keys",type:"can.keys",// TODO: Remove in 6.0
target:this.prototype});};};// Makes a simple constructor function.
define$1.Constructor=function(defines,sealed){var constructor=function DefineConstructor(props){Object.defineProperty(this,inSetupSymbol$6,{configurable:true,enumerable:false,value:true,writable:true});define$1.setup.call(this,props,sealed);this[inSetupSymbol$6]=false;};var result=define$1(constructor.prototype,defines);type$1(constructor);define$1.makeDefineInstanceKey(constructor,result);return constructor;};// A bunch of helper functions that are used to create various behaviors.
make$1={computeObj:function(map,prop,observable){var computeObj={oldValue:undefined,compute:observable,count:0,handler:function(newVal){var oldValue=computeObj.oldValue;computeObj.oldValue=newVal;map.dispatch({action:"set",key:"prop",target:map,value:newVal,oldValue:oldValue,type:prop// TODO: Remove in 6.0
},[newVal,oldValue]);}};return computeObj;},valueResolver:function(prop,definition,typeConvert){var getDefault=make$1.get.defaultValue(prop,definition,typeConvert);return function(){var map=this;var defaultValue=getDefault.call(this);var computeObj=make$1.computeObj(map,prop,new resolver(definition.value,map,defaultValue));//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(computeObj.handler,"name",{value:canReflect_1_19_2_canReflect.getName(definition.value).replace('value','event emitter')});}//!steal-remove-end
return computeObj;};},// Returns a function that creates the `_computed` prop.
compute:function(prop,get,defaultValueFn){return function(){var map=this,defaultValue=defaultValueFn&&defaultValueFn.call(this),observable,computeObj;if(get.length===0){observable=new canObservation_4_2_0_canObservation(get,map);}else if(get.length===1){observable=new settable(get,map,defaultValue);}else {observable=new async(get,map,defaultValue);}computeObj=make$1.computeObj(map,prop,observable);//!steal-remove-start
if(process.env.NODE_ENV!=='production'){Object.defineProperty(computeObj.handler,"name",{value:canReflect_1_19_2_canReflect.getName(get).replace('getter','event emitter')});}//!steal-remove-end
return computeObj;};},// Set related helpers.
set:{data:function(prop){return function(newVal){this._data[prop]=newVal;};},computed:function(prop){return function(val){canReflect_1_19_2_canReflect.setValue(this._computed[prop].compute,val);};},events:function(prop,getCurrent,setData,eventType){return function(newVal){if(this[inSetupSymbol$6]){setData.call(this,newVal);}else {var current=getCurrent.call(this);if(newVal===current){return;}var dispatched;setData.call(this,newVal);dispatched={patches:[{type:"set",key:prop,value:newVal}],target:this,action:"set",value:newVal,oldValue:current,key:prop,type:prop// TODO: Remove in 6.0
};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){var lastItem,lastFn;dispatched.reasonLog=[canReflect_1_19_2_canReflect.getName(this)+"'s",prop,"changed to",newVal,"from",current];// If there are observations currently recording, this isn't a good time to
//   mutate values: it's likely a cycle, and even if it doesn't cycle infinitely,
//   it will likely cause unnecessary recomputation of derived values.  Warn the user.
if(canObservationRecorder_1_3_1_canObservationRecorder.isRecording()&&canQueues_1_3_2_canQueues.stack().length&&!this[inSetupSymbol$6]){lastItem=canQueues_1_3_2_canQueues.stack()[canQueues_1_3_2_canQueues.stack().length-1];lastFn=lastItem.context instanceof canObservation_4_2_0_canObservation?lastItem.context.func:lastItem.fn;var mutationWarning="can-define: The "+prop+" property on "+canReflect_1_19_2_canReflect.getName(this)+" is being set in "+(canReflect_1_19_2_canReflect.getName(lastFn)||canReflect_1_19_2_canReflect.getName(lastItem.fn))+". This can cause infinite loops and performance issues. "+"Use the value() behavior for "+prop+" instead, and listen to other properties and observables with listenTo(). https://canjs.com/doc/can-define.types.value.html";dev.warn(mutationWarning);canQueues_1_3_2_canQueues.logStack();}}//!steal-remove-end
this.dispatch(dispatched,[newVal,current]);}};},setter:function(prop,setter,getCurrent,setEvents,hasGetter){return function(value){//!steal-remove-start
var asyncTimer;//!steal-remove-end
var self=this;// call the setter, if returned value is undefined,
// this means the setter is async so we
// do not call update property and return right away
canQueues_1_3_2_canQueues.batch.start();var setterCalled=false,current=getCurrent.call(this),setValue=setter.call(this,value,function(value){setEvents.call(self,value);setterCalled=true;//!steal-remove-start
if(process.env.NODE_ENV!=='production'){clearTimeout(asyncTimer);}//!steal-remove-end
},current);if(setterCalled){canQueues_1_3_2_canQueues.batch.stop();}else {if(hasGetter){// we got a return value
if(setValue!==undefined){// if the current `set` value is returned, don't set
// because current might be the `lastSetVal` of the internal compute.
if(current!==setValue){setEvents.call(this,setValue);}canQueues_1_3_2_canQueues.batch.stop();}// this is a side effect, it didn't take a value
// so use the original set value
else if(setter.length===0){setEvents.call(this,value);canQueues_1_3_2_canQueues.batch.stop();return;}// it took a value
else if(setter.length===1){// if we have a getter, and undefined was returned,
// we should assume this is setting the getters properties
// and we shouldn't do anything.
canQueues_1_3_2_canQueues.batch.stop();}// we are expecting something
else {//!steal-remove-start
if(process.env.NODE_ENV!=='production'){asyncTimer=setTimeout(function(){dev.warn('can-define: Setter "'+canReflect_1_19_2_canReflect.getName(self)+"."+prop+'" did not return a value or call the setter callback.');},dev.warnTimeout);}//!steal-remove-end
canQueues_1_3_2_canQueues.batch.stop();return;}}else {// we got a return value
if(setValue!==undefined){// if the current `set` value is returned, don't set
// because current might be the `lastSetVal` of the internal compute.
setEvents.call(this,setValue);canQueues_1_3_2_canQueues.batch.stop();}// this is a side effect, it didn't take a value
// so use the original set value
else if(setter.length===0){setEvents.call(this,value);canQueues_1_3_2_canQueues.batch.stop();return;}// it took a value
else if(setter.length===1){// if we don't have a getter, we should probably be setting the
// value to undefined
setEvents.call(this,undefined);canQueues_1_3_2_canQueues.batch.stop();}// we are expecting something
else {//!steal-remove-start
if(process.env.NODE_ENV!=='production'){asyncTimer=setTimeout(function(){dev.warn('can/map/setter.js: Setter "'+canReflect_1_19_2_canReflect.getName(self)+"."+prop+'" did not return a value or call the setter callback.');},dev.warnTimeout);}//!steal-remove-end
canQueues_1_3_2_canQueues.batch.stop();return;}}}};},type:function(prop,type,set){function setter(newValue){return set.call(this,type.call(this,newValue,prop));}if(isDefineType$1(type)){// TODO: remove this `canDefineType` check in a future release.
if(type.canDefineType){return setter;}else {return function setter(newValue){return set.call(this,canReflect_1_19_2_canReflect.convert(newValue,type));};}}// If type is a nested object: `type: {foo: "string", bar: "number"}`
if(typeof type==="object"){return make$1.set.Type(prop,type,set);}else {return setter;}},Type:function(prop,Type,set){// `type`: {foo: "string"}
if(Array.isArray(Type)&&define$1.DefineList){Type=define$1.DefineList.extend({"#":Type[0]});}else if(typeof Type==="object"){if(define$1.DefineMap){Type=define$1.DefineMap.extend(Type);}else {Type=define$1.Constructor(Type);}}return function(newValue){if(newValue instanceof Type||newValue==null){return set.call(this,newValue);}else {return set.call(this,new Type(newValue));}};}},// Helpes that indicate what the event type should be.  These probably aren't needed.
eventType:{data:function(prop){return function(newVal,oldVal){return oldVal!==undefined||this._data.hasOwnProperty(prop)?"set":"add";};},computed:function(){return function(){return "set";};}},// Helpers that read the data in a non-observable way.
read:{data:function(prop){return function(){return this._data[prop];};},computed:function(prop){// might want to protect this
return function(){return canReflect_1_19_2_canReflect.getValue(this._computed[prop].compute);};},lastSet:function(prop){return function(){var observable=this._computed[prop].compute;if(observable.lastSetValue){return canReflect_1_19_2_canReflect.getValue(observable.lastSetValue);}};}},// Helpers that read the data in an observable way.
get:{// uses the default value
defaultValue:function(prop,definition,typeConvert,callSetter){return function(){var value=definition.default;if(value!==undefined){if(typeof value==="function"){value=value.call(this);}value=typeConvert.call(this,value);}else {var Default=definition.Default;if(Default){value=typeConvert.call(this,new Default());}}if(definition.set){// TODO: there's almost certainly a faster way of making this happen
// But this is maintainable.
var VALUE;var sync=true;var setter=make$1.set.setter(prop,definition.set,function(){},function(value){if(sync){VALUE=value;}else {callSetter.call(this,value);}},definition.get);setter.call(this,value);sync=false;// VALUE will be undefined if the callback is never called.
return VALUE;}return value;};},data:function(prop){return function(){if(!this[inSetupSymbol$6]){canObservationRecorder_1_3_1_canObservationRecorder.add(this,prop);}return this._data[prop];};},computed:function(prop){return function(val){var compute=this._computed[prop].compute;if(canObservationRecorder_1_3_1_canObservationRecorder.isRecording()){canObservationRecorder_1_3_1_canObservationRecorder.add(this,prop);if(!canReflect_1_19_2_canReflect.isBound(compute)){canObservation_4_2_0_canObservation.temporarilyBind(compute);}}return peek$4(compute);};}}};define$1.behaviors=["get","set","value","Value","type","Type","serialize"];// This cleans up a particular behavior and adds it to the definition
var addBehaviorToDefinition$1=function(definition,behavior,value){if(behavior==="enumerable"){// treat enumerable like serialize
definition.serialize=!!value;}else if(behavior==="type"){var behaviorDef=value;if(typeof behaviorDef==="string"){behaviorDef=define$1.types[behaviorDef];if(typeof behaviorDef==="object"&&!isDefineType$1(behaviorDef)){canAssign_1_3_3_canAssign(definition,behaviorDef);behaviorDef=behaviorDef[behavior];}}if(typeof behaviorDef!=='undefined'){definition[behavior]=behaviorDef;}}else {definition[behavior]=value;}};// This is called by `define.property` AND `getDefinitionOrMethod` (which is called by `define`)
// Currently, this is adding default behavior
// copying `type` over, and even cleaning up the final definition object
makeDefinition$1=function(prop,def,defaultDefinition,typePrototype){var definition={};canReflect_1_19_2_canReflect.eachKey(def,function(value,behavior){addBehaviorToDefinition$1(definition,behavior,value);});// only add default if it doesn't exist
canReflect_1_19_2_canReflect.eachKey(defaultDefinition,function(value,prop){if(definition[prop]===undefined){if(prop!=="type"&&prop!=="Type"){definition[prop]=value;}}});// normalize Type that implements can.new
if(def.Type){var value=def.Type;var serialize=value[serializeSymbol$1];if(serialize){definition.serialize=function(val){return serialize.call(val);};}if(value[newSymbol$4]){definition.type=value;delete definition.Type;}}// We only want to add a defaultDefinition if def.type is not a string
// if def.type is a string it is handled in addDefinition
if(typeof def.type!=='string'){// if there's no type definition, take it from the defaultDefinition
if(!definition.type&&!definition.Type){var defaultsCopy=canReflect_1_19_2_canReflect.assignMap({},defaultDefinition);definition=canReflect_1_19_2_canReflect.assignMap(defaultsCopy,definition);}if(canReflect_1_19_2_canReflect.size(definition)===0){definition.type=define$1.types["*"];}}cleanUpDefinition(prop,definition,true,typePrototype);return definition;};// called by `can.defineInstanceKey` and `getDefinitionsAndMethods`
// returns the value or the definition object.
// calls makeDefinition
// This is dealing with a string value
getDefinitionOrMethod$1=function(prop,value,defaultDefinition,typePrototype){// Clean up the value to make it a definition-like object
var definition;if(typeof value==="string"){definition={type:value};}// copies a `Type`'s methods over
else if(value&&(value[serializeSymbol$1]||value[newSymbol$4])){definition={Type:value};}else if(typeof value==="function"){if(canReflect_1_19_2_canReflect.isConstructorLike(value)){definition={Type:value};}// or leaves as a function
}else if(Array.isArray(value)){definition={Type:value};}else if(canReflect_1_19_2_canReflect.isPlainObject(value)){definition=value;}if(definition){return makeDefinition$1(prop,definition,defaultDefinition,typePrototype);}else {return value;}};// called by can.define
getDefinitionsAndMethods$1=function(defines,baseDefines,typePrototype){// make it so the definitions include base definitions on the proto
var definitions=Object.create(baseDefines?baseDefines.definitions:null);var methods={};// first lets get a default if it exists
var defaults=defines["*"],defaultDefinition;if(defaults){delete defines["*"];defaultDefinition=getDefinitionOrMethod$1("*",defaults,{});}else {defaultDefinition=Object.create(null);}eachPropertyDescriptor$1(defines,function(prop,propertyDescriptor){var value;if(propertyDescriptor.get||propertyDescriptor.set){value={get:propertyDescriptor.get,set:propertyDescriptor.set};}else {value=propertyDescriptor.value;}if(prop==="constructor"){methods[prop]=value;return;}else {var result=getDefinitionOrMethod$1(prop,value,defaultDefinition,typePrototype);if(result&&typeof result==="object"&&canReflect_1_19_2_canReflect.size(result)>0){definitions[prop]=result;}else {// Removed adding raw values that are not functions
if(typeof result==='function'){methods[prop]=result;}//!steal-remove-start
else if(typeof result!=='undefined'){if(process.env.NODE_ENV!=='production'){// Ex: {prop: 0}
dev.error(canReflect_1_19_2_canReflect.getName(typePrototype)+"."+prop+" does not match a supported propDefinition. See: https://canjs.com/doc/can-define.types.propDefinition.html");}}//!steal-remove-end
}}});if(defaults){// we should move this property off the prototype.
defineConfigurableAndNotEnumerable$1(defines,"*",defaults);}return {definitions:definitions,methods:methods,defaultDefinition:defaultDefinition};};eventsProto$1=map$1({});function setupComputed$1(instance,eventName){var computedBinding=instance._computed&&instance._computed[eventName];if(computedBinding&&computedBinding.compute){if(!computedBinding.count){computedBinding.count=1;canReflect_1_19_2_canReflect.onValue(computedBinding.compute,computedBinding.handler,"notify");computedBinding.oldValue=peek$4(computedBinding.compute);}else {computedBinding.count++;}}}function teardownComputed$1(instance,eventName){var computedBinding=instance._computed&&instance._computed[eventName];if(computedBinding){if(computedBinding.count===1){computedBinding.count=0;canReflect_1_19_2_canReflect.offValue(computedBinding.compute,computedBinding.handler,"notify");}else {computedBinding.count--;}}}var canMetaSymbol$1=canSymbol_1_7_0_canSymbol.for("can.meta");canAssign_1_3_3_canAssign(eventsProto$1,{_eventSetup:function(){},_eventTeardown:function(){},addEventListener:function(eventName,handler,queue){setupComputed$1(this,eventName);return map$1.addEventListener.apply(this,arguments);},// ### unbind
// Stops listening to an event.
// If this is the last listener of a computed property,
// stop forwarding events of the computed property to this map.
removeEventListener:function(eventName,handler){teardownComputed$1(this,eventName);return map$1.removeEventListener.apply(this,arguments);}});eventsProto$1.on=eventsProto$1.bind=eventsProto$1.addEventListener;eventsProto$1.off=eventsProto$1.unbind=eventsProto$1.removeEventListener;var onKeyValueSymbol$6=canSymbol_1_7_0_canSymbol.for("can.onKeyValue");var offKeyValueSymbol$4=canSymbol_1_7_0_canSymbol.for("can.offKeyValue");canReflect_1_19_2_canReflect.assignSymbols(eventsProto$1,{"can.onKeyValue":function(key){setupComputed$1(this,key);return map$1[onKeyValueSymbol$6].apply(this,arguments);},"can.offKeyValue":function(key){teardownComputed$1(this,key);return map$1[offKeyValueSymbol$4].apply(this,arguments);}});delete eventsProto$1.one;define$1.setup=function(props,sealed){Object.defineProperty(this,"constructor",{value:this.constructor,enumerable:false,writable:false});Object.defineProperty(this,canMetaSymbol$1,{value:Object.create(null),enumerable:false,writable:false});/* jshint -W030 */var definitions=this._define.definitions;var instanceDefinitions=Object.create(null);var map=this;canReflect_1_19_2_canReflect.eachKey(props,function(value,prop){if(definitions[prop]!==undefined){map[prop]=value;}else {define$1.expando(map,prop,value);}});if(canReflect_1_19_2_canReflect.size(instanceDefinitions)>0){defineConfigurableAndNotEnumerable$1(this,"_instanceDefinitions",instanceDefinitions);}// only seal in dev mode for performance reasons.
//!steal-remove-start
if(process.env.NODE_ENV!=='production'){this._data;this._computed;if(sealed!==false){Object.seal(this);}}//!steal-remove-end
};var returnFirstArg$1=function(arg){return arg;};define$1.expando=function(map,prop,value){if(define$1._specialKeys[prop]){// ignores _data and _computed
return true;}// first check if it's already a constructor define
var constructorDefines=map._define.definitions;if(constructorDefines&&constructorDefines[prop]){return;}// next if it's already on this instances
var instanceDefines=map._instanceDefinitions;if(!instanceDefines){if(Object.isSealed(map)){return;}Object.defineProperty(map,"_instanceDefinitions",{configurable:true,enumerable:false,writable:true,value:{}});instanceDefines=map._instanceDefinitions;}if(!instanceDefines[prop]){var defaultDefinition=map._define.defaultDefinition||{type:define$1.types.observable};define$1.property(map,prop,defaultDefinition,{},{});// possibly convert value to List or DefineMap
if(defaultDefinition.type){map._data[prop]=define$1.make.set.type(prop,defaultDefinition.type,returnFirstArg$1).call(map,value);}else if(defaultDefinition.Type&&canReflect_1_19_2_canReflect.isConstructorLike(defaultDefinition.Type)){map._data[prop]=define$1.make.set.Type(prop,defaultDefinition.Type,returnFirstArg$1).call(map,value);}else {map._data[prop]=define$1.types.observable(value);}instanceDefines[prop]=defaultDefinition;if(!map[inSetupSymbol$6]){canQueues_1_3_2_canQueues.batch.start();map.dispatch({action:"can.keys",target:map,type:"can.keys"// TODO: Remove in 6.0
});if(Object.prototype.hasOwnProperty.call(map._data,prop)){map.dispatch({action:"add",target:map,value:map._data[prop],oldValue:undefined,key:prop,type:prop,// TODO: Remove in 6.0
patches:[{type:"add",key:prop,value:map._data[prop]}]},[map._data[prop],undefined]);}else {map.dispatch({type:"set",target:map,patches:[{type:"add",key:prop,value:map._data[prop]}]},[map._data[prop],undefined]);}canQueues_1_3_2_canQueues.batch.stop();}return true;}};define$1.replaceWith=canDefineLazyValue_1_1_1_defineLazyValue;define$1.eventsProto=eventsProto$1;define$1.defineConfigurableAndNotEnumerable=defineConfigurableAndNotEnumerable$1;define$1.make=make$1;define$1.getDefinitionOrMethod=getDefinitionOrMethod$1;define$1._specialKeys={_data:true,_computed:true};var simpleGetterSetters$1={};define$1.makeSimpleGetterSetter=function(prop){if(simpleGetterSetters$1[prop]===undefined){var setter=make$1.set.events(prop,make$1.get.data(prop),make$1.set.data(prop),make$1.eventType.data(prop));simpleGetterSetters$1[prop]={get:make$1.get.data(prop),set:function(newVal){return setter.call(this,define$1.types.observable(newVal));},enumerable:true,configurable:true};}return simpleGetterSetters$1[prop];};define$1.Iterator=function(obj){this.obj=obj;this.definitions=Object.keys(obj._define.definitions);this.instanceDefinitions=obj._instanceDefinitions?Object.keys(obj._instanceDefinitions):Object.keys(obj);this.hasGet=typeof obj.get==="function";};define$1.Iterator.prototype.next=function(){var key;if(this.definitions.length){key=this.definitions.shift();// Getters should not be enumerable
var def=this.obj._define.definitions[key];if(def.get){return this.next();}}else if(this.instanceDefinitions.length){key=this.instanceDefinitions.shift();}else {return {value:undefined,done:true};}return {value:[key,this.hasGet?this.obj.get(key):this.obj[key]],done:false};};function isObservableValue(obj){return canReflect_1_19_2_canReflect.isValueLike(obj)&&canReflect_1_19_2_canReflect.isObservableLike(obj);}define$1.types={// To be made into a type ... this is both lazy {time: '123-456'}
'date':maybeDate,'number':maybeNumber,'boolean':maybeBoolean,'observable':function(newVal){if(Array.isArray(newVal)&&define$1.DefineList){newVal=new define$1.DefineList(newVal);}else if(canReflect_1_19_2_canReflect.isPlainObject(newVal)&&define$1.DefineMap){newVal=new define$1.DefineMap(newVal);}return newVal;},'stringOrObservable':function(newVal){if(Array.isArray(newVal)){return new define$1.DefaultList(newVal);}else if(canReflect_1_19_2_canReflect.isPlainObject(newVal)){return new define$1.DefaultMap(newVal);}else {return canReflect_1_19_2_canReflect.convert(newVal,define$1.types.string);}},/**
	 * Implements HTML-style boolean logic for attribute strings, where
	 * any string, including "", is truthy.
	 */'htmlbool':function(val){if(val===''){return true;}return !!canStringToAny_1_2_1_canStringToAny(val);},'*':function(val){return val;},'any':function(val){return val;},'string':maybeString,'compute':{set:function(newValue,setVal,setErr,oldValue){if(isObservableValue(newValue)){return newValue;}if(isObservableValue(oldValue)){canReflect_1_19_2_canReflect.setValue(oldValue,newValue);return oldValue;}return newValue;},get:function(value){return isObservableValue(value)?canReflect_1_19_2_canReflect.getValue(value):value;}}};define$1.updateSchemaKeys=function(schema,definitions){for(var prop in definitions){var definition=definitions[prop];if(definition.serialize!==false){if(definition.Type){schema.keys[prop]=definition.Type;}else if(definition.type){schema.keys[prop]=definition.type;}else {schema.keys[prop]=function(val){return val;};}// some unknown type
if(definitions[prop].identity===true){schema.identity.push(prop);}}}return schema;};/**
 * @module {connect.Behavior} can-connect/can/ref/ref can/ref
 * @parent can-connect.behaviors
 * @group can-connect/can/ref/ref.hydrators hydrators
 * @group can-connect/can/ref/ref.methods methods
 *
 * @description Handle references to instances in the data returned by the server. Allows several means of
 * loading referenced instances, determined on-the-fly.
 *
 * @signature `canRef( baseConnection )`
 *
 * Adds a reference type to [can-connect/can/map/map._Map `connection.Map`] that loads the related type or holds onto
 * an existing one. This handles circular references and loads relevant data as needed. The reference type can be loaded
 * by:
 * - it's data being included in the response for the referencing instance
 * - having an existing instance available in the [can-connect/constructor/store/store.instanceStore]
 * - lazy loading via the connection for the reference type
 *
 * @param {{}} baseConnection `can-connect` connection object that is having the `can/ref` behavior added on to it.
 * Expects the [can-connect/can/map/map] behavior to already be added to this base connection. If the `connect` helper
 * is used to build the connection, the behaviors will automatically be ordered as required.
 *
 * @return {{}} a connection with the [can-connect/can/map/map._Map `Map`] having the reference type property
 * (`Map.Ref.type`) created by `can/ref`.
 *
 * @body
 *
 * ## Use
 *
 * `can/ref` is useful when the server might return either a reference to
 * a value or the value itself.  For example, in a MongoDB setup,
 * a request like `GET /game/5` might return:
 *
 * ```
 * {
 *   id: 5,
 *   teamRef: 7,
 *   score: 21
 * }
 * ```
 *
 * But a request like `GET /game/5?$populate=teamRef` might return:
 *
 * ```
 * {
 *   id: 5,
 *   teamRef: {id: 7, name: "Cubs"},
 *   score: 21
 * }
 * ```
 *
 * `can/ref` can handle this ambiguity and even make lazy loading possible.
 *
 * To use `can/ref`, first create a Map and a connection for the referenced type:
 *
 * ```
 * var Team = DefineMap.extend({
 *   id: 'string'
 * });
 *
 * connect([
 *   require("can-connect/constructor/constructor"),
 *   require("can-connect/constructor/store/store"),
 *   require("can-connect/can/map/map"),
 *   require("can-connect/can/ref/ref")
 * ],{
 *     Map: Team,
 *     List: Team.List,
 *     ...
 * })
 * ```
 *
 * The connection is necessary because it creates an instance store which will
 * hold instances of `Team` that the `Team.Ref` type will be able to access.
 *
 * Now we can create a reference to the Team within a Game map and the Game's connection:
 *
 * ```
 * var Game = DefineMap.extend({
 *   id: 'string',
 *   teamRef: {type: Team.Ref.type},
 *   score: "number"
 * });
 *
 * superMap({
 *   Map: Game,
 *   List: Game.List
 * })
 * ```
 *
 * Now, `teamRef` is a [can-connect/can/ref/ref.Map.Ref] type, which will
 * house the id of the reference no matter how the server returns data, e.g.
 * `game.teamRef.id`.
 *
 * For example, without populating the team data:
 *
 * ```
 * Game.get({id: 5}).then(function(game){
 *   game.teamRef.id //-> 7
 * });
 * ```
 *
 * With populating the team data:
 *
 * ```
 * Game.get({id: 5, $populate: "teamRef"}).then(function(game){
 *   game.teamRef.id //-> 7
 * });
 * ```
 *
 * The values of other properties and methods on the [can-connect/can/ref/ref.Map.Ref] type
 * are determined by if the reference was populated or the referenced item already exists
 * in the [can-connect/constructor/store/store.instanceStore].
 *
 * For example, `value`, which points to the referenced instance, will be populated if the reference was populated:
 *
 * ```
 * Game.get({id: 5, $populate: "teamRef"}).then(function(game){
 *   game.teamRef.value.name //-> 5
 * });
 * ```
 *
 * Or, it will be populated if that instance had been loaded through another means and
 * it’s in the instance store:
 *
 * ```
 * Team.get({id: 7}).then(function(team){
 *   // binding adds things to the store
 *   team.on("name", function(){})
 * }).then(function(){
 *   Game.get({id: 5}).then(function(game){
 *     game.teamRef.value.name //-> 5
 *   });
 * })
 * ```
 *
 * `value` is an [can-define.types.get asynchronous getter], which means that even if
 * the referenced value isn't populated or loaded through the store, it can be lazy loaded. This
 * is generally most useful in a template.
 *
 * The following will make an initial request for game `5`, but when the template
 * tried to read and listen to `game.teamRef.value.name`, a request for team `7`
 * will be made.
 *
 * ```
 * var template = stache("{{game.teamRef.value.name}} scored {{game.score}} points");
 * Game.get({id: 5}).then(function(game){
 *   template({game: game});
 * });
 * ```
 *
 *
 */var makeRef=function(connection){var idProp=canReflect_1_19_2_canReflect.getSchema(connection.queryLogic).identity[0];/**
	 * @property {constructor} can-connect/can/ref/ref.Map.Ref Map.Ref
	 * @parent can-connect/can/ref/ref.hydrators
	 * @group can-connect/can/ref/ref.Map.Ref.static static
	 * @group can-connect/can/ref/ref.Map.Ref.prototype prototype
	 *
	 * A reference type with `instanceRef.value` primed to return an existing instance of the
	 * [can-connect/can/map/map._Map] type, if available, or lazy load an instance upon accessing `instanceRef.value`.
	 *
	 * @signature `new Map.Ref(id, value)`
	 * @param  {string} id    string representing the record id
	 * @param  {Object} value properties to be loaded / hydrated
	 * @return {Map.Ref}       instance reference object for the id
	 */var Ref=function(){return function(id,value){if(typeof id==="object"){value=id;id=value[idProp];}// check if this is in the store
var storeRef=Ref.store.get(id);if(storeRef){if(value&&!storeRef._value){if(value instanceof connection.Map){storeRef._value=value;}else {storeRef._value=connection.hydrateInstance(value);}}return storeRef;}// if not, create it
this[idProp]=id;if(value){// if the value is already an instance, use it.
if(value instanceof connection.Map){this._value=value;}else {this._value=connection.hydrateInstance(value);}}// check if this is being made during a request
// if it is, save it
if(store.requests.count()>0){if(!Ref._requestInstances[id]){Ref.store.addReference(id,this);Ref._requestInstances[id]=this;}}};}();/**
	 * @property {can-connect/helpers/weak-reference-map} can-connect/can/ref/ref.Map.Ref.store store
	 * @parent can-connect/can/ref/ref.Map.Ref.static
	 * @hide // not something that needs to be documented for the average user
	 * A WeakReferenceMap that contains instances being created by their `._cid` property.
	 */Ref.store=new weakReferenceMap();Ref._requestInstances={};/**
	 * @function can-connect/can/ref/ref.Map.Ref.type type
	 * @parent can-connect/can/ref/ref.Map.Ref.static
	 *
	 * Returns a new instance of `Map.Ref`.
	 *
	 * @signature `Map.Ref.type(reference)`
	 *
	 *   @param {Object|String|Number} reference either data or an id for an instance of [can-connect/can/map/map._Map].
	 *   @return {can-connect/can/ref/ref.Map.Ref} reference instance for the passed data or identifier.
	 */Ref.type=function(ref){if(ref&&typeof ref!=="object"){// get or make the existing reference from the store
return new Ref(ref);}else {// get or make the reference in the store, update the instance too
return new Ref(ref[idProp],ref);}};var defs={/**
		 * @property {Promise} can-connect/can/ref/ref.Map.Ref.prototype.promise promise
		 * @parent can-connect/can/ref/ref.Map.Ref.prototype
		 * @hide // don't know if this is part of the public API
		 *
		 * Returns a resolved promise if the referenced instance is already available, if not, returns a new promise
		 * to retrieve the instance by the id.
		 *
		 * @signature `ref.promise`
		 * @return {Promise} Promise resolving the instance referenced
		 */promise:{get:function(){if(this._value){return Promise.resolve(this._value);}else {var props={};props[idProp]=this[idProp];return connection.Map.get(props);}}},_state:{get:function(lastSet,resolve){if(resolve){this.promise.then(function(){resolve("resolved");},function(){resolve("rejected");});}return "pending";}},/**
		 * @property {*} can-connect/can/ref/ref.Map.Ref.prototype.value value
		 * @parent can-connect/can/ref/ref.Map.Ref.prototype
		 *
		 * Returns the actual instance the reference points to. Returns `undefined` if the instance is still being loaded.
		 * Accessing this property will start lazy loading if the instance isn't already available.
		 *
		 * @signature `ref.value`
		 * @return {object} actual instance referenced or `undefined` if lazy loading ongoing
		 */value:{get:function(lastSet,resolve){if(this._value){return this._value;}else if(resolve){this.promise.then(function(value){resolve(value);});}}},/**
		 * @property {*} can-connect/can/ref/ref.Map.Ref.prototype.reason reason
		 * @parent can-connect/can/ref/ref.Map.Ref.prototype
		 *
		 * Returns the failure message from the lazy loading promise. Returns `undefined` if the referenced instance is
		 * available or loading is ongoing.
		 *
		 * @signature `ref.reason`
		 * @return {Object} error message if the promise is rejected
		 */reason:{get:function(lastSet,resolve){if(this._value){return undefined;}else {this.promise.catch(function(value){resolve(value);});}}}};defs[idProp]={type:"*",set:function(){this._value=undefined;}};canDefine_2_8_1_canDefine(Ref.prototype,defs);Ref.prototype.unobservedId=canObservationRecorder_1_3_1_canObservationRecorder.ignore(function(){return this[idProp];});/**
	 * @function can-connect/can/ref/ref.Map.Ref.prototype.isResolved isResolved
	 * @parent can-connect/can/ref/ref.Map.Ref.prototype
	 *
	 * Observable property typically for use in templates to indicate to the user if lazy loading has succeeded.
	 *
	 * @signature `ref.isResolved`
	 * @return {boolean} `true` if the lazy loading promise was resolved.
	 */Ref.prototype.isResolved=function(){return !!this._value||this._state==="resolved";};/**
	 * @function can-connect/can/ref/ref.Map.Ref.prototype.isRejected isRejected
	 * @parent can-connect/can/ref/ref.Map.Ref.prototype
	 *
	 * Observable property typically for use in templates to indicate to the user if lazy loading has failed.
	 *
	 * @signature `ref.isRejected`
	 * @return {boolean} `true` if the lazy loading promise was rejected.
	 */Ref.prototype.isRejected=function(){return this._state==="rejected";};/**
	 * @function can-connect/can/ref/ref.Map.Ref.prototype.isPending isPending
	 * @parent can-connect/can/ref/ref.Map.Ref.prototype
	 *
	 * Observable property typically for use in templates to indicate to the user if lazy loading is ongoing.
	 *
	 * @signature `ref.isPending`
	 * @return {boolean} `true` if the lazy loading promise state is not resolved or rejected.
	 */Ref.prototype.isPending=function(){return !this._value&&(this._state!=="resolved"||this._state!=="rejected");};/**
	 * @function can-connect/can/ref/ref.Map.Ref.prototype.serialize serialize
	 * @parent can-connect/can/ref/ref.Map.Ref.prototype
	 *
	 * Return the id of the referenced instance when serializing. Prevents the referenced instance from
	 * being entirely serialized when serializing the referencing instance.
	 *
	 * @signature `ref.serialize`
	 * @return {string} id the id of the referenced instance
	 */Ref.prototype.serialize=function(){return this[idProp];};canReflect_1_19_2_canReflect.assignSymbols(Ref.prototype,{"can.serialize":Ref.prototype.serialize,"can.getName":function(){return canReflect_1_19_2_canReflect.getName(this.constructor)+"{"+this[idProp]+"}";}});var baseEventSetup=Ref.prototype._eventSetup;Ref.prototype._eventSetup=function(){Ref.store.addReference(this.unobservedId(),this);return baseEventSetup.apply(this,arguments);};var baseTeardown=Ref.prototype._eventTeardown;Ref.prototype._eventTeardown=function(){Ref.store.deleteReference(this.unobservedId(),this);return baseTeardown.apply(this,arguments);};store.requests.on("end",function(){for(var id in Ref._requestInstances){Ref.store.deleteReference(id);}Ref._requestInstances={};});//!steal-remove-start
Object.defineProperty(Ref,"name",{value:canReflect_1_19_2_canReflect.getName(connection.Map)+"Ref",configurable:true});//!steal-remove-end
return Ref;};var ref=canConnect_4_0_6_canConnect.behavior("can/ref",function(baseConnection){return {/**
		 * @can-connect/can/ref/ref.init init
		 * @parent can-connect/can/ref/ref.methods
		 *
		 * @signature `connection.init()`
		 *
		 * Initializes the base connection and then creates and sets [can-connect/can/ref/ref.Map.Ref].
		 * Typically called by the `connect` helper after the connection behaviors have been assembled.
		 *
		 * @return {undefined} no return value
		 **/init:function(){baseConnection.init.apply(this,arguments);this.Map.Ref=makeRef(this);}};});var $$1=global_1().$;canConnect_4_0_6_canConnect.superMap=function(options){var behaviors=[constructor_1,map$3,ref,store,callbacks,combineRequests$1,parse$1$1,url,realTime,callbacksOnce];if(typeof localStorage!=="undefined"){if(!options.cacheConnection){options.cacheConnection=canConnect_4_0_6_canConnect([localstorageCache],{name:options.name+"Cache",idProp:options.idProp,queryLogic:options.queryLogic});}behaviors.push(callbacksCache,fallThroughCache_1);}// Handles if jQuery isn't provided.
if($$1&&$$1.ajax){options.ajax=$$1.ajax;}return canConnect_4_0_6_canConnect(behaviors,options);};var superMap=canConnect_4_0_6_canConnect.superMap;var $$2=global_1().$;canConnect_4_0_6_canConnect.baseMap=function(options){var behaviors=[constructor_1,map$3,ref,store,callbacks,parse$1$1,url,realTime,callbacksOnce];// Handles if jQuery isn't provided.
if($$2&&$$2.ajax){options.ajax=$$2.ajax;}return canConnect_4_0_6_canConnect(behaviors,options);};var baseMap=canConnect_4_0_6_canConnect.baseMap;canConnect_4_0_6_canConnect.cacheRequests=cacheRequests;canConnect_4_0_6_canConnect.constructor=constructor_1;canConnect_4_0_6_canConnect.constructorCallbacksOnce=callbacksOnce;canConnect_4_0_6_canConnect.constructorStore=store;canConnect_4_0_6_canConnect.dataCallbacks=callbacks;canConnect_4_0_6_canConnect.dataCallbacksCache=callbacksCache;canConnect_4_0_6_canConnect.dataCombineRequests=combineRequests$1;canConnect_4_0_6_canConnect.dataLocalStorageCache=localstorageCache;canConnect_4_0_6_canConnect.dataMemoryCache=memoryCache;canConnect_4_0_6_canConnect.dataParse=parse$1$1;canConnect_4_0_6_canConnect.dataUrl=url;canConnect_4_0_6_canConnect.fallThroughCache=fallThroughCache_1;canConnect_4_0_6_canConnect.realTime=realTime;canConnect_4_0_6_canConnect.canMap=map$3;canConnect_4_0_6_canConnect.superMap=superMap;canConnect_4_0_6_canConnect.baseMap=baseMap;// Method names on `history` that will be overwritten
// during teardown these are reset to their original functions.
var methodsToOverwrite=["pushState","replaceState"],// This symbol is used in dispatchHandlers.
dispatchSymbol$3=canSymbol_1_7_0_canSymbol.for("can.dispatch");// ## Helpers
// The following are helper functions useful to `can-route-pushstate`'s main methods.
// ### cleanRoot
// Start of `location.pathname` is the root. 
// Returns the root minus the domain.
function cleanRoot(){var location=location_1(),domain=location.protocol+"//"+location.host,// pulls root from route.urlData
root=bindingProxy_1.call("root"),index=root.indexOf(domain);if(index===0){return root.substr(domain.length);}return root;}// ### getCurrentUrl
// Gets the current url after the root.
// `root` is defined in the PushstateObservable constructor.
function getCurrentUrl(){var root=cleanRoot(),location=location_1(),loc=location.pathname+location.search,index=loc.indexOf(root);return loc.substr(index+root.length);}// ## PushstateObservable
function PushstateObservable(){// Keys passed into `replaceStateOnce` will be stored in `replaceStateOnceKeys`.
this.replaceStateOnceKeys=[];// Keys passed into `replaceStateOn` will be stored in `replaceStateKeys`.
this.replaceStateKeys=[];this.dispatchHandlers=this.dispatchHandlers.bind(this);this.anchorClickHandler=function(event){var shouldCallPushState=PushstateObservable.prototype.shouldCallPushState.call(this,this,event);if(shouldCallPushState){PushstateObservable.prototype.anchorClickHandler.call(this,this,event);}};// ### `keepHash`
// Currently is neither a feature that's documented,
// nor is it toggled. [Issue #133](https://github.com/canjs/can-route-pushstate/issues/133)
// is the discourse on it's removal.
this.keepHash=true;}PushstateObservable.prototype=Object.create(canSimpleObservable_2_5_0_canSimpleObservable.prototype);PushstateObservable.constructor=PushstateObservable;canReflect_1_19_2_canReflect.assign(PushstateObservable.prototype,{// ### root
// Start of `location.pathname` is the root.
// (Can be configured via `route.urlData.root`)
// The default is `"#!"` set in can-route-hash.
root:"/",// ### matchSlashes
// The default is `false` set in can-route-hash.
// Don't greedily match slashes in routing rules.
matchSlashes:false,// ### paramsMatcher
// Matches things like:
//  - ?foo=bar
//  - ?foo=bar&framework=canjs
//  - ?foo=&bar=
paramsMatcher:/^\?(?:[^=]+=[^&]*&)*[^=]+=[^&]*/,// ### querySeparator
// Used in `can-route` for building regular expressions to match routes, or
// return url substrings of routes.
querySeparator:"?",// ### dispatchHandlers
// Updates `this._value` to the current url and 
// dispatches event handlers that are on the object.
// `dispatchHandlers` is called if `pushState` or `replaceState`
// are called, it is also an event handler on `'popstate'`.
dispatchHandlers:function(){var old=this._value;this._value=getCurrentUrl();if(old!==this._value){// PushstateObservable inherits from `SimpleObservable` which
// is using the `can-event-queue/value/value` mixin, and is called
// using the `can.dispatch` symbol.
this[dispatchSymbol$3](this._value,old);}},// ### shouldCallPushState
// Checks if a route is matched, if one is, returns true
shouldCallPushState:function(node,event){if(!(event.isDefaultPrevented?event.isDefaultPrevented():event.defaultPrevented===true)){// If href has some JavaScript in it, let it run.
if(node.href==="javascript://"){return;}// Do not pushstate if target is for blank window.
if(node.target==="_blank"){return;}// Do not pushstate if meta key was pressed, mimicking standard browser behavior.
if(event.altKey||event.ctrlKey||event.metaKey||event.shiftKey){return;}// linksHost is a Fix for IE showing blank host, but blank host means current host.
var linksHost=node.host||window.location.host;// If link is within the same domain and descendant of `root`.
if(window.location.host===linksHost){var root=cleanRoot(),pathname,href,nodePathWithSearch;if(node instanceof HTMLAnchorElement){pathname=node.pathname;href=node.href;nodePathWithSearch=pathname+node.search;}else if(node.namespaceURI==="http://www.w3.org/1999/xlink"){pathname=href=node.getAttributeNS("http://www.w3.org/1999/xlink","href");nodePathWithSearch=href;}// If the link is within the `root`.
if(pathname!==undefined&&pathname.indexOf(root)===0){var url=nodePathWithSearch.substr(root.length);// If a matching route exists.
if(canRoute_5_0_2_canRoute.rule(url)!==undefined){// Makes it possible to have a link with a hash.
// Calling .pushState will dispatch events, causing
// `can-route` to update its data, and then try to set back
// the url without the hash.  We need to retain that.
if(href.indexOf("#")>=0){this.keepHash=true;}// We do not want to call preventDefault() if the link is to the
// same page and just a different hash; see can-route-pushstate#75.
var windowPathWithSearch=window.location.pathname+window.location.search;var shouldCallPreventDefault=nodePathWithSearch!==windowPathWithSearch||node.hash===window.location.hash;// Test if you can preventDefault.
if(shouldCallPreventDefault&&event.preventDefault){event.preventDefault();}return true;}return false;}}}},// ### anchorClickHandler
// Handler function for `click` events.
anchorClickHandler:function(node,event){var href=node.href?node.href:node.getAttributeNS("http://www.w3.org/1999/xlink","href");// Update `window.location`.
window.history.pushState(null,null,href);},// ### onBound
// Initalizes this._value.
// Sets up event listeners to capture `click` events on `<a>` elements.
// Overwrites the history api methods `.pushState` and `.replaceState`.
onBound:function(){// if running in Node.js, don't setup.
if(isNode$2()){return;}var document=document$1(),window=global_1();this._value=getCurrentUrl();// Intercept routable links.
canDomEvents_1_3_13_canDomEvents.addDelegateListener(document.documentElement,"click","a",this.anchorClickHandler);var originalMethods=this.originalMethods={};var dispatchHandlers=this.dispatchHandlers;// Rewrites original `pushState`/`replaceState` methods on `history`
// and keeps pointer to original methods.
canReflect_1_19_2_canReflect.eachKey(methodsToOverwrite,function(method){this.originalMethods[method]=window.history[method];window.history[method]=function(state,title,url){// Avoid doubled history states (with pushState).
var absolute=url.indexOf("http")===0;var location=location_1();var searchHash=location.search+location.hash;// If url differs from current call original history method and update `route` state.
if(!absolute&&url!==location.pathname+searchHash||absolute&&url!==location.href+searchHash){originalMethods[method].apply(window.history,arguments);dispatchHandlers();}};},this);// Bind dispatchHandlers to the `popstate` event, so they will fire
// when `history.back()` or `history.forward()` methods are called.
canDomEvents_1_3_13_canDomEvents.addEventListener(window,"popstate",this.dispatchHandlers);},// ### onUnbound
// removes the event listerns for capturing routable links.
// Sets `.pushState` and `.replacState` to their original methods.
onUnbound:function(){// If running in Node.js, don't teardown.
if(isNode$2()){return;}var document=document$1(),window=global_1();canDomEvents_1_3_13_canDomEvents.removeDelegateListener(document.documentElement,"click","a",this.anchorClickHandler);// Reset the changed `window.history` methods to their original values.
canReflect_1_19_2_canReflect.eachKey(methodsToOverwrite,function(method){window.history[method]=this.originalMethods[method];},this);canDomEvents_1_3_13_canDomEvents.removeEventListener(window,"popstate",this.dispatchHandlers);},// ### get
// Allows `PushstateObservable` to be observable by can-observations,
// and returns the current url.
get:function get(){canObservationRecorder_1_3_1_canObservationRecorder.add(this);return getCurrentUrl();},// ### set
// Calls either pushState or replaceState on the difference
// in properties between `oldProps` and `newProps`.
set:function(path){var newProps=canRoute_5_0_2_canRoute.deparam(path),oldProps=canRoute_5_0_2_canRoute.deparam(getCurrentUrl()),method="pushState",changed={};// Adds window.location.hash to path if it's not already in path.
if(this.keepHash&&path.indexOf("#")===-1&&window.location.hash){path+=window.location.hash;}// The old state and new state are diffed 
// to figure out which keys are changing.
map$2(oldProps,newProps).forEach(function(patch){// `patch.key` refers to the mutated property name on `newProps`.
return changed[patch.key]=true;});// If any of the changed properties are in `replaceStateKeys` or 
// `replaceStateOnceKeys` change the method to `'replaceState'`.
if(this.replaceStateKeys.length){this.replaceStateKeys.forEach(function(replaceKey){if(changed[replaceKey]){method="replaceState";}});}if(this.replaceStateOnceKeys.length){this.replaceStateOnceKeys.forEach(function(replaceOnceKey,index,thisArray){if(changed[replaceOnceKey]){method="replaceState";// Remove so we don't attempt to replace 
// the state on this key again.
thisArray.splice(index,1);}});}window.history[method](null,null,bindingProxy_1.call("root")+path);},// ### replaceStateOn
// Adds given arguments to `this.replaceStateKeys`.
replaceStateOn:function(){canReflect_1_19_2_canReflect.addValues(this.replaceStateKeys,canReflect_1_19_2_canReflect.toArray(arguments));},// ### replaceStateOnce
// Adds given arguments to `this.replaceStateOnceKeys`.
// Keys in `this.replaceStateOnceKeys` will be removed
// from the array the first time a changed route contains that key.
replaceStateOnce:function(){canReflect_1_19_2_canReflect.addValues(this.replaceStateOnceKeys,canReflect_1_19_2_canReflect.toArray(arguments));},// ### replaceStateOff
// Removes given arguments from both `this.replaceStateKeys` and
// `this.replaceOnceKeys`.
replaceStateOff:function(){canReflect_1_19_2_canReflect.removeValues(this.replaceStateKeys,canReflect_1_19_2_canReflect.toArray(arguments));canReflect_1_19_2_canReflect.removeValues(this.replaceStateOnceKeys,canReflect_1_19_2_canReflect.toArray(arguments));}});canReflect_1_19_2_canReflect.assignSymbols(PushstateObservable.prototype,{"can.getValue":PushstateObservable.prototype.get,"can.setValue":PushstateObservable.prototype.set});var canRoutePushstate_6_0_0_canRoutePushstate=PushstateObservable;function shouldCheckSet(patch,destVal,sourceVal){return patch.type==="set"&&destVal&&sourceVal&&typeof destVal==="object"&&typeof sourceVal==="object";}function makeIdentityFromMapSchema$1(typeSchema){if(typeSchema.identity&&typeSchema.identity.length){return function identityCheck(a,b){var aId=canReflect_1_19_2_canReflect.getIdentity(a,typeSchema),bId=canReflect_1_19_2_canReflect.getIdentity(b,typeSchema);return aId===bId;};}}function makeDiffListIdentityComparison(oldList,newList,parentKey,nestedPatches){var listSchema=canReflect_1_19_2_canReflect.getSchema(oldList),typeSchema,identityCheckFromSchema,oldListLength=canReflect_1_19_2_canReflect.size(oldList);if(listSchema!=null){if(listSchema.values!=null){typeSchema=canReflect_1_19_2_canReflect.getSchema(listSchema.values);}}if(typeSchema==null&&oldListLength>0){typeSchema=canReflect_1_19_2_canReflect.getSchema(canReflect_1_19_2_canReflect.getKeyValue(oldList,0));}if(typeSchema){identityCheckFromSchema=makeIdentityFromMapSchema$1(typeSchema);}return function(a,b,aIndex){if(canReflect_1_19_2_canReflect.isPrimitive(a)){return a===b;}if(canReflect_1_19_2_canReflect.isPrimitive(b)){return a===b;}if(identityCheckFromSchema){if(identityCheckFromSchema(a,b)){var patches=diffDeep(a,b,parentKey?parentKey+"."+aIndex:""+aIndex);nestedPatches.push.apply(nestedPatches,patches);return true;}}return diffDeep(a,b).length===0;};}function diffDeep(dest,source,parentKey){if(dest&&canReflect_1_19_2_canReflect.isMoreListLikeThanMapLike(dest)){var nestedPatches=[],diffingIdentity=makeDiffListIdentityComparison(dest,source,parentKey,nestedPatches);var primaryPatches=list(dest,source,diffingIdentity).map(function(patch){if(parentKey){patch.key=parentKey;}return patch;});return nestedPatches.concat(primaryPatches);}else {parentKey=parentKey?parentKey+".":"";var patches=map$2(dest,source);// any sets we are going to recurse within
var finalPatches=[];patches.forEach(function(patch){var key=patch.key;patch.key=parentKey+patch.key;var destVal=dest&&canReflect_1_19_2_canReflect.getKeyValue(dest,key),sourceVal=source&&canReflect_1_19_2_canReflect.getKeyValue(source,key);if(shouldCheckSet(patch,destVal,sourceVal)){var deepPatches=diffDeep(destVal,sourceVal,patch.key);finalPatches.push.apply(finalPatches,deepPatches);}else {finalPatches.push(patch);}});return finalPatches;}}var deep=diffDeep;var diff$2={deep:deep,list:list,map:map$2,mergeDeep:mergeDeep,Patcher:patcher};var canDiff_1_5_1_canDiff=canNamespace_1_0_0_canNamespace.diff=diff$2;/**
 * @function can-dom-events/helpers/add-jquery-events ./helpers/add-jquery-events
 * @parent can-dom-events.helpers
 * @description Add jQuery’s special events to the global registry.
 * @signature `addJQueryEvents(jQuery)`
 * @param {jQuery} jQuery Your instance of jQuery.
 * @return {function} The callback to remove the jQuery events from the registry.
 *
 * @body
 *
 * ```js
 * const $ = require("jquery");
 * const addJQueryEvents = require("can-dom-events/helpers/add-jquery-events");
 * const domEvents = require("can-dom-events");
 * // Require another module that registers itself with jQuery.event.special,
 * // e.g. jQuery++ registers events such as draginit, dragmove, etc.
 *
 * const removeJQueryEvents = addJQueryEvents($);
 *
 * // Listen for an event in code; this might also be accomplished through a
 * // can-stache-binding such as <li on:draginit="listener()">
 * domEvents.addEventListener(listItemElement, "draginit", function listener() {
 *   // Will fire after a jQuery draginit event has been fired
 * });
 *
 * // Some other code that fires a jQuery event; this will probably be in the
 * // package you’re using…
 * $(listItemElement).trigger("draginit");
 *
 * // Later in your code… ready to stop listening for those jQuery events? Call
 * // the function returned by addJQueryEvents()
 * removeJQueryEvents();
 * ```
 */canNamespace_1_0_0_canNamespace.addJQueryEvents=function addJQueryEvents(jQuery){var jQueryEvents=jQuery.event.special;var removeEvents=[];for(var eventType in jQueryEvents){if(!canDomEvents_1_3_13_canDomEvents._eventRegistry.has(eventType)){var eventDefinition={defaultEventType:eventType,addEventListener:function(target,eventType,handler){$(target).on(eventType,handler);},removeEventListener:function(target,eventType,handler){$(target).off(eventType,handler);}};var removeEvent=canDomEvents_1_3_13_canDomEvents.addEvent(eventDefinition);removeEvents.push(removeEvent);}}return function removeJQueryEvents(){removeEvents.forEach(function(removeEvent){removeEvent();});};};/**
 * @module {{}} can-dom-mutate/events/events
 * @parent can-dom-mutate/modules
 * 
 * @description This adds attributes, inserted and removed attributes to the DOM.
 * @signature `domMutateEvents`
 * 
 * `can-dom-mutate/events/events` Exports an object that allows to listen ```attributes```, ```inserted``` and ```removed``` events 
 *  in the DOM using [MutationObserver](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)
 * 
 * ```js
 * import domMutateEvents from "can-dom-mutate/events/events";
 * import domEvents from "can-dom-events";
 *
 * domMutateEvents //->
 * {
 *   attributes: {defaultEventType, addEventListener(), removeEventListener()},
 *   inserted: {defaultEventType, addEventListener(), removeEventListener},
 *   removed: {defaultEventType, addEventListener(), removeEventListener()},
 * }
 *
 * // listen to inserted change within an element:
 * // add inserted event to registry
 * domEvents.addEvent(domMutateEvents.inserted);
 * domEvent.addEventListener(document.querySelector("#foo"), "inserted", handler () => {})
 * ```
 */function makeMutationEvent(defaultEventType,subscription,bubbles){var elementSubscriptions=new Map();return {_subscriptions:elementSubscriptions,defaultEventType:defaultEventType,addEventListener:function(target,eventType,handler){var dispatch=this.dispatch;var data=elementSubscriptions.get(target);if(!data){data={removeListener:null,listeners:new Set()};elementSubscriptions.set(target,data);}if(data.listeners.size===0){data.removeListener=subscription(target,function(mutation){var eventData={type:eventType};for(var key in mutation){eventData[key]=mutation[key];}dispatch(target,eventData,bubbles!==false);});}data.listeners.add(handler);target.addEventListener(eventType,handler);},removeEventListener:function(target,eventType,handler){target.removeEventListener(eventType,handler);var data=elementSubscriptions.get(target);if(data){data.listeners['delete'](handler);if(data.listeners.size===0){data.removeListener();elementSubscriptions['delete'](target);}}}};}var events$1=canNamespace_1_0_0_canNamespace.domMutateDomEvents={attributes:makeMutationEvent('attributes',canDomMutate_2_0_9_canDomMutate.onNodeAttributeChange),inserted:makeMutationEvent('inserted',canDomMutate_2_0_9_canDomMutate.onNodeConnected,false),removed:makeMutationEvent('removed',canDomMutate_2_0_9_canDomMutate.onNodeDisconnected)};// backwards compatibility
canNamespace_1_0_0_canNamespace.domMutateDomEvents=events$1;var warned=false;var proxyNamespace=function proxyNamespace(namespace){return new Proxy(namespace,{get:function get(target,name){if(!warned){console.warn("Warning: use of 'can' global should be for debugging purposes only.");warned=true;}return target[name];}});};var onValueSymbol$5=canSymbol_1_7_0_canSymbol.for("can.onValue");var offValueSymbol$3=canSymbol_1_7_0_canSymbol.for("can.offValue");var onKeyValueSymbol$7=canSymbol_1_7_0_canSymbol.for("can.onKeyValue");var offKeyValueSymbol$5=canSymbol_1_7_0_canSymbol.for("can.offKeyValue");var noop$3$1=function noop(){};function isFunction$2$1(value){return typeof value==="function";}function withKey(obj,key,fn){var result;if(isFunction$2$1(obj[onKeyValueSymbol$7])){canReflect_1_19_2_canReflect.onKeyValue(obj,key,noop$3$1);}result=fn(obj,key);if(isFunction$2$1(obj[offKeyValueSymbol$5])){canReflect_1_19_2_canReflect.offKeyValue(obj,key,noop$3$1);}return result;}function withoutKey(obj,fn){var result;if(isFunction$2$1(obj[onValueSymbol$5])){canReflect_1_19_2_canReflect.onValue(obj,noop$3$1);}result=fn(obj);if(isFunction$2$1(obj[offValueSymbol$3])){canReflect_1_19_2_canReflect.offValue(obj,noop$3$1);}return result;}// Takes a function with signature `fn(obj, [key])`
// Makes sure that the argument is bound before calling 
// the function and unbinds it after the call is done.
var temporarilyBind$1=function temporarilyBind(fn){return function(obj,key){var gotKey=arguments.length===2;return gotKey?withKey(obj,key,fn):withoutKey(obj,fn);};};function Graph(){this.nodes=[];this.arrows=new Map();this.arrowsMeta=new Map();}// Adds the node, but it does not check if the node exists, callers will have
// to check that through [findNode]
Graph.prototype.addNode=function addNode(node){this.nodes.push(node);this.arrows.set(node,new Set());};// Adds an arrow from head to tail with optional metadata
// The method does not check whether head and tail are already
// nodes in the graph, this should be done by the caller.
Graph.prototype.addArrow=function addArrow(head,tail,meta){var graph=this;graph.arrows.get(head).add(tail);// optional
if(meta){addArrowMeta(graph,head,tail,meta);}};// Tests whether there is an arrow from head to tail
Graph.prototype.hasArrow=function hasArrow(head,tail){return this.getNeighbors(head).has(tail);};// Returns the metadata associated to the head -> tail arrow
Graph.prototype.getArrowMeta=function getArrowMeta(head,tail){return this.arrowsMeta.get(head)&&this.arrowsMeta.get(head).get(tail);};// Sets metadata about the arrow from head to tail
// Merges the passed object into existing metadata
Graph.prototype.setArrowMeta=function setArrowMeta(head,tail,meta){addArrowMeta(this,head,tail,meta);};// Returns a Set of all nodes 'y' such that there is an arrow
// from the node 'x' to the node 'y'.
Graph.prototype.getNeighbors=function getNeighbors(node){return this.arrows.get(node);};// Returns the first node that satisfies the provided testing function.
// The Graph is traversed using depth first search
Graph.prototype.findNode=function findNode(cb){var found=null;var graph=this;var i,node;for(i=0;i<graph.nodes.length;i++){node=graph.nodes[i];if(cb(node)){found=node;break;}}return found;};Graph.prototype.bfs=function bfs(visit){var graph=this;var node=graph.nodes[0];var queue=[node];var visited=new Map();visited.set(node,true);while(queue.length){node=queue.shift();visit(node);graph.arrows.get(node).forEach(function(adj){if(!visited.has(adj)){queue.push(adj);visited.set(adj,true);}});}};Graph.prototype.dfs=function dfs(visit){var graph=this;var node=graph.nodes[0];var stack=[node];var visited=new Map();while(stack.length){node=stack.pop();visit(node);if(!visited.has(node)){visited.set(node,true);graph.arrows.get(node).forEach(function(adj){stack.push(adj);});}}};// Returns a new graph where the arrows point to the opposite direction, that is:
// For each arrow (u, v) in [this], there will be a (v, u) in the returned graph
// This is also called Transpose or Converse a graph
Graph.prototype.reverse=function reverse(){var graph=this;var reversed=new Graph();// copy over the nodes
graph.nodes.forEach(reversed.addNode.bind(reversed));graph.nodes.forEach(function(node){graph.getNeighbors(node).forEach(function(adj){// add the arrow in the opposite direction, copy over metadata
var meta=graph.getArrowMeta(node,adj);reversed.addArrow(adj,node,meta);});});return reversed;};// Helpers
function addArrowMeta(graph,head,tail,meta){var entry=graph.arrowsMeta.get(head);if(entry){var arrowMeta=entry.get(tail);if(!arrowMeta){arrowMeta={};}entry.set(tail,canAssign_1_3_3_canAssign(arrowMeta,meta));}else {entry=new Map();entry.set(tail,meta);graph.arrowsMeta.set(head,entry);}}var graph=Graph;var makeNode=function makeNode(obj,key){var gotKey=arguments.length===2;var node={obj:obj,name:canReflect_1_19_2_canReflect.getName(obj),value:gotKey?canReflect_1_19_2_canReflect.getKeyValue(obj,key):canReflect_1_19_2_canReflect.getValue(obj)};if(gotKey){node.key=key;}return node;};// Returns a directed graph of the dependencies of obj (key is optional)
//
// Signature:
//	getDirectedGraph(obj)
//	getDirectedGraph(obj, key)
var getGraph=function getGraph(obj,key){var order=0;var graph$$1=new graph();var gotKey=arguments.length===2;var addArrow=function addArrow(direction,parent,child,meta){switch(direction){case"whatIChange":graph$$1.addArrow(parent,child,meta);break;case"whatChangesMe":graph$$1.addArrow(child,parent,meta);break;default:throw new Error("Unknown direction value: ",meta.direction);}};// keyDependencies :: Map<obj, Set<key>>
var visitKeyDependencies=function visitKeyDependencies(source,meta,cb){canReflect_1_19_2_canReflect.eachKey(source.keyDependencies||{},function(keys,obj){canReflect_1_19_2_canReflect.each(keys,function(key){cb(obj,meta,key);});});};// valueDependencies :: Set<obj>
var visitValueDependencies=function visitValueDependencies(source,meta,cb){canReflect_1_19_2_canReflect.eachIndex(source.valueDependencies||[],function(obj){cb(obj,meta);});};var visit=function visit(obj,meta,key){var gotKey=arguments.length===3;var node=graph$$1.findNode(function(node){return gotKey?node.obj===obj&&node.key===key:node.obj===obj;});// if there is a node already in the graph, add the arrow and prevent
// infinite calls to `visit` by returning early
if(node){if(meta.parent){addArrow(meta.direction,meta.parent,node,{kind:meta.kind,direction:meta.direction});}return graph$$1;}// create and add a node to the graph
order+=1;node=gotKey?makeNode(obj,key):makeNode(obj);node.order=order;graph$$1.addNode(node);// if there is a known parent node, add the arrow in the given direction
if(meta.parent){addArrow(meta.direction,meta.parent,node,{kind:meta.kind,direction:meta.direction});}// get the dependencies of the new node and recursively visit those
var nextMeta;var data=gotKey?canReflectDependencies_1_1_2_canReflectDependencies.getDependencyDataOf(obj,key):canReflectDependencies_1_1_2_canReflectDependencies.getDependencyDataOf(obj);if(data&&data.whatIChange){nextMeta={direction:"whatIChange",parent:node};// kind :: derive | mutate
canReflect_1_19_2_canReflect.eachKey(data.whatIChange,function(dependencyRecord,kind){nextMeta.kind=kind;visitKeyDependencies(dependencyRecord,nextMeta,visit);visitValueDependencies(dependencyRecord,nextMeta,visit);});}if(data&&data.whatChangesMe){nextMeta={direction:"whatChangesMe",parent:node};// kind :: derive | mutate
canReflect_1_19_2_canReflect.eachKey(data.whatChangesMe,function(dependencyRecord,kind){nextMeta.kind=kind;visitKeyDependencies(dependencyRecord,nextMeta,visit);visitValueDependencies(dependencyRecord,nextMeta,visit);});}return graph$$1;};return gotKey?visit(obj,{},key):visit(obj,{});};// Converts the graph into a data structure that vis.js requires to draw the graph
var formatGraph=function formatGraph(graph){// { [node]: Number }
var nodeIdMap=new Map();graph.nodes.forEach(function(node,index){nodeIdMap.set(node,index+1);});// collects nodes in the shape of { id: Number, label: String }
var nodesDataSet=graph.nodes.map(function(node){return {shape:"box",id:nodeIdMap.get(node),label:canReflect_1_19_2_canReflect.getName(node.obj)+(node.key?"."+node.key:"")};});var getArrowData=function getArrowData(meta){var regular={arrows:"to"};var withDashes={arrows:"to",dashes:true};var map={derive:regular,mutate:withDashes};return map[meta.kind];};// collect edges in the shape of { from: Id, to: Id }
var visited=new Map();var arrowsDataSet=[];graph.nodes.forEach(function(node){var visit=function(node){if(!visited.has(node)){visited.set(node,true);var arrows=graph.arrows.get(node);var headId=nodeIdMap.get(node);arrows.forEach(function(neighbor){var tailId=nodeIdMap.get(neighbor);var meta=graph.arrowsMeta.get(node).get(neighbor);arrowsDataSet.push(canAssign_1_3_3_canAssign({from:headId,to:tailId},getArrowData(meta)));visit(neighbor);});}};visit(node);});return {nodes:nodesDataSet,edges:arrowsDataSet};};var quoteString$1=function quoteString(x){return typeof x==="string"?JSON.stringify(x):x;};var logData=function log(data){var node=data.node;var nameParts=[node.name,"key"in node?"."+node.key:""];console.group(nameParts.join(""));console.log("value  ",quoteString$1(node.value));console.log("object ",node.obj);if(data.derive.length){console.group("DERIVED FROM");canReflect_1_19_2_canReflect.eachIndex(data.derive,log);console.groupEnd();}if(data.mutations.length){console.group("MUTATED BY");canReflect_1_19_2_canReflect.eachIndex(data.mutations,log);console.groupEnd();}if(data.twoWay.length){console.group("TWO WAY");canReflect_1_19_2_canReflect.eachIndex(data.twoWay,log);console.groupEnd();}console.groupEnd();};// Returns a new graph with all the arrows not involved in a circuit
var labelCycles=function labelCycles(graph$$1){var visited=new Map();var result=new graph();// copy over all nodes
graph$$1.nodes.forEach(function(node){result.addNode(node);});var visit=function visit(node){visited.set(node,true);graph$$1.getNeighbors(node).forEach(function(adj){// back arrow found
if(visited.has(adj)){// if isTwoWay is false it means the cycle involves more than 2 nodes,
// e.g: A -> B -> C -> A
// what to do in these cases? (currently ignoring these)
var isTwoWay=graph$$1.hasArrow(node,adj);if(isTwoWay){result.addArrow(adj,node,{kind:"twoWay"});}// copy over arrows not involved in a cycle
}else {result.addArrow(node,adj,graph$$1.getArrowMeta(node,adj));visit(adj);}});};visit(graph$$1.nodes[0]);return result;};var isDisconnected=function isDisconnected(data){return !data.derive.length&&!data.mutations.length&&!data.twoWay.length;};// Returns a deeply nested object from the graph
var getData=function getDebugData(inputGraph,direction){var visited=new Map();var graph=labelCycles(direction==="whatChangesMe"?inputGraph.reverse():inputGraph);var visit=function visit(node){var data={node:node,derive:[],mutations:[],twoWay:[]};visited.set(node,true);graph.getNeighbors(node).forEach(function(adj){var meta=graph.getArrowMeta(node,adj);if(!visited.has(adj)){switch(meta.kind){case"twoWay":data.twoWay.push(visit(adj));break;case"derive":data.derive.push(visit(adj));break;case"mutate":data.mutations.push(visit(adj));break;default:throw new Error("Unknow meta.kind value: ",meta.kind);}}});return data;};// discard data if there are no arrows registered, this happens when
// [direction] is passed in and no arrow metadada matches its value
var result=visit(graph.nodes[0]);return isDisconnected(result)?null:result;};// key :: string | number | null | undefined
var whatIChange=function logWhatIChange(obj,key){var gotKey=arguments.length===2;var data=getData(gotKey?getGraph(obj,key):getGraph(obj),"whatIChange");if(data){logData(data);}};// key :: string | number | null | undefined
var whatChangesMe=function logWhatChangesMe(obj,key){var gotKey=arguments.length===2;var data=getData(gotKey?getGraph(obj,key):getGraph(obj),"whatChangesMe");if(data){logData(data);}};var getWhatIChange$1=function getWhatChangesMe(obj,key){var gotKey=arguments.length===2;return getData(gotKey?getGraph(obj,key):getGraph(obj),"whatIChange");};var getWhatChangesMe$1=function getWhatChangesMe(obj,key){var gotKey=arguments.length===2;return getData(gotKey?getGraph(obj,key):getGraph(obj),"whatChangesMe");};var global$5=canGlobals_1_2_2_canGlobals.getKeyValue("global");var devtoolsRegistrationComplete=false;function registerWithDevtools(){if(devtoolsRegistrationComplete){return;}var devtoolsGlobalName="__CANJS_DEVTOOLS__";var devtoolsCanModules={Observation:canObservation_4_2_0_canObservation,Reflect:canReflect_1_19_2_canReflect,Symbol:canSymbol_1_7_0_canSymbol,formatGraph:canNamespace_1_0_0_canNamespace.debug.formatGraph,getGraph:canNamespace_1_0_0_canNamespace.debug.getGraph,mergeDeep:mergeDeep,queues:canQueues_1_3_2_canQueues};if(global$5[devtoolsGlobalName]){global$5[devtoolsGlobalName].register(devtoolsCanModules);}else {Object.defineProperty(global$5,devtoolsGlobalName,{set:function(devtoolsGlobal){Object.defineProperty(global$5,devtoolsGlobalName,{value:devtoolsGlobal});devtoolsGlobal.register(devtoolsCanModules);},configurable:true});}devtoolsRegistrationComplete=true;}var canDebug_2_0_7_canDebug=function(){canNamespace_1_0_0_canNamespace.debug={formatGraph:temporarilyBind$1(formatGraph),getGraph:temporarilyBind$1(getGraph),getWhatIChange:temporarilyBind$1(getWhatIChange$1),getWhatChangesMe:temporarilyBind$1(getWhatChangesMe$1),logWhatIChange:temporarilyBind$1(whatIChange),logWhatChangesMe:temporarilyBind$1(whatChangesMe)};registerWithDevtools();global$5.can=typeof Proxy!=="undefined"?proxyNamespace(canNamespace_1_0_0_canNamespace):canNamespace_1_0_0_canNamespace;return canNamespace_1_0_0_canNamespace.debug;};//!steal-remove-start
if(process.env.NODE_ENV!=='production'){canDebug_2_0_7_canDebug();}//!steal-remove-end

const underlyingReplaceState = history.replaceState;
const pushStateObservable = new canRoutePushstate_6_0_0_canRoutePushstate();
canRoute_5_0_2_canRoute.urlData = new canRoutePushstate_6_0_0_canRoutePushstate();
canRoute_5_0_2_canRoute.urlData.root = window.location.pathname;
const dateMatch = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/;
function saveJSONToUrl(key, defaultValue, Type, converter = JSON) {
  const {
    stringify,
    parse
  } = converter;
  return {
    type: Type,
    value({
      lastSet,
      listenTo,
      resolve
    }) {
      const defaultJSON = stringify(typeof defaultValue === "function" ? defaultValue.call(this) : defaultValue);
      function resolveFromUrl() {
        const parsed = parse(new URL(window.location).searchParams.get(key) || defaultJSON);
        if (parsed && dateMatch.test(parsed)) {
          resolve(new Date(parsed));
        } else {
          resolve(parsed);
        }
      }
      if (lastSet.value) {
        resolve(lastSet.value);
      } else {
        resolveFromUrl();
      }
      listenTo(lastSet, value => {
        const valueJSON = stringify(value);
        updateUrlParam(key, valueJSON, defaultJSON);
      });
      listenTo(pushStateObservable, () => {
        resolveFromUrl();
      });
    }
  };
}
function makeArrayOfStringsQueryParamValue(queryParam) {
  return {
    value: function ({
      resolve,
      lastSet,
      listenTo
    }) {
      function urlValue() {
        let value = new URL(window.location).searchParams.get(queryParam);
        return !value ? [] : value.split(",");
      }
      let currentValue = urlValue();
      resolve(currentValue);
      listenTo(lastSet, value => {
        if (!value) {
          value = "";
        } else if (Array.isArray(value)) {
          value = value.join(",");
        }
        updateUrlParam(queryParam, value, "");
      });
      listenTo(pushStateObservable, ev => {
        let newValue = urlValue();
        if (canDiff_1_5_1_canDiff.list(newValue, currentValue).length) {
          resolve(currentValue = newValue);
        }
      });
    }
  };
}
function directlyReplaceUrlParam(key, valueJSON, defaultJSON) {
  const newUrl = new URL(window.location);
  if (valueJSON !== defaultJSON) {
    newUrl.searchParams.set(key, valueJSON);
  } else {
    newUrl.searchParams.delete(key);
  }
  underlyingReplaceState.call(history, {}, '', newUrl.search);
  //pushStateObservable.value = newUrl.search;
}
function updateUrlParam(key, valueJSON, defaultJSON) {
  const newUrl = new URL(window.location);
  if (valueJSON !== defaultJSON) {
    newUrl.searchParams.set(key, valueJSON);
  } else {
    newUrl.searchParams.delete(key);
  }
  pushStateObservable.value = newUrl.search;
  //history.pushState({}, '', );
}

class SimpleTooltip extends HTMLElement {
  static get observedAttributes() {
    return ['for'];
  }
  attributeChangedCallback(name, oldValue, newValue) {}
  connectedCallback() {
    this.enteredElement = this.enteredElement.bind(this);
    this.leftElement = this.leftElement.bind(this);
    this.forElement = this.getAttribute("for");
    this.style.display = "none";
    this.style.position = "absolute";
  }
  disconnectedCallback() {
    if (this._forElement) {
      this._forElement.removeEventListener("mouseenter", this.enteredElement);
      this._forElement.removeEventListener("mouseenter", this.leftElement);
    }
  }
  set forElement(element) {
    if (typeof element === "string") {
      element = document.querySelectorAll(element);
    }
    if (this._forElement) {
      this._forElement.removeEventListener("mouseenter", this.enteredElement);
      this._forElement.removeEventListener("mouseenter", this.leftElement);
    }
    if (element) {
      element.addEventListener("mouseenter", this.enteredElement);
      element.addEventListener("mouseenter", this.leftElement);
    }
    this._forElement = element;
  }
  enteredElement(event, html) {
    if (arguments.length > 1) {
      this.innerHTML = html;
      var rect = event.currentTarget.getBoundingClientRect();
      this.style.top = window.scrollY + rect.bottom + "px";
      this.style.left = window.scrollX + rect.left + "px";
      this.style.display = "";
    }
  }
  belowElement(element, DOM) {
    if (arguments.length > 1) {
      this.innerHTML = "";
      this.appendChild(DOM);
      this.style.top = "-1000px";
      this.style.left = "-1000px";
      this.style.display = "";
      const height = this.clientHeight;
      var rect = element.getBoundingClientRect();
      const top = window.scrollY + rect.bottom;
      const bottom = top + height;
      if (bottom >= window.innerHeight) {
        this.style.top = rect.top - height + "px";
      } else {
        this.style.top = top + "px";
      }
      this.style.left = window.scrollX + rect.left + "px";
    }
  }
  belowElementInScrollingContainer(element, DOM) {
    // find if there's a scrolling container and move ourselves to that 

    const container = findScrollingContainer(element);
    this.innerHTML = "";
    container.appendChild(this);
    // find the relative position 
    this.style.top = "-1000px";
    this.style.left = "-1000px";
    if (typeof DOM === "string") {
      this.innerHTML = DOM;
    } else {
      this.appendChild(DOM);
    }
    this.style.display = "";

    // where is the container on the page
    const containerRect = container.getBoundingClientRect(),
      // where is the element we are positioning next to on the page
      elementRect = element.getBoundingClientRect(),
      // how big is the tooltip
      tooltipRect = this.getBoundingClientRect();
    const containerStyles = window.getComputedStyle(container);
    // how much room is there 

    // where would the tooltip's bottom reach in the viewport 
    const howMuchPastTheBottom = elementRect.bottom + tooltipRect.height - window.innerHeight;
    const howMuchAboveTheTop = elementRect.top - tooltipRect.height;
    const scrollingAdjustment = container === document.documentElement ? 0 : container.scrollTop;

    // if the tooltip wouldn't be visible "down" 
    if (howMuchPastTheBottom <= 0 || howMuchAboveTheTop < 0) {
      const topFromContainer = elementRect.bottom - containerRect.top - parseFloat(containerStyles.borderTopWidth, 10);
      this.style.top = topFromContainer + scrollingAdjustment + "px";
    } else {
      const viewPortPosition = elementRect.top - tooltipRect.height;
      const posInContainer = viewPortPosition - containerRect.top - parseFloat(containerStyles.borderTopWidth, 10);
      const posInContainerAccountingForScrolling = posInContainer + scrollingAdjustment;
      this.style.top = posInContainerAccountingForScrolling + "px";
    }
    let leftFromContainer = elementRect.left - containerRect.left;
    if (elementRect.left + tooltipRect.width > window.innerWidth) {
      leftFromContainer = elementRect.right - containerRect.left - tooltipRect.width;
    }
    this.style.left = leftFromContainer + "px";
  }
  rightOfElementInScrollingContainer(element, DOM) {
    // find if there's a scrolling container and move ourselves to that 
    const container = findScrollingContainer(element);
    this.innerHTML = "";
    container.appendChild(this);
    // find the relative position 
    this.style.top = "-1000px";
    this.style.left = "-1000px";
    if (typeof DOM === "string") {
      this.innerHTML = DOM;
    } else {
      this.appendChild(DOM);
    }
    this.style.display = "";

    // where is the container on the page
    const containerRect = container.getBoundingClientRect(),
      // where is the element we are positioning next to on the page
      elementRect = element.getBoundingClientRect(),
      // how big is the tooltip
      tooltipRect = this.getBoundingClientRect();
    const containerStyles = window.getComputedStyle(container);
    // how much room is there 

    // where would the tooltip's bottom reach in the viewport 
    elementRect.top + tooltipRect.height;
    const scrollingAdjustment = container === document.documentElement ? 0 : container.scrollTop;

    // if the tooltip wouldn't be visible "down" 
    /*if(bottomInWindow > window.innerHeight) {
      const viewPortPosition = ( elementRect.top - tooltipRect.height );
      const posInContainer = viewPortPosition - containerRect.top -  parseFloat( containerStyles.borderTopWidth, 10);
      const posInContainerAccountingForScrolling = posInContainer + scrollingAdjustment;
      this.style.top = ( posInContainerAccountingForScrolling )+"px";
    } else {*/
    const topFromContainer = elementRect.top - containerRect.top - parseFloat(containerStyles.borderTopWidth, 10);
    this.style.top = topFromContainer + scrollingAdjustment + "px";
    //}

    const leftFromContainer = elementRect.right - containerRect.left;
    this.style.left = leftFromContainer + "px";
  }
  centeredBelowElement(element, html) {
    if (arguments.length > 1) {
      this.style.top = "-1000px";
      this.style.left = "-1000px";
      this.innerHTML = html;
      this.style.display = "";
      const tooltipRect = this.getBoundingClientRect();
      var rect = element.getBoundingClientRect();
      this.style.top = window.scrollY + rect.bottom + "px";
      this.style.left = window.scrollX + rect.left + rect.width / 2 - tooltipRect.width / 2 + "px";
    }
  }
  topRightOnElementBottomRight(element, html) {
    if (arguments.length > 1) {
      this.style.top = "-1000px";
      this.style.left = "-1000px";
      if (typeof html === "string") {
        this.innerHTML = html;
      } else {
        this.innerHTML = "";
        this.appendChild(html);
      }
      this.style.display = "";
      const tooltipRect = this.getBoundingClientRect();
      const rect = element.getBoundingClientRect();
      this.style.top = window.scrollY + rect.bottom + "px";
      this.style.left = window.scrollX + rect.left + rect.width - tooltipRect.width + "px";
    }
  }
  leftElement(event) {
    this.style.display = "none";
  }
}
customElements.define("simple-tooltip", SimpleTooltip);
function findScrollingContainer(element) {
  let cur = element.parentElement;
  while (cur && cur.scrollHeight === cur.clientHeight) {
    cur = cur.parentElement;
  }
  if (!cur) {
    return document.body;
  } else {
    return cur;
  }
}

// create global tooltip reference

const TOOLTIP$4 = new SimpleTooltip();
document.body.append(TOOLTIP$4);
class AutoCompleteSuggestions extends canStacheElement {
  static view = `
        
        <ul class="max-h-80 overflow-y-auto">
            {{# if(this.data.length) }}
                {{# for(item of this.data) }}
                    <li class="px-2 hover:bg-blue-75 cursor-pointer" on:click="this.add(item)">{{item}}</li>
                {{/ for }}
            {{ else }}
                <li>No matches</li>
            {{/ if }}
        </ul>
    `;
}
customElements.define("auto-complete-suggestions", AutoCompleteSuggestions);
class AutoComplete extends canStacheElement {
  static view = `
        <div class="flex gap-2 align-middle flex-wrap">
            {{# for(item of this.selected) }}
                <div class="border-neutral-800 border-solid border rounded-md whitespace-nowrap">
                    <label class="inline p-1">{{item}}</label>
                    <button class="text-red-500 text-sm py-1 px-2 bg-neutral-30 font-semibold rounded-r shadow-sm hover:bg-neutral-40" on:click="this.remove(item, scope.event)">x</button>
                </div>
            {{/ for }}
            <input class="form-border rounded-md px-1 placeholder:italic placeholder:text-slate-400" 
                placeholder="{{this.inputPlaceholder}}"
                on:focus="this.suggestItems(scope.element.value)"
                on:input="this.suggestItems(scope.element.value)">
        </div>
    `;
  static props = {
    data: {
      type: canType_1_1_6_canType.Any
    },
    selected: {
      type: canType_1_1_6_canType.Any
    },
    showingSuggestions: {
      type: Boolean,
      default: false
    }
  };
  remove(item, event) {
    event.preventDefault();
    this.selected = this.selected.filter(selectedItem => {
      return selectedItem != item;
    });
  }
  add(item) {
    this.selected = [...this.selected, item];
    this.querySelector("input").value = "";
    this.stopShowingSuggestions();
  }
  suggestItems(searchTerm) {
    const matches = this.data.filter(item => {
      return item.toLowerCase().includes(searchTerm.toLowerCase()) && !this.selected.includes(item);
    });
    this.showingSuggestions = true;
    // this could be made more efficient, but is probably ok
    TOOLTIP$4.belowElementInScrollingContainer(this, new AutoCompleteSuggestions().initialize({
      searchTerm,
      data: matches,
      add: this.add.bind(this)
    }));
  }
  connected() {
    // handle when someone clicks off the element
    this.listenTo(window, "click", event => {
      // if we aren't showing, don't worry about it
      if (!this.showingSuggestions) {
        return;
      }
      // do nothing if the input was clicked on
      if (this.querySelector("input") === event.target) {
        return;
      }
      // do nothing if the TOOLTIP was clicked
      if (TOOLTIP$4.contains(event.target)) {
        return;
      }
      this.stopShowingSuggestions();
    });
  }
  stopShowingSuggestions() {
    TOOLTIP$4.leftElement();
    this.showingSuggestions = false;
  }
}
customElements.define("auto-complete", AutoComplete);

let StatusFilter$1 = class StatusFilter extends canStacheElement {
  static view = `
    <auto-complete 
        data:from="this.statuses" 
        selected:bind="this.selectedStatuses"
        inputPlaceholder:from="this.inputPlaceholder"></auto-complete>
    
    `;
  static props = {
    statuses: {
      get default() {
        return [];
      }
    },
    inputPlaceholder: String,
    param: String,
    selectedStatuses: undefined
  };
};
customElements.define("status-filter", StatusFilter$1);

// TODO: I think this file is no longer used
class StatusFilter extends canStacheElement {
  static view = `
    <auto-complete 
        data:from="this.statuses" 
        selected:bind="this.statusesToShow"
        inputPlaceholder:raw="Search for statuses"></auto-complete>
    
    `;
  static props = {
    statuses: {
      get default() {
        return [];
      }
    },
    statusesToShow: {
      value({
        resolve,
        lastSet,
        listenTo
      }) {
        let currentValue;
        updateValue(new URL(window.location).searchParams.get("statusesToShow"));
        listenTo(lastSet, value => {
          updateValue(value);
        });
        function updateValue(value) {
          if (!value) {
            value = "";
          } else if (Array.isArray(value)) {
            value = value.join(",");
          }
          updateUrlParam("statusesToShow", value, "");
          currentValue = value === "" ? [] : value.split(",");
          resolve(currentValue);
        }
      }
    }
  };
}
customElements.define("status-filter-only", StatusFilter);

const DAY_IN_MS$1 = 1000 * 60 * 60 * 24;
const TOOLTIP$3 = new SimpleTooltip();
document.body.append(TOOLTIP$3);
let showingObject = null;
const dateFormatter = new Intl.DateTimeFormat('en-US', {
  day: "numeric",
  month: "short"
});
function prettyDate(date) {
  return date ? dateFormatter.format(date) : "";
}
function wasReleaseDate(release) {
  const current = release.due;
  const was = release.lastPeriod && release.lastPeriod.due;
  if (was && current - DAY_IN_MS$1 > was) {
    return " (" + prettyDate(was) + ")";
  } else {
    return "";
  }
}
function wasStartDate(release) {
  const current = release.start;
  const was = release.lastPeriod && release.lastPeriod.start;
  if (was && current - DAY_IN_MS$1 > was) {
    return " (" + prettyDate(was) + ")";
  } else {
    return "";
  }
}
function showTooltipContent(element, content) {
  TOOLTIP$3.belowElementInScrollingContainer(element, content);
  TOOLTIP$3.querySelector(".remove-button").onclick = () => {
    showingObject = null;
    TOOLTIP$3.leftElement();
  };
}
function showTooltip(element, issue) {
  console.log(issue);
  if (showingObject === issue) {
    showingObject = null;
    TOOLTIP$3.leftElement();
    return;
  }
  showingObject = issue;
  const make = (issue, workPart) => {
    const breakdownPart = issue.rollupStatuses[workPart];
    return `<div class="p-2">
            <div class="release_box_subtitle_wrapper">
                    <span class="release_box_subtitle_key color-text-and-bg-${breakdownPart.status}">
                        &nbsp;${workPart.toUpperCase()}&nbsp;
                    </span>
                    ${issue[workPart + "Status"] !== "unknown" ? `<span class="release_box_subtitle_value">
                            ${prettyDate(breakdownPart.start)}
                            ${wasStartDate(breakdownPart)}
                            </span><span>-</span>
                            <span class="release_box_subtitle_value">
                            ${prettyDate(breakdownPart.due)}
                            ${wasReleaseDate(breakdownPart)}
                        </span>` : ''}
            </div>
            ${breakdownPart.statusData?.warning === true ? `<div class="color-bg-warning">${breakdownPart.statusData.message}</div>` : ""}
            ${breakdownPart.status !== "unknown" ? `<p>Start: <a href="${breakdownPart?.startFrom?.reference?.url}" target="_blank" class="link">
                    ${breakdownPart?.startFrom?.reference?.summary}</a>'s 
                    ${breakdownPart?.startFrom?.message}
                </p>
                <p>End: <a href="${breakdownPart?.dueTo?.reference?.url}" target="_blank" class="link">
                    ${breakdownPart?.dueTo?.reference?.summary}</a>'s
                    ${breakdownPart?.dueTo?.message}
                </p>` : ''}
            
        </div>`;
  };
  const DOM = document.createElement("div");
  if (issue.rollupStatuses) {
    const rollupData = issue.rollupStatuses.rollup;
    DOM.innerHTML = `
        <div class='flex remove-button pointer' style="justify-content: space-between">
            <a class="${issue.url ? "link" : ""} text-lg font-bold"
                href="${issue.url || ''}" target="_blank">${issue.summary}</a>
            <span>❌</span>
        </div>
        <a class="explore link">Show Children</a>
        ${/*issue.dateData.rollup*/""}
        ${rollupData?.statusData?.warning === true ? `<div class="color-bg-warning">${rollupData.statusData.message}</div>` : ""}
        ${issue.rollupStatuses.rollup ? make(issue, "rollup") : ""}
        ${issue.rollupStatuses.dev ? make(issue, "dev") : ""}
        ${issue.rollupStatuses.qa ? make(issue, "qa") : ""}
        ${issue.rollupStatuses.uat ? make(issue, "uat") : ""}
        `;

    //this connects a lot to routing logic ...
    let exploreUrl = new URL(window.location.href);
    exploreUrl.searchParams.set('jql', 'issue = ' + issue.key);
    exploreUrl.searchParams.set('loadChildren', 'true');
    exploreUrl.searchParams.set('childJQL', '');
    exploreUrl.searchParams.delete('statusesToShow');
    exploreUrl.searchParams.delete('statusesToRemove');
    exploreUrl.searchParams.delete('releasesToShow');
    exploreUrl.searchParams.delete('groupBy');
    const explore = DOM.querySelector(".explore");
    explore.href = exploreUrl.href;
  } else {
    // "Planning" epics might not have this data
    DOM.innerHTML = `
        <div class='flex remove-button pointer gap-2' style="justify-content: space-between">
            <a class="${issue.url ? "link" : ""} text-lg font-bold"
                href="${issue.url || ''}" target="_blank">${issue.summary}</a>
            <span>❌</span>
        </div>`;
  }
  showTooltipContent(element, DOM);
}

/**
 * Type guard to determine if IssueOrRelease is DerivedIssue
 * @param {IssueOrRelease} issueOrRelease
 * @returns {issueOrRelease is DerivedIssue}
 */
function isDerivedIssue(issueOrRelease) {
    return issueOrRelease.type !== "Release";
}
// =======================
// Now define how one would get the parents from these items
/**
 * Gets the parent's from some issue type. We probably need some way types can provide this.
 * @param {IssueOrRelease} issueOrRelease
 * @returns {string[]}
 */
function getParentKeys(issueOrRelease) {
    const parents = [];
    if (isDerivedIssue(issueOrRelease)) {
        if (issueOrRelease.parentKey) {
            parents.push(issueOrRelease.parentKey);
        }
        if (issueOrRelease.releases) {
            parents.push(...issueOrRelease.releases.map((release) => release.key));
        }
    }
    return parents;
}
// =======================
// Now need some way of building the hierarchy from the reporting topology
/**
 * @param {{type: string, hierarchyLevel?: number}}
 * @returns {(issue: IssueOrRelease) => boolean}
 */
function getHierarchyTest({ type, hierarchyLevel, }) {
    if (hierarchyLevel == null || hierarchyLevel === Infinity) {
        return (issue) => {
            return issue.type === type;
        };
    }
    else {
        return (issue) => {
            return isDerivedIssue(issue) && issue.hierarchyLevel === hierarchyLevel;
        };
    }
}
/**
 *
 * @param {IssueOrRelease[]} issuesOrReleases
 * @param {{type: string, hierarchyLevel: number}[]} rollupTypesAndHierarchies
 * @returns {IssueOrRelease[][]}
 */
function groupIssuesByHierarchyLevelOrType(issuesOrReleases, rollupTypesAndHierarchies) {
    return rollupTypesAndHierarchies
        .map((hierarchy) => {
        return issuesOrReleases.filter(getHierarchyTest(hierarchy));
    })
        .reverse();
}
// ====================
// With that Reporting topology, we are able to build a new mapping of parent / child relationships
// These objects are what the functions should be using to rollup and such
/**
 * Takes a bottom-up grouped hierarchy and adds
 * reportingHierarchy = {childKeys: [keys], parentKeys: [keys], depth: number}}
 * to each issue.
 *
 * Returns a new bottom-up grouped hierarchy of issues or releases
 * @param {IssueOrRelease[][]} groupedHierarchy
 * @returns {ReportingHierarchyIssueOrRelease[][]}
 */
function addChildrenFromGroupedHierarchy(groupedHierarchy) {
    // we should label each issue with its virtual hierarchy ... then we can make sure
    // children add themselves to the right parents ... we can probably do this in one pass as things are ordered
    // {PARENT_KEY: {allChildren: [issues..], index}}
    const parentKeyToChildren = {};
    const topDownGroups = [...groupedHierarchy].reverse();
    const newGroups = [];
    for (let g = 0; g < topDownGroups.length; g++) {
        let group = topDownGroups[g];
        let newGroup = [];
        newGroups.push(newGroup);
        for (let issue of group) {
            let copy = {
                ...issue,
                reportingHierarchy: { depth: g, childKeys: [], parentKeys: [] },
            };
            newGroup.push(copy);
            parentKeyToChildren[issue.key] = copy.reportingHierarchy;
            if (g > 0) {
                const parents = getParentKeys(issue);
                for (let parentKey of parents) {
                    const parentData = parentKeyToChildren[parentKey];
                    // make sure your parent is up one level in the issue hierarchy
                    if (parentData && parentData.depth === g - 1) {
                        parentData.childKeys.push(issue.key);
                        copy.reportingHierarchy.parentKeys.push(parentKey);
                    }
                }
            }
        }
    }
    return newGroups.reverse();
}
/**
 *
 * @param {IssueOrRelease[]} issuesOrReleases
 * @param {{type: string, hierarchyLevel: number}[]} rollupTypesAndHierarchies
 * @returns {ReportingHierarchyIssueOrRelease[]}
 */
function addReportingHierarchy(issuesOrReleases, rollupTypesAndHierarchies) {
    const groups = groupIssuesByHierarchyLevelOrType(issuesOrReleases, rollupTypesAndHierarchies);
    return addChildrenFromGroupedHierarchy(groups).flat(1);
}
/**
 * @param {ReportingHierarchyIssueOrRelease[][]} groupedHierarchy
 * @returns {(keyOrIssueOrRelease: ReportingHierarchyIssueOrRelease) => IssueOrRelease[]}
 */
function makeGetChildrenFromGrouped(groupedHierarchy) {
    const keyToIssue = new Map();
    for (let group of groupedHierarchy) {
        for (let issue of group) {
            keyToIssue.set(issue.key, issue);
        }
    }
    const getIssue = keyToIssue.get.bind(keyToIssue);
    /**
     * @param {ReportingHierarchyIssueOrRelease} keyOrIssueOrRelease
     * @return {IssueOrRelease[][]}
     */
    return function getChildren(keyOrIssueOrRelease) {
        return keyOrIssueOrRelease.reportingHierarchy.childKeys
            .map(getIssue)
            .filter((issue) => issue !== undefined);
    };
}
/**
 *
 * @param {ReportingHierarchyIssueOrRelease[][]} groupedHierarchy
 * @param {RollupGroupedHierarchyOptions} options
 * @returns {RollupResponse}
 */
function rollupGroupedReportingHierarchy(groupedHierarchy, options) {
    // We should add proper defaults here
    let { createMetadataForHierarchyLevel = () => ({}), createSingleNodeRollupData, createRollupDataFromParentAndChild = () => ({}), finalizeMetadataForHierarchyLevel = () => { }, getChildren, } = options;
    // we can build this ourselves if needed ... but costs memory.  Nice if we don't have to do this.
    if (!getChildren) {
        getChildren = makeGetChildrenFromGrouped(groupedHierarchy);
    }
    const rollupDataByKey = {};
    function getChildrenRollupData(issue) {
        return getChildren(issue).map((childIssue) => {
            const result = rollupDataByKey[childIssue.key];
            if (!result) {
                throw new Error("unable to find previously calculated child data (" +
                    childIssue.key +
                    "). Is your hierarchy in the right order?");
            }
            return result;
        });
    }
    const rollupResponseData = [];
    for (let hierarchyLevel = 0; hierarchyLevel < groupedHierarchy.length; hierarchyLevel++) {
        let issues = groupedHierarchy[hierarchyLevel];
        if (!issues) {
            continue;
        }
        let hierarchyData = (rollupResponseData[hierarchyLevel] = {
            rollupData: [],
            metadata: createMetadataForHierarchyLevel(hierarchyLevel, issues),
        });
        for (let issue of issues) {
            // get children rollup data for issue
            let children = getChildrenRollupData(issue);
            let rollupData = createRollupDataFromParentAndChild(issue, children, hierarchyLevel, hierarchyData.metadata);
            hierarchyData.rollupData.push(rollupData);
            rollupDataByKey[issue.key] = rollupData;
            // associate it with the issue
        }
        //onEndOfHierarchy(issueTypeData);
        finalizeMetadataForHierarchyLevel(hierarchyData.metadata, hierarchyData.rollupData);
    }
    return rollupResponseData;
}
/**
 * This "MUST" have the deepest children in the bottom
 * @param {IssueOrRelease[][]} groupedHierarchy
 * @param {RollupGroupedHierarchyOptions} options
 * @returns {RollupResponse}
 */
function rollupGroupedHierarchy(groupedHierarchy, options) {
    // we add this children thing (which is dumb) to handle knowing what
    // a release's children are ...
    // there are probably better ways of doing this without having to
    // calculate it every time
    const reportingHierarchy = addChildrenFromGroupedHierarchy(groupedHierarchy);
    return rollupGroupedReportingHierarchy(reportingHierarchy, options);
}
/**
 *
 * @param {ReportingHierarchyIssueOrRelease[]} issuesOrReleases
 * @returns {(keyOrIssueOrRelease: ReportingHierarchyIssueOrRelease) => ReportingHierarchyIssueOrRelease[]}
 */
function makeGetChildrenFromReportingIssues(issuesOrReleases) {
    const keyToIssue = new Map();
    for (let issue of issuesOrReleases) {
        keyToIssue.set(issue.key, issue);
    }
    const getIssue = keyToIssue.get.bind(keyToIssue);
    /**
     * @param {ReportingHierarchyIssueOrRelease} keyOrIssueOrRelease
     * @return {ReportingHierarchyIssueOrRelease[]}
     */
    return function getChildren(keyOrIssueOrRelease) {
        return keyOrIssueOrRelease.reportingHierarchy.childKeys
            .map(getIssue)
            .filter((issue) => issue !== undefined);
    };
}
/**
 *
 * @param {IssueOrRelease[][]} groupedHierarchy
 * @param {RollupResponse} rollupDatas
 * @param {string} key
 * @returns {IssueOrRelease[][]}
 */
function zipRollupDataOntoGroupedData(groupedHierarchy, rollupDatas, key) {
    const newGroups = [];
    for (let g = 0; g < groupedHierarchy.length; g++) {
        let group = groupedHierarchy[g];
        let newIssues = [];
        newGroups.push(newIssues);
        for (let i = 0; i < group.length; i++) {
            let issue = group[i];
            let clone = {
                ...issue,
                [key]: rollupDatas[g].rollupData[i],
            };
            newIssues.push(clone);
        }
    }
    return newGroups;
}

const methods$1 = {
  parentFirstThenChildren: parentFirstThenChildren$1,
  childrenOnly: childrenOnly$1,
  childrenFirstThenParent: childrenFirstThenParent$1,
  widestRange: widestRange$1,
  parentOnly: parentOnly$1
};

/**
 * 
 * @param {Array<import("../rollup").IssuesOrReleases>} issuesOrReleases Starting from low to high
 * @param {Array<String>} methodNames Starting from low to high
 * @return {Array<RollupDateData>}
 */
function rollupDates(groupedHierarchy, methodNames, {
  getChildren
} = {}) {
  return rollupGroupedHierarchy(groupedHierarchy, {
    createRollupDataFromParentAndChild(issueOrRelease, children, hierarchyLevel, metadata) {
      const methodName = methodNames[hierarchyLevel] || "childrenFirstThenParent";
      const method = methods$1[methodName];
      return method(issueOrRelease, children);
    }
  });
}

/**
 * @typedef {{
 *   due: Date,
 *   dueTo: {message: String, reference: Object},
 *   start: Date,
 *   startFrom: {message: String, reference: Object}
 * } | {}} RollupDateData
 */

/**
 * @typedef {import("../rollup").IssueOrRelease & {rollupDates: RollupDateData}} RolledupDatesReleaseOrIssue
 */

/**
 * 
 * @param {import("../rollup").IssuesOrReleases} issuesOrReleases 
 * @param {{type: String, hierarchyLevel: Number, calculation: String}} rollupTimingLevelsAndCalculations 
 * @return {Array<RolledupDatesReleaseOrIssue>}
 */
function addRollupDates(issuesOrReleases, rollupTimingLevelsAndCalculations) {
  const groupedIssues = groupIssuesByHierarchyLevelOrType(issuesOrReleases, rollupTimingLevelsAndCalculations);
  const rollupMethods = rollupTimingLevelsAndCalculations.map(rollupData => rollupData.calculation).reverse();
  const rolledUpDates = rollupDates(groupedIssues, rollupMethods);
  const zipped = zipRollupDataOntoGroupedData(groupedIssues, rolledUpDates, "rollupDates");
  return zipped.flat();
}
function makeQuickCopyDefinedProperties(keys) {
  return function copy(source) {
    const obj = {};
    for (let key of keys) {
      if (source[key] !== undefined) {
        obj[key] = source[key];
      }
    }
    return obj;
  };
}
// makes testing easier if we don't create a bunch of "undefined" properties
const getStartData$1 = makeQuickCopyDefinedProperties(["start", "startFrom"]);
const getDueData$1 = makeQuickCopyDefinedProperties(["due", "dueTo"]);
function mergeStartAndDueData$3(records) {
  const startData = records.filter(record => record?.start).map(getStartData$1);
  const dueData = records.filter(record => record?.due).map(getDueData$1);
  return {
    ...(startData.length ? startData.sort((d1, d2) => d1.start - d2.start)[0] : {}),
    ...(dueData.length ? dueData.sort((d1, d2) => d2.due - d1.due)[0] : {})
  };
}

/**
 * 
 * @param {import("../rollup").IssueOrRelease} parentIssueOrRelease 
 * @param {*} childrenRollups 
 * @returns 
 */
function parentFirstThenChildren$1(parentIssueOrRelease, childrenRollups) {
  const childData = mergeStartAndDueData$3(childrenRollups);
  const parentData = parentIssueOrRelease?.derivedTiming;
  const parentHasStart = parentData?.start;
  const parentHasDue = parentData?.due;
  const combinedData = {
    start: parentHasStart ? parentData?.start : childData?.start,
    startFrom: parentHasStart ? parentData?.startFrom : childData?.startFrom,
    due: parentHasDue ? parentData?.due : childData?.due,
    dueTo: parentHasDue ? parentData?.dueTo : childData?.dueTo
  };
  return {
    ...getStartData$1(combinedData),
    ...getDueData$1(combinedData)
  };
}
function childrenOnly$1(parentIssueOrRelease, childrenRollups) {
  return mergeStartAndDueData$3(childrenRollups);
}
function parentOnly$1(parentIssueOrRelease, childrenRollups) {
  return {
    ...getStartData$1(parentIssueOrRelease.derivedTiming),
    ...getDueData$1(parentIssueOrRelease.derivedTiming)
  };
}
function childrenFirstThenParent$1(parentIssueOrRelease, childrenRollups) {
  if (childrenRollups.length) {
    return mergeStartAndDueData$3(childrenRollups);
  }
  return mergeStartAndDueData$3([parentIssueOrRelease.derivedTiming]);
}
function widestRange$1(parentIssueOrRelease, childrenRollups) {
  return mergeStartAndDueData$3([parentIssueOrRelease.derivedTiming, ...childrenRollups]);
}

/**
 * This module is repsonsible for determining the correct workType ("design", "dev", "qa", "uat")
 * and statusType ("qa", "uat", "todo", "done", "blocked") for an issue.
 */
const workType = ["design", "dev", "qa", "uat"];
const workTypes = workType;
const inQAStatus$1 = { qa: true, "in qa": true, "qa complete": true };
const inPartnerReviewStatus$1 = { "partner review": true, uat: true };
const inDoneStatus$1 = { done: true, cancelled: true };
const blockedStatus$1 = { blocked: true, delayed: true };
const inIdeaStatus$1 = { idea: true, "to do": true, open: true };
const statusCategoryMap = (function () {
    const items = [
        ["qa", inQAStatus$1],
        ["uat", inPartnerReviewStatus$1],
        ["todo", inIdeaStatus$1],
        ["done", inDoneStatus$1],
        ["blocked", blockedStatus$1],
    ];
    const statusCategoryMap = {};
    for (let [category, statusMap] of items) {
        for (let prop in statusMap) {
            const status = prop;
            statusCategoryMap[status] = category;
        }
    }
    return statusCategoryMap;
})();
function getStatusTypeDefault(normalizedIssue) {
    const statusCategory = statusCategoryMap[(normalizedIssue?.status || "").toLowerCase()];
    if (statusCategory) {
        return statusCategory;
    }
    else {
        return "dev";
    }
}
const workPrefix = workType.map((wt) => wt + ":");
function getWorkTypeDefault(normalizedIssue) {
    let wp = workPrefix.find((wp) => (normalizedIssue?.summary || "").toLowerCase().indexOf(wp) === 0);
    if (wp) {
        return wp.slice(0, -1);
    }
    wp = workType.find((wt) => normalizedIssue.labels?.map((label) => label.toLowerCase()).includes(wt));
    if (wp) {
        return wp;
    }
    return "dev";
}
function getWorkStatus(normalizedIssue, { getStatusType = getStatusTypeDefault, getWorkType = getWorkTypeDefault, } = {}) {
    return {
        statusType: getStatusType(normalizedIssue),
        workType: getWorkType(normalizedIssue),
    };
}

// Formats this takes on:
// 2023-02-17T16:58:00.000Z
// 2024-04-19T16:43:17.181-0400
// new Date("2024-05-27") -> date in GMT 0, not in the local timezone. This can mean reporting the wrong date.
function parseDateISOString(s) {
  if (!s) return s;

  // if this is a date already, assume we need to correct timezone
  if (s instanceof Date) {
    // fix timezone to UTC
    return new Date(s.getTime() + s.getTimezoneOffset() * 60 * 1000);
  }
  if (s.split(/\D/).length === 3) {
    throw new Error("Unable to parse " + s);
  }
  return new Date(s);
}
function parseDateIntoLocalTimezone(s) {
  if (!s) {
    return s;
  }
  let ds = s.split(/\D/).map(s => parseInt(s));
  ds[1] = ds[1] - 1; // adjust month
  return new Date(...ds);
}
const DAY_IN_MS = 1000 * 60 * 60 * 24;

function getSummaryDefault({ fields, }) {
    if ("summary" in fields) {
        return fields.summary;
    }
    return fields.Summary;
}
function getDueDateDefault({ fields }) {
    return fields["Due date"] || null;
}
function getStartDateDefault({ fields }) {
    return fields["Start date"] || null;
}
function getStoryPointsDefault({ fields, }) {
    return fields["Story points"] || null;
}
function getStoryPointsMedianDefault({ fields, }) {
    return fields["Story points median"] || null;
}
function getRankDefault({ fields }) {
    return fields?.Rank || null;
}
function getConfidenceDefault({ fields, }) {
    return fields["Story points confidence"] || fields?.Confidence || null;
}
function getHierarchyLevelDefault({ fields, }) {
    const issueType = "Issue Type" in fields ? fields["Issue Type"] : fields.issuetype;
    if (typeof issueType === "string") {
        return parseInt(issueType, 10);
    }
    return issueType.hierarchyLevel;
}
function getIssueKeyDefault({ key }) {
    return key;
}
function getParentKeyDefault({ fields, }) {
    if (fields?.Parent?.key) {
        return fields.Parent.key;
    }
    if (typeof fields["Parent Link"] === "string") {
        return fields["Parent Link"];
    }
    // this last part is probably a mistake ...
    return fields["Parent Link"]?.data?.key || null;
}
function getUrlDefault({ key, }) {
    return "javascript://";
}
function getTeamKeyDefault({ key, }) {
    return key.replace(/-.*/, "");
}
function getTypeDefault({ fields, }) {
    const issueType = "Issue Type" in fields ? fields["Issue Type"] : fields.issuetype;
    if (typeof issueType === "string") {
        return issueType;
    }
    return issueType.name;
}
function getSprintsDefault({ fields, }) {
    if (!fields.Sprint) {
        return null;
    }
    return fields.Sprint.map((sprint) => {
        return {
            name: sprint.name,
            startDate: parseDateISOString(sprint["startDate"]),
            endDate: parseDateISOString(sprint["endDate"]),
        };
    });
}
function getStatusDefault({ fields, }) {
    if (typeof fields?.Status === "string") {
        return fields.Status;
    }
    return fields?.Status?.name || null;
}
function getLabelsDefault({ fields, }) {
    return fields?.Labels || [];
}
function getStatusCategoryDefault({ fields, }) {
    if (typeof fields?.Status === "string") {
        return null;
    }
    return fields?.Status?.statusCategory?.name || null;
}
function getReleasesDefault({ fields, }) {
    let fixVersions = fields["Fix versions"];
    if (!fixVersions) {
        return [];
    }
    if (!Array.isArray(fixVersions)) {
        fixVersions = [fixVersions];
    }
    return fixVersions.map(({ name, id }) => {
        return {
            name,
            id,
            type: "Release",
            key: "SPECIAL:release-" + name,
            summary: name,
        };
    });
}
function getVelocityDefault(teamKey) {
    return 21;
}
function getParallelWorkLimitDefault(teamKey) {
    return 1;
}
function getDaysPerSprintDefault(teamKey) {
    return 10;
}

function normalizeParent(issue, { getSummary = getSummaryDefault, getHierarchyLevel = getHierarchyLevelDefault, getType = getTypeDefault, } = {}) {
    return {
        summary: getSummary(issue),
        hierarchyLevel: getHierarchyLevel(issue),
        type: getType(issue),
    };
}
function normalizeIssue(issue, { getIssueKey = getIssueKeyDefault, getParentKey = getParentKeyDefault, getConfidence = getConfidenceDefault, getDueDate = getDueDateDefault, getHierarchyLevel = getHierarchyLevelDefault, getStartDate = getStartDateDefault, getStoryPoints = getStoryPointsDefault, getStoryPointsMedian = getStoryPointsMedianDefault, getType = getTypeDefault, getTeamKey = getTeamKeyDefault, getUrl = getUrlDefault, getVelocity = getVelocityDefault, getDaysPerSprint = getDaysPerSprintDefault, getParallelWorkLimit = getParallelWorkLimitDefault, getSprints = getSprintsDefault, getStatus = getStatusDefault, getStatusCategory = getStatusCategoryDefault, getLabels = getLabelsDefault, getReleases = getReleasesDefault, getRank = getRankDefault, getSummary = getSummaryDefault, } = {}) {
    const teamName = getTeamKey(issue);
    const velocity = getVelocity(teamName);
    const daysPerSprint = getDaysPerSprint(teamName);
    const parallelWorkLimit = getParallelWorkLimit(teamName);
    const totalPointsPerDay = velocity / daysPerSprint;
    const pointsPerDayPerTrack = totalPointsPerDay / parallelWorkLimit;
    return {
        // .summary can come from a "parent"'s fields
        // TODO check what this was supposed to be flag^v
        summary: getSummary(issue),
        key: getIssueKey(issue),
        parentKey: getParentKey(issue),
        confidence: getConfidence(issue),
        dueDate: parseDateIntoLocalTimezone(getDueDate(issue)),
        hierarchyLevel: getHierarchyLevel(issue),
        startDate: parseDateIntoLocalTimezone(getStartDate(issue)),
        storyPoints: getStoryPoints(issue),
        storyPointsMedian: getStoryPointsMedian(issue),
        type: getType(issue),
        sprints: getSprints(issue),
        team: {
            name: teamName,
            velocity,
            daysPerSprint,
            parallelWorkLimit,
            totalPointsPerDay,
            pointsPerDayPerTrack,
        },
        url: getUrl(issue),
        status: getStatus(issue),
        statusCategory: getStatusCategory(issue),
        labels: getLabels(issue),
        releases: getReleases(issue),
        rank: getRank(issue),
        issue,
    };
}
function allStatusesSorted(issues) {
    const statuses = issues.map((issue) => issue.status);
    return [...new Set(statuses)].sort();
}
function allReleasesSorted(issues) {
    const releases = issues
        .map((issue) => issue.releases.map((r) => r.name))
        .flat(1);
    return [...new Set(releases)].sort();
}

function monthDiff(dateFromSring, dateToString) {
  const dateFrom = new Date(dateFromSring);
  const dateTo = new Date(dateToString);
  return dateTo.getMonth() - dateFrom.getMonth() + 12 * (dateTo.getFullYear() - dateFrom.getFullYear());
}
function getQuartersAndMonths(startDate, endDate) {
  // figure out which quarters startDate and endDate are within
  const quarterStartDate = new Date(startDate.getFullYear(), Math.floor(startDate.getMonth() / 3) * 3);
  const lastQuarterEndDate = new Date(endDate.getFullYear(), Math.floor(endDate.getMonth() / 3) * 3 + 3);

  // keep track of release indexes
  const monthDiffResult = monthDiff(quarterStartDate, lastQuarterEndDate);
  const quarters = monthDiffResult / 3;
  if (!Number.isInteger(quarters)) {
    console.warn("Not an even number of quarters", monthDiffResult, "/ 3");
  }
  function month(d) {
    return d.toLocaleString('default', {
      month: 'short'
    });
  }
  const quartersList = [];
  const months = [];
  for (let i = 0; i < quarters; i++) {
    const firstMonth = new Date(quarterStartDate);
    firstMonth.setMonth(firstMonth.getMonth() + i * 3);
    const secondMonth = new Date(quarterStartDate);
    secondMonth.setMonth(secondMonth.getMonth() + i * 3 + 1);
    const thirdMonth = new Date(quarterStartDate);
    thirdMonth.setMonth(thirdMonth.getMonth() + +i * 3 + 2);
    quartersList.push({
      number: Math.floor(firstMonth.getMonth() / 3) + 1,
      name: "Q" + (Math.floor(firstMonth.getMonth() / 3) + 1)
    });
    months.push({
      first: true,
      name: month(firstMonth)
    });
    months.push({
      name: month(secondMonth)
    });
    months.push({
      last: true,
      name: month(thirdMonth)
    });
  }
  const lastDay = new Date(quarterStartDate);
  lastDay.setMonth(lastDay.getMonth() + monthDiffResult);
  return {
    quarters: quartersList,
    months,
    firstDay: quarterStartDate,
    lastDay
  };
}
function getCalendarHtml(startDate, endDate) {
  // figure out which quarters startDate and endDate are within
  const quarterStartDate = new Date(startDate.getFullYear(), Math.floor(startDate.getMonth() / 3) * 3);
  const lastQuarterEndDate = new Date(endDate.getFullYear(), Math.floor(endDate.getMonth() / 3) * 3 + 3);
  let result = '';

  // keep track of release indexes
  const monthDiffResult = monthDiff(quarterStartDate, lastQuarterEndDate);
  const quarters = monthDiffResult / 3;
  if (!Number.isInteger(quarters)) {
    console.warn("Not an even number of quarters", monthDiffResult, "/ 3");
  }
  function month(d) {
    return d.toLocaleString('default', {
      month: 'short'
    });
  }
  for (let i = 0; i < quarters; i++) {
    const firstMonth = new Date(quarterStartDate);
    firstMonth.setMonth(firstMonth.getMonth() + i * 3);
    const secondMonth = new Date(quarterStartDate);
    secondMonth.setMonth(secondMonth.getMonth() + i * 3 + 1);
    const thirdMonth = new Date(quarterStartDate);
    thirdMonth.setMonth(thirdMonth.getMonth() + +i * 3 + 2);
    result += `
			<div class="calendar">
				<div class="calendar_title">Q${Math.floor(firstMonth.getMonth() / 3) + 1}</div>
				<div class="calendar_month_wrapper">
					<div class="calendar_month ">
						<span class="calendar_month_name">${month(firstMonth)}</span>
						<span class="calendar_month_line"></span>
					</div>
					<div class="calendar_month dotted-left">
						<span class="calendar_month_name">${month(secondMonth)}</span>
						<span class="calendar_month_line"></span>
					</div>
					<div class="calendar_month dotted-left">
						<span class="calendar_month_name">${month(thirdMonth)}</span>
						<span class="calendar_month_line"></span>
					</div>
				</div>
			</div>
		`;
  }
  const lastDay = new Date(startDate);
  lastDay.setMonth(lastDay.getMonth() + monthDiffResult);
  return {
    html: result,
    firstDay: quarterStartDate,
    lastDay
  };
}

// https://yumbrands.atlassian.net/issues/?filter=10897

/*
import { getCalendarHtml, getQuarter, getQuartersAndMonths } from "./quarter-timeline.js";
import { howMuchHasDueDateMovedForwardChangedSince, DAY_IN_MS } from "./date-helpers.js";

const dateFormatter = new Intl.DateTimeFormat('en-US', { day: "numeric", month: "short" })

const inQAStatus = { "QA": true, "In QA": true };
const inDevStatus = { "In Development": true, "Development": true };
const inPartnerReviewStatus = { "Partner Review": true };
const inDoneStatus = { "Done": true };

import SimpleTooltip from "./shared/simple-tooltip.js";

const TOOLTIP = new SimpleTooltip();
document.body.append(TOOLTIP);*/

const percentCompleteTooltip = canStache_5_1_1_canStache(`
    <button class="remove-button">❌</button>
    <div class="grid gap-2" style="grid-template-columns: auto repeat(4, auto);">

            <div class="font-bold">Summary</div>
            <div class="font-bold">Percent Complete</div>
            <div class="font-bold">Completed Working Days</div>
            <div class="font-bold">Remaining Working Days</div>
            <div class="font-bold">Total Working Days</div>
        
            <div class="truncate max-w-96">{{this.issue.summary}}</div>
            <div class="text-right">{{this.getPercentComplete(this.issue)}}</div>
            <div class="text-right">{{this.round( this.issue.completionRollup.completedWorkingDays) }}</div>
            <div class="text-right">{{this.round(this.issue.completionRollup.remainingWorkingDays)}}</div>
            <div class="text-right">{{this.round(this.issue.completionRollup.totalWorkingDays)}}</div>
        
        {{# for(child of this.children) }}
       
            <div class="pl-4 truncate max-w-96"><a href="{{child.url}}" class="link">{{child.summary}}</a></div>
            <div class="text-right">{{this.getPercentComplete(child)}}</div>
            <div class="text-right">{{this.round(child.completionRollup.completedWorkingDays)}}</div>
            <div class="text-right">{{this.round(child.completionRollup.remainingWorkingDays)}}</div>
            <div class="text-right">{{this.round(child.completionRollup.totalWorkingDays)}}</div>
       
        {{/ for }}
   </div>
`);

// loops through and creates
class GanttGrid extends canStacheElement {
  static view = `
        <div style="display: grid; grid-template-columns: auto auto repeat({{this.quartersAndMonths.months.length}}, [col] 1fr); grid-template-rows: repeat({{this.gridRowData.length}}, auto)"
            class='p-2 mb-10'>
            <div></div><div></div>

            {{# for(quarter of this.quartersAndMonths.quarters) }}
                <div style="grid-column: span 3" class="text-center">{{quarter.name}}</div>
            {{ / for }}

            <div></div><div></div>
            {{# for(month of this.quartersAndMonths.months)}}
                <div class='border-b border-neutral-80 text-center'>{{month.name}}</div>
            {{/ for }}

            <!-- CURRENT TIME BOX -->
            <div style="grid-column: 3 / span {{this.quartersAndMonths.months.length}}; grid-row: 3 / span {{this.gridRowData.length}};">
                <div class='today' style="margin-left: {{this.todayMarginLeft}}%; width: 1px; background-color: orange; z-index: 1000; position: relative; height: 100%;"></div>
            </div>


            <!-- VERTICAL COLUMNS -->
            {{# for(month of this.quartersAndMonths.months)}}
                <div style="grid-column: {{ plus(scope.index, 3) }}; grid-row: 3 / span {{this.gridRowData.length}}; z-index: 10"
                    class='border-l border-b border-neutral-80 {{this.lastRowBorder(scope.index)}}'></div>
            {{/ for }}

            <!-- Each of the issues -->
            {{# for(data of this.gridRowData) }}
                {{# eq(data.type, "issue") }}
                
                    <div on:click='this.showTooltip(scope.event,data.issue)' 
                        class='pointer border-y-solid-1px-white text-right {{this.classForSpecialStatus(data.issue.rollupStatuses.rollup.status)}} truncate max-w-96 {{this.textSize}}'>
                        {{data.issue.summary}}
                    </div>
                    <div style="grid-column: 2" class="{{this.textSize}} text-right pointer"
                        on:click="this.showPercentCompleteTooltip(scope.event, data.issue)">{{this.getPercentComplete(data.issue)}}
                    </div>
                    {{ this.getReleaseTimeline(data.issue, scope.index) }}
                {{/ eq }}

                {{# eq(data.type, "parent") }}
                    <div on:click='this.showTooltip(scope.event,data.issue)' 
                        class='pointer border-y-solid-1px-white text-left font-bold {{this.classForSpecialStatus(data.issue.rollupStatuses.rollup.status)}} truncate max-w-96 {{this.textSize}}'>
                        {{data.issue.summary}}
                    </div>
                    <div style="grid-column: 2" class="{{this.textSize}} text-right pointer"
                        on:click="this.showPercentCompleteTooltip(scope.event, data.issue)">
                    </div>
                    {{ this.groupElement(data.issue, scope.index) }}
                {{/ }}
            {{/ for }}
        </div>
    `;
  static props = {
    breakdown: Boolean,
    showPercentComplete: {
      get default() {
        return !!localStorage.getItem("showPercentComplete");
      }
    }
  };
  get lotsOfIssues() {
    return this.primaryIssuesOrReleases.length > 20 && !this.breakdown;
  }
  get textSize() {
    return this.lotsOfIssues ? "text-xs pt-1 pb-0.5 px-1" : "p-1";
  }
  get bigBarSize() {
    return this.lotsOfIssues ? "h-4" : "h-6";
  }
  getPercentComplete(issue) {
    if (this.showPercentComplete) {
      return Math.round(issue.completionRollup.completedWorkingDays * 100 / issue.completionRollup.totalWorkingDays) + "%";
    } else {
      return "";
    }
  }
  showTooltip(event, issue) {
    makeGetChildrenFromReportingIssues(this.allIssuesOrReleases);
    showTooltip(event.currentTarget, issue, this.allIssuesOrReleases);
  }
  showPercentCompleteTooltip(event, issue) {
    const getChildren = makeGetChildrenFromReportingIssues(this.allIssuesOrReleases);

    // we should get all the children ...
    const children = getChildren(issue);
    showTooltipContent(event.currentTarget, percentCompleteTooltip({
      issue,
      children,
      getPercentComplete: this.getPercentComplete.bind(this),
      round: Math.round
    }));
  }
  classForSpecialStatus(status, issue) {
    if (status === "complete" || status === "blocked" || status === "warning") {
      return "color-text-" + status;
    } else {
      return "";
    }
  }
  plus(first, second) {
    return first + second;
  }
  lastRowBorder(index) {
    return index === this.quartersAndMonths.months.length - 1 ? "border-r-solid-1px-slate-900" : "";
  }
  get quartersAndMonths() {
    const rollupDates = this.primaryIssuesOrReleases.map(issue => issue.rollupStatuses.rollup);
    let {
      start,
      due
    } = mergeStartAndDueData$3(rollupDates);
    // nothing has timing
    if (!start) {
      start = new Date();
    }
    if (!due) {
      due = new Date(start.getTime() + 1000 * 60 * 60 * 24 * 90);
    }
    if (due < new Date()) {
      due = new Date(new Date().getTime() + 1000 * 60 * 60 * 24 * 90);
    }
    return getQuartersAndMonths(new Date(), due);
  }
  get todayMarginLeft() {
    const {
      firstDay,
      lastDay
    } = this.quartersAndMonths;
    const totalTime = lastDay - firstDay;
    return (new Date() - firstDay - 1000 * 60 * 60 * 24 * 2) / totalTime * 100;
  }
  get gridRowData() {
    // we need to check here b/c primaryIssueType and groupBy can't be made atomic easily
    if (this.groupBy === "parent" && this.primaryIssueType !== "Release") {
      // get all the parents ...

      let obj = Object.groupBy(this.primaryIssuesOrReleases, issue => issue.parentKey);
      let keyToAllIssues = Object.groupBy(this.allDerivedIssues, issue => issue.key);
      let parentKeys = Object.keys(obj);
      let parents = parentKeys.map(parentKey => {
        if (keyToAllIssues[parentKey]) {
          return keyToAllIssues[parentKey][0];
        } else if (obj[parentKey][0].issue.fields.Parent) {
          return normalizeParent(obj[parentKey][0].issue.fields.Parent);
        }
      }).filter(Boolean);
      if (parents.length && parents[0].rank) {
        parents.sort((p1, p2) => {
          return p1.rank > p2.rank ? 1 : -1;
        });
      }
      let parentsAndChildren = parents.map(parent => {
        return [{
          type: "parent",
          issue: parent
        }, ...obj[parent.key].map(issue => {
          return {
            type: "issue",
            issue
          };
        })];
      }).flat(1);
      return parentsAndChildren.length ? parentsAndChildren : this.primaryIssuesOrReleases;
    } else if (this.groupBy === "team" && this.primaryIssueType !== "Release") {
      let issuesByTeam = Object.groupBy(this.primaryIssuesOrReleases, issue => issue.team.name);
      const teams = Object.keys(issuesByTeam).map(teamName => {
        return {
          ...issuesByTeam[teamName][0].team,
          summary: teamName
        };
      });
      teams.sort((t1, t2) => {
        return t1.name > t2.name ? 1 : -1;
      });
      return teams.map(team => {
        return [{
          type: "parent",
          issue: team
        }, ...issuesByTeam[team.name].map(issue => {
          return {
            type: "issue",
            issue
          };
        })];
      }).flat(1);
    } else {
      return this.primaryIssuesOrReleases.map(issue => {
        return {
          type: "issue",
          issue
        };
      });
    }
  }
  groupElement(issue, index) {
    const base = {
      gridColumn: "3 / span " + this.quartersAndMonths.months.length,
      gridRow: `${index + 3}`
    };
    const background = document.createElement("div");
    Object.assign(background.style, {
      ...base,
      zIndex: 0
    });
    background.className = index % 2 ? "color-bg-gray-20" : "";
    return canStache_5_1_1_canStache.safeString(background);
  }
  /**
   *
   * @param {} release
   * @param {*} index
   * @returns
   */
  getReleaseTimeline(release, index) {
    const base = {
      gridColumn: "3 / span " + this.quartersAndMonths.months.length,
      gridRow: `${index + 3}`
    };
    const background = document.createElement("div");
    Object.assign(background.style, {
      ...base,
      zIndex: 0
    });
    background.className = index % 2 ? "color-bg-gray-20" : "";
    const root = document.createElement("div");
    const lastPeriodRoot = document.createElement("div");
    root.appendChild(lastPeriodRoot);
    Object.assign(root.style, {
      ...base,
      position: "relative",
      zIndex: 20
    });
    root.className = "py-1";
    Object.assign(lastPeriodRoot.style, {
      position: "absolute",
      top: "0",
      left: "0",
      right: "0",
      bottom: "0"
    });
    lastPeriodRoot.className = "py-1 lastPeriod";
    const {
      firstDay,
      lastDay
    } = this.quartersAndMonths;
    const totalTime = lastDay - firstDay;
    if (release.rollupStatuses.rollup.start && release.rollupStatuses.rollup.due) {
      function getPositions(work) {
        if (work.start == null && work.due == null) {
          return {
            start: 0,
            end: Infinity,
            startExtends: false,
            endExtends: false,
            style: {
              marginLeft: "1px",
              marginRight: "1px"
            }
          };
        }
        const start = Math.max(firstDay, work.start);
        const end = Math.min(lastDay, work.due);
        const startExtends = work.start < firstDay;
        const endExtends = work.due > lastDay;
        return {
          start,
          end,
          startExtends,
          endExtends,
          style: {
            width: Math.max((end - start) / totalTime * 100, 0) + "%",
            marginLeft: "max(" + (start - firstDay) / totalTime * 100 + "%, 1px)"
          }
        };
      }
      function makeLastPeriodElement(status, timing) {
        const behindTime = document.createElement("div");
        behindTime.style.backgroundClip = "content-box";
        behindTime.style.opacity = "0.9";
        behindTime.style.position = "relative";
        behindTime.className = "border-y-solid-1px";
        if (timing && status === "behind") {
          Object.assign(behindTime.style, getPositions(timing || {}).style);
          behindTime.style.zIndex = 1;
          behindTime.classList.add("color-text-and-bg-behind-last-period");
        }
        if (timing && status === "ahead") {
          Object.assign(behindTime.style, getPositions(timing || {}).style);
          behindTime.classList.add("color-text-and-bg-ahead-last-period");
          behindTime.style.zIndex = -1;
        }
        if (timing && status === "blocked") {
          Object.assign(behindTime.style, getPositions(timing || {}).style);
          behindTime.classList.add("color-text-and-bg-blocked-last-period");
          behindTime.style.zIndex = 1;
        }
        if (timing && status === "warning") {
          Object.assign(behindTime.style, getPositions(timing || {}).style);
          behindTime.classList.add("color-text-and-bg-warning-last-period");
          behindTime.style.zIndex = 1;
        }
        return behindTime;
      }
      if (this.breakdown) {
        /*
                    const lastDev = makeLastPeriodElement(release.rollupStatuses.dev.status, release.rollupStatuses.dev.lastPeriod);
                    lastDev.classList.add("h-2","py-[2px]");
                    lastPeriodRoot.appendChild(lastDev);
                     const dev = document.createElement("div");
                    dev.className = "dev_time h-2 border-y-solid-1px-white color-text-and-bg-"+release.rollupStatuses.dev.status;
                    Object.assign(dev.style, getPositions(release.rollupStatuses.dev).style);
                    root.appendChild(dev);*/

        const workTypes = this.hasWorkTypes.list.filter(wt => wt.hasWork);
        for (const {
          type
        } of workTypes) {
          const lastPeriod = makeLastPeriodElement(release.rollupStatuses[type].status, release.rollupStatuses[type].lastPeriod);
          lastPeriod.classList.add("h-2", "py-[2px]");
          lastPeriodRoot.appendChild(lastPeriod);
          const thisPeriod = document.createElement("div");
          thisPeriod.className = type + "_time h-2 border-y-solid-1px-white color-text-and-bg-" + release.rollupStatuses[type].status;
          Object.assign(thisPeriod.style, getPositions(release.rollupStatuses[type]).style);
          root.appendChild(thisPeriod);
        }
        /*
                    if(this.hasQAWork) {
                        const lastQA = makeLastPeriodElement(release.rollupStatuses.qa.status, release.rollupStatuses.qa.lastPeriod);
                        lastQA.classList.add("h-2","py-[2px]");
                        lastPeriodRoot.appendChild(lastQA);
                          const qa = document.createElement("div");
                        qa.className = "qa_time h-2 border-y-solid-1px-white color-text-and-bg-"+release.rollupStatuses.qa.status;
                        Object.assign(qa.style, getPositions(release.rollupStatuses.qa).style);
                        root.appendChild(qa);
                         
                    }
                    if(this.hasUATWork) {
                        const lastUAT = makeLastPeriodElement(release.rollupStatuses.uat.status, release.rollupStatuses.uat.lastPeriod);
                        lastUAT.classList.add("h-2","py-[2px]");
                        lastPeriodRoot.appendChild(lastUAT);
                          const uat = document.createElement("div");
                        uat.className = "uat_time h-2 border-y-solid-1px-white color-text-and-bg-"+release.rollupStatuses.uat.status;
                        Object.assign(uat.style, getPositions(release.rollupStatuses.uat).style);
                        root.appendChild(uat);
                         
                    }*/
      } else {
        const behindTime = makeLastPeriodElement(release.rollupStatuses.rollup.status, release.rollupStatuses.rollup.lastPeriod);
        behindTime.classList.add(this.bigBarSize, "py-1");
        lastPeriodRoot.appendChild(behindTime);
        const team = document.createElement("div");
        team.className = this.bigBarSize + " border-y-solid-1px-white color-text-and-bg-" + release.rollupStatuses.rollup.status;
        Object.assign(team.style, getPositions(release.rollupStatuses.rollup).style);
        team.style.opacity = "0.9";
        root.appendChild(team);
      }
    }
    const frag = document.createDocumentFragment();
    frag.appendChild(background);
    frag.appendChild(root);
    return canStache_5_1_1_canStache.safeString(frag);
  }
  get hasWorkTypes() {
    const map = {};
    const list = workTypes.map(type => {
      let hasWork = this.primaryIssuesOrReleases ? this.primaryIssuesOrReleases.some(issue => issue.rollupStatuses[type].issueKeys.length) : false;
      return map[type] = {
        type,
        hasWork
      };
    });
    return {
      map,
      list
    };
  }
  get hasQAWork() {
    if (this.primaryIssuesOrReleases) {
      return this.primaryIssuesOrReleases.some(issue => issue.rollupStatuses.qa.issueKeys.length);
    } else {
      return true;
    }
  }
  get hasUATWork() {
    if (this.primaryIssuesOrReleases) {
      return this.primaryIssuesOrReleases.some(issue => issue.rollupStatuses.uat.issueKeys.length);
    } else {
      return true;
    }
  }
}
customElements.define("gantt-grid", GanttGrid);

function mostCommonElement(arr) {
  const elementCounts = {};

  // Count the occurrences of each element in the array
  arr.forEach(element => {
    if (elementCounts[element]) {
      elementCounts[element]++;
    } else {
      elementCounts[element] = 1;
    }
  });

  // Find the element with the highest count
  let mostCommon = null;
  let maxCount = 0;
  for (const element in elementCounts) {
    if (elementCounts[element] > maxCount) {
      maxCount = elementCounts[element];
      mostCommon = element;
    }
  }
  return mostCommon;
}

function mergeStartAndDueData$2(records) {
  const startData = records.filter(record => record?.startData).map(record => record.startData);
  const dueData = records.filter(record => record?.dueData).map(record => record.dueData);
  return {
    startData: startData.sort((d1, d2) => d1.start - d2.start)[0],
    dueData: dueData.sort((d1, d2) => d2.due - d1.due)[0]
  };
}
function getDataDataFromDatedIssue(issue) {
  let startData, dueData;
  if (issue.dateData.rollup.start) {
    startData = {
      start: issue.dateData.rollup.start,
      startFrom: issue.dateData.rollup.startFrom
    };
  }
  if (issue.dateData.rollup.due) {
    dueData = {
      due: issue.dateData.rollup.due,
      dueTo: issue.dateData.rollup.dueTo
    };
  }
  return {
    startData,
    dueData
  };
}

// provides an object with rolled updates
function rollupDatesFromRollups(issues) {
  const dateData = mergeStartAndDueData$2(issues.map(getDataDataFromDatedIssue));
  return {
    ...dateData.startData,
    ...dateData.dueData,
    issues
  };
}

const DAY$1 = 1000 * 60 * 60 * 24;
class GanttTimeline extends canStacheElement {
  static view = `
        <div style="display: grid; grid-template-columns: repeat({{this.quartersAndMonths.months.length}}, auto); grid-template-rows: auto auto repeat({{this.rows.length}}, auto)"
        class='p-2 mb-10'>

            {{# for(quarter of this.quartersAndMonths.quarters) }}
                <div style="grid-column: span 3" class="text-center">{{quarter.name}}</div>
            {{ / for }}

            {{# for(month of this.quartersAndMonths.months)}}
                <div 
                    style="grid-column: {{ plus(scope.index, 1) }} / span 1; grid-row: 2 / span 1;"
                    class='border-b border-neutral-80 text-center'>{{month.name}}</div>
            {{/ for }}

            <!-- CURRENT TIME BOX -->
            <div style="grid-column: 1 / span {{this.quartersAndMonths.months.length}}; grid-row: 2 / span {{plus(this.rows.length, 1)}};">
                <div class='today' style="margin-left: {{this.todayMarginLeft}}%; width: 1px; background-color: orange; z-index: 0; position: relative; height: 100%;"></div>
            </div>

            <!-- VERTICAL COLUMNS -->
            {{# for(month of this.quartersAndMonths.months)}}
                <div style="grid-column: {{ plus(scope.index, 1) }} / span 1; grid-row: 3 / span {{this.rows.length}}; z-index: 10"
                    class='border-l border-b border-neutral-80 {{this.lastRowBorder(scope.index)}}'></div>
            {{/ for }}

            
            {{# for(row of this.rows) }}
                <div class="h-10 relative" style="grid-column: 1 / span {{this.quartersAndMonths.months.length}}; grid-row: {{plus(scope.index, 3)}} / span 1;">
                    {{# for(item of row.items) }}
                        {{{item.element}}}
                    {{/ for }}
                </div>
            {{/ for }}

            
        </div>
    `;
  get quartersAndMonths() {
    // handle if there are no issues
    const endDates = this.primaryIssuesOrReleases.map(issue => {
      return {
        dateData: {
          rollup: {
            start: issue.rollupDates.due,
            startFrom: issue.rollupDates.dueTo,
            due: issue.rollupDates.due,
            dueTo: issue.rollupDates.dueTo
          }
        }
      };
    });
    const {
      start,
      due
    } = rollupDatesFromRollups(endDates);
    let firstEndDate = new Date((start || new Date()).getTime() - DAY$1 * 30);
    return getQuartersAndMonths(firstEndDate, due || new Date(new Date().getTime() + DAY$1 * 30));
  }
  get todayMarginLeft() {
    const {
      firstDay,
      lastDay
    } = this.quartersAndMonths;
    const totalTime = lastDay - firstDay;
    return (new Date() - firstDay - 1000 * 60 * 60 * 24 * 2) / totalTime * 100;
  }
  get calendarData() {
    const {
      start,
      due
    } = rollupDatesFromRollups(this.primaryIssuesOrReleases);
    return getCalendarHtml(new Date(), due);
  }
  get calendarHTML() {
    return canStache_5_1_1_canStache.safeString(this.calendarData.html);
  }
  get rows() {
    const {
      firstDay,
      lastDay
    } = this.quartersAndMonths;
    const totalTime = lastDay - firstDay;
    const issuesWithDates = this.primaryIssuesOrReleases.filter(issue => issue.rollupDates.due);
    const rows = calculate({
      issues: issuesWithDates,
      firstDay,
      totalTime,
      makeElementForIssue: function (release) {
        const div = document.createElement("div");
        div.className = " release-timeline-item flex items-center gap-1";
        Object.assign(div.style, {
          position: "absolute",
          //transform: "translate(-100%, 0)",
          padding: "2px 4px 2px 4px",
          zIndex: "100",
          top: "4px",
          background: "rgba(255,255,255, 0.6)"
        });
        const text = document.createElement("div");
        text.className = "truncate";
        Object.assign(text.style, {
          position: "relative",
          zIndex: "10",
          maxWidth: "300px"
        });
        text.appendChild(document.createTextNode(release?.names?.shortVersion || release.summary));
        div.appendChild(text);
        const tick = document.createElement("div");
        tick.className = "color-text-and-bg-" + release.rollupStatuses.rollup.status;
        Object.assign(tick.style, {
          height: "10px",
          width: "10px",
          transform: "rotate(45deg)"
        });
        div.appendChild(tick);
        return div;
      }
    });
    for (let row of rows) {
      for (let item of row.items) {
        item.element.style.right = (totalTime - (item.issue.rollupStatuses.rollup.due - firstDay)) / totalTime * 100 + "%";
      }
    }
    return rows;
  }
  plus(first, second) {
    return first + second;
  }
  lastRowBorder(index) {
    return index === this.quartersAndMonths.months.length - 1 ? "border-r-solid-1px-slate-900" : "";
  }
  miroData() {
    miroData(this.primaryIssuesOrReleases, this.allIssuesOrReleases);
  }
}
function toMiroData({
  summary,
  rollupDates,
  status,
  team,
  url,
  type,
  key,
  parent,
  issue,
  releases
}) {
  return {
    summary,
    due: rollupDates.due,
    status,
    team: team.name,
    url,
    type,
    key,
    releases: releases.map(r => r.name)
  };
}
function miroData(primaryIssuesOrReleases, allIssuesOrReleases) {
  const getChildren = makeGetChildrenFromReportingIssues(allIssuesOrReleases);
  const data = primaryIssuesOrReleases.map(issue => {
    const children = getChildren(issue);
    return {
      ...toMiroData(issue),
      parent: {
        key: issue.parentKey,
        summary: issue.issue.fields.Parent.fields.summary
      },
      children: children.map(toMiroData)
    };
  });
  console.log(data);
}
function defaultGetWidth(element) {
  const clone = element.cloneNode(true);
  const outer = document.createElement("div");
  outer.appendChild(clone);
  Object.assign(outer.style, {
    position: "absolute",
    top: "-1000px",
    left: "-1000px",
    width: "700px",
    visibility: 'hidden'
  });
  document.body.appendChild(outer);
  const width = clone.getBoundingClientRect().width;
  document.body.removeChild(outer);
  return width;
}
function calculate({
  widthOfArea = 1230,
  issues,
  makeElementForIssue,
  firstDay,
  totalTime,
  getWidth = defaultGetWidth
}) {
  const rows = [];
  const issueUIData = issues.map(issue => {
    const element = makeElementForIssue(issue),
      width = getWidth(element),
      widthInPercent = width * 100 / widthOfArea,
      rightPercentEnd = Math.ceil((issue.rollupStatuses.rollup.due - firstDay) / totalTime * 100),
      leftPercentStart = rightPercentEnd - widthInPercent;
    element.setAttribute("measured-width", width);
    element.setAttribute("left-p", leftPercentStart);
    element.setAttribute("right-p", leftPercentStart);
    return {
      issue,
      element,
      widthInPercent,
      leftPercentStart,
      rightPercentEnd
    };
  });

  // earliest first
  issueUIData.sort((a, b) => {
    return a.leftPercentStart - b.leftPercentStart;
  });
  function addToRow(issueUIDatum) {
    for (let row of rows) {
      // if we have no intersections, we can insert
      const intersected = row.items.some(item => {
        return intersect({
          start: item.leftPercentStart,
          end: item.rightPercentEnd
        }, {
          start: issueUIDatum.leftPercentStart,
          end: issueUIDatum.rightPercentEnd
        });
      });
      if (!intersected) {
        row.items.push(issueUIDatum);
        return;
      }
    }
    // we didn't find space, add a raw
    rows.push({
      items: [issueUIDatum]
    });
  }
  issueUIData.forEach(addToRow);
  return rows;
}
function intersect(range1, range2) {
  return range1.start < range2.end && range2.start < range1.end;
}
customElements.define("gantt-timeline", GanttTimeline);

const workTypesToSymbols = {
  "design": "d",
  "qa": "Q",
  uat: "U",
  dev: "D"
};
function workTypeToSymbol(type) {
  if (workTypesToSymbols[type]) {
    return workTypesToSymbols[type];
  } else {
    return type.substring(0, 1).toUpperCase();
  }
}
const release_box_subtitle_wrapper = `flex gap-2 text-neutral-800 text-sm`;
class StatusReport extends canStacheElement {
  static view = `
    <div class='release_wrapper {{# if(this.breakdown) }}extra-timings{{else}}simple-timings{{/ if}} px-2 flex gap-2'>
        {{# for(primaryIssue of this.primaryIssuesOrReleases) }}
            <div class='release_box grow'>
                <div 
                    on:click='this.showTooltip(scope.event, primaryIssue)'
                    class="pointer release_box_header_bubble color-text-and-bg-{{primaryIssue.rollupStatuses.rollup.status}} rounded-t {{this.fontSize(0)}}">
                        {{primaryIssue.summary}}
                    </div>
                
                    {{# if(this.breakdown) }}
                            {{# for(workType of this.hasWorkTypes.hasWorkList) }}
                    
                                <div class="${release_box_subtitle_wrapper} pt-1">
                                        <span class="release_box_subtitle_key color-text-and-bg-{{primaryIssue.rollupStatuses[workType.type].status}} font-mono px-px">
                                            {{workType.type}}
                                        </span>
                                        <span class="release_box_subtitle_value">
                                            {{ this.prettyDate(primaryIssue.rollupStatuses[workType.type].due) }}{{this.wasReleaseDate(primaryIssue.rollupStatuses[workType.type]) }}
                                        </span>
                                </div>

                            {{/ for }}
                    {{ else }}
                        <div class="${release_box_subtitle_wrapper} p-1">
                                <b>Target Delivery</b>
                                <span class="release_box_subtitle_value">
                                    <span class="nowrap">{{ this.prettyDate(primaryIssue.rollupStatuses.rollup.due) }}</span>
                                    <span class="nowrap">{{ this.wasReleaseDate(primaryIssue.rollupStatuses.rollup) }}</span>
                                </span>
                        </div>
                    {{/ if }}

                <ul class=" {{# if(this.breakdown) }}list-none{{else}}list-disc list-inside p-1{{/if}}">
                    {{# for(secondaryIssue of this.getIssues(primaryIssue.reportingHierarchy.childKeys)) }}
                    <li class='font-sans {{this.fontSize(primaryIssue.reportingHierarchy.childKeys.length)}} pointer' on:click='this.showTooltip(scope.event, secondaryIssue)'>
                        {{# if(this.breakdown) }}
                            {{this.breakdownIcons(secondaryIssue)}}
                        {{/ if }}
                        <span class="{{# if(this.breakdown) }} color-text-black{{else}} color-text-{{secondaryIssue.rollupStatuses.rollup.status}} {{/ }}">{{secondaryIssue.summary}}</span>
                    </li>
                    {{/ for}}
                </ul>
            </div>
        {{ else }}
        <div class='release_box'>
            <div class="release_box_header_bubble">
                Unable to find any issues.
            </div>
        </div>
        {{/ for }}
        {{# if(this.planningIssues.length) }}
            <div class='release_box grow'>
                <div class="release_box_header_bubble color-text-and-bg-unknown rounded-t">Planning</div>
                <ul class="list-disc list-inside p-1">
                {{# for(planningIssue of this.planningIssues)}}
                    <li class='font-sans {{this.fontSize(this.planningIssues.length)}} color-text-unknown pointer'
                         on:click='this.showTooltip(scope.event, planningIssue)'>
                        {{planningIssue.summary}}
                    </li>

                {{/}}
                </ul>
            </div>
        {{/ }}
        
    </div>
    `;
  get columnDensity() {
    if (this.primaryIssuesOrReleases.length > 20) {
      return "absurd";
    } else if (this.primaryIssuesOrReleases.length > 10) {
      return "high";
    } else if (this.primaryIssuesOrReleases.length > 4) {
      return "medium";
    } else {
      return "light";
    }
  }
  prettyDate(date) {
    return date ? dateFormatter.format(date) : "";
  }
  get getIssues() {
    const map = new Map();
    for (let issue of this.allIssuesOrReleases || []) {
      map.set(issue.key, issue);
    }
    const getIssue = map.get.bind(map);
    return window.getIssuesByKey = function (issueKeys) {
      // O(n^2)
      return issueKeys.map(getIssue).filter(issue => {
        return !this.planningIssues.some(planningIssue => issue === planningIssue);
      });
    };
  }
  wasReleaseDate(release) {
    const current = release.due;
    const was = release.lastPeriod && release.lastPeriod.due;
    if (was && current - DAY_IN_MS > was) {
      return " (" + this.prettyDate(was) + ")";
    } else {
      return "";
    }
  }
  wasStartDate(release) {
    const current = release.start;
    const was = release.lastPeriod && release.lastPeriod.start;
    if (was && current - DAY_IN_MS > was) {
      return " (" + this.prettyDate(was) + ")";
    } else {
      return "";
    }
  }
  showTooltip(event, isssue) {
    showTooltip(event.currentTarget, isssue);
  }
  fontSize(count) {
    if (["high", "absurd"].includes(this.columnDensity)) {
      return "text-xs";
    }
    if (count >= 7 && this.columnDensity === "medium") {
      return "text-sm";
    } else if (count <= 4) {
      return "text-base";
    }
  }
  get hasWorkTypes() {
    const map = {};
    const list = workTypes.map(type => {
      let hasWork = this.primaryIssuesOrReleases ? this.primaryIssuesOrReleases.some(issue => issue.rollupStatuses[type].issueKeys.length) : false;
      return map[type] = {
        type,
        hasWork
      };
    });
    return {
      map,
      list,
      hasWorkList: list.filter(wt => wt.hasWork)
    };
  }
  breakdownIcons(secondaryIssue) {
    const frag = document.createDocumentFragment();
    const workTypes = this.hasWorkTypes.list.filter(wt => wt.hasWork);
    for (const {
      type
    } of workTypes) {
      const span = document.createElement("span");
      span.className = 'text-xs font-mono px-px py-0 color-text-and-bg-' + secondaryIssue.rollupStatuses[type].status;
      span.innerText = workTypeToSymbol(type);
      frag.appendChild(span);
    }
    return canStache_5_1_1_canStache.safeString(frag);
  }
}
customElements.define("status-report", StatusReport);

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var reactDom = {exports: {}};

var reactDom_production_min = {};

var react = {exports: {}};

var react_production_min = {};

/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReact_production_min;

function requireReact_production_min () {
	if (hasRequiredReact_production_min) return react_production_min;
	hasRequiredReact_production_min = 1;
var l=Symbol.for("react.element"),n=Symbol.for("react.portal"),p=Symbol.for("react.fragment"),q=Symbol.for("react.strict_mode"),r=Symbol.for("react.profiler"),t=Symbol.for("react.provider"),u=Symbol.for("react.context"),v=Symbol.for("react.forward_ref"),w=Symbol.for("react.suspense"),x=Symbol.for("react.memo"),y=Symbol.for("react.lazy"),z=Symbol.iterator;function A(a){if(null===a||"object"!==typeof a)return null;a=z&&a[z]||a["@@iterator"];return "function"===typeof a?a:null}
	var B={isMounted:function(){return !1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B;}E.prototype.isReactComponent={};
	E.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,a,b,"setState");};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate");};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B;}var H=G.prototype=new F;
	H.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};
	function M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=""+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f;}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return {$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}
	function N(a,b){return {$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return "object"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={"=":"=0",":":"=2"};return "$"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g;function Q(a,b){return "object"===typeof a&&null!==a&&null!=a.key?escape(""+a.key):b.toString(36)}
	function R(a,b,e,d,c){var k=typeof a;if("undefined"===k||"boolean"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case "string":case "number":h=!0;break;case "object":switch(a.$$typeof){case l:case n:h=!0;}}if(h)return h=a,c=c(h),a=""===d?"."+Q(h,0):d,I(c)?(e="",null!=a&&(e=a.replace(P,"$&/")+"/"),R(c,b,e,"",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?"":(""+c.key).replace(P,"$&/")+"/")+a)),b.push(c)),1;h=0;d=""===d?".":d+":";if(I(a))for(var g=0;g<a.length;g++){k=
	a[g];var f=d+Q(k,g);h+=R(k,b,e,f,c);}else if(f=A(a),"function"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if("object"===k)throw b=String(a),Error("Objects are not valid as a React child (found: "+("[object Object]"===b?"object with keys {"+Object.keys(a).join(", ")+"}":b)+"). If you meant to render a collection of children, use an array instead.");return h}
	function S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,"","",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b;},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b;});-1===a._status&&(a._status=0,a._result=b);}if(1===a._status)return a._result.default;throw a._result;}
	var U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};function X(){throw Error("act(...) is not supported in production builds of React.");}
	react_production_min.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments);},e);},count:function(a){var b=0;S(a,function(){b++;});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error("React.Children.only expected to receive a single React element child.");return a}};react_production_min.Component=E;react_production_min.Fragment=p;react_production_min.Profiler=r;react_production_min.PureComponent=G;react_production_min.StrictMode=q;react_production_min.Suspense=w;
	react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;react_production_min.act=X;
	react_production_min.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+a+".");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=""+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f]);}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);
	for(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g;}return {$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};react_production_min.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};react_production_min.createElement=M;react_production_min.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};react_production_min.createRef=function(){return {current:null}};
	react_production_min.forwardRef=function(a){return {$$typeof:v,render:a}};react_production_min.isValidElement=O;react_production_min.lazy=function(a){return {$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};react_production_min.memo=function(a,b){return {$$typeof:x,type:a,compare:void 0===b?null:b}};react_production_min.startTransition=function(a){var b=V.transition;V.transition={};try{a();}finally{V.transition=b;}};react_production_min.unstable_act=X;react_production_min.useCallback=function(a,b){return U.current.useCallback(a,b)};react_production_min.useContext=function(a){return U.current.useContext(a)};
	react_production_min.useDebugValue=function(){};react_production_min.useDeferredValue=function(a){return U.current.useDeferredValue(a)};react_production_min.useEffect=function(a,b){return U.current.useEffect(a,b)};react_production_min.useId=function(){return U.current.useId()};react_production_min.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};react_production_min.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};react_production_min.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};
	react_production_min.useMemo=function(a,b){return U.current.useMemo(a,b)};react_production_min.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};react_production_min.useRef=function(a){return U.current.useRef(a)};react_production_min.useState=function(a){return U.current.useState(a)};react_production_min.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};react_production_min.useTransition=function(){return U.current.useTransition()};react_production_min.version="18.3.1";
	return react_production_min;
}

var react_development = {exports: {}};

/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
react_development.exports;

var hasRequiredReact_development;

function requireReact_development () {
	if (hasRequiredReact_development) return react_development.exports;
	hasRequiredReact_development = 1;
	(function (module, exports) {

		if (process.env.NODE_ENV !== "production") {
		  (function() {

		/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
		}
		          var ReactVersion = '18.3.1';

		// ATTENTION
		// When adding new symbols to this file,
		// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
		// The Symbol used to tag the ReactElement-like types.
		var REACT_ELEMENT_TYPE = Symbol.for('react.element');
		var REACT_PORTAL_TYPE = Symbol.for('react.portal');
		var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
		var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
		var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
		var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
		var REACT_CONTEXT_TYPE = Symbol.for('react.context');
		var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
		var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
		var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
		var REACT_MEMO_TYPE = Symbol.for('react.memo');
		var REACT_LAZY_TYPE = Symbol.for('react.lazy');
		var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
		var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
		var FAUX_ITERATOR_SYMBOL = '@@iterator';
		function getIteratorFn(maybeIterable) {
		  if (maybeIterable === null || typeof maybeIterable !== 'object') {
		    return null;
		  }

		  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

		  if (typeof maybeIterator === 'function') {
		    return maybeIterator;
		  }

		  return null;
		}

		/**
		 * Keeps track of the current dispatcher.
		 */
		var ReactCurrentDispatcher = {
		  /**
		   * @internal
		   * @type {ReactComponent}
		   */
		  current: null
		};

		/**
		 * Keeps track of the current batch's configuration such as how long an update
		 * should suspend for if it needs to.
		 */
		var ReactCurrentBatchConfig = {
		  transition: null
		};

		var ReactCurrentActQueue = {
		  current: null,
		  // Used to reproduce behavior of `batchedUpdates` in legacy mode.
		  isBatchingLegacy: false,
		  didScheduleLegacyUpdate: false
		};

		/**
		 * Keeps track of the current owner.
		 *
		 * The current owner is the component who should own any components that are
		 * currently being constructed.
		 */
		var ReactCurrentOwner = {
		  /**
		   * @internal
		   * @type {ReactComponent}
		   */
		  current: null
		};

		var ReactDebugCurrentFrame = {};
		var currentExtraStackFrame = null;
		function setExtraStackFrame(stack) {
		  {
		    currentExtraStackFrame = stack;
		  }
		}

		{
		  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
		    {
		      currentExtraStackFrame = stack;
		    }
		  }; // Stack implementation injected by the current renderer.


		  ReactDebugCurrentFrame.getCurrentStack = null;

		  ReactDebugCurrentFrame.getStackAddendum = function () {
		    var stack = ''; // Add an extra top frame while an element is being validated

		    if (currentExtraStackFrame) {
		      stack += currentExtraStackFrame;
		    } // Delegate to the injected renderer-specific implementation


		    var impl = ReactDebugCurrentFrame.getCurrentStack;

		    if (impl) {
		      stack += impl() || '';
		    }

		    return stack;
		  };
		}

		// -----------------------------------------------------------------------------

		var enableScopeAPI = false; // Experimental Create Event Handle API.
		var enableCacheElement = false;
		var enableTransitionTracing = false; // No known bugs, but needs performance testing

		var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
		// stuff. Intended to enable React core members to more easily debug scheduling
		// issues in DEV builds.

		var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

		var ReactSharedInternals = {
		  ReactCurrentDispatcher: ReactCurrentDispatcher,
		  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
		  ReactCurrentOwner: ReactCurrentOwner
		};

		{
		  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
		  ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
		}

		// by calls to these methods by a Babel plugin.
		//
		// In PROD (or in packages without access to React internals),
		// they are left as they are instead.

		function warn(format) {
		  {
		    {
		      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		        args[_key - 1] = arguments[_key];
		      }

		      printWarning('warn', format, args);
		    }
		  }
		}
		function error(format) {
		  {
		    {
		      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
		        args[_key2 - 1] = arguments[_key2];
		      }

		      printWarning('error', format, args);
		    }
		  }
		}

		function printWarning(level, format, args) {
		  // When changing this logic, you might want to also
		  // update consoleWithStackDev.www.js as well.
		  {
		    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
		    var stack = ReactDebugCurrentFrame.getStackAddendum();

		    if (stack !== '') {
		      format += '%s';
		      args = args.concat([stack]);
		    } // eslint-disable-next-line react-internal/safe-string-coercion


		    var argsWithFormat = args.map(function (item) {
		      return String(item);
		    }); // Careful: RN currently depends on this prefix

		    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
		    // breaks IE9: https://github.com/facebook/react/issues/13610
		    // eslint-disable-next-line react-internal/no-production-logging

		    Function.prototype.apply.call(console[level], console, argsWithFormat);
		  }
		}

		var didWarnStateUpdateForUnmountedComponent = {};

		function warnNoop(publicInstance, callerName) {
		  {
		    var _constructor = publicInstance.constructor;
		    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
		    var warningKey = componentName + "." + callerName;

		    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
		      return;
		    }

		    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

		    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
		  }
		}
		/**
		 * This is the abstract API for an update queue.
		 */


		var ReactNoopUpdateQueue = {
		  /**
		   * Checks whether or not this composite component is mounted.
		   * @param {ReactClass} publicInstance The instance we want to test.
		   * @return {boolean} True if mounted, false otherwise.
		   * @protected
		   * @final
		   */
		  isMounted: function (publicInstance) {
		    return false;
		  },

		  /**
		   * Forces an update. This should only be invoked when it is known with
		   * certainty that we are **not** in a DOM transaction.
		   *
		   * You may want to call this when you know that some deeper aspect of the
		   * component's state has changed but `setState` was not called.
		   *
		   * This will not invoke `shouldComponentUpdate`, but it will invoke
		   * `componentWillUpdate` and `componentDidUpdate`.
		   *
		   * @param {ReactClass} publicInstance The instance that should rerender.
		   * @param {?function} callback Called after component is updated.
		   * @param {?string} callerName name of the calling function in the public API.
		   * @internal
		   */
		  enqueueForceUpdate: function (publicInstance, callback, callerName) {
		    warnNoop(publicInstance, 'forceUpdate');
		  },

		  /**
		   * Replaces all of the state. Always use this or `setState` to mutate state.
		   * You should treat `this.state` as immutable.
		   *
		   * There is no guarantee that `this.state` will be immediately updated, so
		   * accessing `this.state` after calling this method may return the old value.
		   *
		   * @param {ReactClass} publicInstance The instance that should rerender.
		   * @param {object} completeState Next state.
		   * @param {?function} callback Called after component is updated.
		   * @param {?string} callerName name of the calling function in the public API.
		   * @internal
		   */
		  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
		    warnNoop(publicInstance, 'replaceState');
		  },

		  /**
		   * Sets a subset of the state. This only exists because _pendingState is
		   * internal. This provides a merging strategy that is not available to deep
		   * properties which is confusing. TODO: Expose pendingState or don't use it
		   * during the merge.
		   *
		   * @param {ReactClass} publicInstance The instance that should rerender.
		   * @param {object} partialState Next partial state to be merged with state.
		   * @param {?function} callback Called after component is updated.
		   * @param {?string} Name of the calling function in the public API.
		   * @internal
		   */
		  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
		    warnNoop(publicInstance, 'setState');
		  }
		};

		var assign = Object.assign;

		var emptyObject = {};

		{
		  Object.freeze(emptyObject);
		}
		/**
		 * Base class helpers for the updating state of a component.
		 */


		function Component(props, context, updater) {
		  this.props = props;
		  this.context = context; // If a component has string refs, we will assign a different object later.

		  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
		  // renderer.

		  this.updater = updater || ReactNoopUpdateQueue;
		}

		Component.prototype.isReactComponent = {};
		/**
		 * Sets a subset of the state. Always use this to mutate
		 * state. You should treat `this.state` as immutable.
		 *
		 * There is no guarantee that `this.state` will be immediately updated, so
		 * accessing `this.state` after calling this method may return the old value.
		 *
		 * There is no guarantee that calls to `setState` will run synchronously,
		 * as they may eventually be batched together.  You can provide an optional
		 * callback that will be executed when the call to setState is actually
		 * completed.
		 *
		 * When a function is provided to setState, it will be called at some point in
		 * the future (not synchronously). It will be called with the up to date
		 * component arguments (state, props, context). These values can be different
		 * from this.* because your function may be called after receiveProps but before
		 * shouldComponentUpdate, and this new state, props, and context will not yet be
		 * assigned to this.
		 *
		 * @param {object|function} partialState Next partial state or function to
		 *        produce next partial state to be merged with current state.
		 * @param {?function} callback Called after state is updated.
		 * @final
		 * @protected
		 */

		Component.prototype.setState = function (partialState, callback) {
		  if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {
		    throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');
		  }

		  this.updater.enqueueSetState(this, partialState, callback, 'setState');
		};
		/**
		 * Forces an update. This should only be invoked when it is known with
		 * certainty that we are **not** in a DOM transaction.
		 *
		 * You may want to call this when you know that some deeper aspect of the
		 * component's state has changed but `setState` was not called.
		 *
		 * This will not invoke `shouldComponentUpdate`, but it will invoke
		 * `componentWillUpdate` and `componentDidUpdate`.
		 *
		 * @param {?function} callback Called after update is complete.
		 * @final
		 * @protected
		 */


		Component.prototype.forceUpdate = function (callback) {
		  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
		};
		/**
		 * Deprecated APIs. These APIs used to exist on classic React classes but since
		 * we would like to deprecate them, we're not going to move them over to this
		 * modern base class. Instead, we define a getter that warns if it's accessed.
		 */


		{
		  var deprecatedAPIs = {
		    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
		    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
		  };

		  var defineDeprecationWarning = function (methodName, info) {
		    Object.defineProperty(Component.prototype, methodName, {
		      get: function () {
		        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

		        return undefined;
		      }
		    });
		  };

		  for (var fnName in deprecatedAPIs) {
		    if (deprecatedAPIs.hasOwnProperty(fnName)) {
		      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
		    }
		  }
		}

		function ComponentDummy() {}

		ComponentDummy.prototype = Component.prototype;
		/**
		 * Convenience component with default shallow equality check for sCU.
		 */

		function PureComponent(props, context, updater) {
		  this.props = props;
		  this.context = context; // If a component has string refs, we will assign a different object later.

		  this.refs = emptyObject;
		  this.updater = updater || ReactNoopUpdateQueue;
		}

		var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
		pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

		assign(pureComponentPrototype, Component.prototype);
		pureComponentPrototype.isPureReactComponent = true;

		// an immutable object with a single mutable value
		function createRef() {
		  var refObject = {
		    current: null
		  };

		  {
		    Object.seal(refObject);
		  }

		  return refObject;
		}

		var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

		function isArray(a) {
		  return isArrayImpl(a);
		}

		/*
		 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
		 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
		 *
		 * The functions in this module will throw an easier-to-understand,
		 * easier-to-debug exception with a clear errors message message explaining the
		 * problem. (Instead of a confusing exception thrown inside the implementation
		 * of the `value` object).
		 */
		// $FlowFixMe only called in DEV, so void return is not possible.
		function typeName(value) {
		  {
		    // toStringTag is needed for namespaced types like Temporal.Instant
		    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
		    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
		    return type;
		  }
		} // $FlowFixMe only called in DEV, so void return is not possible.


		function willCoercionThrow(value) {
		  {
		    try {
		      testStringCoercion(value);
		      return false;
		    } catch (e) {
		      return true;
		    }
		  }
		}

		function testStringCoercion(value) {
		  // If you ended up here by following an exception call stack, here's what's
		  // happened: you supplied an object or symbol value to React (as a prop, key,
		  // DOM attribute, CSS property, string ref, etc.) and when React tried to
		  // coerce it to a string using `'' + value`, an exception was thrown.
		  //
		  // The most common types that will cause this exception are `Symbol` instances
		  // and Temporal objects like `Temporal.Instant`. But any object that has a
		  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
		  // exception. (Library authors do this to prevent users from using built-in
		  // numeric operators like `+` or comparison operators like `>=` because custom
		  // methods are needed to perform accurate arithmetic or comparison.)
		  //
		  // To fix the problem, coerce this object or symbol value to a string before
		  // passing it to React. The most reliable way is usually `String(value)`.
		  //
		  // To find which value is throwing, check the browser or debugger console.
		  // Before this exception was thrown, there should be `console.error` output
		  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
		  // problem and how that type was used: key, atrribute, input value prop, etc.
		  // In most cases, this console output also shows the component and its
		  // ancestor components where the exception happened.
		  //
		  // eslint-disable-next-line react-internal/safe-string-coercion
		  return '' + value;
		}
		function checkKeyStringCoercion(value) {
		  {
		    if (willCoercionThrow(value)) {
		      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

		      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
		    }
		  }
		}

		function getWrappedName(outerType, innerType, wrapperName) {
		  var displayName = outerType.displayName;

		  if (displayName) {
		    return displayName;
		  }

		  var functionName = innerType.displayName || innerType.name || '';
		  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
		} // Keep in sync with react-reconciler/getComponentNameFromFiber


		function getContextName(type) {
		  return type.displayName || 'Context';
		} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


		function getComponentNameFromType(type) {
		  if (type == null) {
		    // Host root, text node or just invalid type.
		    return null;
		  }

		  {
		    if (typeof type.tag === 'number') {
		      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
		    }
		  }

		  if (typeof type === 'function') {
		    return type.displayName || type.name || null;
		  }

		  if (typeof type === 'string') {
		    return type;
		  }

		  switch (type) {
		    case REACT_FRAGMENT_TYPE:
		      return 'Fragment';

		    case REACT_PORTAL_TYPE:
		      return 'Portal';

		    case REACT_PROFILER_TYPE:
		      return 'Profiler';

		    case REACT_STRICT_MODE_TYPE:
		      return 'StrictMode';

		    case REACT_SUSPENSE_TYPE:
		      return 'Suspense';

		    case REACT_SUSPENSE_LIST_TYPE:
		      return 'SuspenseList';

		  }

		  if (typeof type === 'object') {
		    switch (type.$$typeof) {
		      case REACT_CONTEXT_TYPE:
		        var context = type;
		        return getContextName(context) + '.Consumer';

		      case REACT_PROVIDER_TYPE:
		        var provider = type;
		        return getContextName(provider._context) + '.Provider';

		      case REACT_FORWARD_REF_TYPE:
		        return getWrappedName(type, type.render, 'ForwardRef');

		      case REACT_MEMO_TYPE:
		        var outerName = type.displayName || null;

		        if (outerName !== null) {
		          return outerName;
		        }

		        return getComponentNameFromType(type.type) || 'Memo';

		      case REACT_LAZY_TYPE:
		        {
		          var lazyComponent = type;
		          var payload = lazyComponent._payload;
		          var init = lazyComponent._init;

		          try {
		            return getComponentNameFromType(init(payload));
		          } catch (x) {
		            return null;
		          }
		        }

		      // eslint-disable-next-line no-fallthrough
		    }
		  }

		  return null;
		}

		var hasOwnProperty = Object.prototype.hasOwnProperty;

		var RESERVED_PROPS = {
		  key: true,
		  ref: true,
		  __self: true,
		  __source: true
		};
		var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

		{
		  didWarnAboutStringRefs = {};
		}

		function hasValidRef(config) {
		  {
		    if (hasOwnProperty.call(config, 'ref')) {
		      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

		      if (getter && getter.isReactWarning) {
		        return false;
		      }
		    }
		  }

		  return config.ref !== undefined;
		}

		function hasValidKey(config) {
		  {
		    if (hasOwnProperty.call(config, 'key')) {
		      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

		      if (getter && getter.isReactWarning) {
		        return false;
		      }
		    }
		  }

		  return config.key !== undefined;
		}

		function defineKeyPropWarningGetter(props, displayName) {
		  var warnAboutAccessingKey = function () {
		    {
		      if (!specialPropKeyWarningShown) {
		        specialPropKeyWarningShown = true;

		        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
		      }
		    }
		  };

		  warnAboutAccessingKey.isReactWarning = true;
		  Object.defineProperty(props, 'key', {
		    get: warnAboutAccessingKey,
		    configurable: true
		  });
		}

		function defineRefPropWarningGetter(props, displayName) {
		  var warnAboutAccessingRef = function () {
		    {
		      if (!specialPropRefWarningShown) {
		        specialPropRefWarningShown = true;

		        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
		      }
		    }
		  };

		  warnAboutAccessingRef.isReactWarning = true;
		  Object.defineProperty(props, 'ref', {
		    get: warnAboutAccessingRef,
		    configurable: true
		  });
		}

		function warnIfStringRefCannotBeAutoConverted(config) {
		  {
		    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
		      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

		      if (!didWarnAboutStringRefs[componentName]) {
		        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);

		        didWarnAboutStringRefs[componentName] = true;
		      }
		    }
		  }
		}
		/**
		 * Factory method to create a new React element. This no longer adheres to
		 * the class pattern, so do not use new to call it. Also, instanceof check
		 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
		 * if something is a React Element.
		 *
		 * @param {*} type
		 * @param {*} props
		 * @param {*} key
		 * @param {string|object} ref
		 * @param {*} owner
		 * @param {*} self A *temporary* helper to detect places where `this` is
		 * different from the `owner` when React.createElement is called, so that we
		 * can warn. We want to get rid of owner and replace string `ref`s with arrow
		 * functions, and as long as `this` and owner are the same, there will be no
		 * change in behavior.
		 * @param {*} source An annotation object (added by a transpiler or otherwise)
		 * indicating filename, line number, and/or other information.
		 * @internal
		 */


		var ReactElement = function (type, key, ref, self, source, owner, props) {
		  var element = {
		    // This tag allows us to uniquely identify this as a React Element
		    $$typeof: REACT_ELEMENT_TYPE,
		    // Built-in properties that belong on the element
		    type: type,
		    key: key,
		    ref: ref,
		    props: props,
		    // Record the component responsible for creating this element.
		    _owner: owner
		  };

		  {
		    // The validation flag is currently mutative. We put it on
		    // an external backing store so that we can freeze the whole object.
		    // This can be replaced with a WeakMap once they are implemented in
		    // commonly used development environments.
		    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
		    // the validation flag non-enumerable (where possible, which should
		    // include every environment we run tests in), so the test framework
		    // ignores it.

		    Object.defineProperty(element._store, 'validated', {
		      configurable: false,
		      enumerable: false,
		      writable: true,
		      value: false
		    }); // self and source are DEV only properties.

		    Object.defineProperty(element, '_self', {
		      configurable: false,
		      enumerable: false,
		      writable: false,
		      value: self
		    }); // Two elements created in two different places should be considered
		    // equal for testing purposes and therefore we hide it from enumeration.

		    Object.defineProperty(element, '_source', {
		      configurable: false,
		      enumerable: false,
		      writable: false,
		      value: source
		    });

		    if (Object.freeze) {
		      Object.freeze(element.props);
		      Object.freeze(element);
		    }
		  }

		  return element;
		};
		/**
		 * Create and return a new ReactElement of the given type.
		 * See https://reactjs.org/docs/react-api.html#createelement
		 */

		function createElement(type, config, children) {
		  var propName; // Reserved names are extracted

		  var props = {};
		  var key = null;
		  var ref = null;
		  var self = null;
		  var source = null;

		  if (config != null) {
		    if (hasValidRef(config)) {
		      ref = config.ref;

		      {
		        warnIfStringRefCannotBeAutoConverted(config);
		      }
		    }

		    if (hasValidKey(config)) {
		      {
		        checkKeyStringCoercion(config.key);
		      }

		      key = '' + config.key;
		    }

		    self = config.__self === undefined ? null : config.__self;
		    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

		    for (propName in config) {
		      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
		        props[propName] = config[propName];
		      }
		    }
		  } // Children can be more than one argument, and those are transferred onto
		  // the newly allocated props object.


		  var childrenLength = arguments.length - 2;

		  if (childrenLength === 1) {
		    props.children = children;
		  } else if (childrenLength > 1) {
		    var childArray = Array(childrenLength);

		    for (var i = 0; i < childrenLength; i++) {
		      childArray[i] = arguments[i + 2];
		    }

		    {
		      if (Object.freeze) {
		        Object.freeze(childArray);
		      }
		    }

		    props.children = childArray;
		  } // Resolve default props


		  if (type && type.defaultProps) {
		    var defaultProps = type.defaultProps;

		    for (propName in defaultProps) {
		      if (props[propName] === undefined) {
		        props[propName] = defaultProps[propName];
		      }
		    }
		  }

		  {
		    if (key || ref) {
		      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

		      if (key) {
		        defineKeyPropWarningGetter(props, displayName);
		      }

		      if (ref) {
		        defineRefPropWarningGetter(props, displayName);
		      }
		    }
		  }

		  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
		}
		function cloneAndReplaceKey(oldElement, newKey) {
		  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
		  return newElement;
		}
		/**
		 * Clone and return a new ReactElement using element as the starting point.
		 * See https://reactjs.org/docs/react-api.html#cloneelement
		 */

		function cloneElement(element, config, children) {
		  if (element === null || element === undefined) {
		    throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
		  }

		  var propName; // Original props are copied

		  var props = assign({}, element.props); // Reserved names are extracted

		  var key = element.key;
		  var ref = element.ref; // Self is preserved since the owner is preserved.

		  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
		  // transpiler, and the original source is probably a better indicator of the
		  // true owner.

		  var source = element._source; // Owner will be preserved, unless ref is overridden

		  var owner = element._owner;

		  if (config != null) {
		    if (hasValidRef(config)) {
		      // Silently steal the ref from the parent.
		      ref = config.ref;
		      owner = ReactCurrentOwner.current;
		    }

		    if (hasValidKey(config)) {
		      {
		        checkKeyStringCoercion(config.key);
		      }

		      key = '' + config.key;
		    } // Remaining properties override existing props


		    var defaultProps;

		    if (element.type && element.type.defaultProps) {
		      defaultProps = element.type.defaultProps;
		    }

		    for (propName in config) {
		      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
		        if (config[propName] === undefined && defaultProps !== undefined) {
		          // Resolve default props
		          props[propName] = defaultProps[propName];
		        } else {
		          props[propName] = config[propName];
		        }
		      }
		    }
		  } // Children can be more than one argument, and those are transferred onto
		  // the newly allocated props object.


		  var childrenLength = arguments.length - 2;

		  if (childrenLength === 1) {
		    props.children = children;
		  } else if (childrenLength > 1) {
		    var childArray = Array(childrenLength);

		    for (var i = 0; i < childrenLength; i++) {
		      childArray[i] = arguments[i + 2];
		    }

		    props.children = childArray;
		  }

		  return ReactElement(element.type, key, ref, self, source, owner, props);
		}
		/**
		 * Verifies the object is a ReactElement.
		 * See https://reactjs.org/docs/react-api.html#isvalidelement
		 * @param {?object} object
		 * @return {boolean} True if `object` is a ReactElement.
		 * @final
		 */

		function isValidElement(object) {
		  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
		}

		var SEPARATOR = '.';
		var SUBSEPARATOR = ':';
		/**
		 * Escape and wrap key so it is safe to use as a reactid
		 *
		 * @param {string} key to be escaped.
		 * @return {string} the escaped key.
		 */

		function escape(key) {
		  var escapeRegex = /[=:]/g;
		  var escaperLookup = {
		    '=': '=0',
		    ':': '=2'
		  };
		  var escapedString = key.replace(escapeRegex, function (match) {
		    return escaperLookup[match];
		  });
		  return '$' + escapedString;
		}
		/**
		 * TODO: Test that a single child and an array with one item have the same key
		 * pattern.
		 */


		var didWarnAboutMaps = false;
		var userProvidedKeyEscapeRegex = /\/+/g;

		function escapeUserProvidedKey(text) {
		  return text.replace(userProvidedKeyEscapeRegex, '$&/');
		}
		/**
		 * Generate a key string that identifies a element within a set.
		 *
		 * @param {*} element A element that could contain a manual key.
		 * @param {number} index Index that is used if a manual key is not provided.
		 * @return {string}
		 */


		function getElementKey(element, index) {
		  // Do some typechecking here since we call this blindly. We want to ensure
		  // that we don't block potential future ES APIs.
		  if (typeof element === 'object' && element !== null && element.key != null) {
		    // Explicit key
		    {
		      checkKeyStringCoercion(element.key);
		    }

		    return escape('' + element.key);
		  } // Implicit key determined by the index in the set


		  return index.toString(36);
		}

		function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
		  var type = typeof children;

		  if (type === 'undefined' || type === 'boolean') {
		    // All of the above are perceived as null.
		    children = null;
		  }

		  var invokeCallback = false;

		  if (children === null) {
		    invokeCallback = true;
		  } else {
		    switch (type) {
		      case 'string':
		      case 'number':
		        invokeCallback = true;
		        break;

		      case 'object':
		        switch (children.$$typeof) {
		          case REACT_ELEMENT_TYPE:
		          case REACT_PORTAL_TYPE:
		            invokeCallback = true;
		        }

		    }
		  }

		  if (invokeCallback) {
		    var _child = children;
		    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
		    // so that it's consistent if the number of children grows:

		    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

		    if (isArray(mappedChild)) {
		      var escapedChildKey = '';

		      if (childKey != null) {
		        escapedChildKey = escapeUserProvidedKey(childKey) + '/';
		      }

		      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
		        return c;
		      });
		    } else if (mappedChild != null) {
		      if (isValidElement(mappedChild)) {
		        {
		          // The `if` statement here prevents auto-disabling of the safe
		          // coercion ESLint rule, so we must manually disable it below.
		          // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
		          if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
		            checkKeyStringCoercion(mappedChild.key);
		          }
		        }

		        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
		        // traverseAllChildren used to do for objects as children
		        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
		        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
		        // eslint-disable-next-line react-internal/safe-string-coercion
		        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
		      }

		      array.push(mappedChild);
		    }

		    return 1;
		  }

		  var child;
		  var nextName;
		  var subtreeCount = 0; // Count of children found in the current subtree.

		  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

		  if (isArray(children)) {
		    for (var i = 0; i < children.length; i++) {
		      child = children[i];
		      nextName = nextNamePrefix + getElementKey(child, i);
		      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
		    }
		  } else {
		    var iteratorFn = getIteratorFn(children);

		    if (typeof iteratorFn === 'function') {
		      var iterableChildren = children;

		      {
		        // Warn about using Maps as children
		        if (iteratorFn === iterableChildren.entries) {
		          if (!didWarnAboutMaps) {
		            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
		          }

		          didWarnAboutMaps = true;
		        }
		      }

		      var iterator = iteratorFn.call(iterableChildren);
		      var step;
		      var ii = 0;

		      while (!(step = iterator.next()).done) {
		        child = step.value;
		        nextName = nextNamePrefix + getElementKey(child, ii++);
		        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
		      }
		    } else if (type === 'object') {
		      // eslint-disable-next-line react-internal/safe-string-coercion
		      var childrenString = String(children);
		      throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
		    }
		  }

		  return subtreeCount;
		}

		/**
		 * Maps children that are typically specified as `props.children`.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
		 *
		 * The provided mapFunction(child, index) will be called for each
		 * leaf child.
		 *
		 * @param {?*} children Children tree container.
		 * @param {function(*, int)} func The map function.
		 * @param {*} context Context for mapFunction.
		 * @return {object} Object containing the ordered map of results.
		 */
		function mapChildren(children, func, context) {
		  if (children == null) {
		    return children;
		  }

		  var result = [];
		  var count = 0;
		  mapIntoArray(children, result, '', '', function (child) {
		    return func.call(context, child, count++);
		  });
		  return result;
		}
		/**
		 * Count the number of children that are typically specified as
		 * `props.children`.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrencount
		 *
		 * @param {?*} children Children tree container.
		 * @return {number} The number of children.
		 */


		function countChildren(children) {
		  var n = 0;
		  mapChildren(children, function () {
		    n++; // Don't return anything
		  });
		  return n;
		}

		/**
		 * Iterates through children that are typically specified as `props.children`.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
		 *
		 * The provided forEachFunc(child, index) will be called for each
		 * leaf child.
		 *
		 * @param {?*} children Children tree container.
		 * @param {function(*, int)} forEachFunc
		 * @param {*} forEachContext Context for forEachContext.
		 */
		function forEachChildren(children, forEachFunc, forEachContext) {
		  mapChildren(children, function () {
		    forEachFunc.apply(this, arguments); // Don't return anything.
		  }, forEachContext);
		}
		/**
		 * Flatten a children object (typically specified as `props.children`) and
		 * return an array with appropriately re-keyed children.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
		 */


		function toArray(children) {
		  return mapChildren(children, function (child) {
		    return child;
		  }) || [];
		}
		/**
		 * Returns the first child in a collection of children and verifies that there
		 * is only one child in the collection.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
		 *
		 * The current implementation of this function assumes that a single child gets
		 * passed without a wrapper, but the purpose of this helper function is to
		 * abstract away the particular structure of children.
		 *
		 * @param {?object} children Child collection structure.
		 * @return {ReactElement} The first and only `ReactElement` contained in the
		 * structure.
		 */


		function onlyChild(children) {
		  if (!isValidElement(children)) {
		    throw new Error('React.Children.only expected to receive a single React element child.');
		  }

		  return children;
		}

		function createContext(defaultValue) {
		  // TODO: Second argument used to be an optional `calculateChangedBits`
		  // function. Warn to reserve for future use?
		  var context = {
		    $$typeof: REACT_CONTEXT_TYPE,
		    // As a workaround to support multiple concurrent renderers, we categorize
		    // some renderers as primary and others as secondary. We only expect
		    // there to be two concurrent renderers at most: React Native (primary) and
		    // Fabric (secondary); React DOM (primary) and React ART (secondary).
		    // Secondary renderers store their context values on separate fields.
		    _currentValue: defaultValue,
		    _currentValue2: defaultValue,
		    // Used to track how many concurrent renderers this context currently
		    // supports within in a single renderer. Such as parallel server rendering.
		    _threadCount: 0,
		    // These are circular
		    Provider: null,
		    Consumer: null,
		    // Add these to use same hidden class in VM as ServerContext
		    _defaultValue: null,
		    _globalName: null
		  };
		  context.Provider = {
		    $$typeof: REACT_PROVIDER_TYPE,
		    _context: context
		  };
		  var hasWarnedAboutUsingNestedContextConsumers = false;
		  var hasWarnedAboutUsingConsumerProvider = false;
		  var hasWarnedAboutDisplayNameOnConsumer = false;

		  {
		    // A separate object, but proxies back to the original context object for
		    // backwards compatibility. It has a different $$typeof, so we can properly
		    // warn for the incorrect usage of Context as a Consumer.
		    var Consumer = {
		      $$typeof: REACT_CONTEXT_TYPE,
		      _context: context
		    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

		    Object.defineProperties(Consumer, {
		      Provider: {
		        get: function () {
		          if (!hasWarnedAboutUsingConsumerProvider) {
		            hasWarnedAboutUsingConsumerProvider = true;

		            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
		          }

		          return context.Provider;
		        },
		        set: function (_Provider) {
		          context.Provider = _Provider;
		        }
		      },
		      _currentValue: {
		        get: function () {
		          return context._currentValue;
		        },
		        set: function (_currentValue) {
		          context._currentValue = _currentValue;
		        }
		      },
		      _currentValue2: {
		        get: function () {
		          return context._currentValue2;
		        },
		        set: function (_currentValue2) {
		          context._currentValue2 = _currentValue2;
		        }
		      },
		      _threadCount: {
		        get: function () {
		          return context._threadCount;
		        },
		        set: function (_threadCount) {
		          context._threadCount = _threadCount;
		        }
		      },
		      Consumer: {
		        get: function () {
		          if (!hasWarnedAboutUsingNestedContextConsumers) {
		            hasWarnedAboutUsingNestedContextConsumers = true;

		            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
		          }

		          return context.Consumer;
		        }
		      },
		      displayName: {
		        get: function () {
		          return context.displayName;
		        },
		        set: function (displayName) {
		          if (!hasWarnedAboutDisplayNameOnConsumer) {
		            warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);

		            hasWarnedAboutDisplayNameOnConsumer = true;
		          }
		        }
		      }
		    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

		    context.Consumer = Consumer;
		  }

		  {
		    context._currentRenderer = null;
		    context._currentRenderer2 = null;
		  }

		  return context;
		}

		var Uninitialized = -1;
		var Pending = 0;
		var Resolved = 1;
		var Rejected = 2;

		function lazyInitializer(payload) {
		  if (payload._status === Uninitialized) {
		    var ctor = payload._result;
		    var thenable = ctor(); // Transition to the next state.
		    // This might throw either because it's missing or throws. If so, we treat it
		    // as still uninitialized and try again next time. Which is the same as what
		    // happens if the ctor or any wrappers processing the ctor throws. This might
		    // end up fixing it if the resolution was a concurrency bug.

		    thenable.then(function (moduleObject) {
		      if (payload._status === Pending || payload._status === Uninitialized) {
		        // Transition to the next state.
		        var resolved = payload;
		        resolved._status = Resolved;
		        resolved._result = moduleObject;
		      }
		    }, function (error) {
		      if (payload._status === Pending || payload._status === Uninitialized) {
		        // Transition to the next state.
		        var rejected = payload;
		        rejected._status = Rejected;
		        rejected._result = error;
		      }
		    });

		    if (payload._status === Uninitialized) {
		      // In case, we're still uninitialized, then we're waiting for the thenable
		      // to resolve. Set it as pending in the meantime.
		      var pending = payload;
		      pending._status = Pending;
		      pending._result = thenable;
		    }
		  }

		  if (payload._status === Resolved) {
		    var moduleObject = payload._result;

		    {
		      if (moduleObject === undefined) {
		        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
		        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))\n\n" + 'Did you accidentally put curly braces around the import?', moduleObject);
		      }
		    }

		    {
		      if (!('default' in moduleObject)) {
		        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
		        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
		      }
		    }

		    return moduleObject.default;
		  } else {
		    throw payload._result;
		  }
		}

		function lazy(ctor) {
		  var payload = {
		    // We use these fields to store the result.
		    _status: Uninitialized,
		    _result: ctor
		  };
		  var lazyType = {
		    $$typeof: REACT_LAZY_TYPE,
		    _payload: payload,
		    _init: lazyInitializer
		  };

		  {
		    // In production, this would just set it on the object.
		    var defaultProps;
		    var propTypes; // $FlowFixMe

		    Object.defineProperties(lazyType, {
		      defaultProps: {
		        configurable: true,
		        get: function () {
		          return defaultProps;
		        },
		        set: function (newDefaultProps) {
		          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

		          defaultProps = newDefaultProps; // Match production behavior more closely:
		          // $FlowFixMe

		          Object.defineProperty(lazyType, 'defaultProps', {
		            enumerable: true
		          });
		        }
		      },
		      propTypes: {
		        configurable: true,
		        get: function () {
		          return propTypes;
		        },
		        set: function (newPropTypes) {
		          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

		          propTypes = newPropTypes; // Match production behavior more closely:
		          // $FlowFixMe

		          Object.defineProperty(lazyType, 'propTypes', {
		            enumerable: true
		          });
		        }
		      }
		    });
		  }

		  return lazyType;
		}

		function forwardRef(render) {
		  {
		    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
		      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
		    } else if (typeof render !== 'function') {
		      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
		    } else {
		      if (render.length !== 0 && render.length !== 2) {
		        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
		      }
		    }

		    if (render != null) {
		      if (render.defaultProps != null || render.propTypes != null) {
		        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
		      }
		    }
		  }

		  var elementType = {
		    $$typeof: REACT_FORWARD_REF_TYPE,
		    render: render
		  };

		  {
		    var ownName;
		    Object.defineProperty(elementType, 'displayName', {
		      enumerable: false,
		      configurable: true,
		      get: function () {
		        return ownName;
		      },
		      set: function (name) {
		        ownName = name; // The inner component shouldn't inherit this display name in most cases,
		        // because the component may be used elsewhere.
		        // But it's nice for anonymous functions to inherit the name,
		        // so that our component-stack generation logic will display their frames.
		        // An anonymous function generally suggests a pattern like:
		        //   React.forwardRef((props, ref) => {...});
		        // This kind of inner function is not used elsewhere so the side effect is okay.

		        if (!render.name && !render.displayName) {
		          render.displayName = name;
		        }
		      }
		    });
		  }

		  return elementType;
		}

		var REACT_MODULE_REFERENCE;

		{
		  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
		}

		function isValidElementType(type) {
		  if (typeof type === 'string' || typeof type === 'function') {
		    return true;
		  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


		  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
		    return true;
		  }

		  if (typeof type === 'object' && type !== null) {
		    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
		    // types supported by any Flight configuration anywhere since
		    // we don't know which Flight build this will end up being used
		    // with.
		    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
		      return true;
		    }
		  }

		  return false;
		}

		function memo(type, compare) {
		  {
		    if (!isValidElementType(type)) {
		      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
		    }
		  }

		  var elementType = {
		    $$typeof: REACT_MEMO_TYPE,
		    type: type,
		    compare: compare === undefined ? null : compare
		  };

		  {
		    var ownName;
		    Object.defineProperty(elementType, 'displayName', {
		      enumerable: false,
		      configurable: true,
		      get: function () {
		        return ownName;
		      },
		      set: function (name) {
		        ownName = name; // The inner component shouldn't inherit this display name in most cases,
		        // because the component may be used elsewhere.
		        // But it's nice for anonymous functions to inherit the name,
		        // so that our component-stack generation logic will display their frames.
		        // An anonymous function generally suggests a pattern like:
		        //   React.memo((props) => {...});
		        // This kind of inner function is not used elsewhere so the side effect is okay.

		        if (!type.name && !type.displayName) {
		          type.displayName = name;
		        }
		      }
		    });
		  }

		  return elementType;
		}

		function resolveDispatcher() {
		  var dispatcher = ReactCurrentDispatcher.current;

		  {
		    if (dispatcher === null) {
		      error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
		    }
		  } // Will result in a null access error if accessed outside render phase. We
		  // intentionally don't throw our own error because this is in a hot path.
		  // Also helps ensure this is inlined.


		  return dispatcher;
		}
		function useContext(Context) {
		  var dispatcher = resolveDispatcher();

		  {
		    // TODO: add a more generic warning for invalid values.
		    if (Context._context !== undefined) {
		      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
		      // and nobody should be using this in existing code.

		      if (realContext.Consumer === Context) {
		        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
		      } else if (realContext.Provider === Context) {
		        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
		      }
		    }
		  }

		  return dispatcher.useContext(Context);
		}
		function useState(initialState) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useState(initialState);
		}
		function useReducer(reducer, initialArg, init) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useReducer(reducer, initialArg, init);
		}
		function useRef(initialValue) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useRef(initialValue);
		}
		function useEffect(create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useEffect(create, deps);
		}
		function useInsertionEffect(create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useInsertionEffect(create, deps);
		}
		function useLayoutEffect(create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useLayoutEffect(create, deps);
		}
		function useCallback(callback, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useCallback(callback, deps);
		}
		function useMemo(create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useMemo(create, deps);
		}
		function useImperativeHandle(ref, create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useImperativeHandle(ref, create, deps);
		}
		function useDebugValue(value, formatterFn) {
		  {
		    var dispatcher = resolveDispatcher();
		    return dispatcher.useDebugValue(value, formatterFn);
		  }
		}
		function useTransition() {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useTransition();
		}
		function useDeferredValue(value) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useDeferredValue(value);
		}
		function useId() {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useId();
		}
		function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
		}

		// Helpers to patch console.logs to avoid logging during side-effect free
		// replaying on render function. This currently only patches the object
		// lazily which won't cover if the log function was extracted eagerly.
		// We could also eagerly patch the method.
		var disabledDepth = 0;
		var prevLog;
		var prevInfo;
		var prevWarn;
		var prevError;
		var prevGroup;
		var prevGroupCollapsed;
		var prevGroupEnd;

		function disabledLog() {}

		disabledLog.__reactDisabledLog = true;
		function disableLogs() {
		  {
		    if (disabledDepth === 0) {
		      /* eslint-disable react-internal/no-production-logging */
		      prevLog = console.log;
		      prevInfo = console.info;
		      prevWarn = console.warn;
		      prevError = console.error;
		      prevGroup = console.group;
		      prevGroupCollapsed = console.groupCollapsed;
		      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

		      var props = {
		        configurable: true,
		        enumerable: true,
		        value: disabledLog,
		        writable: true
		      }; // $FlowFixMe Flow thinks console is immutable.

		      Object.defineProperties(console, {
		        info: props,
		        log: props,
		        warn: props,
		        error: props,
		        group: props,
		        groupCollapsed: props,
		        groupEnd: props
		      });
		      /* eslint-enable react-internal/no-production-logging */
		    }

		    disabledDepth++;
		  }
		}
		function reenableLogs() {
		  {
		    disabledDepth--;

		    if (disabledDepth === 0) {
		      /* eslint-disable react-internal/no-production-logging */
		      var props = {
		        configurable: true,
		        enumerable: true,
		        writable: true
		      }; // $FlowFixMe Flow thinks console is immutable.

		      Object.defineProperties(console, {
		        log: assign({}, props, {
		          value: prevLog
		        }),
		        info: assign({}, props, {
		          value: prevInfo
		        }),
		        warn: assign({}, props, {
		          value: prevWarn
		        }),
		        error: assign({}, props, {
		          value: prevError
		        }),
		        group: assign({}, props, {
		          value: prevGroup
		        }),
		        groupCollapsed: assign({}, props, {
		          value: prevGroupCollapsed
		        }),
		        groupEnd: assign({}, props, {
		          value: prevGroupEnd
		        })
		      });
		      /* eslint-enable react-internal/no-production-logging */
		    }

		    if (disabledDepth < 0) {
		      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
		    }
		  }
		}

		var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
		var prefix;
		function describeBuiltInComponentFrame(name, source, ownerFn) {
		  {
		    if (prefix === undefined) {
		      // Extract the VM specific prefix used by each line.
		      try {
		        throw Error();
		      } catch (x) {
		        var match = x.stack.trim().match(/\n( *(at )?)/);
		        prefix = match && match[1] || '';
		      }
		    } // We use the prefix to ensure our stacks line up with native stack frames.


		    return '\n' + prefix + name;
		  }
		}
		var reentry = false;
		var componentFrameCache;

		{
		  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
		  componentFrameCache = new PossiblyWeakMap();
		}

		function describeNativeComponentFrame(fn, construct) {
		  // If something asked for a stack inside a fake render, it should get ignored.
		  if ( !fn || reentry) {
		    return '';
		  }

		  {
		    var frame = componentFrameCache.get(fn);

		    if (frame !== undefined) {
		      return frame;
		    }
		  }

		  var control;
		  reentry = true;
		  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

		  Error.prepareStackTrace = undefined;
		  var previousDispatcher;

		  {
		    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
		    // for warnings.

		    ReactCurrentDispatcher$1.current = null;
		    disableLogs();
		  }

		  try {
		    // This should throw.
		    if (construct) {
		      // Something should be setting the props in the constructor.
		      var Fake = function () {
		        throw Error();
		      }; // $FlowFixMe


		      Object.defineProperty(Fake.prototype, 'props', {
		        set: function () {
		          // We use a throwing setter instead of frozen or non-writable props
		          // because that won't throw in a non-strict mode function.
		          throw Error();
		        }
		      });

		      if (typeof Reflect === 'object' && Reflect.construct) {
		        // We construct a different control for this case to include any extra
		        // frames added by the construct call.
		        try {
		          Reflect.construct(Fake, []);
		        } catch (x) {
		          control = x;
		        }

		        Reflect.construct(fn, [], Fake);
		      } else {
		        try {
		          Fake.call();
		        } catch (x) {
		          control = x;
		        }

		        fn.call(Fake.prototype);
		      }
		    } else {
		      try {
		        throw Error();
		      } catch (x) {
		        control = x;
		      }

		      fn();
		    }
		  } catch (sample) {
		    // This is inlined manually because closure doesn't do it for us.
		    if (sample && control && typeof sample.stack === 'string') {
		      // This extracts the first frame from the sample that isn't also in the control.
		      // Skipping one frame that we assume is the frame that calls the two.
		      var sampleLines = sample.stack.split('\n');
		      var controlLines = control.stack.split('\n');
		      var s = sampleLines.length - 1;
		      var c = controlLines.length - 1;

		      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
		        // We expect at least one stack frame to be shared.
		        // Typically this will be the root most one. However, stack frames may be
		        // cut off due to maximum stack limits. In this case, one maybe cut off
		        // earlier than the other. We assume that the sample is longer or the same
		        // and there for cut off earlier. So we should find the root most frame in
		        // the sample somewhere in the control.
		        c--;
		      }

		      for (; s >= 1 && c >= 0; s--, c--) {
		        // Next we find the first one that isn't the same which should be the
		        // frame that called our sample function and the control.
		        if (sampleLines[s] !== controlLines[c]) {
		          // In V8, the first line is describing the message but other VMs don't.
		          // If we're about to return the first line, and the control is also on the same
		          // line, that's a pretty good indicator that our sample threw at same line as
		          // the control. I.e. before we entered the sample frame. So we ignore this result.
		          // This can happen if you passed a class to function component, or non-function.
		          if (s !== 1 || c !== 1) {
		            do {
		              s--;
		              c--; // We may still have similar intermediate frames from the construct call.
		              // The next one that isn't the same should be our match though.

		              if (c < 0 || sampleLines[s] !== controlLines[c]) {
		                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
		                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
		                // but we have a user-provided "displayName"
		                // splice it in to make the stack more readable.


		                if (fn.displayName && _frame.includes('<anonymous>')) {
		                  _frame = _frame.replace('<anonymous>', fn.displayName);
		                }

		                {
		                  if (typeof fn === 'function') {
		                    componentFrameCache.set(fn, _frame);
		                  }
		                } // Return the line we found.


		                return _frame;
		              }
		            } while (s >= 1 && c >= 0);
		          }

		          break;
		        }
		      }
		    }
		  } finally {
		    reentry = false;

		    {
		      ReactCurrentDispatcher$1.current = previousDispatcher;
		      reenableLogs();
		    }

		    Error.prepareStackTrace = previousPrepareStackTrace;
		  } // Fallback to just using the name if we couldn't make it throw.


		  var name = fn ? fn.displayName || fn.name : '';
		  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

		  {
		    if (typeof fn === 'function') {
		      componentFrameCache.set(fn, syntheticFrame);
		    }
		  }

		  return syntheticFrame;
		}
		function describeFunctionComponentFrame(fn, source, ownerFn) {
		  {
		    return describeNativeComponentFrame(fn, false);
		  }
		}

		function shouldConstruct(Component) {
		  var prototype = Component.prototype;
		  return !!(prototype && prototype.isReactComponent);
		}

		function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

		  if (type == null) {
		    return '';
		  }

		  if (typeof type === 'function') {
		    {
		      return describeNativeComponentFrame(type, shouldConstruct(type));
		    }
		  }

		  if (typeof type === 'string') {
		    return describeBuiltInComponentFrame(type);
		  }

		  switch (type) {
		    case REACT_SUSPENSE_TYPE:
		      return describeBuiltInComponentFrame('Suspense');

		    case REACT_SUSPENSE_LIST_TYPE:
		      return describeBuiltInComponentFrame('SuspenseList');
		  }

		  if (typeof type === 'object') {
		    switch (type.$$typeof) {
		      case REACT_FORWARD_REF_TYPE:
		        return describeFunctionComponentFrame(type.render);

		      case REACT_MEMO_TYPE:
		        // Memo may contain any component type so we recursively resolve it.
		        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

		      case REACT_LAZY_TYPE:
		        {
		          var lazyComponent = type;
		          var payload = lazyComponent._payload;
		          var init = lazyComponent._init;

		          try {
		            // Lazy may contain any component type so we recursively resolve it.
		            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
		          } catch (x) {}
		        }
		    }
		  }

		  return '';
		}

		var loggedTypeFailures = {};
		var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

		function setCurrentlyValidatingElement(element) {
		  {
		    if (element) {
		      var owner = element._owner;
		      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
		      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
		    } else {
		      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
		    }
		  }
		}

		function checkPropTypes(typeSpecs, values, location, componentName, element) {
		  {
		    // $FlowFixMe This is okay but Flow doesn't know it.
		    var has = Function.call.bind(hasOwnProperty);

		    for (var typeSpecName in typeSpecs) {
		      if (has(typeSpecs, typeSpecName)) {
		        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
		        // fail the render phase where it didn't fail before. So we log it.
		        // After these have been cleaned up, we'll let them throw.

		        try {
		          // This is intentionally an invariant that gets caught. It's the same
		          // behavior as without this statement except with a better message.
		          if (typeof typeSpecs[typeSpecName] !== 'function') {
		            // eslint-disable-next-line react-internal/prod-error-codes
		            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
		            err.name = 'Invariant Violation';
		            throw err;
		          }

		          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
		        } catch (ex) {
		          error$1 = ex;
		        }

		        if (error$1 && !(error$1 instanceof Error)) {
		          setCurrentlyValidatingElement(element);

		          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

		          setCurrentlyValidatingElement(null);
		        }

		        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
		          // Only monitor this failure once because there tends to be a lot of the
		          // same error.
		          loggedTypeFailures[error$1.message] = true;
		          setCurrentlyValidatingElement(element);

		          error('Failed %s type: %s', location, error$1.message);

		          setCurrentlyValidatingElement(null);
		        }
		      }
		    }
		  }
		}

		function setCurrentlyValidatingElement$1(element) {
		  {
		    if (element) {
		      var owner = element._owner;
		      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
		      setExtraStackFrame(stack);
		    } else {
		      setExtraStackFrame(null);
		    }
		  }
		}

		var propTypesMisspellWarningShown;

		{
		  propTypesMisspellWarningShown = false;
		}

		function getDeclarationErrorAddendum() {
		  if (ReactCurrentOwner.current) {
		    var name = getComponentNameFromType(ReactCurrentOwner.current.type);

		    if (name) {
		      return '\n\nCheck the render method of `' + name + '`.';
		    }
		  }

		  return '';
		}

		function getSourceInfoErrorAddendum(source) {
		  if (source !== undefined) {
		    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
		    var lineNumber = source.lineNumber;
		    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
		  }

		  return '';
		}

		function getSourceInfoErrorAddendumForProps(elementProps) {
		  if (elementProps !== null && elementProps !== undefined) {
		    return getSourceInfoErrorAddendum(elementProps.__source);
		  }

		  return '';
		}
		/**
		 * Warn if there's no key explicitly set on dynamic arrays of children or
		 * object keys are not valid. This allows us to keep track of children between
		 * updates.
		 */


		var ownerHasKeyUseWarning = {};

		function getCurrentComponentErrorInfo(parentType) {
		  var info = getDeclarationErrorAddendum();

		  if (!info) {
		    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

		    if (parentName) {
		      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
		    }
		  }

		  return info;
		}
		/**
		 * Warn if the element doesn't have an explicit key assigned to it.
		 * This element is in an array. The array could grow and shrink or be
		 * reordered. All children that haven't already been validated are required to
		 * have a "key" property assigned to it. Error statuses are cached so a warning
		 * will only be shown once.
		 *
		 * @internal
		 * @param {ReactElement} element Element that requires a key.
		 * @param {*} parentType element's parent's type.
		 */


		function validateExplicitKey(element, parentType) {
		  if (!element._store || element._store.validated || element.key != null) {
		    return;
		  }

		  element._store.validated = true;
		  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

		  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
		    return;
		  }

		  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
		  // property, it may be the creator of the child that's responsible for
		  // assigning it a key.

		  var childOwner = '';

		  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
		    // Give the component that originally created this child.
		    childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
		  }

		  {
		    setCurrentlyValidatingElement$1(element);

		    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

		    setCurrentlyValidatingElement$1(null);
		  }
		}
		/**
		 * Ensure that every element either is passed in a static location, in an
		 * array with an explicit keys property defined, or in an object literal
		 * with valid key property.
		 *
		 * @internal
		 * @param {ReactNode} node Statically passed child of any type.
		 * @param {*} parentType node's parent's type.
		 */


		function validateChildKeys(node, parentType) {
		  if (typeof node !== 'object') {
		    return;
		  }

		  if (isArray(node)) {
		    for (var i = 0; i < node.length; i++) {
		      var child = node[i];

		      if (isValidElement(child)) {
		        validateExplicitKey(child, parentType);
		      }
		    }
		  } else if (isValidElement(node)) {
		    // This element was passed in a valid location.
		    if (node._store) {
		      node._store.validated = true;
		    }
		  } else if (node) {
		    var iteratorFn = getIteratorFn(node);

		    if (typeof iteratorFn === 'function') {
		      // Entry iterators used to provide implicit keys,
		      // but now we print a separate warning for them later.
		      if (iteratorFn !== node.entries) {
		        var iterator = iteratorFn.call(node);
		        var step;

		        while (!(step = iterator.next()).done) {
		          if (isValidElement(step.value)) {
		            validateExplicitKey(step.value, parentType);
		          }
		        }
		      }
		    }
		  }
		}
		/**
		 * Given an element, validate that its props follow the propTypes definition,
		 * provided by the type.
		 *
		 * @param {ReactElement} element
		 */


		function validatePropTypes(element) {
		  {
		    var type = element.type;

		    if (type === null || type === undefined || typeof type === 'string') {
		      return;
		    }

		    var propTypes;

		    if (typeof type === 'function') {
		      propTypes = type.propTypes;
		    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
		    // Inner props are checked in the reconciler.
		    type.$$typeof === REACT_MEMO_TYPE)) {
		      propTypes = type.propTypes;
		    } else {
		      return;
		    }

		    if (propTypes) {
		      // Intentionally inside to avoid triggering lazy initializers:
		      var name = getComponentNameFromType(type);
		      checkPropTypes(propTypes, element.props, 'prop', name, element);
		    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
		      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

		      var _name = getComponentNameFromType(type);

		      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
		    }

		    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
		      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
		    }
		  }
		}
		/**
		 * Given a fragment, validate that it can only be provided with fragment props
		 * @param {ReactElement} fragment
		 */


		function validateFragmentProps(fragment) {
		  {
		    var keys = Object.keys(fragment.props);

		    for (var i = 0; i < keys.length; i++) {
		      var key = keys[i];

		      if (key !== 'children' && key !== 'key') {
		        setCurrentlyValidatingElement$1(fragment);

		        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

		        setCurrentlyValidatingElement$1(null);
		        break;
		      }
		    }

		    if (fragment.ref !== null) {
		      setCurrentlyValidatingElement$1(fragment);

		      error('Invalid attribute `ref` supplied to `React.Fragment`.');

		      setCurrentlyValidatingElement$1(null);
		    }
		  }
		}
		function createElementWithValidation(type, props, children) {
		  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
		  // succeed and there will likely be errors in render.

		  if (!validType) {
		    var info = '';

		    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
		      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
		    }

		    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

		    if (sourceInfo) {
		      info += sourceInfo;
		    } else {
		      info += getDeclarationErrorAddendum();
		    }

		    var typeString;

		    if (type === null) {
		      typeString = 'null';
		    } else if (isArray(type)) {
		      typeString = 'array';
		    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
		      typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
		      info = ' Did you accidentally export a JSX literal instead of a component?';
		    } else {
		      typeString = typeof type;
		    }

		    {
		      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
		    }
		  }

		  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
		  // TODO: Drop this when these are no longer allowed as the type argument.

		  if (element == null) {
		    return element;
		  } // Skip key warning if the type isn't valid since our key validation logic
		  // doesn't expect a non-string/function type and can throw confusing errors.
		  // We don't want exception behavior to differ between dev and prod.
		  // (Rendering will throw with a helpful message and as soon as the type is
		  // fixed, the key warnings will appear.)


		  if (validType) {
		    for (var i = 2; i < arguments.length; i++) {
		      validateChildKeys(arguments[i], type);
		    }
		  }

		  if (type === REACT_FRAGMENT_TYPE) {
		    validateFragmentProps(element);
		  } else {
		    validatePropTypes(element);
		  }

		  return element;
		}
		var didWarnAboutDeprecatedCreateFactory = false;
		function createFactoryWithValidation(type) {
		  var validatedFactory = createElementWithValidation.bind(null, type);
		  validatedFactory.type = type;

		  {
		    if (!didWarnAboutDeprecatedCreateFactory) {
		      didWarnAboutDeprecatedCreateFactory = true;

		      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
		    } // Legacy hook: remove it


		    Object.defineProperty(validatedFactory, 'type', {
		      enumerable: false,
		      get: function () {
		        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

		        Object.defineProperty(this, 'type', {
		          value: type
		        });
		        return type;
		      }
		    });
		  }

		  return validatedFactory;
		}
		function cloneElementWithValidation(element, props, children) {
		  var newElement = cloneElement.apply(this, arguments);

		  for (var i = 2; i < arguments.length; i++) {
		    validateChildKeys(arguments[i], newElement.type);
		  }

		  validatePropTypes(newElement);
		  return newElement;
		}

		function startTransition(scope, options) {
		  var prevTransition = ReactCurrentBatchConfig.transition;
		  ReactCurrentBatchConfig.transition = {};
		  var currentTransition = ReactCurrentBatchConfig.transition;

		  {
		    ReactCurrentBatchConfig.transition._updatedFibers = new Set();
		  }

		  try {
		    scope();
		  } finally {
		    ReactCurrentBatchConfig.transition = prevTransition;

		    {
		      if (prevTransition === null && currentTransition._updatedFibers) {
		        var updatedFibersCount = currentTransition._updatedFibers.size;

		        if (updatedFibersCount > 10) {
		          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
		        }

		        currentTransition._updatedFibers.clear();
		      }
		    }
		  }
		}

		var didWarnAboutMessageChannel = false;
		var enqueueTaskImpl = null;
		function enqueueTask(task) {
		  if (enqueueTaskImpl === null) {
		    try {
		      // read require off the module object to get around the bundlers.
		      // we don't want them to detect a require and bundle a Node polyfill.
		      var requireString = ('require' + Math.random()).slice(0, 7);
		      var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
		      // version of setImmediate, bypassing fake timers if any.

		      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
		    } catch (_err) {
		      // we're in a browser
		      // we can't use regular timers because they may still be faked
		      // so we try MessageChannel+postMessage instead
		      enqueueTaskImpl = function (callback) {
		        {
		          if (didWarnAboutMessageChannel === false) {
		            didWarnAboutMessageChannel = true;

		            if (typeof MessageChannel === 'undefined') {
		              error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');
		            }
		          }
		        }

		        var channel = new MessageChannel();
		        channel.port1.onmessage = callback;
		        channel.port2.postMessage(undefined);
		      };
		    }
		  }

		  return enqueueTaskImpl(task);
		}

		var actScopeDepth = 0;
		var didWarnNoAwaitAct = false;
		function act(callback) {
		  {
		    // `act` calls can be nested, so we track the depth. This represents the
		    // number of `act` scopes on the stack.
		    var prevActScopeDepth = actScopeDepth;
		    actScopeDepth++;

		    if (ReactCurrentActQueue.current === null) {
		      // This is the outermost `act` scope. Initialize the queue. The reconciler
		      // will detect the queue and use it instead of Scheduler.
		      ReactCurrentActQueue.current = [];
		    }

		    var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
		    var result;

		    try {
		      // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
		      // set to `true` while the given callback is executed, not for updates
		      // triggered during an async event, because this is how the legacy
		      // implementation of `act` behaved.
		      ReactCurrentActQueue.isBatchingLegacy = true;
		      result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
		      // which flushed updates immediately after the scope function exits, even
		      // if it's an async function.

		      if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
		        var queue = ReactCurrentActQueue.current;

		        if (queue !== null) {
		          ReactCurrentActQueue.didScheduleLegacyUpdate = false;
		          flushActQueue(queue);
		        }
		      }
		    } catch (error) {
		      popActScope(prevActScopeDepth);
		      throw error;
		    } finally {
		      ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
		    }

		    if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
		      var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
		      // for it to resolve before exiting the current scope.

		      var wasAwaited = false;
		      var thenable = {
		        then: function (resolve, reject) {
		          wasAwaited = true;
		          thenableResult.then(function (returnValue) {
		            popActScope(prevActScopeDepth);

		            if (actScopeDepth === 0) {
		              // We've exited the outermost act scope. Recursively flush the
		              // queue until there's no remaining work.
		              recursivelyFlushAsyncActWork(returnValue, resolve, reject);
		            } else {
		              resolve(returnValue);
		            }
		          }, function (error) {
		            // The callback threw an error.
		            popActScope(prevActScopeDepth);
		            reject(error);
		          });
		        }
		      };

		      {
		        if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {
		          // eslint-disable-next-line no-undef
		          Promise.resolve().then(function () {}).then(function () {
		            if (!wasAwaited) {
		              didWarnNoAwaitAct = true;

		              error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');
		            }
		          });
		        }
		      }

		      return thenable;
		    } else {
		      var returnValue = result; // The callback is not an async function. Exit the current scope
		      // immediately, without awaiting.

		      popActScope(prevActScopeDepth);

		      if (actScopeDepth === 0) {
		        // Exiting the outermost act scope. Flush the queue.
		        var _queue = ReactCurrentActQueue.current;

		        if (_queue !== null) {
		          flushActQueue(_queue);
		          ReactCurrentActQueue.current = null;
		        } // Return a thenable. If the user awaits it, we'll flush again in
		        // case additional work was scheduled by a microtask.


		        var _thenable = {
		          then: function (resolve, reject) {
		            // Confirm we haven't re-entered another `act` scope, in case
		            // the user does something weird like await the thenable
		            // multiple times.
		            if (ReactCurrentActQueue.current === null) {
		              // Recursively flush the queue until there's no remaining work.
		              ReactCurrentActQueue.current = [];
		              recursivelyFlushAsyncActWork(returnValue, resolve, reject);
		            } else {
		              resolve(returnValue);
		            }
		          }
		        };
		        return _thenable;
		      } else {
		        // Since we're inside a nested `act` scope, the returned thenable
		        // immediately resolves. The outer scope will flush the queue.
		        var _thenable2 = {
		          then: function (resolve, reject) {
		            resolve(returnValue);
		          }
		        };
		        return _thenable2;
		      }
		    }
		  }
		}

		function popActScope(prevActScopeDepth) {
		  {
		    if (prevActScopeDepth !== actScopeDepth - 1) {
		      error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');
		    }

		    actScopeDepth = prevActScopeDepth;
		  }
		}

		function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
		  {
		    var queue = ReactCurrentActQueue.current;

		    if (queue !== null) {
		      try {
		        flushActQueue(queue);
		        enqueueTask(function () {
		          if (queue.length === 0) {
		            // No additional work was scheduled. Finish.
		            ReactCurrentActQueue.current = null;
		            resolve(returnValue);
		          } else {
		            // Keep flushing work until there's none left.
		            recursivelyFlushAsyncActWork(returnValue, resolve, reject);
		          }
		        });
		      } catch (error) {
		        reject(error);
		      }
		    } else {
		      resolve(returnValue);
		    }
		  }
		}

		var isFlushing = false;

		function flushActQueue(queue) {
		  {
		    if (!isFlushing) {
		      // Prevent re-entrance.
		      isFlushing = true;
		      var i = 0;

		      try {
		        for (; i < queue.length; i++) {
		          var callback = queue[i];

		          do {
		            callback = callback(true);
		          } while (callback !== null);
		        }

		        queue.length = 0;
		      } catch (error) {
		        // If something throws, leave the remaining callbacks on the queue.
		        queue = queue.slice(i + 1);
		        throw error;
		      } finally {
		        isFlushing = false;
		      }
		    }
		  }
		}

		var createElement$1 =  createElementWithValidation ;
		var cloneElement$1 =  cloneElementWithValidation ;
		var createFactory =  createFactoryWithValidation ;
		var Children = {
		  map: mapChildren,
		  forEach: forEachChildren,
		  count: countChildren,
		  toArray: toArray,
		  only: onlyChild
		};

		exports.Children = Children;
		exports.Component = Component;
		exports.Fragment = REACT_FRAGMENT_TYPE;
		exports.Profiler = REACT_PROFILER_TYPE;
		exports.PureComponent = PureComponent;
		exports.StrictMode = REACT_STRICT_MODE_TYPE;
		exports.Suspense = REACT_SUSPENSE_TYPE;
		exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
		exports.act = act;
		exports.cloneElement = cloneElement$1;
		exports.createContext = createContext;
		exports.createElement = createElement$1;
		exports.createFactory = createFactory;
		exports.createRef = createRef;
		exports.forwardRef = forwardRef;
		exports.isValidElement = isValidElement;
		exports.lazy = lazy;
		exports.memo = memo;
		exports.startTransition = startTransition;
		exports.unstable_act = act;
		exports.useCallback = useCallback;
		exports.useContext = useContext;
		exports.useDebugValue = useDebugValue;
		exports.useDeferredValue = useDeferredValue;
		exports.useEffect = useEffect;
		exports.useId = useId;
		exports.useImperativeHandle = useImperativeHandle;
		exports.useInsertionEffect = useInsertionEffect;
		exports.useLayoutEffect = useLayoutEffect;
		exports.useMemo = useMemo;
		exports.useReducer = useReducer;
		exports.useRef = useRef;
		exports.useState = useState;
		exports.useSyncExternalStore = useSyncExternalStore;
		exports.useTransition = useTransition;
		exports.version = ReactVersion;
		          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
		}
		        
		  })();
		} 
	} (react_development, react_development.exports));
	return react_development.exports;
}

if (process.env.NODE_ENV === 'production') {
  react.exports = requireReact_production_min();
} else {
  react.exports = requireReact_development();
}

var reactExports = react.exports;
var React = /*@__PURE__*/getDefaultExportFromCjs(reactExports);

var React$1 = /*#__PURE__*/_mergeNamespaces({
	__proto__: null,
	default: React
}, [reactExports]);

var scheduler = {exports: {}};

var scheduler_production_min = {};

/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_production_min;

function requireScheduler_production_min () {
	if (hasRequiredScheduler_production_min) return scheduler_production_min;
	hasRequiredScheduler_production_min = 1;
	(function (exports) {
function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}
		function g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()};}else {var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q};}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D="function"===typeof setTimeout?setTimeout:null,E="function"===typeof clearTimeout?clearTimeout:null,F="undefined"!==typeof setImmediate?setImmediate:null;
		"undefined"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t);}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else {var b=h(t);null!==b&&K(H,b.startTime-a);}}
		function J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if("function"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?v.callback=e:v===h(r)&&k(r);G(b);}else k(r);v=h(r);}if(null!==v)var w=!0;else {var m=h(t);null!==m&&K(H,m.startTime-b);w=!1;}return w}finally{v=null,y=c,z=!1;}}var N=!1,O=null,L=-1,P=5,Q=-1;
		function M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a);}finally{b?S():(N=!1,O=null);}}else N=!1;}var S;if("function"===typeof F)S=function(){F(R);};else if("undefined"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null);};}else S=function(){D(R,0);};function I(a){O=a;N||(N=!0,S());}function K(a,b){L=D(function(){a(exports.unstable_now());},b);}
		exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null;};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J));};
		exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<a?Math.floor(1E3/a):5;};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y;}var c=y;y=b;try{return a()}finally{y=c;}};exports.unstable_pauseExecution=function(){};
		exports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=y;y=a;try{return b()}finally{y=c;}};
		exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3;}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};
		exports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c;}}}; 
	} (scheduler_production_min));
	return scheduler_production_min;
}

var scheduler_development = {};

/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_development;

function requireScheduler_development () {
	if (hasRequiredScheduler_development) return scheduler_development;
	hasRequiredScheduler_development = 1;
	(function (exports) {

		if (process.env.NODE_ENV !== "production") {
		  (function() {

		/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
		}
		          var enableSchedulerDebugging = false;
		var enableProfiling = false;
		var frameYieldMs = 5;

		function push(heap, node) {
		  var index = heap.length;
		  heap.push(node);
		  siftUp(heap, node, index);
		}
		function peek(heap) {
		  return heap.length === 0 ? null : heap[0];
		}
		function pop(heap) {
		  if (heap.length === 0) {
		    return null;
		  }

		  var first = heap[0];
		  var last = heap.pop();

		  if (last !== first) {
		    heap[0] = last;
		    siftDown(heap, last, 0);
		  }

		  return first;
		}

		function siftUp(heap, node, i) {
		  var index = i;

		  while (index > 0) {
		    var parentIndex = index - 1 >>> 1;
		    var parent = heap[parentIndex];

		    if (compare(parent, node) > 0) {
		      // The parent is larger. Swap positions.
		      heap[parentIndex] = node;
		      heap[index] = parent;
		      index = parentIndex;
		    } else {
		      // The parent is smaller. Exit.
		      return;
		    }
		  }
		}

		function siftDown(heap, node, i) {
		  var index = i;
		  var length = heap.length;
		  var halfLength = length >>> 1;

		  while (index < halfLength) {
		    var leftIndex = (index + 1) * 2 - 1;
		    var left = heap[leftIndex];
		    var rightIndex = leftIndex + 1;
		    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

		    if (compare(left, node) < 0) {
		      if (rightIndex < length && compare(right, left) < 0) {
		        heap[index] = right;
		        heap[rightIndex] = node;
		        index = rightIndex;
		      } else {
		        heap[index] = left;
		        heap[leftIndex] = node;
		        index = leftIndex;
		      }
		    } else if (rightIndex < length && compare(right, node) < 0) {
		      heap[index] = right;
		      heap[rightIndex] = node;
		      index = rightIndex;
		    } else {
		      // Neither child is smaller. Exit.
		      return;
		    }
		  }
		}

		function compare(a, b) {
		  // Compare sort index first, then task id.
		  var diff = a.sortIndex - b.sortIndex;
		  return diff !== 0 ? diff : a.id - b.id;
		}

		// TODO: Use symbols?
		var ImmediatePriority = 1;
		var UserBlockingPriority = 2;
		var NormalPriority = 3;
		var LowPriority = 4;
		var IdlePriority = 5;

		function markTaskErrored(task, ms) {
		}

		/* eslint-disable no-var */

		var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

		if (hasPerformanceNow) {
		  var localPerformance = performance;

		  exports.unstable_now = function () {
		    return localPerformance.now();
		  };
		} else {
		  var localDate = Date;
		  var initialTime = localDate.now();

		  exports.unstable_now = function () {
		    return localDate.now() - initialTime;
		  };
		} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
		// Math.pow(2, 30) - 1
		// 0b111111111111111111111111111111


		var maxSigned31BitInt = 1073741823; // Times out immediately

		var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

		var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
		var NORMAL_PRIORITY_TIMEOUT = 5000;
		var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

		var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

		var taskQueue = [];
		var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

		var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
		var currentTask = null;
		var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.

		var isPerformingWork = false;
		var isHostCallbackScheduled = false;
		var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.

		var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;
		var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;
		var localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom

		typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;

		function advanceTimers(currentTime) {
		  // Check for tasks that are no longer delayed and add them to the queue.
		  var timer = peek(timerQueue);

		  while (timer !== null) {
		    if (timer.callback === null) {
		      // Timer was cancelled.
		      pop(timerQueue);
		    } else if (timer.startTime <= currentTime) {
		      // Timer fired. Transfer to the task queue.
		      pop(timerQueue);
		      timer.sortIndex = timer.expirationTime;
		      push(taskQueue, timer);
		    } else {
		      // Remaining timers are pending.
		      return;
		    }

		    timer = peek(timerQueue);
		  }
		}

		function handleTimeout(currentTime) {
		  isHostTimeoutScheduled = false;
		  advanceTimers(currentTime);

		  if (!isHostCallbackScheduled) {
		    if (peek(taskQueue) !== null) {
		      isHostCallbackScheduled = true;
		      requestHostCallback(flushWork);
		    } else {
		      var firstTimer = peek(timerQueue);

		      if (firstTimer !== null) {
		        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
		      }
		    }
		  }
		}

		function flushWork(hasTimeRemaining, initialTime) {


		  isHostCallbackScheduled = false;

		  if (isHostTimeoutScheduled) {
		    // We scheduled a timeout but it's no longer needed. Cancel it.
		    isHostTimeoutScheduled = false;
		    cancelHostTimeout();
		  }

		  isPerformingWork = true;
		  var previousPriorityLevel = currentPriorityLevel;

		  try {
		    var currentTime; if (enableProfiling) ; else {
		      // No catch in prod code path.
		      return workLoop(hasTimeRemaining, initialTime);
		    }
		  } finally {
		    currentTask = null;
		    currentPriorityLevel = previousPriorityLevel;
		    isPerformingWork = false;
		  }
		}

		function workLoop(hasTimeRemaining, initialTime) {
		  var currentTime = initialTime;
		  advanceTimers(currentTime);
		  currentTask = peek(taskQueue);

		  while (currentTask !== null && !(enableSchedulerDebugging )) {
		    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
		      // This currentTask hasn't expired, and we've reached the deadline.
		      break;
		    }

		    var callback = currentTask.callback;

		    if (typeof callback === 'function') {
		      currentTask.callback = null;
		      currentPriorityLevel = currentTask.priorityLevel;
		      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;

		      var continuationCallback = callback(didUserCallbackTimeout);
		      currentTime = exports.unstable_now();

		      if (typeof continuationCallback === 'function') {
		        currentTask.callback = continuationCallback;
		      } else {

		        if (currentTask === peek(taskQueue)) {
		          pop(taskQueue);
		        }
		      }

		      advanceTimers(currentTime);
		    } else {
		      pop(taskQueue);
		    }

		    currentTask = peek(taskQueue);
		  } // Return whether there's additional work


		  if (currentTask !== null) {
		    return true;
		  } else {
		    var firstTimer = peek(timerQueue);

		    if (firstTimer !== null) {
		      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
		    }

		    return false;
		  }
		}

		function unstable_runWithPriority(priorityLevel, eventHandler) {
		  switch (priorityLevel) {
		    case ImmediatePriority:
		    case UserBlockingPriority:
		    case NormalPriority:
		    case LowPriority:
		    case IdlePriority:
		      break;

		    default:
		      priorityLevel = NormalPriority;
		  }

		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;

		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		}

		function unstable_next(eventHandler) {
		  var priorityLevel;

		  switch (currentPriorityLevel) {
		    case ImmediatePriority:
		    case UserBlockingPriority:
		    case NormalPriority:
		      // Shift down to normal priority
		      priorityLevel = NormalPriority;
		      break;

		    default:
		      // Anything lower than normal priority should remain at the current level.
		      priorityLevel = currentPriorityLevel;
		      break;
		  }

		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;

		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		}

		function unstable_wrapCallback(callback) {
		  var parentPriorityLevel = currentPriorityLevel;
		  return function () {
		    // This is a fork of runWithPriority, inlined for performance.
		    var previousPriorityLevel = currentPriorityLevel;
		    currentPriorityLevel = parentPriorityLevel;

		    try {
		      return callback.apply(this, arguments);
		    } finally {
		      currentPriorityLevel = previousPriorityLevel;
		    }
		  };
		}

		function unstable_scheduleCallback(priorityLevel, callback, options) {
		  var currentTime = exports.unstable_now();
		  var startTime;

		  if (typeof options === 'object' && options !== null) {
		    var delay = options.delay;

		    if (typeof delay === 'number' && delay > 0) {
		      startTime = currentTime + delay;
		    } else {
		      startTime = currentTime;
		    }
		  } else {
		    startTime = currentTime;
		  }

		  var timeout;

		  switch (priorityLevel) {
		    case ImmediatePriority:
		      timeout = IMMEDIATE_PRIORITY_TIMEOUT;
		      break;

		    case UserBlockingPriority:
		      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
		      break;

		    case IdlePriority:
		      timeout = IDLE_PRIORITY_TIMEOUT;
		      break;

		    case LowPriority:
		      timeout = LOW_PRIORITY_TIMEOUT;
		      break;

		    case NormalPriority:
		    default:
		      timeout = NORMAL_PRIORITY_TIMEOUT;
		      break;
		  }

		  var expirationTime = startTime + timeout;
		  var newTask = {
		    id: taskIdCounter++,
		    callback: callback,
		    priorityLevel: priorityLevel,
		    startTime: startTime,
		    expirationTime: expirationTime,
		    sortIndex: -1
		  };

		  if (startTime > currentTime) {
		    // This is a delayed task.
		    newTask.sortIndex = startTime;
		    push(timerQueue, newTask);

		    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
		      // All tasks are delayed, and this is the task with the earliest delay.
		      if (isHostTimeoutScheduled) {
		        // Cancel an existing timeout.
		        cancelHostTimeout();
		      } else {
		        isHostTimeoutScheduled = true;
		      } // Schedule a timeout.


		      requestHostTimeout(handleTimeout, startTime - currentTime);
		    }
		  } else {
		    newTask.sortIndex = expirationTime;
		    push(taskQueue, newTask);
		    // wait until the next time we yield.


		    if (!isHostCallbackScheduled && !isPerformingWork) {
		      isHostCallbackScheduled = true;
		      requestHostCallback(flushWork);
		    }
		  }

		  return newTask;
		}

		function unstable_pauseExecution() {
		}

		function unstable_continueExecution() {

		  if (!isHostCallbackScheduled && !isPerformingWork) {
		    isHostCallbackScheduled = true;
		    requestHostCallback(flushWork);
		  }
		}

		function unstable_getFirstCallbackNode() {
		  return peek(taskQueue);
		}

		function unstable_cancelCallback(task) {
		  // remove from the queue because you can't remove arbitrary nodes from an
		  // array based heap, only the first one.)


		  task.callback = null;
		}

		function unstable_getCurrentPriorityLevel() {
		  return currentPriorityLevel;
		}

		var isMessageLoopRunning = false;
		var scheduledHostCallback = null;
		var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
		// thread, like user events. By default, it yields multiple times per frame.
		// It does not attempt to align with frame boundaries, since most tasks don't
		// need to be frame aligned; for those that do, use requestAnimationFrame.

		var frameInterval = frameYieldMs;
		var startTime = -1;

		function shouldYieldToHost() {
		  var timeElapsed = exports.unstable_now() - startTime;

		  if (timeElapsed < frameInterval) {
		    // The main thread has only been blocked for a really short amount of time;
		    // smaller than a single frame. Don't yield yet.
		    return false;
		  } // The main thread has been blocked for a non-negligible amount of time. We


		  return true;
		}

		function requestPaint() {

		}

		function forceFrameRate(fps) {
		  if (fps < 0 || fps > 125) {
		    // Using console['error'] to evade Babel and ESLint
		    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
		    return;
		  }

		  if (fps > 0) {
		    frameInterval = Math.floor(1000 / fps);
		  } else {
		    // reset the framerate
		    frameInterval = frameYieldMs;
		  }
		}

		var performWorkUntilDeadline = function () {
		  if (scheduledHostCallback !== null) {
		    var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
		    // has been blocked.

		    startTime = currentTime;
		    var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
		    // error can be observed.
		    //
		    // Intentionally not using a try-catch, since that makes some debugging
		    // techniques harder. Instead, if `scheduledHostCallback` errors, then
		    // `hasMoreWork` will remain true, and we'll continue the work loop.

		    var hasMoreWork = true;

		    try {
		      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
		    } finally {
		      if (hasMoreWork) {
		        // If there's more work, schedule the next message event at the end
		        // of the preceding one.
		        schedulePerformWorkUntilDeadline();
		      } else {
		        isMessageLoopRunning = false;
		        scheduledHostCallback = null;
		      }
		    }
		  } else {
		    isMessageLoopRunning = false;
		  } // Yielding to the browser will give it a chance to paint, so we can
		};

		var schedulePerformWorkUntilDeadline;

		if (typeof localSetImmediate === 'function') {
		  // Node.js and old IE.
		  // There's a few reasons for why we prefer setImmediate.
		  //
		  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
		  // (Even though this is a DOM fork of the Scheduler, you could get here
		  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
		  // https://github.com/facebook/react/issues/20756
		  //
		  // But also, it runs earlier which is the semantic we want.
		  // If other browsers ever implement it, it's better to use it.
		  // Although both of these would be inferior to native scheduling.
		  schedulePerformWorkUntilDeadline = function () {
		    localSetImmediate(performWorkUntilDeadline);
		  };
		} else if (typeof MessageChannel !== 'undefined') {
		  // DOM and Worker environments.
		  // We prefer MessageChannel because of the 4ms setTimeout clamping.
		  var channel = new MessageChannel();
		  var port = channel.port2;
		  channel.port1.onmessage = performWorkUntilDeadline;

		  schedulePerformWorkUntilDeadline = function () {
		    port.postMessage(null);
		  };
		} else {
		  // We should only fallback here in non-browser environments.
		  schedulePerformWorkUntilDeadline = function () {
		    localSetTimeout(performWorkUntilDeadline, 0);
		  };
		}

		function requestHostCallback(callback) {
		  scheduledHostCallback = callback;

		  if (!isMessageLoopRunning) {
		    isMessageLoopRunning = true;
		    schedulePerformWorkUntilDeadline();
		  }
		}

		function requestHostTimeout(callback, ms) {
		  taskTimeoutID = localSetTimeout(function () {
		    callback(exports.unstable_now());
		  }, ms);
		}

		function cancelHostTimeout() {
		  localClearTimeout(taskTimeoutID);
		  taskTimeoutID = -1;
		}

		var unstable_requestPaint = requestPaint;
		var unstable_Profiling =  null;

		exports.unstable_IdlePriority = IdlePriority;
		exports.unstable_ImmediatePriority = ImmediatePriority;
		exports.unstable_LowPriority = LowPriority;
		exports.unstable_NormalPriority = NormalPriority;
		exports.unstable_Profiling = unstable_Profiling;
		exports.unstable_UserBlockingPriority = UserBlockingPriority;
		exports.unstable_cancelCallback = unstable_cancelCallback;
		exports.unstable_continueExecution = unstable_continueExecution;
		exports.unstable_forceFrameRate = forceFrameRate;
		exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
		exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
		exports.unstable_next = unstable_next;
		exports.unstable_pauseExecution = unstable_pauseExecution;
		exports.unstable_requestPaint = unstable_requestPaint;
		exports.unstable_runWithPriority = unstable_runWithPriority;
		exports.unstable_scheduleCallback = unstable_scheduleCallback;
		exports.unstable_shouldYield = shouldYieldToHost;
		exports.unstable_wrapCallback = unstable_wrapCallback;
		          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
		}
		        
		  })();
		} 
	} (scheduler_development));
	return scheduler_development;
}

var hasRequiredScheduler;

function requireScheduler () {
	if (hasRequiredScheduler) return scheduler.exports;
	hasRequiredScheduler = 1;

	if (process.env.NODE_ENV === 'production') {
	  scheduler.exports = requireScheduler_production_min();
	} else {
	  scheduler.exports = requireScheduler_development();
	}
	return scheduler.exports;
}

/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactDom_production_min;

function requireReactDom_production_min () {
	if (hasRequiredReactDom_production_min) return reactDom_production_min;
	hasRequiredReactDom_production_min = 1;
var aa=reactExports,ca=requireScheduler();function p(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+"Capture",b);}
	function ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a]);}
	var ia=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,la=
	{},ma={};function oa(a){if(ja.call(ma,a))return !0;if(ja.call(la,a))return !1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return !1}function pa(a,b,c,d){if(null!==c&&0===c.type)return !1;switch(typeof b){case "function":case "symbol":return !0;case "boolean":if(d)return !1;if(null!==c)return !c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return "data-"!==a&&"aria-"!==a;default:return !1}}
	function qa(a,b,c,d){if(null===b||"undefined"===typeof b||pa(a,b,c,d))return !0;if(d)return !1;if(null!==c)switch(c.type){case 3:return !b;case 4:return !1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return !1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g;}var z={};
	"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1);});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1);});["contentEditable","draggable","spellCheck","value"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1);});
	["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1);});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1);});
	["checked","multiple","muted","selected"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1);});["capture","download"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1);});["cols","rows","size","span"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1);});["rowSpan","start"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1);});var ra=/[\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}
	"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(ra,
	sa);z[b]=new v(b,1,!1,a,null,!1,!1);});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,"http://www.w3.org/1999/xlink",!1,!1);});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1,!1);});["tabIndex","crossOrigin"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1);});
	z.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0);});
	function ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)));}
	var ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for("react.element"),wa=Symbol.for("react.portal"),ya=Symbol.for("react.fragment"),za=Symbol.for("react.strict_mode"),Aa=Symbol.for("react.profiler"),Ba=Symbol.for("react.provider"),Ca=Symbol.for("react.context"),Da=Symbol.for("react.forward_ref"),Ea=Symbol.for("react.suspense"),Fa=Symbol.for("react.suspense_list"),Ga=Symbol.for("react.memo"),Ha=Symbol.for("react.lazy");	var Ia=Symbol.for("react.offscreen");var Ja=Symbol.iterator;function Ka(a){if(null===a||"object"!==typeof a)return null;a=Ja&&a[Ja]||a["@@iterator"];return "function"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\n( *(at )?)/);La=b&&b[1]||"";}return "\n"+La+a}var Na=!1;
	function Oa(a,b){if(!a||Na)return "";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,"props",{set:function(){throw Error();}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[]);}catch(l){var d=l;}Reflect.construct(a,[],b);}else {try{b.call();}catch(l){d=l;}a.call(b.prototype);}else {try{throw Error();}catch(l){d=l;}a();}}catch(l){if(l&&d&&"string"===typeof l.stack){for(var e=l.stack.split("\n"),
	f=d.stack.split("\n"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k="\n"+e[g].replace(" at new "," at ");a.displayName&&k.includes("<anonymous>")&&(k=k.replace("<anonymous>",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c;}return (a=a?a.displayName||a.name:"")?Ma(a):""}
	function Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma("Lazy");case 13:return Ma("Suspense");case 19:return Ma("SuspenseList");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return ""}}
	function Qa(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ya:return "Fragment";case wa:return "Portal";case Aa:return "Profiler";case za:return "StrictMode";case Ea:return "Suspense";case Fa:return "SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case Ca:return (a.displayName||"Context")+".Consumer";case Ba:return (a._context.displayName||"Context")+".Provider";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||
	b.name||"",a=""!==a?"ForwardRef("+a+")":"ForwardRef");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||"Memo";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}
	function Ra(a){var b=a.type;switch(a.tag){case 24:return "Cache";case 9:return (b.displayName||"Context")+".Consumer";case 10:return (b._context.displayName||"Context")+".Provider";case 18:return "DehydratedFragment";case 11:return a=b.render,a=a.displayName||a.name||"",b.displayName||(""!==a?"ForwardRef("+a+")":"ForwardRef");case 7:return "Fragment";case 5:return b;case 4:return "Portal";case 3:return "Root";case 6:return "Text";case 16:return Qa(b);case 8:return b===za?"StrictMode":"Mode";case 22:return "Offscreen";
	case 12:return "Profiler";case 21:return "Scope";case 13:return "Suspense";case 19:return "SuspenseList";case 25:return "TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"===typeof b)return b.displayName||b.name||null;if("string"===typeof b)return b}return null}function Sa(a){switch(typeof a){case "boolean":case "number":case "string":case "undefined":return a;case "object":return a;default:return ""}}
	function Ta(a){var b=a.type;return (a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
	function Ua(a){var b=Ta(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a);}});Object.defineProperty(a,b,{enumerable:c.enumerable});return {getValue:function(){return d},setValue:function(a){d=""+a;},stopTracking:function(){a._valueTracker=
	null;delete a[b];}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a));}function Wa(a){if(!a)return !1;var b=a._valueTracker;if(!b)return !0;var c=b.getValue();var d="";a&&(d=Ta(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}
	function Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value};}function ab(a,b){b=b.checked;null!=b&&ta(a,"checked",b,!1);}
	function bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c;}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?cb(a,b.type,c):b.hasOwnProperty("defaultValue")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked);}
	function db(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b;}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c);}
	function cb(a,b,c){if("number"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c);}var eb=Array.isArray;
	function fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0);}else {c=""+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e]);}null!==b&&(b.selected=!0);}}
	function gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0];}b=c;}null==b&&(b="");c=b;}a._wrapperState={initialValue:Sa(c)};}
	function ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d);}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b);}function kb(a){switch(a){case "svg":return "http://www.w3.org/2000/svg";case "math":return "http://www.w3.org/1998/Math/MathML";default:return "http://www.w3.org/1999/xhtml"}}
	function lb(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?kb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
	var mb,nb=function(a){return "undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)});}:a}(function(a,b){if("http://www.w3.org/2000/svg"!==a.namespaceURI||"innerHTML"in a)a.innerHTML=b;else {mb=mb||document.createElement("div");mb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild);}});
	function ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b;}
	var pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,
	zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=["Webkit","ms","Moz","O"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a];});});function rb(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(""+b).trim():b+"px"}
	function sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=rb(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e;}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
	function ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if("object"!==typeof b.dangerouslySetInnerHTML||!("__html"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(p(62));}}
	function vb(a,b){if(-1===a.indexOf("-"))return "string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return !1;default:return !0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;
	function Bb(a){if(a=Cb(a)){if("function"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b));}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a;}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a]);}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb();}}
	function Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1;}if(a)return null;if(c&&"function"!==
	typeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,"passive",{get:function(){Lb=!0;}});window.addEventListener("test",Mb,Mb);window.removeEventListener("test",Mb,Mb);}catch(a){Lb=!1;}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l);}catch(m){this.onError(m);}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a;}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments);}
	function Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null;}else throw Error(p(198));Qb||(Qb=!0,Rb=l);}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else {a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}
	function Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling;}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else {for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===
	c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling;}return null}
	var ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&"function"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128));}catch(b){}}
	var oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;
	function tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;
	default:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)));}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}
	function vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return -1;case 134217728:case 268435456:case 536870912:case 1073741824:return -1;default:return -1}}
	function wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b);}else k<=b&&(a.expiredLanes|=h);f&=~h;}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}
	function Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c;}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f;}}
	function Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e;}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
	function Sc(a,b){switch(a){case "focusin":case "focusout":Lc=null;break;case "dragenter":case "dragleave":Mc=null;break;case "mouseover":case "mouseout":Nc=null;break;case "pointerover":case "pointerout":Oc.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Pc.delete(b.pointerId);}}
	function Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}
	function Uc(a,b,c,d,e){switch(b){case "focusin":return Lc=Tc(Lc,a,b,c,d,e),!0;case "dragenter":return Mc=Tc(Mc,a,b,c,d,e),!0;case "mouseover":return Nc=Tc(Nc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return !0;case "gotpointercapture":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return !1}
	function Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c);});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null;}
	function Xc(a){if(null!==a.blockedOn)return !1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null;}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift();}return !0}function Zc(a,b,c){Xc(a)&&c.delete(b);}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc);}
	function ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)));}
	function bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null);}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift();}var cd=ua.ReactCurrentBatchConfig,dd=!0;
	function ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d);}finally{C=e,cd.transition=f;}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d);}finally{C=e,cd.transition=f;}}
	function fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f;}null!==e&&d.stopPropagation();}else hd(a,b,d,null,c);}}var id=null;
	function Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null;}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null;}else b!==a&&(a=null);id=a;return null}
	function jd(a){switch(a){case "cancel":case "click":case "close":case "contextmenu":case "copy":case "cut":case "auxclick":case "dblclick":case "dragend":case "dragstart":case "drop":case "focusin":case "focusout":case "input":case "invalid":case "keydown":case "keypress":case "keyup":case "mousedown":case "mouseup":case "paste":case "pause":case "play":case "pointercancel":case "pointerdown":case "pointerup":case "ratechange":case "reset":case "resize":case "seeked":case "submit":case "touchcancel":case "touchend":case "touchstart":case "volumechange":case "change":case "selectionchange":case "textInput":case "compositionstart":case "compositionend":case "compositionupdate":case "beforeblur":case "afterblur":case "beforeinput":case "blur":case "fullscreenchange":case "focus":case "hashchange":case "popstate":case "select":case "selectstart":return 1;case "drag":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "mousemove":case "mouseout":case "mouseover":case "pointermove":case "pointerout":case "pointerover":case "scroll":case "toggle":case "touchmove":case "wheel":case "mouseenter":case "mouseleave":case "pointerenter":case "pointerleave":return 4;
	case "message":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e="value"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}
	function od(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return !0}function qd(){return !1}
	function rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&
	(a.returnValue=!1),this.isDefaultPrevented=pd);},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd);},persist:function(){},isPersistent:pd});return b}
	var sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if("movementX"in
	a)return a.movementX;a!==yd&&(yd&&"mousemove"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return "movementY"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return "clipboardData"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:"Escape",
	Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",
	119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Od={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}
	var Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if("Unidentified"!==b)return b}return "keypress"===a.type?(a=od(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Nd[a.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return "keypress"===a.type?od(a):0},keyCode:function(a){return "keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return "keypress"===
	a.type?od(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return "deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},
	deltaY:function(a){return "deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&"CompositionEvent"in window,be=null;ia&&"documentMode"in document&&(be=document.documentMode);var ce=ia&&"TextEvent"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;
	function ge(a,b){switch(a){case "keyup":return -1!==$d.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "focusout":return !0;default:return !1}}function he(a){a=a.detail;return "object"===typeof a&&"data"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case "compositionend":return he(b);case "keypress":if(32!==b.which)return null;fe=!0;return ee;case "textInput":return a=b.data,a===ee&&fe?null:a;default:return null}}
	function ke(a,b){if(ie)return "compositionend"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return de&&"ko"!==b.locale?null:b.data;default:return null}}
	var le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return "input"===b?!!le[a.type]:"textarea"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,"onChange");0<b.length&&(c=new td("onChange","change",null,c,d),a.push({event:c,listeners:b}));}var pe=null,qe=null;function re(a){se(a,0);}function te(a){var b=ue(a);if(Wa(b))return a}
	function ve(a,b){if("change"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye="oninput"in document;if(!ye){var ze=document.createElement("div");ze.setAttribute("oninput","return;");ye="function"===typeof ze.oninput;}xe=ye;}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode);}function Ae(){pe&&(pe.detachEvent("onpropertychange",Be),qe=pe=null);}function Be(a){if("value"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b);}}
	function Ce(a,b,c){"focusin"===a?(Ae(),pe=b,qe=c,pe.attachEvent("onpropertychange",Be)):"focusout"===a&&Ae();}function De(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return te(qe)}function Ee(a,b){if("click"===a)return te(b)}function Fe(a,b){if("input"===a||"change"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He="function"===typeof Object.is?Object.is:Ge;
	function Ie(a,b){if(He(a,b))return !0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return !1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return !1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return !1}return !0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
	function Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return {node:c,offset:b-a};a=d;}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode;}c=void 0;}c=Je(c);}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}
	function Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href;}catch(d){c=!1;}if(c)a=b.contentWindow;else break;b=Xa(a.document);}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
	function Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),"selectionStart"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,
	d);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)));}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});"function"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top;}}
	var Pe=ia&&"documentMode"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;
	function Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,"selectionStart"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,"onSelect"),0<d.length&&(b=new td("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)));}
	function Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var We={animationend:Ve("Animation","AnimationEnd"),animationiteration:Ve("Animation","AnimationIteration"),animationstart:Ve("Animation","AnimationStart"),transitionend:Ve("Transition","TransitionEnd")},Xe={},Ye={};
	ia&&(Ye=document.createElement("div").style,"AnimationEvent"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),"TransitionEvent"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze("animationend"),af=Ze("animationiteration"),bf=Ze("animationstart"),cf=Ze("transitionend"),df=new Map,ef="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
	function ff(a,b){df.set(a,b);fa(b,[a]);}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,"on"+kf);}ff($e,"onAnimationEnd");ff(af,"onAnimationIteration");ff(bf,"onAnimationStart");ff("dblclick","onDoubleClick");ff("focusin","onFocus");ff("focusout","onBlur");ff(cf,"onTransitionEnd");ha("onMouseEnter",["mouseout","mouseover"]);ha("onMouseLeave",["mouseout","mouseover"]);ha("onPointerEnter",["pointerout","pointerover"]);
	ha("onPointerLeave",["pointerout","pointerover"]);fa("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));fa("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));fa("onBeforeInput",["compositionend","keypress","textInput","paste"]);fa("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));fa("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));
	fa("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var lf="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),mf=new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
	function nf(a,b,c){var d=a.type||"unknown-event";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null;}
	function se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k;}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k;}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}
	function D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+"__bubble";c.has(d)||(pf(b,a,2,!1),c.add(d));}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b);}var rf="_reactListening"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){"selectionchange"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a));});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf("selectionchange",!1,b));}}
	function pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd;}c=e.bind(null,b,c,a);e=void 0;!Lb||"touchstart"!==b&&"touchmove"!==b&&"wheel"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1);}
	function hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return;}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode;}}d=d.return;}Jb(function(){var d=f,e=xb(c),g=[];
	a:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case "keypress":if(0===od(c))break a;case "keydown":case "keyup":k=Rd;break;case "focusin":n="focus";k=Fd;break;case "focusout":n="blur";k=Fd;break;case "beforeblur":case "afterblur":k=Fd;break;case "click":if(2===c.button)break a;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":k=Bd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":k=
	Dd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case "scroll":k=vd;break;case "wheel":k=Zd;break;case "copy":case "cut":case "paste":k=Jd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":k=Td;}var t=0!==(b&4),J=!t&&"scroll"===a,x=t?null!==h?h+"Capture":null:h;t=[];for(var w=d,u;null!==
	w;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return;}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}));}}if(0===(b&7)){a:{h="mouseover"===a||"pointerover"===a;k="mouseout"===a||"pointerout"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==
	n&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null;}else k=null,n=d;if(k!==n){t=Bd;F="onMouseLeave";x="onMouseEnter";w="mouse";if("pointerout"===a||"pointerover"===a)t=Td,F="onPointerLeave",x="onPointerEnter",w="pointer";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+"leave",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+"enter",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=
	vf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x);}t=null;}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0);}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if("select"===k||"input"===k&&"file"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else {na=De;var xa=Ce;}else (k=h.nodeName)&&"input"===k.toLowerCase()&&("checkbox"===h.type||"radio"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);"focusout"===a&&(xa=h._wrapperState)&&
	xa.controlled&&"number"===h.type&&cb(h,"number",h.value);}xa=d?ue(d):window;switch(a){case "focusin":if(me(xa)||"true"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case "focusout":Se=Re=Qe=null;break;case "mousedown":Te=!0;break;case "contextmenu":case "mouseup":case "dragend":Te=!1;Ue(g,c,e);break;case "selectionchange":if(Pe)break;case "keydown":case "keyup":Ue(g,c,e);}var $a;if(ae)b:{switch(a){case "compositionstart":var ba="onCompositionStart";break b;case "compositionend":ba="onCompositionEnd";
	break b;case "compositionupdate":ba="onCompositionUpdate";break b}ba=void 0;}else ie?ge(a,c)&&(ba="onCompositionEnd"):"keydown"===a&&229===c.keyCode&&(ba="onCompositionStart");ba&&(de&&"ko"!==c.locale&&(ie||"onCompositionStart"!==ba?"onCompositionEnd"===ba&&ie&&($a=nd()):(kd=e,ld="value"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,"onBeforeInput"),
	0<d.length&&(e=new Ld("onBeforeInput","beforeinput",null,c,e),g.push({event:e,listeners:d}),e.data=$a);}se(g,b);});}function tf(a,b,c){return {instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+"Capture",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return;}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}
	function wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return;}0!==g.length&&a.push({event:b,listeners:g});}var xf=/\r\n?/g,yf=/\u0000|\uFFFD/g;function zf(a){return ("string"===typeof a?a:""+a).replace(xf,"\n").replace(yf,"")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}
	var Cf=null,Df=null;function Ef(a,b){return "textarea"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}
	var Ff="function"===typeof setTimeout?setTimeout:void 0,Gf="function"===typeof clearTimeout?clearTimeout:void 0,Hf="function"===typeof Promise?Promise:void 0,Jf="function"===typeof queueMicrotask?queueMicrotask:"undefined"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;});}
	function Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,"/$"===c){if(0===d){a.removeChild(e);bd(b);return}d--;}else "$"!==c&&"$?"!==c&&"$!"!==c||d++;c=e;}while(c);bd(b);}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if("$"===b||"$!"===b||"$?"===b)break;if("/$"===b)return null}}return a}
	function Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if("$"===c||"$!"===c||"$?"===c){if(0===b)return a;b--;}else "/$"===c&&b++;}a=a.previousSibling;}return null}var Nf=Math.random().toString(36).slice(2),Of="__reactFiber$"+Nf,Pf="__reactProps$"+Nf,uf="__reactContainer$"+Nf,of="__reactEvents$"+Nf,Qf="__reactListeners$"+Nf,Rf="__reactHandles$"+Nf;
	function Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a);}return b}a=c;c=a.parentNode;}return null}function Cb(a){a=a[Of]||a[uf];return !a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return {current:a}}
	function E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--);}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b;}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}
	function Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H);}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c);}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||"Unknown",e));return A({},c,d)}
	function cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return !0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c);}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a);}function ig(a){fg=!0;hg(a);}
	function jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1;}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1;}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg="";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b;}
	function ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a;}else rg=1<<f|c<<e|d,sg=a;}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0));}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null;}var xg=null,yg=null,I=!1,zg=null;
	function Ag(a,b){var c=Bg(5,null,null,0);c.elementType="DELETED";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c);}
	function Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=
	null,!0):!1;default:return !1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a);}}else {if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a;}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a;}
	function Gg(a){if(a!==xg)return !1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b="head"!==b&&"body"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling);}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if("/$"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--;}else "$"!==c&&"$!"!==c&&"$?"!==c||b++;}a=a.nextSibling;}yg=
	null;}}else yg=xg?Lf(a.stateNode.nextSibling):null;return !0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling);}function Ig(){yg=xg=null;I=!1;}function Jg(a){null===zg?zg=[a]:zg.push(a);}var Kg=ua.ReactCurrentBatchConfig;
	function Lg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode;}if(!d)throw Error(p(147,a));var e=d,f=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;null===a?delete b[f]:b[f]=a;};b._stringRef=f;return b}if("string"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}
	function Mg(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,"[object Object]"===a?"object with keys {"+Object.keys(b).join(", ")+"}":a));}function Ng(a){var b=a._init;return b(a._payload)}
	function Og(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c);}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Pg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&
	null===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Qg(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||"object"===typeof f&&null!==f&&f.$$typeof===Ha&&Ng(f)===b.type))return d=e(b,c.props),d.ref=Lg(a,b,c),d.return=a,d;d=Rg(c.type,c.key,c.props,null,a.mode,d);d.ref=Lg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||
	b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=Sg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Tg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if("string"===typeof b&&""!==b||"number"===typeof b)return b=Qg(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=Rg(b.type,b.key,b.props,null,a.mode,c),
	c.ref=Lg(a,null,b),c.return=a,c;case wa:return b=Sg(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Tg(b,a.mode,c,null),b.return=a,b;Mg(a,b);}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c&&""!==c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,
	b,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);Mg(a,c);}return null}function y(a,b,c,d,e){if("string"===typeof d&&""!==d||"number"===typeof d)return a=a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);Mg(b,d);}return null}
	function n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x;}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===
	x.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if("function"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x;}if(n.done)return c(e,
	m),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){"object"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if("object"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=
	f.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||"object"===typeof k&&null!==k&&k.$$typeof===Ha&&Ng(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=Lg(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling;}f.type===ya?(d=Tg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Rg(f.type,f.key,f.props,null,a.mode,h),h.ref=Lg(a,d,f),h.return=a,a=h);}return g(a);case wa:a:{for(l=f.key;null!==
	d;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else {c(a,d);break}else b(a,d);d=d.sibling;}d=Sg(f,a.mode,h);d.return=a;a=d;}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);Mg(a,f);}return "string"===typeof f&&""!==f||"number"===typeof f?(f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):
	(c(a,d),d=Qg(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Ug=Og(!0),Vg=Og(!1),Wg=Uf(null),Xg=null,Yg=null,Zg=null;function $g(){Zg=Yg=Xg=null;}function ah(a){var b=Wg.current;E(Wg);a._currentValue=b;}function bh(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return;}}
	function ch(a,b){Xg=a;Zg=Yg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(dh=!0),a.firstContext=null);}function eh(a){var b=a._currentValue;if(Zg!==a)if(a={context:a,memoizedValue:b,next:null},null===Yg){if(null===Xg)throw Error(p(308));Yg=a;Xg.dependencies={lanes:0,firstContext:a};}else Yg=Yg.next=a;return b}var fh=null;function gh(a){null===fh?fh=[a]:fh.push(a);}
	function hh(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,gh(b)):(c.next=e.next,e.next=c);b.interleaved=c;return ih(a,d)}function ih(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var jh=!1;function kh(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null};}
	function lh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects});}function mh(a,b){return {eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}
	function nh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return ih(a,c)}e=d.interleaved;null===e?(b.next=b,gh(d)):(b.next=e.next,e.next=b);d.interleaved=b;return ih(a,c)}function oh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c);}}
	function ph(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next;}while(null!==c);null===f?e=f=b:f=f.next=b;}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=
	b;c.lastBaseUpdate=b;}
	function qh(a,b,c,d){var e=a.updateQueue;jh=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k));}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,
	next:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if("function"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r="function"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:jh=!0;}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h));}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;
	h=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null;}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);rh|=g;a.lanes=g;a.memoizedState=q;}}
	function sh(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if("function"!==typeof e)throw Error(p(191,e));e.call(d);}}}var th={},uh=Uf(th),vh=Uf(th),wh=Uf(th);function xh(a){if(a===th)throw Error(p(174));return a}
	function yh(a,b){G(wh,b);G(vh,a);G(uh,th);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a);}E(uh);G(uh,b);}function zh(){E(uh);E(vh);E(wh);}function Ah(a){xh(wh.current);var b=xh(uh.current);var c=lb(b,a.type);b!==c&&(G(vh,a),G(uh,c));}function Bh(a){vh.current===a&&(E(uh),E(vh));}var L=Uf(0);
	function Ch(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||"$?"===c.data||"$!"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}return null}var Dh=[];
	function Eh(){for(var a=0;a<Dh.length;a++)Dh[a]._workInProgressVersionPrimary=null;Dh.length=0;}var Fh=ua.ReactCurrentDispatcher,Gh=ua.ReactCurrentBatchConfig,Hh=0,M=null,N=null,O=null,Ih=!1,Jh=!1,Kh=0,Lh=0;function P(){throw Error(p(321));}function Mh(a,b){if(null===b)return !1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return !1;return !0}
	function Nh(a,b,c,d,e,f){Hh=f;M=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Fh.current=null===a||null===a.memoizedState?Oh:Ph;a=c(d,e);if(Jh){f=0;do{Jh=!1;Kh=0;if(25<=f)throw Error(p(301));f+=1;O=N=null;b.updateQueue=null;Fh.current=Qh;a=c(d,e);}while(Jh)}Fh.current=Rh;b=null!==N&&null!==N.next;Hh=0;O=N=M=null;Ih=!1;if(b)throw Error(p(300));return a}function Sh(){var a=0!==Kh;Kh=0;return a}
	function Th(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===O?M.memoizedState=O=a:O=O.next=a;return O}function Uh(){if(null===N){var a=M.alternate;a=null!==a?a.memoizedState:null;}else a=N.next;var b=null===O?M.memoizedState:O.next;if(null!==b)O=b,N=a;else {if(null===a)throw Error(p(310));N=a;a={memoizedState:N.memoizedState,baseState:N.baseState,baseQueue:N.baseQueue,queue:N.queue,next:null};null===O?M.memoizedState=O=a:O=O.next=a;}return O}
	function Vh(a,b){return "function"===typeof b?b(a):b}
	function Wh(a){var b=Uh(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=N,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g;}d.baseQueue=e=f;c.pending=null;}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Hh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else {var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,
	eagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;M.lanes|=m;rh|=m;}l=l.next;}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(dh=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d;}a=c.interleaved;if(null!==a){e=a;do f=e.lane,M.lanes|=f,rh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return [b.memoizedState,c.dispatch]}
	function Xh(a){var b=Uh(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(dh=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f;}return [f,d]}function Yh(){}
	function Zh(a,b){var c=M,d=Uh(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,dh=!0);d=d.queue;$h(ai.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==O&&O.memoizedState.tag&1){c.flags|=2048;bi(9,ci.bind(null,c,d,e,b),void 0,null);if(null===Q)throw Error(p(349));0!==(Hh&30)||di(c,b,e);}return e}function di(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=M.updateQueue;null===b?(b={lastEffect:null,stores:null},M.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a));}
	function ci(a,b,c,d){b.value=c;b.getSnapshot=d;ei(b)&&fi(a);}function ai(a,b,c){return c(function(){ei(b)&&fi(a);})}function ei(a){var b=a.getSnapshot;a=a.value;try{var c=b();return !He(a,c)}catch(d){return !0}}function fi(a){var b=ih(a,1);null!==b&&gi(b,a,1,-1);}
	function hi(a){var b=Th();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Vh,lastRenderedState:a};b.queue=a;a=a.dispatch=ii.bind(null,M,a);return [b.memoizedState,a]}
	function bi(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=M.updateQueue;null===b?(b={lastEffect:null,stores:null},M.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function ji(){return Uh().memoizedState}function ki(a,b,c,d){var e=Th();M.flags|=a;e.memoizedState=bi(1|b,c,void 0,void 0===d?null:d);}
	function li(a,b,c,d){var e=Uh();d=void 0===d?null:d;var f=void 0;if(null!==N){var g=N.memoizedState;f=g.destroy;if(null!==d&&Mh(d,g.deps)){e.memoizedState=bi(b,c,f,d);return}}M.flags|=a;e.memoizedState=bi(1|b,c,f,d);}function mi(a,b){return ki(8390656,8,a,b)}function $h(a,b){return li(2048,8,a,b)}function ni(a,b){return li(4,2,a,b)}function oi(a,b){return li(4,4,a,b)}
	function pi(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null);};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null;}}function qi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return li(4,4,pi.bind(null,b,a),c)}function ri(){}function si(a,b){var c=Uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Mh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}
	function ti(a,b){var c=Uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Mh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function ui(a,b,c){if(0===(Hh&21))return a.baseState&&(a.baseState=!1,dh=!0),a.memoizedState=c;He(c,b)||(c=yc(),M.lanes|=c,rh|=c,a.baseState=!0);return b}function vi(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Gh.transition;Gh.transition={};try{a(!1),b();}finally{C=c,Gh.transition=d;}}function wi(){return Uh().memoizedState}
	function xi(a,b,c){var d=yi(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(zi(a))Ai(b,c);else if(c=hh(a,b,c,d),null!==c){var e=R();gi(c,a,d,e);Bi(c,b,d);}}
	function ii(a,b,c){var d=yi(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(zi(a))Ai(b,e);else {var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,gh(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=hh(a,b,e,d);null!==c&&(e=R(),gi(c,a,d,e),Bi(c,b,d));}}
	function zi(a){var b=a.alternate;return a===M||null!==b&&b===M}function Ai(a,b){Jh=Ih=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b;}function Bi(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c);}}
	var Rh={readContext:eh,useCallback:P,useContext:P,useEffect:P,useImperativeHandle:P,useInsertionEffect:P,useLayoutEffect:P,useMemo:P,useReducer:P,useRef:P,useState:P,useDebugValue:P,useDeferredValue:P,useTransition:P,useMutableSource:P,useSyncExternalStore:P,useId:P,unstable_isNewReconciler:!1},Oh={readContext:eh,useCallback:function(a,b){Th().memoizedState=[a,void 0===b?null:b];return a},useContext:eh,useEffect:mi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ki(4194308,
	4,pi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ki(4194308,4,a,b)},useInsertionEffect:function(a,b){return ki(4,2,a,b)},useMemo:function(a,b){var c=Th();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Th();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=xi.bind(null,M,a);return [d.memoizedState,a]},useRef:function(a){var b=
	Th();a={current:a};return b.memoizedState=a},useState:hi,useDebugValue:ri,useDeferredValue:function(a){return Th().memoizedState=a},useTransition:function(){var a=hi(!1),b=a[0];a=vi.bind(null,a[1]);Th().memoizedState=a;return [b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=M,e=Th();if(I){if(void 0===c)throw Error(p(407));c=c();}else {c=b();if(null===Q)throw Error(p(349));0!==(Hh&30)||di(d,b,c);}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;mi(ai.bind(null,d,
	f,a),[a]);d.flags|=2048;bi(9,ci.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=Th(),b=Q.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=":"+b+"R"+c;c=Kh++;0<c&&(b+="H"+c.toString(32));b+=":";}else c=Lh++,b=":"+b+"r"+c.toString(32)+":";return a.memoizedState=b},unstable_isNewReconciler:!1},Ph={readContext:eh,useCallback:si,useContext:eh,useEffect:$h,useImperativeHandle:qi,useInsertionEffect:ni,useLayoutEffect:oi,useMemo:ti,useReducer:Wh,useRef:ji,useState:function(){return Wh(Vh)},
	useDebugValue:ri,useDeferredValue:function(a){var b=Uh();return ui(b,N.memoizedState,a)},useTransition:function(){var a=Wh(Vh)[0],b=Uh().memoizedState;return [a,b]},useMutableSource:Yh,useSyncExternalStore:Zh,useId:wi,unstable_isNewReconciler:!1},Qh={readContext:eh,useCallback:si,useContext:eh,useEffect:$h,useImperativeHandle:qi,useInsertionEffect:ni,useLayoutEffect:oi,useMemo:ti,useReducer:Xh,useRef:ji,useState:function(){return Xh(Vh)},useDebugValue:ri,useDeferredValue:function(a){var b=Uh();return null===
	N?b.memoizedState=a:ui(b,N.memoizedState,a)},useTransition:function(){var a=Xh(Vh)[0],b=Uh().memoizedState;return [a,b]},useMutableSource:Yh,useSyncExternalStore:Zh,useId:wi,unstable_isNewReconciler:!1};function Ci(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}function Di(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c);}
	var Ei={isMounted:function(a){return (a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=R(),e=yi(a),f=mh(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=nh(a,f,e);null!==b&&(gi(b,a,e,d),oh(b,a,e));},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=R(),e=yi(a),f=mh(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=nh(a,f,e);null!==b&&(gi(b,a,e,d),oh(b,a,e));},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=R(),d=
	yi(a),e=mh(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=nh(a,e,d);null!==b&&(gi(b,a,d,c),oh(b,a,d));}};function Fi(a,b,c,d,e,f,g){a=a.stateNode;return "function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}
	function Gi(a,b,c){var d=!1,e=Vf;var f=b.contextType;"object"===typeof f&&null!==f?f=eh(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Ei;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
	function Hi(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Ei.enqueueReplaceState(b,b.state,null);}
	function Ii(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs={};kh(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=eh(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Di(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||(b=e.state,
	"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Ei.enqueueReplaceState(e,e.state,null),qh(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.flags|=4194308);}function Ji(a,b){try{var c="",d=b;do c+=Pa(d),d=d.return;while(d);var e=c;}catch(f){e="\nError generating stack: "+f.message+"\n"+f.stack;}return {value:a,source:b,stack:e,digest:null}}
	function Ki(a,b,c){return {value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}function Li(a,b){try{console.error(b.value);}catch(c){setTimeout(function(){throw c;});}}var Mi="function"===typeof WeakMap?WeakMap:Map;function Ni(a,b,c){c=mh(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Oi||(Oi=!0,Pi=d);Li(a,b);};return c}
	function Qi(a,b,c){c=mh(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Li(a,b);};}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){Li(a,b);"function"!==typeof d&&(null===Ri?Ri=new Set([this]):Ri.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""});});return c}
	function Si(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Mi;var e=new Set;d.set(b,e);}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ti.bind(null,a,b,c),b.then(a,a));}function Ui(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return;}while(null!==a);return null}
	function Vi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=mh(-1,1),b.tag=2,nh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Wi=ua.ReactCurrentOwner,dh=!1;function Xi(a,b,c,d){b.child=null===a?Vg(b,null,c,d):Ug(b,a.child,c,d);}
	function Yi(a,b,c,d,e){c=c.render;var f=b.ref;ch(b,e);d=Nh(a,b,c,d,f,e);c=Sh();if(null!==a&&!dh)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,Zi(a,b,e);I&&c&&vg(b);b.flags|=1;Xi(a,b,d,e);return b.child}
	function $i(a,b,c,d,e){if(null===a){var f=c.type;if("function"===typeof f&&!aj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,bj(a,b,f,d,e);a=Rg(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return Zi(a,b,e)}b.flags|=1;a=Pg(f,d);a.ref=b.ref;a.return=b;return b.child=a}
	function bj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(dh=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(dh=!0);else return b.lanes=a.lanes,Zi(a,b,e)}return cj(a,b,c,d,e)}
	function dj(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if("hidden"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(ej,fj),fj|=c;else {if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(ej,fj),fj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(ej,fj);fj|=d;}else null!==
	f?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(ej,fj),fj|=d;Xi(a,b,e,c);return b.child}function gj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152;}function cj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);ch(b,e);c=Nh(a,b,c,d,f,e);d=Sh();if(null!==a&&!dh)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,Zi(a,b,e);I&&d&&vg(b);b.flags|=1;Xi(a,b,c,e);return b.child}
	function hj(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b);}else f=!1;ch(b,e);if(null===b.stateNode)ij(a,b),Gi(b,c,d),Ii(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=eh(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;q||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||
	(h!==d||k!==l)&&Hi(b,g,d,l);jh=!1;var r=b.memoizedState;g.state=r;qh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||jh?("function"===typeof m&&(Di(b,c,m,d),k=b.memoizedState),(h=jh||Fi(b,c,h,d,r,k,l))?(q||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&(b.flags|=4194308)):
	("function"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1);}else {g=b.stateNode;lh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Ci(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;"object"===typeof k&&null!==k?k=eh(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m="function"===typeof y||"function"===typeof g.getSnapshotBeforeUpdate)||
	"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&Hi(b,g,d,k);jh=!1;r=b.memoizedState;g.state=r;qh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||jh?("function"===typeof y&&(Di(b,c,y,d),n=b.memoizedState),(l=jh||Fi(b,c,l,d,r,n,k)||!1)?(m||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),"function"===typeof g.UNSAFE_componentWillUpdate&&
	g.UNSAFE_componentWillUpdate(d,n,k)),"function"===typeof g.componentDidUpdate&&(b.flags|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===
	a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1);}return jj(a,b,c,d,f,e)}
	function jj(a,b,c,d,e,f){gj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),Zi(a,b,f);d=b.stateNode;Wi.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Ug(b,a.child,null,f),b.child=Ug(b,null,h,f)):Xi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function kj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);yh(a,b.containerInfo);}
	function lj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Xi(a,b,c,d);return b.child}var mj={dehydrated:null,treeContext:null,retryLane:0};function nj(a){return {baseLanes:a,cachePool:null,transitions:null}}
	function oj(a,b,c){var d=b.pendingProps,e=L.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(L,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:"$!"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:"hidden",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=
	g):f=pj(g,d,0,null),a=Tg(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=nj(c),b.memoizedState=mj,a):qj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return rj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:"hidden",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=Pg(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=Pg(h,f):(f=Tg(f,g,c,null),f.flags|=2);f.return=
	b;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?nj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=mj;return d}f=a.child;a=f.sibling;d=Pg(f,{mode:"visible",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}
	function qj(a,b){b=pj({mode:"visible",children:b},a.mode,0,null);b.return=a;return a.child=b}function sj(a,b,c,d){null!==d&&Jg(d);Ug(b,a.child,null,c);a=qj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}
	function rj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Ki(Error(p(422))),sj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=pj({mode:"visible",children:d.children},e,0,null);f=Tg(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Ug(b,a.child,null,g);b.child.memoizedState=nj(g);b.memoizedState=mj;return f}if(0===(b.mode&1))return sj(a,b,g,null);if("$!"===e.data){d=e.nextSibling&&e.nextSibling.dataset;
	if(d)var h=d.dgst;d=h;f=Error(p(419));d=Ki(f,d,void 0);return sj(a,b,g,d)}h=0!==(g&a.childLanes);if(dh||h){d=Q;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0;}e=0!==(e&(d.suspendedLanes|g))?0:e;
	0!==e&&e!==f.retryLane&&(f.retryLane=e,ih(a,e),gi(d,a,e,-1));}tj();d=Ki(Error(p(421)));return sj(a,b,g,d)}if("$?"===e.data)return b.flags|=128,b.child=a.child,b=uj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=qj(b,d.children);b.flags|=4096;return b}function vj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);bh(a.return,b,c);}
	function wj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e);}
	function xj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Xi(a,b,d.children,c);d=L.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else {if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&vj(a,c,b);else if(19===a.tag)vj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return;}a.sibling.return=a.return;a=a.sibling;}d&=1;}G(L,d);if(0===(b.mode&1))b.memoizedState=
	null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Ch(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);wj(b,!1,e,c,f);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Ch(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a;}wj(b,!0,c,null,f);break;case "together":wj(b,!1,null,null,void 0);break;default:b.memoizedState=null;}return b.child}
	function ij(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);}function Zi(a,b,c){null!==a&&(b.dependencies=a.dependencies);rh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=Pg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Pg(a,a.pendingProps),c.return=b;c.sibling=null;}return b.child}
	function yj(a,b,c){switch(b.tag){case 3:kj(b);Ig();break;case 5:Ah(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:yh(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Wg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(L,L.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return oj(a,b,c);G(L,L.current&1);a=Zi(a,b,c);return null!==a?a.sibling:null}G(L,L.current&1);break;case 19:d=0!==(c&
	b.childLanes);if(0!==(a.flags&128)){if(d)return xj(a,b,c);b.flags|=128;}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(L,L.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,dj(a,b,c)}return Zi(a,b,c)}var zj,Aj,Bj,Cj;
	zj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}};Aj=function(){};
	Bj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;xh(uh.current);var f=null;switch(c){case "input":e=Ya(a,e);d=Ya(a,d);f=[];break;case "select":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case "textarea":e=gb(a,e);d=gb(a,d);f=[];break;default:"function"!==typeof e.onClick&&"function"===typeof d.onClick&&(a.onclick=Bf);}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if("style"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&
	(c||(c={}),c[g]="");}else "dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if("style"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]="");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g]);}else c||(f||(f=[]),f.push(l,
	c)),c=k;else "dangerouslySetInnerHTML"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):"children"===l?"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(l,""+k):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(ea.hasOwnProperty(l)?(null!=k&&"onScroll"===l&&D("scroll",a),f||h===k||(f=[])):(f=f||[]).push(l,k));}c&&(f=f||[]).push("style",c);var l=f;if(b.updateQueue=l)b.flags|=4;}};Cj=function(a,b,c,d){c!==d&&(b.flags|=4);};
	function Dj(a,b){if(!I)switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null;}}
	function S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}
	function Ej(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;zh();E(Wf);E(H);Eh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Fj(zg),zg=null));Aj(a,b);S(b);return null;case 5:Bh(b);var e=xh(wh.current);
	c=b.type;if(null!==a&&null!=b.stateNode)Bj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else {if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=xh(uh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case "dialog":D("cancel",d);D("close",d);break;case "iframe":case "object":case "embed":D("load",d);break;case "video":case "audio":for(e=0;e<lf.length;e++)D(lf[e],d);break;case "source":D("error",d);break;case "img":case "image":case "link":D("error",
	d);D("load",d);break;case "details":D("toggle",d);break;case "input":Za(d,f);D("invalid",d);break;case "select":d._wrapperState={wasMultiple:!!f.multiple};D("invalid",d);break;case "textarea":hb(d,f),D("invalid",d);}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,
	h,a),e=["children",""+h]):ea.hasOwnProperty(g)&&null!=h&&"onScroll"===g&&D("scroll",d);}switch(c){case "input":Va(d);db(d,f,!0);break;case "textarea":Va(d);jb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&(d.onclick=Bf);}d=e;b.updateQueue=d;null!==d&&(b.flags|=4);}else {g=9===e.nodeType?e:e.ownerDocument;"http://www.w3.org/1999/xhtml"===a&&(a=kb(c));"http://www.w3.org/1999/xhtml"===a?"script"===c?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):
	"string"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),"select"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;zj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case "dialog":D("cancel",a);D("close",a);e=d;break;case "iframe":case "object":case "embed":D("load",a);e=d;break;case "video":case "audio":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case "source":D("error",a);e=d;break;case "img":case "image":case "link":D("error",
	a);D("load",a);e=d;break;case "details":D("toggle",a);e=d;break;case "input":Za(a,d);e=Ya(a,d);D("invalid",a);break;case "option":e=d;break;case "select":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D("invalid",a);break;case "textarea":hb(a,d);e=gb(a,d);D("invalid",a);break;default:e=d;}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];"style"===f?sb(a,k):"dangerouslySetInnerHTML"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):"children"===f?"string"===typeof k?("textarea"!==
	c||""!==k)&&ob(a,k):"number"===typeof k&&ob(a,""+k):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(ea.hasOwnProperty(f)?null!=k&&"onScroll"===f&&D("scroll",a):null!=k&&ta(a,f,k,g));}switch(c){case "input":Va(a);db(a,d,!1);break;case "textarea":Va(a);jb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+Sa(d.value));break;case "select":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,
	!0);break;default:"function"===typeof e.onClick&&(a.onclick=Bf);}switch(c){case "button":case "input":case "select":case "textarea":d=!!d.autoFocus;break a;case "img":d=!0;break a;default:d=!1;}}d&&(b.flags|=4);}null!==b.ref&&(b.flags|=512,b.flags|=2097152);}S(b);return null;case 6:if(a&&null!=b.stateNode)Cj(a,b,a.memoizedProps,d);else {if("string"!==typeof d&&null===b.stateNode)throw Error(p(166));c=xh(wh.current);xh(uh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=
	xg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1));}f&&(b.flags|=4);}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d;}S(b);return null;case 13:E(L);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===
	a){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b;}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1;}else null!==zg&&(Fj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(L.current&1)?0===T&&(T=3):tj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return zh(),
	Aj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return ah(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(L);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Dj(f,!1);else {if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Ch(a);if(null!==g){b.flags|=128;Dj(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,
	g=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(L,L.current&1|2);return b.child}a=
	a.sibling;}null!==f.tail&&B()>Gj&&(b.flags|=128,d=!0,Dj(f,!1),b.lanes=4194304);}else {if(!d)if(a=Ch(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Dj(f,!0),null===f.tail&&"hidden"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Gj&&1073741824!==c&&(b.flags|=128,d=!0,Dj(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g);}if(null!==f.tail)return b=f.tail,f.rendering=
	b,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=L.current,G(L,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Hj(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(fj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}
	function Ij(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return zh(),E(Wf),E(H),Eh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Bh(b),null;case 13:E(L);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig();}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(L),null;case 4:return zh(),null;case 10:return ah(b.type._context),null;case 22:case 23:return Hj(),
	null;case 24:return null;default:return null}}var Jj=!1,U=!1,Kj="function"===typeof WeakSet?WeakSet:Set,V=null;function Lj(a,b){var c=a.ref;if(null!==c)if("function"===typeof c)try{c(null);}catch(d){W(a,b,d);}else c.current=null;}function Mj(a,b,c){try{c();}catch(d){W(a,b,d);}}var Nj=!1;
	function Oj(a,b){Cf=dd;a=Me();if(Ne(a)){if("selectionStart"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType;}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=
	q.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y;}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode;}q=y;}c=-1===h||-1===k?null:{start:h,end:k};}else c=null;}c=c||{start:0,end:0};}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;
	case 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Ci(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w;}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent="":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F);}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return;}n=Nj;Nj=!1;return n}
	function Pj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Mj(b,c,f);}e=e.next;}while(e!==d)}}function Qj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d();}c=c.next;}while(c!==b)}}function Rj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c;}"function"===typeof b?b(a):b.current=a;}}
	function Sj(a){var b=a.alternate;null!==b&&(a.alternate=null,Sj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null;}function Tj(a){return 5===a.tag||3===a.tag||4===a.tag}
	function Uj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Tj(a.return))return null;a=a.return;}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child;}if(!(a.flags&2))return a.stateNode}}
	function Vj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Vj(a,b,c),a=a.sibling;null!==a;)Vj(a,b,c),a=a.sibling;}
	function Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling;}var X=null,Xj=!1;function Yj(a,b,c){for(c=c.child;null!==c;)Zj(a,b,c),c=c.sibling;}
	function Zj(a,b,c){if(lc&&"function"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c);}catch(h){}switch(c.tag){case 5:U||Lj(c,b);case 6:var d=X,e=Xj;X=null;Yj(a,b,c);X=d;Xj=e;null!==X&&(Xj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Xj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Xj;X=c.stateNode.containerInfo;Xj=!0;
	Yj(a,b,c);X=d;Xj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Mj(c,b,g):0!==(f&4)&&Mj(c,b,g));e=e.next;}while(e!==d)}Yj(a,b,c);break;case 1:if(!U&&(Lj(c,b),d=c.stateNode,"function"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount();}catch(h){W(c,b,h);}Yj(a,b,c);break;case 21:Yj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==
	c.memoizedState,Yj(a,b,c),U=d):Yj(a,b,c);break;default:Yj(a,b,c);}}function ak(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Kj);b.forEach(function(b){var d=bk.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d));});}}
	function ck(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Xj=!1;break a;case 3:X=h.stateNode.containerInfo;Xj=!0;break a;case 4:X=h.stateNode.containerInfo;Xj=!0;break a}h=h.return;}if(null===X)throw Error(p(160));Zj(f,g,e);X=null;Xj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null;}catch(l){W(e,b,l);}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)dk(b,a),b=b.sibling;}
	function dk(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:ck(b,a);ek(a);if(d&4){try{Pj(3,a,a.return),Qj(3,a);}catch(t){W(a,a.return,t);}try{Pj(5,a,a.return);}catch(t){W(a,a.return,t);}}break;case 1:ck(b,a);ek(a);d&512&&null!==c&&Lj(c,c.return);break;case 5:ck(b,a);ek(a);d&512&&null!==c&&Lj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,"");}catch(t){W(a,a.return,t);}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;
	a.updateQueue=null;if(null!==k)try{"input"===h&&"radio"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];"style"===m?sb(e,q):"dangerouslySetInnerHTML"===m?nb(e,q):"children"===m?ob(e,q):ta(e,m,q,l);}switch(h){case "input":bb(e,f);break;case "textarea":ib(e,f);break;case "select":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,
	f.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:"",!1));}e[Pf]=f;}catch(t){W(a,a.return,t);}}break;case 6:ck(b,a);ek(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f;}catch(t){W(a,a.return,t);}}break;case 3:ck(b,a);ek(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo);}catch(t){W(a,a.return,t);}break;case 4:ck(b,a);ek(a);break;case 13:ck(b,a);ek(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||
	null!==e.alternate&&null!==e.alternate.memoizedState||(fk=B()));d&4&&ak(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,ck(b,a),U=l):ck(b,a);ek(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Pj(4,r,r.return);break;case 1:Lj(r,r.return);var n=r.stateNode;if("function"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=
	b.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount();}catch(t){W(d,c,t);}}break;case 5:Lj(r,r.return);break;case 22:if(null!==r.memoizedState){gk(q);continue}}null!==y?(y.return=r,V=y):gk(q);}m=m.sibling;}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty("display")?k.display:null,h.style.display=
	rb("display",g));}catch(t){W(a,a.return,t);}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?"":q.memoizedProps;}catch(t){W(a,a.return,t);}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return;}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling;}}break;case 19:ck(b,a);ek(a);d&4&&ak(a);break;case 21:break;default:ck(b,
	a),ek(a);}}function ek(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Tj(c)){var d=c;break a}c=c.return;}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,""),d.flags&=-33);var f=Uj(a);Wj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Uj(a);Vj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k);}a.flags&=-3;}b&4096&&(a.flags&=-4097);}function hk(a,b,c){V=a;ik(a);}
	function ik(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Jj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Jj;var l=U;Jj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?jk(e):null!==k?(k.return=g,V=k):jk(e);for(;null!==f;)V=f,ik(f),f=f.sibling;V=e;Jj=h;U=l;}kk(a);}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):kk(a);}}
	function kk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Qj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else {var e=b.elementType===b.type?c.memoizedProps:Ci(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate);}var f=b.updateQueue;null!==f&&sh(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=
	b.child.stateNode;break;case 1:c=b.child.stateNode;}sh(b,g,c);}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case "button":case "input":case "select":case "textarea":k.autoFocus&&c.focus();break;case "img":k.src&&(c.src=k.src);}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q);}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;
	default:throw Error(p(163));}U||b.flags&512&&Rj(b);}catch(r){W(b,b.return,r);}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return;}}function gk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return;}}
	function jk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Qj(4,b);}catch(k){W(b,c,k);}break;case 1:var d=b.stateNode;if("function"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount();}catch(k){W(b,e,k);}}var f=b.return;try{Rj(b);}catch(k){W(b,f,k);}break;case 5:var g=b.return;try{Rj(b);}catch(k){W(b,g,k);}}}catch(k){W(b,b.return,k);}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return;}}
	var lk=Math.ceil,mk=ua.ReactCurrentDispatcher,nk=ua.ReactCurrentOwner,ok=ua.ReactCurrentBatchConfig,K=0,Q=null,Y=null,Z=0,fj=0,ej=Uf(0),T=0,pk=null,rh=0,qk=0,rk=0,sk=null,tk=null,fk=0,Gj=Infinity,uk=null,Oi=!1,Pi=null,Ri=null,vk=!1,wk=null,xk=0,yk=0,zk=null,Ak=-1,Bk=0;function R(){return 0!==(K&6)?B():-1!==Ak?Ak:Ak=B()}
	function yi(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Bk&&(Bk=yc()),Bk;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function gi(a,b,c,d){if(50<yk)throw yk=0,zk=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==Q)a===Q&&(0===(K&2)&&(qk|=c),4===T&&Ck(a,Z)),Dk(a,d),1===c&&0===K&&0===(b.mode&1)&&(Gj=B()+500,fg&&jg());}
	function Dk(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===Q?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Ek.bind(null,a)):hg(Ek.bind(null,a)),Jf(function(){0===(K&6)&&jg();}),c=null;else {switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc;}c=Fk(c,Gk.bind(null,a));}a.callbackPriority=b;a.callbackNode=c;}}
	function Gk(a,b){Ak=-1;Bk=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Hk()&&a.callbackNode!==c)return null;var d=uc(a,a===Q?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Ik(a,d);else {b=d;var e=K;K|=2;var f=Jk();if(Q!==a||Z!==b)uk=null,Gj=B()+500,Kk(a,b);do try{Lk();break}catch(h){Mk(a,h);}while(1);$g();mk.current=f;K=e;null!==Y?b=0:(Q=null,Z=0,b=T);}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Nk(a,e)));if(1===b)throw c=pk,Kk(a,0),Ck(a,d),Dk(a,B()),c;if(6===b)Ck(a,d);
	else {e=a.current.alternate;if(0===(d&30)&&!Ok(e)&&(b=Ik(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Nk(a,f))),1===b))throw c=pk,Kk(a,0),Ck(a,d),Dk(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Pk(a,tk,uk);break;case 3:Ck(a,d);if((d&130023424)===d&&(b=fk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){R();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Pk.bind(null,a,tk,uk),b);break}Pk(a,tk,uk);break;case 4:Ck(a,d);if((d&4194240)===
	d)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f;}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*lk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Pk.bind(null,a,tk,uk),d);break}Pk(a,tk,uk);break;case 5:Pk(a,tk,uk);break;default:throw Error(p(329));}}}Dk(a,B());return a.callbackNode===c?Gk.bind(null,a):null}
	function Nk(a,b){var c=sk;a.current.memoizedState.isDehydrated&&(Kk(a,b).flags|=256);a=Ik(a,b);2!==a&&(b=tk,tk=c,null!==b&&Fj(b));return a}function Fj(a){null===tk?tk=a:tk.push.apply(tk,a);}
	function Ok(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return !1}catch(g){return !1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else {if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return !0;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return !0}
	function Ck(a,b){b&=~rk;b&=~qk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d;}}function Ek(a){if(0!==(K&6))throw Error(p(327));Hk();var b=uc(a,0);if(0===(b&1))return Dk(a,B()),null;var c=Ik(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Nk(a,d));}if(1===c)throw c=pk,Kk(a,0),Ck(a,b),Dk(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Pk(a,tk,uk);Dk(a,B());return null}
	function Qk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Gj=B()+500,fg&&jg());}}function Rk(a){null!==wk&&0===wk.tag&&0===(K&6)&&Hk();var b=K;K|=1;var c=ok.transition,d=C;try{if(ok.transition=null,C=1,a)return a()}finally{C=d,ok.transition=c,K=b,0===(K&6)&&jg();}}function Hj(){fj=ej.current;E(ej);}
	function Kk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:zh();E(Wf);E(H);Eh();break;case 5:Bh(d);break;case 4:zh();break;case 13:E(L);break;case 19:E(L);break;case 10:ah(d.type._context);break;case 22:case 23:Hj();}c=c.return;}Q=a;Y=a=Pg(a.current,null);Z=fj=b;T=0;pk=null;rk=qk=rh=0;tk=sk=null;if(null!==fh){for(b=
	0;b<fh.length;b++)if(c=fh[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g;}c.pending=d;}fh=null;}return a}
	function Mk(a,b){do{var c=Y;try{$g();Fh.current=Rh;if(Ih){for(var d=M.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next;}Ih=!1;}Hh=0;O=N=M=null;Jh=!1;Kh=0;nk.current=null;if(null===c||null===c.return){T=1;pk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&"object"===typeof k&&"function"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,
	m.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null);}var y=Ui(g);if(null!==y){y.flags&=-257;Vi(y,g,h,f,b);y.mode&1&&Si(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t;}else n.add(k);break a}else {if(0===(b&1)){Si(f,l,b);tj();break a}k=Error(p(426));}}else if(I&&h.mode&1){var J=Ui(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Vi(J,g,h,f,b);Jg(Ji(k,h));break a}}f=k=Ji(k,h);4!==T&&(T=2);null===sk?sk=[f]:sk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;
	b&=-b;f.lanes|=b;var x=Ni(f,k,b);ph(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&("function"===typeof w.getDerivedStateFromError||null!==u&&"function"===typeof u.componentDidCatch&&(null===Ri||!Ri.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Qi(f,h,b);ph(f,F);break a}}f=f.return;}while(null!==f)}Sk(c);}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Jk(){var a=mk.current;mk.current=Rh;return null===a?Rh:a}
	function tj(){if(0===T||3===T||2===T)T=4;null===Q||0===(rh&268435455)&&0===(qk&268435455)||Ck(Q,Z);}function Ik(a,b){var c=K;K|=2;var d=Jk();if(Q!==a||Z!==b)uk=null,Kk(a,b);do try{Tk();break}catch(e){Mk(a,e);}while(1);$g();K=c;mk.current=d;if(null!==Y)throw Error(p(261));Q=null;Z=0;return T}function Tk(){for(;null!==Y;)Uk(Y);}function Lk(){for(;null!==Y&&!cc();)Uk(Y);}function Uk(a){var b=Vk(a.alternate,a,fj);a.memoizedProps=a.pendingProps;null===b?Sk(a):Y=b;nk.current=null;}
	function Sk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Ej(c,b,fj),null!==c){Y=c;return}}else {c=Ij(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else {T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a;}while(null!==b);0===T&&(T=5);}function Pk(a,b,c){var d=C,e=ok.transition;try{ok.transition=null,C=1,Wk(a,b,c,d);}finally{ok.transition=e,C=d;}return null}
	function Wk(a,b,c,d){do Hk();while(null!==wk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===Q&&(Y=Q=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||vk||(vk=!0,Fk(hc,function(){Hk();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=ok.transition;ok.transition=null;
	var g=C;C=1;var h=K;K|=4;nk.current=null;Oj(a,c);dk(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;hk(c);dc();K=h;C=g;ok.transition=f;}else a.current=c;vk&&(vk=!1,wk=a,xk=e);f=a.pendingLanes;0===f&&(Ri=null);mc(c.stateNode);Dk(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Oi)throw Oi=!1,a=Pi,Pi=null,a;0!==(xk&1)&&0!==a.tag&&Hk();f=a.pendingLanes;0!==(f&1)?a===zk?yk++:(yk=0,zk=a):yk=0;jg();return null}
	function Hk(){if(null!==wk){var a=Dc(xk),b=ok.transition,c=C;try{ok.transition=null;C=16>a?16:a;if(null===wk)var d=!1;else {a=wk;wk=null;xk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Pj(8,m,f);}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Sj(m);if(m===
	l){V=null;break}if(null!==r){r.return=y;V=r;break}V=y;}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J;}while(null!==t)}}V=f;}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Pj(9,f,f.return);}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return;}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==
	u)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Qj(9,h);}}catch(na){W(h,h.return,na);}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return;}}K=e;jg();if(lc&&"function"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a);}catch(na){}d=!0;}return d}finally{C=c,ok.transition=b;}}return !1}function Xk(a,b,c){b=Ji(c,b);b=Ni(a,b,1);a=nh(a,b,1);b=R();null!==a&&(Ac(a,1,b),Dk(a,b));}
	function W(a,b,c){if(3===a.tag)Xk(a,a,c);else for(;null!==b;){if(3===b.tag){Xk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if("function"===typeof b.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Ri||!Ri.has(d))){a=Ji(c,a);a=Qi(b,a,1);b=nh(b,a,1);a=R();null!==b&&(Ac(b,1,a),Dk(b,a));break}}b=b.return;}}
	function Ti(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=R();a.pingedLanes|=a.suspendedLanes&c;Q===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-fk?Kk(a,0):rk|=c);Dk(a,b);}function Yk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=R();a=ih(a,b);null!==a&&(Ac(a,b,c),Dk(a,c));}function uj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Yk(a,c);}
	function bk(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Yk(a,c);}var Vk;
	Vk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)dh=!0;else {if(0===(a.lanes&c)&&0===(b.flags&128))return dh=!1,yj(a,b,c);dh=0!==(a.flags&131072)?!0:!1;}else dh=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;ij(a,b);a=b.pendingProps;var e=Yf(b,H.current);ch(b,c);e=Nh(null,b,d,a,e,c);var f=Sh();b.flags|=1;"object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=
	null,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,kh(b),e.updater=Ei,b.stateNode=e,e._reactInternals=b,Ii(b,d,a,c),b=jj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Xi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{ij(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=Zk(d);a=Ci(d,a);switch(e){case 0:b=cj(null,b,d,a,c);break a;case 1:b=hj(null,b,d,a,c);break a;case 11:b=Yi(null,b,d,a,c);break a;case 14:b=$i(null,b,d,Ci(d.type,a),c);break a}throw Error(p(306,
	d,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),cj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),hj(a,b,d,e,c);case 3:a:{kj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;lh(a,b);qh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=
	f,b.memoizedState=f,b.flags&256){e=Ji(Error(p(423)),b);b=lj(a,b,d,c,e);break a}else if(d!==e){e=Ji(Error(p(424)),b);b=lj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Vg(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else {Ig();if(d===e){b=Zi(a,b,c);break a}Xi(a,b,d,c);}b=b.child;}return b;case 5:return Ah(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),
	gj(a,b),Xi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return oj(a,b,c);case 4:return yh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Ug(b,null,d,c):Xi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),Yi(a,b,d,e,c);case 7:return Xi(a,b,b.pendingProps,c),b.child;case 8:return Xi(a,b,b.pendingProps.children,c),b.child;case 12:return Xi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;
	g=e.value;G(Wg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=Zi(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=mh(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k;}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);bh(f.return,
	c,b);h.lanes|=c;break}k=k.next;}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);bh(g,c,b);g=f.sibling;}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return;}f=g;}Xi(a,b,e.children,c);b=b.child;}return b;case 9:return e=b.type,d=b.pendingProps.children,ch(b,c),e=eh(e),d=d(e),b.flags|=1,Xi(a,b,d,c),
	b.child;case 14:return d=b.type,e=Ci(d,b.pendingProps),e=Ci(d.type,e),$i(a,b,d,e,c);case 15:return bj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),ij(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,ch(b,c),Gi(b,d,e),Ii(b,d,e,c),jj(null,b,d,!0,a,c);case 19:return xj(a,b,c);case 22:return dj(a,b,c)}throw Error(p(156,b.tag));};function Fk(a,b){return ac(a,b)}
	function $k(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null;}function Bg(a,b,c,d){return new $k(a,b,c,d)}function aj(a){a=a.prototype;return !(!a||!a.isReactComponent)}
	function Zk(a){if("function"===typeof a)return aj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}
	function Pg(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};
	c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
	function Rg(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)aj(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ya:return Tg(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return pj(c,e,f,b);default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;
	break a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,""));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Tg(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function pj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function Qg(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}
	function Sg(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
	function al(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=
	null;}function bl(a,b,c,d,e,f,g,h,k){a=new al(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};kh(f);return a}function cl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return {$$typeof:wa,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
	function dl(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return;}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}
	function el(a,b,c,d,e,f,g,h,k){a=bl(c,d,!0,a,e,f,g,h,k);a.context=dl(null);c=a.current;d=R();e=yi(c);f=mh(d,e);f.callback=void 0!==b&&null!==b?b:null;nh(c,f,e);a.current.lanes=e;Ac(a,e,d);Dk(a,d);return a}function fl(a,b,c,d){var e=b.current,f=R(),g=yi(e);c=dl(c);null===b.context?b.context=c:b.pendingContext=c;b=mh(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=nh(e,b,g);null!==a&&(gi(a,e,g,f),oh(a,e,g));return g}
	function gl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function hl(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b;}}function il(a,b){hl(a,b);(a=a.alternate)&&hl(a,b);}function jl(){return null}var kl="function"===typeof reportError?reportError:function(a){console.error(a);};function ll(a){this._internalRoot=a;}
	ml.prototype.render=ll.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));fl(a,b,null,null);};ml.prototype.unmount=ll.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Rk(function(){fl(null,a,null,null);});b[uf]=null;}};function ml(a){this._internalRoot=a;}
	ml.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a);}};function nl(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function ol(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function pl(){}
	function ql(a,b,c,d,e){if(e){if("function"===typeof d){var f=d;d=function(){var a=gl(g);f.call(a);};}var g=el(b,d,a,0,null,!1,!1,"",pl);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Rk();return g}for(;e=a.lastChild;)a.removeChild(e);if("function"===typeof d){var h=d;d=function(){var a=gl(k);h.call(a);};}var k=bl(a,0,!1,null,null,!1,!1,"",pl);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Rk(function(){fl(b,k,c,d);});return k}
	function rl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if("function"===typeof e){var h=e;e=function(){var a=gl(g);h.call(a);};}fl(b,g,a,e);}else g=ql(c,b,a,e,d);return gl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Dk(b,B()),0===(K&6)&&(Gj=B()+500,jg()));}break;case 13:Rk(function(){var b=ih(a,1);if(null!==b){var c=R();gi(b,a,1,c);}}),il(a,1);}};
	Fc=function(a){if(13===a.tag){var b=ih(a,134217728);if(null!==b){var c=R();gi(b,a,134217728,c);}il(a,134217728);}};Gc=function(a){if(13===a.tag){var b=yi(a),c=ih(a,b);if(null!==c){var d=R();gi(c,a,b,d);}il(a,b);}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c;}};
	yb=function(a,b,c){switch(b){case "input":bb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e);}}}break;case "textarea":ib(a,c);break;case "select":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1);}};Gb=Qk;Hb=Rk;
	var sl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Qk]},tl={findFiberByHostInstance:Wc,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"};
	var ul={bundleType:tl.bundleType,version:tl.version,rendererPackageName:tl.rendererPackageName,rendererConfig:tl.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:tl.findFiberByHostInstance||
	jl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var vl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!vl.isDisabled&&vl.supportsFiber)try{kc=vl.inject(ul),lc=vl;}catch(a){}}reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=sl;
	reactDom_production_min.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nl(b))throw Error(p(200));return cl(a,b,null,c)};reactDom_production_min.createRoot=function(a,b){if(!nl(a))throw Error(p(299));var c=!1,d="",e=kl;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=bl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ll(b)};
	reactDom_production_min.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if("function"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(",");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};reactDom_production_min.flushSync=function(a){return Rk(a)};reactDom_production_min.hydrate=function(a,b,c){if(!ol(b))throw Error(p(200));return rl(null,a,b,!0,c)};
	reactDom_production_min.hydrateRoot=function(a,b,c){if(!nl(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f="",g=kl;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=el(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,
	e);return new ml(b)};reactDom_production_min.render=function(a,b,c){if(!ol(b))throw Error(p(200));return rl(null,a,b,!1,c)};reactDom_production_min.unmountComponentAtNode=function(a){if(!ol(a))throw Error(p(40));return a._reactRootContainer?(Rk(function(){rl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null;});}),!0):!1};reactDom_production_min.unstable_batchedUpdates=Qk;
	reactDom_production_min.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!ol(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return rl(a,b,c,!1,d)};reactDom_production_min.version="18.3.1-next-f1338f8080-20240426";
	return reactDom_production_min;
}

var reactDom_development = {};

/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactDom_development;

function requireReactDom_development () {
	if (hasRequiredReactDom_development) return reactDom_development;
	hasRequiredReactDom_development = 1;

	if (process.env.NODE_ENV !== "production") {
	  (function() {

	/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
	    'function'
	) {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
	}
	          var React = reactExports;
	var Scheduler = requireScheduler();

	var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	var suppressWarning = false;
	function setSuppressWarning(newSuppressWarning) {
	  {
	    suppressWarning = newSuppressWarning;
	  }
	} // In DEV, calls to console.warn and console.error get replaced
	// by calls to these methods by a Babel plugin.
	//
	// In PROD (or in packages without access to React internals),
	// they are left as they are instead.

	function warn(format) {
	  {
	    if (!suppressWarning) {
	      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      printWarning('warn', format, args);
	    }
	  }
	}
	function error(format) {
	  {
	    if (!suppressWarning) {
	      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        args[_key2 - 1] = arguments[_key2];
	      }

	      printWarning('error', format, args);
	    }
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();

	    if (stack !== '') {
	      format += '%s';
	      args = args.concat([stack]);
	    } // eslint-disable-next-line react-internal/safe-string-coercion


	    var argsWithFormat = args.map(function (item) {
	      return String(item);
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);
	  }
	}

	var FunctionComponent = 0;
	var ClassComponent = 1;
	var IndeterminateComponent = 2; // Before we know whether it is function or class

	var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

	var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

	var HostComponent = 5;
	var HostText = 6;
	var Fragment = 7;
	var Mode = 8;
	var ContextConsumer = 9;
	var ContextProvider = 10;
	var ForwardRef = 11;
	var Profiler = 12;
	var SuspenseComponent = 13;
	var MemoComponent = 14;
	var SimpleMemoComponent = 15;
	var LazyComponent = 16;
	var IncompleteClassComponent = 17;
	var DehydratedFragment = 18;
	var SuspenseListComponent = 19;
	var ScopeComponent = 21;
	var OffscreenComponent = 22;
	var LegacyHiddenComponent = 23;
	var CacheComponent = 24;
	var TracingMarkerComponent = 25;

	// -----------------------------------------------------------------------------

	var enableClientRenderFallbackOnTextMismatch = true; // TODO: Need to review this code one more time before landing
	// the react-reconciler package.

	var enableNewReconciler = false; // Support legacy Primer support on internal FB www

	var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.

	var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber

	var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz
	// React DOM Chopping Block
	//
	// Similar to main Chopping Block but only flags related to React DOM. These are
	// grouped because we will likely batch all of them into a single major release.
	// -----------------------------------------------------------------------------
	// Disable support for comment nodes as React DOM containers. Already disabled
	// in open source, but www codebase still relies on it. Need to remove.

	var disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.
	// and client rendering, mostly to allow JSX attributes to apply to the custom
	// element's object properties instead of only HTML attributes.
	// https://github.com/facebook/react/issues/11347

	var enableCustomElementPropertySupport = false; // Disables children for <textarea> elements
	var warnAboutStringRefs = true; // -----------------------------------------------------------------------------
	// Debugging and DevTools
	// -----------------------------------------------------------------------------
	// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
	// for an experimental timeline tool.

	var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState

	var enableProfilerTimer = true; // Record durations for commit and passive effects phases.

	var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".

	var allNativeEvents = new Set();
	/**
	 * Mapping from registration name to event name
	 */


	var registrationNameDependencies = {};
	/**
	 * Mapping from lowercase registration names to the properly cased version,
	 * used to warn in the case of missing event handlers. Available
	 * only in true.
	 * @type {Object}
	 */

	var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

	function registerTwoPhaseEvent(registrationName, dependencies) {
	  registerDirectEvent(registrationName, dependencies);
	  registerDirectEvent(registrationName + 'Capture', dependencies);
	}
	function registerDirectEvent(registrationName, dependencies) {
	  {
	    if (registrationNameDependencies[registrationName]) {
	      error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
	    }
	  }

	  registrationNameDependencies[registrationName] = dependencies;

	  {
	    var lowerCasedName = registrationName.toLowerCase();
	    possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }

	  for (var i = 0; i < dependencies.length; i++) {
	    allNativeEvents.add(dependencies[i]);
	  }
	}

	var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/*
	 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
	 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
	 *
	 * The functions in this module will throw an easier-to-understand,
	 * easier-to-debug exception with a clear errors message message explaining the
	 * problem. (Instead of a confusing exception thrown inside the implementation
	 * of the `value` object).
	 */
	// $FlowFixMe only called in DEV, so void return is not possible.
	function typeName(value) {
	  {
	    // toStringTag is needed for namespaced types like Temporal.Instant
	    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
	    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
	    return type;
	  }
	} // $FlowFixMe only called in DEV, so void return is not possible.


	function willCoercionThrow(value) {
	  {
	    try {
	      testStringCoercion(value);
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	}

	function testStringCoercion(value) {
	  // If you ended up here by following an exception call stack, here's what's
	  // happened: you supplied an object or symbol value to React (as a prop, key,
	  // DOM attribute, CSS property, string ref, etc.) and when React tried to
	  // coerce it to a string using `'' + value`, an exception was thrown.
	  //
	  // The most common types that will cause this exception are `Symbol` instances
	  // and Temporal objects like `Temporal.Instant`. But any object that has a
	  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
	  // exception. (Library authors do this to prevent users from using built-in
	  // numeric operators like `+` or comparison operators like `>=` because custom
	  // methods are needed to perform accurate arithmetic or comparison.)
	  //
	  // To fix the problem, coerce this object or symbol value to a string before
	  // passing it to React. The most reliable way is usually `String(value)`.
	  //
	  // To find which value is throwing, check the browser or debugger console.
	  // Before this exception was thrown, there should be `console.error` output
	  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
	  // problem and how that type was used: key, atrribute, input value prop, etc.
	  // In most cases, this console output also shows the component and its
	  // ancestor components where the exception happened.
	  //
	  // eslint-disable-next-line react-internal/safe-string-coercion
	  return '' + value;
	}

	function checkAttributeStringCoercion(value, attributeName) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided `%s` attribute is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', attributeName, typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}
	function checkKeyStringCoercion(value) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}
	function checkPropStringCoercion(value, propName) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}
	function checkCSSPropertyStringCoercion(value, propName) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided `%s` CSS property is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}
	function checkHtmlStringCoercion(value) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided HTML markup uses a value of unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}
	function checkFormFieldValueStringCoercion(value) {
	  {
	    if (willCoercionThrow(value)) {
	      error('Form field values (value, checked, defaultValue, or defaultChecked props)' + ' must be strings, not %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}

	// A reserved attribute.
	// It is handled by React separately and shouldn't be written to the DOM.
	var RESERVED = 0; // A simple string attribute.
	// Attributes that aren't in the filter are presumed to have this type.

	var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
	// "enumerated" attributes with "true" and "false" as possible values.
	// When true, it should be set to a "true" string.
	// When false, it should be set to a "false" string.

	var BOOLEANISH_STRING = 2; // A real boolean attribute.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.

	var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.
	// For any other value, should be present with that value.

	var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
	// When falsy, it should be removed.

	var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
	// When falsy, it should be removed.

	var POSITIVE_NUMERIC = 6;

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
	/* eslint-enable max-len */

	var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	function isAttributeNameSafe(attributeName) {
	  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
	    return true;
	  }

	  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
	    return false;
	  }

	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }

	  illegalAttributeNameCache[attributeName] = true;

	  {
	    error('Invalid attribute name: `%s`', attributeName);
	  }

	  return false;
	}
	function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null) {
	    return propertyInfo.type === RESERVED;
	  }

	  if (isCustomComponentTag) {
	    return false;
	  }

	  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
	    return true;
	  }

	  return false;
	}
	function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
	    return false;
	  }

	  switch (typeof value) {
	    case 'function': // $FlowIssue symbol is perfectly valid here

	    case 'symbol':
	      // eslint-disable-line
	      return true;

	    case 'boolean':
	      {
	        if (isCustomComponentTag) {
	          return false;
	        }

	        if (propertyInfo !== null) {
	          return !propertyInfo.acceptsBooleans;
	        } else {
	          var prefix = name.toLowerCase().slice(0, 5);
	          return prefix !== 'data-' && prefix !== 'aria-';
	        }
	      }

	    default:
	      return false;
	  }
	}
	function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
	  if (value === null || typeof value === 'undefined') {
	    return true;
	  }

	  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
	    return true;
	  }

	  if (isCustomComponentTag) {

	    return false;
	  }

	  if (propertyInfo !== null) {

	    switch (propertyInfo.type) {
	      case BOOLEAN:
	        return !value;

	      case OVERLOADED_BOOLEAN:
	        return value === false;

	      case NUMERIC:
	        return isNaN(value);

	      case POSITIVE_NUMERIC:
	        return isNaN(value) || value < 1;
	    }
	  }

	  return false;
	}
	function getPropertyInfo(name) {
	  return properties.hasOwnProperty(name) ? properties[name] : null;
	}

	function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
	  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
	  this.attributeName = attributeName;
	  this.attributeNamespace = attributeNamespace;
	  this.mustUseProperty = mustUseProperty;
	  this.propertyName = name;
	  this.type = type;
	  this.sanitizeURL = sanitizeURL;
	  this.removeEmptyString = removeEmptyString;
	} // When adding attributes to this list, be sure to also add them to
	// the `possibleStandardNames` module to ensure casing and incorrect
	// name warnings.


	var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

	var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
	// elements (not just inputs). Now that ReactDOMInput assigns to the
	// defaultValue property -- do we need this?
	'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];

	reservedProps.forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // A few React string attributes have a different name.
	// This is a mapping from React prop names to the attribute names.

	[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
	  var name = _ref[0],
	      attributeName = _ref[1];
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are "enumerated" HTML attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).

	['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are "enumerated" SVG attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).
	// Since these are SVG attributes, their attribute names are case-sensitive.

	['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are HTML boolean attributes.

	['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
	// on the client side because the browsers are inconsistent. Instead we call focus().
	'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
	'itemScope'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are the few React props that we set as DOM properties
	// rather than attributes. These are all booleans.

	['checked', // Note: `option.selected` is not updated if `select.multiple` is
	// disabled with `removeAttribute`. We have special logic for handling this.
	'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are HTML attributes that are "overloaded booleans": they behave like
	// booleans, but can also accept a string value.

	['capture', 'download' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are HTML attributes that must be positive numbers.

	['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are HTML attributes that must be numbers.

	['rowSpan', 'start'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	});
	var CAMELIZE = /[\-\:]([a-z])/g;

	var capitalize = function (token) {
	  return token[1].toUpperCase();
	}; // This is a list of all SVG attributes that need special casing, namespacing,
	// or boolean value assignment. Regular attributes that just accept strings
	// and have the same names are omitted, just like in the HTML attribute filter.
	// Some of these attributes can be hard to find. This list was created by
	// scraping the MDN documentation.


	['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // String SVG attributes with the xlink namespace.

	['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
	  false);
	}); // String SVG attributes with the xml namespace.

	['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
	  false);
	}); // These attribute exists both in HTML and SVG.
	// The attribute name is case-sensitive in SVG so we can't just use
	// the React name like we do for attributes that exist only in HTML.

	['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These attributes accept URLs. These must not allow javascript: URLS.
	// These will also need to accept Trusted Types object in the future.

	var xlinkHref = 'xlinkHref';
	properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
	'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
	false);
	['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  true, // sanitizeURL
	  true);
	});

	// and any newline or tab are filtered out as if they're not part of the URL.
	// https://url.spec.whatwg.org/#url-parsing
	// Tab or newline are defined as \r\n\t:
	// https://infra.spec.whatwg.org/#ascii-tab-or-newline
	// A C0 control is a code point in the range \u0000 NULL to \u001F
	// INFORMATION SEPARATOR ONE, inclusive:
	// https://infra.spec.whatwg.org/#c0-control-or-space

	/* eslint-disable max-len */

	var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
	var didWarn = false;

	function sanitizeURL(url) {
	  {
	    if (!didWarn && isJavaScriptProtocol.test(url)) {
	      didWarn = true;

	      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
	    }
	  }
	}

	/**
	 * Get the value for a property on a node. Only used in DEV for SSR validation.
	 * The "expected" argument is used as a hint of what the expected value is.
	 * Some properties have multiple equivalent values.
	 */
	function getValueForProperty(node, name, expected, propertyInfo) {
	  {
	    if (propertyInfo.mustUseProperty) {
	      var propertyName = propertyInfo.propertyName;
	      return node[propertyName];
	    } else {
	      // This check protects multiple uses of `expected`, which is why the
	      // react-internal/safe-string-coercion rule is disabled in several spots
	      // below.
	      {
	        checkAttributeStringCoercion(expected, name);
	      }

	      if ( propertyInfo.sanitizeURL) {
	        // If we haven't fully disabled javascript: URLs, and if
	        // the hydration is successful of a javascript: URL, we
	        // still want to warn on the client.
	        // eslint-disable-next-line react-internal/safe-string-coercion
	        sanitizeURL('' + expected);
	      }

	      var attributeName = propertyInfo.attributeName;
	      var stringValue = null;

	      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
	        if (node.hasAttribute(attributeName)) {
	          var value = node.getAttribute(attributeName);

	          if (value === '') {
	            return true;
	          }

	          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	            return value;
	          } // eslint-disable-next-line react-internal/safe-string-coercion


	          if (value === '' + expected) {
	            return expected;
	          }

	          return value;
	        }
	      } else if (node.hasAttribute(attributeName)) {
	        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	          // We had an attribute but shouldn't have had one, so read it
	          // for the error message.
	          return node.getAttribute(attributeName);
	        }

	        if (propertyInfo.type === BOOLEAN) {
	          // If this was a boolean, it doesn't matter what the value is
	          // the fact that we have it is the same as the expected.
	          return expected;
	        } // Even if this property uses a namespace we use getAttribute
	        // because we assume its namespaced name is the same as our config.
	        // To use getAttributeNS we need the local name which we don't have
	        // in our config atm.


	        stringValue = node.getAttribute(attributeName);
	      }

	      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	        return stringValue === null ? expected : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion
	      } else if (stringValue === '' + expected) {
	        return expected;
	      } else {
	        return stringValue;
	      }
	    }
	  }
	}
	/**
	 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
	 * The third argument is used as a hint of what the expected value is. Some
	 * attributes have multiple equivalent values.
	 */

	function getValueForAttribute(node, name, expected, isCustomComponentTag) {
	  {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }

	    if (!node.hasAttribute(name)) {
	      return expected === undefined ? undefined : null;
	    }

	    var value = node.getAttribute(name);

	    {
	      checkAttributeStringCoercion(expected, name);
	    }

	    if (value === '' + expected) {
	      return expected;
	    }

	    return value;
	  }
	}
	/**
	 * Sets the value for a property on a node.
	 *
	 * @param {DOMElement} node
	 * @param {string} name
	 * @param {*} value
	 */

	function setValueForProperty(node, name, value, isCustomComponentTag) {
	  var propertyInfo = getPropertyInfo(name);

	  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
	    return;
	  }

	  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
	    value = null;
	  }


	  if (isCustomComponentTag || propertyInfo === null) {
	    if (isAttributeNameSafe(name)) {
	      var _attributeName = name;

	      if (value === null) {
	        node.removeAttribute(_attributeName);
	      } else {
	        {
	          checkAttributeStringCoercion(value, name);
	        }

	        node.setAttribute(_attributeName,  '' + value);
	      }
	    }

	    return;
	  }

	  var mustUseProperty = propertyInfo.mustUseProperty;

	  if (mustUseProperty) {
	    var propertyName = propertyInfo.propertyName;

	    if (value === null) {
	      var type = propertyInfo.type;
	      node[propertyName] = type === BOOLEAN ? false : '';
	    } else {
	      // Contrary to `setAttribute`, object properties are properly
	      // `toString`ed by IE8/9.
	      node[propertyName] = value;
	    }

	    return;
	  } // The rest are treated as attributes with special cases.


	  var attributeName = propertyInfo.attributeName,
	      attributeNamespace = propertyInfo.attributeNamespace;

	  if (value === null) {
	    node.removeAttribute(attributeName);
	  } else {
	    var _type = propertyInfo.type;
	    var attributeValue;

	    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
	      // If attribute type is boolean, we know for sure it won't be an execution sink
	      // and we won't require Trusted Type here.
	      attributeValue = '';
	    } else {
	      // `setAttribute` with objects becomes only `[object]` in IE8/9,
	      // ('' + value) makes it output the correct toString()-value.
	      {
	        {
	          checkAttributeStringCoercion(value, attributeName);
	        }

	        attributeValue = '' + value;
	      }

	      if (propertyInfo.sanitizeURL) {
	        sanitizeURL(attributeValue.toString());
	      }
	    }

	    if (attributeNamespace) {
	      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
	    } else {
	      node.setAttribute(attributeName, attributeValue);
	    }
	  }
	}

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	var REACT_MEMO_TYPE = Symbol.for('react.memo');
	var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	var REACT_SCOPE_TYPE = Symbol.for('react.scope');
	var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');
	var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
	var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');
	var REACT_CACHE_TYPE = Symbol.for('react.cache');
	var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');
	var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	var assign = Object.assign;

	// Helpers to patch console.logs to avoid logging during side-effect free
	// replaying on render function. This currently only patches the object
	// lazily which won't cover if the log function was extracted eagerly.
	// We could also eagerly patch the method.
	var disabledDepth = 0;
	var prevLog;
	var prevInfo;
	var prevWarn;
	var prevError;
	var prevGroup;
	var prevGroupCollapsed;
	var prevGroupEnd;

	function disabledLog() {}

	disabledLog.__reactDisabledLog = true;
	function disableLogs() {
	  {
	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      prevLog = console.log;
	      prevInfo = console.info;
	      prevWarn = console.warn;
	      prevError = console.error;
	      prevGroup = console.group;
	      prevGroupCollapsed = console.groupCollapsed;
	      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

	      var props = {
	        configurable: true,
	        enumerable: true,
	        value: disabledLog,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        info: props,
	        log: props,
	        warn: props,
	        error: props,
	        group: props,
	        groupCollapsed: props,
	        groupEnd: props
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    disabledDepth++;
	  }
	}
	function reenableLogs() {
	  {
	    disabledDepth--;

	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      var props = {
	        configurable: true,
	        enumerable: true,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        log: assign({}, props, {
	          value: prevLog
	        }),
	        info: assign({}, props, {
	          value: prevInfo
	        }),
	        warn: assign({}, props, {
	          value: prevWarn
	        }),
	        error: assign({}, props, {
	          value: prevError
	        }),
	        group: assign({}, props, {
	          value: prevGroup
	        }),
	        groupCollapsed: assign({}, props, {
	          value: prevGroupCollapsed
	        }),
	        groupEnd: assign({}, props, {
	          value: prevGroupEnd
	        })
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    if (disabledDepth < 0) {
	      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
	    }
	  }
	}

	var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	var prefix;
	function describeBuiltInComponentFrame(name, source, ownerFn) {
	  {
	    if (prefix === undefined) {
	      // Extract the VM specific prefix used by each line.
	      try {
	        throw Error();
	      } catch (x) {
	        var match = x.stack.trim().match(/\n( *(at )?)/);
	        prefix = match && match[1] || '';
	      }
	    } // We use the prefix to ensure our stacks line up with native stack frames.


	    return '\n' + prefix + name;
	  }
	}
	var reentry = false;
	var componentFrameCache;

	{
	  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
	  componentFrameCache = new PossiblyWeakMap();
	}

	function describeNativeComponentFrame(fn, construct) {
	  // If something asked for a stack inside a fake render, it should get ignored.
	  if ( !fn || reentry) {
	    return '';
	  }

	  {
	    var frame = componentFrameCache.get(fn);

	    if (frame !== undefined) {
	      return frame;
	    }
	  }

	  var control;
	  reentry = true;
	  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

	  Error.prepareStackTrace = undefined;
	  var previousDispatcher;

	  {
	    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
	    // for warnings.

	    ReactCurrentDispatcher.current = null;
	    disableLogs();
	  }

	  try {
	    // This should throw.
	    if (construct) {
	      // Something should be setting the props in the constructor.
	      var Fake = function () {
	        throw Error();
	      }; // $FlowFixMe


	      Object.defineProperty(Fake.prototype, 'props', {
	        set: function () {
	          // We use a throwing setter instead of frozen or non-writable props
	          // because that won't throw in a non-strict mode function.
	          throw Error();
	        }
	      });

	      if (typeof Reflect === 'object' && Reflect.construct) {
	        // We construct a different control for this case to include any extra
	        // frames added by the construct call.
	        try {
	          Reflect.construct(Fake, []);
	        } catch (x) {
	          control = x;
	        }

	        Reflect.construct(fn, [], Fake);
	      } else {
	        try {
	          Fake.call();
	        } catch (x) {
	          control = x;
	        }

	        fn.call(Fake.prototype);
	      }
	    } else {
	      try {
	        throw Error();
	      } catch (x) {
	        control = x;
	      }

	      fn();
	    }
	  } catch (sample) {
	    // This is inlined manually because closure doesn't do it for us.
	    if (sample && control && typeof sample.stack === 'string') {
	      // This extracts the first frame from the sample that isn't also in the control.
	      // Skipping one frame that we assume is the frame that calls the two.
	      var sampleLines = sample.stack.split('\n');
	      var controlLines = control.stack.split('\n');
	      var s = sampleLines.length - 1;
	      var c = controlLines.length - 1;

	      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
	        // We expect at least one stack frame to be shared.
	        // Typically this will be the root most one. However, stack frames may be
	        // cut off due to maximum stack limits. In this case, one maybe cut off
	        // earlier than the other. We assume that the sample is longer or the same
	        // and there for cut off earlier. So we should find the root most frame in
	        // the sample somewhere in the control.
	        c--;
	      }

	      for (; s >= 1 && c >= 0; s--, c--) {
	        // Next we find the first one that isn't the same which should be the
	        // frame that called our sample function and the control.
	        if (sampleLines[s] !== controlLines[c]) {
	          // In V8, the first line is describing the message but other VMs don't.
	          // If we're about to return the first line, and the control is also on the same
	          // line, that's a pretty good indicator that our sample threw at same line as
	          // the control. I.e. before we entered the sample frame. So we ignore this result.
	          // This can happen if you passed a class to function component, or non-function.
	          if (s !== 1 || c !== 1) {
	            do {
	              s--;
	              c--; // We may still have similar intermediate frames from the construct call.
	              // The next one that isn't the same should be our match though.

	              if (c < 0 || sampleLines[s] !== controlLines[c]) {
	                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
	                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
	                // but we have a user-provided "displayName"
	                // splice it in to make the stack more readable.


	                if (fn.displayName && _frame.includes('<anonymous>')) {
	                  _frame = _frame.replace('<anonymous>', fn.displayName);
	                }

	                {
	                  if (typeof fn === 'function') {
	                    componentFrameCache.set(fn, _frame);
	                  }
	                } // Return the line we found.


	                return _frame;
	              }
	            } while (s >= 1 && c >= 0);
	          }

	          break;
	        }
	      }
	    }
	  } finally {
	    reentry = false;

	    {
	      ReactCurrentDispatcher.current = previousDispatcher;
	      reenableLogs();
	    }

	    Error.prepareStackTrace = previousPrepareStackTrace;
	  } // Fallback to just using the name if we couldn't make it throw.


	  var name = fn ? fn.displayName || fn.name : '';
	  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

	  {
	    if (typeof fn === 'function') {
	      componentFrameCache.set(fn, syntheticFrame);
	    }
	  }

	  return syntheticFrame;
	}

	function describeClassComponentFrame(ctor, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(ctor, true);
	  }
	}
	function describeFunctionComponentFrame(fn, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(fn, false);
	  }
	}

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

	  if (type == null) {
	    return '';
	  }

	  if (typeof type === 'function') {
	    {
	      return describeNativeComponentFrame(type, shouldConstruct(type));
	    }
	  }

	  if (typeof type === 'string') {
	    return describeBuiltInComponentFrame(type);
	  }

	  switch (type) {
	    case REACT_SUSPENSE_TYPE:
	      return describeBuiltInComponentFrame('Suspense');

	    case REACT_SUSPENSE_LIST_TYPE:
	      return describeBuiltInComponentFrame('SuspenseList');
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_FORWARD_REF_TYPE:
	        return describeFunctionComponentFrame(type.render);

	      case REACT_MEMO_TYPE:
	        // Memo may contain any component type so we recursively resolve it.
	        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            // Lazy may contain any component type so we recursively resolve it.
	            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
	          } catch (x) {}
	        }
	    }
	  }

	  return '';
	}

	function describeFiber(fiber) {
	  fiber._debugOwner ? fiber._debugOwner.type : null ;
	  fiber._debugSource ;

	  switch (fiber.tag) {
	    case HostComponent:
	      return describeBuiltInComponentFrame(fiber.type);

	    case LazyComponent:
	      return describeBuiltInComponentFrame('Lazy');

	    case SuspenseComponent:
	      return describeBuiltInComponentFrame('Suspense');

	    case SuspenseListComponent:
	      return describeBuiltInComponentFrame('SuspenseList');

	    case FunctionComponent:
	    case IndeterminateComponent:
	    case SimpleMemoComponent:
	      return describeFunctionComponentFrame(fiber.type);

	    case ForwardRef:
	      return describeFunctionComponentFrame(fiber.type.render);

	    case ClassComponent:
	      return describeClassComponentFrame(fiber.type);

	    default:
	      return '';
	  }
	}

	function getStackByFiberInDevAndProd(workInProgress) {
	  try {
	    var info = '';
	    var node = workInProgress;

	    do {
	      info += describeFiber(node);
	      node = node.return;
	    } while (node);

	    return info;
	  } catch (x) {
	    return '\nError generating stack: ' + x.message + '\n' + x.stack;
	  }
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var displayName = outerType.displayName;

	  if (displayName) {
	    return displayName;
	  }

	  var functionName = innerType.displayName || innerType.name || '';
	  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
	} // Keep in sync with react-reconciler/getComponentNameFromFiber


	function getContextName(type) {
	  return type.displayName || 'Context';
	} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


	function getComponentNameFromType(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return 'Profiler';

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';

	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        var context = type;
	        return getContextName(context) + '.Consumer';

	      case REACT_PROVIDER_TYPE:
	        var provider = type;
	        return getContextName(provider._context) + '.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        var outerName = type.displayName || null;

	        if (outerName !== null) {
	          return outerName;
	        }

	        return getComponentNameFromType(type.type) || 'Memo';

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            return getComponentNameFromType(init(payload));
	          } catch (x) {
	            return null;
	          }
	        }

	      // eslint-disable-next-line no-fallthrough
	    }
	  }

	  return null;
	}

	function getWrappedName$1(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
	} // Keep in sync with shared/getComponentNameFromType


	function getContextName$1(type) {
	  return type.displayName || 'Context';
	}

	function getComponentNameFromFiber(fiber) {
	  var tag = fiber.tag,
	      type = fiber.type;

	  switch (tag) {
	    case CacheComponent:
	      return 'Cache';

	    case ContextConsumer:
	      var context = type;
	      return getContextName$1(context) + '.Consumer';

	    case ContextProvider:
	      var provider = type;
	      return getContextName$1(provider._context) + '.Provider';

	    case DehydratedFragment:
	      return 'DehydratedFragment';

	    case ForwardRef:
	      return getWrappedName$1(type, type.render, 'ForwardRef');

	    case Fragment:
	      return 'Fragment';

	    case HostComponent:
	      // Host component type is the display name (e.g. "div", "View")
	      return type;

	    case HostPortal:
	      return 'Portal';

	    case HostRoot:
	      return 'Root';

	    case HostText:
	      return 'Text';

	    case LazyComponent:
	      // Name comes from the type in this case; we don't have a tag.
	      return getComponentNameFromType(type);

	    case Mode:
	      if (type === REACT_STRICT_MODE_TYPE) {
	        // Don't be less specific than shared/getComponentNameFromType
	        return 'StrictMode';
	      }

	      return 'Mode';

	    case OffscreenComponent:
	      return 'Offscreen';

	    case Profiler:
	      return 'Profiler';

	    case ScopeComponent:
	      return 'Scope';

	    case SuspenseComponent:
	      return 'Suspense';

	    case SuspenseListComponent:
	      return 'SuspenseList';

	    case TracingMarkerComponent:
	      return 'TracingMarker';
	    // The display name for this tags come from the user-provided type:

	    case ClassComponent:
	    case FunctionComponent:
	    case IncompleteClassComponent:
	    case IndeterminateComponent:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      if (typeof type === 'function') {
	        return type.displayName || type.name || null;
	      }

	      if (typeof type === 'string') {
	        return type;
	      }

	      break;

	  }

	  return null;
	}

	var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	var current = null;
	var isRendering = false;
	function getCurrentFiberOwnerNameInDevOrNull() {
	  {
	    if (current === null) {
	      return null;
	    }

	    var owner = current._debugOwner;

	    if (owner !== null && typeof owner !== 'undefined') {
	      return getComponentNameFromFiber(owner);
	    }
	  }

	  return null;
	}

	function getCurrentFiberStackInDev() {
	  {
	    if (current === null) {
	      return '';
	    } // Safe because if current fiber exists, we are reconciling,
	    // and it is guaranteed to be the work-in-progress version.


	    return getStackByFiberInDevAndProd(current);
	  }
	}

	function resetCurrentFiber() {
	  {
	    ReactDebugCurrentFrame.getCurrentStack = null;
	    current = null;
	    isRendering = false;
	  }
	}
	function setCurrentFiber(fiber) {
	  {
	    ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
	    current = fiber;
	    isRendering = false;
	  }
	}
	function getCurrentFiber() {
	  {
	    return current;
	  }
	}
	function setIsRendering(rendering) {
	  {
	    isRendering = rendering;
	  }
	}

	// Flow does not allow string concatenation of most non-string types. To work
	// around this limitation, we use an opaque type that can only be obtained by
	// passing the value through getToStringValue first.
	function toString(value) {
	  // The coercion safety check is performed in getToStringValue().
	  // eslint-disable-next-line react-internal/safe-string-coercion
	  return '' + value;
	}
	function getToStringValue(value) {
	  switch (typeof value) {
	    case 'boolean':
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return value;

	    case 'object':
	      {
	        checkFormFieldValueStringCoercion(value);
	      }

	      return value;

	    default:
	      // function, symbol are assigned as empty strings
	      return '';
	  }
	}

	var hasReadOnlyValue = {
	  button: true,
	  checkbox: true,
	  image: true,
	  hidden: true,
	  radio: true,
	  reset: true,
	  submit: true
	};
	function checkControlledValueProps(tagName, props) {
	  {
	    if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
	      error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    }

	    if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
	      error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    }
	  }
	}

	function isCheckable(elem) {
	  var type = elem.type;
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
	}

	function getTracker(node) {
	  return node._valueTracker;
	}

	function detachTracker(node) {
	  node._valueTracker = null;
	}

	function getValueFromNode(node) {
	  var value = '';

	  if (!node) {
	    return value;
	  }

	  if (isCheckable(node)) {
	    value = node.checked ? 'true' : 'false';
	  } else {
	    value = node.value;
	  }

	  return value;
	}

	function trackValueOnNode(node) {
	  var valueField = isCheckable(node) ? 'checked' : 'value';
	  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

	  {
	    checkFormFieldValueStringCoercion(node[valueField]);
	  }

	  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
	  // and don't track value will cause over reporting of changes,
	  // but it's better then a hard failure
	  // (needed for certain tests that spyOn input values and Safari)

	  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
	    return;
	  }

	  var get = descriptor.get,
	      set = descriptor.set;
	  Object.defineProperty(node, valueField, {
	    configurable: true,
	    get: function () {
	      return get.call(this);
	    },
	    set: function (value) {
	      {
	        checkFormFieldValueStringCoercion(value);
	      }

	      currentValue = '' + value;
	      set.call(this, value);
	    }
	  }); // We could've passed this the first time
	  // but it triggers a bug in IE11 and Edge 14/15.
	  // Calling defineProperty() again should be equivalent.
	  // https://github.com/facebook/react/issues/11768

	  Object.defineProperty(node, valueField, {
	    enumerable: descriptor.enumerable
	  });
	  var tracker = {
	    getValue: function () {
	      return currentValue;
	    },
	    setValue: function (value) {
	      {
	        checkFormFieldValueStringCoercion(value);
	      }

	      currentValue = '' + value;
	    },
	    stopTracking: function () {
	      detachTracker(node);
	      delete node[valueField];
	    }
	  };
	  return tracker;
	}

	function track(node) {
	  if (getTracker(node)) {
	    return;
	  } // TODO: Once it's just Fiber we can move this to node._wrapperState


	  node._valueTracker = trackValueOnNode(node);
	}
	function updateValueIfChanged(node) {
	  if (!node) {
	    return false;
	  }

	  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
	  // that trying again will succeed

	  if (!tracker) {
	    return true;
	  }

	  var lastValue = tracker.getValue();
	  var nextValue = getValueFromNode(node);

	  if (nextValue !== lastValue) {
	    tracker.setValue(nextValue);
	    return true;
	  }

	  return false;
	}

	function getActiveElement(doc) {
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);

	  if (typeof doc === 'undefined') {
	    return null;
	  }

	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}
	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */


	function getHostProps(element, props) {
	  var node = element;
	  var checked = props.checked;
	  var hostProps = assign({}, props, {
	    defaultChecked: undefined,
	    defaultValue: undefined,
	    value: undefined,
	    checked: checked != null ? checked : node._wrapperState.initialChecked
	  });
	  return hostProps;
	}
	function initWrapperState(element, props) {
	  {
	    checkControlledValueProps('input', props);

	    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

	      didWarnCheckedDefaultChecked = true;
	    }

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

	      didWarnValueDefaultValue = true;
	    }
	  }

	  var node = element;
	  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
	  node._wrapperState = {
	    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
	    controlled: isControlled(props)
	  };
	}
	function updateChecked(element, props) {
	  var node = element;
	  var checked = props.checked;

	  if (checked != null) {
	    setValueForProperty(node, 'checked', checked, false);
	  }
	}
	function updateWrapper(element, props) {
	  var node = element;

	  {
	    var controlled = isControlled(props);

	    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	      error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

	      didWarnUncontrolledToControlled = true;
	    }

	    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	      error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

	      didWarnControlledToUncontrolled = true;
	    }
	  }

	  updateChecked(element, props);
	  var value = getToStringValue(props.value);
	  var type = props.type;

	  if (value != null) {
	    if (type === 'number') {
	      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
	      // eslint-disable-next-line
	      node.value != value) {
	        node.value = toString(value);
	      }
	    } else if (node.value !== toString(value)) {
	      node.value = toString(value);
	    }
	  } else if (type === 'submit' || type === 'reset') {
	    // Submit/reset inputs need the attribute removed completely to avoid
	    // blank-text buttons.
	    node.removeAttribute('value');
	    return;
	  }

	  {
	    // When syncing the value attribute, the value comes from a cascade of
	    // properties:
	    //  1. The value React property
	    //  2. The defaultValue React property
	    //  3. Otherwise there should be no change
	    if (props.hasOwnProperty('value')) {
	      setDefaultValue(node, props.type, value);
	    } else if (props.hasOwnProperty('defaultValue')) {
	      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
	    }
	  }

	  {
	    // When syncing the checked attribute, it only changes when it needs
	    // to be removed, such as transitioning from a checkbox into a text input
	    if (props.checked == null && props.defaultChecked != null) {
	      node.defaultChecked = !!props.defaultChecked;
	    }
	  }
	}
	function postMountWrapper(element, props, isHydrating) {
	  var node = element; // Do not assign value if it is already set. This prevents user text input
	  // from being lost during SSR hydration.

	  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
	    var type = props.type;
	    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
	    // default value provided by the browser. See: #12872

	    if (isButton && (props.value === undefined || props.value === null)) {
	      return;
	    }

	    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
	    // from being lost during SSR hydration.

	    if (!isHydrating) {
	      {
	        // When syncing the value attribute, the value property should use
	        // the wrapperState._initialValue property. This uses:
	        //
	        //   1. The value React property when present
	        //   2. The defaultValue React property when present
	        //   3. An empty string
	        if (initialValue !== node.value) {
	          node.value = initialValue;
	        }
	      }
	    }

	    {
	      // Otherwise, the value attribute is synchronized to the property,
	      // so we assign defaultValue to the same thing as the value property
	      // assignment step above.
	      node.defaultValue = initialValue;
	    }
	  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	  // this is needed to work around a chrome bug where setting defaultChecked
	  // will sometimes influence the value of checked (even after detachment).
	  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	  // We need to temporarily unset name to avoid disrupting radio button groups.


	  var name = node.name;

	  if (name !== '') {
	    node.name = '';
	  }

	  {
	    // When syncing the checked attribute, both the checked property and
	    // attribute are assigned at the same time using defaultChecked. This uses:
	    //
	    //   1. The checked React property when present
	    //   2. The defaultChecked React property when present
	    //   3. Otherwise, false
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !!node._wrapperState.initialChecked;
	  }

	  if (name !== '') {
	    node.name = name;
	  }
	}
	function restoreControlledState(element, props) {
	  var node = element;
	  updateWrapper(node, props);
	  updateNamedCousins(node, props);
	}

	function updateNamedCousins(rootNode, props) {
	  var name = props.name;

	  if (props.type === 'radio' && name != null) {
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    } // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form. It might not even be in the
	    // document. Let's just use the local `querySelectorAll` to ensure we don't
	    // miss anything.


	    {
	      checkAttributeStringCoercion(name, 'name');
	    }

	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];

	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      } // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.


	      var otherProps = getFiberCurrentPropsFromNode(otherNode);

	      if (!otherProps) {
	        throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');
	      } // We need update the tracked value on the named cousin since the value
	      // was changed but the input saw no event or value set


	      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.

	      updateWrapper(otherNode, otherProps);
	    }
	  }
	} // In Chrome, assigning defaultValue to certain input types triggers input validation.
	// For number inputs, the display value loses trailing decimal points. For email inputs,
	// Chrome raises "The specified value <x> is not a valid email address".
	//
	// Here we check to see if the defaultValue has actually changed, avoiding these problems
	// when the user is inputting text
	//
	// https://github.com/facebook/react/issues/7253


	function setDefaultValue(node, type, value) {
	  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
	  type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
	    if (value == null) {
	      node.defaultValue = toString(node._wrapperState.initialValue);
	    } else if (node.defaultValue !== toString(value)) {
	      node.defaultValue = toString(value);
	    }
	  }
	}

	var didWarnSelectedSetOnOption = false;
	var didWarnInvalidChild = false;
	var didWarnInvalidInnerHTML = false;
	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */

	function validateProps(element, props) {
	  {
	    // If a value is not provided, then the children must be simple.
	    if (props.value == null) {
	      if (typeof props.children === 'object' && props.children !== null) {
	        React.Children.forEach(props.children, function (child) {
	          if (child == null) {
	            return;
	          }

	          if (typeof child === 'string' || typeof child === 'number') {
	            return;
	          }

	          if (!didWarnInvalidChild) {
	            didWarnInvalidChild = true;

	            error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');
	          }
	        });
	      } else if (props.dangerouslySetInnerHTML != null) {
	        if (!didWarnInvalidInnerHTML) {
	          didWarnInvalidInnerHTML = true;

	          error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');
	        }
	      }
	    } // TODO: Remove support for `selected` in <option>.


	    if (props.selected != null && !didWarnSelectedSetOnOption) {
	      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

	      didWarnSelectedSetOnOption = true;
	    }
	  }
	}
	function postMountWrapper$1(element, props) {
	  // value="" should make a value attribute (#6219)
	  if (props.value != null) {
	    element.setAttribute('value', toString(getToStringValue(props.value)));
	  }
	}

	var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

	function isArray(a) {
	  return isArrayImpl(a);
	}

	var didWarnValueDefaultValue$1;

	{
	  didWarnValueDefaultValue$1 = false;
	}

	function getDeclarationErrorAddendum() {
	  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	  if (ownerName) {
	    return '\n\nCheck the render method of `' + ownerName + '`.';
	  }

	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];
	/**
	 * Validation function for `value` and `defaultValue`.
	 */

	function checkSelectPropTypes(props) {
	  {
	    checkControlledValueProps('select', props);

	    for (var i = 0; i < valuePropNames.length; i++) {
	      var propName = valuePropNames[i];

	      if (props[propName] == null) {
	        continue;
	      }

	      var propNameIsArray = isArray(props[propName]);

	      if (props.multiple && !propNameIsArray) {
	        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
	      } else if (!props.multiple && propNameIsArray) {
	        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
	      }
	    }
	  }
	}

	function updateOptions(node, multiple, propValue, setDefaultSelected) {
	  var options = node.options;

	  if (multiple) {
	    var selectedValues = propValue;
	    var selectedValue = {};

	    for (var i = 0; i < selectedValues.length; i++) {
	      // Prefix to avoid chaos with special keys.
	      selectedValue['$' + selectedValues[i]] = true;
	    }

	    for (var _i = 0; _i < options.length; _i++) {
	      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

	      if (options[_i].selected !== selected) {
	        options[_i].selected = selected;
	      }

	      if (selected && setDefaultSelected) {
	        options[_i].defaultSelected = true;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    var _selectedValue = toString(getToStringValue(propValue));

	    var defaultSelected = null;

	    for (var _i2 = 0; _i2 < options.length; _i2++) {
	      if (options[_i2].value === _selectedValue) {
	        options[_i2].selected = true;

	        if (setDefaultSelected) {
	          options[_i2].defaultSelected = true;
	        }

	        return;
	      }

	      if (defaultSelected === null && !options[_i2].disabled) {
	        defaultSelected = options[_i2];
	      }
	    }

	    if (defaultSelected !== null) {
	      defaultSelected.selected = true;
	    }
	  }
	}
	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */


	function getHostProps$1(element, props) {
	  return assign({}, props, {
	    value: undefined
	  });
	}
	function initWrapperState$1(element, props) {
	  var node = element;

	  {
	    checkSelectPropTypes(props);
	  }

	  node._wrapperState = {
	    wasMultiple: !!props.multiple
	  };

	  {
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
	      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');

	      didWarnValueDefaultValue$1 = true;
	    }
	  }
	}
	function postMountWrapper$2(element, props) {
	  var node = element;
	  node.multiple = !!props.multiple;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (props.defaultValue != null) {
	    updateOptions(node, !!props.multiple, props.defaultValue, true);
	  }
	}
	function postUpdateWrapper(element, props) {
	  var node = element;
	  var wasMultiple = node._wrapperState.wasMultiple;
	  node._wrapperState.wasMultiple = !!props.multiple;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (wasMultiple !== !!props.multiple) {
	    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	    if (props.defaultValue != null) {
	      updateOptions(node, !!props.multiple, props.defaultValue, true);
	    } else {
	      // Revert the select back to its default unselected state.
	      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
	    }
	  }
	}
	function restoreControlledState$1(element, props) {
	  var node = element;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  }
	}

	var didWarnValDefaultVal = false;

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	function getHostProps$2(element, props) {
	  var node = element;

	  if (props.dangerouslySetInnerHTML != null) {
	    throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');
	  } // Always set children to the same thing. In IE9, the selection range will
	  // get reset if `textContent` is mutated.  We could add a check in setTextContent
	  // to only set the value if/when the value differs from the node value (which would
	  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
	  // solution. The value can be a boolean or object so that's why it's forced
	  // to be a string.


	  var hostProps = assign({}, props, {
	    value: undefined,
	    defaultValue: undefined,
	    children: toString(node._wrapperState.initialValue)
	  });

	  return hostProps;
	}
	function initWrapperState$2(element, props) {
	  var node = element;

	  {
	    checkControlledValueProps('textarea', props);

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

	      didWarnValDefaultVal = true;
	    }
	  }

	  var initialValue = props.value; // Only bother fetching default value if we're going to use it

	  if (initialValue == null) {
	    var children = props.children,
	        defaultValue = props.defaultValue;

	    if (children != null) {
	      {
	        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
	      }

	      {
	        if (defaultValue != null) {
	          throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');
	        }

	        if (isArray(children)) {
	          if (children.length > 1) {
	            throw new Error('<textarea> can only have at most one child.');
	          }

	          children = children[0];
	        }

	        defaultValue = children;
	      }
	    }

	    if (defaultValue == null) {
	      defaultValue = '';
	    }

	    initialValue = defaultValue;
	  }

	  node._wrapperState = {
	    initialValue: getToStringValue(initialValue)
	  };
	}
	function updateWrapper$1(element, props) {
	  var node = element;
	  var value = getToStringValue(props.value);
	  var defaultValue = getToStringValue(props.defaultValue);

	  if (value != null) {
	    // Cast `value` to a string to ensure the value is set correctly. While
	    // browsers typically do this as necessary, jsdom doesn't.
	    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

	    if (newValue !== node.value) {
	      node.value = newValue;
	    }

	    if (props.defaultValue == null && node.defaultValue !== newValue) {
	      node.defaultValue = newValue;
	    }
	  }

	  if (defaultValue != null) {
	    node.defaultValue = toString(defaultValue);
	  }
	}
	function postMountWrapper$3(element, props) {
	  var node = element; // This is in postMount because we need access to the DOM node, which is not
	  // available until after the component has mounted.

	  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
	  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	  // will populate textContent as well.
	  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

	  if (textContent === node._wrapperState.initialValue) {
	    if (textContent !== '' && textContent !== null) {
	      node.value = textContent;
	    }
	  }
	}
	function restoreControlledState$2(element, props) {
	  // DOM component is still mounted; update
	  updateWrapper$1(element, props);
	}

	var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
	var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
	var SVG_NAMESPACE = 'http://www.w3.org/2000/svg'; // Assumes there is no parent namespace.

	function getIntrinsicNamespace(type) {
	  switch (type) {
	    case 'svg':
	      return SVG_NAMESPACE;

	    case 'math':
	      return MATH_NAMESPACE;

	    default:
	      return HTML_NAMESPACE;
	  }
	}
	function getChildNamespace(parentNamespace, type) {
	  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
	    // No (or default) parent namespace: potential entry point.
	    return getIntrinsicNamespace(type);
	  }

	  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
	    // We're leaving SVG.
	    return HTML_NAMESPACE;
	  } // By default, pass namespace below.


	  return parentNamespace;
	}

	/* globals MSApp */

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	var reusableSVGContainer;
	/**
	 * Set the innerHTML property of a node
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */

	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  if (node.namespaceURI === SVG_NAMESPACE) {

	    if (!('innerHTML' in node)) {
	      // IE does not have innerHTML for SVG nodes, so instead we inject the
	      // new markup in a temp node and then move the child nodes across into
	      // the target node
	      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
	      var svgNode = reusableSVGContainer.firstChild;

	      while (node.firstChild) {
	        node.removeChild(node.firstChild);
	      }

	      while (svgNode.firstChild) {
	        node.appendChild(svgNode.firstChild);
	      }

	      return;
	    }
	  }

	  node.innerHTML = html;
	});

	/**
	 * HTML nodeType values that represent the type of the node
	 */
	var ELEMENT_NODE = 1;
	var TEXT_NODE = 3;
	var COMMENT_NODE = 8;
	var DOCUMENT_NODE = 9;
	var DOCUMENT_FRAGMENT_NODE = 11;

	/**
	 * Set the textContent property of a node. For text updates, it's faster
	 * to set the `nodeValue` of the Text node directly instead of using
	 * `.textContent` which will remove the existing node and create a new one.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */

	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }

	  node.textContent = text;
	};

	// List derived from Gecko source code:
	// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
	var shorthandToLonghand = {
	  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
	  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
	  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
	  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
	  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
	  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
	  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
	  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
	  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
	  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
	  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
	  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
	  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
	  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
	  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
	  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
	  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
	  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
	  columns: ['columnCount', 'columnWidth'],
	  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
	  flexFlow: ['flexDirection', 'flexWrap'],
	  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
	  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
	  gap: ['columnGap', 'rowGap'],
	  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
	  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
	  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
	  gridColumnGap: ['columnGap'],
	  gridGap: ['columnGap', 'rowGap'],
	  gridRow: ['gridRowEnd', 'gridRowStart'],
	  gridRowGap: ['rowGap'],
	  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
	  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
	  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
	  marker: ['markerEnd', 'markerMid', 'markerStart'],
	  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
	  maskPosition: ['maskPositionX', 'maskPositionY'],
	  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
	  overflow: ['overflowX', 'overflowY'],
	  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
	  placeContent: ['alignContent', 'justifyContent'],
	  placeItems: ['alignItems', 'justifyItems'],
	  placeSelf: ['alignSelf', 'justifySelf'],
	  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
	  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
	  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
	  wordWrap: ['overflowWrap']
	};

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  aspectRatio: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  columns: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridArea: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */

	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */


	var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.

	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */

	function dangerousStyleValue(name, value, isCustomProperty) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';

	  if (isEmpty) {
	    return '';
	  }

	  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
	    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
	  }

	  {
	    checkCSSPropertyStringCoercion(value, name);
	  }

	  return ('' + value).trim();
	}

	var uppercasePattern = /([A-Z])/g;
	var msPattern = /^ms-/;
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 */

	function hyphenateStyleName(name) {
	  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
	}

	var warnValidStyle = function () {};

	{
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	  var msPattern$1 = /^-ms-/;
	  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	  var warnedForInfinityValue = false;

	  var camelize = function (string) {
	    return string.replace(hyphenPattern, function (_, character) {
	      return character.toUpperCase();
	    });
	  };

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;

	    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
	    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	    // is converted to lowercase `ms`.
	    camelize(name.replace(msPattern$1, 'ms-')));
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;

	    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;

	    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
	  };

	  var warnStyleValueIsNaN = function (name, value) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;

	    error('`NaN` is an invalid value for the `%s` css style property.', name);
	  };

	  var warnStyleValueIsInfinity = function (name, value) {
	    if (warnedForInfinityValue) {
	      return;
	    }

	    warnedForInfinityValue = true;

	    error('`Infinity` is an invalid value for the `%s` css style property.', name);
	  };

	  warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }

	    if (typeof value === 'number') {
	      if (isNaN(value)) {
	        warnStyleValueIsNaN(name, value);
	      } else if (!isFinite(value)) {
	        warnStyleValueIsInfinity(name, value);
	      }
	    }
	  };
	}

	var warnValidStyle$1 = warnValidStyle;

	/**
	 * Operations for dealing with CSS properties.
	 */

	/**
	 * This creates a string that is expected to be equivalent to the style
	 * attribute generated by server-side rendering. It by-passes warnings and
	 * security checks so it's not safe to use this value for anything other than
	 * comparison. It is only used in DEV for SSR validation.
	 */

	function createDangerousStringForStyles(styles) {
	  {
	    var serialized = '';
	    var delimiter = '';

	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }

	      var styleValue = styles[styleName];

	      if (styleValue != null) {
	        var isCustomProperty = styleName.indexOf('--') === 0;
	        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
	        delimiter = ';';
	      }
	    }

	    return serialized || null;
	  }
	}
	/**
	 * Sets the value for multiple styles on a node.  If a value is specified as
	 * '' (empty string), the corresponding style property will be unset.
	 *
	 * @param {DOMElement} node
	 * @param {object} styles
	 */

	function setValueForStyles(node, styles) {
	  var style = node.style;

	  for (var styleName in styles) {
	    if (!styles.hasOwnProperty(styleName)) {
	      continue;
	    }

	    var isCustomProperty = styleName.indexOf('--') === 0;

	    {
	      if (!isCustomProperty) {
	        warnValidStyle$1(styleName, styles[styleName]);
	      }
	    }

	    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

	    if (styleName === 'float') {
	      styleName = 'cssFloat';
	    }

	    if (isCustomProperty) {
	      style.setProperty(styleName, styleValue);
	    } else {
	      style[styleName] = styleValue;
	    }
	  }
	}

	function isValueEmpty(value) {
	  return value == null || typeof value === 'boolean' || value === '';
	}
	/**
	 * Given {color: 'red', overflow: 'hidden'} returns {
	 *   color: 'color',
	 *   overflowX: 'overflow',
	 *   overflowY: 'overflow',
	 * }. This can be read as "the overflowY property was set by the overflow
	 * shorthand". That is, the values are the property that each was derived from.
	 */


	function expandShorthandMap(styles) {
	  var expanded = {};

	  for (var key in styles) {
	    var longhands = shorthandToLonghand[key] || [key];

	    for (var i = 0; i < longhands.length; i++) {
	      expanded[longhands[i]] = key;
	    }
	  }

	  return expanded;
	}
	/**
	 * When mixing shorthand and longhand property names, we warn during updates if
	 * we expect an incorrect result to occur. In particular, we warn for:
	 *
	 * Updating a shorthand property (longhand gets overwritten):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
	 *   becomes .style.font = 'baz'
	 * Removing a shorthand property (longhand gets lost too):
	 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
	 *   becomes .style.font = ''
	 * Removing a longhand property (should revert to shorthand; doesn't):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
	 *   becomes .style.fontVariant = ''
	 */


	function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
	  {
	    if (!nextStyles) {
	      return;
	    }

	    var expandedUpdates = expandShorthandMap(styleUpdates);
	    var expandedStyles = expandShorthandMap(nextStyles);
	    var warnedAbout = {};

	    for (var key in expandedUpdates) {
	      var originalKey = expandedUpdates[key];
	      var correctOriginalKey = expandedStyles[key];

	      if (correctOriginalKey && originalKey !== correctOriginalKey) {
	        var warningKey = originalKey + ',' + correctOriginalKey;

	        if (warnedAbout[warningKey]) {
	          continue;
	        }

	        warnedAbout[warningKey] = true;

	        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
	      }
	    }
	  }
	}

	// For HTML, certain tags should omit their close tag. We keep a list for
	// those special-case tags.
	var omittedCloseTags = {
	  area: true,
	  base: true,
	  br: true,
	  col: true,
	  embed: true,
	  hr: true,
	  img: true,
	  input: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

	};

	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  menuitem: true
	}, omittedCloseTags);

	var HTML = '__html';

	function assertValidProps(tag, props) {
	  if (!props) {
	    return;
	  } // Note the use of `==` which checks for null or undefined.


	  if (voidElementTags[tag]) {
	    if (props.children != null || props.dangerouslySetInnerHTML != null) {
	      throw new Error(tag + " is a void element tag and must neither have `children` nor " + 'use `dangerouslySetInnerHTML`.');
	    }
	  }

	  if (props.dangerouslySetInnerHTML != null) {
	    if (props.children != null) {
	      throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');
	    }

	    if (typeof props.dangerouslySetInnerHTML !== 'object' || !(HTML in props.dangerouslySetInnerHTML)) {
	      throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://reactjs.org/link/dangerously-set-inner-html ' + 'for more information.');
	    }
	  }

	  {
	    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
	      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
	    }
	  }

	  if (props.style != null && typeof props.style !== 'object') {
	    throw new Error('The `style` prop expects a mapping from style properties to values, ' + "not a string. For example, style={{marginRight: spacing + 'em'}} when " + 'using JSX.');
	  }
	}

	function isCustomComponent(tagName, props) {
	  if (tagName.indexOf('-') === -1) {
	    return typeof props.is === 'string';
	  }

	  switch (tagName) {
	    // These are reserved SVG and MathML elements.
	    // We don't mind this list too much because we expect it to never grow.
	    // The alternative is to track the namespace in a few places which is convoluted.
	    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
	    case 'annotation-xml':
	    case 'color-profile':
	    case 'font-face':
	    case 'font-face-src':
	    case 'font-face-uri':
	    case 'font-face-format':
	    case 'font-face-name':
	    case 'missing-glyph':
	      return false;

	    default:
	      return true;
	  }
	}

	// When adding attributes to the HTML or SVG allowed attribute list, be sure to
	// also add them to this module to ensure casing and incorrect name
	// warnings.
	var possibleStandardNames = {
	  // HTML
	  accept: 'accept',
	  acceptcharset: 'acceptCharset',
	  'accept-charset': 'acceptCharset',
	  accesskey: 'accessKey',
	  action: 'action',
	  allowfullscreen: 'allowFullScreen',
	  alt: 'alt',
	  as: 'as',
	  async: 'async',
	  autocapitalize: 'autoCapitalize',
	  autocomplete: 'autoComplete',
	  autocorrect: 'autoCorrect',
	  autofocus: 'autoFocus',
	  autoplay: 'autoPlay',
	  autosave: 'autoSave',
	  capture: 'capture',
	  cellpadding: 'cellPadding',
	  cellspacing: 'cellSpacing',
	  challenge: 'challenge',
	  charset: 'charSet',
	  checked: 'checked',
	  children: 'children',
	  cite: 'cite',
	  class: 'className',
	  classid: 'classID',
	  classname: 'className',
	  cols: 'cols',
	  colspan: 'colSpan',
	  content: 'content',
	  contenteditable: 'contentEditable',
	  contextmenu: 'contextMenu',
	  controls: 'controls',
	  controlslist: 'controlsList',
	  coords: 'coords',
	  crossorigin: 'crossOrigin',
	  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
	  data: 'data',
	  datetime: 'dateTime',
	  default: 'default',
	  defaultchecked: 'defaultChecked',
	  defaultvalue: 'defaultValue',
	  defer: 'defer',
	  dir: 'dir',
	  disabled: 'disabled',
	  disablepictureinpicture: 'disablePictureInPicture',
	  disableremoteplayback: 'disableRemotePlayback',
	  download: 'download',
	  draggable: 'draggable',
	  enctype: 'encType',
	  enterkeyhint: 'enterKeyHint',
	  for: 'htmlFor',
	  form: 'form',
	  formmethod: 'formMethod',
	  formaction: 'formAction',
	  formenctype: 'formEncType',
	  formnovalidate: 'formNoValidate',
	  formtarget: 'formTarget',
	  frameborder: 'frameBorder',
	  headers: 'headers',
	  height: 'height',
	  hidden: 'hidden',
	  high: 'high',
	  href: 'href',
	  hreflang: 'hrefLang',
	  htmlfor: 'htmlFor',
	  httpequiv: 'httpEquiv',
	  'http-equiv': 'httpEquiv',
	  icon: 'icon',
	  id: 'id',
	  imagesizes: 'imageSizes',
	  imagesrcset: 'imageSrcSet',
	  innerhtml: 'innerHTML',
	  inputmode: 'inputMode',
	  integrity: 'integrity',
	  is: 'is',
	  itemid: 'itemID',
	  itemprop: 'itemProp',
	  itemref: 'itemRef',
	  itemscope: 'itemScope',
	  itemtype: 'itemType',
	  keyparams: 'keyParams',
	  keytype: 'keyType',
	  kind: 'kind',
	  label: 'label',
	  lang: 'lang',
	  list: 'list',
	  loop: 'loop',
	  low: 'low',
	  manifest: 'manifest',
	  marginwidth: 'marginWidth',
	  marginheight: 'marginHeight',
	  max: 'max',
	  maxlength: 'maxLength',
	  media: 'media',
	  mediagroup: 'mediaGroup',
	  method: 'method',
	  min: 'min',
	  minlength: 'minLength',
	  multiple: 'multiple',
	  muted: 'muted',
	  name: 'name',
	  nomodule: 'noModule',
	  nonce: 'nonce',
	  novalidate: 'noValidate',
	  open: 'open',
	  optimum: 'optimum',
	  pattern: 'pattern',
	  placeholder: 'placeholder',
	  playsinline: 'playsInline',
	  poster: 'poster',
	  preload: 'preload',
	  profile: 'profile',
	  radiogroup: 'radioGroup',
	  readonly: 'readOnly',
	  referrerpolicy: 'referrerPolicy',
	  rel: 'rel',
	  required: 'required',
	  reversed: 'reversed',
	  role: 'role',
	  rows: 'rows',
	  rowspan: 'rowSpan',
	  sandbox: 'sandbox',
	  scope: 'scope',
	  scoped: 'scoped',
	  scrolling: 'scrolling',
	  seamless: 'seamless',
	  selected: 'selected',
	  shape: 'shape',
	  size: 'size',
	  sizes: 'sizes',
	  span: 'span',
	  spellcheck: 'spellCheck',
	  src: 'src',
	  srcdoc: 'srcDoc',
	  srclang: 'srcLang',
	  srcset: 'srcSet',
	  start: 'start',
	  step: 'step',
	  style: 'style',
	  summary: 'summary',
	  tabindex: 'tabIndex',
	  target: 'target',
	  title: 'title',
	  type: 'type',
	  usemap: 'useMap',
	  value: 'value',
	  width: 'width',
	  wmode: 'wmode',
	  wrap: 'wrap',
	  // SVG
	  about: 'about',
	  accentheight: 'accentHeight',
	  'accent-height': 'accentHeight',
	  accumulate: 'accumulate',
	  additive: 'additive',
	  alignmentbaseline: 'alignmentBaseline',
	  'alignment-baseline': 'alignmentBaseline',
	  allowreorder: 'allowReorder',
	  alphabetic: 'alphabetic',
	  amplitude: 'amplitude',
	  arabicform: 'arabicForm',
	  'arabic-form': 'arabicForm',
	  ascent: 'ascent',
	  attributename: 'attributeName',
	  attributetype: 'attributeType',
	  autoreverse: 'autoReverse',
	  azimuth: 'azimuth',
	  basefrequency: 'baseFrequency',
	  baselineshift: 'baselineShift',
	  'baseline-shift': 'baselineShift',
	  baseprofile: 'baseProfile',
	  bbox: 'bbox',
	  begin: 'begin',
	  bias: 'bias',
	  by: 'by',
	  calcmode: 'calcMode',
	  capheight: 'capHeight',
	  'cap-height': 'capHeight',
	  clip: 'clip',
	  clippath: 'clipPath',
	  'clip-path': 'clipPath',
	  clippathunits: 'clipPathUnits',
	  cliprule: 'clipRule',
	  'clip-rule': 'clipRule',
	  color: 'color',
	  colorinterpolation: 'colorInterpolation',
	  'color-interpolation': 'colorInterpolation',
	  colorinterpolationfilters: 'colorInterpolationFilters',
	  'color-interpolation-filters': 'colorInterpolationFilters',
	  colorprofile: 'colorProfile',
	  'color-profile': 'colorProfile',
	  colorrendering: 'colorRendering',
	  'color-rendering': 'colorRendering',
	  contentscripttype: 'contentScriptType',
	  contentstyletype: 'contentStyleType',
	  cursor: 'cursor',
	  cx: 'cx',
	  cy: 'cy',
	  d: 'd',
	  datatype: 'datatype',
	  decelerate: 'decelerate',
	  descent: 'descent',
	  diffuseconstant: 'diffuseConstant',
	  direction: 'direction',
	  display: 'display',
	  divisor: 'divisor',
	  dominantbaseline: 'dominantBaseline',
	  'dominant-baseline': 'dominantBaseline',
	  dur: 'dur',
	  dx: 'dx',
	  dy: 'dy',
	  edgemode: 'edgeMode',
	  elevation: 'elevation',
	  enablebackground: 'enableBackground',
	  'enable-background': 'enableBackground',
	  end: 'end',
	  exponent: 'exponent',
	  externalresourcesrequired: 'externalResourcesRequired',
	  fill: 'fill',
	  fillopacity: 'fillOpacity',
	  'fill-opacity': 'fillOpacity',
	  fillrule: 'fillRule',
	  'fill-rule': 'fillRule',
	  filter: 'filter',
	  filterres: 'filterRes',
	  filterunits: 'filterUnits',
	  floodopacity: 'floodOpacity',
	  'flood-opacity': 'floodOpacity',
	  floodcolor: 'floodColor',
	  'flood-color': 'floodColor',
	  focusable: 'focusable',
	  fontfamily: 'fontFamily',
	  'font-family': 'fontFamily',
	  fontsize: 'fontSize',
	  'font-size': 'fontSize',
	  fontsizeadjust: 'fontSizeAdjust',
	  'font-size-adjust': 'fontSizeAdjust',
	  fontstretch: 'fontStretch',
	  'font-stretch': 'fontStretch',
	  fontstyle: 'fontStyle',
	  'font-style': 'fontStyle',
	  fontvariant: 'fontVariant',
	  'font-variant': 'fontVariant',
	  fontweight: 'fontWeight',
	  'font-weight': 'fontWeight',
	  format: 'format',
	  from: 'from',
	  fx: 'fx',
	  fy: 'fy',
	  g1: 'g1',
	  g2: 'g2',
	  glyphname: 'glyphName',
	  'glyph-name': 'glyphName',
	  glyphorientationhorizontal: 'glyphOrientationHorizontal',
	  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
	  glyphorientationvertical: 'glyphOrientationVertical',
	  'glyph-orientation-vertical': 'glyphOrientationVertical',
	  glyphref: 'glyphRef',
	  gradienttransform: 'gradientTransform',
	  gradientunits: 'gradientUnits',
	  hanging: 'hanging',
	  horizadvx: 'horizAdvX',
	  'horiz-adv-x': 'horizAdvX',
	  horizoriginx: 'horizOriginX',
	  'horiz-origin-x': 'horizOriginX',
	  ideographic: 'ideographic',
	  imagerendering: 'imageRendering',
	  'image-rendering': 'imageRendering',
	  in2: 'in2',
	  in: 'in',
	  inlist: 'inlist',
	  intercept: 'intercept',
	  k1: 'k1',
	  k2: 'k2',
	  k3: 'k3',
	  k4: 'k4',
	  k: 'k',
	  kernelmatrix: 'kernelMatrix',
	  kernelunitlength: 'kernelUnitLength',
	  kerning: 'kerning',
	  keypoints: 'keyPoints',
	  keysplines: 'keySplines',
	  keytimes: 'keyTimes',
	  lengthadjust: 'lengthAdjust',
	  letterspacing: 'letterSpacing',
	  'letter-spacing': 'letterSpacing',
	  lightingcolor: 'lightingColor',
	  'lighting-color': 'lightingColor',
	  limitingconeangle: 'limitingConeAngle',
	  local: 'local',
	  markerend: 'markerEnd',
	  'marker-end': 'markerEnd',
	  markerheight: 'markerHeight',
	  markermid: 'markerMid',
	  'marker-mid': 'markerMid',
	  markerstart: 'markerStart',
	  'marker-start': 'markerStart',
	  markerunits: 'markerUnits',
	  markerwidth: 'markerWidth',
	  mask: 'mask',
	  maskcontentunits: 'maskContentUnits',
	  maskunits: 'maskUnits',
	  mathematical: 'mathematical',
	  mode: 'mode',
	  numoctaves: 'numOctaves',
	  offset: 'offset',
	  opacity: 'opacity',
	  operator: 'operator',
	  order: 'order',
	  orient: 'orient',
	  orientation: 'orientation',
	  origin: 'origin',
	  overflow: 'overflow',
	  overlineposition: 'overlinePosition',
	  'overline-position': 'overlinePosition',
	  overlinethickness: 'overlineThickness',
	  'overline-thickness': 'overlineThickness',
	  paintorder: 'paintOrder',
	  'paint-order': 'paintOrder',
	  panose1: 'panose1',
	  'panose-1': 'panose1',
	  pathlength: 'pathLength',
	  patterncontentunits: 'patternContentUnits',
	  patterntransform: 'patternTransform',
	  patternunits: 'patternUnits',
	  pointerevents: 'pointerEvents',
	  'pointer-events': 'pointerEvents',
	  points: 'points',
	  pointsatx: 'pointsAtX',
	  pointsaty: 'pointsAtY',
	  pointsatz: 'pointsAtZ',
	  prefix: 'prefix',
	  preservealpha: 'preserveAlpha',
	  preserveaspectratio: 'preserveAspectRatio',
	  primitiveunits: 'primitiveUnits',
	  property: 'property',
	  r: 'r',
	  radius: 'radius',
	  refx: 'refX',
	  refy: 'refY',
	  renderingintent: 'renderingIntent',
	  'rendering-intent': 'renderingIntent',
	  repeatcount: 'repeatCount',
	  repeatdur: 'repeatDur',
	  requiredextensions: 'requiredExtensions',
	  requiredfeatures: 'requiredFeatures',
	  resource: 'resource',
	  restart: 'restart',
	  result: 'result',
	  results: 'results',
	  rotate: 'rotate',
	  rx: 'rx',
	  ry: 'ry',
	  scale: 'scale',
	  security: 'security',
	  seed: 'seed',
	  shaperendering: 'shapeRendering',
	  'shape-rendering': 'shapeRendering',
	  slope: 'slope',
	  spacing: 'spacing',
	  specularconstant: 'specularConstant',
	  specularexponent: 'specularExponent',
	  speed: 'speed',
	  spreadmethod: 'spreadMethod',
	  startoffset: 'startOffset',
	  stddeviation: 'stdDeviation',
	  stemh: 'stemh',
	  stemv: 'stemv',
	  stitchtiles: 'stitchTiles',
	  stopcolor: 'stopColor',
	  'stop-color': 'stopColor',
	  stopopacity: 'stopOpacity',
	  'stop-opacity': 'stopOpacity',
	  strikethroughposition: 'strikethroughPosition',
	  'strikethrough-position': 'strikethroughPosition',
	  strikethroughthickness: 'strikethroughThickness',
	  'strikethrough-thickness': 'strikethroughThickness',
	  string: 'string',
	  stroke: 'stroke',
	  strokedasharray: 'strokeDasharray',
	  'stroke-dasharray': 'strokeDasharray',
	  strokedashoffset: 'strokeDashoffset',
	  'stroke-dashoffset': 'strokeDashoffset',
	  strokelinecap: 'strokeLinecap',
	  'stroke-linecap': 'strokeLinecap',
	  strokelinejoin: 'strokeLinejoin',
	  'stroke-linejoin': 'strokeLinejoin',
	  strokemiterlimit: 'strokeMiterlimit',
	  'stroke-miterlimit': 'strokeMiterlimit',
	  strokewidth: 'strokeWidth',
	  'stroke-width': 'strokeWidth',
	  strokeopacity: 'strokeOpacity',
	  'stroke-opacity': 'strokeOpacity',
	  suppresscontenteditablewarning: 'suppressContentEditableWarning',
	  suppresshydrationwarning: 'suppressHydrationWarning',
	  surfacescale: 'surfaceScale',
	  systemlanguage: 'systemLanguage',
	  tablevalues: 'tableValues',
	  targetx: 'targetX',
	  targety: 'targetY',
	  textanchor: 'textAnchor',
	  'text-anchor': 'textAnchor',
	  textdecoration: 'textDecoration',
	  'text-decoration': 'textDecoration',
	  textlength: 'textLength',
	  textrendering: 'textRendering',
	  'text-rendering': 'textRendering',
	  to: 'to',
	  transform: 'transform',
	  typeof: 'typeof',
	  u1: 'u1',
	  u2: 'u2',
	  underlineposition: 'underlinePosition',
	  'underline-position': 'underlinePosition',
	  underlinethickness: 'underlineThickness',
	  'underline-thickness': 'underlineThickness',
	  unicode: 'unicode',
	  unicodebidi: 'unicodeBidi',
	  'unicode-bidi': 'unicodeBidi',
	  unicoderange: 'unicodeRange',
	  'unicode-range': 'unicodeRange',
	  unitsperem: 'unitsPerEm',
	  'units-per-em': 'unitsPerEm',
	  unselectable: 'unselectable',
	  valphabetic: 'vAlphabetic',
	  'v-alphabetic': 'vAlphabetic',
	  values: 'values',
	  vectoreffect: 'vectorEffect',
	  'vector-effect': 'vectorEffect',
	  version: 'version',
	  vertadvy: 'vertAdvY',
	  'vert-adv-y': 'vertAdvY',
	  vertoriginx: 'vertOriginX',
	  'vert-origin-x': 'vertOriginX',
	  vertoriginy: 'vertOriginY',
	  'vert-origin-y': 'vertOriginY',
	  vhanging: 'vHanging',
	  'v-hanging': 'vHanging',
	  videographic: 'vIdeographic',
	  'v-ideographic': 'vIdeographic',
	  viewbox: 'viewBox',
	  viewtarget: 'viewTarget',
	  visibility: 'visibility',
	  vmathematical: 'vMathematical',
	  'v-mathematical': 'vMathematical',
	  vocab: 'vocab',
	  widths: 'widths',
	  wordspacing: 'wordSpacing',
	  'word-spacing': 'wordSpacing',
	  writingmode: 'writingMode',
	  'writing-mode': 'writingMode',
	  x1: 'x1',
	  x2: 'x2',
	  x: 'x',
	  xchannelselector: 'xChannelSelector',
	  xheight: 'xHeight',
	  'x-height': 'xHeight',
	  xlinkactuate: 'xlinkActuate',
	  'xlink:actuate': 'xlinkActuate',
	  xlinkarcrole: 'xlinkArcrole',
	  'xlink:arcrole': 'xlinkArcrole',
	  xlinkhref: 'xlinkHref',
	  'xlink:href': 'xlinkHref',
	  xlinkrole: 'xlinkRole',
	  'xlink:role': 'xlinkRole',
	  xlinkshow: 'xlinkShow',
	  'xlink:show': 'xlinkShow',
	  xlinktitle: 'xlinkTitle',
	  'xlink:title': 'xlinkTitle',
	  xlinktype: 'xlinkType',
	  'xlink:type': 'xlinkType',
	  xmlbase: 'xmlBase',
	  'xml:base': 'xmlBase',
	  xmllang: 'xmlLang',
	  'xml:lang': 'xmlLang',
	  xmlns: 'xmlns',
	  'xml:space': 'xmlSpace',
	  xmlnsxlink: 'xmlnsXlink',
	  'xmlns:xlink': 'xmlnsXlink',
	  xmlspace: 'xmlSpace',
	  y1: 'y1',
	  y2: 'y2',
	  y: 'y',
	  ychannelselector: 'yChannelSelector',
	  z: 'z',
	  zoomandpan: 'zoomAndPan'
	};

	var ariaProperties = {
	  'aria-current': 0,
	  // state
	  'aria-description': 0,
	  'aria-details': 0,
	  'aria-disabled': 0,
	  // state
	  'aria-hidden': 0,
	  // state
	  'aria-invalid': 0,
	  // state
	  'aria-keyshortcuts': 0,
	  'aria-label': 0,
	  'aria-roledescription': 0,
	  // Widget Attributes
	  'aria-autocomplete': 0,
	  'aria-checked': 0,
	  'aria-expanded': 0,
	  'aria-haspopup': 0,
	  'aria-level': 0,
	  'aria-modal': 0,
	  'aria-multiline': 0,
	  'aria-multiselectable': 0,
	  'aria-orientation': 0,
	  'aria-placeholder': 0,
	  'aria-pressed': 0,
	  'aria-readonly': 0,
	  'aria-required': 0,
	  'aria-selected': 0,
	  'aria-sort': 0,
	  'aria-valuemax': 0,
	  'aria-valuemin': 0,
	  'aria-valuenow': 0,
	  'aria-valuetext': 0,
	  // Live Region Attributes
	  'aria-atomic': 0,
	  'aria-busy': 0,
	  'aria-live': 0,
	  'aria-relevant': 0,
	  // Drag-and-Drop Attributes
	  'aria-dropeffect': 0,
	  'aria-grabbed': 0,
	  // Relationship Attributes
	  'aria-activedescendant': 0,
	  'aria-colcount': 0,
	  'aria-colindex': 0,
	  'aria-colspan': 0,
	  'aria-controls': 0,
	  'aria-describedby': 0,
	  'aria-errormessage': 0,
	  'aria-flowto': 0,
	  'aria-labelledby': 0,
	  'aria-owns': 0,
	  'aria-posinset': 0,
	  'aria-rowcount': 0,
	  'aria-rowindex': 0,
	  'aria-rowspan': 0,
	  'aria-setsize': 0
	};

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	function validateProperty(tagName, name) {
	  {
	    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
	      return true;
	    }

	    if (rARIACamel.test(name)) {
	      var ariaName = 'aria-' + name.slice(4).toLowerCase();
	      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
	      // DOM properties, then it is an invalid aria-* attribute.

	      if (correctName == null) {
	        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

	        warnedProperties[name] = true;
	        return true;
	      } // aria-* attributes should be lowercase; suggest the lowercase version.


	      if (name !== correctName) {
	        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

	        warnedProperties[name] = true;
	        return true;
	      }
	    }

	    if (rARIA.test(name)) {
	      var lowerCasedName = name.toLowerCase();
	      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
	      // DOM properties, then it is an invalid aria-* attribute.

	      if (standardName == null) {
	        warnedProperties[name] = true;
	        return false;
	      } // aria-* attributes should be lowercase; suggest the lowercase version.


	      if (name !== standardName) {
	        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

	        warnedProperties[name] = true;
	        return true;
	      }
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(type, props) {
	  {
	    var invalidProps = [];

	    for (var key in props) {
	      var isValid = validateProperty(type, key);

	      if (!isValid) {
	        invalidProps.push(key);
	      }
	    }

	    var unknownPropString = invalidProps.map(function (prop) {
	      return '`' + prop + '`';
	    }).join(', ');

	    if (invalidProps.length === 1) {
	      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
	    } else if (invalidProps.length > 1) {
	      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
	    }
	  }
	}

	function validateProperties(type, props) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }

	  warnInvalidARIAProps(type, props);
	}

	var didWarnValueNull = false;
	function validateProperties$1(type, props) {
	  {
	    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
	      return;
	    }

	    if (props != null && props.value === null && !didWarnValueNull) {
	      didWarnValueNull = true;

	      if (type === 'select' && props.multiple) {
	        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
	      } else {
	        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
	      }
	    }
	  }
	}

	var validateProperty$1 = function () {};

	{
	  var warnedProperties$1 = {};
	  var EVENT_NAME_REGEX = /^on./;
	  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
	  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	  validateProperty$1 = function (tagName, name, value, eventRegistry) {
	    if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
	      return true;
	    }

	    var lowerCasedName = name.toLowerCase();

	    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
	      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

	      warnedProperties$1[name] = true;
	      return true;
	    } // We can't rely on the event system being injected on the server.


	    if (eventRegistry != null) {
	      var registrationNameDependencies = eventRegistry.registrationNameDependencies,
	          possibleRegistrationNames = eventRegistry.possibleRegistrationNames;

	      if (registrationNameDependencies.hasOwnProperty(name)) {
	        return true;
	      }

	      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

	      if (registrationName != null) {
	        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

	        warnedProperties$1[name] = true;
	        return true;
	      }

	      if (EVENT_NAME_REGEX.test(name)) {
	        error('Unknown event handler property `%s`. It will be ignored.', name);

	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (EVENT_NAME_REGEX.test(name)) {
	      // If no event plugins have been injected, we are in a server environment.
	      // So we can't tell if the event name is correct for sure, but we can filter
	      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
	      if (INVALID_EVENT_NAME_REGEX.test(name)) {
	        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
	      }

	      warnedProperties$1[name] = true;
	      return true;
	    } // Let the ARIA attribute hook validate ARIA attributes


	    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
	      return true;
	    }

	    if (lowerCasedName === 'innerhtml') {
	      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'aria') {
	      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
	      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    var propertyInfo = getPropertyInfo(name);
	    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

	    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      var standardName = possibleStandardNames[lowerCasedName];

	      if (standardName !== name) {
	        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (!isReserved && name !== lowerCasedName) {
	      // Unknown attributes should have lowercase casing since that's how they
	      // will be cased anyway with server rendering.
	      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      if (value) {
	        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
	      } else {
	        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
	      }

	      warnedProperties$1[name] = true;
	      return true;
	    } // Now that we've validated casing, do not validate
	    // data types for reserved props


	    if (isReserved) {
	      return true;
	    } // Warn when a known attribute is a bad type


	    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      warnedProperties$1[name] = true;
	      return false;
	    } // Warn when passing the strings 'false' or 'true' into a boolean prop


	    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
	      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    return true;
	  };
	}

	var warnUnknownProperties = function (type, props, eventRegistry) {
	  {
	    var unknownProps = [];

	    for (var key in props) {
	      var isValid = validateProperty$1(type, key, props[key], eventRegistry);

	      if (!isValid) {
	        unknownProps.push(key);
	      }
	    }

	    var unknownPropString = unknownProps.map(function (prop) {
	      return '`' + prop + '`';
	    }).join(', ');

	    if (unknownProps.length === 1) {
	      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
	    } else if (unknownProps.length > 1) {
	      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
	    }
	  }
	};

	function validateProperties$2(type, props, eventRegistry) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }

	  warnUnknownProperties(type, props, eventRegistry);
	}

	var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
	var IS_NON_DELEGATED = 1 << 1;
	var IS_CAPTURE_PHASE = 1 << 2;
	// set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
	// we call willDeferLaterForLegacyFBSupport, thus not bailing out
	// will result in endless cycles like an infinite loop.
	// We also don't want to defer during event replaying.

	var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;

	// This exists to avoid circular dependency between ReactDOMEventReplaying
	// and DOMPluginEventSystem.
	var currentReplayingEvent = null;
	function setReplayingEvent(event) {
	  {
	    if (currentReplayingEvent !== null) {
	      error('Expected currently replaying event to be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');
	    }
	  }

	  currentReplayingEvent = event;
	}
	function resetReplayingEvent() {
	  {
	    if (currentReplayingEvent === null) {
	      error('Expected currently replaying event to not be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');
	    }
	  }

	  currentReplayingEvent = null;
	}
	function isReplayingEvent(event) {
	  return event === currentReplayingEvent;
	}

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  // Fallback to nativeEvent.srcElement for IE9
	  // https://github.com/facebook/react/issues/12506
	  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html


	  return target.nodeType === TEXT_NODE ? target.parentNode : target;
	}

	var restoreImpl = null;
	var restoreTarget = null;
	var restoreQueue = null;

	function restoreStateOfTarget(target) {
	  // We perform this translation at the end of the event loop so that we
	  // always receive the correct fiber here
	  var internalInstance = getInstanceFromNode(target);

	  if (!internalInstance) {
	    // Unmounted
	    return;
	  }

	  if (typeof restoreImpl !== 'function') {
	    throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');
	  }

	  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

	  if (stateNode) {
	    var _props = getFiberCurrentPropsFromNode(stateNode);

	    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
	  }
	}

	function setRestoreImplementation(impl) {
	  restoreImpl = impl;
	}
	function enqueueStateRestore(target) {
	  if (restoreTarget) {
	    if (restoreQueue) {
	      restoreQueue.push(target);
	    } else {
	      restoreQueue = [target];
	    }
	  } else {
	    restoreTarget = target;
	  }
	}
	function needsStateRestore() {
	  return restoreTarget !== null || restoreQueue !== null;
	}
	function restoreStateIfNeeded() {
	  if (!restoreTarget) {
	    return;
	  }

	  var target = restoreTarget;
	  var queuedTargets = restoreQueue;
	  restoreTarget = null;
	  restoreQueue = null;
	  restoreStateOfTarget(target);

	  if (queuedTargets) {
	    for (var i = 0; i < queuedTargets.length; i++) {
	      restoreStateOfTarget(queuedTargets[i]);
	    }
	  }
	}

	// the renderer. Such as when we're dispatching events or if third party
	// libraries need to call batchedUpdates. Eventually, this API will go away when
	// everything is batched by default. We'll then have a similar API to opt-out of
	// scheduled work and instead do synchronous work.
	// Defaults

	var batchedUpdatesImpl = function (fn, bookkeeping) {
	  return fn(bookkeeping);
	};

	var flushSyncImpl = function () {};

	var isInsideEventHandler = false;

	function finishEventHandler() {
	  // Here we wait until all updates have propagated, which is important
	  // when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  // Then we restore state of any controlled component.
	  var controlledComponentsHavePendingUpdates = needsStateRestore();

	  if (controlledComponentsHavePendingUpdates) {
	    // If a controlled event was fired, we may need to restore the state of
	    // the DOM node back to the controlled value. This is necessary when React
	    // bails out of the update without touching the DOM.
	    // TODO: Restore state in the microtask, after the discrete updates flush,
	    // instead of early flushing them here.
	    flushSyncImpl();
	    restoreStateIfNeeded();
	  }
	}

	function batchedUpdates(fn, a, b) {
	  if (isInsideEventHandler) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state.
	    return fn(a, b);
	  }

	  isInsideEventHandler = true;

	  try {
	    return batchedUpdatesImpl(fn, a, b);
	  } finally {
	    isInsideEventHandler = false;
	    finishEventHandler();
	  }
	} // TODO: Replace with flushSync
	function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
	  batchedUpdatesImpl = _batchedUpdatesImpl;
	  flushSyncImpl = _flushSyncImpl;
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	    case 'onMouseEnter':
	      return !!(props.disabled && isInteractive(type));

	    default:
	      return false;
	  }
	}
	/**
	 * @param {object} inst The instance, which is the source of events.
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @return {?function} The stored callback.
	 */


	function getListener(inst, registrationName) {
	  var stateNode = inst.stateNode;

	  if (stateNode === null) {
	    // Work in progress (ex: onload events in incremental mode).
	    return null;
	  }

	  var props = getFiberCurrentPropsFromNode(stateNode);

	  if (props === null) {
	    // Work in progress.
	    return null;
	  }

	  var listener = props[registrationName];

	  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
	    return null;
	  }

	  if (listener && typeof listener !== 'function') {
	    throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
	  }

	  return listener;
	}

	var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
	// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

	if (canUseDOM) {
	  try {
	    var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

	    Object.defineProperty(options, 'passive', {
	      get: function () {
	        passiveBrowserEventsSupported = true;
	      }
	    });
	    window.addEventListener('test', options, options);
	    window.removeEventListener('test', options, options);
	  } catch (e) {
	    passiveBrowserEventsSupported = false;
	  }
	}

	function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
	  var funcArgs = Array.prototype.slice.call(arguments, 3);

	  try {
	    func.apply(context, funcArgs);
	  } catch (error) {
	    this.onError(error);
	  }
	}

	var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;

	{
	  // In DEV mode, we swap out invokeGuardedCallback for a special version
	  // that plays more nicely with the browser's DevTools. The idea is to preserve
	  // "Pause on exceptions" behavior. Because React wraps all user-provided
	  // functions in invokeGuardedCallback, and the production version of
	  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
	  // like caught exceptions, and the DevTools won't pause unless the developer
	  // takes the extra step of enabling pause on caught exceptions. This is
	  // unintuitive, though, because even though React has caught the error, from
	  // the developer's perspective, the error is uncaught.
	  //
	  // To preserve the expected "Pause on exceptions" behavior, we don't use a
	  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
	  // DOM node, and call the user-provided callback from inside an event handler
	  // for that fake event. If the callback throws, the error is "captured" using
	  // a global event handler. But because the error happens in a different
	  // event loop context, it does not interrupt the normal program flow.
	  // Effectively, this gives us try-catch behavior without actually using
	  // try-catch. Neat!
	  // Check that the browser supports the APIs we need to implement our special
	  // DEV version of invokeGuardedCallback
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');

	    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
	      // If document doesn't exist we know for sure we will crash in this method
	      // when we call document.createEvent(). However this can cause confusing
	      // errors: https://github.com/facebook/create-react-app/issues/3482
	      // So we preemptively throw with a better message instead.
	      if (typeof document === 'undefined' || document === null) {
	        throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');
	      }

	      var evt = document.createEvent('Event');
	      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
	      // set this to true at the beginning, then set it to false right after
	      // calling the function. If the function errors, `didError` will never be
	      // set to false. This strategy works even if the browser is flaky and
	      // fails to call our global error handler, because it doesn't rely on
	      // the error event at all.

	      var didError = true; // Keeps track of the value of window.event so that we can reset it
	      // during the callback to let user code access window.event in the
	      // browsers that support it.

	      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
	      // dispatching: https://github.com/facebook/react/issues/13688

	      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

	      function restoreAfterDispatch() {
	        // We immediately remove the callback from event listeners so that
	        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
	        // nested call would trigger the fake event handlers of any call higher
	        // in the stack.
	        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
	        // window.event assignment in both IE <= 10 as they throw an error
	        // "Member not found" in strict mode, and in Firefox which does not
	        // support window.event.

	        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
	          window.event = windowEvent;
	        }
	      } // Create an event handler for our fake event. We will synchronously
	      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
	      // call the user-provided callback.


	      var funcArgs = Array.prototype.slice.call(arguments, 3);

	      function callCallback() {
	        didCall = true;
	        restoreAfterDispatch();
	        func.apply(context, funcArgs);
	        didError = false;
	      } // Create a global error event handler. We use this to capture the value
	      // that was thrown. It's possible that this error handler will fire more
	      // than once; for example, if non-React code also calls `dispatchEvent`
	      // and a handler for that event throws. We should be resilient to most of
	      // those cases. Even if our error event handler fires more than once, the
	      // last error event is always used. If the callback actually does error,
	      // we know that the last error event is the correct one, because it's not
	      // possible for anything else to have happened in between our callback
	      // erroring and the code that follows the `dispatchEvent` call below. If
	      // the callback doesn't error, but the error event was fired, we know to
	      // ignore it because `didError` will be false, as described above.


	      var error; // Use this to track whether the error event is ever called.

	      var didSetError = false;
	      var isCrossOriginError = false;

	      function handleWindowError(event) {
	        error = event.error;
	        didSetError = true;

	        if (error === null && event.colno === 0 && event.lineno === 0) {
	          isCrossOriginError = true;
	        }

	        if (event.defaultPrevented) {
	          // Some other error handler has prevented default.
	          // Browsers silence the error report if this happens.
	          // We'll remember this to later decide whether to log it or not.
	          if (error != null && typeof error === 'object') {
	            try {
	              error._suppressLogging = true;
	            } catch (inner) {// Ignore.
	            }
	          }
	        }
	      } // Create a fake event type.


	      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

	      window.addEventListener('error', handleWindowError);
	      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
	      // errors, it will trigger our global error handler.

	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);

	      if (windowEventDescriptor) {
	        Object.defineProperty(window, 'event', windowEventDescriptor);
	      }

	      if (didCall && didError) {
	        if (!didSetError) {
	          // The callback errored, but the error event never fired.
	          // eslint-disable-next-line react-internal/prod-error-codes
	          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
	        } else if (isCrossOriginError) {
	          // eslint-disable-next-line react-internal/prod-error-codes
	          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
	        }

	        this.onError(error);
	      } // Remove our event listeners


	      window.removeEventListener('error', handleWindowError);

	      if (!didCall) {
	        // Something went really wrong, and our event was not dispatched.
	        // https://github.com/facebook/react/issues/16734
	        // https://github.com/facebook/react/issues/16585
	        // Fall back to the production implementation.
	        restoreAfterDispatch();
	        return invokeGuardedCallbackProd.apply(this, arguments);
	      }
	    };
	  }
	}

	var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

	var hasError = false;
	var caughtError = null; // Used by event system to capture/rethrow the first error.

	var hasRethrowError = false;
	var rethrowError = null;
	var reporter = {
	  onError: function (error) {
	    hasError = true;
	    caughtError = error;
	  }
	};
	/**
	 * Call a function while guarding against errors that happens within it.
	 * Returns an error if it throws, otherwise null.
	 *
	 * In production, this is implemented using a try-catch. The reason we don't
	 * use a try-catch directly is so that we can swap out a different
	 * implementation in DEV mode.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
	  hasError = false;
	  caughtError = null;
	  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
	}
	/**
	 * Same as invokeGuardedCallback, but instead of returning an error, it stores
	 * it in a global so it can be rethrown by `rethrowCaughtError` later.
	 * TODO: See if caughtError and rethrowError can be unified.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
	  invokeGuardedCallback.apply(this, arguments);

	  if (hasError) {
	    var error = clearCaughtError();

	    if (!hasRethrowError) {
	      hasRethrowError = true;
	      rethrowError = error;
	    }
	  }
	}
	/**
	 * During execution of guarded functions we will capture the first error which
	 * we will rethrow to be handled by the top level error handler.
	 */

	function rethrowCaughtError() {
	  if (hasRethrowError) {
	    var error = rethrowError;
	    hasRethrowError = false;
	    rethrowError = null;
	    throw error;
	  }
	}
	function hasCaughtError() {
	  return hasError;
	}
	function clearCaughtError() {
	  if (hasError) {
	    var error = caughtError;
	    hasError = false;
	    caughtError = null;
	    return error;
	  } else {
	    throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');
	  }
	}

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 *
	 * Note that this module is currently shared and assumed to be stateless.
	 * If this becomes an actual Map, that will break.
	 */
	function get(key) {
	  return key._reactInternals;
	}
	function has(key) {
	  return key._reactInternals !== undefined;
	}
	function set(key, value) {
	  key._reactInternals = value;
	}

	// Don't change these two values. They're used by React Dev Tools.
	var NoFlags =
	/*                      */
	0;
	var PerformedWork =
	/*                */
	1; // You can change the rest (and add more).

	var Placement =
	/*                    */
	2;
	var Update =
	/*                       */
	4;
	var ChildDeletion =
	/*                */
	16;
	var ContentReset =
	/*                 */
	32;
	var Callback =
	/*                     */
	64;
	var DidCapture =
	/*                   */
	128;
	var ForceClientRender =
	/*            */
	256;
	var Ref =
	/*                          */
	512;
	var Snapshot =
	/*                     */
	1024;
	var Passive =
	/*                      */
	2048;
	var Hydrating =
	/*                    */
	4096;
	var Visibility =
	/*                   */
	8192;
	var StoreConsistency =
	/*             */
	16384;
	var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)

	var HostEffectMask =
	/*               */
	32767; // These are not really side effects, but we still reuse this field.

	var Incomplete =
	/*                   */
	32768;
	var ShouldCapture =
	/*                */
	65536;
	var ForceUpdateForLegacySuspense =
	/* */
	131072;
	var Forked =
	/*                       */
	1048576; // Static tags describe aspects of a fiber that are not specific to a render,
	// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
	// This enables us to defer more work in the unmount case,
	// since we can defer traversing the tree during layout to look for Passive effects,
	// and instead rely on the static flag as a signal that there may be cleanup work.

	var RefStatic =
	/*                    */
	2097152;
	var LayoutStatic =
	/*                 */
	4194304;
	var PassiveStatic =
	/*                */
	8388608; // These flags allow us to traverse to fibers that have effects on mount
	// without traversing the entire tree after every commit for
	// double invoking

	var MountLayoutDev =
	/*               */
	16777216;
	var MountPassiveDev =
	/*              */
	33554432; // Groups of flags that are used in the commit phase to skip over trees that
	// don't contain effects, by checking subtreeFlags.

	var BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility
	// flag logic (see #20043)
	Update | Snapshot | ( 0);
	var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
	var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask

	var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.
	// This allows certain concepts to persist without recalculating them,
	// e.g. whether a subtree contains passive effects or portals.

	var StaticMask = LayoutStatic | PassiveStatic | RefStatic;

	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
	function getNearestMountedFiber(fiber) {
	  var node = fiber;
	  var nearestMounted = fiber;

	  if (!fiber.alternate) {
	    // If there is no alternate, this might be a new tree that isn't inserted
	    // yet. If it is, then it will have a pending insertion effect on it.
	    var nextNode = node;

	    do {
	      node = nextNode;

	      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
	        // This is an insertion or in-progress hydration. The nearest possible
	        // mounted fiber is the parent but we need to continue to figure out
	        // if that one is still mounted.
	        nearestMounted = node.return;
	      }

	      nextNode = node.return;
	    } while (nextNode);
	  } else {
	    while (node.return) {
	      node = node.return;
	    }
	  }

	  if (node.tag === HostRoot) {
	    // TODO: Check if this was a nested HostRoot when used with
	    // renderContainerIntoSubtree.
	    return nearestMounted;
	  } // If we didn't hit the root, that means that we're in an disconnected tree
	  // that has been unmounted.


	  return null;
	}
	function getSuspenseInstanceFromFiber(fiber) {
	  if (fiber.tag === SuspenseComponent) {
	    var suspenseState = fiber.memoizedState;

	    if (suspenseState === null) {
	      var current = fiber.alternate;

	      if (current !== null) {
	        suspenseState = current.memoizedState;
	      }
	    }

	    if (suspenseState !== null) {
	      return suspenseState.dehydrated;
	    }
	  }

	  return null;
	}
	function getContainerFromFiber(fiber) {
	  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
	}
	function isFiberMounted(fiber) {
	  return getNearestMountedFiber(fiber) === fiber;
	}
	function isMounted(component) {
	  {
	    var owner = ReactCurrentOwner.current;

	    if (owner !== null && owner.tag === ClassComponent) {
	      var ownerFiber = owner;
	      var instance = ownerFiber.stateNode;

	      if (!instance._warnedAboutRefsInRender) {
	        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');
	      }

	      instance._warnedAboutRefsInRender = true;
	    }
	  }

	  var fiber = get(component);

	  if (!fiber) {
	    return false;
	  }

	  return getNearestMountedFiber(fiber) === fiber;
	}

	function assertIsMounted(fiber) {
	  if (getNearestMountedFiber(fiber) !== fiber) {
	    throw new Error('Unable to find node on an unmounted component.');
	  }
	}

	function findCurrentFiberUsingSlowPath(fiber) {
	  var alternate = fiber.alternate;

	  if (!alternate) {
	    // If there is no alternate, then we only need to check if it is mounted.
	    var nearestMounted = getNearestMountedFiber(fiber);

	    if (nearestMounted === null) {
	      throw new Error('Unable to find node on an unmounted component.');
	    }

	    if (nearestMounted !== fiber) {
	      return null;
	    }

	    return fiber;
	  } // If we have two possible branches, we'll walk backwards up to the root
	  // to see what path the root points to. On the way we may hit one of the
	  // special cases and we'll deal with them.


	  var a = fiber;
	  var b = alternate;

	  while (true) {
	    var parentA = a.return;

	    if (parentA === null) {
	      // We're at the root.
	      break;
	    }

	    var parentB = parentA.alternate;

	    if (parentB === null) {
	      // There is no alternate. This is an unusual case. Currently, it only
	      // happens when a Suspense component is hidden. An extra fragment fiber
	      // is inserted in between the Suspense fiber and its children. Skip
	      // over this extra fragment fiber and proceed to the next parent.
	      var nextParent = parentA.return;

	      if (nextParent !== null) {
	        a = b = nextParent;
	        continue;
	      } // If there's no parent, we're at the root.


	      break;
	    } // If both copies of the parent fiber point to the same child, we can
	    // assume that the child is current. This happens when we bailout on low
	    // priority: the bailed out fiber's child reuses the current child.


	    if (parentA.child === parentB.child) {
	      var child = parentA.child;

	      while (child) {
	        if (child === a) {
	          // We've determined that A is the current branch.
	          assertIsMounted(parentA);
	          return fiber;
	        }

	        if (child === b) {
	          // We've determined that B is the current branch.
	          assertIsMounted(parentA);
	          return alternate;
	        }

	        child = child.sibling;
	      } // We should never have an alternate for any mounting node. So the only
	      // way this could possibly happen is if this was unmounted, if at all.


	      throw new Error('Unable to find node on an unmounted component.');
	    }

	    if (a.return !== b.return) {
	      // The return pointer of A and the return pointer of B point to different
	      // fibers. We assume that return pointers never criss-cross, so A must
	      // belong to the child set of A.return, and B must belong to the child
	      // set of B.return.
	      a = parentA;
	      b = parentB;
	    } else {
	      // The return pointers point to the same fiber. We'll have to use the
	      // default, slow path: scan the child sets of each parent alternate to see
	      // which child belongs to which set.
	      //
	      // Search parent A's child set
	      var didFindChild = false;
	      var _child = parentA.child;

	      while (_child) {
	        if (_child === a) {
	          didFindChild = true;
	          a = parentA;
	          b = parentB;
	          break;
	        }

	        if (_child === b) {
	          didFindChild = true;
	          b = parentA;
	          a = parentB;
	          break;
	        }

	        _child = _child.sibling;
	      }

	      if (!didFindChild) {
	        // Search parent B's child set
	        _child = parentB.child;

	        while (_child) {
	          if (_child === a) {
	            didFindChild = true;
	            a = parentB;
	            b = parentA;
	            break;
	          }

	          if (_child === b) {
	            didFindChild = true;
	            b = parentB;
	            a = parentA;
	            break;
	          }

	          _child = _child.sibling;
	        }

	        if (!didFindChild) {
	          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');
	        }
	      }
	    }

	    if (a.alternate !== b) {
	      throw new Error("Return fibers should always be each others' alternates. " + 'This error is likely caused by a bug in React. Please file an issue.');
	    }
	  } // If the root is not a host container, we're in a disconnected tree. I.e.
	  // unmounted.


	  if (a.tag !== HostRoot) {
	    throw new Error('Unable to find node on an unmounted component.');
	  }

	  if (a.stateNode.current === a) {
	    // We've determined that A is the current branch.
	    return fiber;
	  } // Otherwise B has to be current branch.


	  return alternate;
	}
	function findCurrentHostFiber(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);
	  return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
	}

	function findCurrentHostFiberImpl(node) {
	  // Next we'll drill down this component to find the first HostComponent/Text.
	  if (node.tag === HostComponent || node.tag === HostText) {
	    return node;
	  }

	  var child = node.child;

	  while (child !== null) {
	    var match = findCurrentHostFiberImpl(child);

	    if (match !== null) {
	      return match;
	    }

	    child = child.sibling;
	  }

	  return null;
	}

	function findCurrentHostFiberWithNoPortals(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);
	  return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
	}

	function findCurrentHostFiberWithNoPortalsImpl(node) {
	  // Next we'll drill down this component to find the first HostComponent/Text.
	  if (node.tag === HostComponent || node.tag === HostText) {
	    return node;
	  }

	  var child = node.child;

	  while (child !== null) {
	    if (child.tag !== HostPortal) {
	      var match = findCurrentHostFiberWithNoPortalsImpl(child);

	      if (match !== null) {
	        return match;
	      }
	    }

	    child = child.sibling;
	  }

	  return null;
	}

	// This module only exists as an ESM wrapper around the external CommonJS
	var scheduleCallback = Scheduler.unstable_scheduleCallback;
	var cancelCallback = Scheduler.unstable_cancelCallback;
	var shouldYield = Scheduler.unstable_shouldYield;
	var requestPaint = Scheduler.unstable_requestPaint;
	var now = Scheduler.unstable_now;
	var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
	var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
	var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
	var NormalPriority = Scheduler.unstable_NormalPriority;
	var LowPriority = Scheduler.unstable_LowPriority;
	var IdlePriority = Scheduler.unstable_IdlePriority;
	// this doesn't actually exist on the scheduler, but it *does*
	// on scheduler/unstable_mock, which we'll need for internal testing
	var unstable_yieldValue = Scheduler.unstable_yieldValue;
	var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;

	var rendererID = null;
	var injectedHook = null;
	var injectedProfilingHooks = null;
	var hasLoggedError = false;
	var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
	function injectInternals(internals) {
	  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	    // No DevTools
	    return false;
	  }

	  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

	  if (hook.isDisabled) {
	    // This isn't a real property on the hook, but it can be set to opt out
	    // of DevTools integration and associated warnings and logs.
	    // https://github.com/facebook/react/issues/3877
	    return true;
	  }

	  if (!hook.supportsFiber) {
	    {
	      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
	    } // DevTools exists, even though it doesn't support Fiber.


	    return true;
	  }

	  try {
	    if (enableSchedulingProfiler) {
	      // Conditionally inject these hooks only if Timeline profiler is supported by this build.
	      // This gives DevTools a way to feature detect that isn't tied to version number
	      // (since profiling and timeline are controlled by different feature flags).
	      internals = assign({}, internals, {
	        getLaneLabelMap: getLaneLabelMap,
	        injectProfilingHooks: injectProfilingHooks
	      });
	    }

	    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

	    injectedHook = hook;
	  } catch (err) {
	    // Catch all errors because it is unsafe to throw during initialization.
	    {
	      error('React instrumentation encountered an error: %s.', err);
	    }
	  }

	  if (hook.checkDCE) {
	    // This is the real DevTools.
	    return true;
	  } else {
	    // This is likely a hook installed by Fast Refresh runtime.
	    return false;
	  }
	}
	function onScheduleRoot(root, children) {
	  {
	    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
	      try {
	        injectedHook.onScheduleFiberRoot(rendererID, root, children);
	      } catch (err) {
	        if ( !hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function onCommitRoot(root, eventPriority) {
	  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
	    try {
	      var didError = (root.current.flags & DidCapture) === DidCapture;

	      if (enableProfilerTimer) {
	        var schedulerPriority;

	        switch (eventPriority) {
	          case DiscreteEventPriority:
	            schedulerPriority = ImmediatePriority;
	            break;

	          case ContinuousEventPriority:
	            schedulerPriority = UserBlockingPriority;
	            break;

	          case DefaultEventPriority:
	            schedulerPriority = NormalPriority;
	            break;

	          case IdleEventPriority:
	            schedulerPriority = IdlePriority;
	            break;

	          default:
	            schedulerPriority = NormalPriority;
	            break;
	        }

	        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
	      }
	    } catch (err) {
	      {
	        if (!hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function onPostCommitRoot(root) {
	  if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {
	    try {
	      injectedHook.onPostCommitFiberRoot(rendererID, root);
	    } catch (err) {
	      {
	        if (!hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function onCommitUnmount(fiber) {
	  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
	    try {
	      injectedHook.onCommitFiberUnmount(rendererID, fiber);
	    } catch (err) {
	      {
	        if (!hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function setIsStrictModeForDevtools(newIsStrictMode) {
	  {
	    if (typeof unstable_yieldValue === 'function') {
	      // We're in a test because Scheduler.unstable_yieldValue only exists
	      // in SchedulerMock. To reduce the noise in strict mode tests,
	      // suppress warnings and disable scheduler yielding during the double render
	      unstable_setDisableYieldValue(newIsStrictMode);
	      setSuppressWarning(newIsStrictMode);
	    }

	    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {
	      try {
	        injectedHook.setStrictMode(rendererID, newIsStrictMode);
	      } catch (err) {
	        {
	          if (!hasLoggedError) {
	            hasLoggedError = true;

	            error('React instrumentation encountered an error: %s', err);
	          }
	        }
	      }
	    }
	  }
	} // Profiler API hooks

	function injectProfilingHooks(profilingHooks) {
	  injectedProfilingHooks = profilingHooks;
	}

	function getLaneLabelMap() {
	  {
	    var map = new Map();
	    var lane = 1;

	    for (var index = 0; index < TotalLanes; index++) {
	      var label = getLabelForLane(lane);
	      map.set(lane, label);
	      lane *= 2;
	    }

	    return map;
	  }
	}

	function markCommitStarted(lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {
	      injectedProfilingHooks.markCommitStarted(lanes);
	    }
	  }
	}
	function markCommitStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {
	      injectedProfilingHooks.markCommitStopped();
	    }
	  }
	}
	function markComponentRenderStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {
	      injectedProfilingHooks.markComponentRenderStarted(fiber);
	    }
	  }
	}
	function markComponentRenderStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {
	      injectedProfilingHooks.markComponentRenderStopped();
	    }
	  }
	}
	function markComponentPassiveEffectMountStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {
	      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
	    }
	  }
	}
	function markComponentPassiveEffectMountStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {
	      injectedProfilingHooks.markComponentPassiveEffectMountStopped();
	    }
	  }
	}
	function markComponentPassiveEffectUnmountStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {
	      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
	    }
	  }
	}
	function markComponentPassiveEffectUnmountStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {
	      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
	    }
	  }
	}
	function markComponentLayoutEffectMountStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {
	      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
	    }
	  }
	}
	function markComponentLayoutEffectMountStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {
	      injectedProfilingHooks.markComponentLayoutEffectMountStopped();
	    }
	  }
	}
	function markComponentLayoutEffectUnmountStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {
	      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
	    }
	  }
	}
	function markComponentLayoutEffectUnmountStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {
	      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
	    }
	  }
	}
	function markComponentErrored(fiber, thrownValue, lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {
	      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
	    }
	  }
	}
	function markComponentSuspended(fiber, wakeable, lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {
	      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
	    }
	  }
	}
	function markLayoutEffectsStarted(lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {
	      injectedProfilingHooks.markLayoutEffectsStarted(lanes);
	    }
	  }
	}
	function markLayoutEffectsStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {
	      injectedProfilingHooks.markLayoutEffectsStopped();
	    }
	  }
	}
	function markPassiveEffectsStarted(lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {
	      injectedProfilingHooks.markPassiveEffectsStarted(lanes);
	    }
	  }
	}
	function markPassiveEffectsStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {
	      injectedProfilingHooks.markPassiveEffectsStopped();
	    }
	  }
	}
	function markRenderStarted(lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {
	      injectedProfilingHooks.markRenderStarted(lanes);
	    }
	  }
	}
	function markRenderYielded() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {
	      injectedProfilingHooks.markRenderYielded();
	    }
	  }
	}
	function markRenderStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {
	      injectedProfilingHooks.markRenderStopped();
	    }
	  }
	}
	function markRenderScheduled(lane) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {
	      injectedProfilingHooks.markRenderScheduled(lane);
	    }
	  }
	}
	function markForceUpdateScheduled(fiber, lane) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {
	      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
	    }
	  }
	}
	function markStateUpdateScheduled(fiber, lane) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {
	      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
	    }
	  }
	}

	var NoMode =
	/*                         */
	0; // TODO: Remove ConcurrentMode by reading from the root tag instead

	var ConcurrentMode =
	/*                 */
	1;
	var ProfileMode =
	/*                    */
	2;
	var StrictLegacyMode =
	/*               */
	8;
	var StrictEffectsMode =
	/*              */
	16;

	// TODO: This is pretty well supported by browsers. Maybe we can drop it.
	var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.
	// Based on:
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

	var log = Math.log;
	var LN2 = Math.LN2;

	function clz32Fallback(x) {
	  var asUint = x >>> 0;

	  if (asUint === 0) {
	    return 32;
	  }

	  return 31 - (log(asUint) / LN2 | 0) | 0;
	}

	// If those values are changed that package should be rebuilt and redeployed.

	var TotalLanes = 31;
	var NoLanes =
	/*                        */
	0;
	var NoLane =
	/*                          */
	0;
	var SyncLane =
	/*                        */
	1;
	var InputContinuousHydrationLane =
	/*    */
	2;
	var InputContinuousLane =
	/*             */
	4;
	var DefaultHydrationLane =
	/*            */
	8;
	var DefaultLane =
	/*                     */
	16;
	var TransitionHydrationLane =
	/*                */
	32;
	var TransitionLanes =
	/*                       */
	4194240;
	var TransitionLane1 =
	/*                        */
	64;
	var TransitionLane2 =
	/*                        */
	128;
	var TransitionLane3 =
	/*                        */
	256;
	var TransitionLane4 =
	/*                        */
	512;
	var TransitionLane5 =
	/*                        */
	1024;
	var TransitionLane6 =
	/*                        */
	2048;
	var TransitionLane7 =
	/*                        */
	4096;
	var TransitionLane8 =
	/*                        */
	8192;
	var TransitionLane9 =
	/*                        */
	16384;
	var TransitionLane10 =
	/*                       */
	32768;
	var TransitionLane11 =
	/*                       */
	65536;
	var TransitionLane12 =
	/*                       */
	131072;
	var TransitionLane13 =
	/*                       */
	262144;
	var TransitionLane14 =
	/*                       */
	524288;
	var TransitionLane15 =
	/*                       */
	1048576;
	var TransitionLane16 =
	/*                       */
	2097152;
	var RetryLanes =
	/*                            */
	130023424;
	var RetryLane1 =
	/*                             */
	4194304;
	var RetryLane2 =
	/*                             */
	8388608;
	var RetryLane3 =
	/*                             */
	16777216;
	var RetryLane4 =
	/*                             */
	33554432;
	var RetryLane5 =
	/*                             */
	67108864;
	var SomeRetryLane = RetryLane1;
	var SelectiveHydrationLane =
	/*          */
	134217728;
	var NonIdleLanes =
	/*                          */
	268435455;
	var IdleHydrationLane =
	/*               */
	268435456;
	var IdleLane =
	/*                        */
	536870912;
	var OffscreenLane =
	/*                   */
	1073741824; // This function is used for the experimental timeline (react-devtools-timeline)
	// It should be kept in sync with the Lanes values above.

	function getLabelForLane(lane) {
	  {
	    if (lane & SyncLane) {
	      return 'Sync';
	    }

	    if (lane & InputContinuousHydrationLane) {
	      return 'InputContinuousHydration';
	    }

	    if (lane & InputContinuousLane) {
	      return 'InputContinuous';
	    }

	    if (lane & DefaultHydrationLane) {
	      return 'DefaultHydration';
	    }

	    if (lane & DefaultLane) {
	      return 'Default';
	    }

	    if (lane & TransitionHydrationLane) {
	      return 'TransitionHydration';
	    }

	    if (lane & TransitionLanes) {
	      return 'Transition';
	    }

	    if (lane & RetryLanes) {
	      return 'Retry';
	    }

	    if (lane & SelectiveHydrationLane) {
	      return 'SelectiveHydration';
	    }

	    if (lane & IdleHydrationLane) {
	      return 'IdleHydration';
	    }

	    if (lane & IdleLane) {
	      return 'Idle';
	    }

	    if (lane & OffscreenLane) {
	      return 'Offscreen';
	    }
	  }
	}
	var NoTimestamp = -1;
	var nextTransitionLane = TransitionLane1;
	var nextRetryLane = RetryLane1;

	function getHighestPriorityLanes(lanes) {
	  switch (getHighestPriorityLane(lanes)) {
	    case SyncLane:
	      return SyncLane;

	    case InputContinuousHydrationLane:
	      return InputContinuousHydrationLane;

	    case InputContinuousLane:
	      return InputContinuousLane;

	    case DefaultHydrationLane:
	      return DefaultHydrationLane;

	    case DefaultLane:
	      return DefaultLane;

	    case TransitionHydrationLane:
	      return TransitionHydrationLane;

	    case TransitionLane1:
	    case TransitionLane2:
	    case TransitionLane3:
	    case TransitionLane4:
	    case TransitionLane5:
	    case TransitionLane6:
	    case TransitionLane7:
	    case TransitionLane8:
	    case TransitionLane9:
	    case TransitionLane10:
	    case TransitionLane11:
	    case TransitionLane12:
	    case TransitionLane13:
	    case TransitionLane14:
	    case TransitionLane15:
	    case TransitionLane16:
	      return lanes & TransitionLanes;

	    case RetryLane1:
	    case RetryLane2:
	    case RetryLane3:
	    case RetryLane4:
	    case RetryLane5:
	      return lanes & RetryLanes;

	    case SelectiveHydrationLane:
	      return SelectiveHydrationLane;

	    case IdleHydrationLane:
	      return IdleHydrationLane;

	    case IdleLane:
	      return IdleLane;

	    case OffscreenLane:
	      return OffscreenLane;

	    default:
	      {
	        error('Should have found matching lanes. This is a bug in React.');
	      } // This shouldn't be reachable, but as a fallback, return the entire bitmask.


	      return lanes;
	  }
	}

	function getNextLanes(root, wipLanes) {
	  // Early bailout if there's no pending work left.
	  var pendingLanes = root.pendingLanes;

	  if (pendingLanes === NoLanes) {
	    return NoLanes;
	  }

	  var nextLanes = NoLanes;
	  var suspendedLanes = root.suspendedLanes;
	  var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,
	  // even if the work is suspended.

	  var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

	  if (nonIdlePendingLanes !== NoLanes) {
	    var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

	    if (nonIdleUnblockedLanes !== NoLanes) {
	      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
	    } else {
	      var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

	      if (nonIdlePingedLanes !== NoLanes) {
	        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
	      }
	    }
	  } else {
	    // The only remaining work is Idle.
	    var unblockedLanes = pendingLanes & ~suspendedLanes;

	    if (unblockedLanes !== NoLanes) {
	      nextLanes = getHighestPriorityLanes(unblockedLanes);
	    } else {
	      if (pingedLanes !== NoLanes) {
	        nextLanes = getHighestPriorityLanes(pingedLanes);
	      }
	    }
	  }

	  if (nextLanes === NoLanes) {
	    // This should only be reachable if we're suspended
	    // TODO: Consider warning in this path if a fallback timer is not scheduled.
	    return NoLanes;
	  } // If we're already in the middle of a render, switching lanes will interrupt
	  // it and we'll lose our progress. We should only do this if the new lanes are
	  // higher priority.


	  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
	  // bother waiting until the root is complete.
	  (wipLanes & suspendedLanes) === NoLanes) {
	    var nextLane = getHighestPriorityLane(nextLanes);
	    var wipLane = getHighestPriorityLane(wipLanes);

	    if ( // Tests whether the next lane is equal or lower priority than the wip
	    // one. This works because the bits decrease in priority as you go left.
	    nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
	    // only difference between default updates and transition updates is that
	    // default updates do not support refresh transitions.
	    nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
	      // Keep working on the existing in-progress tree. Do not interrupt.
	      return wipLanes;
	    }
	  }

	  if ((nextLanes & InputContinuousLane) !== NoLanes) {
	    // When updates are sync by default, we entangle continuous priority updates
	    // and default updates, so they render in the same batch. The only reason
	    // they use separate lanes is because continuous updates should interrupt
	    // transitions, but default updates should not.
	    nextLanes |= pendingLanes & DefaultLane;
	  } // Check for entangled lanes and add them to the batch.
	  //
	  // A lane is said to be entangled with another when it's not allowed to render
	  // in a batch that does not also include the other lane. Typically we do this
	  // when multiple updates have the same source, and we only want to respond to
	  // the most recent event from that source.
	  //
	  // Note that we apply entanglements *after* checking for partial work above.
	  // This means that if a lane is entangled during an interleaved event while
	  // it's already rendering, we won't interrupt it. This is intentional, since
	  // entanglement is usually "best effort": we'll try our best to render the
	  // lanes in the same batch, but it's not worth throwing out partially
	  // completed work in order to do it.
	  // TODO: Reconsider this. The counter-argument is that the partial work
	  // represents an intermediate state, which we don't want to show to the user.
	  // And by spending extra time finishing it, we're increasing the amount of
	  // time it takes to show the final state, which is what they are actually
	  // waiting for.
	  //
	  // For those exceptions where entanglement is semantically important, like
	  // useMutableSource, we should ensure that there is no partial work at the
	  // time we apply the entanglement.


	  var entangledLanes = root.entangledLanes;

	  if (entangledLanes !== NoLanes) {
	    var entanglements = root.entanglements;
	    var lanes = nextLanes & entangledLanes;

	    while (lanes > 0) {
	      var index = pickArbitraryLaneIndex(lanes);
	      var lane = 1 << index;
	      nextLanes |= entanglements[index];
	      lanes &= ~lane;
	    }
	  }

	  return nextLanes;
	}
	function getMostRecentEventTime(root, lanes) {
	  var eventTimes = root.eventTimes;
	  var mostRecentEventTime = NoTimestamp;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    var eventTime = eventTimes[index];

	    if (eventTime > mostRecentEventTime) {
	      mostRecentEventTime = eventTime;
	    }

	    lanes &= ~lane;
	  }

	  return mostRecentEventTime;
	}

	function computeExpirationTime(lane, currentTime) {
	  switch (lane) {
	    case SyncLane:
	    case InputContinuousHydrationLane:
	    case InputContinuousLane:
	      // User interactions should expire slightly more quickly.
	      //
	      // NOTE: This is set to the corresponding constant as in Scheduler.js.
	      // When we made it larger, a product metric in www regressed, suggesting
	      // there's a user interaction that's being starved by a series of
	      // synchronous updates. If that theory is correct, the proper solution is
	      // to fix the starvation. However, this scenario supports the idea that
	      // expiration times are an important safeguard when starvation
	      // does happen.
	      return currentTime + 250;

	    case DefaultHydrationLane:
	    case DefaultLane:
	    case TransitionHydrationLane:
	    case TransitionLane1:
	    case TransitionLane2:
	    case TransitionLane3:
	    case TransitionLane4:
	    case TransitionLane5:
	    case TransitionLane6:
	    case TransitionLane7:
	    case TransitionLane8:
	    case TransitionLane9:
	    case TransitionLane10:
	    case TransitionLane11:
	    case TransitionLane12:
	    case TransitionLane13:
	    case TransitionLane14:
	    case TransitionLane15:
	    case TransitionLane16:
	      return currentTime + 5000;

	    case RetryLane1:
	    case RetryLane2:
	    case RetryLane3:
	    case RetryLane4:
	    case RetryLane5:
	      // TODO: Retries should be allowed to expire if they are CPU bound for
	      // too long, but when I made this change it caused a spike in browser
	      // crashes. There must be some other underlying bug; not super urgent but
	      // ideally should figure out why and fix it. Unfortunately we don't have
	      // a repro for the crashes, only detected via production metrics.
	      return NoTimestamp;

	    case SelectiveHydrationLane:
	    case IdleHydrationLane:
	    case IdleLane:
	    case OffscreenLane:
	      // Anything idle priority or lower should never expire.
	      return NoTimestamp;

	    default:
	      {
	        error('Should have found matching lanes. This is a bug in React.');
	      }

	      return NoTimestamp;
	  }
	}

	function markStarvedLanesAsExpired(root, currentTime) {
	  // TODO: This gets called every time we yield. We can optimize by storing
	  // the earliest expiration time on the root. Then use that to quickly bail out
	  // of this function.
	  var pendingLanes = root.pendingLanes;
	  var suspendedLanes = root.suspendedLanes;
	  var pingedLanes = root.pingedLanes;
	  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
	  // expiration time. If so, we'll assume the update is being starved and mark
	  // it as expired to force it to finish.

	  var lanes = pendingLanes;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    var expirationTime = expirationTimes[index];

	    if (expirationTime === NoTimestamp) {
	      // Found a pending lane with no expiration time. If it's not suspended, or
	      // if it's pinged, assume it's CPU-bound. Compute a new expiration time
	      // using the current time.
	      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
	        // Assumes timestamps are monotonically increasing.
	        expirationTimes[index] = computeExpirationTime(lane, currentTime);
	      }
	    } else if (expirationTime <= currentTime) {
	      // This lane expired
	      root.expiredLanes |= lane;
	    }

	    lanes &= ~lane;
	  }
	} // This returns the highest priority pending lanes regardless of whether they
	// are suspended.

	function getHighestPriorityPendingLanes(root) {
	  return getHighestPriorityLanes(root.pendingLanes);
	}
	function getLanesToRetrySynchronouslyOnError(root) {
	  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

	  if (everythingButOffscreen !== NoLanes) {
	    return everythingButOffscreen;
	  }

	  if (everythingButOffscreen & OffscreenLane) {
	    return OffscreenLane;
	  }

	  return NoLanes;
	}
	function includesSyncLane(lanes) {
	  return (lanes & SyncLane) !== NoLanes;
	}
	function includesNonIdleWork(lanes) {
	  return (lanes & NonIdleLanes) !== NoLanes;
	}
	function includesOnlyRetries(lanes) {
	  return (lanes & RetryLanes) === lanes;
	}
	function includesOnlyNonUrgentLanes(lanes) {
	  var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
	  return (lanes & UrgentLanes) === NoLanes;
	}
	function includesOnlyTransitions(lanes) {
	  return (lanes & TransitionLanes) === lanes;
	}
	function includesBlockingLane(root, lanes) {

	  var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
	  return (lanes & SyncDefaultLanes) !== NoLanes;
	}
	function includesExpiredLane(root, lanes) {
	  // This is a separate check from includesBlockingLane because a lane can
	  // expire after a render has already started.
	  return (lanes & root.expiredLanes) !== NoLanes;
	}
	function isTransitionLane(lane) {
	  return (lane & TransitionLanes) !== NoLanes;
	}
	function claimNextTransitionLane() {
	  // Cycle through the lanes, assigning each new transition to the next lane.
	  // In most cases, this means every transition gets its own lane, until we
	  // run out of lanes and cycle back to the beginning.
	  var lane = nextTransitionLane;
	  nextTransitionLane <<= 1;

	  if ((nextTransitionLane & TransitionLanes) === NoLanes) {
	    nextTransitionLane = TransitionLane1;
	  }

	  return lane;
	}
	function claimNextRetryLane() {
	  var lane = nextRetryLane;
	  nextRetryLane <<= 1;

	  if ((nextRetryLane & RetryLanes) === NoLanes) {
	    nextRetryLane = RetryLane1;
	  }

	  return lane;
	}
	function getHighestPriorityLane(lanes) {
	  return lanes & -lanes;
	}
	function pickArbitraryLane(lanes) {
	  // This wrapper function gets inlined. Only exists so to communicate that it
	  // doesn't matter which bit is selected; you can pick any bit without
	  // affecting the algorithms where its used. Here I'm using
	  // getHighestPriorityLane because it requires the fewest operations.
	  return getHighestPriorityLane(lanes);
	}

	function pickArbitraryLaneIndex(lanes) {
	  return 31 - clz32(lanes);
	}

	function laneToIndex(lane) {
	  return pickArbitraryLaneIndex(lane);
	}

	function includesSomeLane(a, b) {
	  return (a & b) !== NoLanes;
	}
	function isSubsetOfLanes(set, subset) {
	  return (set & subset) === subset;
	}
	function mergeLanes(a, b) {
	  return a | b;
	}
	function removeLanes(set, subset) {
	  return set & ~subset;
	}
	function intersectLanes(a, b) {
	  return a & b;
	} // Seems redundant, but it changes the type from a single lane (used for
	// updates) to a group of lanes (used for flushing work).

	function laneToLanes(lane) {
	  return lane;
	}
	function higherPriorityLane(a, b) {
	  // This works because the bit ranges decrease in priority as you go left.
	  return a !== NoLane && a < b ? a : b;
	}
	function createLaneMap(initial) {
	  // Intentionally pushing one by one.
	  // https://v8.dev/blog/elements-kinds#avoid-creating-holes
	  var laneMap = [];

	  for (var i = 0; i < TotalLanes; i++) {
	    laneMap.push(initial);
	  }

	  return laneMap;
	}
	function markRootUpdated(root, updateLane, eventTime) {
	  root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update
	  // could unblock them. Clear the suspended lanes so that we can try rendering
	  // them again.
	  //
	  // TODO: We really only need to unsuspend only lanes that are in the
	  // `subtreeLanes` of the updated fiber, or the update lanes of the return
	  // path. This would exclude suspended updates in an unrelated sibling tree,
	  // since there's no way for this update to unblock it.
	  //
	  // We don't do this if the incoming update is idle, because we never process
	  // idle updates until after all the regular updates have finished; there's no
	  // way it could unblock a transition.

	  if (updateLane !== IdleLane) {
	    root.suspendedLanes = NoLanes;
	    root.pingedLanes = NoLanes;
	  }

	  var eventTimes = root.eventTimes;
	  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
	  // recent event, and we assume time is monotonically increasing.

	  eventTimes[index] = eventTime;
	}
	function markRootSuspended(root, suspendedLanes) {
	  root.suspendedLanes |= suspendedLanes;
	  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

	  var expirationTimes = root.expirationTimes;
	  var lanes = suspendedLanes;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    expirationTimes[index] = NoTimestamp;
	    lanes &= ~lane;
	  }
	}
	function markRootPinged(root, pingedLanes, eventTime) {
	  root.pingedLanes |= root.suspendedLanes & pingedLanes;
	}
	function markRootFinished(root, remainingLanes) {
	  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
	  root.pendingLanes = remainingLanes; // Let's try everything again

	  root.suspendedLanes = NoLanes;
	  root.pingedLanes = NoLanes;
	  root.expiredLanes &= remainingLanes;
	  root.mutableReadLanes &= remainingLanes;
	  root.entangledLanes &= remainingLanes;
	  var entanglements = root.entanglements;
	  var eventTimes = root.eventTimes;
	  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work

	  var lanes = noLongerPendingLanes;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    entanglements[index] = NoLanes;
	    eventTimes[index] = NoTimestamp;
	    expirationTimes[index] = NoTimestamp;
	    lanes &= ~lane;
	  }
	}
	function markRootEntangled(root, entangledLanes) {
	  // In addition to entangling each of the given lanes with each other, we also
	  // have to consider _transitive_ entanglements. For each lane that is already
	  // entangled with *any* of the given lanes, that lane is now transitively
	  // entangled with *all* the given lanes.
	  //
	  // Translated: If C is entangled with A, then entangling A with B also
	  // entangles C with B.
	  //
	  // If this is hard to grasp, it might help to intentionally break this
	  // function and look at the tests that fail in ReactTransition-test.js. Try
	  // commenting out one of the conditions below.
	  var rootEntangledLanes = root.entangledLanes |= entangledLanes;
	  var entanglements = root.entanglements;
	  var lanes = rootEntangledLanes;

	  while (lanes) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;

	    if ( // Is this one of the newly entangled lanes?
	    lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
	    entanglements[index] & entangledLanes) {
	      entanglements[index] |= entangledLanes;
	    }

	    lanes &= ~lane;
	  }
	}
	function getBumpedLaneForHydration(root, renderLanes) {
	  var renderLane = getHighestPriorityLane(renderLanes);
	  var lane;

	  switch (renderLane) {
	    case InputContinuousLane:
	      lane = InputContinuousHydrationLane;
	      break;

	    case DefaultLane:
	      lane = DefaultHydrationLane;
	      break;

	    case TransitionLane1:
	    case TransitionLane2:
	    case TransitionLane3:
	    case TransitionLane4:
	    case TransitionLane5:
	    case TransitionLane6:
	    case TransitionLane7:
	    case TransitionLane8:
	    case TransitionLane9:
	    case TransitionLane10:
	    case TransitionLane11:
	    case TransitionLane12:
	    case TransitionLane13:
	    case TransitionLane14:
	    case TransitionLane15:
	    case TransitionLane16:
	    case RetryLane1:
	    case RetryLane2:
	    case RetryLane3:
	    case RetryLane4:
	    case RetryLane5:
	      lane = TransitionHydrationLane;
	      break;

	    case IdleLane:
	      lane = IdleHydrationLane;
	      break;

	    default:
	      // Everything else is already either a hydration lane, or shouldn't
	      // be retried at a hydration lane.
	      lane = NoLane;
	      break;
	  } // Check if the lane we chose is suspended. If so, that indicates that we
	  // already attempted and failed to hydrate at that level. Also check if we're
	  // already rendering that lane, which is rare but could happen.


	  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {
	    // Give up trying to hydrate and fall back to client render.
	    return NoLane;
	  }

	  return lane;
	}
	function addFiberToLanesMap(root, fiber, lanes) {

	  if (!isDevToolsPresent) {
	    return;
	  }

	  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;

	  while (lanes > 0) {
	    var index = laneToIndex(lanes);
	    var lane = 1 << index;
	    var updaters = pendingUpdatersLaneMap[index];
	    updaters.add(fiber);
	    lanes &= ~lane;
	  }
	}
	function movePendingFibersToMemoized(root, lanes) {

	  if (!isDevToolsPresent) {
	    return;
	  }

	  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
	  var memoizedUpdaters = root.memoizedUpdaters;

	  while (lanes > 0) {
	    var index = laneToIndex(lanes);
	    var lane = 1 << index;
	    var updaters = pendingUpdatersLaneMap[index];

	    if (updaters.size > 0) {
	      updaters.forEach(function (fiber) {
	        var alternate = fiber.alternate;

	        if (alternate === null || !memoizedUpdaters.has(alternate)) {
	          memoizedUpdaters.add(fiber);
	        }
	      });
	      updaters.clear();
	    }

	    lanes &= ~lane;
	  }
	}
	function getTransitionsForLanes(root, lanes) {
	  {
	    return null;
	  }
	}

	var DiscreteEventPriority = SyncLane;
	var ContinuousEventPriority = InputContinuousLane;
	var DefaultEventPriority = DefaultLane;
	var IdleEventPriority = IdleLane;
	var currentUpdatePriority = NoLane;
	function getCurrentUpdatePriority() {
	  return currentUpdatePriority;
	}
	function setCurrentUpdatePriority(newPriority) {
	  currentUpdatePriority = newPriority;
	}
	function runWithPriority(priority, fn) {
	  var previousPriority = currentUpdatePriority;

	  try {
	    currentUpdatePriority = priority;
	    return fn();
	  } finally {
	    currentUpdatePriority = previousPriority;
	  }
	}
	function higherEventPriority(a, b) {
	  return a !== 0 && a < b ? a : b;
	}
	function lowerEventPriority(a, b) {
	  return a > b ? a : b;
	}
	function isHigherEventPriority(a, b) {
	  return a !== 0 && a < b;
	}
	function lanesToEventPriority(lanes) {
	  var lane = getHighestPriorityLane(lanes);

	  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
	    return DiscreteEventPriority;
	  }

	  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
	    return ContinuousEventPriority;
	  }

	  if (includesNonIdleWork(lane)) {
	    return DefaultEventPriority;
	  }

	  return IdleEventPriority;
	}

	// This is imported by the event replaying implementation in React DOM. It's
	// in a separate file to break a circular dependency between the renderer and
	// the reconciler.
	function isRootDehydrated(root) {
	  var currentState = root.current.memoizedState;
	  return currentState.isDehydrated;
	}

	var _attemptSynchronousHydration;

	function setAttemptSynchronousHydration(fn) {
	  _attemptSynchronousHydration = fn;
	}
	function attemptSynchronousHydration(fiber) {
	  _attemptSynchronousHydration(fiber);
	}
	var attemptContinuousHydration;
	function setAttemptContinuousHydration(fn) {
	  attemptContinuousHydration = fn;
	}
	var attemptHydrationAtCurrentPriority;
	function setAttemptHydrationAtCurrentPriority(fn) {
	  attemptHydrationAtCurrentPriority = fn;
	}
	var getCurrentUpdatePriority$1;
	function setGetCurrentUpdatePriority(fn) {
	  getCurrentUpdatePriority$1 = fn;
	}
	var attemptHydrationAtPriority;
	function setAttemptHydrationAtPriority(fn) {
	  attemptHydrationAtPriority = fn;
	} // TODO: Upgrade this definition once we're on a newer version of Flow that
	// has this definition built-in.

	var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

	var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
	// if the last target was dehydrated.

	var queuedFocus = null;
	var queuedDrag = null;
	var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

	var queuedPointers = new Map();
	var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

	var queuedExplicitHydrationTargets = [];
	var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
	'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];
	function isDiscreteEventThatRequiresHydration(eventType) {
	  return discreteReplayableEvents.indexOf(eventType) > -1;
	}

	function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  return {
	    blockedOn: blockedOn,
	    domEventName: domEventName,
	    eventSystemFlags: eventSystemFlags,
	    nativeEvent: nativeEvent,
	    targetContainers: [targetContainer]
	  };
	}

	function clearIfContinuousEvent(domEventName, nativeEvent) {
	  switch (domEventName) {
	    case 'focusin':
	    case 'focusout':
	      queuedFocus = null;
	      break;

	    case 'dragenter':
	    case 'dragleave':
	      queuedDrag = null;
	      break;

	    case 'mouseover':
	    case 'mouseout':
	      queuedMouse = null;
	      break;

	    case 'pointerover':
	    case 'pointerout':
	      {
	        var pointerId = nativeEvent.pointerId;
	        queuedPointers.delete(pointerId);
	        break;
	      }

	    case 'gotpointercapture':
	    case 'lostpointercapture':
	      {
	        var _pointerId = nativeEvent.pointerId;
	        queuedPointerCaptures.delete(_pointerId);
	        break;
	      }
	  }
	}

	function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
	    var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);

	    if (blockedOn !== null) {
	      var _fiber2 = getInstanceFromNode(blockedOn);

	      if (_fiber2 !== null) {
	        // Attempt to increase the priority of this target.
	        attemptContinuousHydration(_fiber2);
	      }
	    }

	    return queuedEvent;
	  } // If we have already queued this exact event, then it's because
	  // the different event systems have different DOM event listeners.
	  // We can accumulate the flags, and the targetContainers, and
	  // store a single event to be replayed.


	  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
	  var targetContainers = existingQueuedEvent.targetContainers;

	  if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
	    targetContainers.push(targetContainer);
	  }

	  return existingQueuedEvent;
	}

	function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  // These set relatedTarget to null because the replayed event will be treated as if we
	  // moved from outside the window (no target) onto the target once it hydrates.
	  // Instead of mutating we could clone the event.
	  switch (domEventName) {
	    case 'focusin':
	      {
	        var focusEvent = nativeEvent;
	        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
	        return true;
	      }

	    case 'dragenter':
	      {
	        var dragEvent = nativeEvent;
	        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
	        return true;
	      }

	    case 'mouseover':
	      {
	        var mouseEvent = nativeEvent;
	        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
	        return true;
	      }

	    case 'pointerover':
	      {
	        var pointerEvent = nativeEvent;
	        var pointerId = pointerEvent.pointerId;
	        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
	        return true;
	      }

	    case 'gotpointercapture':
	      {
	        var _pointerEvent = nativeEvent;
	        var _pointerId2 = _pointerEvent.pointerId;
	        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
	        return true;
	      }
	  }

	  return false;
	} // Check if this target is unblocked. Returns true if it's unblocked.

	function attemptExplicitHydrationTarget(queuedTarget) {
	  // TODO: This function shares a lot of logic with findInstanceBlockingEvent.
	  // Try to unify them. It's a bit tricky since it would require two return
	  // values.
	  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

	  if (targetInst !== null) {
	    var nearestMounted = getNearestMountedFiber(targetInst);

	    if (nearestMounted !== null) {
	      var tag = nearestMounted.tag;

	      if (tag === SuspenseComponent) {
	        var instance = getSuspenseInstanceFromFiber(nearestMounted);

	        if (instance !== null) {
	          // We're blocked on hydrating this boundary.
	          // Increase its priority.
	          queuedTarget.blockedOn = instance;
	          attemptHydrationAtPriority(queuedTarget.priority, function () {
	            attemptHydrationAtCurrentPriority(nearestMounted);
	          });
	          return;
	        }
	      } else if (tag === HostRoot) {
	        var root = nearestMounted.stateNode;

	        if (isRootDehydrated(root)) {
	          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
	          // a root other than sync.

	          return;
	        }
	      }
	    }
	  }

	  queuedTarget.blockedOn = null;
	}

	function queueExplicitHydrationTarget(target) {
	  // TODO: This will read the priority if it's dispatched by the React
	  // event system but not native events. Should read window.event.type, like
	  // we do for updates (getCurrentEventPriority).
	  var updatePriority = getCurrentUpdatePriority$1();
	  var queuedTarget = {
	    blockedOn: null,
	    target: target,
	    priority: updatePriority
	  };
	  var i = 0;

	  for (; i < queuedExplicitHydrationTargets.length; i++) {
	    // Stop once we hit the first target with lower priority than
	    if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
	      break;
	    }
	  }

	  queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);

	  if (i === 0) {
	    attemptExplicitHydrationTarget(queuedTarget);
	  }
	}

	function attemptReplayContinuousQueuedEvent(queuedEvent) {
	  if (queuedEvent.blockedOn !== null) {
	    return false;
	  }

	  var targetContainers = queuedEvent.targetContainers;

	  while (targetContainers.length > 0) {
	    var targetContainer = targetContainers[0];
	    var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);

	    if (nextBlockedOn === null) {
	      {
	        var nativeEvent = queuedEvent.nativeEvent;
	        var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
	        setReplayingEvent(nativeEventClone);
	        nativeEvent.target.dispatchEvent(nativeEventClone);
	        resetReplayingEvent();
	      }
	    } else {
	      // We're still blocked. Try again later.
	      var _fiber3 = getInstanceFromNode(nextBlockedOn);

	      if (_fiber3 !== null) {
	        attemptContinuousHydration(_fiber3);
	      }

	      queuedEvent.blockedOn = nextBlockedOn;
	      return false;
	    } // This target container was successfully dispatched. Try the next.


	    targetContainers.shift();
	  }

	  return true;
	}

	function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
	  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
	    map.delete(key);
	  }
	}

	function replayUnblockedEvents() {
	  hasScheduledReplayAttempt = false;


	  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
	    queuedFocus = null;
	  }

	  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
	    queuedDrag = null;
	  }

	  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
	    queuedMouse = null;
	  }

	  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
	  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
	}

	function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
	  if (queuedEvent.blockedOn === unblocked) {
	    queuedEvent.blockedOn = null;

	    if (!hasScheduledReplayAttempt) {
	      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
	      // now unblocked. This first might not actually be unblocked yet.
	      // We could check it early to avoid scheduling an unnecessary callback.

	      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
	    }
	  }
	}

	function retryIfBlockedOn(unblocked) {
	  // Mark anything that was blocked on this as no longer blocked
	  // and eligible for a replay.
	  if (queuedDiscreteEvents.length > 0) {
	    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
	    // worth it because we expect very few discrete events to queue up and once
	    // we are actually fully unblocked it will be fast to replay them.

	    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
	      var queuedEvent = queuedDiscreteEvents[i];

	      if (queuedEvent.blockedOn === unblocked) {
	        queuedEvent.blockedOn = null;
	      }
	    }
	  }

	  if (queuedFocus !== null) {
	    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
	  }

	  if (queuedDrag !== null) {
	    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
	  }

	  if (queuedMouse !== null) {
	    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
	  }

	  var unblock = function (queuedEvent) {
	    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
	  };

	  queuedPointers.forEach(unblock);
	  queuedPointerCaptures.forEach(unblock);

	  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
	    var queuedTarget = queuedExplicitHydrationTargets[_i];

	    if (queuedTarget.blockedOn === unblocked) {
	      queuedTarget.blockedOn = null;
	    }
	  }

	  while (queuedExplicitHydrationTargets.length > 0) {
	    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

	    if (nextExplicitTarget.blockedOn !== null) {
	      // We're still blocked.
	      break;
	    } else {
	      attemptExplicitHydrationTarget(nextExplicitTarget);

	      if (nextExplicitTarget.blockedOn === null) {
	        // We're unblocked.
	        queuedExplicitHydrationTargets.shift();
	      }
	    }
	  }
	}

	var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?

	var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
	// We'd like to remove this but it's not clear if this is safe.

	function setEnabled(enabled) {
	  _enabled = !!enabled;
	}
	function isEnabled() {
	  return _enabled;
	}
	function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
	  var eventPriority = getEventPriority(domEventName);
	  var listenerWrapper;

	  switch (eventPriority) {
	    case DiscreteEventPriority:
	      listenerWrapper = dispatchDiscreteEvent;
	      break;

	    case ContinuousEventPriority:
	      listenerWrapper = dispatchContinuousEvent;
	      break;

	    case DefaultEventPriority:
	    default:
	      listenerWrapper = dispatchEvent;
	      break;
	  }

	  return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
	}

	function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
	  var previousPriority = getCurrentUpdatePriority();
	  var prevTransition = ReactCurrentBatchConfig.transition;
	  ReactCurrentBatchConfig.transition = null;

	  try {
	    setCurrentUpdatePriority(DiscreteEventPriority);
	    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig.transition = prevTransition;
	  }
	}

	function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
	  var previousPriority = getCurrentUpdatePriority();
	  var prevTransition = ReactCurrentBatchConfig.transition;
	  ReactCurrentBatchConfig.transition = null;

	  try {
	    setCurrentUpdatePriority(ContinuousEventPriority);
	    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig.transition = prevTransition;
	  }
	}

	function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  if (!_enabled) {
	    return;
	  }

	  {
	    dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
	  }
	}

	function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

	  if (blockedOn === null) {
	    dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
	    clearIfContinuousEvent(domEventName, nativeEvent);
	    return;
	  }

	  if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
	    nativeEvent.stopPropagation();
	    return;
	  } // We need to clear only if we didn't queue because
	  // queueing is accumulative.


	  clearIfContinuousEvent(domEventName, nativeEvent);

	  if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
	    while (blockedOn !== null) {
	      var fiber = getInstanceFromNode(blockedOn);

	      if (fiber !== null) {
	        attemptSynchronousHydration(fiber);
	      }

	      var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

	      if (nextBlockedOn === null) {
	        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
	      }

	      if (nextBlockedOn === blockedOn) {
	        break;
	      }

	      blockedOn = nextBlockedOn;
	    }

	    if (blockedOn !== null) {
	      nativeEvent.stopPropagation();
	    }

	    return;
	  } // This is not replayable so we'll invoke it but without a target,
	  // in case the event system needs to trace it.


	  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
	}

	var return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.
	// The return_targetInst field above is conceptually part of the return value.

	function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  // TODO: Warn if _enabled is false.
	  return_targetInst = null;
	  var nativeEventTarget = getEventTarget(nativeEvent);
	  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

	  if (targetInst !== null) {
	    var nearestMounted = getNearestMountedFiber(targetInst);

	    if (nearestMounted === null) {
	      // This tree has been unmounted already. Dispatch without a target.
	      targetInst = null;
	    } else {
	      var tag = nearestMounted.tag;

	      if (tag === SuspenseComponent) {
	        var instance = getSuspenseInstanceFromFiber(nearestMounted);

	        if (instance !== null) {
	          // Queue the event to be replayed later. Abort dispatching since we
	          // don't want this event dispatched twice through the event system.
	          // TODO: If this is the first discrete event in the queue. Schedule an increased
	          // priority for this boundary.
	          return instance;
	        } // This shouldn't happen, something went wrong but to avoid blocking
	        // the whole system, dispatch the event without a target.
	        // TODO: Warn.


	        targetInst = null;
	      } else if (tag === HostRoot) {
	        var root = nearestMounted.stateNode;

	        if (isRootDehydrated(root)) {
	          // If this happens during a replay something went wrong and it might block
	          // the whole system.
	          return getContainerFromFiber(nearestMounted);
	        }

	        targetInst = null;
	      } else if (nearestMounted !== targetInst) {
	        // If we get an event (ex: img onload) before committing that
	        // component's mount, ignore it for now (that is, treat it as if it was an
	        // event on a non-React tree). We might also consider queueing events and
	        // dispatching them after the mount.
	        targetInst = null;
	      }
	    }
	  }

	  return_targetInst = targetInst; // We're not blocked on anything.

	  return null;
	}
	function getEventPriority(domEventName) {
	  switch (domEventName) {
	    // Used by SimpleEventPlugin:
	    case 'cancel':
	    case 'click':
	    case 'close':
	    case 'contextmenu':
	    case 'copy':
	    case 'cut':
	    case 'auxclick':
	    case 'dblclick':
	    case 'dragend':
	    case 'dragstart':
	    case 'drop':
	    case 'focusin':
	    case 'focusout':
	    case 'input':
	    case 'invalid':
	    case 'keydown':
	    case 'keypress':
	    case 'keyup':
	    case 'mousedown':
	    case 'mouseup':
	    case 'paste':
	    case 'pause':
	    case 'play':
	    case 'pointercancel':
	    case 'pointerdown':
	    case 'pointerup':
	    case 'ratechange':
	    case 'reset':
	    case 'resize':
	    case 'seeked':
	    case 'submit':
	    case 'touchcancel':
	    case 'touchend':
	    case 'touchstart':
	    case 'volumechange': // Used by polyfills:
	    // eslint-disable-next-line no-fallthrough

	    case 'change':
	    case 'selectionchange':
	    case 'textInput':
	    case 'compositionstart':
	    case 'compositionend':
	    case 'compositionupdate': // Only enableCreateEventHandleAPI:
	    // eslint-disable-next-line no-fallthrough

	    case 'beforeblur':
	    case 'afterblur': // Not used by React but could be by user code:
	    // eslint-disable-next-line no-fallthrough

	    case 'beforeinput':
	    case 'blur':
	    case 'fullscreenchange':
	    case 'focus':
	    case 'hashchange':
	    case 'popstate':
	    case 'select':
	    case 'selectstart':
	      return DiscreteEventPriority;

	    case 'drag':
	    case 'dragenter':
	    case 'dragexit':
	    case 'dragleave':
	    case 'dragover':
	    case 'mousemove':
	    case 'mouseout':
	    case 'mouseover':
	    case 'pointermove':
	    case 'pointerout':
	    case 'pointerover':
	    case 'scroll':
	    case 'toggle':
	    case 'touchmove':
	    case 'wheel': // Not used by React but could be by user code:
	    // eslint-disable-next-line no-fallthrough

	    case 'mouseenter':
	    case 'mouseleave':
	    case 'pointerenter':
	    case 'pointerleave':
	      return ContinuousEventPriority;

	    case 'message':
	      {
	        // We might be in the Scheduler callback.
	        // Eventually this mechanism will be replaced by a check
	        // of the current priority on the native scheduler.
	        var schedulerPriority = getCurrentPriorityLevel();

	        switch (schedulerPriority) {
	          case ImmediatePriority:
	            return DiscreteEventPriority;

	          case UserBlockingPriority:
	            return ContinuousEventPriority;

	          case NormalPriority:
	          case LowPriority:
	            // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
	            return DefaultEventPriority;

	          case IdlePriority:
	            return IdleEventPriority;

	          default:
	            return DefaultEventPriority;
	        }
	      }

	    default:
	      return DefaultEventPriority;
	  }
	}

	function addEventBubbleListener(target, eventType, listener) {
	  target.addEventListener(eventType, listener, false);
	  return listener;
	}
	function addEventCaptureListener(target, eventType, listener) {
	  target.addEventListener(eventType, listener, true);
	  return listener;
	}
	function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
	  target.addEventListener(eventType, listener, {
	    capture: true,
	    passive: passive
	  });
	  return listener;
	}
	function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
	  target.addEventListener(eventType, listener, {
	    passive: passive
	  });
	  return listener;
	}

	/**
	 * These variables store information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 *
	 */
	var root = null;
	var startText = null;
	var fallbackText = null;
	function initialize(nativeEventTarget) {
	  root = nativeEventTarget;
	  startText = getText();
	  return true;
	}
	function reset() {
	  root = null;
	  startText = null;
	  fallbackText = null;
	}
	function getData() {
	  if (fallbackText) {
	    return fallbackText;
	  }

	  var start;
	  var startValue = startText;
	  var startLength = startValue.length;
	  var end;
	  var endValue = getText();
	  var endLength = endValue.length;

	  for (start = 0; start < startLength; start++) {
	    if (startValue[start] !== endValue[start]) {
	      break;
	    }
	  }

	  var minEnd = startLength - start;

	  for (end = 1; end <= minEnd; end++) {
	    if (startValue[startLength - end] !== endValue[endLength - end]) {
	      break;
	    }
	  }

	  var sliceTail = end > 1 ? 1 - end : undefined;
	  fallbackText = endValue.slice(start, sliceTail);
	  return fallbackText;
	}
	function getText() {
	  if ('value' in root) {
	    return root.value;
	  }

	  return root.textContent;
	}

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
	  // report Enter as charCode 10 when ctrl is pressed.


	  if (charCode === 10) {
	    charCode = 13;
	  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.


	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	function functionThatReturnsTrue() {
	  return true;
	}

	function functionThatReturnsFalse() {
	  return false;
	} // This is intentionally a factory so that we have different returned constructors.
	// If we had a single constructor, it would be megamorphic and engines would deopt.


	function createSyntheticEvent(Interface) {
	  /**
	   * Synthetic events are dispatched by event plugins, typically in response to a
	   * top-level event delegation handler.
	   *
	   * These systems should generally use pooling to reduce the frequency of garbage
	   * collection. The system should check `isPersistent` to determine whether the
	   * event should be released into the pool after being dispatched. Users that
	   * need a persisted event should invoke `persist`.
	   *
	   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	   * normalizing browser quirks. Subclasses do not necessarily have to implement a
	   * DOM interface; custom application-specific events can also subclass this.
	   */
	  function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
	    this._reactName = reactName;
	    this._targetInst = targetInst;
	    this.type = reactEventType;
	    this.nativeEvent = nativeEvent;
	    this.target = nativeEventTarget;
	    this.currentTarget = null;

	    for (var _propName in Interface) {
	      if (!Interface.hasOwnProperty(_propName)) {
	        continue;
	      }

	      var normalize = Interface[_propName];

	      if (normalize) {
	        this[_propName] = normalize(nativeEvent);
	      } else {
	        this[_propName] = nativeEvent[_propName];
	      }
	    }

	    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

	    if (defaultPrevented) {
	      this.isDefaultPrevented = functionThatReturnsTrue;
	    } else {
	      this.isDefaultPrevented = functionThatReturnsFalse;
	    }

	    this.isPropagationStopped = functionThatReturnsFalse;
	    return this;
	  }

	  assign(SyntheticBaseEvent.prototype, {
	    preventDefault: function () {
	      this.defaultPrevented = true;
	      var event = this.nativeEvent;

	      if (!event) {
	        return;
	      }

	      if (event.preventDefault) {
	        event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
	      } else if (typeof event.returnValue !== 'unknown') {
	        event.returnValue = false;
	      }

	      this.isDefaultPrevented = functionThatReturnsTrue;
	    },
	    stopPropagation: function () {
	      var event = this.nativeEvent;

	      if (!event) {
	        return;
	      }

	      if (event.stopPropagation) {
	        event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
	      } else if (typeof event.cancelBubble !== 'unknown') {
	        // The ChangeEventPlugin registers a "propertychange" event for
	        // IE. This event does not support bubbling or cancelling, and
	        // any references to cancelBubble throw "Member not found".  A
	        // typeof check of "unknown" circumvents this issue (and is also
	        // IE specific).
	        event.cancelBubble = true;
	      }

	      this.isPropagationStopped = functionThatReturnsTrue;
	    },

	    /**
	     * We release all dispatched `SyntheticEvent`s after each event loop, adding
	     * them back into the pool. This allows a way to hold onto a reference that
	     * won't be added back into the pool.
	     */
	    persist: function () {// Modern event system doesn't use pooling.
	    },

	    /**
	     * Checks if this event should be released back into the pool.
	     *
	     * @return {boolean} True if this should not be released, false otherwise.
	     */
	    isPersistent: functionThatReturnsTrue
	  });
	  return SyntheticBaseEvent;
	}
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */


	var EventInterface = {
	  eventPhase: 0,
	  bubbles: 0,
	  cancelable: 0,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: 0,
	  isTrusted: 0
	};
	var SyntheticEvent = createSyntheticEvent(EventInterface);

	var UIEventInterface = assign({}, EventInterface, {
	  view: 0,
	  detail: 0
	});

	var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
	var lastMovementX;
	var lastMovementY;
	var lastMouseEvent;

	function updateMouseMovementPolyfillState(event) {
	  if (event !== lastMouseEvent) {
	    if (lastMouseEvent && event.type === 'mousemove') {
	      lastMovementX = event.screenX - lastMouseEvent.screenX;
	      lastMovementY = event.screenY - lastMouseEvent.screenY;
	    } else {
	      lastMovementX = 0;
	      lastMovementY = 0;
	    }

	    lastMouseEvent = event;
	  }
	}
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */


	var MouseEventInterface = assign({}, UIEventInterface, {
	  screenX: 0,
	  screenY: 0,
	  clientX: 0,
	  clientY: 0,
	  pageX: 0,
	  pageY: 0,
	  ctrlKey: 0,
	  shiftKey: 0,
	  altKey: 0,
	  metaKey: 0,
	  getModifierState: getEventModifierState,
	  button: 0,
	  buttons: 0,
	  relatedTarget: function (event) {
	    if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
	    return event.relatedTarget;
	  },
	  movementX: function (event) {
	    if ('movementX' in event) {
	      return event.movementX;
	    }

	    updateMouseMovementPolyfillState(event);
	    return lastMovementX;
	  },
	  movementY: function (event) {
	    if ('movementY' in event) {
	      return event.movementY;
	    } // Don't need to call updateMouseMovementPolyfillState() here
	    // because it's guaranteed to have already run when movementX
	    // was copied.


	    return lastMovementY;
	  }
	});

	var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var DragEventInterface = assign({}, MouseEventInterface, {
	  dataTransfer: 0
	});

	var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var FocusEventInterface = assign({}, UIEventInterface, {
	  relatedTarget: 0
	});

	var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */

	var AnimationEventInterface = assign({}, EventInterface, {
	  animationName: 0,
	  elapsedTime: 0,
	  pseudoElement: 0
	});

	var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */

	var ClipboardEventInterface = assign({}, EventInterface, {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	});

	var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */

	var CompositionEventInterface = assign({}, EventInterface, {
	  data: 0
	});

	var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	// Happens to share the same list for now.

	var SyntheticInputEvent = SyntheticCompositionEvent;
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */

	var normalizeKey = {
	  Esc: 'Escape',
	  Spacebar: ' ',
	  Left: 'ArrowLeft',
	  Up: 'ArrowUp',
	  Right: 'ArrowRight',
	  Down: 'ArrowDown',
	  Del: 'Delete',
	  Win: 'OS',
	  Menu: 'ContextMenu',
	  Apps: 'ContextMenu',
	  Scroll: 'ScrollLock',
	  MozPrintableKey: 'Unidentified'
	};
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */

	var translateToKey = {
	  '8': 'Backspace',
	  '9': 'Tab',
	  '12': 'Clear',
	  '13': 'Enter',
	  '16': 'Shift',
	  '17': 'Control',
	  '18': 'Alt',
	  '19': 'Pause',
	  '20': 'CapsLock',
	  '27': 'Escape',
	  '32': ' ',
	  '33': 'PageUp',
	  '34': 'PageDown',
	  '35': 'End',
	  '36': 'Home',
	  '37': 'ArrowLeft',
	  '38': 'ArrowUp',
	  '39': 'ArrowRight',
	  '40': 'ArrowDown',
	  '45': 'Insert',
	  '46': 'Delete',
	  '112': 'F1',
	  '113': 'F2',
	  '114': 'F3',
	  '115': 'F4',
	  '116': 'F5',
	  '117': 'F6',
	  '118': 'F7',
	  '119': 'F8',
	  '120': 'F9',
	  '121': 'F10',
	  '122': 'F11',
	  '123': 'F12',
	  '144': 'NumLock',
	  '145': 'ScrollLock',
	  '224': 'Meta'
	};
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */

	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

	    if (key !== 'Unidentified') {
	      return key;
	    }
	  } // Browser does not implement `key`, polyfill as much of it as we can.


	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.

	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }

	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }

	  return '';
	}
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */


	var modifierKeyToProp = {
	  Alt: 'altKey',
	  Control: 'ctrlKey',
	  Meta: 'metaKey',
	  Shift: 'shiftKey'
	}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
	// getModifierState. If getModifierState is not supported, we map it to a set of
	// modifier keys exposed by the event. In this case, Lock-keys are not supported.

	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;

	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }

	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */


	var KeyboardEventInterface = assign({}, UIEventInterface, {
	  key: getEventKey,
	  code: 0,
	  location: 0,
	  ctrlKey: 0,
	  shiftKey: 0,
	  altKey: 0,
	  metaKey: 0,
	  repeat: 0,
	  locale: 0,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }

	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }

	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }

	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }

	    return 0;
	  }
	});

	var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
	/**
	 * @interface PointerEvent
	 * @see http://www.w3.org/TR/pointerevents/
	 */

	var PointerEventInterface = assign({}, MouseEventInterface, {
	  pointerId: 0,
	  width: 0,
	  height: 0,
	  pressure: 0,
	  tangentialPressure: 0,
	  tiltX: 0,
	  tiltY: 0,
	  twist: 0,
	  pointerType: 0,
	  isPrimary: 0
	});

	var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */

	var TouchEventInterface = assign({}, UIEventInterface, {
	  touches: 0,
	  targetTouches: 0,
	  changedTouches: 0,
	  altKey: 0,
	  metaKey: 0,
	  ctrlKey: 0,
	  shiftKey: 0,
	  getModifierState: getEventModifierState
	});

	var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */

	var TransitionEventInterface = assign({}, EventInterface, {
	  propertyName: 0,
	  elapsedTime: 0,
	  pseudoElement: 0
	});

	var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var WheelEventInterface = assign({}, MouseEventInterface, {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: 0,
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: 0
	});

	var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

	var START_KEYCODE = 229;
	var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
	var documentMode = null;

	if (canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	} // Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.


	var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.

	var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	function registerEvents() {
	  registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
	  registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
	  registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
	  registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
	} // Track whether we've ever handled a keypress on the space key.


	var hasSpaceKeypress = false;
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */

	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	/**
	 * Translate native top level events into event types.
	 */


	function getCompositionEventType(domEventName) {
	  switch (domEventName) {
	    case 'compositionstart':
	      return 'onCompositionStart';

	    case 'compositionend':
	      return 'onCompositionEnd';

	    case 'compositionupdate':
	      return 'onCompositionUpdate';
	  }
	}
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 */


	function isFallbackCompositionStart(domEventName, nativeEvent) {
	  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
	}
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 */


	function isFallbackCompositionEnd(domEventName, nativeEvent) {
	  switch (domEventName) {
	    case 'keyup':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

	    case 'keydown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;

	    case 'keypress':
	    case 'mousedown':
	    case 'focusout':
	      // Events are not possible without cancelling IME.
	      return true;

	    default:
	      return false;
	  }
	}
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */


	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;

	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }

	  return null;
	}
	/**
	 * Check if a composition event was triggered by Korean IME.
	 * Our fallback mode does not work well with IE's Korean IME,
	 * so just use native composition events when Korean IME is used.
	 * Although CompositionEvent.locale property is deprecated,
	 * it is available in IE, where our fallback mode is enabled.
	 *
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */


	function isUsingKoreanIME(nativeEvent) {
	  return nativeEvent.locale === 'ko';
	} // Track the current IME composition status, if any.


	var isComposing = false;
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */

	function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(domEventName);
	  } else if (!isComposing) {
	    if (isFallbackCompositionStart(domEventName, nativeEvent)) {
	      eventType = 'onCompositionStart';
	    }
	  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
	    eventType = 'onCompositionEnd';
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!isComposing && eventType === 'onCompositionStart') {
	      isComposing = initialize(nativeEventTarget);
	    } else if (eventType === 'onCompositionEnd') {
	      if (isComposing) {
	        fallbackData = getData();
	      }
	    }
	  }

	  var listeners = accumulateTwoPhaseListeners(targetInst, eventType);

	  if (listeners.length > 0) {
	    var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
	    dispatchQueue.push({
	      event: event,
	      listeners: listeners
	    });

	    if (fallbackData) {
	      // Inject data generated from fallback path into the synthetic event.
	      // This matches the property of native CompositionEventInterface.
	      event.data = fallbackData;
	    } else {
	      var customData = getDataFromCustomEvent(nativeEvent);

	      if (customData !== null) {
	        event.data = customData;
	      }
	    }
	  }
	}

	function getNativeBeforeInputChars(domEventName, nativeEvent) {
	  switch (domEventName) {
	    case 'compositionend':
	      return getDataFromCustomEvent(nativeEvent);

	    case 'keypress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;

	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case 'textInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to ignore it.

	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 */


	function getFallbackBeforeInputChars(domEventName, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (isComposing) {
	    if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
	      var chars = getData();
	      reset();
	      isComposing = false;
	      return chars;
	    }

	    return null;
	  }

	  switch (domEventName) {
	    case 'paste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;

	    case 'keypress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (!isKeypressCommand(nativeEvent)) {
	        // IE fires the `keypress` event when a user types an emoji via
	        // Touch keyboard of Windows.  In such a case, the `char` property
	        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
	        // is 2, the property `which` does not represent an emoji correctly.
	        // In such a case, we directly return the `char` property instead of
	        // using `which`.
	        if (nativeEvent.char && nativeEvent.char.length > 1) {
	          return nativeEvent.char;
	        } else if (nativeEvent.which) {
	          return String.fromCharCode(nativeEvent.which);
	        }
	      }

	      return null;

	    case 'compositionend':
	      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

	    default:
	      return null;
	  }
	}
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */


	function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(domEventName, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
	  } // If no characters are being inserted, no BeforeInput event should
	  // be fired.


	  if (!chars) {
	    return null;
	  }

	  var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');

	  if (listeners.length > 0) {
	    var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
	    dispatchQueue.push({
	      event: event,
	      listeners: listeners
	    });
	    event.data = chars;
	  }
	}
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */


	function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	  extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	}

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  'datetime-local': true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */

	function isEventSupported(eventNameSuffix) {
	  if (!canUseDOM) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  return isSupported;
	}

	function registerEvents$1() {
	  registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
	}

	function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
	  // Flag this event loop as needing state restore.
	  enqueueStateRestore(target);
	  var listeners = accumulateTwoPhaseListeners(inst, 'onChange');

	  if (listeners.length > 0) {
	    var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
	    dispatchQueue.push({
	      event: event,
	      listeners: listeners
	    });
	  }
	}
	/**
	 * For IE shims
	 */


	var activeElement = null;
	var activeElementInst = null;
	/**
	 * SECTION: handle `change` event
	 */

	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var dispatchQueue = [];
	  createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.

	  batchedUpdates(runEventInBatch, dispatchQueue);
	}

	function runEventInBatch(dispatchQueue) {
	  processDispatchQueue(dispatchQueue, 0);
	}

	function getInstIfValueChanged(targetInst) {
	  var targetNode = getNodeFromInstance(targetInst);

	  if (updateValueIfChanged(targetNode)) {
	    return targetInst;
	  }
	}

	function getTargetInstForChangeEvent(domEventName, targetInst) {
	  if (domEventName === 'change') {
	    return targetInst;
	  }
	}
	/**
	 * SECTION: handle `input` event
	 */


	var isInputEventSupported = false;

	if (canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
	}
	/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */


	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */


	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  activeElement = null;
	  activeElementInst = null;
	}
	/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */


	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }

	  if (getInstIfValueChanged(activeElementInst)) {
	    manualDispatchChangeEvent(nativeEvent);
	  }
	}

	function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
	  if (domEventName === 'focusin') {
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (domEventName === 'focusout') {
	    stopWatchingForValueChange();
	  }
	} // For IE8 and IE9.


	function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
	  if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    return getInstIfValueChanged(activeElementInst);
	  }
	}
	/**
	 * SECTION: handle `click` event
	 */


	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(domEventName, targetInst) {
	  if (domEventName === 'click') {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
	  if (domEventName === 'input' || domEventName === 'change') {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function handleControlledInputBlur(node) {
	  var state = node._wrapperState;

	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }

	  {
	    // If controlled, assign the value attribute to the current value on blur
	    setDefaultValue(node, 'number', node.value);
	  }
	}
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */


	function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
	  var getTargetInstFunc, handleEventFunc;

	  if (shouldUseChangeEvent(targetNode)) {
	    getTargetInstFunc = getTargetInstForChangeEvent;
	  } else if (isTextInputElement(targetNode)) {
	    if (isInputEventSupported) {
	      getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	    } else {
	      getTargetInstFunc = getTargetInstForInputEventPolyfill;
	      handleEventFunc = handleEventsForInputEventPolyfill;
	    }
	  } else if (shouldUseClickEvent(targetNode)) {
	    getTargetInstFunc = getTargetInstForClickEvent;
	  }

	  if (getTargetInstFunc) {
	    var inst = getTargetInstFunc(domEventName, targetInst);

	    if (inst) {
	      createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
	      return;
	    }
	  }

	  if (handleEventFunc) {
	    handleEventFunc(domEventName, targetNode, targetInst);
	  } // When blurring, set the value attribute for number inputs


	  if (domEventName === 'focusout') {
	    handleControlledInputBlur(targetNode);
	  }
	}

	function registerEvents$2() {
	  registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
	  registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
	  registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
	  registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
	}
	/**
	 * For almost every interaction we care about, there will be both a top-level
	 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	 * we do not extract duplicate events. However, moving the mouse into the
	 * browser from outside will not fire a `mouseout` event. In this case, we use
	 * the `mouseover` top-level event.
	 */


	function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
	  var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';

	  if (isOverEvent && !isReplayingEvent(nativeEvent)) {
	    // If this is an over event with a target, we might have already dispatched
	    // the event in the out event of the other target. If this is replayed,
	    // then it's because we couldn't dispatch against this target previously
	    // so we have to do it now instead.
	    var related = nativeEvent.relatedTarget || nativeEvent.fromElement;

	    if (related) {
	      // If the related node is managed by React, we can assume that we have
	      // already dispatched the corresponding events during its mouseout.
	      if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
	        return;
	      }
	    }
	  }

	  if (!isOutEvent && !isOverEvent) {
	    // Must not be a mouse or pointer in or out - ignoring.
	    return;
	  }

	  var win; // TODO: why is this nullable in the types but we read from it?

	  if (nativeEventTarget.window === nativeEventTarget) {
	    // `nativeEventTarget` is probably a window object.
	    win = nativeEventTarget;
	  } else {
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    var doc = nativeEventTarget.ownerDocument;

	    if (doc) {
	      win = doc.defaultView || doc.parentWindow;
	    } else {
	      win = window;
	    }
	  }

	  var from;
	  var to;

	  if (isOutEvent) {
	    var _related = nativeEvent.relatedTarget || nativeEvent.toElement;

	    from = targetInst;
	    to = _related ? getClosestInstanceFromNode(_related) : null;

	    if (to !== null) {
	      var nearestMounted = getNearestMountedFiber(to);

	      if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
	        to = null;
	      }
	    }
	  } else {
	    // Moving to a node from outside the window.
	    from = null;
	    to = targetInst;
	  }

	  if (from === to) {
	    // Nothing pertains to our managed components.
	    return;
	  }

	  var SyntheticEventCtor = SyntheticMouseEvent;
	  var leaveEventType = 'onMouseLeave';
	  var enterEventType = 'onMouseEnter';
	  var eventTypePrefix = 'mouse';

	  if (domEventName === 'pointerout' || domEventName === 'pointerover') {
	    SyntheticEventCtor = SyntheticPointerEvent;
	    leaveEventType = 'onPointerLeave';
	    enterEventType = 'onPointerEnter';
	    eventTypePrefix = 'pointer';
	  }

	  var fromNode = from == null ? win : getNodeFromInstance(from);
	  var toNode = to == null ? win : getNodeFromInstance(to);
	  var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
	  leave.target = fromNode;
	  leave.relatedTarget = toNode;
	  var enter = null; // We should only process this nativeEvent if we are processing
	  // the first ancestor. Next time, we will ignore the event.

	  var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);

	  if (nativeTargetInst === targetInst) {
	    var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
	    enterEvent.target = toNode;
	    enterEvent.relatedTarget = fromNode;
	    enter = enterEvent;
	  }

	  accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
	}

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
	  ;
	}

	var objectIs = typeof Object.is === 'function' ? Object.is : is;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */

	function shallowEqual(objA, objB) {
	  if (objectIs(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  } // Test for A's keys different from B.


	  for (var i = 0; i < keysA.length; i++) {
	    var currentKey = keysA[i];

	    if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }

	  return node;
	}
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */


	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }

	    node = node.parentNode;
	  }
	}
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */


	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === TEXT_NODE) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	/**
	 * @param {DOMElement} outerNode
	 * @return {?object}
	 */

	function getOffsets(outerNode) {
	  var ownerDocument = outerNode.ownerDocument;
	  var win = ownerDocument && ownerDocument.defaultView || window;
	  var selection = win.getSelection && win.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode,
	      anchorOffset = selection.anchorOffset,
	      focusNode = selection.focusNode,
	      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
	  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
	  // expose properties, triggering a "Permission denied error" if any of its
	  // properties are accessed. The only seemingly possible way to avoid erroring
	  // is to access a property that typically works for non-anonymous divs and
	  // catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

	  try {
	    /* eslint-disable no-unused-expressions */
	    anchorNode.nodeType;
	    focusNode.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
	}
	/**
	 * Returns {start, end} where `start` is the character/codepoint index of
	 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
	 * `end` is the index of (focusNode, focusOffset).
	 *
	 * Returns null if you pass in garbage input but we should probably just crash.
	 *
	 * Exported only for testing.
	 */

	function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
	  var length = 0;
	  var start = -1;
	  var end = -1;
	  var indexWithinAnchor = 0;
	  var indexWithinFocus = 0;
	  var node = outerNode;
	  var parentNode = null;

	  outer: while (true) {
	    var next = null;

	    while (true) {
	      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
	        start = length + anchorOffset;
	      }

	      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
	        end = length + focusOffset;
	      }

	      if (node.nodeType === TEXT_NODE) {
	        length += node.nodeValue.length;
	      }

	      if ((next = node.firstChild) === null) {
	        break;
	      } // Moving from `node` to its first child `next`.


	      parentNode = node;
	      node = next;
	    }

	    while (true) {
	      if (node === outerNode) {
	        // If `outerNode` has children, this is always the second time visiting
	        // it. If it has no children, this is still the first loop, and the only
	        // valid selection is anchorNode and focusNode both equal to this node
	        // and both offsets 0, in which case we will have handled above.
	        break outer;
	      }

	      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
	        start = length;
	      }

	      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
	        end = length;
	      }

	      if ((next = node.nextSibling) !== null) {
	        break;
	      }

	      node = parentNode;
	      parentNode = node.parentNode;
	    } // Moving from `node` to its next sibling `next`.


	    node = next;
	  }

	  if (start === -1 || end === -1) {
	    // This should never happen. (Would happen if the anchor/focus nodes aren't
	    // actually inside the passed-in node.)
	    return null;
	  }

	  return {
	    start: start,
	    end: end
	  };
	}
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */

	function setOffsets(node, offsets) {
	  var doc = node.ownerDocument || document;
	  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
	  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
	  // fails when pasting 100+ items)

	  if (!win.getSelection) {
	    return;
	  }

	  var selection = win.getSelection();
	  var length = node.textContent.length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.

	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
	      return;
	    }

	    var range = doc.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	function isTextNode(node) {
	  return node && node.nodeType === TEXT_NODE;
	}

	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	function isInDocument(node) {
	  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
	}

	function isSameOriginFrame(iframe) {
	  try {
	    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
	    // to throw, e.g. if it has a cross-origin src attribute.
	    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
	    // iframe.contentDocument.defaultView;
	    // A safety way is to access one of the cross origin properties: Window or Location
	    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
	    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
	    return typeof iframe.contentWindow.location.href === 'string';
	  } catch (err) {
	    return false;
	  }
	}

	function getActiveElementDeep() {
	  var win = window;
	  var element = getActiveElement();

	  while (element instanceof win.HTMLIFrameElement) {
	    if (isSameOriginFrame(element)) {
	      win = element.contentWindow;
	    } else {
	      return element;
	    }

	    element = getActiveElement(win.document);
	  }

	  return element;
	}
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */

	/**
	 * @hasSelectionCapabilities: we get the element types that support selection
	 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
	 * and `selectionEnd` rows.
	 */


	function hasSelectionCapabilities(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
	}
	function getSelectionInformation() {
	  var focusedElem = getActiveElementDeep();
	  return {
	    focusedElem: focusedElem,
	    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
	  };
	}
	/**
	 * @restoreSelection: If any selection information was potentially lost,
	 * restore it. This is useful when performing operations that could remove dom
	 * nodes and place them back in, resulting in focus being lost.
	 */

	function restoreSelection(priorSelectionInformation) {
	  var curFocusedElem = getActiveElementDeep();
	  var priorFocusedElem = priorSelectionInformation.focusedElem;
	  var priorSelectionRange = priorSelectionInformation.selectionRange;

	  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
	      setSelection(priorFocusedElem, priorSelectionRange);
	    } // Focusing a node can change the scroll position, which is undesirable


	    var ancestors = [];
	    var ancestor = priorFocusedElem;

	    while (ancestor = ancestor.parentNode) {
	      if (ancestor.nodeType === ELEMENT_NODE) {
	        ancestors.push({
	          element: ancestor,
	          left: ancestor.scrollLeft,
	          top: ancestor.scrollTop
	        });
	      }
	    }

	    if (typeof priorFocusedElem.focus === 'function') {
	      priorFocusedElem.focus();
	    }

	    for (var i = 0; i < ancestors.length; i++) {
	      var info = ancestors[i];
	      info.element.scrollLeft = info.left;
	      info.element.scrollTop = info.top;
	    }
	  }
	}
	/**
	 * @getSelection: Gets the selection bounds of a focused textarea, input or
	 * contentEditable node.
	 * -@input: Look up selection bounds of this input
	 * -@return {start: selectionStart, end: selectionEnd}
	 */

	function getSelection(input) {
	  var selection;

	  if ('selectionStart' in input) {
	    // Modern browser with input or textarea.
	    selection = {
	      start: input.selectionStart,
	      end: input.selectionEnd
	    };
	  } else {
	    // Content editable or old IE textarea.
	    selection = getOffsets(input);
	  }

	  return selection || {
	    start: 0,
	    end: 0
	  };
	}
	/**
	 * @setSelection: Sets the selection bounds of a textarea or input and focuses
	 * the input.
	 * -@input     Set selection bounds of this input or textarea
	 * -@offsets   Object of same form that is returned from get*
	 */

	function setSelection(input, offsets) {
	  var start = offsets.start;
	  var end = offsets.end;

	  if (end === undefined) {
	    end = start;
	  }

	  if ('selectionStart' in input) {
	    input.selectionStart = start;
	    input.selectionEnd = Math.min(end, input.value.length);
	  } else {
	    setOffsets(input, offsets);
	  }
	}

	var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	function registerEvents$3() {
	  registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
	}

	var activeElement$1 = null;
	var activeElementInst$1 = null;
	var lastSelection = null;
	var mouseDown = false;
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 */

	function getSelection$1(node) {
	  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else {
	    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
	    var selection = win.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  }
	}
	/**
	 * Get document associated with the event target.
	 */


	function getEventTargetDocument(eventTarget) {
	  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
	}
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @param {object} nativeEventTarget
	 * @return {?SyntheticEvent}
	 */


	function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  var doc = getEventTargetDocument(nativeEventTarget);

	  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
	    return;
	  } // Only fire when selection has actually changed.


	  var currentSelection = getSelection$1(activeElement$1);

	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	    var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');

	    if (listeners.length > 0) {
	      var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
	      dispatchQueue.push({
	        event: event,
	        listeners: listeners
	      });
	      event.target = activeElement$1;
	    }
	  }
	}
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */


	function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;

	  switch (domEventName) {
	    // Track the input node that has focus.
	    case 'focusin':
	      if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	        activeElement$1 = targetNode;
	        activeElementInst$1 = targetInst;
	        lastSelection = null;
	      }

	      break;

	    case 'focusout':
	      activeElement$1 = null;
	      activeElementInst$1 = null;
	      lastSelection = null;
	      break;
	    // Don't fire the event while the user is dragging. This matches the
	    // semantics of the native select event.

	    case 'mousedown':
	      mouseDown = true;
	      break;

	    case 'contextmenu':
	    case 'mouseup':
	    case 'dragend':
	      mouseDown = false;
	      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
	      break;
	    // Chrome and IE fire non-standard event when selection is changed (and
	    // sometimes when it hasn't). IE's event fires out of order with respect
	    // to key and input events on deletion, so we discard it.
	    //
	    // Firefox doesn't support selectionchange, so check selection status
	    // after each key entry. The selection changes after keydown and before
	    // keyup, but we check on keydown as well in the case of holding down a
	    // key, when multiple keydown events are fired but only one keyup is.
	    // This is also our approach for IE handling, for the reason above.

	    case 'selectionchange':
	      if (skipSelectionChangeEvent) {
	        break;
	      }

	    // falls through

	    case 'keydown':
	    case 'keyup':
	      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
	  }
	}

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */

	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  return prefixes;
	}
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */


	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */

	var prefixedEventNames = {};
	/**
	 * Element to check for prefixes on.
	 */

	var style = {};
	/**
	 * Bootstrap if a DOM exists.
	 */

	if (canUseDOM) {
	  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.

	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  } // Same as above


	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */


	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return eventName;
	}

	var ANIMATION_END = getVendorPrefixedEventName('animationend');
	var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
	var ANIMATION_START = getVendorPrefixedEventName('animationstart');
	var TRANSITION_END = getVendorPrefixedEventName('transitionend');

	var topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!
	//
	// E.g. it needs "pointerDown", not "pointerdown".
	// This is because we derive both React name ("onPointerDown")
	// and DOM name ("pointerdown") from the same list.
	//
	// Exceptions that don't match this convention are listed separately.
	//
	// prettier-ignore

	var simpleEventPluginEvents = ['abort', 'auxClick', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'gotPointerCapture', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'lostPointerCapture', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'pointerCancel', 'pointerDown', 'pointerMove', 'pointerOut', 'pointerOver', 'pointerUp', 'progress', 'rateChange', 'reset', 'resize', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchStart', 'volumeChange', 'scroll', 'toggle', 'touchMove', 'waiting', 'wheel'];

	function registerSimpleEvent(domEventName, reactName) {
	  topLevelEventsToReactNames.set(domEventName, reactName);
	  registerTwoPhaseEvent(reactName, [domEventName]);
	}

	function registerSimpleEvents() {
	  for (var i = 0; i < simpleEventPluginEvents.length; i++) {
	    var eventName = simpleEventPluginEvents[i];
	    var domEventName = eventName.toLowerCase();
	    var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
	    registerSimpleEvent(domEventName, 'on' + capitalizedEvent);
	  } // Special cases where event names don't match.


	  registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');
	  registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');
	  registerSimpleEvent(ANIMATION_START, 'onAnimationStart');
	  registerSimpleEvent('dblclick', 'onDoubleClick');
	  registerSimpleEvent('focusin', 'onFocus');
	  registerSimpleEvent('focusout', 'onBlur');
	  registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');
	}

	function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  var reactName = topLevelEventsToReactNames.get(domEventName);

	  if (reactName === undefined) {
	    return;
	  }

	  var SyntheticEventCtor = SyntheticEvent;
	  var reactEventType = domEventName;

	  switch (domEventName) {
	    case 'keypress':
	      // Firefox creates a keypress event for function keys too. This removes
	      // the unwanted keypress events. Enter is however both printable and
	      // non-printable. One would expect Tab to be as well (but it isn't).
	      if (getEventCharCode(nativeEvent) === 0) {
	        return;
	      }

	    /* falls through */

	    case 'keydown':
	    case 'keyup':
	      SyntheticEventCtor = SyntheticKeyboardEvent;
	      break;

	    case 'focusin':
	      reactEventType = 'focus';
	      SyntheticEventCtor = SyntheticFocusEvent;
	      break;

	    case 'focusout':
	      reactEventType = 'blur';
	      SyntheticEventCtor = SyntheticFocusEvent;
	      break;

	    case 'beforeblur':
	    case 'afterblur':
	      SyntheticEventCtor = SyntheticFocusEvent;
	      break;

	    case 'click':
	      // Firefox creates a click event on right mouse clicks. This removes the
	      // unwanted click events.
	      if (nativeEvent.button === 2) {
	        return;
	      }

	    /* falls through */

	    case 'auxclick':
	    case 'dblclick':
	    case 'mousedown':
	    case 'mousemove':
	    case 'mouseup': // TODO: Disabled elements should not respond to mouse events

	    /* falls through */

	    case 'mouseout':
	    case 'mouseover':
	    case 'contextmenu':
	      SyntheticEventCtor = SyntheticMouseEvent;
	      break;

	    case 'drag':
	    case 'dragend':
	    case 'dragenter':
	    case 'dragexit':
	    case 'dragleave':
	    case 'dragover':
	    case 'dragstart':
	    case 'drop':
	      SyntheticEventCtor = SyntheticDragEvent;
	      break;

	    case 'touchcancel':
	    case 'touchend':
	    case 'touchmove':
	    case 'touchstart':
	      SyntheticEventCtor = SyntheticTouchEvent;
	      break;

	    case ANIMATION_END:
	    case ANIMATION_ITERATION:
	    case ANIMATION_START:
	      SyntheticEventCtor = SyntheticAnimationEvent;
	      break;

	    case TRANSITION_END:
	      SyntheticEventCtor = SyntheticTransitionEvent;
	      break;

	    case 'scroll':
	      SyntheticEventCtor = SyntheticUIEvent;
	      break;

	    case 'wheel':
	      SyntheticEventCtor = SyntheticWheelEvent;
	      break;

	    case 'copy':
	    case 'cut':
	    case 'paste':
	      SyntheticEventCtor = SyntheticClipboardEvent;
	      break;

	    case 'gotpointercapture':
	    case 'lostpointercapture':
	    case 'pointercancel':
	    case 'pointerdown':
	    case 'pointermove':
	    case 'pointerout':
	    case 'pointerover':
	    case 'pointerup':
	      SyntheticEventCtor = SyntheticPointerEvent;
	      break;
	  }

	  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

	  {
	    // Some events don't bubble in the browser.
	    // In the past, React has always bubbled them, but this can be surprising.
	    // We're going to try aligning closer to the browser behavior by not bubbling
	    // them in React either. We'll start by not bubbling onScroll, and then expand.
	    var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
	    // nonDelegatedEvents list in DOMPluginEventSystem.
	    // Then we can remove this special list.
	    // This is a breaking change that can wait until React 18.
	    domEventName === 'scroll';

	    var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);

	    if (_listeners.length > 0) {
	      // Intentionally create event lazily.
	      var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);

	      dispatchQueue.push({
	        event: _event,
	        listeners: _listeners
	      });
	    }
	  }
	}

	// TODO: remove top-level side effect.
	registerSimpleEvents();
	registerEvents$2();
	registerEvents$1();
	registerEvents$3();
	registerEvents();

	function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  // TODO: we should remove the concept of a "SimpleEventPlugin".
	  // This is the basic functionality of the event system. All
	  // the other plugins are essentially polyfills. So the plugin
	  // should probably be inlined somewhere and have its logic
	  // be core the to event system. This would potentially allow
	  // us to ship builds of React without the polyfilled plugins below.
	  extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
	  var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
	  // event's native "bubble" phase, which means that we're
	  // not in the capture phase. That's because we emulate
	  // the capture phase here still. This is a trade-off,
	  // because in an ideal world we would not emulate and use
	  // the phases properly, like we do with the SimpleEvent
	  // plugin. However, the plugins below either expect
	  // emulation (EnterLeave) or use state localized to that
	  // plugin (BeforeInput, Change, Select). The state in
	  // these modules complicates things, as you'll essentially
	  // get the case where the capture phase event might change
	  // state, only for the following bubble event to come in
	  // later and not trigger anything as the state now
	  // invalidates the heuristics of the event plugin. We
	  // could alter all these plugins to work in such ways, but
	  // that might cause other unknown side-effects that we
	  // can't foresee right now.

	  if (shouldProcessPolyfillPlugins) {
	    extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	    extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	    extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	    extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	  }
	} // List of events that need to be individually attached to media elements.


	var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'resize', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather
	// set them on the actual target element itself. This is primarily
	// because these events do not consistently bubble in the DOM.

	var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));

	function executeDispatch(event, listener, currentTarget) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = currentTarget;
	  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
	  event.currentTarget = null;
	}

	function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
	  var previousInstance;

	  if (inCapturePhase) {
	    for (var i = dispatchListeners.length - 1; i >= 0; i--) {
	      var _dispatchListeners$i = dispatchListeners[i],
	          instance = _dispatchListeners$i.instance,
	          currentTarget = _dispatchListeners$i.currentTarget,
	          listener = _dispatchListeners$i.listener;

	      if (instance !== previousInstance && event.isPropagationStopped()) {
	        return;
	      }

	      executeDispatch(event, listener, currentTarget);
	      previousInstance = instance;
	    }
	  } else {
	    for (var _i = 0; _i < dispatchListeners.length; _i++) {
	      var _dispatchListeners$_i = dispatchListeners[_i],
	          _instance = _dispatchListeners$_i.instance,
	          _currentTarget = _dispatchListeners$_i.currentTarget,
	          _listener = _dispatchListeners$_i.listener;

	      if (_instance !== previousInstance && event.isPropagationStopped()) {
	        return;
	      }

	      executeDispatch(event, _listener, _currentTarget);
	      previousInstance = _instance;
	    }
	  }
	}

	function processDispatchQueue(dispatchQueue, eventSystemFlags) {
	  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

	  for (var i = 0; i < dispatchQueue.length; i++) {
	    var _dispatchQueue$i = dispatchQueue[i],
	        event = _dispatchQueue$i.event,
	        listeners = _dispatchQueue$i.listeners;
	    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
	  } // This would be a good time to rethrow if any of the event handlers threw.


	  rethrowCaughtError();
	}

	function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
	  var nativeEventTarget = getEventTarget(nativeEvent);
	  var dispatchQueue = [];
	  extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
	  processDispatchQueue(dispatchQueue, eventSystemFlags);
	}

	function listenToNonDelegatedEvent(domEventName, targetElement) {
	  {
	    if (!nonDelegatedEvents.has(domEventName)) {
	      error('Did not expect a listenToNonDelegatedEvent() call for "%s". ' + 'This is a bug in React. Please file an issue.', domEventName);
	    }
	  }

	  var isCapturePhaseListener = false;
	  var listenerSet = getEventListenerSet(targetElement);
	  var listenerSetKey = getListenerSetKey(domEventName);

	  if (!listenerSet.has(listenerSetKey)) {
	    addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
	    listenerSet.add(listenerSetKey);
	  }
	}
	function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
	  {
	    if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
	      error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. ' + 'This is a bug in React. Please file an issue.', domEventName);
	    }
	  }

	  var eventSystemFlags = 0;

	  if (isCapturePhaseListener) {
	    eventSystemFlags |= IS_CAPTURE_PHASE;
	  }

	  addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
	} // This is only used by createEventHandle when the
	var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
	function listenToAllSupportedEvents(rootContainerElement) {
	  if (!rootContainerElement[listeningMarker]) {
	    rootContainerElement[listeningMarker] = true;
	    allNativeEvents.forEach(function (domEventName) {
	      // We handle selectionchange separately because it
	      // doesn't bubble and needs to be on the document.
	      if (domEventName !== 'selectionchange') {
	        if (!nonDelegatedEvents.has(domEventName)) {
	          listenToNativeEvent(domEventName, false, rootContainerElement);
	        }

	        listenToNativeEvent(domEventName, true, rootContainerElement);
	      }
	    });
	    var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;

	    if (ownerDocument !== null) {
	      // The selectionchange event also needs deduplication
	      // but it is attached to the document.
	      if (!ownerDocument[listeningMarker]) {
	        ownerDocument[listeningMarker] = true;
	        listenToNativeEvent('selectionchange', false, ownerDocument);
	      }
	    }
	  }
	}

	function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
	  var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
	  // active and not passive.

	  var isPassiveListener = undefined;

	  if (passiveBrowserEventsSupported) {
	    // Browsers introduced an intervention, making these events
	    // passive by default on document. React doesn't bind them
	    // to document anymore, but changing this now would undo
	    // the performance wins from the change. So we emulate
	    // the existing behavior manually on the roots now.
	    // https://github.com/facebook/react/issues/19651
	    if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
	      isPassiveListener = true;
	    }
	  }

	  targetContainer =  targetContainer;


	  if (isCapturePhaseListener) {
	    if (isPassiveListener !== undefined) {
	      addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
	    } else {
	      addEventCaptureListener(targetContainer, domEventName, listener);
	    }
	  } else {
	    if (isPassiveListener !== undefined) {
	      addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
	    } else {
	      addEventBubbleListener(targetContainer, domEventName, listener);
	    }
	  }
	}

	function isMatchingRootContainer(grandContainer, targetContainer) {
	  return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
	}

	function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
	  var ancestorInst = targetInst;

	  if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
	    var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we

	    if (targetInst !== null) {
	      // The below logic attempts to work out if we need to change
	      // the target fiber to a different ancestor. We had similar logic
	      // in the legacy event system, except the big difference between
	      // systems is that the modern event system now has an event listener
	      // attached to each React Root and React Portal Root. Together,
	      // the DOM nodes representing these roots are the "rootContainer".
	      // To figure out which ancestor instance we should use, we traverse
	      // up the fiber tree from the target instance and attempt to find
	      // root boundaries that match that of our current "rootContainer".
	      // If we find that "rootContainer", we find the parent fiber
	      // sub-tree for that root and make that our ancestor instance.
	      var node = targetInst;

	      mainLoop: while (true) {
	        if (node === null) {
	          return;
	        }

	        var nodeTag = node.tag;

	        if (nodeTag === HostRoot || nodeTag === HostPortal) {
	          var container = node.stateNode.containerInfo;

	          if (isMatchingRootContainer(container, targetContainerNode)) {
	            break;
	          }

	          if (nodeTag === HostPortal) {
	            // The target is a portal, but it's not the rootContainer we're looking for.
	            // Normally portals handle their own events all the way down to the root.
	            // So we should be able to stop now. However, we don't know if this portal
	            // was part of *our* root.
	            var grandNode = node.return;

	            while (grandNode !== null) {
	              var grandTag = grandNode.tag;

	              if (grandTag === HostRoot || grandTag === HostPortal) {
	                var grandContainer = grandNode.stateNode.containerInfo;

	                if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
	                  // This is the rootContainer we're looking for and we found it as
	                  // a parent of the Portal. That means we can ignore it because the
	                  // Portal will bubble through to us.
	                  return;
	                }
	              }

	              grandNode = grandNode.return;
	            }
	          } // Now we need to find it's corresponding host fiber in the other
	          // tree. To do this we can use getClosestInstanceFromNode, but we
	          // need to validate that the fiber is a host instance, otherwise
	          // we need to traverse up through the DOM till we find the correct
	          // node that is from the other tree.


	          while (container !== null) {
	            var parentNode = getClosestInstanceFromNode(container);

	            if (parentNode === null) {
	              return;
	            }

	            var parentTag = parentNode.tag;

	            if (parentTag === HostComponent || parentTag === HostText) {
	              node = ancestorInst = parentNode;
	              continue mainLoop;
	            }

	            container = container.parentNode;
	          }
	        }

	        node = node.return;
	      }
	    }
	  }

	  batchedUpdates(function () {
	    return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
	  });
	}

	function createDispatchListener(instance, listener, currentTarget) {
	  return {
	    instance: instance,
	    listener: listener,
	    currentTarget: currentTarget
	  };
	}

	function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
	  var captureName = reactName !== null ? reactName + 'Capture' : null;
	  var reactEventName = inCapturePhase ? captureName : reactName;
	  var listeners = [];
	  var instance = targetFiber;
	  var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.

	  while (instance !== null) {
	    var _instance2 = instance,
	        stateNode = _instance2.stateNode,
	        tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)

	    if (tag === HostComponent && stateNode !== null) {
	      lastHostComponent = stateNode; // createEventHandle listeners


	      if (reactEventName !== null) {
	        var listener = getListener(instance, reactEventName);

	        if (listener != null) {
	          listeners.push(createDispatchListener(instance, listener, lastHostComponent));
	        }
	      }
	    } // If we are only accumulating events for the target, then we don't
	    // continue to propagate through the React fiber tree to find other
	    // listeners.


	    if (accumulateTargetOnly) {
	      break;
	    } // If we are processing the onBeforeBlur event, then we need to take

	    instance = instance.return;
	  }

	  return listeners;
	} // We should only use this function for:
	// - BeforeInputEventPlugin
	// - ChangeEventPlugin
	// - SelectEventPlugin
	// This is because we only process these plugins
	// in the bubble phase, so we need to accumulate two
	// phase event listeners (via emulation).

	function accumulateTwoPhaseListeners(targetFiber, reactName) {
	  var captureName = reactName + 'Capture';
	  var listeners = [];
	  var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.

	  while (instance !== null) {
	    var _instance3 = instance,
	        stateNode = _instance3.stateNode,
	        tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)

	    if (tag === HostComponent && stateNode !== null) {
	      var currentTarget = stateNode;
	      var captureListener = getListener(instance, captureName);

	      if (captureListener != null) {
	        listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
	      }

	      var bubbleListener = getListener(instance, reactName);

	      if (bubbleListener != null) {
	        listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
	      }
	    }

	    instance = instance.return;
	  }

	  return listeners;
	}

	function getParent(inst) {
	  if (inst === null) {
	    return null;
	  }

	  do {
	    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
	    // That is depending on if we want nested subtrees (layers) to bubble
	    // events to their parent. We could also go through parentNode on the
	    // host node but that wouldn't work for React Native and doesn't let us
	    // do the portal feature.
	  } while (inst && inst.tag !== HostComponent);

	  if (inst) {
	    return inst;
	  }

	  return null;
	}
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */


	function getLowestCommonAncestor(instA, instB) {
	  var nodeA = instA;
	  var nodeB = instB;
	  var depthA = 0;

	  for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
	    depthA++;
	  }

	  var depthB = 0;

	  for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
	    depthB++;
	  } // If A is deeper, crawl up.


	  while (depthA - depthB > 0) {
	    nodeA = getParent(nodeA);
	    depthA--;
	  } // If B is deeper, crawl up.


	  while (depthB - depthA > 0) {
	    nodeB = getParent(nodeB);
	    depthB--;
	  } // Walk in lockstep until we find a match.


	  var depth = depthA;

	  while (depth--) {
	    if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
	      return nodeA;
	    }

	    nodeA = getParent(nodeA);
	    nodeB = getParent(nodeB);
	  }

	  return null;
	}

	function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
	  var registrationName = event._reactName;
	  var listeners = [];
	  var instance = target;

	  while (instance !== null) {
	    if (instance === common) {
	      break;
	    }

	    var _instance4 = instance,
	        alternate = _instance4.alternate,
	        stateNode = _instance4.stateNode,
	        tag = _instance4.tag;

	    if (alternate !== null && alternate === common) {
	      break;
	    }

	    if (tag === HostComponent && stateNode !== null) {
	      var currentTarget = stateNode;

	      if (inCapturePhase) {
	        var captureListener = getListener(instance, registrationName);

	        if (captureListener != null) {
	          listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
	        }
	      } else if (!inCapturePhase) {
	        var bubbleListener = getListener(instance, registrationName);

	        if (bubbleListener != null) {
	          listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
	        }
	      }
	    }

	    instance = instance.return;
	  }

	  if (listeners.length !== 0) {
	    dispatchQueue.push({
	      event: event,
	      listeners: listeners
	    });
	  }
	} // We should only use this function for:
	// - EnterLeaveEventPlugin
	// This is because we only process this plugin
	// in the bubble phase, so we need to accumulate two
	// phase event listeners.


	function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;

	  if (from !== null) {
	    accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
	  }

	  if (to !== null && enterEvent !== null) {
	    accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
	  }
	}
	function getListenerSetKey(domEventName, capture) {
	  return domEventName + "__" + ('bubble');
	}

	var didWarnInvalidHydration = false;
	var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
	var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
	var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
	var AUTOFOCUS = 'autoFocus';
	var CHILDREN = 'children';
	var STYLE = 'style';
	var HTML$1 = '__html';
	var warnedUnknownTags;
	var validatePropertiesInDevelopment;
	var warnForPropDifference;
	var warnForExtraAttributes;
	var warnForInvalidEventListener;
	var canDiffStyleForHydrationWarning;
	var normalizeHTML;

	{
	  warnedUnknownTags = {
	    // There are working polyfills for <dialog>. Let people use it.
	    dialog: true,
	    // Electron ships a custom <webview> tag to display external web content in
	    // an isolated frame and process.
	    // This tag is not present in non Electron environments such as JSDom which
	    // is often used for testing purposes.
	    // @see https://electronjs.org/docs/api/webview-tag
	    webview: true
	  };

	  validatePropertiesInDevelopment = function (type, props) {
	    validateProperties(type, props);
	    validateProperties$1(type, props);
	    validateProperties$2(type, props, {
	      registrationNameDependencies: registrationNameDependencies,
	      possibleRegistrationNames: possibleRegistrationNames
	    });
	  }; // IE 11 parses & normalizes the style attribute as opposed to other
	  // browsers. It adds spaces and sorts the properties in some
	  // non-alphabetical order. Handling that would require sorting CSS
	  // properties in the client & server versions or applying
	  // `expectedStyle` to a temporary DOM node to read its `style` attribute
	  // normalized. Since it only affects IE, we're skipping style warnings
	  // in that browser completely in favor of doing all that work.
	  // See https://github.com/facebook/react/issues/11807


	  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;

	  warnForPropDifference = function (propName, serverValue, clientValue) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
	    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

	    if (normalizedServerValue === normalizedClientValue) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
	  };

	  warnForExtraAttributes = function (attributeNames) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;
	    var names = [];
	    attributeNames.forEach(function (name) {
	      names.push(name);
	    });

	    error('Extra attributes from the server: %s', names);
	  };

	  warnForInvalidEventListener = function (registrationName, listener) {
	    if (listener === false) {
	      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
	    } else {
	      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
	    }
	  }; // Parse the HTML and read it back to normalize the HTML string so that it
	  // can be used for comparison.


	  normalizeHTML = function (parent, html) {
	    // We could have created a separate document here to avoid
	    // re-initializing custom elements if they exist. But this breaks
	    // how <noscript> is being handled. So we use the same document.
	    // See the discussion in https://github.com/facebook/react/pull/11157.
	    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
	    testElement.innerHTML = html;
	    return testElement.innerHTML;
	  };
	} // HTML parsing normalizes CR and CRLF to LF.
	// It also can turn \u0000 into \uFFFD inside attributes.
	// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
	// If we have a mismatch, it might be caused by that.
	// We will still patch up in this case but not fire the warning.


	var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
	var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

	function normalizeMarkupForTextOrAttribute(markup) {
	  {
	    checkHtmlStringCoercion(markup);
	  }

	  var markupString = typeof markup === 'string' ? markup : '' + markup;
	  return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
	}

	function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
	  var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
	  var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

	  if (normalizedServerText === normalizedClientText) {
	    return;
	  }

	  if (shouldWarnDev) {
	    {
	      if (!didWarnInvalidHydration) {
	        didWarnInvalidHydration = true;

	        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
	      }
	    }
	  }

	  if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
	    // In concurrent roots, we throw when there's a text mismatch and revert to
	    // client rendering, up to the nearest Suspense boundary.
	    throw new Error('Text content does not match server-rendered HTML.');
	  }
	}

	function getOwnerDocumentFromRootContainer(rootContainerElement) {
	  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
	}

	function noop() {}

	function trapClickOnNonInteractiveElement(node) {
	  // Mobile Safari does not fire properly bubble click events on
	  // non-interactive elements, which means delegated click listeners do not
	  // fire. The workaround for this bug involves attaching an empty click
	  // listener on the target node.
	  // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	  // Just set it using the onclick property so that we don't have to manage any
	  // bookkeeping for it. Not sure if we need to clear it when the listener is
	  // removed.
	  // TODO: Only do this for the relevant Safaris maybe?
	  node.onclick = noop;
	}

	function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
	  for (var propKey in nextProps) {
	    if (!nextProps.hasOwnProperty(propKey)) {
	      continue;
	    }

	    var nextProp = nextProps[propKey];

	    if (propKey === STYLE) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


	      setValueForStyles(domElement, nextProp);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

	      if (nextHtml != null) {
	        setInnerHTML(domElement, nextHtml);
	      }
	    } else if (propKey === CHILDREN) {
	      if (typeof nextProp === 'string') {
	        // Avoid setting initial textContent when the text is empty. In IE11 setting
	        // textContent on a <textarea> will cause the placeholder to not
	        // show within the <textarea> until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

	        if (canSetTextContent) {
	          setTextContent(domElement, nextProp);
	        }
	      } else if (typeof nextProp === 'number') {
	        setTextContent(domElement, '' + nextProp);
	      }
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        if (propKey === 'onScroll') {
	          listenToNonDelegatedEvent('scroll', domElement);
	        }
	      }
	    } else if (nextProp != null) {
	      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
	    }
	  }
	}

	function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
	  // TODO: Handle wasCustomComponentTag
	  for (var i = 0; i < updatePayload.length; i += 2) {
	    var propKey = updatePayload[i];
	    var propValue = updatePayload[i + 1];

	    if (propKey === STYLE) {
	      setValueForStyles(domElement, propValue);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      setInnerHTML(domElement, propValue);
	    } else if (propKey === CHILDREN) {
	      setTextContent(domElement, propValue);
	    } else {
	      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
	    }
	  }
	}

	function createElement(type, props, rootContainerElement, parentNamespace) {
	  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
	  // tags get no namespace.

	  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
	  var domElement;
	  var namespaceURI = parentNamespace;

	  if (namespaceURI === HTML_NAMESPACE) {
	    namespaceURI = getIntrinsicNamespace(type);
	  }

	  if (namespaceURI === HTML_NAMESPACE) {
	    {
	      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
	      // allow <SVG> or <mATH>.

	      if (!isCustomComponentTag && type !== type.toLowerCase()) {
	        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
	      }
	    }

	    if (type === 'script') {
	      // Create the script via .innerHTML so its "parser-inserted" flag is
	      // set to true and it does not execute
	      var div = ownerDocument.createElement('div');

	      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
	      // This is guaranteed to yield a script element.

	      var firstChild = div.firstChild;
	      domElement = div.removeChild(firstChild);
	    } else if (typeof props.is === 'string') {
	      // $FlowIssue `createElement` should be updated for Web Components
	      domElement = ownerDocument.createElement(type, {
	        is: props.is
	      });
	    } else {
	      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
	      // See discussion in https://github.com/facebook/react/pull/6896
	      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
	      // attributes on `select`s needs to be added before `option`s are inserted.
	      // This prevents:
	      // - a bug where the `select` does not scroll to the correct option because singular
	      //  `select` elements automatically pick the first item #13222
	      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
	      // See https://github.com/facebook/react/issues/13222
	      // and https://github.com/facebook/react/issues/14239

	      if (type === 'select') {
	        var node = domElement;

	        if (props.multiple) {
	          node.multiple = true;
	        } else if (props.size) {
	          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
	          // it is possible that no option is selected.
	          //
	          // This is only necessary when a select in "single selection mode".
	          node.size = props.size;
	        }
	      }
	    }
	  } else {
	    domElement = ownerDocument.createElementNS(namespaceURI, type);
	  }

	  {
	    if (namespaceURI === HTML_NAMESPACE) {
	      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !hasOwnProperty.call(warnedUnknownTags, type)) {
	        warnedUnknownTags[type] = true;

	        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
	      }
	    }
	  }

	  return domElement;
	}
	function createTextNode(text, rootContainerElement) {
	  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
	}
	function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
	  var isCustomComponentTag = isCustomComponent(tag, rawProps);

	  {
	    validatePropertiesInDevelopment(tag, rawProps);
	  } // TODO: Make sure that we check isMounted before firing any of these events.


	  var props;

	  switch (tag) {
	    case 'dialog':
	      listenToNonDelegatedEvent('cancel', domElement);
	      listenToNonDelegatedEvent('close', domElement);
	      props = rawProps;
	      break;

	    case 'iframe':
	    case 'object':
	    case 'embed':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the load event.
	      listenToNonDelegatedEvent('load', domElement);
	      props = rawProps;
	      break;

	    case 'video':
	    case 'audio':
	      // We listen to these events in case to ensure emulated bubble
	      // listeners still fire for all the media events.
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
	      }

	      props = rawProps;
	      break;

	    case 'source':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the error event.
	      listenToNonDelegatedEvent('error', domElement);
	      props = rawProps;
	      break;

	    case 'img':
	    case 'image':
	    case 'link':
	      // We listen to these events in case to ensure emulated bubble
	      // listeners still fire for error and load events.
	      listenToNonDelegatedEvent('error', domElement);
	      listenToNonDelegatedEvent('load', domElement);
	      props = rawProps;
	      break;

	    case 'details':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the toggle event.
	      listenToNonDelegatedEvent('toggle', domElement);
	      props = rawProps;
	      break;

	    case 'input':
	      initWrapperState(domElement, rawProps);
	      props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;

	    case 'option':
	      validateProps(domElement, rawProps);
	      props = rawProps;
	      break;

	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      props = getHostProps$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;

	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;

	    default:
	      props = rawProps;
	  }

	  assertValidProps(tag, props);
	  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, false);
	      break;

	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement);
	      break;

	    case 'option':
	      postMountWrapper$1(domElement, rawProps);
	      break;

	    case 'select':
	      postMountWrapper$2(domElement, rawProps);
	      break;

	    default:
	      if (typeof props.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }
	} // Calculate the diff between the two objects.

	function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
	  {
	    validatePropertiesInDevelopment(tag, nextRawProps);
	  }

	  var updatePayload = null;
	  var lastProps;
	  var nextProps;

	  switch (tag) {
	    case 'input':
	      lastProps = getHostProps(domElement, lastRawProps);
	      nextProps = getHostProps(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'select':
	      lastProps = getHostProps$1(domElement, lastRawProps);
	      nextProps = getHostProps$1(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'textarea':
	      lastProps = getHostProps$2(domElement, lastRawProps);
	      nextProps = getHostProps$2(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    default:
	      lastProps = lastRawProps;
	      nextProps = nextRawProps;

	      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }

	  assertValidProps(tag, nextProps);
	  var propKey;
	  var styleName;
	  var styleUpdates = null;

	  for (propKey in lastProps) {
	    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	      continue;
	    }

	    if (propKey === STYLE) {
	      var lastStyle = lastProps[propKey];

	      for (styleName in lastStyle) {
	        if (lastStyle.hasOwnProperty(styleName)) {
	          if (!styleUpdates) {
	            styleUpdates = {};
	          }

	          styleUpdates[styleName] = '';
	        }
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
	      // This is a special case. If any listener updates we need to ensure
	      // that the "current" fiber pointer gets updated so we need a commit
	      // to update this element.
	      if (!updatePayload) {
	        updatePayload = [];
	      }
	    } else {
	      // For all other deleted properties we add it to the queue. We use
	      // the allowed property list in the commit phase instead.
	      (updatePayload = updatePayload || []).push(propKey, null);
	    }
	  }

	  for (propKey in nextProps) {
	    var nextProp = nextProps[propKey];
	    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

	    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	      continue;
	    }

	    if (propKey === STYLE) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      }

	      if (lastProp) {
	        // Unset styles on `lastProp` but not on `nextProp`.
	        for (styleName in lastProp) {
	          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }

	            styleUpdates[styleName] = '';
	          }
	        } // Update styles that changed since `lastProp`.


	        for (styleName in nextProp) {
	          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }

	            styleUpdates[styleName] = nextProp[styleName];
	          }
	        }
	      } else {
	        // Relies on `updateStylesByID` not mutating `styleUpdates`.
	        if (!styleUpdates) {
	          if (!updatePayload) {
	            updatePayload = [];
	          }

	          updatePayload.push(propKey, styleUpdates);
	        }

	        styleUpdates = nextProp;
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
	      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

	      if (nextHtml != null) {
	        if (lastHtml !== nextHtml) {
	          (updatePayload = updatePayload || []).push(propKey, nextHtml);
	        }
	      }
	    } else if (propKey === CHILDREN) {
	      if (typeof nextProp === 'string' || typeof nextProp === 'number') {
	        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
	      }
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        // We eagerly listen to this even though we haven't committed yet.
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        if (propKey === 'onScroll') {
	          listenToNonDelegatedEvent('scroll', domElement);
	        }
	      }

	      if (!updatePayload && lastProp !== nextProp) {
	        // This is a special case. If any listener updates we need to ensure
	        // that the "current" props pointer gets updated so we need a commit
	        // to update this element.
	        updatePayload = [];
	      }
	    } else {
	      // For any other property we always add it to the queue and then we
	      // filter it out using the allowed property list during the commit.
	      (updatePayload = updatePayload || []).push(propKey, nextProp);
	    }
	  }

	  if (styleUpdates) {
	    {
	      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
	    }

	    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
	  }

	  return updatePayload;
	} // Apply the diff.

	function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
	  // Update checked *before* name.
	  // In the middle of an update, it is possible to have multiple checked.
	  // When a checked radio tries to change name, browser makes another radio's checked false.
	  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
	    updateChecked(domElement, nextRawProps);
	  }

	  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
	  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

	  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
	  // changed.

	  switch (tag) {
	    case 'input':
	      // Update the wrapper around inputs *after* updating props. This has to
	      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
	      // raise warnings and prevent the new value from being assigned.
	      updateWrapper(domElement, nextRawProps);
	      break;

	    case 'textarea':
	      updateWrapper$1(domElement, nextRawProps);
	      break;

	    case 'select':
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      postUpdateWrapper(domElement, nextRawProps);
	      break;
	  }
	}

	function getPossibleStandardName(propName) {
	  {
	    var lowerCasedName = propName.toLowerCase();

	    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      return null;
	    }

	    return possibleStandardNames[lowerCasedName] || null;
	  }
	}

	function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
	  var isCustomComponentTag;
	  var extraAttributeNames;

	  {
	    isCustomComponentTag = isCustomComponent(tag, rawProps);
	    validatePropertiesInDevelopment(tag, rawProps);
	  } // TODO: Make sure that we check isMounted before firing any of these events.


	  switch (tag) {
	    case 'dialog':
	      listenToNonDelegatedEvent('cancel', domElement);
	      listenToNonDelegatedEvent('close', domElement);
	      break;

	    case 'iframe':
	    case 'object':
	    case 'embed':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the load event.
	      listenToNonDelegatedEvent('load', domElement);
	      break;

	    case 'video':
	    case 'audio':
	      // We listen to these events in case to ensure emulated bubble
	      // listeners still fire for all the media events.
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
	      }

	      break;

	    case 'source':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the error event.
	      listenToNonDelegatedEvent('error', domElement);
	      break;

	    case 'img':
	    case 'image':
	    case 'link':
	      // We listen to these events in case to ensure emulated bubble
	      // listeners still fire for error and load events.
	      listenToNonDelegatedEvent('error', domElement);
	      listenToNonDelegatedEvent('load', domElement);
	      break;

	    case 'details':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the toggle event.
	      listenToNonDelegatedEvent('toggle', domElement);
	      break;

	    case 'input':
	      initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;

	    case 'option':
	      validateProps(domElement, rawProps);
	      break;

	    case 'select':
	      initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;

	    case 'textarea':
	      initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;
	  }

	  assertValidProps(tag, rawProps);

	  {
	    extraAttributeNames = new Set();
	    var attributes = domElement.attributes;

	    for (var _i = 0; _i < attributes.length; _i++) {
	      var name = attributes[_i].name.toLowerCase();

	      switch (name) {
	        // Controlled attributes are not validated
	        // TODO: Only ignore them on controlled tags.
	        case 'value':
	          break;

	        case 'checked':
	          break;

	        case 'selected':
	          break;

	        default:
	          // Intentionally use the original name.
	          // See discussion in https://github.com/facebook/react/pull/10676.
	          extraAttributeNames.add(attributes[_i].name);
	      }
	    }
	  }

	  var updatePayload = null;

	  for (var propKey in rawProps) {
	    if (!rawProps.hasOwnProperty(propKey)) {
	      continue;
	    }

	    var nextProp = rawProps[propKey];

	    if (propKey === CHILDREN) {
	      // For text content children we compare against textContent. This
	      // might match additional HTML that is hidden when we read it using
	      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
	      // satisfies our requirement. Our requirement is not to produce perfect
	      // HTML and attributes. Ideally we should preserve structure but it's
	      // ok not to if the visible content is still enough to indicate what
	      // even listeners these nodes might be wired up to.
	      // TODO: Warn if there is more than a single textNode as a child.
	      // TODO: Should we use domElement.firstChild.nodeValue to compare?
	      if (typeof nextProp === 'string') {
	        if (domElement.textContent !== nextProp) {
	          if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	            checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
	          }

	          updatePayload = [CHILDREN, nextProp];
	        }
	      } else if (typeof nextProp === 'number') {
	        if (domElement.textContent !== '' + nextProp) {
	          if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	            checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
	          }

	          updatePayload = [CHILDREN, '' + nextProp];
	        }
	      }
	    } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        if (propKey === 'onScroll') {
	          listenToNonDelegatedEvent('scroll', domElement);
	        }
	      }
	    } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
	    typeof isCustomComponentTag === 'boolean') {
	      // Validate that the properties correspond to their expected values.
	      var serverValue = void 0;
	      var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);

	      if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
	      // TODO: Only ignore them on controlled tags.
	      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	        var serverHTML = domElement.innerHTML;
	        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

	        if (nextHtml != null) {
	          var expectedHTML = normalizeHTML(domElement, nextHtml);

	          if (expectedHTML !== serverHTML) {
	            warnForPropDifference(propKey, serverHTML, expectedHTML);
	          }
	        }
	      } else if (propKey === STYLE) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey);

	        if (canDiffStyleForHydrationWarning) {
	          var expectedStyle = createDangerousStringForStyles(nextProp);
	          serverValue = domElement.getAttribute('style');

	          if (expectedStyle !== serverValue) {
	            warnForPropDifference(propKey, serverValue, expectedStyle);
	          }
	        }
	      } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey.toLowerCase());
	        serverValue = getValueForAttribute(domElement, propKey, nextProp);

	        if (nextProp !== serverValue) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
	        var isMismatchDueToBadCasing = false;

	        if (propertyInfo !== null) {
	          // $FlowFixMe - Should be inferred as not undefined.
	          extraAttributeNames.delete(propertyInfo.attributeName);
	          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
	        } else {
	          var ownNamespace = parentNamespace;

	          if (ownNamespace === HTML_NAMESPACE) {
	            ownNamespace = getIntrinsicNamespace(tag);
	          }

	          if (ownNamespace === HTML_NAMESPACE) {
	            // $FlowFixMe - Should be inferred as not undefined.
	            extraAttributeNames.delete(propKey.toLowerCase());
	          } else {
	            var standardName = getPossibleStandardName(propKey);

	            if (standardName !== null && standardName !== propKey) {
	              // If an SVG prop is supplied with bad casing, it will
	              // be successfully parsed from HTML, but will produce a mismatch
	              // (and would be incorrectly rendered on the client).
	              // However, we already warn about bad casing elsewhere.
	              // So we'll skip the misleading extra mismatch warning in this case.
	              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

	              extraAttributeNames.delete(standardName);
	            } // $FlowFixMe - Should be inferred as not undefined.


	            extraAttributeNames.delete(propKey);
	          }

	          serverValue = getValueForAttribute(domElement, propKey, nextProp);
	        }

	        var dontWarnCustomElement = enableCustomElementPropertySupport  ;

	        if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      }
	    }
	  }

	  {
	    if (shouldWarnDev) {
	      if ( // $FlowFixMe - Should be inferred as not undefined.
	      extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        warnForExtraAttributes(extraAttributeNames);
	      }
	    }
	  }

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, true);
	      break;

	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement);
	      break;

	    case 'select':
	    case 'option':
	      // For input and textarea we current always set the value property at
	      // post mount to force it to diverge from attributes. However, for
	      // option and select we don't quite do the same thing and select
	      // is not resilient to the DOM state changing so we don't do that here.
	      // TODO: Consider not doing this for input and textarea.
	      break;

	    default:
	      if (typeof rawProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }

	  return updatePayload;
	}
	function diffHydratedText(textNode, text, isConcurrentMode) {
	  var isDifferent = textNode.nodeValue !== text;
	  return isDifferent;
	}
	function warnForDeletedHydratableElement(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForDeletedHydratableText(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForInsertedHydratedElement(parentNode, tag, props) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForInsertedHydratedText(parentNode, text) {
	  {
	    if (text === '') {
	      // We expect to insert empty text nodes since they're not represented in
	      // the HTML.
	      // TODO: Remove this special case if we can just avoid inserting empty
	      // text nodes.
	      return;
	    }

	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
	  }
	}
	function restoreControlledState$3(domElement, tag, props) {
	  switch (tag) {
	    case 'input':
	      restoreControlledState(domElement, props);
	      return;

	    case 'textarea':
	      restoreControlledState$2(domElement, props);
	      return;

	    case 'select':
	      restoreControlledState$1(domElement, props);
	      return;
	  }
	}

	var validateDOMNesting = function () {};

	var updatedAncestorInfo = function () {};

	{
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

	  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	  var emptyAncestorInfo = {
	    current: null,
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  updatedAncestorInfo = function (oldInfo, tag) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);

	    var info = {
	      tag: tag
	    };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }

	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    } // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }

	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }

	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }

	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }

	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }

	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }

	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };
	  /**
	   * Returns whether
	   */


	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';

	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but

	      case 'option':
	        return tag === '#text';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

	      case 'html':
	        return tag === 'head' || tag === 'body' || tag === 'frameset';

	      case 'frameset':
	        return tag === 'frame';

	      case '#document':
	        return tag === 'html';
	    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frameset':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };
	  /**
	   * Returns whether
	   */


	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  var didWarn$1 = {};

	  validateDOMNesting = function (childTag, childText, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      if (childTag != null) {
	        error('validateDOMNesting: when childText is passed, childTag should be null');
	      }

	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var invalidParentOrAncestor = invalidParent || invalidAncestor;

	    if (!invalidParentOrAncestor) {
	      return;
	    }

	    var ancestorTag = invalidParentOrAncestor.tag;
	    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;

	    if (didWarn$1[warnKey]) {
	      return;
	    }

	    didWarn$1[warnKey] = true;
	    var tagDisplayName = childTag;
	    var whitespaceInfo = '';

	    if (childTag === '#text') {
	      if (/\S/.test(childText)) {
	        tagDisplayName = 'Text nodes';
	      } else {
	        tagDisplayName = 'Whitespace text nodes';
	        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
	      }
	    } else {
	      tagDisplayName = '<' + childTag + '>';
	    }

	    if (invalidParent) {
	      var info = '';

	      if (ancestorTag === 'table' && childTag === 'tr') {
	        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
	      }

	      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
	    } else {
	      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
	    }
	  };
	}

	var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
	var SUSPENSE_START_DATA = '$';
	var SUSPENSE_END_DATA = '/$';
	var SUSPENSE_PENDING_START_DATA = '$?';
	var SUSPENSE_FALLBACK_START_DATA = '$!';
	var STYLE$1 = 'style';
	var eventsEnabled = null;
	var selectionInformation = null;
	function getRootHostContext(rootContainerInstance) {
	  var type;
	  var namespace;
	  var nodeType = rootContainerInstance.nodeType;

	  switch (nodeType) {
	    case DOCUMENT_NODE:
	    case DOCUMENT_FRAGMENT_NODE:
	      {
	        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
	        var root = rootContainerInstance.documentElement;
	        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
	        break;
	      }

	    default:
	      {
	        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
	        var ownNamespace = container.namespaceURI || null;
	        type = container.tagName;
	        namespace = getChildNamespace(ownNamespace, type);
	        break;
	      }
	  }

	  {
	    var validatedTag = type.toLowerCase();
	    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
	    return {
	      namespace: namespace,
	      ancestorInfo: ancestorInfo
	    };
	  }
	}
	function getChildHostContext(parentHostContext, type, rootContainerInstance) {
	  {
	    var parentHostContextDev = parentHostContext;
	    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
	    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
	    return {
	      namespace: namespace,
	      ancestorInfo: ancestorInfo
	    };
	  }
	}
	function getPublicInstance(instance) {
	  return instance;
	}
	function prepareForCommit(containerInfo) {
	  eventsEnabled = isEnabled();
	  selectionInformation = getSelectionInformation();
	  var activeInstance = null;

	  setEnabled(false);
	  return activeInstance;
	}
	function resetAfterCommit(containerInfo) {
	  restoreSelection(selectionInformation);
	  setEnabled(eventsEnabled);
	  eventsEnabled = null;
	  selectionInformation = null;
	}
	function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  var parentNamespace;

	  {
	    // TODO: take namespace into account when validating.
	    var hostContextDev = hostContext;
	    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

	    if (typeof props.children === 'string' || typeof props.children === 'number') {
	      var string = '' + props.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }

	    parentNamespace = hostContextDev.namespace;
	  }

	  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
	  precacheFiberNode(internalInstanceHandle, domElement);
	  updateFiberProps(domElement, props);
	  return domElement;
	}
	function appendInitialChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}
	function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
	  setInitialProperties(domElement, type, props, rootContainerInstance);

	  switch (type) {
	    case 'button':
	    case 'input':
	    case 'select':
	    case 'textarea':
	      return !!props.autoFocus;

	    case 'img':
	      return true;

	    default:
	      return false;
	  }
	}
	function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
	  {
	    var hostContextDev = hostContext;

	    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
	      var string = '' + newProps.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }
	  }

	  return diffProperties(domElement, type, oldProps, newProps);
	}
	function shouldSetTextContent(type, props) {
	  return type === 'textarea' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
	}
	function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
	  {
	    var hostContextDev = hostContext;
	    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
	  }

	  var textNode = createTextNode(text, rootContainerInstance);
	  precacheFiberNode(internalInstanceHandle, textNode);
	  return textNode;
	}
	function getCurrentEventPriority() {
	  var currentEvent = window.event;

	  if (currentEvent === undefined) {
	    return DefaultEventPriority;
	  }

	  return getEventPriority(currentEvent.type);
	}
	// if a component just imports ReactDOM (e.g. for findDOMNode).
	// Some environments might not have setTimeout or clearTimeout.

	var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
	var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
	var noTimeout = -1;
	var localPromise = typeof Promise === 'function' ? Promise : undefined; // -------------------
	var scheduleMicrotask = typeof queueMicrotask === 'function' ? queueMicrotask : typeof localPromise !== 'undefined' ? function (callback) {
	  return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
	} : scheduleTimeout; // TODO: Determine the best fallback here.

	function handleErrorInNextTick(error) {
	  setTimeout(function () {
	    throw error;
	  });
	} // -------------------
	function commitMount(domElement, type, newProps, internalInstanceHandle) {
	  // Despite the naming that might imply otherwise, this method only
	  // fires if there is an `Update` effect scheduled during mounting.
	  // This happens if `finalizeInitialChildren` returns `true` (which it
	  // does to implement the `autoFocus` attribute on the client). But
	  // there are also other cases when this might happen (such as patching
	  // up text content during hydration mismatch). So we'll check this again.
	  switch (type) {
	    case 'button':
	    case 'input':
	    case 'select':
	    case 'textarea':
	      if (newProps.autoFocus) {
	        domElement.focus();
	      }

	      return;

	    case 'img':
	      {
	        if (newProps.src) {
	          domElement.src = newProps.src;
	        }

	        return;
	      }
	  }
	}
	function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
	  // Apply the diff to the DOM node.
	  updateProperties(domElement, updatePayload, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with
	  // with current event handlers.

	  updateFiberProps(domElement, newProps);
	}
	function resetTextContent(domElement) {
	  setTextContent(domElement, '');
	}
	function commitTextUpdate(textInstance, oldText, newText) {
	  textInstance.nodeValue = newText;
	}
	function appendChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}
	function appendChildToContainer(container, child) {
	  var parentNode;

	  if (container.nodeType === COMMENT_NODE) {
	    parentNode = container.parentNode;
	    parentNode.insertBefore(child, container);
	  } else {
	    parentNode = container;
	    parentNode.appendChild(child);
	  } // This container might be used for a portal.
	  // If something inside a portal is clicked, that click should bubble
	  // through the React tree. However, on Mobile Safari the click would
	  // never bubble through the *DOM* tree unless an ancestor with onclick
	  // event exists. So we wouldn't see it and dispatch it.
	  // This is why we ensure that non React root containers have inline onclick
	  // defined.
	  // https://github.com/facebook/react/issues/11918


	  var reactRootContainer = container._reactRootContainer;

	  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
	    // TODO: This cast may not be sound for SVG, MathML or custom elements.
	    trapClickOnNonInteractiveElement(parentNode);
	  }
	}
	function insertBefore(parentInstance, child, beforeChild) {
	  parentInstance.insertBefore(child, beforeChild);
	}
	function insertInContainerBefore(container, child, beforeChild) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.insertBefore(child, beforeChild);
	  } else {
	    container.insertBefore(child, beforeChild);
	  }
	}

	function removeChild(parentInstance, child) {
	  parentInstance.removeChild(child);
	}
	function removeChildFromContainer(container, child) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.removeChild(child);
	  } else {
	    container.removeChild(child);
	  }
	}
	function clearSuspenseBoundary(parentInstance, suspenseInstance) {
	  var node = suspenseInstance; // Delete all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  do {
	    var nextNode = node.nextSibling;
	    parentInstance.removeChild(node);

	    if (nextNode && nextNode.nodeType === COMMENT_NODE) {
	      var data = nextNode.data;

	      if (data === SUSPENSE_END_DATA) {
	        if (depth === 0) {
	          parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.

	          retryIfBlockedOn(suspenseInstance);
	          return;
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
	        depth++;
	      }
	    }

	    node = nextNode;
	  } while (node); // TODO: Warn, we didn't find the end comment boundary.
	  // Retry if any event replaying was blocked on this.


	  retryIfBlockedOn(suspenseInstance);
	}
	function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
	  if (container.nodeType === COMMENT_NODE) {
	    clearSuspenseBoundary(container.parentNode, suspenseInstance);
	  } else if (container.nodeType === ELEMENT_NODE) {
	    clearSuspenseBoundary(container, suspenseInstance);
	  } // Retry if any event replaying was blocked on this.


	  retryIfBlockedOn(container);
	}
	function hideInstance(instance) {
	  // TODO: Does this work for all element types? What about MathML? Should we
	  // pass host context to this method?
	  instance = instance;
	  var style = instance.style;

	  if (typeof style.setProperty === 'function') {
	    style.setProperty('display', 'none', 'important');
	  } else {
	    style.display = 'none';
	  }
	}
	function hideTextInstance(textInstance) {
	  textInstance.nodeValue = '';
	}
	function unhideInstance(instance, props) {
	  instance = instance;
	  var styleProp = props[STYLE$1];
	  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
	  instance.style.display = dangerousStyleValue('display', display);
	}
	function unhideTextInstance(textInstance, text) {
	  textInstance.nodeValue = text;
	}
	function clearContainer(container) {
	  if (container.nodeType === ELEMENT_NODE) {
	    container.textContent = '';
	  } else if (container.nodeType === DOCUMENT_NODE) {
	    if (container.documentElement) {
	      container.removeChild(container.documentElement);
	    }
	  }
	} // -------------------
	function canHydrateInstance(instance, type, props) {
	  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
	    return null;
	  } // This has now been refined to an element node.


	  return instance;
	}
	function canHydrateTextInstance(instance, text) {
	  if (text === '' || instance.nodeType !== TEXT_NODE) {
	    // Empty strings are not parsed by HTML so there won't be a correct match here.
	    return null;
	  } // This has now been refined to a text node.


	  return instance;
	}
	function canHydrateSuspenseInstance(instance) {
	  if (instance.nodeType !== COMMENT_NODE) {
	    // Empty strings are not parsed by HTML so there won't be a correct match here.
	    return null;
	  } // This has now been refined to a suspense node.


	  return instance;
	}
	function isSuspenseInstancePending(instance) {
	  return instance.data === SUSPENSE_PENDING_START_DATA;
	}
	function isSuspenseInstanceFallback(instance) {
	  return instance.data === SUSPENSE_FALLBACK_START_DATA;
	}
	function getSuspenseInstanceFallbackErrorDetails(instance) {
	  var dataset = instance.nextSibling && instance.nextSibling.dataset;
	  var digest, message, stack;

	  if (dataset) {
	    digest = dataset.dgst;

	    {
	      message = dataset.msg;
	      stack = dataset.stck;
	    }
	  }

	  {
	    return {
	      message: message,
	      digest: digest,
	      stack: stack
	    };
	  } // let value = {message: undefined, hash: undefined};
	  // const nextSibling = instance.nextSibling;
	  // if (nextSibling) {
	  //   const dataset = ((nextSibling: any): HTMLTemplateElement).dataset;
	  //   value.message = dataset.msg;
	  //   value.hash = dataset.hash;
	  //   if (true) {
	  //     value.stack = dataset.stack;
	  //   }
	  // }
	  // return value;

	}
	function registerSuspenseInstanceRetry(instance, callback) {
	  instance._reactRetry = callback;
	}

	function getNextHydratable(node) {
	  // Skip non-hydratable nodes.
	  for (; node != null; node = node.nextSibling) {
	    var nodeType = node.nodeType;

	    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
	      break;
	    }

	    if (nodeType === COMMENT_NODE) {
	      var nodeData = node.data;

	      if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
	        break;
	      }

	      if (nodeData === SUSPENSE_END_DATA) {
	        return null;
	      }
	    }
	  }

	  return node;
	}

	function getNextHydratableSibling(instance) {
	  return getNextHydratable(instance.nextSibling);
	}
	function getFirstHydratableChild(parentInstance) {
	  return getNextHydratable(parentInstance.firstChild);
	}
	function getFirstHydratableChildWithinContainer(parentContainer) {
	  return getNextHydratable(parentContainer.firstChild);
	}
	function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
	  return getNextHydratable(parentInstance.nextSibling);
	}
	function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
	  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
	  // get attached.

	  updateFiberProps(instance, props);
	  var parentNamespace;

	  {
	    var hostContextDev = hostContext;
	    parentNamespace = hostContextDev.namespace;
	  } // TODO: Temporary hack to check if we're in a concurrent root. We can delete
	  // when the legacy root API is removed.


	  var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
	  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
	}
	function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
	  precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete
	  // when the legacy root API is removed.

	  (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
	  return diffHydratedText(textInstance, text);
	}
	function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, suspenseInstance);
	}
	function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
	  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;

	      if (data === SUSPENSE_END_DATA) {
	        if (depth === 0) {
	          return getNextHydratableSibling(node);
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
	        depth++;
	      }
	    }

	    node = node.nextSibling;
	  } // TODO: Warn, we didn't find the end comment boundary.


	  return null;
	} // Returns the SuspenseInstance if this node is a direct child of a
	// SuspenseInstance. I.e. if its previous sibling is a Comment with
	// SUSPENSE_x_START_DATA. Otherwise, null.

	function getParentSuspenseInstance(targetInstance) {
	  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;

	      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
	        if (depth === 0) {
	          return node;
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_END_DATA) {
	        depth++;
	      }
	    }

	    node = node.previousSibling;
	  }

	  return null;
	}
	function commitHydratedContainer(container) {
	  // Retry if any event replaying was blocked on this.
	  retryIfBlockedOn(container);
	}
	function commitHydratedSuspenseInstance(suspenseInstance) {
	  // Retry if any event replaying was blocked on this.
	  retryIfBlockedOn(suspenseInstance);
	}
	function shouldDeleteUnhydratedTailInstances(parentType) {
	  return parentType !== 'head' && parentType !== 'body';
	}
	function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
	  var shouldWarnDev = true;
	  checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
	}
	function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
	  if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    var shouldWarnDev = true;
	    checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
	  }
	}
	function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
	  {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentContainer, instance);
	    } else if (instance.nodeType === COMMENT_NODE) ; else {
	      warnForDeletedHydratableText(parentContainer, instance);
	    }
	  }
	}
	function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
	  {
	    // $FlowFixMe: Only Element or Document can be parent nodes.
	    var parentNode = parentInstance.parentNode;

	    if (parentNode !== null) {
	      if (instance.nodeType === ELEMENT_NODE) {
	        warnForDeletedHydratableElement(parentNode, instance);
	      } else if (instance.nodeType === COMMENT_NODE) ; else {
	        warnForDeletedHydratableText(parentNode, instance);
	      }
	    }
	  }
	}
	function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
	  {
	    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	      if (instance.nodeType === ELEMENT_NODE) {
	        warnForDeletedHydratableElement(parentInstance, instance);
	      } else if (instance.nodeType === COMMENT_NODE) ; else {
	        warnForDeletedHydratableText(parentInstance, instance);
	      }
	    }
	  }
	}
	function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
	  {
	    warnForInsertedHydratedElement(parentContainer, type);
	  }
	}
	function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
	  {
	    warnForInsertedHydratedText(parentContainer, text);
	  }
	}
	function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
	  {
	    // $FlowFixMe: Only Element or Document can be parent nodes.
	    var parentNode = parentInstance.parentNode;
	    if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
	  }
	}
	function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
	  {
	    // $FlowFixMe: Only Element or Document can be parent nodes.
	    var parentNode = parentInstance.parentNode;
	    if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
	  }
	}
	function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
	  {
	    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	      warnForInsertedHydratedElement(parentInstance, type);
	    }
	  }
	}
	function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
	  {
	    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	      warnForInsertedHydratedText(parentInstance, text);
	    }
	  }
	}
	function errorHydratingContainer(parentContainer) {
	  {
	    // TODO: This gets logged by onRecoverableError, too, so we should be
	    // able to remove it.
	    error('An error occurred during hydration. The server HTML was replaced with client content in <%s>.', parentContainer.nodeName.toLowerCase());
	  }
	}
	function preparePortalMount(portalInstance) {
	  listenToAllSupportedEvents(portalInstance);
	}

	var randomKey = Math.random().toString(36).slice(2);
	var internalInstanceKey = '__reactFiber$' + randomKey;
	var internalPropsKey = '__reactProps$' + randomKey;
	var internalContainerInstanceKey = '__reactContainer$' + randomKey;
	var internalEventHandlersKey = '__reactEvents$' + randomKey;
	var internalEventHandlerListenersKey = '__reactListeners$' + randomKey;
	var internalEventHandlesSetKey = '__reactHandles$' + randomKey;
	function detachDeletedInstance(node) {
	  // TODO: This function is only called on host components. I don't think all of
	  // these fields are relevant.
	  delete node[internalInstanceKey];
	  delete node[internalPropsKey];
	  delete node[internalEventHandlersKey];
	  delete node[internalEventHandlerListenersKey];
	  delete node[internalEventHandlesSetKey];
	}
	function precacheFiberNode(hostInst, node) {
	  node[internalInstanceKey] = hostInst;
	}
	function markContainerAsRoot(hostRoot, node) {
	  node[internalContainerInstanceKey] = hostRoot;
	}
	function unmarkContainerAsRoot(node) {
	  node[internalContainerInstanceKey] = null;
	}
	function isContainerMarkedAsRoot(node) {
	  return !!node[internalContainerInstanceKey];
	} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
	// If the target node is part of a hydrated or not yet rendered subtree, then
	// this may also return a SuspenseComponent or HostRoot to indicate that.
	// Conceptually the HostRoot fiber is a child of the Container node. So if you
	// pass the Container node as the targetNode, you will not actually get the
	// HostRoot back. To get to the HostRoot, you need to pass a child of it.
	// The same thing applies to Suspense boundaries.

	function getClosestInstanceFromNode(targetNode) {
	  var targetInst = targetNode[internalInstanceKey];

	  if (targetInst) {
	    // Don't return HostRoot or SuspenseComponent here.
	    return targetInst;
	  } // If the direct event target isn't a React owned DOM node, we need to look
	  // to see if one of its parents is a React owned DOM node.


	  var parentNode = targetNode.parentNode;

	  while (parentNode) {
	    // We'll check if this is a container root that could include
	    // React nodes in the future. We need to check this first because
	    // if we're a child of a dehydrated container, we need to first
	    // find that inner container before moving on to finding the parent
	    // instance. Note that we don't check this field on  the targetNode
	    // itself because the fibers are conceptually between the container
	    // node and the first child. It isn't surrounding the container node.
	    // If it's not a container, we check if it's an instance.
	    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

	    if (targetInst) {
	      // Since this wasn't the direct target of the event, we might have
	      // stepped past dehydrated DOM nodes to get here. However they could
	      // also have been non-React nodes. We need to answer which one.
	      // If we the instance doesn't have any children, then there can't be
	      // a nested suspense boundary within it. So we can use this as a fast
	      // bailout. Most of the time, when people add non-React children to
	      // the tree, it is using a ref to a child-less DOM node.
	      // Normally we'd only need to check one of the fibers because if it
	      // has ever gone from having children to deleting them or vice versa
	      // it would have deleted the dehydrated boundary nested inside already.
	      // However, since the HostRoot starts out with an alternate it might
	      // have one on the alternate so we need to check in case this was a
	      // root.
	      var alternate = targetInst.alternate;

	      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
	        // Next we need to figure out if the node that skipped past is
	        // nested within a dehydrated boundary and if so, which one.
	        var suspenseInstance = getParentSuspenseInstance(targetNode);

	        while (suspenseInstance !== null) {
	          // We found a suspense instance. That means that we haven't
	          // hydrated it yet. Even though we leave the comments in the
	          // DOM after hydrating, and there are boundaries in the DOM
	          // that could already be hydrated, we wouldn't have found them
	          // through this pass since if the target is hydrated it would
	          // have had an internalInstanceKey on it.
	          // Let's get the fiber associated with the SuspenseComponent
	          // as the deepest instance.
	          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

	          if (targetSuspenseInst) {
	            return targetSuspenseInst;
	          } // If we don't find a Fiber on the comment, it might be because
	          // we haven't gotten to hydrate it yet. There might still be a
	          // parent boundary that hasn't above this one so we need to find
	          // the outer most that is known.


	          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
	          // host component also hasn't hydrated yet. We can return it
	          // below since it will bail out on the isMounted check later.
	        }
	      }

	      return targetInst;
	    }

	    targetNode = parentNode;
	    parentNode = targetNode.parentNode;
	  }

	  return null;
	}
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */

	function getInstanceFromNode(node) {
	  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

	  if (inst) {
	    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
	      return inst;
	    } else {
	      return null;
	    }
	  }

	  return null;
	}
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */

	function getNodeFromInstance(inst) {
	  if (inst.tag === HostComponent || inst.tag === HostText) {
	    // In Fiber this, is just the state node right now. We assume it will be
	    // a host component or host text.
	    return inst.stateNode;
	  } // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.


	  throw new Error('getNodeFromInstance: Invalid argument.');
	}
	function getFiberCurrentPropsFromNode(node) {
	  return node[internalPropsKey] || null;
	}
	function updateFiberProps(node, props) {
	  node[internalPropsKey] = props;
	}
	function getEventListenerSet(node) {
	  var elementListenerSet = node[internalEventHandlersKey];

	  if (elementListenerSet === undefined) {
	    elementListenerSet = node[internalEventHandlersKey] = new Set();
	  }

	  return elementListenerSet;
	}

	var loggedTypeFailures = {};
	var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
	    }
	  }
	}

	function checkPropTypes(typeSpecs, values, location, componentName, element) {
	  {
	    // $FlowFixMe This is okay but Flow doesn't know it.
	    var has = Function.call.bind(hasOwnProperty);

	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.

	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            // eslint-disable-next-line react-internal/prod-error-codes
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }

	          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        } catch (ex) {
	          error$1 = ex;
	        }

	        if (error$1 && !(error$1 instanceof Error)) {
	          setCurrentlyValidatingElement(element);

	          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

	          setCurrentlyValidatingElement(null);
	        }

	        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error$1.message] = true;
	          setCurrentlyValidatingElement(element);

	          error('Failed %s type: %s', location, error$1.message);

	          setCurrentlyValidatingElement(null);
	        }
	      }
	    }
	  }
	}

	var valueStack = [];
	var fiberStack;

	{
	  fiberStack = [];
	}

	var index = -1;

	function createCursor(defaultValue) {
	  return {
	    current: defaultValue
	  };
	}

	function pop(cursor, fiber) {
	  if (index < 0) {
	    {
	      error('Unexpected pop.');
	    }

	    return;
	  }

	  {
	    if (fiber !== fiberStack[index]) {
	      error('Unexpected Fiber popped.');
	    }
	  }

	  cursor.current = valueStack[index];
	  valueStack[index] = null;

	  {
	    fiberStack[index] = null;
	  }

	  index--;
	}

	function push(cursor, value, fiber) {
	  index++;
	  valueStack[index] = cursor.current;

	  {
	    fiberStack[index] = fiber;
	  }

	  cursor.current = value;
	}

	var warnedAboutMissingGetChildContext;

	{
	  warnedAboutMissingGetChildContext = {};
	}

	var emptyContextObject = {};

	{
	  Object.freeze(emptyContextObject);
	} // A cursor to the current merged context object on the stack.


	var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

	var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
	// We use this to get access to the parent context after we have already
	// pushed the next context provider, and now need to merge their contexts.

	var previousContext = emptyContextObject;

	function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
	  {
	    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
	      // If the fiber is a context provider itself, when we read its context
	      // we may have already pushed its own child context on the stack. A context
	      // provider should not "see" its own child context. Therefore we read the
	      // previous (parent) context instead for a context provider.
	      return previousContext;
	    }

	    return contextStackCursor.current;
	  }
	}

	function cacheContext(workInProgress, unmaskedContext, maskedContext) {
	  {
	    var instance = workInProgress.stateNode;
	    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
	    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
	  }
	}

	function getMaskedContext(workInProgress, unmaskedContext) {
	  {
	    var type = workInProgress.type;
	    var contextTypes = type.contextTypes;

	    if (!contextTypes) {
	      return emptyContextObject;
	    } // Avoid recreating masked context unless unmasked context has changed.
	    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
	    // This may trigger infinite loops if componentWillReceiveProps calls setState.


	    var instance = workInProgress.stateNode;

	    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
	      return instance.__reactInternalMemoizedMaskedChildContext;
	    }

	    var context = {};

	    for (var key in contextTypes) {
	      context[key] = unmaskedContext[key];
	    }

	    {
	      var name = getComponentNameFromFiber(workInProgress) || 'Unknown';
	      checkPropTypes(contextTypes, context, 'context', name);
	    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	    // Context is created before the class component is instantiated so check for instance.


	    if (instance) {
	      cacheContext(workInProgress, unmaskedContext, context);
	    }

	    return context;
	  }
	}

	function hasContextChanged() {
	  {
	    return didPerformWorkStackCursor.current;
	  }
	}

	function isContextProvider(type) {
	  {
	    var childContextTypes = type.childContextTypes;
	    return childContextTypes !== null && childContextTypes !== undefined;
	  }
	}

	function popContext(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function popTopLevelContextObject(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function pushTopLevelContextObject(fiber, context, didChange) {
	  {
	    if (contextStackCursor.current !== emptyContextObject) {
	      throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }

	    push(contextStackCursor, context, fiber);
	    push(didPerformWorkStackCursor, didChange, fiber);
	  }
	}

	function processChildContext(fiber, type, parentContext) {
	  {
	    var instance = fiber.stateNode;
	    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
	    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

	    if (typeof instance.getChildContext !== 'function') {
	      {
	        var componentName = getComponentNameFromFiber(fiber) || 'Unknown';

	        if (!warnedAboutMissingGetChildContext[componentName]) {
	          warnedAboutMissingGetChildContext[componentName] = true;

	          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
	        }
	      }

	      return parentContext;
	    }

	    var childContext = instance.getChildContext();

	    for (var contextKey in childContext) {
	      if (!(contextKey in childContextTypes)) {
	        throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
	      }
	    }

	    {
	      var name = getComponentNameFromFiber(fiber) || 'Unknown';
	      checkPropTypes(childContextTypes, childContext, 'child context', name);
	    }

	    return assign({}, parentContext, childContext);
	  }
	}

	function pushContextProvider(workInProgress) {
	  {
	    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
	    // If the instance does not exist yet, we will push null at first,
	    // and replace it on the stack later when invalidating the context.

	    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
	    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

	    previousContext = contextStackCursor.current;
	    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
	    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
	    return true;
	  }
	}

	function invalidateContextProvider(workInProgress, type, didChange) {
	  {
	    var instance = workInProgress.stateNode;

	    if (!instance) {
	      throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }

	    if (didChange) {
	      // Merge parent and own context.
	      // Skip this if we're not updating due to sCU.
	      // This avoids unnecessarily recomputing memoized values.
	      var mergedContext = processChildContext(workInProgress, type, previousContext);
	      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
	      // It is important to unwind the context in the reverse order.

	      pop(didPerformWorkStackCursor, workInProgress);
	      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

	      push(contextStackCursor, mergedContext, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    } else {
	      pop(didPerformWorkStackCursor, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    }
	  }
	}

	function findCurrentUnmaskedContext(fiber) {
	  {
	    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
	    // makes sense elsewhere
	    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
	      throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }

	    var node = fiber;

	    do {
	      switch (node.tag) {
	        case HostRoot:
	          return node.stateNode.context;

	        case ClassComponent:
	          {
	            var Component = node.type;

	            if (isContextProvider(Component)) {
	              return node.stateNode.__reactInternalMemoizedMergedChildContext;
	            }

	            break;
	          }
	      }

	      node = node.return;
	    } while (node !== null);

	    throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	  }
	}

	var LegacyRoot = 0;
	var ConcurrentRoot = 1;

	var syncQueue = null;
	var includesLegacySyncCallbacks = false;
	var isFlushingSyncQueue = false;
	function scheduleSyncCallback(callback) {
	  // Push this callback into an internal queue. We'll flush these either in
	  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
	  if (syncQueue === null) {
	    syncQueue = [callback];
	  } else {
	    // Push onto existing queue. Don't need to schedule a callback because
	    // we already scheduled one when we created the queue.
	    syncQueue.push(callback);
	  }
	}
	function scheduleLegacySyncCallback(callback) {
	  includesLegacySyncCallbacks = true;
	  scheduleSyncCallback(callback);
	}
	function flushSyncCallbacksOnlyInLegacyMode() {
	  // Only flushes the queue if there's a legacy sync callback scheduled.
	  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
	  // it might make more sense for the queue to be a list of roots instead of a
	  // list of generic callbacks. Then we can have two: one for legacy roots, one
	  // for concurrent roots. And this method would only flush the legacy ones.
	  if (includesLegacySyncCallbacks) {
	    flushSyncCallbacks();
	  }
	}
	function flushSyncCallbacks() {
	  if (!isFlushingSyncQueue && syncQueue !== null) {
	    // Prevent re-entrance.
	    isFlushingSyncQueue = true;
	    var i = 0;
	    var previousUpdatePriority = getCurrentUpdatePriority();

	    try {
	      var isSync = true;
	      var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this
	      // queue is in the render or commit phases.

	      setCurrentUpdatePriority(DiscreteEventPriority);

	      for (; i < queue.length; i++) {
	        var callback = queue[i];

	        do {
	          callback = callback(isSync);
	        } while (callback !== null);
	      }

	      syncQueue = null;
	      includesLegacySyncCallbacks = false;
	    } catch (error) {
	      // If something throws, leave the remaining callbacks on the queue.
	      if (syncQueue !== null) {
	        syncQueue = syncQueue.slice(i + 1);
	      } // Resume flushing in the next tick


	      scheduleCallback(ImmediatePriority, flushSyncCallbacks);
	      throw error;
	    } finally {
	      setCurrentUpdatePriority(previousUpdatePriority);
	      isFlushingSyncQueue = false;
	    }
	  }

	  return null;
	}

	// TODO: Use the unified fiber stack module instead of this local one?
	// Intentionally not using it yet to derisk the initial implementation, because
	// the way we push/pop these values is a bit unusual. If there's a mistake, I'd
	// rather the ids be wrong than crash the whole reconciler.
	var forkStack = [];
	var forkStackIndex = 0;
	var treeForkProvider = null;
	var treeForkCount = 0;
	var idStack = [];
	var idStackIndex = 0;
	var treeContextProvider = null;
	var treeContextId = 1;
	var treeContextOverflow = '';
	function isForkedChild(workInProgress) {
	  warnIfNotHydrating();
	  return (workInProgress.flags & Forked) !== NoFlags;
	}
	function getForksAtLevel(workInProgress) {
	  warnIfNotHydrating();
	  return treeForkCount;
	}
	function getTreeId() {
	  var overflow = treeContextOverflow;
	  var idWithLeadingBit = treeContextId;
	  var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
	  return id.toString(32) + overflow;
	}
	function pushTreeFork(workInProgress, totalChildren) {
	  // This is called right after we reconcile an array (or iterator) of child
	  // fibers, because that's the only place where we know how many children in
	  // the whole set without doing extra work later, or storing addtional
	  // information on the fiber.
	  //
	  // That's why this function is separate from pushTreeId — it's called during
	  // the render phase of the fork parent, not the child, which is where we push
	  // the other context values.
	  //
	  // In the Fizz implementation this is much simpler because the child is
	  // rendered in the same callstack as the parent.
	  //
	  // It might be better to just add a `forks` field to the Fiber type. It would
	  // make this module simpler.
	  warnIfNotHydrating();
	  forkStack[forkStackIndex++] = treeForkCount;
	  forkStack[forkStackIndex++] = treeForkProvider;
	  treeForkProvider = workInProgress;
	  treeForkCount = totalChildren;
	}
	function pushTreeId(workInProgress, totalChildren, index) {
	  warnIfNotHydrating();
	  idStack[idStackIndex++] = treeContextId;
	  idStack[idStackIndex++] = treeContextOverflow;
	  idStack[idStackIndex++] = treeContextProvider;
	  treeContextProvider = workInProgress;
	  var baseIdWithLeadingBit = treeContextId;
	  var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
	  // of the id; we use it to account for leading 0s.

	  var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
	  var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
	  var slot = index + 1;
	  var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into
	  // consideration the leading 1 we use to mark the end of the sequence.

	  if (length > 30) {
	    // We overflowed the bitwise-safe range. Fall back to slower algorithm.
	    // This branch assumes the length of the base id is greater than 5; it won't
	    // work for smaller ids, because you need 5 bits per character.
	    //
	    // We encode the id in multiple steps: first the base id, then the
	    // remaining digits.
	    //
	    // Each 5 bit sequence corresponds to a single base 32 character. So for
	    // example, if the current id is 23 bits long, we can convert 20 of those
	    // bits into a string of 4 characters, with 3 bits left over.
	    //
	    // First calculate how many bits in the base id represent a complete
	    // sequence of characters.
	    var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.

	    var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.

	    var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.

	    var restOfBaseId = baseId >> numberOfOverflowBits;
	    var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because
	    // we made more room, this time it won't overflow.

	    var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
	    var restOfNewBits = slot << restOfBaseLength;
	    var id = restOfNewBits | restOfBaseId;
	    var overflow = newOverflow + baseOverflow;
	    treeContextId = 1 << restOfLength | id;
	    treeContextOverflow = overflow;
	  } else {
	    // Normal path
	    var newBits = slot << baseLength;

	    var _id = newBits | baseId;

	    var _overflow = baseOverflow;
	    treeContextId = 1 << length | _id;
	    treeContextOverflow = _overflow;
	  }
	}
	function pushMaterializedTreeId(workInProgress) {
	  warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear
	  // in its children.

	  var returnFiber = workInProgress.return;

	  if (returnFiber !== null) {
	    var numberOfForks = 1;
	    var slotIndex = 0;
	    pushTreeFork(workInProgress, numberOfForks);
	    pushTreeId(workInProgress, numberOfForks, slotIndex);
	  }
	}

	function getBitLength(number) {
	  return 32 - clz32(number);
	}

	function getLeadingBit(id) {
	  return 1 << getBitLength(id) - 1;
	}

	function popTreeContext(workInProgress) {
	  // Restore the previous values.
	  // This is a bit more complicated than other context-like modules in Fiber
	  // because the same Fiber may appear on the stack multiple times and for
	  // different reasons. We have to keep popping until the work-in-progress is
	  // no longer at the top of the stack.
	  while (workInProgress === treeForkProvider) {
	    treeForkProvider = forkStack[--forkStackIndex];
	    forkStack[forkStackIndex] = null;
	    treeForkCount = forkStack[--forkStackIndex];
	    forkStack[forkStackIndex] = null;
	  }

	  while (workInProgress === treeContextProvider) {
	    treeContextProvider = idStack[--idStackIndex];
	    idStack[idStackIndex] = null;
	    treeContextOverflow = idStack[--idStackIndex];
	    idStack[idStackIndex] = null;
	    treeContextId = idStack[--idStackIndex];
	    idStack[idStackIndex] = null;
	  }
	}
	function getSuspendedTreeContext() {
	  warnIfNotHydrating();

	  if (treeContextProvider !== null) {
	    return {
	      id: treeContextId,
	      overflow: treeContextOverflow
	    };
	  } else {
	    return null;
	  }
	}
	function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
	  warnIfNotHydrating();
	  idStack[idStackIndex++] = treeContextId;
	  idStack[idStackIndex++] = treeContextOverflow;
	  idStack[idStackIndex++] = treeContextProvider;
	  treeContextId = suspendedContext.id;
	  treeContextOverflow = suspendedContext.overflow;
	  treeContextProvider = workInProgress;
	}

	function warnIfNotHydrating() {
	  {
	    if (!getIsHydrating()) {
	      error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');
	    }
	  }
	}

	// This may have been an insertion or a hydration.

	var hydrationParentFiber = null;
	var nextHydratableInstance = null;
	var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches
	// due to earlier mismatches or a suspended fiber.

	var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary

	var hydrationErrors = null;

	function warnIfHydrating() {
	  {
	    if (isHydrating) {
	      error('We should not be hydrating here. This is a bug in React. Please file a bug.');
	    }
	  }
	}

	function markDidThrowWhileHydratingDEV() {
	  {
	    didSuspendOrErrorDEV = true;
	  }
	}
	function didSuspendOrErrorWhileHydratingDEV() {
	  {
	    return didSuspendOrErrorDEV;
	  }
	}

	function enterHydrationState(fiber) {

	  var parentInstance = fiber.stateNode.containerInfo;
	  nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
	  hydrationParentFiber = fiber;
	  isHydrating = true;
	  hydrationErrors = null;
	  didSuspendOrErrorDEV = false;
	  return true;
	}

	function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {

	  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
	  hydrationParentFiber = fiber;
	  isHydrating = true;
	  hydrationErrors = null;
	  didSuspendOrErrorDEV = false;

	  if (treeContext !== null) {
	    restoreSuspendedTreeContext(fiber, treeContext);
	  }

	  return true;
	}

	function warnUnhydratedInstance(returnFiber, instance) {
	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        {
	          didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
	          break;
	        }

	      case HostComponent:
	        {
	          var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
	          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, // TODO: Delete this argument when we remove the legacy root API.
	          isConcurrentMode);
	          break;
	        }

	      case SuspenseComponent:
	        {
	          var suspenseState = returnFiber.memoizedState;
	          if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
	          break;
	        }
	    }
	  }
	}

	function deleteHydratableInstance(returnFiber, instance) {
	  warnUnhydratedInstance(returnFiber, instance);
	  var childToDelete = createFiberFromHostInstanceForDeletion();
	  childToDelete.stateNode = instance;
	  childToDelete.return = returnFiber;
	  var deletions = returnFiber.deletions;

	  if (deletions === null) {
	    returnFiber.deletions = [childToDelete];
	    returnFiber.flags |= ChildDeletion;
	  } else {
	    deletions.push(childToDelete);
	  }
	}

	function warnNonhydratedInstance(returnFiber, fiber) {
	  {
	    if (didSuspendOrErrorDEV) {
	      // Inside a boundary that already suspended. We're currently rendering the
	      // siblings of a suspended node. The mismatch may be due to the missing
	      // data, so it's probably a false positive.
	      return;
	    }

	    switch (returnFiber.tag) {
	      case HostRoot:
	        {
	          var parentContainer = returnFiber.stateNode.containerInfo;

	          switch (fiber.tag) {
	            case HostComponent:
	              var type = fiber.type;
	              fiber.pendingProps;
	              didNotFindHydratableInstanceWithinContainer(parentContainer, type);
	              break;

	            case HostText:
	              var text = fiber.pendingProps;
	              didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
	              break;
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          var parentType = returnFiber.type;
	          var parentProps = returnFiber.memoizedProps;
	          var parentInstance = returnFiber.stateNode;

	          switch (fiber.tag) {
	            case HostComponent:
	              {
	                var _type = fiber.type;
	                var _props = fiber.pendingProps;
	                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
	                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, // TODO: Delete this argument when we remove the legacy root API.
	                isConcurrentMode);
	                break;
	              }

	            case HostText:
	              {
	                var _text = fiber.pendingProps;

	                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;

	                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, // TODO: Delete this argument when we remove the legacy root API.
	                _isConcurrentMode);
	                break;
	              }
	          }

	          break;
	        }

	      case SuspenseComponent:
	        {
	          var suspenseState = returnFiber.memoizedState;
	          var _parentInstance = suspenseState.dehydrated;
	          if (_parentInstance !== null) switch (fiber.tag) {
	            case HostComponent:
	              var _type2 = fiber.type;
	              fiber.pendingProps;
	              didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
	              break;

	            case HostText:
	              var _text2 = fiber.pendingProps;
	              didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
	              break;
	          }
	          break;
	        }

	      default:
	        return;
	    }
	  }
	}

	function insertNonHydratedInstance(returnFiber, fiber) {
	  fiber.flags = fiber.flags & ~Hydrating | Placement;
	  warnNonhydratedInstance(returnFiber, fiber);
	}

	function tryHydrate(fiber, nextInstance) {
	  switch (fiber.tag) {
	    case HostComponent:
	      {
	        var type = fiber.type;
	        fiber.pendingProps;
	        var instance = canHydrateInstance(nextInstance, type);

	        if (instance !== null) {
	          fiber.stateNode = instance;
	          hydrationParentFiber = fiber;
	          nextHydratableInstance = getFirstHydratableChild(instance);
	          return true;
	        }

	        return false;
	      }

	    case HostText:
	      {
	        var text = fiber.pendingProps;
	        var textInstance = canHydrateTextInstance(nextInstance, text);

	        if (textInstance !== null) {
	          fiber.stateNode = textInstance;
	          hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.

	          nextHydratableInstance = null;
	          return true;
	        }

	        return false;
	      }

	    case SuspenseComponent:
	      {
	        var suspenseInstance = canHydrateSuspenseInstance(nextInstance);

	        if (suspenseInstance !== null) {
	          var suspenseState = {
	            dehydrated: suspenseInstance,
	            treeContext: getSuspendedTreeContext(),
	            retryLane: OffscreenLane
	          };
	          fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
	          // This simplifies the code for getHostSibling and deleting nodes,
	          // since it doesn't have to consider all Suspense boundaries and
	          // check if they're dehydrated ones or not.

	          var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
	          dehydratedFragment.return = fiber;
	          fiber.child = dehydratedFragment;
	          hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into
	          // it during the first pass. Instead, we'll reenter it later.

	          nextHydratableInstance = null;
	          return true;
	        }

	        return false;
	      }

	    default:
	      return false;
	  }
	}

	function shouldClientRenderOnMismatch(fiber) {
	  return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
	}

	function throwOnHydrationMismatch(fiber) {
	  throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');
	}

	function tryToClaimNextHydratableInstance(fiber) {
	  if (!isHydrating) {
	    return;
	  }

	  var nextInstance = nextHydratableInstance;

	  if (!nextInstance) {
	    if (shouldClientRenderOnMismatch(fiber)) {
	      warnNonhydratedInstance(hydrationParentFiber, fiber);
	      throwOnHydrationMismatch();
	    } // Nothing to hydrate. Make it an insertion.


	    insertNonHydratedInstance(hydrationParentFiber, fiber);
	    isHydrating = false;
	    hydrationParentFiber = fiber;
	    return;
	  }

	  var firstAttemptedInstance = nextInstance;

	  if (!tryHydrate(fiber, nextInstance)) {
	    if (shouldClientRenderOnMismatch(fiber)) {
	      warnNonhydratedInstance(hydrationParentFiber, fiber);
	      throwOnHydrationMismatch();
	    } // If we can't hydrate this instance let's try the next one.
	    // We use this as a heuristic. It's based on intuition and not data so it
	    // might be flawed or unnecessary.


	    nextInstance = getNextHydratableSibling(firstAttemptedInstance);
	    var prevHydrationParentFiber = hydrationParentFiber;

	    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
	      // Nothing to hydrate. Make it an insertion.
	      insertNonHydratedInstance(hydrationParentFiber, fiber);
	      isHydrating = false;
	      hydrationParentFiber = fiber;
	      return;
	    } // We matched the next one, we'll now assume that the first one was
	    // superfluous and we'll delete it. Since we can't eagerly delete it
	    // we'll have to schedule a deletion. To do that, this node needs a dummy
	    // fiber associated with it.


	    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
	  }
	}

	function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

	  var instance = fiber.stateNode;
	  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
	  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.

	  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	  // is a new ref we mark this as an update.

	  if (updatePayload !== null) {
	    return true;
	  }

	  return false;
	}

	function prepareToHydrateHostTextInstance(fiber) {

	  var textInstance = fiber.stateNode;
	  var textContent = fiber.memoizedProps;
	  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

	  if (shouldUpdate) {
	    // We assume that prepareToHydrateHostTextInstance is called in a context where the
	    // hydration parent is the parent host component of this host text.
	    var returnFiber = hydrationParentFiber;

	    if (returnFiber !== null) {
	      switch (returnFiber.tag) {
	        case HostRoot:
	          {
	            var parentContainer = returnFiber.stateNode.containerInfo;
	            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
	            didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
	            isConcurrentMode);
	            break;
	          }

	        case HostComponent:
	          {
	            var parentType = returnFiber.type;
	            var parentProps = returnFiber.memoizedProps;
	            var parentInstance = returnFiber.stateNode;

	            var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;

	            didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
	            _isConcurrentMode2);
	            break;
	          }
	      }
	    }
	  }

	  return shouldUpdate;
	}

	function prepareToHydrateHostSuspenseInstance(fiber) {

	  var suspenseState = fiber.memoizedState;
	  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

	  if (!suspenseInstance) {
	    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	  }

	  hydrateSuspenseInstance(suspenseInstance, fiber);
	}

	function skipPastDehydratedSuspenseInstance(fiber) {

	  var suspenseState = fiber.memoizedState;
	  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

	  if (!suspenseInstance) {
	    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	  }

	  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
	}

	function popToNextHostParent(fiber) {
	  var parent = fiber.return;

	  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
	    parent = parent.return;
	  }

	  hydrationParentFiber = parent;
	}

	function popHydrationState(fiber) {

	  if (fiber !== hydrationParentFiber) {
	    // We're deeper than the current hydration context, inside an inserted
	    // tree.
	    return false;
	  }

	  if (!isHydrating) {
	    // If we're not currently hydrating but we're in a hydration context, then
	    // we were an insertion and now need to pop up reenter hydration of our
	    // siblings.
	    popToNextHostParent(fiber);
	    isHydrating = true;
	    return false;
	  } // If we have any remaining hydratable nodes, we need to delete them now.
	  // We only do this deeper than head and body since they tend to have random
	  // other nodes in them. We also ignore components with pure text content in
	  // side of them. We also don't delete anything inside the root container.


	  if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
	    var nextInstance = nextHydratableInstance;

	    if (nextInstance) {
	      if (shouldClientRenderOnMismatch(fiber)) {
	        warnIfUnhydratedTailNodes(fiber);
	        throwOnHydrationMismatch();
	      } else {
	        while (nextInstance) {
	          deleteHydratableInstance(fiber, nextInstance);
	          nextInstance = getNextHydratableSibling(nextInstance);
	        }
	      }
	    }
	  }

	  popToNextHostParent(fiber);

	  if (fiber.tag === SuspenseComponent) {
	    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
	  } else {
	    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
	  }

	  return true;
	}

	function hasUnhydratedTailNodes() {
	  return isHydrating && nextHydratableInstance !== null;
	}

	function warnIfUnhydratedTailNodes(fiber) {
	  var nextInstance = nextHydratableInstance;

	  while (nextInstance) {
	    warnUnhydratedInstance(fiber, nextInstance);
	    nextInstance = getNextHydratableSibling(nextInstance);
	  }
	}

	function resetHydrationState() {

	  hydrationParentFiber = null;
	  nextHydratableInstance = null;
	  isHydrating = false;
	  didSuspendOrErrorDEV = false;
	}

	function upgradeHydrationErrorsToRecoverable() {
	  if (hydrationErrors !== null) {
	    // Successfully completed a forced client render. The errors that occurred
	    // during the hydration attempt are now recovered. We will log them in
	    // commit phase, once the entire tree has finished.
	    queueRecoverableErrors(hydrationErrors);
	    hydrationErrors = null;
	  }
	}

	function getIsHydrating() {
	  return isHydrating;
	}

	function queueHydrationError(error) {
	  if (hydrationErrors === null) {
	    hydrationErrors = [error];
	  } else {
	    hydrationErrors.push(error);
	  }
	}

	var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
	var NoTransition = null;
	function requestCurrentTransition() {
	  return ReactCurrentBatchConfig$1.transition;
	}

	var ReactStrictModeWarnings = {
	  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
	  flushPendingUnsafeLifecycleWarnings: function () {},
	  recordLegacyContextWarning: function (fiber, instance) {},
	  flushLegacyContextWarning: function () {},
	  discardPendingWarnings: function () {}
	};

	{
	  var findStrictRoot = function (fiber) {
	    var maybeStrictRoot = null;
	    var node = fiber;

	    while (node !== null) {
	      if (node.mode & StrictLegacyMode) {
	        maybeStrictRoot = node;
	      }

	      node = node.return;
	    }

	    return maybeStrictRoot;
	  };

	  var setToSortedString = function (set) {
	    var array = [];
	    set.forEach(function (value) {
	      array.push(value);
	    });
	    return array.sort().join(', ');
	  };

	  var pendingComponentWillMountWarnings = [];
	  var pendingUNSAFE_ComponentWillMountWarnings = [];
	  var pendingComponentWillReceivePropsWarnings = [];
	  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	  var pendingComponentWillUpdateWarnings = [];
	  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

	  var didWarnAboutUnsafeLifecycles = new Set();

	  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
	    // Dedupe strategy: Warn once per component.
	    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
	      return;
	    }

	    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
	    instance.componentWillMount.__suppressDeprecationWarning !== true) {
	      pendingComponentWillMountWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {
	      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	      pendingComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	      pendingComponentWillUpdateWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
	      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
	    // We do an initial pass to gather component names
	    var componentWillMountUniqueNames = new Set();

	    if (pendingComponentWillMountWarnings.length > 0) {
	      pendingComponentWillMountWarnings.forEach(function (fiber) {
	        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillMountWarnings = [];
	    }

	    var UNSAFE_componentWillMountUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillMountWarnings = [];
	    }

	    var componentWillReceivePropsUniqueNames = new Set();

	    if (pendingComponentWillReceivePropsWarnings.length > 0) {
	      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillReceivePropsWarnings = [];
	    }

	    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    }

	    var componentWillUpdateUniqueNames = new Set();

	    if (pendingComponentWillUpdateWarnings.length > 0) {
	      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
	        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillUpdateWarnings = [];
	    }

	    var UNSAFE_componentWillUpdateUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    } // Finally, we flush all the warnings
	    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


	    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
	      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

	      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
	    }

	    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

	      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
	    }

	    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

	      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
	    }

	    if (componentWillMountUniqueNames.size > 0) {
	      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

	      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
	    }

	    if (componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

	      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
	    }

	    if (componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

	      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
	    }
	  };

	  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

	  var didWarnAboutLegacyContext = new Set();

	  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
	    var strictRoot = findStrictRoot(fiber);

	    if (strictRoot === null) {
	      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

	      return;
	    } // Dedup strategy: Warn once per component.


	    if (didWarnAboutLegacyContext.has(fiber.type)) {
	      return;
	    }

	    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

	    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
	      if (warningsForRoot === undefined) {
	        warningsForRoot = [];
	        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
	      }

	      warningsForRoot.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
	    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
	      if (fiberArray.length === 0) {
	        return;
	      }

	      var firstFiber = fiberArray[0];
	      var uniqueNames = new Set();
	      fiberArray.forEach(function (fiber) {
	        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutLegacyContext.add(fiber.type);
	      });
	      var sortedNames = setToSortedString(uniqueNames);

	      try {
	        setCurrentFiber(firstFiber);

	        error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
	      } finally {
	        resetCurrentFiber();
	      }
	    });
	  };

	  ReactStrictModeWarnings.discardPendingWarnings = function () {
	    pendingComponentWillMountWarnings = [];
	    pendingUNSAFE_ComponentWillMountWarnings = [];
	    pendingComponentWillReceivePropsWarnings = [];
	    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    pendingComponentWillUpdateWarnings = [];
	    pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    pendingLegacyContextWarning = new Map();
	  };
	}

	var didWarnAboutMaps;
	var didWarnAboutGenerators;
	var didWarnAboutStringRefs;
	var ownerHasKeyUseWarning;
	var ownerHasFunctionTypeWarning;

	var warnForMissingKey = function (child, returnFiber) {};

	{
	  didWarnAboutMaps = false;
	  didWarnAboutGenerators = false;
	  didWarnAboutStringRefs = {};
	  /**
	   * Warn if there's no key explicitly set on dynamic arrays of children or
	   * object keys are not valid. This allows us to keep track of children between
	   * updates.
	   */

	  ownerHasKeyUseWarning = {};
	  ownerHasFunctionTypeWarning = {};

	  warnForMissingKey = function (child, returnFiber) {
	    if (child === null || typeof child !== 'object') {
	      return;
	    }

	    if (!child._store || child._store.validated || child.key != null) {
	      return;
	    }

	    if (typeof child._store !== 'object') {
	      throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }

	    child._store.validated = true;
	    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

	    if (ownerHasKeyUseWarning[componentName]) {
	      return;
	    }

	    ownerHasKeyUseWarning[componentName] = true;

	    error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
	  };
	}

	function isReactClass(type) {
	  return type.prototype && type.prototype.isReactComponent;
	}

	function coerceRef(returnFiber, current, element) {
	  var mixedRef = element.ref;

	  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
	    {
	      // TODO: Clean this up once we turn on the string ref warning for
	      // everyone, because the strict mode case will no longer be relevant
	      if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
	      // because these cannot be automatically converted to an arrow function
	      // using a codemod. Therefore, we don't have to warn about string refs again.
	      !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
	      !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
	      !(typeof element.type === 'function' && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
	      element._owner) {
	        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

	        if (!didWarnAboutStringRefs[componentName]) {
	          {
	            error('Component "%s" contains the string ref "%s". Support for string refs ' + 'will be removed in a future major release. We recommend using ' + 'useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
	          }

	          didWarnAboutStringRefs[componentName] = true;
	        }
	      }
	    }

	    if (element._owner) {
	      var owner = element._owner;
	      var inst;

	      if (owner) {
	        var ownerFiber = owner;

	        if (ownerFiber.tag !== ClassComponent) {
	          throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');
	        }

	        inst = ownerFiber.stateNode;
	      }

	      if (!inst) {
	        throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + 'bug in React. Please file an issue.');
	      } // Assigning this to a const so Flow knows it won't change in the closure


	      var resolvedInst = inst;

	      {
	        checkPropStringCoercion(mixedRef, 'ref');
	      }

	      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

	      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
	        return current.ref;
	      }

	      var ref = function (value) {
	        var refs = resolvedInst.refs;

	        if (value === null) {
	          delete refs[stringRef];
	        } else {
	          refs[stringRef] = value;
	        }
	      };

	      ref._stringRef = stringRef;
	      return ref;
	    } else {
	      if (typeof mixedRef !== 'string') {
	        throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');
	      }

	      if (!element._owner) {
	        throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + ' the following reasons:\n' + '1. You may be adding a ref to a function component\n' + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + '3. You have multiple copies of React loaded\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');
	      }
	    }
	  }

	  return mixedRef;
	}

	function throwOnInvalidObjectType(returnFiber, newChild) {
	  var childString = Object.prototype.toString.call(newChild);
	  throw new Error("Objects are not valid as a React child (found: " + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
	}

	function warnOnFunctionType(returnFiber) {
	  {
	    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

	    if (ownerHasFunctionTypeWarning[componentName]) {
	      return;
	    }

	    ownerHasFunctionTypeWarning[componentName] = true;

	    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
	  }
	}

	function resolveLazy(lazyType) {
	  var payload = lazyType._payload;
	  var init = lazyType._init;
	  return init(payload);
	} // This wrapper function exists because I expect to clone the code in each path
	// to be able to optimize each path individually by branching early. This needs
	// a compiler or we can do it manually. Helpers that don't need this branching
	// live outside of this function.


	function ChildReconciler(shouldTrackSideEffects) {
	  function deleteChild(returnFiber, childToDelete) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return;
	    }

	    var deletions = returnFiber.deletions;

	    if (deletions === null) {
	      returnFiber.deletions = [childToDelete];
	      returnFiber.flags |= ChildDeletion;
	    } else {
	      deletions.push(childToDelete);
	    }
	  }

	  function deleteRemainingChildren(returnFiber, currentFirstChild) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return null;
	    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
	    // assuming that after the first child we've already added everything.


	    var childToDelete = currentFirstChild;

	    while (childToDelete !== null) {
	      deleteChild(returnFiber, childToDelete);
	      childToDelete = childToDelete.sibling;
	    }

	    return null;
	  }

	  function mapRemainingChildren(returnFiber, currentFirstChild) {
	    // Add the remaining children to a temporary map so that we can find them by
	    // keys quickly. Implicit (null) keys get added to this set with their index
	    // instead.
	    var existingChildren = new Map();
	    var existingChild = currentFirstChild;

	    while (existingChild !== null) {
	      if (existingChild.key !== null) {
	        existingChildren.set(existingChild.key, existingChild);
	      } else {
	        existingChildren.set(existingChild.index, existingChild);
	      }

	      existingChild = existingChild.sibling;
	    }

	    return existingChildren;
	  }

	  function useFiber(fiber, pendingProps) {
	    // We currently set sibling to null and index to 0 here because it is easy
	    // to forget to do before returning it. E.g. for the single child case.
	    var clone = createWorkInProgress(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	  }

	  function placeChild(newFiber, lastPlacedIndex, newIndex) {
	    newFiber.index = newIndex;

	    if (!shouldTrackSideEffects) {
	      // During hydration, the useId algorithm needs to know which fibers are
	      // part of a list of children (arrays, iterators).
	      newFiber.flags |= Forked;
	      return lastPlacedIndex;
	    }

	    var current = newFiber.alternate;

	    if (current !== null) {
	      var oldIndex = current.index;

	      if (oldIndex < lastPlacedIndex) {
	        // This is a move.
	        newFiber.flags |= Placement;
	        return lastPlacedIndex;
	      } else {
	        // This item can stay in place.
	        return oldIndex;
	      }
	    } else {
	      // This is an insertion.
	      newFiber.flags |= Placement;
	      return lastPlacedIndex;
	    }
	  }

	  function placeSingleChild(newFiber) {
	    // This is simpler for the single child case. We only need to do a
	    // placement for inserting new children.
	    if (shouldTrackSideEffects && newFiber.alternate === null) {
	      newFiber.flags |= Placement;
	    }

	    return newFiber;
	  }

	  function updateTextNode(returnFiber, current, textContent, lanes) {
	    if (current === null || current.tag !== HostText) {
	      // Insert
	      var created = createFiberFromText(textContent, returnFiber.mode, lanes);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, textContent);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateElement(returnFiber, current, element, lanes) {
	    var elementType = element.type;

	    if (elementType === REACT_FRAGMENT_TYPE) {
	      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
	    }

	    if (current !== null) {
	      if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:
	       isCompatibleFamilyForHotReloading(current, element) ) || // Lazy types should reconcile their resolved type.
	      // We need to do this after the Hot Reloading check above,
	      // because hot reloading has different semantics than prod because
	      // it doesn't resuspend. So we can't let the call below suspend.
	      typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {
	        // Move based on index
	        var existing = useFiber(current, element.props);
	        existing.ref = coerceRef(returnFiber, current, element);
	        existing.return = returnFiber;

	        {
	          existing._debugSource = element._source;
	          existing._debugOwner = element._owner;
	        }

	        return existing;
	      }
	    } // Insert


	    var created = createFiberFromElement(element, returnFiber.mode, lanes);
	    created.ref = coerceRef(returnFiber, current, element);
	    created.return = returnFiber;
	    return created;
	  }

	  function updatePortal(returnFiber, current, portal, lanes) {
	    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
	      // Insert
	      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, portal.children || []);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateFragment(returnFiber, current, fragment, lanes, key) {
	    if (current === null || current.tag !== Fragment) {
	      // Insert
	      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, fragment);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function createChild(returnFiber, newChild, lanes) {
	    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
	      created.return = returnFiber;
	      return created;
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

	            _created.ref = coerceRef(returnFiber, null, newChild);
	            _created.return = returnFiber;
	            return _created;
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

	            _created2.return = returnFiber;
	            return _created2;
	          }

	        case REACT_LAZY_TYPE:
	          {
	            var payload = newChild._payload;
	            var init = newChild._init;
	            return createChild(returnFiber, init(payload), lanes);
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

	        _created3.return = returnFiber;
	        return _created3;
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    }

	    return null;
	  }

	  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
	    // Update the fiber if the keys match, otherwise return null.
	    var key = oldFiber !== null ? oldFiber.key : null;

	    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      if (key !== null) {
	        return null;
	      }

	      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            if (newChild.key === key) {
	              return updateElement(returnFiber, oldFiber, newChild, lanes);
	            } else {
	              return null;
	            }
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            if (newChild.key === key) {
	              return updatePortal(returnFiber, oldFiber, newChild, lanes);
	            } else {
	              return null;
	            }
	          }

	        case REACT_LAZY_TYPE:
	          {
	            var payload = newChild._payload;
	            var init = newChild._init;
	            return updateSlot(returnFiber, oldFiber, init(payload), lanes);
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        if (key !== null) {
	          return null;
	        }

	        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    }

	    return null;
	  }

	  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
	    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
	      // Text nodes don't have keys, so we neither have to check the old nor
	      // new node for the key. If both are text nodes, they match.
	      var matchedFiber = existingChildren.get(newIdx) || null;
	      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            return updateElement(returnFiber, _matchedFiber, newChild, lanes);
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
	          }

	        case REACT_LAZY_TYPE:
	          var payload = newChild._payload;
	          var init = newChild._init;
	          return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        var _matchedFiber3 = existingChildren.get(newIdx) || null;

	        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    }

	    return null;
	  }
	  /**
	   * Warns if there is a duplicate or missing key
	   */


	  function warnOnInvalidKey(child, knownKeys, returnFiber) {
	    {
	      if (typeof child !== 'object' || child === null) {
	        return knownKeys;
	      }

	      switch (child.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	        case REACT_PORTAL_TYPE:
	          warnForMissingKey(child, returnFiber);
	          var key = child.key;

	          if (typeof key !== 'string') {
	            break;
	          }

	          if (knownKeys === null) {
	            knownKeys = new Set();
	            knownKeys.add(key);
	            break;
	          }

	          if (!knownKeys.has(key)) {
	            knownKeys.add(key);
	            break;
	          }

	          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

	          break;

	        case REACT_LAZY_TYPE:
	          var payload = child._payload;
	          var init = child._init;
	          warnOnInvalidKey(init(payload), knownKeys, returnFiber);
	          break;
	      }
	    }

	    return knownKeys;
	  }

	  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
	    // This algorithm can't optimize by searching from both ends since we
	    // don't have backpointers on fibers. I'm trying to see how far we can get
	    // with that model. If it ends up not being worth the tradeoffs, we can
	    // add it later.
	    // Even with a two ended optimization, we'd want to optimize for the case
	    // where there are few changes and brute force the comparison instead of
	    // going for the Map. It'd like to explore hitting that path first in
	    // forward-only mode and only go for the Map once we notice that we need
	    // lots of look ahead. This doesn't handle reversal as well as two ended
	    // search but that's unusual. Besides, for the two ended optimization to
	    // work on Iterables, we'd need to copy the whole set.
	    // In this first iteration, we'll just live with hitting the bad case
	    // (adding everything to a Map) in for every insert/move.
	    // If you change this code, also update reconcileChildrenIterator() which
	    // uses the same algorithm.
	    {
	      // First, validate keys.
	      var knownKeys = null;

	      for (var i = 0; i < newChildren.length; i++) {
	        var child = newChildren[i];
	        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;

	    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (newIdx === newChildren.length) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);

	      if (getIsHydrating()) {
	        var numberOfForks = newIdx;
	        pushTreeFork(returnFiber, numberOfForks);
	      }

	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; newIdx < newChildren.length; newIdx++) {
	        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

	        if (_newFiber === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber;
	        } else {
	          previousNewFiber.sibling = _newFiber;
	        }

	        previousNewFiber = _newFiber;
	      }

	      if (getIsHydrating()) {
	        var _numberOfForks = newIdx;
	        pushTreeFork(returnFiber, _numberOfForks);
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; newIdx < newChildren.length; newIdx++) {
	      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

	      if (_newFiber2 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber2.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber2;
	        } else {
	          previousNewFiber.sibling = _newFiber2;
	        }

	        previousNewFiber = _newFiber2;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    if (getIsHydrating()) {
	      var _numberOfForks2 = newIdx;
	      pushTreeFork(returnFiber, _numberOfForks2);
	    }

	    return resultingFirstChild;
	  }

	  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
	    // This is the same implementation as reconcileChildrenArray(),
	    // but using the iterator instead.
	    var iteratorFn = getIteratorFn(newChildrenIterable);

	    if (typeof iteratorFn !== 'function') {
	      throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');
	    }

	    {
	      // We don't support rendering Generators because it's a mutation.
	      // See https://github.com/facebook/react/issues/12995
	      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
	      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
	        if (!didWarnAboutGenerators) {
	          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
	        }

	        didWarnAboutGenerators = true;
	      } // Warn about using Maps as children


	      if (newChildrenIterable.entries === iteratorFn) {
	        if (!didWarnAboutMaps) {
	          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
	        }

	        didWarnAboutMaps = true;
	      } // First, validate keys.
	      // We'll get a different iterator later for the main pass.


	      var _newChildren = iteratorFn.call(newChildrenIterable);

	      if (_newChildren) {
	        var knownKeys = null;

	        var _step = _newChildren.next();

	        for (; !_step.done; _step = _newChildren.next()) {
	          var child = _step.value;
	          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
	        }
	      }
	    }

	    var newChildren = iteratorFn.call(newChildrenIterable);

	    if (newChildren == null) {
	      throw new Error('An iterable object provided no iterator.');
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;
	    var step = newChildren.next();

	    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (step.done) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);

	      if (getIsHydrating()) {
	        var numberOfForks = newIdx;
	        pushTreeFork(returnFiber, numberOfForks);
	      }

	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; !step.done; newIdx++, step = newChildren.next()) {
	        var _newFiber3 = createChild(returnFiber, step.value, lanes);

	        if (_newFiber3 === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber3;
	        } else {
	          previousNewFiber.sibling = _newFiber3;
	        }

	        previousNewFiber = _newFiber3;
	      }

	      if (getIsHydrating()) {
	        var _numberOfForks3 = newIdx;
	        pushTreeFork(returnFiber, _numberOfForks3);
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; !step.done; newIdx++, step = newChildren.next()) {
	      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

	      if (_newFiber4 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber4.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber4;
	        } else {
	          previousNewFiber.sibling = _newFiber4;
	        }

	        previousNewFiber = _newFiber4;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    if (getIsHydrating()) {
	      var _numberOfForks4 = newIdx;
	      pushTreeFork(returnFiber, _numberOfForks4);
	    }

	    return resultingFirstChild;
	  }

	  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
	    // There's no need to check for keys on text nodes since we don't have a
	    // way to define them.
	    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
	      // We already have an existing node so let's just update it and delete
	      // the rest.
	      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
	      var existing = useFiber(currentFirstChild, textContent);
	      existing.return = returnFiber;
	      return existing;
	    } // The existing first child is not a text node so we need to create one
	    // and delete the existing ones.


	    deleteRemainingChildren(returnFiber, currentFirstChild);
	    var created = createFiberFromText(textContent, returnFiber.mode, lanes);
	    created.return = returnFiber;
	    return created;
	  }

	  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
	    var key = element.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        var elementType = element.type;

	        if (elementType === REACT_FRAGMENT_TYPE) {
	          if (child.tag === Fragment) {
	            deleteRemainingChildren(returnFiber, child.sibling);
	            var existing = useFiber(child, element.props.children);
	            existing.return = returnFiber;

	            {
	              existing._debugSource = element._source;
	              existing._debugOwner = element._owner;
	            }

	            return existing;
	          }
	        } else {
	          if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:
	           isCompatibleFamilyForHotReloading(child, element) ) || // Lazy types should reconcile their resolved type.
	          // We need to do this after the Hot Reloading check above,
	          // because hot reloading has different semantics than prod because
	          // it doesn't resuspend. So we can't let the call below suspend.
	          typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
	            deleteRemainingChildren(returnFiber, child.sibling);

	            var _existing = useFiber(child, element.props);

	            _existing.ref = coerceRef(returnFiber, child, element);
	            _existing.return = returnFiber;

	            {
	              _existing._debugSource = element._source;
	              _existing._debugOwner = element._owner;
	            }

	            return _existing;
	          }
	        } // Didn't match.


	        deleteRemainingChildren(returnFiber, child);
	        break;
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    if (element.type === REACT_FRAGMENT_TYPE) {
	      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

	      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
	      _created4.return = returnFiber;
	      return _created4;
	    }
	  }

	  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
	    var key = portal.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, portal.children || []);
	          existing.return = returnFiber;
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
	    created.return = returnFiber;
	    return created;
	  } // This API will tag the children with the side-effect of the reconciliation
	  // itself. They will be added to the side-effect list as we pass through the
	  // children and the parent.


	  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
	    // This function is not recursive.
	    // If the top level item is an array, we treat it as a set of children,
	    // not as a fragment. Nested arrays on the other hand will be treated as
	    // fragment nodes. Recursion happens at the normal flow.
	    // Handle top level unkeyed fragments as if they were arrays.
	    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
	    // We treat the ambiguous cases above the same.
	    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

	    if (isUnkeyedTopLevelFragment) {
	      newChild = newChild.props.children;
	    } // Handle object types


	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

	        case REACT_PORTAL_TYPE:
	          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));

	        case REACT_LAZY_TYPE:
	          var payload = newChild._payload;
	          var init = newChild._init; // TODO: This function is supposed to be non-recursive.

	          return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);
	      }

	      if (isArray(newChild)) {
	        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
	      }

	      if (getIteratorFn(newChild)) {
	        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
	      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    } // Remaining cases are all treated as empty.


	    return deleteRemainingChildren(returnFiber, currentFirstChild);
	  }

	  return reconcileChildFibers;
	}

	var reconcileChildFibers = ChildReconciler(true);
	var mountChildFibers = ChildReconciler(false);
	function cloneChildFibers(current, workInProgress) {
	  if (current !== null && workInProgress.child !== current.child) {
	    throw new Error('Resuming work not yet implemented.');
	  }

	  if (workInProgress.child === null) {
	    return;
	  }

	  var currentChild = workInProgress.child;
	  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
	  workInProgress.child = newChild;
	  newChild.return = workInProgress;

	  while (currentChild.sibling !== null) {
	    currentChild = currentChild.sibling;
	    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
	    newChild.return = workInProgress;
	  }

	  newChild.sibling = null;
	} // Reset a workInProgress child set to prepare it for a second pass.

	function resetChildFibers(workInProgress, lanes) {
	  var child = workInProgress.child;

	  while (child !== null) {
	    resetWorkInProgress(child, lanes);
	    child = child.sibling;
	  }
	}

	var valueCursor = createCursor(null);
	var rendererSigil;

	{
	  // Use this to detect multiple renderers using the same context
	  rendererSigil = {};
	}

	var currentlyRenderingFiber = null;
	var lastContextDependency = null;
	var lastFullyObservedContext = null;
	var isDisallowedContextReadInDEV = false;
	function resetContextDependencies() {
	  // This is called right before React yields execution, to ensure `readContext`
	  // cannot be called outside the render phase.
	  currentlyRenderingFiber = null;
	  lastContextDependency = null;
	  lastFullyObservedContext = null;

	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function enterDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = true;
	  }
	}
	function exitDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function pushProvider(providerFiber, context, nextValue) {
	  {
	    push(valueCursor, context._currentValue, providerFiber);
	    context._currentValue = nextValue;

	    {
	      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
	        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
	      }

	      context._currentRenderer = rendererSigil;
	    }
	  }
	}
	function popProvider(context, providerFiber) {
	  var currentValue = valueCursor.current;
	  pop(valueCursor, providerFiber);

	  {
	    {
	      context._currentValue = currentValue;
	    }
	  }
	}
	function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
	  // Update the child lanes of all the ancestors, including the alternates.
	  var node = parent;

	  while (node !== null) {
	    var alternate = node.alternate;

	    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
	      node.childLanes = mergeLanes(node.childLanes, renderLanes);

	      if (alternate !== null) {
	        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
	      }
	    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
	      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
	    }

	    if (node === propagationRoot) {
	      break;
	    }

	    node = node.return;
	  }

	  {
	    if (node !== propagationRoot) {
	      error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }
	  }
	}
	function propagateContextChange(workInProgress, context, renderLanes) {
	  {
	    propagateContextChange_eager(workInProgress, context, renderLanes);
	  }
	}

	function propagateContextChange_eager(workInProgress, context, renderLanes) {

	  var fiber = workInProgress.child;

	  if (fiber !== null) {
	    // Set the return pointer of the child to the work-in-progress fiber.
	    fiber.return = workInProgress;
	  }

	  while (fiber !== null) {
	    var nextFiber = void 0; // Visit this fiber.

	    var list = fiber.dependencies;

	    if (list !== null) {
	      nextFiber = fiber.child;
	      var dependency = list.firstContext;

	      while (dependency !== null) {
	        // Check if the context matches.
	        if (dependency.context === context) {
	          // Match! Schedule an update on this fiber.
	          if (fiber.tag === ClassComponent) {
	            // Schedule a force update on the work-in-progress.
	            var lane = pickArbitraryLane(renderLanes);
	            var update = createUpdate(NoTimestamp, lane);
	            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
	            // update to the current fiber, too, which means it will persist even if
	            // this render is thrown away. Since it's a race condition, not sure it's
	            // worth fixing.
	            // Inlined `enqueueUpdate` to remove interleaved update check

	            var updateQueue = fiber.updateQueue;

	            if (updateQueue === null) ; else {
	              var sharedQueue = updateQueue.shared;
	              var pending = sharedQueue.pending;

	              if (pending === null) {
	                // This is the first update. Create a circular list.
	                update.next = update;
	              } else {
	                update.next = pending.next;
	                pending.next = update;
	              }

	              sharedQueue.pending = update;
	            }
	          }

	          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
	          var alternate = fiber.alternate;

	          if (alternate !== null) {
	            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
	          }

	          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.

	          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
	          // dependency list.

	          break;
	        }

	        dependency = dependency.next;
	      }
	    } else if (fiber.tag === ContextProvider) {
	      // Don't scan deeper if this is a matching provider
	      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
	    } else if (fiber.tag === DehydratedFragment) {
	      // If a dehydrated suspense boundary is in this subtree, we don't know
	      // if it will have any context consumers in it. The best we can do is
	      // mark it as having updates.
	      var parentSuspense = fiber.return;

	      if (parentSuspense === null) {
	        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');
	      }

	      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
	      var _alternate = parentSuspense.alternate;

	      if (_alternate !== null) {
	        _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
	      } // This is intentionally passing this fiber as the parent
	      // because we want to schedule this fiber as having work
	      // on its children. We'll use the childLanes on
	      // this fiber to indicate that a context has changed.


	      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
	      nextFiber = fiber.sibling;
	    } else {
	      // Traverse down.
	      nextFiber = fiber.child;
	    }

	    if (nextFiber !== null) {
	      // Set the return pointer of the child to the work-in-progress fiber.
	      nextFiber.return = fiber;
	    } else {
	      // No child. Traverse to next sibling.
	      nextFiber = fiber;

	      while (nextFiber !== null) {
	        if (nextFiber === workInProgress) {
	          // We're back to the root of this subtree. Exit.
	          nextFiber = null;
	          break;
	        }

	        var sibling = nextFiber.sibling;

	        if (sibling !== null) {
	          // Set the return pointer of the sibling to the work-in-progress fiber.
	          sibling.return = nextFiber.return;
	          nextFiber = sibling;
	          break;
	        } // No more siblings. Traverse up.


	        nextFiber = nextFiber.return;
	      }
	    }

	    fiber = nextFiber;
	  }
	}
	function prepareToReadContext(workInProgress, renderLanes) {
	  currentlyRenderingFiber = workInProgress;
	  lastContextDependency = null;
	  lastFullyObservedContext = null;
	  var dependencies = workInProgress.dependencies;

	  if (dependencies !== null) {
	    {
	      var firstContext = dependencies.firstContext;

	      if (firstContext !== null) {
	        if (includesSomeLane(dependencies.lanes, renderLanes)) {
	          // Context list has a pending update. Mark that this fiber performed work.
	          markWorkInProgressReceivedUpdate();
	        } // Reset the work-in-progress list


	        dependencies.firstContext = null;
	      }
	    }
	  }
	}
	function readContext(context) {
	  {
	    // This warning would fire if you read context inside a Hook like useMemo.
	    // Unlike the class check below, it's not enforced in production for perf.
	    if (isDisallowedContextReadInDEV) {
	      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	    }
	  }

	  var value =  context._currentValue ;

	  if (lastFullyObservedContext === context) ; else {
	    var contextItem = {
	      context: context,
	      memoizedValue: value,
	      next: null
	    };

	    if (lastContextDependency === null) {
	      if (currentlyRenderingFiber === null) {
	        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	      } // This is the first dependency for this component. Create a new list.


	      lastContextDependency = contextItem;
	      currentlyRenderingFiber.dependencies = {
	        lanes: NoLanes,
	        firstContext: contextItem
	      };
	    } else {
	      // Append a new context item.
	      lastContextDependency = lastContextDependency.next = contextItem;
	    }
	  }

	  return value;
	}

	// render. When this render exits, either because it finishes or because it is
	// interrupted, the interleaved updates will be transferred onto the main part
	// of the queue.

	var concurrentQueues = null;
	function pushConcurrentUpdateQueue(queue) {
	  if (concurrentQueues === null) {
	    concurrentQueues = [queue];
	  } else {
	    concurrentQueues.push(queue);
	  }
	}
	function finishQueueingConcurrentUpdates() {
	  // Transfer the interleaved updates onto the main queue. Each queue has a
	  // `pending` field and an `interleaved` field. When they are not null, they
	  // point to the last node in a circular linked list. We need to append the
	  // interleaved list to the end of the pending list by joining them into a
	  // single, circular list.
	  if (concurrentQueues !== null) {
	    for (var i = 0; i < concurrentQueues.length; i++) {
	      var queue = concurrentQueues[i];
	      var lastInterleavedUpdate = queue.interleaved;

	      if (lastInterleavedUpdate !== null) {
	        queue.interleaved = null;
	        var firstInterleavedUpdate = lastInterleavedUpdate.next;
	        var lastPendingUpdate = queue.pending;

	        if (lastPendingUpdate !== null) {
	          var firstPendingUpdate = lastPendingUpdate.next;
	          lastPendingUpdate.next = firstInterleavedUpdate;
	          lastInterleavedUpdate.next = firstPendingUpdate;
	        }

	        queue.pending = lastInterleavedUpdate;
	      }
	    }

	    concurrentQueues = null;
	  }
	}
	function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
	  var interleaved = queue.interleaved;

	  if (interleaved === null) {
	    // This is the first update. Create a circular list.
	    update.next = update; // At the end of the current render, this queue's interleaved updates will
	    // be transferred to the pending queue.

	    pushConcurrentUpdateQueue(queue);
	  } else {
	    update.next = interleaved.next;
	    interleaved.next = update;
	  }

	  queue.interleaved = update;
	  return markUpdateLaneFromFiberToRoot(fiber, lane);
	}
	function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
	  var interleaved = queue.interleaved;

	  if (interleaved === null) {
	    // This is the first update. Create a circular list.
	    update.next = update; // At the end of the current render, this queue's interleaved updates will
	    // be transferred to the pending queue.

	    pushConcurrentUpdateQueue(queue);
	  } else {
	    update.next = interleaved.next;
	    interleaved.next = update;
	  }

	  queue.interleaved = update;
	}
	function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
	  var interleaved = queue.interleaved;

	  if (interleaved === null) {
	    // This is the first update. Create a circular list.
	    update.next = update; // At the end of the current render, this queue's interleaved updates will
	    // be transferred to the pending queue.

	    pushConcurrentUpdateQueue(queue);
	  } else {
	    update.next = interleaved.next;
	    interleaved.next = update;
	  }

	  queue.interleaved = update;
	  return markUpdateLaneFromFiberToRoot(fiber, lane);
	}
	function enqueueConcurrentRenderForLane(fiber, lane) {
	  return markUpdateLaneFromFiberToRoot(fiber, lane);
	} // Calling this function outside this module should only be done for backwards
	// compatibility and should always be accompanied by a warning.

	var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;

	function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
	  // Update the source fiber's lanes
	  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
	  var alternate = sourceFiber.alternate;

	  if (alternate !== null) {
	    alternate.lanes = mergeLanes(alternate.lanes, lane);
	  }

	  {
	    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
	      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
	    }
	  } // Walk the parent path to the root and update the child lanes.


	  var node = sourceFiber;
	  var parent = sourceFiber.return;

	  while (parent !== null) {
	    parent.childLanes = mergeLanes(parent.childLanes, lane);
	    alternate = parent.alternate;

	    if (alternate !== null) {
	      alternate.childLanes = mergeLanes(alternate.childLanes, lane);
	    } else {
	      {
	        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
	          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
	        }
	      }
	    }

	    node = parent;
	    parent = parent.return;
	  }

	  if (node.tag === HostRoot) {
	    var root = node.stateNode;
	    return root;
	  } else {
	    return null;
	  }
	}

	var UpdateState = 0;
	var ReplaceState = 1;
	var ForceUpdate = 2;
	var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
	// It should only be read right after calling `processUpdateQueue`, via
	// `checkHasForceUpdateAfterProcessing`.

	var hasForceUpdate = false;
	var didWarnUpdateInsideUpdate;
	var currentlyProcessingQueue;

	{
	  didWarnUpdateInsideUpdate = false;
	  currentlyProcessingQueue = null;
	}

	function initializeUpdateQueue(fiber) {
	  var queue = {
	    baseState: fiber.memoizedState,
	    firstBaseUpdate: null,
	    lastBaseUpdate: null,
	    shared: {
	      pending: null,
	      interleaved: null,
	      lanes: NoLanes
	    },
	    effects: null
	  };
	  fiber.updateQueue = queue;
	}
	function cloneUpdateQueue(current, workInProgress) {
	  // Clone the update queue from current. Unless it's already a clone.
	  var queue = workInProgress.updateQueue;
	  var currentQueue = current.updateQueue;

	  if (queue === currentQueue) {
	    var clone = {
	      baseState: currentQueue.baseState,
	      firstBaseUpdate: currentQueue.firstBaseUpdate,
	      lastBaseUpdate: currentQueue.lastBaseUpdate,
	      shared: currentQueue.shared,
	      effects: currentQueue.effects
	    };
	    workInProgress.updateQueue = clone;
	  }
	}
	function createUpdate(eventTime, lane) {
	  var update = {
	    eventTime: eventTime,
	    lane: lane,
	    tag: UpdateState,
	    payload: null,
	    callback: null,
	    next: null
	  };
	  return update;
	}
	function enqueueUpdate(fiber, update, lane) {
	  var updateQueue = fiber.updateQueue;

	  if (updateQueue === null) {
	    // Only occurs if the fiber has been unmounted.
	    return null;
	  }

	  var sharedQueue = updateQueue.shared;

	  {
	    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
	      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

	      didWarnUpdateInsideUpdate = true;
	    }
	  }

	  if (isUnsafeClassRenderPhaseUpdate()) {
	    // This is an unsafe render phase update. Add directly to the update
	    // queue so we can process it immediately during the current render.
	    var pending = sharedQueue.pending;

	    if (pending === null) {
	      // This is the first update. Create a circular list.
	      update.next = update;
	    } else {
	      update.next = pending.next;
	      pending.next = update;
	    }

	    sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering
	    // this fiber. This is for backwards compatibility in the case where you
	    // update a different component during render phase than the one that is
	    // currently renderings (a pattern that is accompanied by a warning).

	    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
	  } else {
	    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
	  }
	}
	function entangleTransitions(root, fiber, lane) {
	  var updateQueue = fiber.updateQueue;

	  if (updateQueue === null) {
	    // Only occurs if the fiber has been unmounted.
	    return;
	  }

	  var sharedQueue = updateQueue.shared;

	  if (isTransitionLane(lane)) {
	    var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must
	    // have finished. We can remove them from the shared queue, which represents
	    // a superset of the actually pending lanes. In some cases we may entangle
	    // more than we need to, but that's OK. In fact it's worse if we *don't*
	    // entangle when we should.

	    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.

	    var newQueueLanes = mergeLanes(queueLanes, lane);
	    sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
	    // the lane finished since the last time we entangled it. So we need to
	    // entangle it again, just to be sure.

	    markRootEntangled(root, newQueueLanes);
	  }
	}
	function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
	  // Captured updates are updates that are thrown by a child during the render
	  // phase. They should be discarded if the render is aborted. Therefore,
	  // we should only put them on the work-in-progress queue, not the current one.
	  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

	  var current = workInProgress.alternate;

	  if (current !== null) {
	    var currentQueue = current.updateQueue;

	    if (queue === currentQueue) {
	      // The work-in-progress queue is the same as current. This happens when
	      // we bail out on a parent fiber that then captures an error thrown by
	      // a child. Since we want to append the update only to the work-in
	      // -progress queue, we need to clone the updates. We usually clone during
	      // processUpdateQueue, but that didn't happen in this case because we
	      // skipped over the parent when we bailed out.
	      var newFirst = null;
	      var newLast = null;
	      var firstBaseUpdate = queue.firstBaseUpdate;

	      if (firstBaseUpdate !== null) {
	        // Loop through the updates and clone them.
	        var update = firstBaseUpdate;

	        do {
	          var clone = {
	            eventTime: update.eventTime,
	            lane: update.lane,
	            tag: update.tag,
	            payload: update.payload,
	            callback: update.callback,
	            next: null
	          };

	          if (newLast === null) {
	            newFirst = newLast = clone;
	          } else {
	            newLast.next = clone;
	            newLast = clone;
	          }

	          update = update.next;
	        } while (update !== null); // Append the captured update the end of the cloned list.


	        if (newLast === null) {
	          newFirst = newLast = capturedUpdate;
	        } else {
	          newLast.next = capturedUpdate;
	          newLast = capturedUpdate;
	        }
	      } else {
	        // There are no base updates.
	        newFirst = newLast = capturedUpdate;
	      }

	      queue = {
	        baseState: currentQueue.baseState,
	        firstBaseUpdate: newFirst,
	        lastBaseUpdate: newLast,
	        shared: currentQueue.shared,
	        effects: currentQueue.effects
	      };
	      workInProgress.updateQueue = queue;
	      return;
	    }
	  } // Append the update to the end of the list.


	  var lastBaseUpdate = queue.lastBaseUpdate;

	  if (lastBaseUpdate === null) {
	    queue.firstBaseUpdate = capturedUpdate;
	  } else {
	    lastBaseUpdate.next = capturedUpdate;
	  }

	  queue.lastBaseUpdate = capturedUpdate;
	}

	function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
	  switch (update.tag) {
	    case ReplaceState:
	      {
	        var payload = update.payload;

	        if (typeof payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();
	          }

	          var nextState = payload.call(instance, prevState, nextProps);

	          {
	            if ( workInProgress.mode & StrictLegacyMode) {
	              setIsStrictModeForDevtools(true);

	              try {
	                payload.call(instance, prevState, nextProps);
	              } finally {
	                setIsStrictModeForDevtools(false);
	              }
	            }

	            exitDisallowedContextReadInDEV();
	          }

	          return nextState;
	        } // State object


	        return payload;
	      }

	    case CaptureUpdate:
	      {
	        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
	      }
	    // Intentional fallthrough

	    case UpdateState:
	      {
	        var _payload = update.payload;
	        var partialState;

	        if (typeof _payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();
	          }

	          partialState = _payload.call(instance, prevState, nextProps);

	          {
	            if ( workInProgress.mode & StrictLegacyMode) {
	              setIsStrictModeForDevtools(true);

	              try {
	                _payload.call(instance, prevState, nextProps);
	              } finally {
	                setIsStrictModeForDevtools(false);
	              }
	            }

	            exitDisallowedContextReadInDEV();
	          }
	        } else {
	          // Partial state object
	          partialState = _payload;
	        }

	        if (partialState === null || partialState === undefined) {
	          // Null and undefined are treated as no-ops.
	          return prevState;
	        } // Merge the partial state and the previous state.


	        return assign({}, prevState, partialState);
	      }

	    case ForceUpdate:
	      {
	        hasForceUpdate = true;
	        return prevState;
	      }
	  }

	  return prevState;
	}

	function processUpdateQueue(workInProgress, props, instance, renderLanes) {
	  // This is always non-null on a ClassComponent or HostRoot
	  var queue = workInProgress.updateQueue;
	  hasForceUpdate = false;

	  {
	    currentlyProcessingQueue = queue.shared;
	  }

	  var firstBaseUpdate = queue.firstBaseUpdate;
	  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.

	  var pendingQueue = queue.shared.pending;

	  if (pendingQueue !== null) {
	    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
	    // and last so that it's non-circular.

	    var lastPendingUpdate = pendingQueue;
	    var firstPendingUpdate = lastPendingUpdate.next;
	    lastPendingUpdate.next = null; // Append pending updates to base queue

	    if (lastBaseUpdate === null) {
	      firstBaseUpdate = firstPendingUpdate;
	    } else {
	      lastBaseUpdate.next = firstPendingUpdate;
	    }

	    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
	    // we need to transfer the updates to that queue, too. Because the base
	    // queue is a singly-linked list with no cycles, we can append to both
	    // lists and take advantage of structural sharing.
	    // TODO: Pass `current` as argument

	    var current = workInProgress.alternate;

	    if (current !== null) {
	      // This is always non-null on a ClassComponent or HostRoot
	      var currentQueue = current.updateQueue;
	      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

	      if (currentLastBaseUpdate !== lastBaseUpdate) {
	        if (currentLastBaseUpdate === null) {
	          currentQueue.firstBaseUpdate = firstPendingUpdate;
	        } else {
	          currentLastBaseUpdate.next = firstPendingUpdate;
	        }

	        currentQueue.lastBaseUpdate = lastPendingUpdate;
	      }
	    }
	  } // These values may change as we process the queue.


	  if (firstBaseUpdate !== null) {
	    // Iterate through the list of updates to compute the result.
	    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
	    // from the original lanes.

	    var newLanes = NoLanes;
	    var newBaseState = null;
	    var newFirstBaseUpdate = null;
	    var newLastBaseUpdate = null;
	    var update = firstBaseUpdate;

	    do {
	      var updateLane = update.lane;
	      var updateEventTime = update.eventTime;

	      if (!isSubsetOfLanes(renderLanes, updateLane)) {
	        // Priority is insufficient. Skip this update. If this is the first
	        // skipped update, the previous update/state is the new base
	        // update/state.
	        var clone = {
	          eventTime: updateEventTime,
	          lane: updateLane,
	          tag: update.tag,
	          payload: update.payload,
	          callback: update.callback,
	          next: null
	        };

	        if (newLastBaseUpdate === null) {
	          newFirstBaseUpdate = newLastBaseUpdate = clone;
	          newBaseState = newState;
	        } else {
	          newLastBaseUpdate = newLastBaseUpdate.next = clone;
	        } // Update the remaining priority in the queue.


	        newLanes = mergeLanes(newLanes, updateLane);
	      } else {
	        // This update does have sufficient priority.
	        if (newLastBaseUpdate !== null) {
	          var _clone = {
	            eventTime: updateEventTime,
	            // This update is going to be committed so we never want uncommit
	            // it. Using NoLane works because 0 is a subset of all bitmasks, so
	            // this will never be skipped by the check above.
	            lane: NoLane,
	            tag: update.tag,
	            payload: update.payload,
	            callback: update.callback,
	            next: null
	          };
	          newLastBaseUpdate = newLastBaseUpdate.next = _clone;
	        } // Process this update.


	        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
	        var callback = update.callback;

	        if (callback !== null && // If the update was already committed, we should not queue its
	        // callback again.
	        update.lane !== NoLane) {
	          workInProgress.flags |= Callback;
	          var effects = queue.effects;

	          if (effects === null) {
	            queue.effects = [update];
	          } else {
	            effects.push(update);
	          }
	        }
	      }

	      update = update.next;

	      if (update === null) {
	        pendingQueue = queue.shared.pending;

	        if (pendingQueue === null) {
	          break;
	        } else {
	          // An update was scheduled from inside a reducer. Add the new
	          // pending updates to the end of the list and keep processing.
	          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
	          // unravel them when transferring them to the base queue.

	          var _firstPendingUpdate = _lastPendingUpdate.next;
	          _lastPendingUpdate.next = null;
	          update = _firstPendingUpdate;
	          queue.lastBaseUpdate = _lastPendingUpdate;
	          queue.shared.pending = null;
	        }
	      }
	    } while (true);

	    if (newLastBaseUpdate === null) {
	      newBaseState = newState;
	    }

	    queue.baseState = newBaseState;
	    queue.firstBaseUpdate = newFirstBaseUpdate;
	    queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to
	    // process them during this render, but we do need to track which lanes
	    // are remaining.

	    var lastInterleaved = queue.shared.interleaved;

	    if (lastInterleaved !== null) {
	      var interleaved = lastInterleaved;

	      do {
	        newLanes = mergeLanes(newLanes, interleaved.lane);
	        interleaved = interleaved.next;
	      } while (interleaved !== lastInterleaved);
	    } else if (firstBaseUpdate === null) {
	      // `queue.lanes` is used for entangling transitions. We can set it back to
	      // zero once the queue is empty.
	      queue.shared.lanes = NoLanes;
	    } // Set the remaining expiration time to be whatever is remaining in the queue.
	    // This should be fine because the only two other things that contribute to
	    // expiration time are props and context. We're already in the middle of the
	    // begin phase by the time we start processing the queue, so we've already
	    // dealt with the props. Context in components that specify
	    // shouldComponentUpdate is tricky; but we'll have to account for
	    // that regardless.


	    markSkippedUpdateLanes(newLanes);
	    workInProgress.lanes = newLanes;
	    workInProgress.memoizedState = newState;
	  }

	  {
	    currentlyProcessingQueue = null;
	  }
	}

	function callCallback(callback, context) {
	  if (typeof callback !== 'function') {
	    throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + ("received: " + callback));
	  }

	  callback.call(context);
	}

	function resetHasForceUpdateBeforeProcessing() {
	  hasForceUpdate = false;
	}
	function checkHasForceUpdateAfterProcessing() {
	  return hasForceUpdate;
	}
	function commitUpdateQueue(finishedWork, finishedQueue, instance) {
	  // Commit the effects
	  var effects = finishedQueue.effects;
	  finishedQueue.effects = null;

	  if (effects !== null) {
	    for (var i = 0; i < effects.length; i++) {
	      var effect = effects[i];
	      var callback = effect.callback;

	      if (callback !== null) {
	        effect.callback = null;
	        callCallback(callback, instance);
	      }
	    }
	  }
	}

	var NO_CONTEXT = {};
	var contextStackCursor$1 = createCursor(NO_CONTEXT);
	var contextFiberStackCursor = createCursor(NO_CONTEXT);
	var rootInstanceStackCursor = createCursor(NO_CONTEXT);

	function requiredContext(c) {
	  if (c === NO_CONTEXT) {
	    throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');
	  }

	  return c;
	}

	function getRootHostContainer() {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  return rootInstance;
	}

	function pushHostContainer(fiber, nextRootInstance) {
	  // Push current root instance onto the stack;
	  // This allows us to reset root when portals are popped.
	  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.

	  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
	  // However, we can't just call getRootHostContext() and push it because
	  // we'd have a different number of entries on the stack depending on
	  // whether getRootHostContext() throws somewhere in renderer code or not.
	  // So we push an empty value first. This lets us safely unwind on errors.

	  push(contextStackCursor$1, NO_CONTEXT, fiber);
	  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

	  pop(contextStackCursor$1, fiber);
	  push(contextStackCursor$1, nextRootContext, fiber);
	}

	function popHostContainer(fiber) {
	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	  pop(rootInstanceStackCursor, fiber);
	}

	function getHostContext() {
	  var context = requiredContext(contextStackCursor$1.current);
	  return context;
	}

	function pushHostContext(fiber) {
	  requiredContext(rootInstanceStackCursor.current);
	  var context = requiredContext(contextStackCursor$1.current);
	  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

	  if (context === nextContext) {
	    return;
	  } // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.


	  push(contextFiberStackCursor, fiber, fiber);
	  push(contextStackCursor$1, nextContext, fiber);
	}

	function popHostContext(fiber) {
	  // Do not pop unless this Fiber provided the current context.
	  // pushHostContext() only pushes Fibers that provide unique contexts.
	  if (contextFiberStackCursor.current !== fiber) {
	    return;
	  }

	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	}

	var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
	// inherited deeply down the subtree. The upper bits only affect
	// this immediate suspense boundary and gets reset each new
	// boundary or suspense list.

	var SubtreeSuspenseContextMask = 1; // Subtree Flags:
	// InvisibleParentSuspenseContext indicates that one of our parent Suspense
	// boundaries is not currently showing visible main content.
	// Either because it is already showing a fallback or is not mounted at all.
	// We can use this to determine if it is desirable to trigger a fallback at
	// the parent. If not, then we might need to trigger undesirable boundaries
	// and/or suspend the commit to avoid hiding the parent content.

	var InvisibleParentSuspenseContext = 1; // Shallow Flags:
	// ForceSuspenseFallback can be used by SuspenseList to force newly added
	// items into their fallback state during one of the render passes.

	var ForceSuspenseFallback = 2;
	var suspenseStackCursor = createCursor(DefaultSuspenseContext);
	function hasSuspenseContext(parentContext, flag) {
	  return (parentContext & flag) !== 0;
	}
	function setDefaultShallowSuspenseContext(parentContext) {
	  return parentContext & SubtreeSuspenseContextMask;
	}
	function setShallowSuspenseContext(parentContext, shallowContext) {
	  return parentContext & SubtreeSuspenseContextMask | shallowContext;
	}
	function addSubtreeSuspenseContext(parentContext, subtreeContext) {
	  return parentContext | subtreeContext;
	}
	function pushSuspenseContext(fiber, newContext) {
	  push(suspenseStackCursor, newContext, fiber);
	}
	function popSuspenseContext(fiber) {
	  pop(suspenseStackCursor, fiber);
	}

	function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
	  // If it was the primary children that just suspended, capture and render the
	  // fallback. Otherwise, don't capture and bubble to the next boundary.
	  var nextState = workInProgress.memoizedState;

	  if (nextState !== null) {
	    if (nextState.dehydrated !== null) {
	      // A dehydrated boundary always captures.
	      return true;
	    }

	    return false;
	  }

	  workInProgress.memoizedProps; // Regular boundaries always capture.

	  {
	    return true;
	  } // If it's a boundary we should avoid, then we prefer to bubble up to the
	}
	function findFirstSuspended(row) {
	  var node = row;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        var dehydrated = state.dehydrated;

	        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
	          return node;
	        }
	      }
	    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
	    // keep track of whether it suspended or not.
	    node.memoizedProps.revealOrder !== undefined) {
	      var didSuspend = (node.flags & DidCapture) !== NoFlags;

	      if (didSuspend) {
	        return node;
	      }
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === row) {
	      return null;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === row) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }

	  return null;
	}

	var NoFlags$1 =
	/*   */
	0; // Represents whether effect should fire.

	var HasEffect =
	/* */
	1; // Represents the phase in which the effect (not the clean-up) fires.

	var Insertion =
	/*  */
	2;
	var Layout =
	/*    */
	4;
	var Passive$1 =
	/*   */
	8;

	// and should be reset before starting a new render.
	// This tracks which mutable sources need to be reset after a render.

	var workInProgressSources = [];
	function resetWorkInProgressVersions() {
	  for (var i = 0; i < workInProgressSources.length; i++) {
	    var mutableSource = workInProgressSources[i];

	    {
	      mutableSource._workInProgressVersionPrimary = null;
	    }
	  }

	  workInProgressSources.length = 0;
	}
	// This ensures that the version used for server rendering matches the one
	// that is eventually read during hydration.
	// If they don't match there's a potential tear and a full deopt render is required.

	function registerMutableSourceForHydration(root, mutableSource) {
	  var getVersion = mutableSource._getVersion;
	  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
	  // Retaining it forever may interfere with GC.

	  if (root.mutableSourceEagerHydrationData == null) {
	    root.mutableSourceEagerHydrationData = [mutableSource, version];
	  } else {
	    root.mutableSourceEagerHydrationData.push(mutableSource, version);
	  }
	}

	var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
	    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
	var didWarnAboutMismatchedHooksForComponent;
	var didWarnUncachedGetSnapshot;

	{
	  didWarnAboutMismatchedHooksForComponent = new Set();
	}

	// These are set right before calling the component.
	var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
	// the work-in-progress hook.

	var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
	// current hook list is the list that belongs to the current fiber. The
	// work-in-progress hook list is a new list that will be added to the
	// work-in-progress fiber.

	var currentHook = null;
	var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
	// does not get reset if we do another render pass; only when we're completely
	// finished evaluating this component. This is an optimization so we know
	// whether we need to clear render phase updates after a throw.

	var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
	// gets reset after each attempt.
	// TODO: Maybe there's some way to consolidate this with
	// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

	var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.

	var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during
	// hydration). This counter is global, so client ids are not stable across
	// render attempts.

	var globalClientIdCounter = 0;
	var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

	var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
	// The list stores the order of hooks used during the initial render (mount).
	// Subsequent renders (updates) reference this list.

	var hookTypesDev = null;
	var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
	// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
	// When true, such Hooks will always be "remounted". Only used during hot reload.

	var ignorePreviousDependencies = false;

	function mountHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev === null) {
	      hookTypesDev = [hookName];
	    } else {
	      hookTypesDev.push(hookName);
	    }
	  }
	}

	function updateHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev !== null) {
	      hookTypesUpdateIndexDev++;

	      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
	        warnOnHookMismatchInDev(hookName);
	      }
	    }
	  }
	}

	function checkDepsAreArrayDev(deps) {
	  {
	    if (deps !== undefined && deps !== null && !isArray(deps)) {
	      // Verify deps, but only on mount to avoid extra checks.
	      // It's unlikely their type would change as usually you define them inline.
	      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
	    }
	  }
	}

	function warnOnHookMismatchInDev(currentHookName) {
	  {
	    var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);

	    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
	      didWarnAboutMismatchedHooksForComponent.add(componentName);

	      if (hookTypesDev !== null) {
	        var table = '';
	        var secondColumnStart = 30;

	        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
	          var oldHookName = hookTypesDev[i];
	          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
	          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
	          // lol @ IE not supporting String#repeat

	          while (row.length < secondColumnStart) {
	            row += ' ';
	          }

	          row += newHookName + '\n';
	          table += row;
	        }

	        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
	      }
	    }
	  }
	}

	function throwInvalidHookError() {
	  throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
	}

	function areHookInputsEqual(nextDeps, prevDeps) {
	  {
	    if (ignorePreviousDependencies) {
	      // Only true when this component is being hot reloaded.
	      return false;
	    }
	  }

	  if (prevDeps === null) {
	    {
	      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
	    }

	    return false;
	  }

	  {
	    // Don't bother comparing lengths in prod because these arrays should be
	    // passed inline.
	    if (nextDeps.length !== prevDeps.length) {
	      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
	    }
	  }

	  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
	    if (objectIs(nextDeps[i], prevDeps[i])) {
	      continue;
	    }

	    return false;
	  }

	  return true;
	}

	function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
	  renderLanes = nextRenderLanes;
	  currentlyRenderingFiber$1 = workInProgress;

	  {
	    hookTypesDev = current !== null ? current._debugHookTypes : null;
	    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

	    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
	  }

	  workInProgress.memoizedState = null;
	  workInProgress.updateQueue = null;
	  workInProgress.lanes = NoLanes; // The following should have already been reset
	  // currentHook = null;
	  // workInProgressHook = null;
	  // didScheduleRenderPhaseUpdate = false;
	  // localIdCounter = 0;
	  // TODO Warn if no hooks are used at all during mount, then some are used during update.
	  // Currently we will identify the update render as a mount because memoizedState === null.
	  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
	  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
	  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
	  // so memoizedState would be null during updates and mounts.

	  {
	    if (current !== null && current.memoizedState !== null) {
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
	    } else if (hookTypesDev !== null) {
	      // This dispatcher handles an edge case where a component is updating,
	      // but no stateful hooks have been used.
	      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
	      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
	      // This dispatcher does that.
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
	    } else {
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
	    }
	  }

	  var children = Component(props, secondArg); // Check if there was a render phase update

	  if (didScheduleRenderPhaseUpdateDuringThisPass) {
	    // Keep rendering in a loop for as long as render phase updates continue to
	    // be scheduled. Use a counter to prevent infinite loops.
	    var numberOfReRenders = 0;

	    do {
	      didScheduleRenderPhaseUpdateDuringThisPass = false;
	      localIdCounter = 0;

	      if (numberOfReRenders >= RE_RENDER_LIMIT) {
	        throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');
	      }

	      numberOfReRenders += 1;

	      {
	        // Even when hot reloading, allow dependencies to stabilize
	        // after first render to prevent infinite render phase updates.
	        ignorePreviousDependencies = false;
	      } // Start over from the beginning of the list


	      currentHook = null;
	      workInProgressHook = null;
	      workInProgress.updateQueue = null;

	      {
	        // Also validate hook order for cascading updates.
	        hookTypesUpdateIndexDev = -1;
	      }

	      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;
	      children = Component(props, secondArg);
	    } while (didScheduleRenderPhaseUpdateDuringThisPass);
	  } // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrance.


	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

	  {
	    workInProgress._debugHookTypes = hookTypesDev;
	  } // This check uses currentHook so that it works the same in DEV and prod bundles.
	  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


	  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
	  renderLanes = NoLanes;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  workInProgressHook = null;

	  {
	    currentHookNameInDev = null;
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last
	    // render. If this fires, it suggests that we incorrectly reset the static
	    // flags in some other part of the codebase. This has happened before, for
	    // example, in the SuspenseList implementation.

	    if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
	    // and creates false positives. To make this work in legacy mode, we'd
	    // need to mark fibers that commit in an incomplete state, somehow. For
	    // now I'll disable the warning that most of the bugs that would trigger
	    // it are either exclusive to concurrent mode or exist in both.
	    (current.mode & ConcurrentMode) !== NoMode) {
	      error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');
	    }
	  }

	  didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook
	  // localIdCounter = 0;

	  if (didRenderTooFewHooks) {
	    throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');
	  }

	  return children;
	}
	function checkDidRenderIdHook() {
	  // This should be called immediately after every renderWithHooks call.
	  // Conceptually, it's part of the return value of renderWithHooks; it's only a
	  // separate function to avoid using an array tuple.
	  var didRenderIdHook = localIdCounter !== 0;
	  localIdCounter = 0;
	  return didRenderIdHook;
	}
	function bailoutHooks(current, workInProgress, lanes) {
	  workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the
	  // complete phase (bubbleProperties).

	  if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	    workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
	  } else {
	    workInProgress.flags &= ~(Passive | Update);
	  }

	  current.lanes = removeLanes(current.lanes, lanes);
	}
	function resetHooksAfterThrow() {
	  // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrance.
	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

	  if (didScheduleRenderPhaseUpdate) {
	    // There were render phase updates. These are only valid for this render
	    // phase, which we are now aborting. Remove the updates from the queues so
	    // they do not persist to the next render. Do not remove updates from hooks
	    // that weren't processed.
	    //
	    // Only reset the updates from the queue if it has a clone. If it does
	    // not have a clone, that means it wasn't processed, and the updates were
	    // scheduled before we entered the render phase.
	    var hook = currentlyRenderingFiber$1.memoizedState;

	    while (hook !== null) {
	      var queue = hook.queue;

	      if (queue !== null) {
	        queue.pending = null;
	      }

	      hook = hook.next;
	    }

	    didScheduleRenderPhaseUpdate = false;
	  }

	  renderLanes = NoLanes;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  workInProgressHook = null;

	  {
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1;
	    currentHookNameInDev = null;
	    isUpdatingOpaqueValueInRenderPhase = false;
	  }

	  didScheduleRenderPhaseUpdateDuringThisPass = false;
	  localIdCounter = 0;
	}

	function mountWorkInProgressHook() {
	  var hook = {
	    memoizedState: null,
	    baseState: null,
	    baseQueue: null,
	    queue: null,
	    next: null
	  };

	  if (workInProgressHook === null) {
	    // This is the first hook in the list
	    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
	  } else {
	    // Append to the end of the list
	    workInProgressHook = workInProgressHook.next = hook;
	  }

	  return workInProgressHook;
	}

	function updateWorkInProgressHook() {
	  // This function is used both for updates and for re-renders triggered by a
	  // render phase update. It assumes there is either a current hook we can
	  // clone, or a work-in-progress hook from a previous render pass that we can
	  // use as a base. When we reach the end of the base list, we must switch to
	  // the dispatcher used for mounts.
	  var nextCurrentHook;

	  if (currentHook === null) {
	    var current = currentlyRenderingFiber$1.alternate;

	    if (current !== null) {
	      nextCurrentHook = current.memoizedState;
	    } else {
	      nextCurrentHook = null;
	    }
	  } else {
	    nextCurrentHook = currentHook.next;
	  }

	  var nextWorkInProgressHook;

	  if (workInProgressHook === null) {
	    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
	  } else {
	    nextWorkInProgressHook = workInProgressHook.next;
	  }

	  if (nextWorkInProgressHook !== null) {
	    // There's already a work-in-progress. Reuse it.
	    workInProgressHook = nextWorkInProgressHook;
	    nextWorkInProgressHook = workInProgressHook.next;
	    currentHook = nextCurrentHook;
	  } else {
	    // Clone from the current hook.
	    if (nextCurrentHook === null) {
	      throw new Error('Rendered more hooks than during the previous render.');
	    }

	    currentHook = nextCurrentHook;
	    var newHook = {
	      memoizedState: currentHook.memoizedState,
	      baseState: currentHook.baseState,
	      baseQueue: currentHook.baseQueue,
	      queue: currentHook.queue,
	      next: null
	    };

	    if (workInProgressHook === null) {
	      // This is the first hook in the list.
	      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
	    } else {
	      // Append to the end of the list.
	      workInProgressHook = workInProgressHook.next = newHook;
	    }
	  }

	  return workInProgressHook;
	}

	function createFunctionComponentUpdateQueue() {
	  return {
	    lastEffect: null,
	    stores: null
	  };
	}

	function basicStateReducer(state, action) {
	  // $FlowFixMe: Flow doesn't like mixed types
	  return typeof action === 'function' ? action(state) : action;
	}

	function mountReducer(reducer, initialArg, init) {
	  var hook = mountWorkInProgressHook();
	  var initialState;

	  if (init !== undefined) {
	    initialState = init(initialArg);
	  } else {
	    initialState = initialArg;
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = {
	    pending: null,
	    interleaved: null,
	    lanes: NoLanes,
	    dispatch: null,
	    lastRenderedReducer: reducer,
	    lastRenderedState: initialState
	  };
	  hook.queue = queue;
	  var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (queue === null) {
	    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
	  }

	  queue.lastRenderedReducer = reducer;
	  var current = currentHook; // The last rebase update that is NOT part of the base state.

	  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

	  var pendingQueue = queue.pending;

	  if (pendingQueue !== null) {
	    // We have new updates that haven't been processed yet.
	    // We'll add them to the base queue.
	    if (baseQueue !== null) {
	      // Merge the pending queue and the base queue.
	      var baseFirst = baseQueue.next;
	      var pendingFirst = pendingQueue.next;
	      baseQueue.next = pendingFirst;
	      pendingQueue.next = baseFirst;
	    }

	    {
	      if (current.baseQueue !== baseQueue) {
	        // Internal invariant that should never happen, but feasibly could in
	        // the future if we implement resuming, or some form of that.
	        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
	      }
	    }

	    current.baseQueue = baseQueue = pendingQueue;
	    queue.pending = null;
	  }

	  if (baseQueue !== null) {
	    // We have a queue to process.
	    var first = baseQueue.next;
	    var newState = current.baseState;
	    var newBaseState = null;
	    var newBaseQueueFirst = null;
	    var newBaseQueueLast = null;
	    var update = first;

	    do {
	      var updateLane = update.lane;

	      if (!isSubsetOfLanes(renderLanes, updateLane)) {
	        // Priority is insufficient. Skip this update. If this is the first
	        // skipped update, the previous update/state is the new base
	        // update/state.
	        var clone = {
	          lane: updateLane,
	          action: update.action,
	          hasEagerState: update.hasEagerState,
	          eagerState: update.eagerState,
	          next: null
	        };

	        if (newBaseQueueLast === null) {
	          newBaseQueueFirst = newBaseQueueLast = clone;
	          newBaseState = newState;
	        } else {
	          newBaseQueueLast = newBaseQueueLast.next = clone;
	        } // Update the remaining priority in the queue.
	        // TODO: Don't need to accumulate this. Instead, we can remove
	        // renderLanes from the original lanes.


	        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
	        markSkippedUpdateLanes(updateLane);
	      } else {
	        // This update does have sufficient priority.
	        if (newBaseQueueLast !== null) {
	          var _clone = {
	            // This update is going to be committed so we never want uncommit
	            // it. Using NoLane works because 0 is a subset of all bitmasks, so
	            // this will never be skipped by the check above.
	            lane: NoLane,
	            action: update.action,
	            hasEagerState: update.hasEagerState,
	            eagerState: update.eagerState,
	            next: null
	          };
	          newBaseQueueLast = newBaseQueueLast.next = _clone;
	        } // Process this update.


	        if (update.hasEagerState) {
	          // If this update is a state update (not a reducer) and was processed eagerly,
	          // we can use the eagerly computed state
	          newState = update.eagerState;
	        } else {
	          var action = update.action;
	          newState = reducer(newState, action);
	        }
	      }

	      update = update.next;
	    } while (update !== null && update !== first);

	    if (newBaseQueueLast === null) {
	      newBaseState = newState;
	    } else {
	      newBaseQueueLast.next = newBaseQueueFirst;
	    } // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!objectIs(newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = newState;
	    hook.baseState = newBaseState;
	    hook.baseQueue = newBaseQueueLast;
	    queue.lastRenderedState = newState;
	  } // Interleaved updates are stored on a separate queue. We aren't going to
	  // process them during this render, but we do need to track which lanes
	  // are remaining.


	  var lastInterleaved = queue.interleaved;

	  if (lastInterleaved !== null) {
	    var interleaved = lastInterleaved;

	    do {
	      var interleavedLane = interleaved.lane;
	      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
	      markSkippedUpdateLanes(interleavedLane);
	      interleaved = interleaved.next;
	    } while (interleaved !== lastInterleaved);
	  } else if (baseQueue === null) {
	    // `queue.lanes` is used for entangling transitions. We can set it back to
	    // zero once the queue is empty.
	    queue.lanes = NoLanes;
	  }

	  var dispatch = queue.dispatch;
	  return [hook.memoizedState, dispatch];
	}

	function rerenderReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (queue === null) {
	    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
	  }

	  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
	  // work-in-progress hook.

	  var dispatch = queue.dispatch;
	  var lastRenderPhaseUpdate = queue.pending;
	  var newState = hook.memoizedState;

	  if (lastRenderPhaseUpdate !== null) {
	    // The queue doesn't persist past this render pass.
	    queue.pending = null;
	    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
	    var update = firstRenderPhaseUpdate;

	    do {
	      // Process this render phase update. We don't have to check the
	      // priority because it will always be the same as the current
	      // render's.
	      var action = update.action;
	      newState = reducer(newState, action);
	      update = update.next;
	    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!objectIs(newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
	    // the base state unless the queue is empty.
	    // TODO: Not sure if this is the desired semantics, but it's what we
	    // do for gDSFP. I can't remember why.

	    if (hook.baseQueue === null) {
	      hook.baseState = newState;
	    }

	    queue.lastRenderedState = newState;
	  }

	  return [newState, dispatch];
	}

	function mountMutableSource(source, getSnapshot, subscribe) {
	  {
	    return undefined;
	  }
	}

	function updateMutableSource(source, getSnapshot, subscribe) {
	  {
	    return undefined;
	  }
	}

	function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
	  var fiber = currentlyRenderingFiber$1;
	  var hook = mountWorkInProgressHook();
	  var nextSnapshot;
	  var isHydrating = getIsHydrating();

	  if (isHydrating) {
	    if (getServerSnapshot === undefined) {
	      throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');
	    }

	    nextSnapshot = getServerSnapshot();

	    {
	      if (!didWarnUncachedGetSnapshot) {
	        if (nextSnapshot !== getServerSnapshot()) {
	          error('The result of getServerSnapshot should be cached to avoid an infinite loop');

	          didWarnUncachedGetSnapshot = true;
	        }
	      }
	    }
	  } else {
	    nextSnapshot = getSnapshot();

	    {
	      if (!didWarnUncachedGetSnapshot) {
	        var cachedSnapshot = getSnapshot();

	        if (!objectIs(nextSnapshot, cachedSnapshot)) {
	          error('The result of getSnapshot should be cached to avoid an infinite loop');

	          didWarnUncachedGetSnapshot = true;
	        }
	      }
	    } // Unless we're rendering a blocking lane, schedule a consistency check.
	    // Right before committing, we will walk the tree and check if any of the
	    // stores were mutated.
	    //
	    // We won't do this if we're hydrating server-rendered content, because if
	    // the content is stale, it's already visible anyway. Instead we'll patch
	    // it up in a passive effect.


	    var root = getWorkInProgressRoot();

	    if (root === null) {
	      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
	    }

	    if (!includesBlockingLane(root, renderLanes)) {
	      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
	    }
	  } // Read the current snapshot from the store on every render. This breaks the
	  // normal rules of React, and only works because store updates are
	  // always synchronous.


	  hook.memoizedState = nextSnapshot;
	  var inst = {
	    value: nextSnapshot,
	    getSnapshot: getSnapshot
	  };
	  hook.queue = inst; // Schedule an effect to subscribe to the store.

	  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update
	  // this whenever subscribe, getSnapshot, or value changes. Because there's no
	  // clean-up function, and we track the deps correctly, we can call pushEffect
	  // directly, without storing any additional state. For the same reason, we
	  // don't need to set a static flag, either.
	  // TODO: We can move this to the passive phase once we add a pre-commit
	  // consistency check. See the next comment.

	  fiber.flags |= Passive;
	  pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
	  return nextSnapshot;
	}

	function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
	  var fiber = currentlyRenderingFiber$1;
	  var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the
	  // normal rules of React, and only works because store updates are
	  // always synchronous.

	  var nextSnapshot = getSnapshot();

	  {
	    if (!didWarnUncachedGetSnapshot) {
	      var cachedSnapshot = getSnapshot();

	      if (!objectIs(nextSnapshot, cachedSnapshot)) {
	        error('The result of getSnapshot should be cached to avoid an infinite loop');

	        didWarnUncachedGetSnapshot = true;
	      }
	    }
	  }

	  var prevSnapshot = hook.memoizedState;
	  var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);

	  if (snapshotChanged) {
	    hook.memoizedState = nextSnapshot;
	    markWorkInProgressReceivedUpdate();
	  }

	  var inst = hook.queue;
	  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the
	  // commit phase if there was an interleaved mutation. In concurrent mode
	  // this can happen all the time, but even in synchronous mode, an earlier
	  // effect may have mutated the store.

	  if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
	  // checking whether we scheduled a subscription effect above.
	  workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
	    fiber.flags |= Passive;
	    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.
	    // Right before committing, we will walk the tree and check if any of the
	    // stores were mutated.

	    var root = getWorkInProgressRoot();

	    if (root === null) {
	      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
	    }

	    if (!includesBlockingLane(root, renderLanes)) {
	      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
	    }
	  }

	  return nextSnapshot;
	}

	function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
	  fiber.flags |= StoreConsistency;
	  var check = {
	    getSnapshot: getSnapshot,
	    value: renderedSnapshot
	  };
	  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

	  if (componentUpdateQueue === null) {
	    componentUpdateQueue = createFunctionComponentUpdateQueue();
	    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
	    componentUpdateQueue.stores = [check];
	  } else {
	    var stores = componentUpdateQueue.stores;

	    if (stores === null) {
	      componentUpdateQueue.stores = [check];
	    } else {
	      stores.push(check);
	    }
	  }
	}

	function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
	  // These are updated in the passive phase
	  inst.value = nextSnapshot;
	  inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could
	  // have been in an event that fired before the passive effects, or it could
	  // have been in a layout effect. In that case, we would have used the old
	  // snapsho and getSnapshot values to bail out. We need to check one more time.

	  if (checkIfSnapshotChanged(inst)) {
	    // Force a re-render.
	    forceStoreRerender(fiber);
	  }
	}

	function subscribeToStore(fiber, inst, subscribe) {
	  var handleStoreChange = function () {
	    // The store changed. Check if the snapshot changed since the last time we
	    // read from the store.
	    if (checkIfSnapshotChanged(inst)) {
	      // Force a re-render.
	      forceStoreRerender(fiber);
	    }
	  }; // Subscribe to the store and return a clean-up function.


	  return subscribe(handleStoreChange);
	}

	function checkIfSnapshotChanged(inst) {
	  var latestGetSnapshot = inst.getSnapshot;
	  var prevValue = inst.value;

	  try {
	    var nextValue = latestGetSnapshot();
	    return !objectIs(prevValue, nextValue);
	  } catch (error) {
	    return true;
	  }
	}

	function forceStoreRerender(fiber) {
	  var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	  if (root !== null) {
	    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	  }
	}

	function mountState(initialState) {
	  var hook = mountWorkInProgressHook();

	  if (typeof initialState === 'function') {
	    // $FlowFixMe: Flow doesn't like mixed types
	    initialState = initialState();
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = {
	    pending: null,
	    interleaved: null,
	    lanes: NoLanes,
	    dispatch: null,
	    lastRenderedReducer: basicStateReducer,
	    lastRenderedState: initialState
	  };
	  hook.queue = queue;
	  var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateState(initialState) {
	  return updateReducer(basicStateReducer);
	}

	function rerenderState(initialState) {
	  return rerenderReducer(basicStateReducer);
	}

	function pushEffect(tag, create, destroy, deps) {
	  var effect = {
	    tag: tag,
	    create: create,
	    destroy: destroy,
	    deps: deps,
	    // Circular
	    next: null
	  };
	  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

	  if (componentUpdateQueue === null) {
	    componentUpdateQueue = createFunctionComponentUpdateQueue();
	    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
	    componentUpdateQueue.lastEffect = effect.next = effect;
	  } else {
	    var lastEffect = componentUpdateQueue.lastEffect;

	    if (lastEffect === null) {
	      componentUpdateQueue.lastEffect = effect.next = effect;
	    } else {
	      var firstEffect = lastEffect.next;
	      lastEffect.next = effect;
	      effect.next = firstEffect;
	      componentUpdateQueue.lastEffect = effect;
	    }
	  }

	  return effect;
	}

	function mountRef(initialValue) {
	  var hook = mountWorkInProgressHook();

	  {
	    var _ref2 = {
	      current: initialValue
	    };
	    hook.memoizedState = _ref2;
	    return _ref2;
	  }
	}

	function updateRef(initialValue) {
	  var hook = updateWorkInProgressHook();
	  return hook.memoizedState;
	}

	function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  currentlyRenderingFiber$1.flags |= fiberFlags;
	  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
	}

	function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var destroy = undefined;

	  if (currentHook !== null) {
	    var prevEffect = currentHook.memoizedState;
	    destroy = prevEffect.destroy;

	    if (nextDeps !== null) {
	      var prevDeps = prevEffect.deps;

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
	        return;
	      }
	    }
	  }

	  currentlyRenderingFiber$1.flags |= fiberFlags;
	  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
	}

	function mountEffect(create, deps) {
	  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
	    return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
	  } else {
	    return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
	  }
	}

	function updateEffect(create, deps) {
	  return updateEffectImpl(Passive, Passive$1, create, deps);
	}

	function mountInsertionEffect(create, deps) {
	  return mountEffectImpl(Update, Insertion, create, deps);
	}

	function updateInsertionEffect(create, deps) {
	  return updateEffectImpl(Update, Insertion, create, deps);
	}

	function mountLayoutEffect(create, deps) {
	  var fiberFlags = Update;

	  {
	    fiberFlags |= LayoutStatic;
	  }

	  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
	    fiberFlags |= MountLayoutDev;
	  }

	  return mountEffectImpl(fiberFlags, Layout, create, deps);
	}

	function updateLayoutEffect(create, deps) {
	  return updateEffectImpl(Update, Layout, create, deps);
	}

	function imperativeHandleEffect(create, ref) {
	  if (typeof ref === 'function') {
	    var refCallback = ref;

	    var _inst = create();

	    refCallback(_inst);
	    return function () {
	      refCallback(null);
	    };
	  } else if (ref !== null && ref !== undefined) {
	    var refObject = ref;

	    {
	      if (!refObject.hasOwnProperty('current')) {
	        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
	      }
	    }

	    var _inst2 = create();

	    refObject.current = _inst2;
	    return function () {
	      refObject.current = null;
	    };
	  }
	}

	function mountImperativeHandle(ref, create, deps) {
	  {
	    if (typeof create !== 'function') {
	      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
	    }
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  var fiberFlags = Update;

	  {
	    fiberFlags |= LayoutStatic;
	  }

	  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
	    fiberFlags |= MountLayoutDev;
	  }

	  return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function updateImperativeHandle(ref, create, deps) {
	  {
	    if (typeof create !== 'function') {
	      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
	    }
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
	  // The react-debug-hooks package injects its own implementation
	  // so that e.g. DevTools can display custom hook values.
	}

	var updateDebugValue = mountDebugValue;

	function mountCallback(callback, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function updateCallback(callback, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function mountMemo(nextCreate, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function updateMemo(nextCreate, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    // Assume these are defined. If they're not, areHookInputsEqual will warn.
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function mountDeferredValue(value) {
	  var hook = mountWorkInProgressHook();
	  hook.memoizedState = value;
	  return value;
	}

	function updateDeferredValue(value) {
	  var hook = updateWorkInProgressHook();
	  var resolvedCurrentHook = currentHook;
	  var prevValue = resolvedCurrentHook.memoizedState;
	  return updateDeferredValueImpl(hook, prevValue, value);
	}

	function rerenderDeferredValue(value) {
	  var hook = updateWorkInProgressHook();

	  if (currentHook === null) {
	    // This is a rerender during a mount.
	    hook.memoizedState = value;
	    return value;
	  } else {
	    // This is a rerender during an update.
	    var prevValue = currentHook.memoizedState;
	    return updateDeferredValueImpl(hook, prevValue, value);
	  }
	}

	function updateDeferredValueImpl(hook, prevValue, value) {
	  var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);

	  if (shouldDeferValue) {
	    // This is an urgent update. If the value has changed, keep using the
	    // previous value and spawn a deferred render to update it later.
	    if (!objectIs(value, prevValue)) {
	      // Schedule a deferred render
	      var deferredLane = claimNextTransitionLane();
	      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
	      markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent
	      // from the latest value. The name "baseState" doesn't really match how we
	      // use it because we're reusing a state hook field instead of creating a
	      // new one.

	      hook.baseState = true;
	    } // Reuse the previous value


	    return prevValue;
	  } else {
	    // This is not an urgent update, so we can use the latest value regardless
	    // of what it is. No need to defer it.
	    // However, if we're currently inside a spawned render, then we need to mark
	    // this as an update to prevent the fiber from bailing out.
	    //
	    // `baseState` is true when the current value is different from the rendered
	    // value. The name doesn't really match how we use it because we're reusing
	    // a state hook field instead of creating a new one.
	    if (hook.baseState) {
	      // Flip this back to false.
	      hook.baseState = false;
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = value;
	    return value;
	  }
	}

	function startTransition(setPending, callback, options) {
	  var previousPriority = getCurrentUpdatePriority();
	  setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
	  setPending(true);
	  var prevTransition = ReactCurrentBatchConfig$2.transition;
	  ReactCurrentBatchConfig$2.transition = {};
	  var currentTransition = ReactCurrentBatchConfig$2.transition;

	  {
	    ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
	  }

	  try {
	    setPending(false);
	    callback();
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$2.transition = prevTransition;

	    {
	      if (prevTransition === null && currentTransition._updatedFibers) {
	        var updatedFibersCount = currentTransition._updatedFibers.size;

	        if (updatedFibersCount > 10) {
	          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
	        }

	        currentTransition._updatedFibers.clear();
	      }
	    }
	  }
	}

	function mountTransition() {
	  var _mountState = mountState(false),
	      isPending = _mountState[0],
	      setPending = _mountState[1]; // The `start` method never changes.


	  var start = startTransition.bind(null, setPending);
	  var hook = mountWorkInProgressHook();
	  hook.memoizedState = start;
	  return [isPending, start];
	}

	function updateTransition() {
	  var _updateState = updateState(),
	      isPending = _updateState[0];

	  var hook = updateWorkInProgressHook();
	  var start = hook.memoizedState;
	  return [isPending, start];
	}

	function rerenderTransition() {
	  var _rerenderState = rerenderState(),
	      isPending = _rerenderState[0];

	  var hook = updateWorkInProgressHook();
	  var start = hook.memoizedState;
	  return [isPending, start];
	}

	var isUpdatingOpaqueValueInRenderPhase = false;
	function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
	  {
	    return isUpdatingOpaqueValueInRenderPhase;
	  }
	}

	function mountId() {
	  var hook = mountWorkInProgressHook();
	  var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we
	  // should do this in Fiber, too? Deferring this decision for now because
	  // there's no other place to store the prefix except for an internal field on
	  // the public createRoot object, which the fiber tree does not currently have
	  // a reference to.

	  var identifierPrefix = root.identifierPrefix;
	  var id;

	  if (getIsHydrating()) {
	    var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.

	    id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end
	    // that represents the position of this useId hook among all the useId
	    // hooks for this fiber.

	    var localId = localIdCounter++;

	    if (localId > 0) {
	      id += 'H' + localId.toString(32);
	    }

	    id += ':';
	  } else {
	    // Use a lowercase r prefix for client-generated ids.
	    var globalClientId = globalClientIdCounter++;
	    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';
	  }

	  hook.memoizedState = id;
	  return id;
	}

	function updateId() {
	  var hook = updateWorkInProgressHook();
	  var id = hook.memoizedState;
	  return id;
	}

	function dispatchReducerAction(fiber, queue, action) {
	  {
	    if (typeof arguments[3] === 'function') {
	      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
	    }
	  }

	  var lane = requestUpdateLane(fiber);
	  var update = {
	    lane: lane,
	    action: action,
	    hasEagerState: false,
	    eagerState: null,
	    next: null
	  };

	  if (isRenderPhaseUpdate(fiber)) {
	    enqueueRenderPhaseUpdate(queue, update);
	  } else {
	    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);

	    if (root !== null) {
	      var eventTime = requestEventTime();
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitionUpdate(root, queue, lane);
	    }
	  }

	  markUpdateInDevTools(fiber, lane);
	}

	function dispatchSetState(fiber, queue, action) {
	  {
	    if (typeof arguments[3] === 'function') {
	      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
	    }
	  }

	  var lane = requestUpdateLane(fiber);
	  var update = {
	    lane: lane,
	    action: action,
	    hasEagerState: false,
	    eagerState: null,
	    next: null
	  };

	  if (isRenderPhaseUpdate(fiber)) {
	    enqueueRenderPhaseUpdate(queue, update);
	  } else {
	    var alternate = fiber.alternate;

	    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
	      // The queue is currently empty, which means we can eagerly compute the
	      // next state before entering the render phase. If the new state is the
	      // same as the current state, we may be able to bail out entirely.
	      var lastRenderedReducer = queue.lastRenderedReducer;

	      if (lastRenderedReducer !== null) {
	        var prevDispatcher;

	        {
	          prevDispatcher = ReactCurrentDispatcher$1.current;
	          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        }

	        try {
	          var currentState = queue.lastRenderedState;
	          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
	          // it, on the update object. If the reducer hasn't changed by the
	          // time we enter the render phase, then the eager state can be used
	          // without calling the reducer again.

	          update.hasEagerState = true;
	          update.eagerState = eagerState;

	          if (objectIs(eagerState, currentState)) {
	            // Fast path. We can bail out without scheduling React to re-render.
	            // It's still possible that we'll need to rebase this update later,
	            // if the component re-renders for a different reason and by that
	            // time the reducer has changed.
	            // TODO: Do we still need to entangle transitions in this case?
	            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
	            return;
	          }
	        } catch (error) {// Suppress the error. It will throw again in the render phase.
	        } finally {
	          {
	            ReactCurrentDispatcher$1.current = prevDispatcher;
	          }
	        }
	      }
	    }

	    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);

	    if (root !== null) {
	      var eventTime = requestEventTime();
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitionUpdate(root, queue, lane);
	    }
	  }

	  markUpdateInDevTools(fiber, lane);
	}

	function isRenderPhaseUpdate(fiber) {
	  var alternate = fiber.alternate;
	  return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
	}

	function enqueueRenderPhaseUpdate(queue, update) {
	  // This is a render phase update. Stash it in a lazily-created map of
	  // queue -> linked list of updates. After this render pass, we'll restart
	  // and apply the stashed updates on top of the work-in-progress hook.
	  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
	  var pending = queue.pending;

	  if (pending === null) {
	    // This is the first update. Create a circular list.
	    update.next = update;
	  } else {
	    update.next = pending.next;
	    pending.next = update;
	  }

	  queue.pending = update;
	} // TODO: Move to ReactFiberConcurrentUpdates?


	function entangleTransitionUpdate(root, queue, lane) {
	  if (isTransitionLane(lane)) {
	    var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they
	    // must have finished. We can remove them from the shared queue, which
	    // represents a superset of the actually pending lanes. In some cases we
	    // may entangle more than we need to, but that's OK. In fact it's worse if
	    // we *don't* entangle when we should.

	    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.

	    var newQueueLanes = mergeLanes(queueLanes, lane);
	    queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
	    // the lane finished since the last time we entangled it. So we need to
	    // entangle it again, just to be sure.

	    markRootEntangled(root, newQueueLanes);
	  }
	}

	function markUpdateInDevTools(fiber, lane, action) {

	  {
	    markStateUpdateScheduled(fiber, lane);
	  }
	}

	var ContextOnlyDispatcher = {
	  readContext: readContext,
	  useCallback: throwInvalidHookError,
	  useContext: throwInvalidHookError,
	  useEffect: throwInvalidHookError,
	  useImperativeHandle: throwInvalidHookError,
	  useInsertionEffect: throwInvalidHookError,
	  useLayoutEffect: throwInvalidHookError,
	  useMemo: throwInvalidHookError,
	  useReducer: throwInvalidHookError,
	  useRef: throwInvalidHookError,
	  useState: throwInvalidHookError,
	  useDebugValue: throwInvalidHookError,
	  useDeferredValue: throwInvalidHookError,
	  useTransition: throwInvalidHookError,
	  useMutableSource: throwInvalidHookError,
	  useSyncExternalStore: throwInvalidHookError,
	  useId: throwInvalidHookError,
	  unstable_isNewReconciler: enableNewReconciler
	};

	var HooksDispatcherOnMountInDEV = null;
	var HooksDispatcherOnMountWithHookTypesInDEV = null;
	var HooksDispatcherOnUpdateInDEV = null;
	var HooksDispatcherOnRerenderInDEV = null;
	var InvalidNestedHooksDispatcherOnMountInDEV = null;
	var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
	var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

	{
	  var warnInvalidContextAccess = function () {
	    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	  };

	  var warnInvalidHookAccess = function () {
	    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
	  };

	  HooksDispatcherOnMountInDEV = {
	    readContext: function (context) {
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      mountHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      mountHookTypesDev();
	      return mountDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      mountHookTypesDev();
	      return mountTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      mountHookTypesDev();
	      return mountMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      mountHookTypesDev();
	      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      mountHookTypesDev();
	      return mountId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  HooksDispatcherOnMountWithHookTypesInDEV = {
	    readContext: function (context) {
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      updateHookTypesDev();
	      return mountInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return mountDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return mountDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return mountTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      updateHookTypesDev();
	      return mountMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      updateHookTypesDev();
	      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      updateHookTypesDev();
	      return mountId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  HooksDispatcherOnUpdateInDEV = {
	    readContext: function (context) {
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      updateHookTypesDev();
	      return updateInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return updateDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return updateTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      updateHookTypesDev();
	      return updateMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      updateHookTypesDev();
	      return updateSyncExternalStore(subscribe, getSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      updateHookTypesDev();
	      return updateId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  HooksDispatcherOnRerenderInDEV = {
	    readContext: function (context) {
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      updateHookTypesDev();
	      return updateInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return rerenderReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return rerenderState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return rerenderDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return rerenderTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      updateHookTypesDev();
	      return updateMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      updateHookTypesDev();
	      return updateSyncExternalStore(subscribe, getSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      updateHookTypesDev();
	      return updateId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  InvalidNestedHooksDispatcherOnMountInDEV = {
	    readContext: function (context) {
	      warnInvalidContextAccess();
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  InvalidNestedHooksDispatcherOnUpdateInDEV = {
	    readContext: function (context) {
	      warnInvalidContextAccess();
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateSyncExternalStore(subscribe, getSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  InvalidNestedHooksDispatcherOnRerenderInDEV = {
	    readContext: function (context) {
	      warnInvalidContextAccess();
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return rerenderReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return rerenderState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateSyncExternalStore(subscribe, getSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };
	}

	var now$1 = Scheduler.unstable_now;
	var commitTime = 0;
	var layoutEffectStartTime = -1;
	var profilerStartTime = -1;
	var passiveEffectStartTime = -1;
	/**
	 * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
	 *
	 * The overall sequence is:
	 *   1. render
	 *   2. commit (and call `onRender`, `onCommit`)
	 *   3. check for nested updates
	 *   4. flush passive effects (and call `onPostCommit`)
	 *
	 * Nested updates are identified in step 3 above,
	 * but step 4 still applies to the work that was just committed.
	 * We use two flags to track nested updates then:
	 * one tracks whether the upcoming update is a nested update,
	 * and the other tracks whether the current update was a nested update.
	 * The first value gets synced to the second at the start of the render phase.
	 */

	var currentUpdateIsNested = false;
	var nestedUpdateScheduled = false;

	function isCurrentUpdateNested() {
	  return currentUpdateIsNested;
	}

	function markNestedUpdateScheduled() {
	  {
	    nestedUpdateScheduled = true;
	  }
	}

	function resetNestedUpdateFlag() {
	  {
	    currentUpdateIsNested = false;
	    nestedUpdateScheduled = false;
	  }
	}

	function syncNestedUpdateFlag() {
	  {
	    currentUpdateIsNested = nestedUpdateScheduled;
	    nestedUpdateScheduled = false;
	  }
	}

	function getCommitTime() {
	  return commitTime;
	}

	function recordCommitTime() {

	  commitTime = now$1();
	}

	function startProfilerTimer(fiber) {

	  profilerStartTime = now$1();

	  if (fiber.actualStartTime < 0) {
	    fiber.actualStartTime = now$1();
	  }
	}

	function stopProfilerTimerIfRunning(fiber) {

	  profilerStartTime = -1;
	}

	function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

	  if (profilerStartTime >= 0) {
	    var elapsedTime = now$1() - profilerStartTime;
	    fiber.actualDuration += elapsedTime;

	    if (overrideBaseTime) {
	      fiber.selfBaseDuration = elapsedTime;
	    }

	    profilerStartTime = -1;
	  }
	}

	function recordLayoutEffectDuration(fiber) {

	  if (layoutEffectStartTime >= 0) {
	    var elapsedTime = now$1() - layoutEffectStartTime;
	    layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
	    // Or the root (for the DevTools Profiler to read)

	    var parentFiber = fiber.return;

	    while (parentFiber !== null) {
	      switch (parentFiber.tag) {
	        case HostRoot:
	          var root = parentFiber.stateNode;
	          root.effectDuration += elapsedTime;
	          return;

	        case Profiler:
	          var parentStateNode = parentFiber.stateNode;
	          parentStateNode.effectDuration += elapsedTime;
	          return;
	      }

	      parentFiber = parentFiber.return;
	    }
	  }
	}

	function recordPassiveEffectDuration(fiber) {

	  if (passiveEffectStartTime >= 0) {
	    var elapsedTime = now$1() - passiveEffectStartTime;
	    passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
	    // Or the root (for the DevTools Profiler to read)

	    var parentFiber = fiber.return;

	    while (parentFiber !== null) {
	      switch (parentFiber.tag) {
	        case HostRoot:
	          var root = parentFiber.stateNode;

	          if (root !== null) {
	            root.passiveEffectDuration += elapsedTime;
	          }

	          return;

	        case Profiler:
	          var parentStateNode = parentFiber.stateNode;

	          if (parentStateNode !== null) {
	            // Detached fibers have their state node cleared out.
	            // In this case, the return pointer is also cleared out,
	            // so we won't be able to report the time spent in this Profiler's subtree.
	            parentStateNode.passiveEffectDuration += elapsedTime;
	          }

	          return;
	      }

	      parentFiber = parentFiber.return;
	    }
	  }
	}

	function startLayoutEffectTimer() {

	  layoutEffectStartTime = now$1();
	}

	function startPassiveEffectTimer() {

	  passiveEffectStartTime = now$1();
	}

	function transferActualDuration(fiber) {
	  // Transfer time spent rendering these children so we don't lose it
	  // after we rerender. This is used as a helper in special cases
	  // where we should count the work of multiple passes.
	  var child = fiber.child;

	  while (child) {
	    fiber.actualDuration += child.actualDuration;
	    child = child.sibling;
	  }
	}

	function resolveDefaultProps(Component, baseProps) {
	  if (Component && Component.defaultProps) {
	    // Resolve default props. Taken from ReactElement
	    var props = assign({}, baseProps);
	    var defaultProps = Component.defaultProps;

	    for (var propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }

	    return props;
	  }

	  return baseProps;
	}

	var fakeInternalInstance = {};
	var didWarnAboutStateAssignmentForComponent;
	var didWarnAboutUninitializedState;
	var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
	var didWarnAboutLegacyLifecyclesAndDerivedState;
	var didWarnAboutUndefinedDerivedState;
	var warnOnUndefinedDerivedState;
	var warnOnInvalidCallback;
	var didWarnAboutDirectlyAssigningPropsToState;
	var didWarnAboutContextTypeAndContextTypes;
	var didWarnAboutInvalidateContextType;
	var didWarnAboutLegacyContext$1;

	{
	  didWarnAboutStateAssignmentForComponent = new Set();
	  didWarnAboutUninitializedState = new Set();
	  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
	  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
	  didWarnAboutDirectlyAssigningPropsToState = new Set();
	  didWarnAboutUndefinedDerivedState = new Set();
	  didWarnAboutContextTypeAndContextTypes = new Set();
	  didWarnAboutInvalidateContextType = new Set();
	  didWarnAboutLegacyContext$1 = new Set();
	  var didWarnOnInvalidCallback = new Set();

	  warnOnInvalidCallback = function (callback, callerName) {
	    if (callback === null || typeof callback === 'function') {
	      return;
	    }

	    var key = callerName + '_' + callback;

	    if (!didWarnOnInvalidCallback.has(key)) {
	      didWarnOnInvalidCallback.add(key);

	      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  };

	  warnOnUndefinedDerivedState = function (type, partialState) {
	    if (partialState === undefined) {
	      var componentName = getComponentNameFromType(type) || 'Component';

	      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
	        didWarnAboutUndefinedDerivedState.add(componentName);

	        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
	      }
	    }
	  }; // This is so gross but it's at least non-critical and can be removed if
	  // it causes problems. This is meant to give a nicer error message for
	  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
	  // ...)) which otherwise throws a "_processChildContext is not a function"
	  // exception.


	  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
	    enumerable: false,
	    value: function () {
	      throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + "unstable_renderSubtreeIntoContainer, which isn't supported. Try " + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');
	    }
	  });
	  Object.freeze(fakeInternalInstance);
	}

	function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
	  var prevState = workInProgress.memoizedState;
	  var partialState = getDerivedStateFromProps(nextProps, prevState);

	  {
	    if ( workInProgress.mode & StrictLegacyMode) {
	      setIsStrictModeForDevtools(true);

	      try {
	        // Invoke the function an extra time to help detect side-effects.
	        partialState = getDerivedStateFromProps(nextProps, prevState);
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }

	    warnOnUndefinedDerivedState(ctor, partialState);
	  } // Merge the partial state and the previous state.


	  var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
	  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
	  // base state.

	  if (workInProgress.lanes === NoLanes) {
	    // Queue is always non-null for classes
	    var updateQueue = workInProgress.updateQueue;
	    updateQueue.baseState = memoizedState;
	  }
	}

	var classComponentUpdater = {
	  isMounted: isMounted,
	  enqueueSetState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var eventTime = requestEventTime();
	    var lane = requestUpdateLane(fiber);
	    var update = createUpdate(eventTime, lane);
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'setState');
	      }

	      update.callback = callback;
	    }

	    var root = enqueueUpdate(fiber, update, lane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitions(root, fiber, lane);
	    }

	    {
	      markStateUpdateScheduled(fiber, lane);
	    }
	  },
	  enqueueReplaceState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var eventTime = requestEventTime();
	    var lane = requestUpdateLane(fiber);
	    var update = createUpdate(eventTime, lane);
	    update.tag = ReplaceState;
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'replaceState');
	      }

	      update.callback = callback;
	    }

	    var root = enqueueUpdate(fiber, update, lane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitions(root, fiber, lane);
	    }

	    {
	      markStateUpdateScheduled(fiber, lane);
	    }
	  },
	  enqueueForceUpdate: function (inst, callback) {
	    var fiber = get(inst);
	    var eventTime = requestEventTime();
	    var lane = requestUpdateLane(fiber);
	    var update = createUpdate(eventTime, lane);
	    update.tag = ForceUpdate;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'forceUpdate');
	      }

	      update.callback = callback;
	    }

	    var root = enqueueUpdate(fiber, update, lane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitions(root, fiber, lane);
	    }

	    {
	      markForceUpdateScheduled(fiber, lane);
	    }
	  }
	};

	function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
	  var instance = workInProgress.stateNode;

	  if (typeof instance.shouldComponentUpdate === 'function') {
	    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);

	    {
	      if ( workInProgress.mode & StrictLegacyMode) {
	        setIsStrictModeForDevtools(true);

	        try {
	          // Invoke the function an extra time to help detect side-effects.
	          shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }

	      if (shouldUpdate === undefined) {
	        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');
	      }
	    }

	    return shouldUpdate;
	  }

	  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
	    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
	  }

	  return true;
	}

	function checkClassInstance(workInProgress, ctor, newProps) {
	  var instance = workInProgress.stateNode;

	  {
	    var name = getComponentNameFromType(ctor) || 'Component';
	    var renderPresent = instance.render;

	    if (!renderPresent) {
	      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
	        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
	      } else {
	        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
	      }
	    }

	    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
	      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
	    }

	    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
	    }

	    if (instance.propTypes) {
	      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
	    }

	    if (instance.contextType) {
	      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
	    }

	    {
	      if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
	      // this one.
	      (workInProgress.mode & StrictLegacyMode) === NoMode) {
	        didWarnAboutLegacyContext$1.add(ctor);

	        error('%s uses the legacy childContextTypes API which is no longer ' + 'supported and will be removed in the next major release. Use ' + 'React.createContext() instead\n\n.' + 'Learn more about this warning here: https://reactjs.org/link/legacy-context', name);
	      }

	      if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
	      // this one.
	      (workInProgress.mode & StrictLegacyMode) === NoMode) {
	        didWarnAboutLegacyContext$1.add(ctor);

	        error('%s uses the legacy contextTypes API which is no longer supported ' + 'and will be removed in the next major release. Use ' + 'React.createContext() with static contextType instead.\n\n' + 'Learn more about this warning here: https://reactjs.org/link/legacy-context', name);
	      }

	      if (instance.contextTypes) {
	        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
	      }

	      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
	        didWarnAboutContextTypeAndContextTypes.add(ctor);

	        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
	      }
	    }

	    if (typeof instance.componentShouldUpdate === 'function') {
	      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
	    }

	    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
	      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');
	    }

	    if (typeof instance.componentDidUnmount === 'function') {
	      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
	    }

	    if (typeof instance.componentDidReceiveProps === 'function') {
	      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
	    }

	    if (typeof instance.componentWillRecieveProps === 'function') {
	      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
	    }

	    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
	      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
	    }

	    var hasMutatedProps = instance.props !== newProps;

	    if (instance.props !== undefined && hasMutatedProps) {
	      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
	    }

	    if (instance.defaultProps) {
	      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
	      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

	      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));
	    }

	    if (typeof instance.getDerivedStateFromProps === 'function') {
	      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
	    }

	    if (typeof instance.getDerivedStateFromError === 'function') {
	      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
	    }

	    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
	      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
	    }

	    var _state = instance.state;

	    if (_state && (typeof _state !== 'object' || isArray(_state))) {
	      error('%s.state: must be set to an object or null', name);
	    }

	    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
	      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
	    }
	  }
	}

	function adoptClassInstance(workInProgress, instance) {
	  instance.updater = classComponentUpdater;
	  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

	  set(instance, workInProgress);

	  {
	    instance._reactInternalInstance = fakeInternalInstance;
	  }
	}

	function constructClassInstance(workInProgress, ctor, props) {
	  var isLegacyContextConsumer = false;
	  var unmaskedContext = emptyContextObject;
	  var context = emptyContextObject;
	  var contextType = ctor.contextType;

	  {
	    if ('contextType' in ctor) {
	      var isValid = // Allow null for conditional declaration
	      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

	      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
	        didWarnAboutInvalidateContextType.add(ctor);
	        var addendum = '';

	        if (contextType === undefined) {
	          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
	        } else if (typeof contextType !== 'object') {
	          addendum = ' However, it is set to a ' + typeof contextType + '.';
	        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
	          addendum = ' Did you accidentally pass the Context.Provider instead?';
	        } else if (contextType._context !== undefined) {
	          // <Context.Consumer>
	          addendum = ' Did you accidentally pass the Context.Consumer instead?';
	        } else {
	          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
	        }

	        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);
	      }
	    }
	  }

	  if (typeof contextType === 'object' && contextType !== null) {
	    context = readContext(contextType);
	  } else {
	    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    var contextTypes = ctor.contextTypes;
	    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
	    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
	  }

	  var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.

	  {
	    if ( workInProgress.mode & StrictLegacyMode) {
	      setIsStrictModeForDevtools(true);

	      try {
	        instance = new ctor(props, context); // eslint-disable-line no-new
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }
	  }

	  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
	  adoptClassInstance(workInProgress, instance);

	  {
	    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
	      var componentName = getComponentNameFromType(ctor) || 'Component';

	      if (!didWarnAboutUninitializedState.has(componentName)) {
	        didWarnAboutUninitializedState.add(componentName);

	        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
	      }
	    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
	    // Warn about these lifecycles if they are present.
	    // Don't warn about react-lifecycles-compat polyfilled methods though.


	    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
	      var foundWillMountName = null;
	      var foundWillReceivePropsName = null;
	      var foundWillUpdateName = null;

	      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
	        foundWillMountName = 'componentWillMount';
	      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        foundWillMountName = 'UNSAFE_componentWillMount';
	      }

	      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	        foundWillReceivePropsName = 'componentWillReceiveProps';
	      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	      }

	      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	        foundWillUpdateName = 'componentWillUpdate';
	      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	      }

	      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
	        var _componentName = getComponentNameFromType(ctor) || 'Component';

	        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

	        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
	          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

	          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
	        }
	      }
	    }
	  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	  // ReactFiberContext usually updates this cache but can't for newly-created instances.


	  if (isLegacyContextConsumer) {
	    cacheContext(workInProgress, unmaskedContext, context);
	  }

	  return instance;
	}

	function callComponentWillMount(workInProgress, instance) {
	  var oldState = instance.state;

	  if (typeof instance.componentWillMount === 'function') {
	    instance.componentWillMount();
	  }

	  if (typeof instance.UNSAFE_componentWillMount === 'function') {
	    instance.UNSAFE_componentWillMount();
	  }

	  if (oldState !== instance.state) {
	    {
	      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	}

	function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
	  var oldState = instance.state;

	  if (typeof instance.componentWillReceiveProps === 'function') {
	    instance.componentWillReceiveProps(newProps, nextContext);
	  }

	  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
	  }

	  if (instance.state !== oldState) {
	    {
	      var componentName = getComponentNameFromFiber(workInProgress) || 'Component';

	      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
	        didWarnAboutStateAssignmentForComponent.add(componentName);

	        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
	      }
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	} // Invokes the mount life-cycles on a previously never rendered instance.


	function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
	  {
	    checkClassInstance(workInProgress, ctor, newProps);
	  }

	  var instance = workInProgress.stateNode;
	  instance.props = newProps;
	  instance.state = workInProgress.memoizedState;
	  instance.refs = {};
	  initializeUpdateQueue(workInProgress);
	  var contextType = ctor.contextType;

	  if (typeof contextType === 'object' && contextType !== null) {
	    instance.context = readContext(contextType);
	  } else {
	    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    instance.context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  {
	    if (instance.state === newProps) {
	      var componentName = getComponentNameFromType(ctor) || 'Component';

	      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
	        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

	        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
	      }
	    }

	    if (workInProgress.mode & StrictLegacyMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
	    }

	    {
	      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
	    }
	  }

	  instance.state = workInProgress.memoizedState;
	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    instance.state = workInProgress.memoizedState;
	  } // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.


	  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
	    // process them now.

	    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
	    instance.state = workInProgress.memoizedState;
	  }

	  if (typeof instance.componentDidMount === 'function') {
	    var fiberFlags = Update;

	    {
	      fiberFlags |= LayoutStatic;
	    }

	    if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	      fiberFlags |= MountLayoutDev;
	    }

	    workInProgress.flags |= fiberFlags;
	  }
	}

	function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
	  var instance = workInProgress.stateNode;
	  var oldProps = workInProgress.memoizedProps;
	  instance.props = oldProps;
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
	  newState = workInProgress.memoizedState;

	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      var fiberFlags = Update;

	      {
	        fiberFlags |= LayoutStatic;
	      }

	      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	        fiberFlags |= MountLayoutDev;
	      }

	      workInProgress.flags |= fiberFlags;
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	      if (typeof instance.componentWillMount === 'function') {
	        instance.componentWillMount();
	      }

	      if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        instance.UNSAFE_componentWillMount();
	      }
	    }

	    if (typeof instance.componentDidMount === 'function') {
	      var _fiberFlags = Update;

	      {
	        _fiberFlags |= LayoutStatic;
	      }

	      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	        _fiberFlags |= MountLayoutDev;
	      }

	      workInProgress.flags |= _fiberFlags;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      var _fiberFlags2 = Update;

	      {
	        _fiberFlags2 |= LayoutStatic;
	      }

	      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	        _fiberFlags2 |= MountLayoutDev;
	      }

	      workInProgress.flags |= _fiberFlags2;
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	} // Invokes the update life-cycles and returns false if it shouldn't rerender.


	function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
	  var instance = workInProgress.stateNode;
	  cloneUpdateQueue(current, workInProgress);
	  var unresolvedOldProps = workInProgress.memoizedProps;
	  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
	  instance.props = oldProps;
	  var unresolvedNewProps = workInProgress.pendingProps;
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
	  newState = workInProgress.memoizedState;

	  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Snapshot;
	      }
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
	  // both before and after `shouldComponentUpdate` has been called. Not ideal,
	  // but I'm loath to refactor this function. This only happens for memoized
	  // components so it's not that common.
	  enableLazyContextPropagation   ;

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
	      if (typeof instance.componentWillUpdate === 'function') {
	        instance.componentWillUpdate(newProps, newState, nextContext);
	      }

	      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
	      }
	    }

	    if (typeof instance.componentDidUpdate === 'function') {
	      workInProgress.flags |= Update;
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      workInProgress.flags |= Snapshot;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Snapshot;
	      }
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized props/state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	}

	function createCapturedValueAtFiber(value, source) {
	  // If the value is an error, call this function immediately after it is thrown
	  // so the stack is accurate.
	  return {
	    value: value,
	    source: source,
	    stack: getStackByFiberInDevAndProd(source),
	    digest: null
	  };
	}
	function createCapturedValue(value, digest, stack) {
	  return {
	    value: value,
	    source: null,
	    stack: stack != null ? stack : null,
	    digest: digest != null ? digest : null
	  };
	}

	// This module is forked in different environments.
	// By default, return `true` to log errors to the console.
	// Forks can return `false` if this isn't desirable.
	function showErrorDialog(boundary, errorInfo) {
	  return true;
	}

	function logCapturedError(boundary, errorInfo) {
	  try {
	    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
	    // This enables renderers like ReactNative to better manage redbox behavior.

	    if (logError === false) {
	      return;
	    }

	    var error = errorInfo.value;

	    if (true) {
	      var source = errorInfo.source;
	      var stack = errorInfo.stack;
	      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
	      // `preventDefault()` in window `error` handler.
	      // We record this information as an expando on the error.

	      if (error != null && error._suppressLogging) {
	        if (boundary.tag === ClassComponent) {
	          // The error is recoverable and was silenced.
	          // Ignore it and don't print the stack addendum.
	          // This is handy for testing error boundaries without noise.
	          return;
	        } // The error is fatal. Since the silencing might have
	        // been accidental, we'll surface it anyway.
	        // However, the browser would have silenced the original error
	        // so we'll print it first, and then print the stack addendum.


	        console['error'](error); // Don't transform to our wrapper
	        // For a more detailed description of this block, see:
	        // https://github.com/facebook/react/pull/13384
	      }

	      var componentName = source ? getComponentNameFromFiber(source) : null;
	      var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
	      var errorBoundaryMessage;

	      if (boundary.tag === HostRoot) {
	        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
	      } else {
	        var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';
	        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
	      }

	      var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
	      // We don't include the original error message and JS stack because the browser
	      // has already printed it. Even if the application swallows the error, it is still
	      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

	      console['error'](combinedMessage); // Don't transform to our wrapper
	    }
	  } catch (e) {
	    // This method must not throw, or React internal state will get messed up.
	    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
	    // we want to report this error outside of the normal stack as a last resort.
	    // https://github.com/facebook/react/issues/13188
	    setTimeout(function () {
	      throw e;
	    });
	  }
	}

	var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

	function createRootErrorUpdate(fiber, errorInfo, lane) {
	  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

	  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: null
	  };
	  var error = errorInfo.value;

	  update.callback = function () {
	    onUncaughtError(error);
	    logCapturedError(fiber, errorInfo);
	  };

	  return update;
	}

	function createClassErrorUpdate(fiber, errorInfo, lane) {
	  var update = createUpdate(NoTimestamp, lane);
	  update.tag = CaptureUpdate;
	  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

	  if (typeof getDerivedStateFromError === 'function') {
	    var error$1 = errorInfo.value;

	    update.payload = function () {
	      return getDerivedStateFromError(error$1);
	    };

	    update.callback = function () {
	      {
	        markFailedErrorBoundaryForHotReloading(fiber);
	      }

	      logCapturedError(fiber, errorInfo);
	    };
	  }

	  var inst = fiber.stateNode;

	  if (inst !== null && typeof inst.componentDidCatch === 'function') {
	    update.callback = function callback() {
	      {
	        markFailedErrorBoundaryForHotReloading(fiber);
	      }

	      logCapturedError(fiber, errorInfo);

	      if (typeof getDerivedStateFromError !== 'function') {
	        // To preserve the preexisting retry behavior of error boundaries,
	        // we keep track of which ones already failed during this batch.
	        // This gets reset before we yield back to the browser.
	        // TODO: Warn in strict mode if getDerivedStateFromError is
	        // not defined.
	        markLegacyErrorBoundaryAsFailed(this);
	      }

	      var error$1 = errorInfo.value;
	      var stack = errorInfo.stack;
	      this.componentDidCatch(error$1, {
	        componentStack: stack !== null ? stack : ''
	      });

	      {
	        if (typeof getDerivedStateFromError !== 'function') {
	          // If componentDidCatch is the only error boundary method defined,
	          // then it needs to call setState to recover from errors.
	          // If no state update is scheduled then the boundary will swallow the error.
	          if (!includesSomeLane(fiber.lanes, SyncLane)) {
	            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');
	          }
	        }
	      }
	    };
	  }

	  return update;
	}

	function attachPingListener(root, wakeable, lanes) {
	  // Attach a ping listener
	  //
	  // The data might resolve before we have a chance to commit the fallback. Or,
	  // in the case of a refresh, we'll never commit a fallback. So we need to
	  // attach a listener now. When it resolves ("pings"), we can decide whether to
	  // try rendering the tree again.
	  //
	  // Only attach a listener if one does not already exist for the lanes
	  // we're currently rendering (which acts like a "thread ID" here).
	  //
	  // We only need to do this in concurrent mode. Legacy Suspense always
	  // commits fallbacks synchronously, so there are no pings.
	  var pingCache = root.pingCache;
	  var threadIDs;

	  if (pingCache === null) {
	    pingCache = root.pingCache = new PossiblyWeakMap$1();
	    threadIDs = new Set();
	    pingCache.set(wakeable, threadIDs);
	  } else {
	    threadIDs = pingCache.get(wakeable);

	    if (threadIDs === undefined) {
	      threadIDs = new Set();
	      pingCache.set(wakeable, threadIDs);
	    }
	  }

	  if (!threadIDs.has(lanes)) {
	    // Memoize using the thread ID to prevent redundant listeners.
	    threadIDs.add(lanes);
	    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);

	    {
	      if (isDevToolsPresent) {
	        // If we have pending work still, restore the original updaters
	        restorePendingUpdaters(root, lanes);
	      }
	    }

	    wakeable.then(ping, ping);
	  }
	}

	function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
	  // Retry listener
	  //
	  // If the fallback does commit, we need to attach a different type of
	  // listener. This one schedules an update on the Suspense boundary to turn
	  // the fallback state off.
	  //
	  // Stash the wakeable on the boundary fiber so we can access it in the
	  // commit phase.
	  //
	  // When the wakeable resolves, we'll attempt to render the boundary
	  // again ("retry").
	  var wakeables = suspenseBoundary.updateQueue;

	  if (wakeables === null) {
	    var updateQueue = new Set();
	    updateQueue.add(wakeable);
	    suspenseBoundary.updateQueue = updateQueue;
	  } else {
	    wakeables.add(wakeable);
	  }
	}

	function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
	  // A legacy mode Suspense quirk, only relevant to hook components.


	  var tag = sourceFiber.tag;

	  if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
	    var currentSource = sourceFiber.alternate;

	    if (currentSource) {
	      sourceFiber.updateQueue = currentSource.updateQueue;
	      sourceFiber.memoizedState = currentSource.memoizedState;
	      sourceFiber.lanes = currentSource.lanes;
	    } else {
	      sourceFiber.updateQueue = null;
	      sourceFiber.memoizedState = null;
	    }
	  }
	}

	function getNearestSuspenseBoundaryToCapture(returnFiber) {
	  var node = returnFiber;

	  do {
	    if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
	      return node;
	    } // This boundary already captured during this render. Continue to the next
	    // boundary.


	    node = node.return;
	  } while (node !== null);

	  return null;
	}

	function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
	  // This marks a Suspense boundary so that when we're unwinding the stack,
	  // it captures the suspended "exception" and does a second (fallback) pass.
	  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
	    // Legacy Mode Suspense
	    //
	    // If the boundary is in legacy mode, we should *not*
	    // suspend the commit. Pretend as if the suspended component rendered
	    // null and keep rendering. When the Suspense boundary completes,
	    // we'll do a second pass to render the fallback.
	    if (suspenseBoundary === returnFiber) {
	      // Special case where we suspended while reconciling the children of
	      // a Suspense boundary's inner Offscreen wrapper fiber. This happens
	      // when a React.lazy component is a direct child of a
	      // Suspense boundary.
	      //
	      // Suspense boundaries are implemented as multiple fibers, but they
	      // are a single conceptual unit. The legacy mode behavior where we
	      // pretend the suspended fiber committed as `null` won't work,
	      // because in this case the "suspended" fiber is the inner
	      // Offscreen wrapper.
	      //
	      // Because the contents of the boundary haven't started rendering
	      // yet (i.e. nothing in the tree has partially rendered) we can
	      // switch to the regular, concurrent mode behavior: mark the
	      // boundary with ShouldCapture and enter the unwind phase.
	      suspenseBoundary.flags |= ShouldCapture;
	    } else {
	      suspenseBoundary.flags |= DidCapture;
	      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
	      // But we shouldn't call any lifecycle methods or callbacks. Remove
	      // all lifecycle effect tags.

	      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

	      if (sourceFiber.tag === ClassComponent) {
	        var currentSourceFiber = sourceFiber.alternate;

	        if (currentSourceFiber === null) {
	          // This is a new mount. Change the tag so it's not mistaken for a
	          // completed class component. For example, we should not call
	          // componentWillUnmount if it is deleted.
	          sourceFiber.tag = IncompleteClassComponent;
	        } else {
	          // When we try rendering again, we should not reuse the current fiber,
	          // since it's known to be in an inconsistent state. Use a force update to
	          // prevent a bail out.
	          var update = createUpdate(NoTimestamp, SyncLane);
	          update.tag = ForceUpdate;
	          enqueueUpdate(sourceFiber, update, SyncLane);
	        }
	      } // The source fiber did not complete. Mark it with Sync priority to
	      // indicate that it still has pending work.


	      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
	    }

	    return suspenseBoundary;
	  } // Confirmed that the boundary is in a concurrent mode tree. Continue
	  // with the normal suspend path.
	  //
	  // After this we'll use a set of heuristics to determine whether this
	  // render pass will run to completion or restart or "suspend" the commit.
	  // The actual logic for this is spread out in different places.
	  //
	  // This first principle is that if we're going to suspend when we complete
	  // a root, then we should also restart if we get an update or ping that
	  // might unsuspend it, and vice versa. The only reason to suspend is
	  // because you think you might want to restart before committing. However,
	  // it doesn't make sense to restart only while in the period we're suspended.
	  //
	  // Restarting too aggressively is also not good because it starves out any
	  // intermediate loading state. So we use heuristics to determine when.
	  // Suspense Heuristics
	  //
	  // If nothing threw a Promise or all the same fallbacks are already showing,
	  // then don't suspend/restart.
	  //
	  // If this is an initial render of a new tree of Suspense boundaries and
	  // those trigger a fallback, then don't suspend/restart. We want to ensure
	  // that we can show the initial loading state as quickly as possible.
	  //
	  // If we hit a "Delayed" case, such as when we'd switch from content back into
	  // a fallback, then we should always suspend/restart. Transitions apply
	  // to this case. If none is defined, JND is used instead.
	  //
	  // If we're already showing a fallback and it gets "retried", allowing us to show
	  // another level, but there's still an inner boundary that would show a fallback,
	  // then we suspend/restart for 500ms since the last time we showed a fallback
	  // anywhere in the tree. This effectively throttles progressive loading into a
	  // consistent train of commits. This also gives us an opportunity to restart to
	  // get to the completed state slightly earlier.
	  //
	  // If there's ambiguity due to batching it's resolved in preference of:
	  // 1) "delayed", 2) "initial render", 3) "retry".
	  //
	  // We want to ensure that a "busy" state doesn't get force committed. We want to
	  // ensure that new initial loading states can commit as soon as possible.


	  suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in
	  // the begin phase to prevent an early bailout.

	  suspenseBoundary.lanes = rootRenderLanes;
	  return suspenseBoundary;
	}

	function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
	  // The source fiber did not complete.
	  sourceFiber.flags |= Incomplete;

	  {
	    if (isDevToolsPresent) {
	      // If we have pending work still, restore the original updaters
	      restorePendingUpdaters(root, rootRenderLanes);
	    }
	  }

	  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
	    // This is a wakeable. The component suspended.
	    var wakeable = value;
	    resetSuspendedComponent(sourceFiber);

	    {
	      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
	        markDidThrowWhileHydratingDEV();
	      }
	    }


	    var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);

	    if (suspenseBoundary !== null) {
	      suspenseBoundary.flags &= ~ForceClientRender;
	      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always
	      // commits fallbacks synchronously, so there are no pings.

	      if (suspenseBoundary.mode & ConcurrentMode) {
	        attachPingListener(root, wakeable, rootRenderLanes);
	      }

	      attachRetryListener(suspenseBoundary, root, wakeable);
	      return;
	    } else {
	      // No boundary was found. Unless this is a sync update, this is OK.
	      // We can suspend and wait for more data to arrive.
	      if (!includesSyncLane(rootRenderLanes)) {
	        // This is not a sync update. Suspend. Since we're not activating a
	        // Suspense boundary, this will unwind all the way to the root without
	        // performing a second pass to render a fallback. (This is arguably how
	        // refresh transitions should work, too, since we're not going to commit
	        // the fallbacks anyway.)
	        //
	        // This case also applies to initial hydration.
	        attachPingListener(root, wakeable, rootRenderLanes);
	        renderDidSuspendDelayIfPossible();
	        return;
	      } // This is a sync/discrete update. We treat this case like an error
	      // because discrete renders are expected to produce a complete tree
	      // synchronously to maintain consistency with external state.


	      var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.
	      // The error will be caught by the nearest suspense boundary.

	      value = uncaughtSuspenseError;
	    }
	  } else {
	    // This is a regular error, not a Suspense wakeable.
	    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
	      markDidThrowWhileHydratingDEV();

	      var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by
	      // discarding the dehydrated content and switching to a client render.
	      // Instead of surfacing the error, find the nearest Suspense boundary
	      // and render it again without hydration.


	      if (_suspenseBoundary !== null) {
	        if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
	          // Set a flag to indicate that we should try rendering the normal
	          // children again, not the fallback.
	          _suspenseBoundary.flags |= ForceClientRender;
	        }

	        markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should
	        // still log it so it can be fixed.

	        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
	        return;
	      }
	    }
	  }

	  value = createCapturedValueAtFiber(value, sourceFiber);
	  renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start
	  // over and traverse parent path again, this time treating the exception
	  // as an error.

	  var workInProgress = returnFiber;

	  do {
	    switch (workInProgress.tag) {
	      case HostRoot:
	        {
	          var _errorInfo = value;
	          workInProgress.flags |= ShouldCapture;
	          var lane = pickArbitraryLane(rootRenderLanes);
	          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
	          var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
	          enqueueCapturedUpdate(workInProgress, update);
	          return;
	        }

	      case ClassComponent:
	        // Capture and retry
	        var errorInfo = value;
	        var ctor = workInProgress.type;
	        var instance = workInProgress.stateNode;

	        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
	          workInProgress.flags |= ShouldCapture;

	          var _lane = pickArbitraryLane(rootRenderLanes);

	          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

	          var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);

	          enqueueCapturedUpdate(workInProgress, _update);
	          return;
	        }

	        break;
	    }

	    workInProgress = workInProgress.return;
	  } while (workInProgress !== null);
	}

	function getSuspendedCache() {
	  {
	    return null;
	  } // This function is called when a Suspense boundary suspends. It returns the
	}

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
	var didReceiveUpdate = false;
	var didWarnAboutBadClass;
	var didWarnAboutModulePatternComponent;
	var didWarnAboutContextTypeOnFunctionComponent;
	var didWarnAboutGetDerivedStateOnFunctionComponent;
	var didWarnAboutFunctionRefs;
	var didWarnAboutReassigningProps;
	var didWarnAboutRevealOrder;
	var didWarnAboutTailOptions;
	var didWarnAboutDefaultPropsOnFunctionComponent;

	{
	  didWarnAboutBadClass = {};
	  didWarnAboutModulePatternComponent = {};
	  didWarnAboutContextTypeOnFunctionComponent = {};
	  didWarnAboutGetDerivedStateOnFunctionComponent = {};
	  didWarnAboutFunctionRefs = {};
	  didWarnAboutReassigningProps = false;
	  didWarnAboutRevealOrder = {};
	  didWarnAboutTailOptions = {};
	  didWarnAboutDefaultPropsOnFunctionComponent = {};
	}

	function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
	  if (current === null) {
	    // If this is a fresh new component that hasn't been rendered yet, we
	    // won't update its child set by applying minimal side-effects. Instead,
	    // we will add them all to the child before it gets rendered. That means
	    // we can optimize this reconciliation pass by not tracking side-effects.
	    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
	  } else {
	    // If the current child is the same as the work in progress, it means that
	    // we haven't yet started any work on these children. Therefore, we use
	    // the clone algorithm to create a copy of all the current children.
	    // If we had any progressed work already, that is invalid at this point so
	    // let's throw it out.
	    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
	  }
	}

	function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
	  // This function is fork of reconcileChildren. It's used in cases where we
	  // want to reconcile without matching against the existing set. This has the
	  // effect of all current children being unmounted; even if the type and key
	  // are the same, the old child is unmounted and a new child is created.
	  //
	  // To do this, we're going to go through the reconcile algorithm twice. In
	  // the first pass, we schedule a deletion for all the current children by
	  // passing null.
	  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
	  // pass null in place of where we usually pass the current child set. This has
	  // the effect of remounting all children regardless of whether their
	  // identities match.

	  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
	}

	function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens after the first render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentNameFromType(Component));
	      }
	    }
	  }

	  var render = Component.render;
	  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

	  var nextChildren;
	  var hasId;
	  prepareToReadContext(workInProgress, renderLanes);

	  {
	    markComponentRenderStarted(workInProgress);
	  }

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
	    hasId = checkDidRenderIdHook();

	    if ( workInProgress.mode & StrictLegacyMode) {
	      setIsStrictModeForDevtools(true);

	      try {
	        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
	        hasId = checkDidRenderIdHook();
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }

	    setIsRendering(false);
	  }

	  {
	    markComponentRenderStopped();
	  }

	  if (current !== null && !didReceiveUpdate) {
	    bailoutHooks(current, workInProgress, renderLanes);
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  }

	  if (getIsHydrating() && hasId) {
	    pushMaterializedTreeId(workInProgress);
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  if (current === null) {
	    var type = Component.type;

	    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
	    Component.defaultProps === undefined) {
	      var resolvedType = type;

	      {
	        resolvedType = resolveFunctionForHotReloading(type);
	      } // If this is a plain function component without default props,
	      // and with only the default shallow comparison, we upgrade it
	      // to a SimpleMemoComponent to allow fast path updates.


	      workInProgress.tag = SimpleMemoComponent;
	      workInProgress.type = resolvedType;

	      {
	        validateFunctionComponentInDev(workInProgress, type);
	      }

	      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);
	    }

	    {
	      var innerPropTypes = type.propTypes;

	      if (innerPropTypes) {
	        // Inner memo component props aren't currently validated in createElement.
	        // We could move it there, but we'd still need this for lazy code path.
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentNameFromType(type));
	      }

	      if ( Component.defaultProps !== undefined) {
	        var componentName = getComponentNameFromType(type) || 'Unknown';

	        if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
	          error('%s: Support for defaultProps will be removed from memo components ' + 'in a future major release. Use JavaScript default parameters instead.', componentName);

	          didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
	        }
	      }
	    }

	    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
	    child.ref = workInProgress.ref;
	    child.return = workInProgress;
	    workInProgress.child = child;
	    return child;
	  }

	  {
	    var _type = Component.type;
	    var _innerPropTypes = _type.propTypes;

	    if (_innerPropTypes) {
	      // Inner memo component props aren't currently validated in createElement.
	      // We could move it there, but we'd still need this for lazy code path.
	      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
	      'prop', getComponentNameFromType(_type));
	    }
	  }

	  var currentChild = current.child; // This is always exactly one child

	  var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);

	  if (!hasScheduledUpdateOrContext) {
	    // This will be the props with resolved defaultProps,
	    // unlike current.memoizedProps which will be the unresolved ones.
	    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

	    var compare = Component.compare;
	    compare = compare !== null ? compare : shallowEqual;

	    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	    }
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  var newChild = createWorkInProgress(currentChild, nextProps);
	  newChild.ref = workInProgress.ref;
	  newChild.return = workInProgress;
	  workInProgress.child = newChild;
	  return newChild;
	}

	function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens when the inner render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var outerMemoType = workInProgress.elementType;

	      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
	        // We warn when you define propTypes on lazy()
	        // so let's just skip over it to find memo() outer wrapper.
	        // Inner props for memo are validated later.
	        var lazyComponent = outerMemoType;
	        var payload = lazyComponent._payload;
	        var init = lazyComponent._init;

	        try {
	          outerMemoType = init(payload);
	        } catch (x) {
	          outerMemoType = null;
	        } // Inner propTypes will be validated in the function component path.


	        var outerPropTypes = outerMemoType && outerMemoType.propTypes;

	        if (outerPropTypes) {
	          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
	          'prop', getComponentNameFromType(outerMemoType));
	        }
	      }
	    }
	  }

	  if (current !== null) {
	    var prevProps = current.memoizedProps;

	    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
	     workInProgress.type === current.type )) {
	      didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we
	      // would during a normal fiber bailout.
	      //
	      // We don't have strong guarantees that the props object is referentially
	      // equal during updates where we can't bail out anyway — like if the props
	      // are shallowly equal, but there's a local state or context update in the
	      // same batch.
	      //
	      // However, as a principle, we should aim to make the behavior consistent
	      // across different ways of memoizing a component. For example, React.memo
	      // has a different internal Fiber layout if you pass a normal function
	      // component (SimpleMemoComponent) versus if you pass a different type
	      // like forwardRef (MemoComponent). But this is an implementation detail.
	      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't
	      // affect whether the props object is reused during a bailout.

	      workInProgress.pendingProps = nextProps = prevProps;

	      if (!checkScheduledUpdateOrContext(current, renderLanes)) {
	        // The pending lanes were cleared at the beginning of beginWork. We're
	        // about to bail out, but there might be other lanes that weren't
	        // included in the current render. Usually, the priority level of the
	        // remaining updates is accumulated during the evaluation of the
	        // component (i.e. when processing the update queue). But since since
	        // we're bailing out early *without* evaluating the component, we need
	        // to account for it here, too. Reset to the value of the current fiber.
	        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
	        // because a MemoComponent fiber does not have hooks or an update queue;
	        // rather, it wraps around an inner component, which may or may not
	        // contains hooks.
	        // TODO: Move the reset at in beginWork out of the common path so that
	        // this is no longer necessary.
	        workInProgress.lanes = current.lanes;
	        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
	        // This is a special case that only exists for legacy mode.
	        // See https://github.com/facebook/react/pull/19216.
	        didReceiveUpdate = true;
	      }
	    }
	  }

	  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
	}

	function updateOffscreenComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  var prevState = current !== null ? current.memoizedState : null;

	  if (nextProps.mode === 'hidden' || enableLegacyHidden ) {
	    // Rendering a hidden tree.
	    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	      // In legacy sync mode, don't defer the subtree. Render it now.
	      // TODO: Consider how Offscreen should work with transitions in the future
	      var nextState = {
	        baseLanes: NoLanes,
	        cachePool: null,
	        transitions: null
	      };
	      workInProgress.memoizedState = nextState;

	      pushRenderLanes(workInProgress, renderLanes);
	    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
	      var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out
	      // and resume this tree later.

	      var nextBaseLanes;

	      if (prevState !== null) {
	        var prevBaseLanes = prevState.baseLanes;
	        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
	      } else {
	        nextBaseLanes = renderLanes;
	      } // Schedule this fiber to re-render at offscreen priority. Then bailout.


	      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
	      var _nextState = {
	        baseLanes: nextBaseLanes,
	        cachePool: spawnedCachePool,
	        transitions: null
	      };
	      workInProgress.memoizedState = _nextState;
	      workInProgress.updateQueue = null;
	      // to avoid a push/pop misalignment.


	      pushRenderLanes(workInProgress, nextBaseLanes);

	      return null;
	    } else {
	      // This is the second render. The surrounding visible content has already
	      // committed. Now we resume rendering the hidden tree.
	      // Rendering at offscreen, so we can clear the base lanes.
	      var _nextState2 = {
	        baseLanes: NoLanes,
	        cachePool: null,
	        transitions: null
	      };
	      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

	      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;

	      pushRenderLanes(workInProgress, subtreeRenderLanes);
	    }
	  } else {
	    // Rendering a visible tree.
	    var _subtreeRenderLanes;

	    if (prevState !== null) {
	      // We're going from hidden -> visible.
	      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);

	      workInProgress.memoizedState = null;
	    } else {
	      // We weren't previously hidden, and we still aren't, so there's nothing
	      // special to do. Need to push to the stack regardless, though, to avoid
	      // a push/pop misalignment.
	      _subtreeRenderLanes = renderLanes;
	    }

	    pushRenderLanes(workInProgress, _subtreeRenderLanes);
	  }

	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	} // Note: These happen to have identical begin phases, for now. We shouldn't hold

	function updateFragment(current, workInProgress, renderLanes) {
	  var nextChildren = workInProgress.pendingProps;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateMode(current, workInProgress, renderLanes) {
	  var nextChildren = workInProgress.pendingProps.children;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateProfiler(current, workInProgress, renderLanes) {
	  {
	    workInProgress.flags |= Update;

	    {
	      // Reset effect durations for the next eventual effect phase.
	      // These are reset during render to allow the DevTools commit hook a chance to read them,
	      var stateNode = workInProgress.stateNode;
	      stateNode.effectDuration = 0;
	      stateNode.passiveEffectDuration = 0;
	    }
	  }

	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function markRef(current, workInProgress) {
	  var ref = workInProgress.ref;

	  if (current === null && ref !== null || current !== null && current.ref !== ref) {
	    // Schedule a Ref effect
	    workInProgress.flags |= Ref;

	    {
	      workInProgress.flags |= RefStatic;
	    }
	  }
	}

	function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentNameFromType(Component));
	      }
	    }
	  }

	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  var nextChildren;
	  var hasId;
	  prepareToReadContext(workInProgress, renderLanes);

	  {
	    markComponentRenderStarted(workInProgress);
	  }

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
	    hasId = checkDidRenderIdHook();

	    if ( workInProgress.mode & StrictLegacyMode) {
	      setIsStrictModeForDevtools(true);

	      try {
	        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
	        hasId = checkDidRenderIdHook();
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }

	    setIsRendering(false);
	  }

	  {
	    markComponentRenderStopped();
	  }

	  if (current !== null && !didReceiveUpdate) {
	    bailoutHooks(current, workInProgress, renderLanes);
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  }

	  if (getIsHydrating() && hasId) {
	    pushMaterializedTreeId(workInProgress);
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  {
	    // This is used by DevTools to force a boundary to error.
	    switch (shouldError(workInProgress)) {
	      case false:
	        {
	          var _instance = workInProgress.stateNode;
	          var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.
	          // Is there a better way to do this?

	          var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
	          var state = tempInstance.state;

	          _instance.updater.enqueueSetState(_instance, state, null);

	          break;
	        }

	      case true:
	        {
	          workInProgress.flags |= DidCapture;
	          workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes

	          var error$1 = new Error('Simulated error coming from DevTools');
	          var lane = pickArbitraryLane(renderLanes);
	          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state

	          var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);
	          enqueueCapturedUpdate(workInProgress, update);
	          break;
	        }
	    }

	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentNameFromType(Component));
	      }
	    }
	  } // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.


	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  var instance = workInProgress.stateNode;
	  var shouldUpdate;

	  if (instance === null) {
	    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.

	    constructClassInstance(workInProgress, Component, nextProps);
	    mountClassInstance(workInProgress, Component, nextProps, renderLanes);
	    shouldUpdate = true;
	  } else if (current === null) {
	    // In a resume, we'll already have an instance we can reuse.
	    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
	  } else {
	    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
	  }

	  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);

	  {
	    var inst = workInProgress.stateNode;

	    if (shouldUpdate && inst.props !== nextProps) {
	      if (!didWarnAboutReassigningProps) {
	        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');
	      }

	      didWarnAboutReassigningProps = true;
	    }
	  }

	  return nextUnitOfWork;
	}

	function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
	  // Refs should update even if shouldComponentUpdate returns false
	  markRef(current, workInProgress);
	  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

	  if (!shouldUpdate && !didCaptureError) {
	    // Context providers should defer to sCU for rendering
	    if (hasContext) {
	      invalidateContextProvider(workInProgress, Component, false);
	    }

	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  }

	  var instance = workInProgress.stateNode; // Rerender

	  ReactCurrentOwner$1.current = workInProgress;
	  var nextChildren;

	  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
	    // If we captured an error, but getDerivedStateFromError is not defined,
	    // unmount all the children. componentDidCatch will schedule an update to
	    // re-render a fallback. This is temporary until we migrate everyone to
	    // the new API.
	    // TODO: Warn in a future release.
	    nextChildren = null;

	    {
	      stopProfilerTimerIfRunning();
	    }
	  } else {
	    {
	      markComponentRenderStarted(workInProgress);
	    }

	    {
	      setIsRendering(true);
	      nextChildren = instance.render();

	      if ( workInProgress.mode & StrictLegacyMode) {
	        setIsStrictModeForDevtools(true);

	        try {
	          instance.render();
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }

	      setIsRendering(false);
	    }

	    {
	      markComponentRenderStopped();
	    }
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;

	  if (current !== null && didCaptureError) {
	    // If we're recovering from an error, reconcile without reusing any of
	    // the existing children. Conceptually, the normal children and the children
	    // that are shown on error are two different sets, so we shouldn't reuse
	    // normal children even if their identities match.
	    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
	  } else {
	    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  } // Memoize state using the values we just used to render.
	  // TODO: Restructure so we never read values from the instance.


	  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

	  if (hasContext) {
	    invalidateContextProvider(workInProgress, Component, true);
	  }

	  return workInProgress.child;
	}

	function pushHostRootContext(workInProgress) {
	  var root = workInProgress.stateNode;

	  if (root.pendingContext) {
	    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
	  } else if (root.context) {
	    // Should always be set
	    pushTopLevelContextObject(workInProgress, root.context, false);
	  }

	  pushHostContainer(workInProgress, root.containerInfo);
	}

	function updateHostRoot(current, workInProgress, renderLanes) {
	  pushHostRootContext(workInProgress);

	  if (current === null) {
	    throw new Error('Should have a current fiber. This is a bug in React.');
	  }

	  var nextProps = workInProgress.pendingProps;
	  var prevState = workInProgress.memoizedState;
	  var prevChildren = prevState.element;
	  cloneUpdateQueue(current, workInProgress);
	  processUpdateQueue(workInProgress, nextProps, null, renderLanes);
	  var nextState = workInProgress.memoizedState;
	  workInProgress.stateNode;
	  // being called "element".


	  var nextChildren = nextState.element;

	  if ( prevState.isDehydrated) {
	    // This is a hydration root whose shell has not yet hydrated. We should
	    // attempt to hydrate.
	    // Flip isDehydrated to false to indicate that when this render
	    // finishes, the root will no longer be dehydrated.
	    var overrideState = {
	      element: nextChildren,
	      isDehydrated: false,
	      cache: nextState.cache,
	      pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
	      transitions: nextState.transitions
	    };
	    var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't
	    // have reducer functions so it doesn't need rebasing.

	    updateQueue.baseState = overrideState;
	    workInProgress.memoizedState = overrideState;

	    if (workInProgress.flags & ForceClientRender) {
	      // Something errored during a previous attempt to hydrate the shell, so we
	      // forced a client render.
	      var recoverableError = createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.'), workInProgress);
	      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);
	    } else if (nextChildren !== prevChildren) {
	      var _recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);

	      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);
	    } else {
	      // The outermost shell has not hydrated yet. Start hydrating.
	      enterHydrationState(workInProgress);

	      var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
	      workInProgress.child = child;
	      var node = child;

	      while (node) {
	        // Mark each child as hydrating. This is a fast path to know whether this
	        // tree is part of a hydrating tree. This is used to determine if a child
	        // node has fully mounted yet, and for scheduling event replaying.
	        // Conceptually this is similar to Placement in that a new subtree is
	        // inserted into the React tree here. It just happens to not need DOM
	        // mutations because it already exists.
	        node.flags = node.flags & ~Placement | Hydrating;
	        node = node.sibling;
	      }
	    }
	  } else {
	    // Root is not dehydrated. Either this is a client-only root, or it
	    // already hydrated.
	    resetHydrationState();

	    if (nextChildren === prevChildren) {
	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	    }

	    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  }

	  return workInProgress.child;
	}

	function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
	  // Revert to client rendering.
	  resetHydrationState();
	  queueHydrationError(recoverableError);
	  workInProgress.flags |= ForceClientRender;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateHostComponent(current, workInProgress, renderLanes) {
	  pushHostContext(workInProgress);

	  if (current === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  }

	  var type = workInProgress.type;
	  var nextProps = workInProgress.pendingProps;
	  var prevProps = current !== null ? current.memoizedProps : null;
	  var nextChildren = nextProps.children;
	  var isDirectTextChild = shouldSetTextContent(type, nextProps);

	  if (isDirectTextChild) {
	    // We special case a direct text child of a host node. This is a common
	    // case. We won't handle it as a reified child. We will instead handle
	    // this in the host environment that also has access to this prop. That
	    // avoids allocating another HostText fiber and traversing it.
	    nextChildren = null;
	  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
	    // If we're switching from a direct text child to a normal child, or to
	    // empty, we need to schedule the text content to be reset.
	    workInProgress.flags |= ContentReset;
	  }

	  markRef(current, workInProgress);
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateHostText(current, workInProgress) {
	  if (current === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  } // Nothing to do here. This is terminal. We'll do the completion step
	  // immediately after.


	  return null;
	}

	function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
	  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
	  var props = workInProgress.pendingProps;
	  var lazyComponent = elementType;
	  var payload = lazyComponent._payload;
	  var init = lazyComponent._init;
	  var Component = init(payload); // Store the unwrapped component in the type.

	  workInProgress.type = Component;
	  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
	  var resolvedProps = resolveDefaultProps(Component, props);
	  var child;

	  switch (resolvedTag) {
	    case FunctionComponent:
	      {
	        {
	          validateFunctionComponentInDev(workInProgress, Component);
	          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
	        }

	        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
	        return child;
	      }

	    case ClassComponent:
	      {
	        {
	          workInProgress.type = Component = resolveClassForHotReloading(Component);
	        }

	        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
	        return child;
	      }

	    case ForwardRef:
	      {
	        {
	          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
	        }

	        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
	        return child;
	      }

	    case MemoComponent:
	      {
	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = Component.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
	              'prop', getComponentNameFromType(Component));
	            }
	          }
	        }

	        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
	        renderLanes);
	        return child;
	      }
	  }

	  var hint = '';

	  {
	    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
	      hint = ' Did you wrap a component in React.lazy() more than once?';
	    }
	  } // This message intentionally doesn't mention ForwardRef or MemoComponent
	  // because the fact that it's a separate type of work is an
	  // implementation detail.


	  throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
	}

	function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
	  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.

	  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
	  // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.

	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  constructClassInstance(workInProgress, Component, nextProps);
	  mountClassInstance(workInProgress, Component, nextProps, renderLanes);
	  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
	}

	function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
	  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
	  var props = workInProgress.pendingProps;
	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  var value;
	  var hasId;

	  {
	    markComponentRenderStarted(workInProgress);
	  }

	  {
	    if (Component.prototype && typeof Component.prototype.render === 'function') {
	      var componentName = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutBadClass[componentName]) {
	        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

	        didWarnAboutBadClass[componentName] = true;
	      }
	    }

	    if (workInProgress.mode & StrictLegacyMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
	    }

	    setIsRendering(true);
	    ReactCurrentOwner$1.current = workInProgress;
	    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
	    hasId = checkDidRenderIdHook();
	    setIsRendering(false);
	  }

	  {
	    markComponentRenderStopped();
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;

	  {
	    // Support for module components is deprecated and is removed behind a flag.
	    // Whether or not it would crash later, we want to show a good message in DEV first.
	    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	      var _componentName = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutModulePatternComponent[_componentName]) {
	        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

	        didWarnAboutModulePatternComponent[_componentName] = true;
	      }
	    }
	  }

	  if ( // Run these checks in production only if the flag is off.
	  // Eventually we'll delete this branch altogether.
	   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	    {
	      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutModulePatternComponent[_componentName2]) {
	        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);

	        didWarnAboutModulePatternComponent[_componentName2] = true;
	      }
	    } // Proceed under the assumption that this is a class instance


	    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
	    // During mounting we don't know the child context yet as the instance doesn't exist.
	    // We will invalidate the child context in finishClassComponent() right after rendering.

	    var hasContext = false;

	    if (isContextProvider(Component)) {
	      hasContext = true;
	      pushContextProvider(workInProgress);
	    } else {
	      hasContext = false;
	    }

	    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
	    initializeUpdateQueue(workInProgress);
	    adoptClassInstance(workInProgress, value);
	    mountClassInstance(workInProgress, Component, props, renderLanes);
	    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
	  } else {
	    // Proceed under the assumption that this is a function component
	    workInProgress.tag = FunctionComponent;

	    {

	      if ( workInProgress.mode & StrictLegacyMode) {
	        setIsStrictModeForDevtools(true);

	        try {
	          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
	          hasId = checkDidRenderIdHook();
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }
	    }

	    if (getIsHydrating() && hasId) {
	      pushMaterializedTreeId(workInProgress);
	    }

	    reconcileChildren(null, workInProgress, value, renderLanes);

	    {
	      validateFunctionComponentInDev(workInProgress, Component);
	    }

	    return workInProgress.child;
	  }
	}

	function validateFunctionComponentInDev(workInProgress, Component) {
	  {
	    if (Component) {
	      if (Component.childContextTypes) {
	        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
	      }
	    }

	    if (workInProgress.ref !== null) {
	      var info = '';
	      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	      if (ownerName) {
	        info += '\n\nCheck the render method of `' + ownerName + '`.';
	      }

	      var warningKey = ownerName || '';
	      var debugSource = workInProgress._debugSource;

	      if (debugSource) {
	        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
	      }

	      if (!didWarnAboutFunctionRefs[warningKey]) {
	        didWarnAboutFunctionRefs[warningKey] = true;

	        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
	      }
	    }

	    if ( Component.defaultProps !== undefined) {
	      var componentName = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
	        error('%s: Support for defaultProps will be removed from function components ' + 'in a future major release. Use JavaScript default parameters instead.', componentName);

	        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
	      }
	    }

	    if (typeof Component.getDerivedStateFromProps === 'function') {
	      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
	        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);

	        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
	      }
	    }

	    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
	      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
	        error('%s: Function components do not support contextType.', _componentName4);

	        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
	      }
	    }
	  }
	}

	var SUSPENDED_MARKER = {
	  dehydrated: null,
	  treeContext: null,
	  retryLane: NoLane
	};

	function mountSuspenseOffscreenState(renderLanes) {
	  return {
	    baseLanes: renderLanes,
	    cachePool: getSuspendedCache(),
	    transitions: null
	  };
	}

	function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
	  var cachePool = null;

	  return {
	    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
	    cachePool: cachePool,
	    transitions: prevOffscreenState.transitions
	  };
	} // TODO: Probably should inline this back


	function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
	  // If we're already showing a fallback, there are cases where we need to
	  // remain on that fallback regardless of whether the content has resolved.
	  // For example, SuspenseList coordinates when nested content appears.
	  if (current !== null) {
	    var suspenseState = current.memoizedState;

	    if (suspenseState === null) {
	      // Currently showing content. Don't hide it, even if ForceSuspenseFallback
	      // is true. More precise name might be "ForceRemainSuspenseFallback".
	      // Note: This is a factoring smell. Can't remain on a fallback if there's
	      // no fallback to remain on.
	      return false;
	    }
	  } // Not currently showing content. Consult the Suspense context.


	  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
	}

	function getRemainingWorkInPrimaryTree(current, renderLanes) {
	  // TODO: Should not remove render lanes that were pinged during this render
	  return removeLanes(current.childLanes, renderLanes);
	}

	function updateSuspenseComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

	  {
	    if (shouldSuspend(workInProgress)) {
	      workInProgress.flags |= DidCapture;
	    }
	  }

	  var suspenseContext = suspenseStackCursor.current;
	  var showFallback = false;
	  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

	  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
	    // Something in this boundary's subtree already suspended. Switch to
	    // rendering the fallback children.
	    showFallback = true;
	    workInProgress.flags &= ~DidCapture;
	  } else {
	    // Attempting the main content
	    if (current === null || current.memoizedState !== null) {
	      // This is a new mount or this boundary is already showing a fallback state.
	      // Mark this subtree context as having at least one invisible parent that could
	      // handle the fallback state.
	      // Avoided boundaries are not considered since they cannot handle preferred fallback states.
	      {
	        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
	      }
	    }
	  }

	  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
	  // boundary's children. This involves some custom reconciliation logic. Two
	  // main reasons this is so complicated.
	  //
	  // First, Legacy Mode has different semantics for backwards compatibility. The
	  // primary tree will commit in an inconsistent state, so when we do the
	  // second pass to render the fallback, we do some exceedingly, uh, clever
	  // hacks to make that not totally break. Like transferring effects and
	  // deletions from hidden tree. In Concurrent Mode, it's much simpler,
	  // because we bailout on the primary tree completely and leave it in its old
	  // state, no effects. Same as what we do for Offscreen (except that
	  // Offscreen doesn't have the first render pass).
	  //
	  // Second is hydration. During hydration, the Suspense fiber has a slightly
	  // different layout, where the child points to a dehydrated fragment, which
	  // contains the DOM rendered by the server.
	  //
	  // Third, even if you set all that aside, Suspense is like error boundaries in
	  // that we first we try to render one tree, and if that fails, we render again
	  // and switch to a different tree. Like a try/catch block. So we have to track
	  // which branch we're currently rendering. Ideally we would model this using
	  // a stack.

	  if (current === null) {
	    // Initial mount
	    // Special path for hydration
	    // If we're currently hydrating, try to hydrate this boundary.
	    tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.

	    var suspenseState = workInProgress.memoizedState;

	    if (suspenseState !== null) {
	      var dehydrated = suspenseState.dehydrated;

	      if (dehydrated !== null) {
	        return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
	      }
	    }

	    var nextPrimaryChildren = nextProps.children;
	    var nextFallbackChildren = nextProps.fallback;

	    if (showFallback) {
	      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
	      var primaryChildFragment = workInProgress.child;
	      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
	      workInProgress.memoizedState = SUSPENDED_MARKER;

	      return fallbackFragment;
	    } else {
	      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
	    }
	  } else {
	    // This is an update.
	    // Special path for hydration
	    var prevState = current.memoizedState;

	    if (prevState !== null) {
	      var _dehydrated = prevState.dehydrated;

	      if (_dehydrated !== null) {
	        return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);
	      }
	    }

	    if (showFallback) {
	      var _nextFallbackChildren = nextProps.fallback;
	      var _nextPrimaryChildren = nextProps.children;
	      var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);
	      var _primaryChildFragment2 = workInProgress.child;
	      var prevOffscreenState = current.child.memoizedState;
	      _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);

	      _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
	      workInProgress.memoizedState = SUSPENDED_MARKER;
	      return fallbackChildFragment;
	    } else {
	      var _nextPrimaryChildren2 = nextProps.children;

	      var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);

	      workInProgress.memoizedState = null;
	      return _primaryChildFragment3;
	    }
	  }
	}

	function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
	  var mode = workInProgress.mode;
	  var primaryChildProps = {
	    mode: 'visible',
	    children: primaryChildren
	  };
	  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
	  primaryChildFragment.return = workInProgress;
	  workInProgress.child = primaryChildFragment;
	  return primaryChildFragment;
	}

	function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
	  var mode = workInProgress.mode;
	  var progressedPrimaryFragment = workInProgress.child;
	  var primaryChildProps = {
	    mode: 'hidden',
	    children: primaryChildren
	  };
	  var primaryChildFragment;
	  var fallbackChildFragment;

	  if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
	    // In legacy mode, we commit the primary tree as if it successfully
	    // completed, even though it's in an inconsistent state.
	    primaryChildFragment = progressedPrimaryFragment;
	    primaryChildFragment.childLanes = NoLanes;
	    primaryChildFragment.pendingProps = primaryChildProps;

	    if ( workInProgress.mode & ProfileMode) {
	      // Reset the durations from the first pass so they aren't included in the
	      // final amounts. This seems counterintuitive, since we're intentionally
	      // not measuring part of the render phase, but this makes it match what we
	      // do in Concurrent Mode.
	      primaryChildFragment.actualDuration = 0;
	      primaryChildFragment.actualStartTime = -1;
	      primaryChildFragment.selfBaseDuration = 0;
	      primaryChildFragment.treeBaseDuration = 0;
	    }

	    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
	  } else {
	    primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
	    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
	  }

	  primaryChildFragment.return = workInProgress;
	  fallbackChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = fallbackChildFragment;
	  workInProgress.child = primaryChildFragment;
	  return fallbackChildFragment;
	}

	function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
	  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use
	  // this wrapper function to constrain it.
	  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
	}

	function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
	  // The props argument to `createWorkInProgress` is `any` typed, so we use this
	  // wrapper function to constrain it.
	  return createWorkInProgress(current, offscreenProps);
	}

	function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
	  var currentPrimaryChildFragment = current.child;
	  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
	  var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
	    mode: 'visible',
	    children: primaryChildren
	  });

	  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	    primaryChildFragment.lanes = renderLanes;
	  }

	  primaryChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = null;

	  if (currentFallbackChildFragment !== null) {
	    // Delete the fallback child fragment
	    var deletions = workInProgress.deletions;

	    if (deletions === null) {
	      workInProgress.deletions = [currentFallbackChildFragment];
	      workInProgress.flags |= ChildDeletion;
	    } else {
	      deletions.push(currentFallbackChildFragment);
	    }
	  }

	  workInProgress.child = primaryChildFragment;
	  return primaryChildFragment;
	}

	function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
	  var mode = workInProgress.mode;
	  var currentPrimaryChildFragment = current.child;
	  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
	  var primaryChildProps = {
	    mode: 'hidden',
	    children: primaryChildren
	  };
	  var primaryChildFragment;

	  if ( // In legacy mode, we commit the primary tree as if it successfully
	  // completed, even though it's in an inconsistent state.
	  (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
	  // already cloned. In legacy mode, the only case where this isn't true is
	  // when DevTools forces us to display a fallback; we skip the first render
	  // pass entirely and go straight to rendering the fallback. (In Concurrent
	  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
	  // only codepath.)
	  workInProgress.child !== currentPrimaryChildFragment) {
	    var progressedPrimaryFragment = workInProgress.child;
	    primaryChildFragment = progressedPrimaryFragment;
	    primaryChildFragment.childLanes = NoLanes;
	    primaryChildFragment.pendingProps = primaryChildProps;

	    if ( workInProgress.mode & ProfileMode) {
	      // Reset the durations from the first pass so they aren't included in the
	      // final amounts. This seems counterintuitive, since we're intentionally
	      // not measuring part of the render phase, but this makes it match what we
	      // do in Concurrent Mode.
	      primaryChildFragment.actualDuration = 0;
	      primaryChildFragment.actualStartTime = -1;
	      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
	      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
	    } // The fallback fiber was added as a deletion during the first pass.
	    // However, since we're going to remain on the fallback, we no longer want
	    // to delete it.


	    workInProgress.deletions = null;
	  } else {
	    primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.
	    // (We don't do this in legacy mode, because in legacy mode we don't re-use
	    // the current tree; see previous branch.)

	    primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
	  }

	  var fallbackChildFragment;

	  if (currentFallbackChildFragment !== null) {
	    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
	  } else {
	    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
	    // mounted but this is a new fiber.

	    fallbackChildFragment.flags |= Placement;
	  }

	  fallbackChildFragment.return = workInProgress;
	  primaryChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = fallbackChildFragment;
	  workInProgress.child = primaryChildFragment;
	  return fallbackChildFragment;
	}

	function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
	  // Falling back to client rendering. Because this has performance
	  // implications, it's considered a recoverable error, even though the user
	  // likely won't observe anything wrong with the UI.
	  //
	  // The error is passed in as an argument to enforce that every caller provide
	  // a custom message, or explicitly opt out (currently the only path that opts
	  // out is legacy mode; every concurrent path provides an error).
	  if (recoverableError !== null) {
	    queueHydrationError(recoverableError);
	  } // This will add the old fiber to the deletion list


	  reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.

	  var nextProps = workInProgress.pendingProps;
	  var primaryChildren = nextProps.children;
	  var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already
	  // mounted but this is a new fiber.

	  primaryChildFragment.flags |= Placement;
	  workInProgress.memoizedState = null;
	  return primaryChildFragment;
	}

	function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
	  var fiberMode = workInProgress.mode;
	  var primaryChildProps = {
	    mode: 'visible',
	    children: primaryChildren
	  };
	  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
	  var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense
	  // boundary) already mounted but this is a new fiber.

	  fallbackChildFragment.flags |= Placement;
	  primaryChildFragment.return = workInProgress;
	  fallbackChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = fallbackChildFragment;
	  workInProgress.child = primaryChildFragment;

	  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
	    // We will have dropped the effect list which contains the
	    // deletion. We need to reconcile to delete the current child.
	    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
	  }

	  return fallbackChildFragment;
	}

	function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
	  // During the first pass, we'll bail out and not drill into the children.
	  // Instead, we'll leave the content in place and try to hydrate it later.
	  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	    {
	      error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');
	    }

	    workInProgress.lanes = laneToLanes(SyncLane);
	  } else if (isSuspenseInstanceFallback(suspenseInstance)) {
	    // This is a client-only boundary. Since we won't get any content from the server
	    // for this, we need to schedule that at a higher priority based on when it would
	    // have timed out. In theory we could render it in this pass but it would have the
	    // wrong priority associated with it and will prevent hydration of parent path.
	    // Instead, we'll leave work left on it to render it in a separate commit.
	    // TODO This time should be the time at which the server rendered response that is
	    // a parent to this boundary was displayed. However, since we currently don't have
	    // a protocol to transfer that time, we'll just estimate it by using the current
	    // time. This will mean that Suspense timeouts are slightly shifted to later than
	    // they should be.
	    // Schedule a normal pri update to render this content.
	    workInProgress.lanes = laneToLanes(DefaultHydrationLane);
	  } else {
	    // We'll continue hydrating the rest at offscreen priority since we'll already
	    // be showing the right content coming from the server, it is no rush.
	    workInProgress.lanes = laneToLanes(OffscreenLane);
	  }

	  return null;
	}

	function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
	  if (!didSuspend) {
	    // This is the first render pass. Attempt to hydrate.
	    // We should never be hydrating at this point because it is the first pass,
	    // but after we've already committed once.
	    warnIfHydrating();

	    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: When we delete legacy mode, we should make this error argument
	      // required — every concurrent mode path that causes hydration to
	      // de-opt to client rendering should have an error message.
	      null);
	    }

	    if (isSuspenseInstanceFallback(suspenseInstance)) {
	      // This boundary is in a permanent fallback state. In this case, we'll never
	      // get an update and we'll never be able to hydrate the final content. Let's just try the
	      // client side render instead.
	      var digest, message, stack;

	      {
	        var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);

	        digest = _getSuspenseInstanceF.digest;
	        message = _getSuspenseInstanceF.message;
	        stack = _getSuspenseInstanceF.stack;
	      }

	      var error;

	      if (message) {
	        // eslint-disable-next-line react-internal/prod-error-codes
	        error = new Error(message);
	      } else {
	        error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.');
	      }

	      var capturedValue = createCapturedValue(error, digest, stack);
	      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);
	    }
	    // any context has changed, we need to treat is as if the input might have changed.


	    var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);

	    if (didReceiveUpdate || hasContextChanged) {
	      // This boundary has changed since the first render. This means that we are now unable to
	      // hydrate it. We might still be able to hydrate it using a higher priority lane.
	      var root = getWorkInProgressRoot();

	      if (root !== null) {
	        var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);

	        if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
	          // Intentionally mutating since this render will get interrupted. This
	          // is one of the very rare times where we mutate the current tree
	          // during the render phase.
	          suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render

	          var eventTime = NoTimestamp;
	          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);
	          scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);
	        }
	      } // If we have scheduled higher pri work above, this will probably just abort the render
	      // since we now have higher priority work, but in case it doesn't, we need to prepare to
	      // render something, if we time out. Even if that requires us to delete everything and
	      // skip hydration.
	      // Delay having to do this as long as the suspense timeout allows us.


	      renderDidSuspendDelayIfPossible();

	      var _capturedValue = createCapturedValue(new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));

	      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);
	    } else if (isSuspenseInstancePending(suspenseInstance)) {
	      // This component is still pending more data from the server, so we can't hydrate its
	      // content. We treat it as if this component suspended itself. It might seem as if
	      // we could just try to render it client-side instead. However, this will perform a
	      // lot of unnecessary work and is unlikely to complete since it often will suspend
	      // on missing data anyway. Additionally, the server might be able to render more
	      // than we can on the client yet. In that case we'd end up with more fallback states
	      // on the client than if we just leave it alone. If the server times out or errors
	      // these should update this boundary to the permanent Fallback state instead.
	      // Mark it as having captured (i.e. suspended).
	      workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.

	      workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.

	      var retry = retryDehydratedSuspenseBoundary.bind(null, current);
	      registerSuspenseInstanceRetry(suspenseInstance, retry);
	      return null;
	    } else {
	      // This is the first attempt.
	      reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);
	      var primaryChildren = nextProps.children;
	      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this
	      // tree is part of a hydrating tree. This is used to determine if a child
	      // node has fully mounted yet, and for scheduling event replaying.
	      // Conceptually this is similar to Placement in that a new subtree is
	      // inserted into the React tree here. It just happens to not need DOM
	      // mutations because it already exists.

	      primaryChildFragment.flags |= Hydrating;
	      return primaryChildFragment;
	    }
	  } else {
	    // This is the second render pass. We already attempted to hydrated, but
	    // something either suspended or errored.
	    if (workInProgress.flags & ForceClientRender) {
	      // Something errored during hydration. Try again without hydrating.
	      workInProgress.flags &= ~ForceClientRender;

	      var _capturedValue2 = createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));

	      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);
	    } else if (workInProgress.memoizedState !== null) {
	      // Something suspended and we should still be in dehydrated mode.
	      // Leave the existing child in place.
	      workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there
	      // but the normal suspense pass doesn't.

	      workInProgress.flags |= DidCapture;
	      return null;
	    } else {
	      // Suspended but we should no longer be in dehydrated mode.
	      // Therefore we now have to render the fallback.
	      var nextPrimaryChildren = nextProps.children;
	      var nextFallbackChildren = nextProps.fallback;
	      var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
	      var _primaryChildFragment4 = workInProgress.child;
	      _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);
	      workInProgress.memoizedState = SUSPENDED_MARKER;
	      return fallbackChildFragment;
	    }
	  }
	}

	function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
	  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
	  var alternate = fiber.alternate;

	  if (alternate !== null) {
	    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
	  }

	  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
	}

	function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
	  // Mark any Suspense boundaries with fallbacks as having work to do.
	  // If they were previously forced into fallbacks, they may now be able
	  // to unblock.
	  var node = firstChild;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
	      }
	    } else if (node.tag === SuspenseListComponent) {
	      // If the tail is hidden there might not be an Suspense boundaries
	      // to schedule work on. In this case we have to schedule it on the
	      // list itself.
	      // We don't have to traverse to the children of the list since
	      // the list will propagate the change when it rerenders.
	      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === workInProgress) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === workInProgress) {
	        return;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function findLastContentRow(firstChild) {
	  // This is going to find the last row among these children that is already
	  // showing content on the screen, as opposed to being in fallback state or
	  // new. If a row has multiple Suspense boundaries, any of them being in the
	  // fallback state, counts as the whole row being in a fallback state.
	  // Note that the "rows" will be workInProgress, but any nested children
	  // will still be current since we haven't rendered them yet. The mounted
	  // order may not be the same as the new order. We use the new order.
	  var row = firstChild;
	  var lastContentRow = null;

	  while (row !== null) {
	    var currentRow = row.alternate; // New rows can't be content rows.

	    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	      lastContentRow = row;
	    }

	    row = row.sibling;
	  }

	  return lastContentRow;
	}

	function validateRevealOrder(revealOrder) {
	  {
	    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
	      didWarnAboutRevealOrder[revealOrder] = true;

	      if (typeof revealOrder === 'string') {
	        switch (revealOrder.toLowerCase()) {
	          case 'together':
	          case 'forwards':
	          case 'backwards':
	            {
	              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

	              break;
	            }

	          case 'forward':
	          case 'backward':
	            {
	              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

	              break;
	            }

	          default:
	            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

	            break;
	        }
	      } else {
	        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
	      }
	    }
	  }
	}

	function validateTailOptions(tailMode, revealOrder) {
	  {
	    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
	      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
	        didWarnAboutTailOptions[tailMode] = true;

	        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
	      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
	        didWarnAboutTailOptions[tailMode] = true;

	        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
	      }
	    }
	  }
	}

	function validateSuspenseListNestedChild(childSlot, index) {
	  {
	    var isAnArray = isArray(childSlot);
	    var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';

	    if (isAnArray || isIterable) {
	      var type = isAnArray ? 'array' : 'iterable';

	      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

	      return false;
	    }
	  }

	  return true;
	}

	function validateSuspenseListChildren(children, revealOrder) {
	  {
	    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
	      if (isArray(children)) {
	        for (var i = 0; i < children.length; i++) {
	          if (!validateSuspenseListNestedChild(children[i], i)) {
	            return;
	          }
	        }
	      } else {
	        var iteratorFn = getIteratorFn(children);

	        if (typeof iteratorFn === 'function') {
	          var childrenIterator = iteratorFn.call(children);

	          if (childrenIterator) {
	            var step = childrenIterator.next();
	            var _i = 0;

	            for (; !step.done; step = childrenIterator.next()) {
	              if (!validateSuspenseListNestedChild(step.value, _i)) {
	                return;
	              }

	              _i++;
	            }
	          }
	        } else {
	          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
	        }
	      }
	    }
	  }
	}

	function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
	  var renderState = workInProgress.memoizedState;

	  if (renderState === null) {
	    workInProgress.memoizedState = {
	      isBackwards: isBackwards,
	      rendering: null,
	      renderingStartTime: 0,
	      last: lastContentRow,
	      tail: tail,
	      tailMode: tailMode
	    };
	  } else {
	    // We can reuse the existing object from previous renders.
	    renderState.isBackwards = isBackwards;
	    renderState.rendering = null;
	    renderState.renderingStartTime = 0;
	    renderState.last = lastContentRow;
	    renderState.tail = tail;
	    renderState.tailMode = tailMode;
	  }
	} // This can end up rendering this component multiple passes.
	// The first pass splits the children fibers into two sets. A head and tail.
	// We first render the head. If anything is in fallback state, we do another
	// pass through beginWork to rerender all children (including the tail) with
	// the force suspend context. If the first render didn't have anything in
	// in fallback state. Then we render each row in the tail one-by-one.
	// That happens in the completeWork phase without going back to beginWork.


	function updateSuspenseListComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps;
	  var revealOrder = nextProps.revealOrder;
	  var tailMode = nextProps.tail;
	  var newChildren = nextProps.children;
	  validateRevealOrder(revealOrder);
	  validateTailOptions(tailMode, revealOrder);
	  validateSuspenseListChildren(newChildren, revealOrder);
	  reconcileChildren(current, workInProgress, newChildren, renderLanes);
	  var suspenseContext = suspenseStackCursor.current;
	  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

	  if (shouldForceFallback) {
	    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	    workInProgress.flags |= DidCapture;
	  } else {
	    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

	    if (didSuspendBefore) {
	      // If we previously forced a fallback, we need to schedule work
	      // on any nested boundaries to let them know to try to render
	      // again. This is the same as context updating.
	      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
	    }

	    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  }

	  pushSuspenseContext(workInProgress, suspenseContext);

	  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	    // In legacy mode, SuspenseList doesn't work so we just
	    // use make it a noop by treating it as the default revealOrder.
	    workInProgress.memoizedState = null;
	  } else {
	    switch (revealOrder) {
	      case 'forwards':
	        {
	          var lastContentRow = findLastContentRow(workInProgress.child);
	          var tail;

	          if (lastContentRow === null) {
	            // The whole list is part of the tail.
	            // TODO: We could fast path by just rendering the tail now.
	            tail = workInProgress.child;
	            workInProgress.child = null;
	          } else {
	            // Disconnect the tail rows after the content row.
	            // We're going to render them separately later.
	            tail = lastContentRow.sibling;
	            lastContentRow.sibling = null;
	          }

	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          tail, lastContentRow, tailMode);
	          break;
	        }

	      case 'backwards':
	        {
	          // We're going to find the first row that has existing content.
	          // At the same time we're going to reverse the list of everything
	          // we pass in the meantime. That's going to be our tail in reverse
	          // order.
	          var _tail = null;
	          var row = workInProgress.child;
	          workInProgress.child = null;

	          while (row !== null) {
	            var currentRow = row.alternate; // New rows can't be content rows.

	            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	              // This is the beginning of the main content.
	              workInProgress.child = row;
	              break;
	            }

	            var nextRow = row.sibling;
	            row.sibling = _tail;
	            _tail = row;
	            row = nextRow;
	          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


	          initSuspenseListRenderState(workInProgress, true, // isBackwards
	          _tail, null, // last
	          tailMode);
	          break;
	        }

	      case 'together':
	        {
	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          null, // tail
	          null, // last
	          undefined);
	          break;
	        }

	      default:
	        {
	          // The default reveal order is the same as not having
	          // a boundary.
	          workInProgress.memoizedState = null;
	        }
	    }
	  }

	  return workInProgress.child;
	}

	function updatePortalComponent(current, workInProgress, renderLanes) {
	  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	  var nextChildren = workInProgress.pendingProps;

	  if (current === null) {
	    // Portals are special because we don't append the children during mount
	    // but at commit. Therefore we need to track insertions which the normal
	    // flow doesn't do during mount. This doesn't happen at the root because
	    // the root always starts with a "current" with a null child.
	    // TODO: Consider unifying this with how the root works.
	    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
	  } else {
	    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  }

	  return workInProgress.child;
	}

	var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

	function updateContextProvider(current, workInProgress, renderLanes) {
	  var providerType = workInProgress.type;
	  var context = providerType._context;
	  var newProps = workInProgress.pendingProps;
	  var oldProps = workInProgress.memoizedProps;
	  var newValue = newProps.value;

	  {
	    if (!('value' in newProps)) {
	      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
	        hasWarnedAboutUsingNoValuePropOnContextProvider = true;

	        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
	      }
	    }

	    var providerPropTypes = workInProgress.type.propTypes;

	    if (providerPropTypes) {
	      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
	    }
	  }

	  pushProvider(workInProgress, context, newValue);

	  {
	    if (oldProps !== null) {
	      var oldValue = oldProps.value;

	      if (objectIs(oldValue, newValue)) {
	        // No change. Bailout early if children are the same.
	        if (oldProps.children === newProps.children && !hasContextChanged()) {
	          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	        }
	      } else {
	        // The context value changed. Search for matching consumers and schedule
	        // them to update.
	        propagateContextChange(workInProgress, context, renderLanes);
	      }
	    }
	  }

	  var newChildren = newProps.children;
	  reconcileChildren(current, workInProgress, newChildren, renderLanes);
	  return workInProgress.child;
	}

	var hasWarnedAboutUsingContextAsConsumer = false;

	function updateContextConsumer(current, workInProgress, renderLanes) {
	  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
	  // DEV mode, we create a separate object for Context.Consumer that acts
	  // like a proxy to Context. This proxy object adds unnecessary code in PROD
	  // so we use the old behaviour (Context.Consumer references Context) to
	  // reduce size and overhead. The separate object references context via
	  // a property called "_context", which also gives us the ability to check
	  // in DEV mode if this property exists or not and warn if it does not.

	  {
	    if (context._context === undefined) {
	      // This may be because it's a Context (rather than a Consumer).
	      // Or it may be because it's older React where they're the same thing.
	      // We only want to warn if we're sure it's a new React.
	      if (context !== context.Consumer) {
	        if (!hasWarnedAboutUsingContextAsConsumer) {
	          hasWarnedAboutUsingContextAsConsumer = true;

	          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	        }
	      }
	    } else {
	      context = context._context;
	    }
	  }

	  var newProps = workInProgress.pendingProps;
	  var render = newProps.children;

	  {
	    if (typeof render !== 'function') {
	      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
	    }
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  var newValue = readContext(context);

	  {
	    markComponentRenderStarted(workInProgress);
	  }

	  var newChildren;

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    newChildren = render(newValue);
	    setIsRendering(false);
	  }

	  {
	    markComponentRenderStopped();
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  reconcileChildren(current, workInProgress, newChildren, renderLanes);
	  return workInProgress.child;
	}

	function markWorkInProgressReceivedUpdate() {
	  didReceiveUpdate = true;
	}

	function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
	  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	    if (current !== null) {
	      // A lazy component only mounts if it suspended inside a non-
	      // concurrent tree, in an inconsistent state. We want to treat it like
	      // a new mount, even though an empty version of it already committed.
	      // Disconnect the alternate pointers.
	      current.alternate = null;
	      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	      workInProgress.flags |= Placement;
	    }
	  }
	}

	function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
	  if (current !== null) {
	    // Reuse previous dependencies
	    workInProgress.dependencies = current.dependencies;
	  }

	  {
	    // Don't update "base" render times for bailouts.
	    stopProfilerTimerIfRunning();
	  }

	  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

	  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
	    // The children don't have any work either. We can skip them.
	    // TODO: Once we add back resuming, we should check if the children are
	    // a work-in-progress set. If so, we need to transfer their effects.
	    {
	      return null;
	    }
	  } // This fiber doesn't have work, but its subtree does. Clone the child
	  // fibers and continue.


	  cloneChildFibers(current, workInProgress);
	  return workInProgress.child;
	}

	function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
	  {
	    var returnFiber = oldWorkInProgress.return;

	    if (returnFiber === null) {
	      // eslint-disable-next-line react-internal/prod-error-codes
	      throw new Error('Cannot swap the root fiber.');
	    } // Disconnect from the old current.
	    // It will get deleted.


	    current.alternate = null;
	    oldWorkInProgress.alternate = null; // Connect to the new tree.

	    newWorkInProgress.index = oldWorkInProgress.index;
	    newWorkInProgress.sibling = oldWorkInProgress.sibling;
	    newWorkInProgress.return = oldWorkInProgress.return;
	    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

	    if (oldWorkInProgress === returnFiber.child) {
	      returnFiber.child = newWorkInProgress;
	    } else {
	      var prevSibling = returnFiber.child;

	      if (prevSibling === null) {
	        // eslint-disable-next-line react-internal/prod-error-codes
	        throw new Error('Expected parent to have a child.');
	      }

	      while (prevSibling.sibling !== oldWorkInProgress) {
	        prevSibling = prevSibling.sibling;

	        if (prevSibling === null) {
	          // eslint-disable-next-line react-internal/prod-error-codes
	          throw new Error('Expected to find the previous sibling.');
	        }
	      }

	      prevSibling.sibling = newWorkInProgress;
	    } // Delete the old fiber and place the new one.
	    // Since the old fiber is disconnected, we have to schedule it manually.


	    var deletions = returnFiber.deletions;

	    if (deletions === null) {
	      returnFiber.deletions = [current];
	      returnFiber.flags |= ChildDeletion;
	    } else {
	      deletions.push(current);
	    }

	    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

	    return newWorkInProgress;
	  }
	}

	function checkScheduledUpdateOrContext(current, renderLanes) {
	  // Before performing an early bailout, we must check if there are pending
	  // updates or context.
	  var updateLanes = current.lanes;

	  if (includesSomeLane(updateLanes, renderLanes)) {
	    return true;
	  } // No pending update, but because context is propagated lazily, we need

	  return false;
	}

	function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
	  // This fiber does not have any pending work. Bailout without entering
	  // the begin phase. There's still some bookkeeping we that needs to be done
	  // in this optimized path, mostly pushing stuff onto the stack.
	  switch (workInProgress.tag) {
	    case HostRoot:
	      pushHostRootContext(workInProgress);
	      workInProgress.stateNode;

	      resetHydrationState();
	      break;

	    case HostComponent:
	      pushHostContext(workInProgress);
	      break;

	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          pushContextProvider(workInProgress);
	        }

	        break;
	      }

	    case HostPortal:
	      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	      break;

	    case ContextProvider:
	      {
	        var newValue = workInProgress.memoizedProps.value;
	        var context = workInProgress.type._context;
	        pushProvider(workInProgress, context, newValue);
	        break;
	      }

	    case Profiler:
	      {
	        // Profiler should only call onRender when one of its descendants actually rendered.
	        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

	        if (hasChildWork) {
	          workInProgress.flags |= Update;
	        }

	        {
	          // Reset effect durations for the next eventual effect phase.
	          // These are reset during render to allow the DevTools commit hook a chance to read them,
	          var stateNode = workInProgress.stateNode;
	          stateNode.effectDuration = 0;
	          stateNode.passiveEffectDuration = 0;
	        }
	      }

	      break;

	    case SuspenseComponent:
	      {
	        var state = workInProgress.memoizedState;

	        if (state !== null) {
	          if (state.dehydrated !== null) {
	            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
	            // been unsuspended it has committed as a resolved Suspense component.
	            // If it needs to be retried, it should have work scheduled on it.

	            workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we
	            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.

	            return null;
	          } // If this boundary is currently timed out, we need to decide
	          // whether to retry the primary children, or to skip over it and
	          // go straight to the fallback. Check the priority of the primary
	          // child fragment.


	          var primaryChildFragment = workInProgress.child;
	          var primaryChildLanes = primaryChildFragment.childLanes;

	          if (includesSomeLane(renderLanes, primaryChildLanes)) {
	            // The primary children have pending work. Use the normal path
	            // to attempt to render the primary children again.
	            return updateSuspenseComponent(current, workInProgress, renderLanes);
	          } else {
	            // The primary child fragment does not have pending work marked
	            // on it
	            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
	            // priority. Bailout.

	            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

	            if (child !== null) {
	              // The fallback children have pending work. Skip over the
	              // primary children and work on the fallback.
	              return child.sibling;
	            } else {
	              // Note: We can return `null` here because we already checked
	              // whether there were nested context consumers, via the call to
	              // `bailoutOnAlreadyFinishedWork` above.
	              return null;
	            }
	          }
	        } else {
	          pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
	        }

	        break;
	      }

	    case SuspenseListComponent:
	      {
	        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

	        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

	        if (didSuspendBefore) {
	          if (_hasChildWork) {
	            // If something was in fallback state last time, and we have all the
	            // same children then we're still in progressive loading state.
	            // Something might get unblocked by state updates or retries in the
	            // tree which will affect the tail. So we need to use the normal
	            // path to compute the correct tail.
	            return updateSuspenseListComponent(current, workInProgress, renderLanes);
	          } // If none of the children had any work, that means that none of
	          // them got retried so they'll still be blocked in the same way
	          // as before. We can fast bail out.


	          workInProgress.flags |= DidCapture;
	        } // If nothing suspended before and we're rendering the same children,
	        // then the tail doesn't matter. Anything new that suspends will work
	        // in the "together" mode, so we can continue from the state we had.


	        var renderState = workInProgress.memoizedState;

	        if (renderState !== null) {
	          // Reset to the "together" mode in case we've started a different
	          // update in the past but didn't complete it.
	          renderState.rendering = null;
	          renderState.tail = null;
	          renderState.lastEffect = null;
	        }

	        pushSuspenseContext(workInProgress, suspenseStackCursor.current);

	        if (_hasChildWork) {
	          break;
	        } else {
	          // If none of the children had any work, that means that none of
	          // them got retried so they'll still be blocked in the same way
	          // as before. We can fast bail out.
	          return null;
	        }
	      }

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      {
	        // Need to check if the tree still needs to be deferred. This is
	        // almost identical to the logic used in the normal update path,
	        // so we'll just enter that. The only difference is we'll bail out
	        // at the next level instead of this one, because the child props
	        // have not changed. Which is fine.
	        // TODO: Probably should refactor `beginWork` to split the bailout
	        // path from the normal path. I'm tempted to do a labeled break here
	        // but I won't :)
	        workInProgress.lanes = NoLanes;
	        return updateOffscreenComponent(current, workInProgress, renderLanes);
	      }
	  }

	  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	}

	function beginWork(current, workInProgress, renderLanes) {
	  {
	    if (workInProgress._debugNeedsRemount && current !== null) {
	      // This will restart the begin phase with a new fiber.
	      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
	    }
	  }

	  if (current !== null) {
	    var oldProps = current.memoizedProps;
	    var newProps = workInProgress.pendingProps;

	    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
	     workInProgress.type !== current.type )) {
	      // If props or context changed, mark the fiber as having performed work.
	      // This may be unset if the props are determined to be equal later (memo).
	      didReceiveUpdate = true;
	    } else {
	      // Neither props nor legacy context changes. Check if there's a pending
	      // update or context change.
	      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);

	      if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
	      // may not be work scheduled on `current`, so we check for this flag.
	      (workInProgress.flags & DidCapture) === NoFlags) {
	        // No pending updates or context. Bail out now.
	        didReceiveUpdate = false;
	        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
	      }

	      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
	        // This is a special case that only exists for legacy mode.
	        // See https://github.com/facebook/react/pull/19216.
	        didReceiveUpdate = true;
	      } else {
	        // An update was scheduled on this fiber, but there are no new props
	        // nor legacy context. Set this to false. If an update queue or context
	        // consumer produces a changed value, it will set this to true. Otherwise,
	        // the component will assume the children have not changed and bail out.
	        didReceiveUpdate = false;
	      }
	    }
	  } else {
	    didReceiveUpdate = false;

	    if (getIsHydrating() && isForkedChild(workInProgress)) {
	      // Check if this child belongs to a list of muliple children in
	      // its parent.
	      //
	      // In a true multi-threaded implementation, we would render children on
	      // parallel threads. This would represent the beginning of a new render
	      // thread for this subtree.
	      //
	      // We only use this for id generation during hydration, which is why the
	      // logic is located in this special branch.
	      var slotIndex = workInProgress.index;
	      var numberOfForks = getForksAtLevel();
	      pushTreeId(workInProgress, numberOfForks, slotIndex);
	    }
	  } // Before entering the begin phase, clear pending update priority.
	  // TODO: This assumes that we're about to evaluate the component and process
	  // the update queue. However, there's an exception: SimpleMemoComponent
	  // sometimes bails out later in the begin phase. This indicates that we should
	  // move this assignment out of the common path and into each branch.


	  workInProgress.lanes = NoLanes;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	      {
	        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
	      }

	    case LazyComponent:
	      {
	        var elementType = workInProgress.elementType;
	        return mountLazyComponent(current, workInProgress, elementType, renderLanes);
	      }

	    case FunctionComponent:
	      {
	        var Component = workInProgress.type;
	        var unresolvedProps = workInProgress.pendingProps;
	        var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
	        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);
	      }

	    case ClassComponent:
	      {
	        var _Component = workInProgress.type;
	        var _unresolvedProps = workInProgress.pendingProps;

	        var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);

	        return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);
	      }

	    case HostRoot:
	      return updateHostRoot(current, workInProgress, renderLanes);

	    case HostComponent:
	      return updateHostComponent(current, workInProgress, renderLanes);

	    case HostText:
	      return updateHostText(current, workInProgress);

	    case SuspenseComponent:
	      return updateSuspenseComponent(current, workInProgress, renderLanes);

	    case HostPortal:
	      return updatePortalComponent(current, workInProgress, renderLanes);

	    case ForwardRef:
	      {
	        var type = workInProgress.type;
	        var _unresolvedProps2 = workInProgress.pendingProps;

	        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

	        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
	      }

	    case Fragment:
	      return updateFragment(current, workInProgress, renderLanes);

	    case Mode:
	      return updateMode(current, workInProgress, renderLanes);

	    case Profiler:
	      return updateProfiler(current, workInProgress, renderLanes);

	    case ContextProvider:
	      return updateContextProvider(current, workInProgress, renderLanes);

	    case ContextConsumer:
	      return updateContextConsumer(current, workInProgress, renderLanes);

	    case MemoComponent:
	      {
	        var _type2 = workInProgress.type;
	        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

	        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = _type2.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
	              'prop', getComponentNameFromType(_type2));
	            }
	          }
	        }

	        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
	        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);
	      }

	    case SimpleMemoComponent:
	      {
	        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
	      }

	    case IncompleteClassComponent:
	      {
	        var _Component2 = workInProgress.type;
	        var _unresolvedProps4 = workInProgress.pendingProps;

	        var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);

	        return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);
	      }

	    case SuspenseListComponent:
	      {
	        return updateSuspenseListComponent(current, workInProgress, renderLanes);
	      }

	    case ScopeComponent:
	      {

	        break;
	      }

	    case OffscreenComponent:
	      {
	        return updateOffscreenComponent(current, workInProgress, renderLanes);
	      }
	  }

	  throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
	}

	function markUpdate(workInProgress) {
	  // Tag the fiber with an update effect. This turns a Placement into
	  // a PlacementAndUpdate.
	  workInProgress.flags |= Update;
	}

	function markRef$1(workInProgress) {
	  workInProgress.flags |= Ref;

	  {
	    workInProgress.flags |= RefStatic;
	  }
	}

	var appendAllChildren;
	var updateHostContainer;
	var updateHostComponent$1;
	var updateHostText$1;

	{
	  // Mutation mode
	  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;

	    while (node !== null) {
	      if (node.tag === HostComponent || node.tag === HostText) {
	        appendInitialChild(parent, node.stateNode);
	      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === workInProgress) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };

	  updateHostContainer = function (current, workInProgress) {// Noop
	  };

	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    // If we have an alternate, that means this is an update and we need to
	    // schedule a side-effect to do the updates.
	    var oldProps = current.memoizedProps;

	    if (oldProps === newProps) {
	      // In mutation mode, this is sufficient for a bailout because
	      // we won't touch this node even if children changed.
	      return;
	    } // If we get updated because one of our children updated, we don't
	    // have newProps so we'll have to reuse them.
	    // TODO: Split the update API as separate for the props vs. children.
	    // Even better would be if children weren't special cased at all tho.


	    var instance = workInProgress.stateNode;
	    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
	    // component is hitting the resume path. Figure out why. Possibly
	    // related to `hidden`.

	    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

	    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	    // is a new ref we mark this as an update. All the work is done in commitWork.

	    if (updatePayload) {
	      markUpdate(workInProgress);
	    }
	  };

	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    // If the text differs, mark it as an update. All the work in done in commitWork.
	    if (oldText !== newText) {
	      markUpdate(workInProgress);
	    }
	  };
	}

	function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
	  if (getIsHydrating()) {
	    // If we're hydrating, we should consume as many items as we can
	    // so we don't leave any behind.
	    return;
	  }

	  switch (renderState.tailMode) {
	    case 'hidden':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var tailNode = renderState.tail;
	        var lastTailNode = null;

	        while (tailNode !== null) {
	          if (tailNode.alternate !== null) {
	            lastTailNode = tailNode;
	          }

	          tailNode = tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          renderState.tail = null;
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          lastTailNode.sibling = null;
	        }

	        break;
	      }

	    case 'collapsed':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var _tailNode = renderState.tail;
	        var _lastTailNode = null;

	        while (_tailNode !== null) {
	          if (_tailNode.alternate !== null) {
	            _lastTailNode = _tailNode;
	          }

	          _tailNode = _tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (_lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          if (!hasRenderedATailFallback && renderState.tail !== null) {
	            // We suspended during the head. We want to show at least one
	            // row at the tail. So we'll keep on and cut off the rest.
	            renderState.tail.sibling = null;
	          } else {
	            renderState.tail = null;
	          }
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          _lastTailNode.sibling = null;
	        }

	        break;
	      }
	  }
	}

	function bubbleProperties(completedWork) {
	  var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
	  var newChildLanes = NoLanes;
	  var subtreeFlags = NoFlags;

	  if (!didBailout) {
	    // Bubble up the earliest expiration time.
	    if ( (completedWork.mode & ProfileMode) !== NoMode) {
	      // In profiling mode, resetChildExpirationTime is also used to reset
	      // profiler durations.
	      var actualDuration = completedWork.actualDuration;
	      var treeBaseDuration = completedWork.selfBaseDuration;
	      var child = completedWork.child;

	      while (child !== null) {
	        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will
	        // only be updated if work is done on the fiber (i.e. it doesn't bailout).
	        // When work is done, it should bubble to the parent's actualDuration. If
	        // the fiber has not been cloned though, (meaning no work was done), then
	        // this value will reflect the amount of time spent working on a previous
	        // render. In that case it should not bubble. We determine whether it was
	        // cloned by comparing the child pointer.

	        actualDuration += child.actualDuration;
	        treeBaseDuration += child.treeBaseDuration;
	        child = child.sibling;
	      }

	      completedWork.actualDuration = actualDuration;
	      completedWork.treeBaseDuration = treeBaseDuration;
	    } else {
	      var _child = completedWork.child;

	      while (_child !== null) {
	        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
	        subtreeFlags |= _child.subtreeFlags;
	        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code
	        // smell because it assumes the commit phase is never concurrent with
	        // the render phase. Will address during refactor to alternate model.

	        _child.return = completedWork;
	        _child = _child.sibling;
	      }
	    }

	    completedWork.subtreeFlags |= subtreeFlags;
	  } else {
	    // Bubble up the earliest expiration time.
	    if ( (completedWork.mode & ProfileMode) !== NoMode) {
	      // In profiling mode, resetChildExpirationTime is also used to reset
	      // profiler durations.
	      var _treeBaseDuration = completedWork.selfBaseDuration;
	      var _child2 = completedWork.child;

	      while (_child2 !== null) {
	        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
	        // so we should bubble those up even during a bailout. All the other
	        // flags have a lifetime only of a single render + commit, so we should
	        // ignore them.

	        subtreeFlags |= _child2.subtreeFlags & StaticMask;
	        subtreeFlags |= _child2.flags & StaticMask;
	        _treeBaseDuration += _child2.treeBaseDuration;
	        _child2 = _child2.sibling;
	      }

	      completedWork.treeBaseDuration = _treeBaseDuration;
	    } else {
	      var _child3 = completedWork.child;

	      while (_child3 !== null) {
	        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
	        // so we should bubble those up even during a bailout. All the other
	        // flags have a lifetime only of a single render + commit, so we should
	        // ignore them.

	        subtreeFlags |= _child3.subtreeFlags & StaticMask;
	        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code
	        // smell because it assumes the commit phase is never concurrent with
	        // the render phase. Will address during refactor to alternate model.

	        _child3.return = completedWork;
	        _child3 = _child3.sibling;
	      }
	    }

	    completedWork.subtreeFlags |= subtreeFlags;
	  }

	  completedWork.childLanes = newChildLanes;
	  return didBailout;
	}

	function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {
	  if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {
	    warnIfUnhydratedTailNodes(workInProgress);
	    resetHydrationState();
	    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
	    return false;
	  }

	  var wasHydrated = popHydrationState(workInProgress);

	  if (nextState !== null && nextState.dehydrated !== null) {
	    // We might be inside a hydration state the first time we're picking up this
	    // Suspense boundary, and also after we've reentered it for further hydration.
	    if (current === null) {
	      if (!wasHydrated) {
	        throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');
	      }

	      prepareToHydrateHostSuspenseInstance(workInProgress);
	      bubbleProperties(workInProgress);

	      {
	        if ((workInProgress.mode & ProfileMode) !== NoMode) {
	          var isTimedOutSuspense = nextState !== null;

	          if (isTimedOutSuspense) {
	            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
	            var primaryChildFragment = workInProgress.child;

	            if (primaryChildFragment !== null) {
	              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
	              workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
	            }
	          }
	        }
	      }

	      return false;
	    } else {
	      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
	      // state since we're now exiting out of it. popHydrationState doesn't do that for us.
	      resetHydrationState();

	      if ((workInProgress.flags & DidCapture) === NoFlags) {
	        // This boundary did not suspend so it's now hydrated and unsuspended.
	        workInProgress.memoizedState = null;
	      } // If nothing suspended, we need to schedule an effect to mark this boundary
	      // as having hydrated so events know that they're free to be invoked.
	      // It's also a signal to replay events and the suspense callback.
	      // If something suspended, schedule an effect to attach retry listeners.
	      // So we might as well always mark this.


	      workInProgress.flags |= Update;
	      bubbleProperties(workInProgress);

	      {
	        if ((workInProgress.mode & ProfileMode) !== NoMode) {
	          var _isTimedOutSuspense = nextState !== null;

	          if (_isTimedOutSuspense) {
	            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
	            var _primaryChildFragment = workInProgress.child;

	            if (_primaryChildFragment !== null) {
	              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
	              workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
	            }
	          }
	        }
	      }

	      return false;
	    }
	  } else {
	    // Successfully completed this tree. If this was a forced client render,
	    // there may have been recoverable errors during first hydration
	    // attempt. If so, add them to a queue so we can log them in the
	    // commit phase.
	    upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path

	    return true;
	  }
	}

	function completeWork(current, workInProgress, renderLanes) {
	  var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing
	  // to the current tree provider fiber is just as fast and less error-prone.
	  // Ideally we would have a special version of the work loop only
	  // for hydration.

	  popTreeContext(workInProgress);

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	    case LazyComponent:
	    case SimpleMemoComponent:
	    case FunctionComponent:
	    case ForwardRef:
	    case Fragment:
	    case Mode:
	    case Profiler:
	    case ContextConsumer:
	    case MemoComponent:
	      bubbleProperties(workInProgress);
	      return null;

	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case HostRoot:
	      {
	        var fiberRoot = workInProgress.stateNode;
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        resetWorkInProgressVersions();

	        if (fiberRoot.pendingContext) {
	          fiberRoot.context = fiberRoot.pendingContext;
	          fiberRoot.pendingContext = null;
	        }

	        if (current === null || current.child === null) {
	          // If we hydrated, pop so that we can delete any remaining children
	          // that weren't hydrated.
	          var wasHydrated = popHydrationState(workInProgress);

	          if (wasHydrated) {
	            // If we hydrated, then we'll need to schedule an update for
	            // the commit side-effects on the root.
	            markUpdate(workInProgress);
	          } else {
	            if (current !== null) {
	              var prevState = current.memoizedState;

	              if ( // Check if this is a client root
	              !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
	              (workInProgress.flags & ForceClientRender) !== NoFlags) {
	                // Schedule an effect to clear this container at the start of the
	                // next commit. This handles the case of React rendering into a
	                // container with previous children. It's also safe to do for
	                // updates too, because current.child would only be null if the
	                // previous render was null (so the container would already
	                // be empty).
	                workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been
	                // recoverable errors during first hydration attempt. If so, add
	                // them to a queue so we can log them in the commit phase.

	                upgradeHydrationErrorsToRecoverable();
	              }
	            }
	          }
	        }

	        updateHostContainer(current, workInProgress);
	        bubbleProperties(workInProgress);

	        return null;
	      }

	    case HostComponent:
	      {
	        popHostContext(workInProgress);
	        var rootContainerInstance = getRootHostContainer();
	        var type = workInProgress.type;

	        if (current !== null && workInProgress.stateNode != null) {
	          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

	          if (current.ref !== workInProgress.ref) {
	            markRef$1(workInProgress);
	          }
	        } else {
	          if (!newProps) {
	            if (workInProgress.stateNode === null) {
	              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');
	            } // This can happen when we abort work.


	            bubbleProperties(workInProgress);
	            return null;
	          }

	          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
	          // "stack" as the parent. Then append children as we go in beginWork
	          // or completeWork depending on whether we want to add them top->down or
	          // bottom->up. Top->down is faster in IE11.

	          var _wasHydrated = popHydrationState(workInProgress);

	          if (_wasHydrated) {
	            // TODO: Move this and createInstance step into the beginPhase
	            // to consolidate.
	            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
	              // If changes to the hydrated node need to be applied at the
	              // commit-phase we mark this as such.
	              markUpdate(workInProgress);
	            }
	          } else {
	            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
	            appendAllChildren(instance, workInProgress, false, false);
	            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
	            // (eg DOM renderer supports auto-focus for certain elements).
	            // Make sure such renderers get scheduled for later work.

	            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
	              markUpdate(workInProgress);
	            }
	          }

	          if (workInProgress.ref !== null) {
	            // If there is a ref on a host node we need to schedule a callback
	            markRef$1(workInProgress);
	          }
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case HostText:
	      {
	        var newText = newProps;

	        if (current && workInProgress.stateNode != null) {
	          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
	          // to schedule a side-effect to do the updates.

	          updateHostText$1(current, workInProgress, oldText, newText);
	        } else {
	          if (typeof newText !== 'string') {
	            if (workInProgress.stateNode === null) {
	              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');
	            } // This can happen when we abort work.

	          }

	          var _rootContainerInstance = getRootHostContainer();

	          var _currentHostContext = getHostContext();

	          var _wasHydrated2 = popHydrationState(workInProgress);

	          if (_wasHydrated2) {
	            if (prepareToHydrateHostTextInstance(workInProgress)) {
	              markUpdate(workInProgress);
	            }
	          } else {
	            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
	          }
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this
	        // to its own fiber type so that we can add other kinds of hydration
	        // boundaries that aren't associated with a Suspense tree. In anticipation
	        // of such a refactor, all the hydration logic is contained in
	        // this branch.

	        if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {
	          var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);

	          if (!fallthroughToNormalSuspensePath) {
	            if (workInProgress.flags & ShouldCapture) {
	              // Special case. There were remaining unhydrated nodes. We treat
	              // this as a mismatch. Revert to client rendering.
	              return workInProgress;
	            } else {
	              // Did not finish hydrating, either because this is the initial
	              // render or because something suspended.
	              return null;
	            }
	          } // Continue with the normal Suspense path.

	        }

	        if ((workInProgress.flags & DidCapture) !== NoFlags) {
	          // Something suspended. Re-render with the fallback children.
	          workInProgress.lanes = renderLanes; // Do not reset the effect list.

	          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	            transferActualDuration(workInProgress);
	          } // Don't bubble properties in this case.


	          return workInProgress;
	        }

	        var nextDidTimeout = nextState !== null;
	        var prevDidTimeout = current !== null && current.memoizedState !== null;
	        // a passive effect, which is when we process the transitions


	        if (nextDidTimeout !== prevDidTimeout) {
	          // an effect to toggle the subtree's visibility. When we switch from
	          // fallback -> primary, the inner Offscreen fiber schedules this effect
	          // as part of its normal complete phase. But when we switch from
	          // primary -> fallback, the inner Offscreen fiber does not have a complete
	          // phase. So we need to schedule its effect here.
	          //
	          // We also use this flag to connect/disconnect the effects, but the same
	          // logic applies: when re-connecting, the Offscreen fiber's complete
	          // phase will handle scheduling the effect. It's only when the fallback
	          // is active that we have to do anything special.


	          if (nextDidTimeout) {
	            var _offscreenFiber2 = workInProgress.child;
	            _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything
	            // in the concurrent tree already suspended during this render.
	            // This is a known bug.

	            if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
	              // TODO: Move this back to throwException because this is too late
	              // if this is a large tree which is common for initial loads. We
	              // don't know if we should restart a render or not until we get
	              // this marker, and this is too late.
	              // If this render already had a ping or lower pri updates,
	              // and this is the first time we know we're going to suspend we
	              // should be able to immediately restart from within throwException.
	              var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);

	              if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
	                // If this was in an invisible tree or a new render, then showing
	                // this boundary is ok.
	                renderDidSuspend();
	              } else {
	                // Otherwise, we're going to have to hide content so we should
	                // suspend for longer if possible.
	                renderDidSuspendDelayIfPossible();
	              }
	            }
	          }
	        }

	        var wakeables = workInProgress.updateQueue;

	        if (wakeables !== null) {
	          // Schedule an effect to attach a retry listener to the promise.
	          // TODO: Move to passive phase
	          workInProgress.flags |= Update;
	        }

	        bubbleProperties(workInProgress);

	        {
	          if ((workInProgress.mode & ProfileMode) !== NoMode) {
	            if (nextDidTimeout) {
	              // Don't count time spent in a timed out Suspense subtree as part of the base duration.
	              var primaryChildFragment = workInProgress.child;

	              if (primaryChildFragment !== null) {
	                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
	                workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
	              }
	            }
	          }
	        }

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      updateHostContainer(current, workInProgress);

	      if (current === null) {
	        preparePortalMount(workInProgress.stateNode.containerInfo);
	      }

	      bubbleProperties(workInProgress);
	      return null;

	    case ContextProvider:
	      // Pop provider fiber
	      var context = workInProgress.type._context;
	      popProvider(context, workInProgress);
	      bubbleProperties(workInProgress);
	      return null;

	    case IncompleteClassComponent:
	      {
	        // Same as class component case. I put it down here so that the tags are
	        // sequential to ensure this switch is compiled to a jump table.
	        var _Component = workInProgress.type;

	        if (isContextProvider(_Component)) {
	          popContext(workInProgress);
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var renderState = workInProgress.memoizedState;

	        if (renderState === null) {
	          // We're running in the default, "independent" mode.
	          // We don't do anything in this mode.
	          bubbleProperties(workInProgress);
	          return null;
	        }

	        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
	        var renderedTail = renderState.rendering;

	        if (renderedTail === null) {
	          // We just rendered the head.
	          if (!didSuspendAlready) {
	            // This is the first pass. We need to figure out if anything is still
	            // suspended in the rendered set.
	            // If new content unsuspended, but there's still some content that
	            // didn't. Then we need to do a second pass that forces everything
	            // to keep showing their fallbacks.
	            // We might be suspended if something in this render pass suspended, or
	            // something in the previous committed pass suspended. Otherwise,
	            // there's no chance so we can skip the expensive call to
	            // findFirstSuspended.
	            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

	            if (!cannotBeSuspended) {
	              var row = workInProgress.child;

	              while (row !== null) {
	                var suspended = findFirstSuspended(row);

	                if (suspended !== null) {
	                  didSuspendAlready = true;
	                  workInProgress.flags |= DidCapture;
	                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
	                  // part of the second pass. In that case nothing will subscribe to
	                  // its thenables. Instead, we'll transfer its thenables to the
	                  // SuspenseList so that it can retry if they resolve.
	                  // There might be multiple of these in the list but since we're
	                  // going to wait for all of them anyway, it doesn't really matter
	                  // which ones gets to ping. In theory we could get clever and keep
	                  // track of how many dependencies remain but it gets tricky because
	                  // in the meantime, we can add/remove/change items and dependencies.
	                  // We might bail out of the loop before finding any but that
	                  // doesn't matter since that means that the other boundaries that
	                  // we did find already has their listeners attached.

	                  var newThenables = suspended.updateQueue;

	                  if (newThenables !== null) {
	                    workInProgress.updateQueue = newThenables;
	                    workInProgress.flags |= Update;
	                  } // Rerender the whole list, but this time, we'll force fallbacks
	                  // to stay in place.
	                  // Reset the effect flags before doing the second pass since that's now invalid.
	                  // Reset the child fibers to their original state.


	                  workInProgress.subtreeFlags = NoFlags;
	                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
	                  // rerender the children.

	                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.

	                  return workInProgress.child;
	                }

	                row = row.sibling;
	              }
	            }

	            if (renderState.tail !== null && now() > getRenderTargetTime()) {
	              // We have already passed our CPU deadline but we still have rows
	              // left in the tail. We'll just give up further attempts to render
	              // the main content and only render fallbacks.
	              workInProgress.flags |= DidCapture;
	              didSuspendAlready = true;
	              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
	              // to get it started back up to attempt the next item. While in terms
	              // of priority this work has the same priority as this current render,
	              // it's not part of the same transition once the transition has
	              // committed. If it's sync, we still want to yield so that it can be
	              // painted. Conceptually, this is really the same as pinging.
	              // We can use any RetryLane even if it's the one currently rendering
	              // since we're leaving it behind on this node.

	              workInProgress.lanes = SomeRetryLane;
	            }
	          } else {
	            cutOffTailIfNeeded(renderState, false);
	          } // Next we're going to render the tail.

	        } else {
	          // Append the rendered row to the child list.
	          if (!didSuspendAlready) {
	            var _suspended = findFirstSuspended(renderedTail);

	            if (_suspended !== null) {
	              workInProgress.flags |= DidCapture;
	              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
	              // get lost if this row ends up dropped during a second pass.

	              var _newThenables = _suspended.updateQueue;

	              if (_newThenables !== null) {
	                workInProgress.updateQueue = _newThenables;
	                workInProgress.flags |= Update;
	              }

	              cutOffTailIfNeeded(renderState, true); // This might have been modified.

	              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
	              ) {
	                  // We're done.
	                  bubbleProperties(workInProgress);
	                  return null;
	                }
	            } else if ( // The time it took to render last row is greater than the remaining
	            // time we have to render. So rendering one more row would likely
	            // exceed it.
	            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
	              // We have now passed our CPU deadline and we'll just give up further
	              // attempts to render the main content and only render fallbacks.
	              // The assumption is that this is usually faster.
	              workInProgress.flags |= DidCapture;
	              didSuspendAlready = true;
	              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
	              // to get it started back up to attempt the next item. While in terms
	              // of priority this work has the same priority as this current render,
	              // it's not part of the same transition once the transition has
	              // committed. If it's sync, we still want to yield so that it can be
	              // painted. Conceptually, this is really the same as pinging.
	              // We can use any RetryLane even if it's the one currently rendering
	              // since we're leaving it behind on this node.

	              workInProgress.lanes = SomeRetryLane;
	            }
	          }

	          if (renderState.isBackwards) {
	            // The effect list of the backwards tail will have been added
	            // to the end. This breaks the guarantee that life-cycles fire in
	            // sibling order but that isn't a strong guarantee promised by React.
	            // Especially since these might also just pop in during future commits.
	            // Append to the beginning of the list.
	            renderedTail.sibling = workInProgress.child;
	            workInProgress.child = renderedTail;
	          } else {
	            var previousSibling = renderState.last;

	            if (previousSibling !== null) {
	              previousSibling.sibling = renderedTail;
	            } else {
	              workInProgress.child = renderedTail;
	            }

	            renderState.last = renderedTail;
	          }
	        }

	        if (renderState.tail !== null) {
	          // We still have tail rows to render.
	          // Pop a row.
	          var next = renderState.tail;
	          renderState.rendering = next;
	          renderState.tail = next.sibling;
	          renderState.renderingStartTime = now();
	          next.sibling = null; // Restore the context.
	          // TODO: We can probably just avoid popping it instead and only
	          // setting it the first time we go from not suspended to suspended.

	          var suspenseContext = suspenseStackCursor.current;

	          if (didSuspendAlready) {
	            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	          } else {
	            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	          }

	          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
	          // Don't bubble properties in this case.

	          return next;
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case ScopeComponent:
	      {

	        break;
	      }

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      {
	        popRenderLanes(workInProgress);
	        var _nextState = workInProgress.memoizedState;
	        var nextIsHidden = _nextState !== null;

	        if (current !== null) {
	          var _prevState = current.memoizedState;
	          var prevIsHidden = _prevState !== null;

	          if (prevIsHidden !== nextIsHidden && ( // LegacyHidden doesn't do any hiding — it only pre-renders.
	          !enableLegacyHidden )) {
	            workInProgress.flags |= Visibility;
	          }
	        }

	        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {
	          bubbleProperties(workInProgress);
	        } else {
	          // Don't bubble properties for hidden children unless we're rendering
	          // at offscreen priority.
	          if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
	            bubbleProperties(workInProgress);

	            {
	              // Check if there was an insertion or update in the hidden subtree.
	              // If so, we need to hide those nodes in the commit phase, so
	              // schedule a visibility effect.
	              if ( workInProgress.subtreeFlags & (Placement | Update)) {
	                workInProgress.flags |= Visibility;
	              }
	            }
	          }
	        }
	        return null;
	      }

	    case CacheComponent:
	      {

	        return null;
	      }

	    case TracingMarkerComponent:
	      {

	        return null;
	      }
	  }

	  throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
	}

	function unwindWork(current, workInProgress, renderLanes) {
	  // Note: This intentionally doesn't check if we're hydrating because comparing
	  // to the current tree provider fiber is just as fast and less error-prone.
	  // Ideally we would have a special version of the work loop only
	  // for hydration.
	  popTreeContext(workInProgress);

	  switch (workInProgress.tag) {
	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        var flags = workInProgress.flags;

	        if (flags & ShouldCapture) {
	          workInProgress.flags = flags & ~ShouldCapture | DidCapture;

	          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	            transferActualDuration(workInProgress);
	          }

	          return workInProgress;
	        }

	        return null;
	      }

	    case HostRoot:
	      {
	        workInProgress.stateNode;
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        resetWorkInProgressVersions();
	        var _flags = workInProgress.flags;

	        if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
	          // There was an error during render that wasn't captured by a suspense
	          // boundary. Do a second pass on the root to unmount the children.
	          workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
	          return workInProgress;
	        } // We unwound to the root without completing it. Exit.


	        return null;
	      }

	    case HostComponent:
	      {
	        // TODO: popHydrationState
	        popHostContext(workInProgress);
	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var suspenseState = workInProgress.memoizedState;

	        if (suspenseState !== null && suspenseState.dehydrated !== null) {
	          if (workInProgress.alternate === null) {
	            throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');
	          }

	          resetHydrationState();
	        }

	        var _flags2 = workInProgress.flags;

	        if (_flags2 & ShouldCapture) {
	          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

	          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	            transferActualDuration(workInProgress);
	          }

	          return workInProgress;
	        }

	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
	        // caught by a nested boundary. If not, it should bubble through.

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      return null;

	    case ContextProvider:
	      var context = workInProgress.type._context;
	      popProvider(context, workInProgress);
	      return null;

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      popRenderLanes(workInProgress);
	      return null;

	    case CacheComponent:

	      return null;

	    default:
	      return null;
	  }
	}

	function unwindInterruptedWork(current, interruptedWork, renderLanes) {
	  // Note: This intentionally doesn't check if we're hydrating because comparing
	  // to the current tree provider fiber is just as fast and less error-prone.
	  // Ideally we would have a special version of the work loop only
	  // for hydration.
	  popTreeContext(interruptedWork);

	  switch (interruptedWork.tag) {
	    case ClassComponent:
	      {
	        var childContextTypes = interruptedWork.type.childContextTypes;

	        if (childContextTypes !== null && childContextTypes !== undefined) {
	          popContext(interruptedWork);
	        }

	        break;
	      }

	    case HostRoot:
	      {
	        interruptedWork.stateNode;
	        popHostContainer(interruptedWork);
	        popTopLevelContextObject(interruptedWork);
	        resetWorkInProgressVersions();
	        break;
	      }

	    case HostComponent:
	      {
	        popHostContext(interruptedWork);
	        break;
	      }

	    case HostPortal:
	      popHostContainer(interruptedWork);
	      break;

	    case SuspenseComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case SuspenseListComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case ContextProvider:
	      var context = interruptedWork.type._context;
	      popProvider(context, interruptedWork);
	      break;

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      popRenderLanes(interruptedWork);
	      break;
	  }
	}

	var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

	{
	  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
	} // Used during the commit phase to track the state of the Offscreen component stack.
	// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
	// Only used when enableSuspenseLayoutEffectSemantics is enabled.


	var offscreenSubtreeIsHidden = false;
	var offscreenSubtreeWasHidden = false;
	var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
	var nextEffect = null; // Used for Profiling builds to track updaters.

	var inProgressLanes = null;
	var inProgressRoot = null;
	function reportUncaughtErrorInDEV(error) {
	  // Wrapping each small part of the commit phase into a guarded
	  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).
	  // But we rely on it to surface errors to DEV tools like overlays
	  // (https://github.com/facebook/react/issues/21712).
	  // As a compromise, rethrow only caught errors in a guard.
	  {
	    invokeGuardedCallback(null, function () {
	      throw error;
	    });
	    clearCaughtError();
	  }
	}

	var callComponentWillUnmountWithTimer = function (current, instance) {
	  instance.props = current.memoizedProps;
	  instance.state = current.memoizedState;

	  if ( current.mode & ProfileMode) {
	    try {
	      startLayoutEffectTimer();
	      instance.componentWillUnmount();
	    } finally {
	      recordLayoutEffectDuration(current);
	    }
	  } else {
	    instance.componentWillUnmount();
	  }
	}; // Capture errors so they don't interrupt mounting.


	function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
	  try {
	    commitHookEffectListMount(Layout, current);
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	} // Capture errors so they don't interrupt unmounting.


	function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
	  try {
	    callComponentWillUnmountWithTimer(current, instance);
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	} // Capture errors so they don't interrupt mounting.


	function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
	  try {
	    instance.componentDidMount();
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	} // Capture errors so they don't interrupt mounting.


	function safelyAttachRef(current, nearestMountedAncestor) {
	  try {
	    commitAttachRef(current);
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	}

	function safelyDetachRef(current, nearestMountedAncestor) {
	  var ref = current.ref;

	  if (ref !== null) {
	    if (typeof ref === 'function') {
	      var retVal;

	      try {
	        if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {
	          try {
	            startLayoutEffectTimer();
	            retVal = ref(null);
	          } finally {
	            recordLayoutEffectDuration(current);
	          }
	        } else {
	          retVal = ref(null);
	        }
	      } catch (error) {
	        captureCommitPhaseError(current, nearestMountedAncestor, error);
	      }

	      {
	        if (typeof retVal === 'function') {
	          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));
	        }
	      }
	    } else {
	      ref.current = null;
	    }
	  }
	}

	function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
	  try {
	    destroy();
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	}
	var shouldFireAfterActiveInstanceBlur = false;
	function commitBeforeMutationEffects(root, firstChild) {
	  prepareForCommit(root.containerInfo);
	  nextEffect = firstChild;
	  commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber

	  var shouldFire = shouldFireAfterActiveInstanceBlur;
	  shouldFireAfterActiveInstanceBlur = false;
	  return shouldFire;
	}

	function commitBeforeMutationEffects_begin() {
	  while (nextEffect !== null) {
	    var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.

	    var child = fiber.child;

	    if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
	      child.return = fiber;
	      nextEffect = child;
	    } else {
	      commitBeforeMutationEffects_complete();
	    }
	  }
	}

	function commitBeforeMutationEffects_complete() {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    setCurrentFiber(fiber);

	    try {
	      commitBeforeMutationEffectsOnFiber(fiber);
	    } catch (error) {
	      captureCommitPhaseError(fiber, fiber.return, error);
	    }

	    resetCurrentFiber();
	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function commitBeforeMutationEffectsOnFiber(finishedWork) {
	  var current = finishedWork.alternate;
	  var flags = finishedWork.flags;

	  if ((flags & Snapshot) !== NoFlags) {
	    setCurrentFiber(finishedWork);

	    switch (finishedWork.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          break;
	        }

	      case ClassComponent:
	        {
	          if (current !== null) {
	            var prevProps = current.memoizedProps;
	            var prevState = current.memoizedState;
	            var instance = finishedWork.stateNode; // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                }
	              }
	            }

	            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

	            {
	              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

	              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
	                didWarnSet.add(finishedWork.type);

	                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));
	              }
	            }

	            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
	          }

	          break;
	        }

	      case HostRoot:
	        {
	          {
	            var root = finishedWork.stateNode;
	            clearContainer(root.containerInfo);
	          }

	          break;
	        }

	      case HostComponent:
	      case HostText:
	      case HostPortal:
	      case IncompleteClassComponent:
	        // Nothing to do for these component types
	        break;

	      default:
	        {
	          throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');
	        }
	    }

	    resetCurrentFiber();
	  }
	}

	function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & flags) === flags) {
	        // Unmount
	        var destroy = effect.destroy;
	        effect.destroy = undefined;

	        if (destroy !== undefined) {
	          {
	            if ((flags & Passive$1) !== NoFlags$1) {
	              markComponentPassiveEffectUnmountStarted(finishedWork);
	            } else if ((flags & Layout) !== NoFlags$1) {
	              markComponentLayoutEffectUnmountStarted(finishedWork);
	            }
	          }

	          {
	            if ((flags & Insertion) !== NoFlags$1) {
	              setIsRunningInsertionEffect(true);
	            }
	          }

	          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);

	          {
	            if ((flags & Insertion) !== NoFlags$1) {
	              setIsRunningInsertionEffect(false);
	            }
	          }

	          {
	            if ((flags & Passive$1) !== NoFlags$1) {
	              markComponentPassiveEffectUnmountStopped();
	            } else if ((flags & Layout) !== NoFlags$1) {
	              markComponentLayoutEffectUnmountStopped();
	            }
	          }
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitHookEffectListMount(flags, finishedWork) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & flags) === flags) {
	        {
	          if ((flags & Passive$1) !== NoFlags$1) {
	            markComponentPassiveEffectMountStarted(finishedWork);
	          } else if ((flags & Layout) !== NoFlags$1) {
	            markComponentLayoutEffectMountStarted(finishedWork);
	          }
	        } // Mount


	        var create = effect.create;

	        {
	          if ((flags & Insertion) !== NoFlags$1) {
	            setIsRunningInsertionEffect(true);
	          }
	        }

	        effect.destroy = create();

	        {
	          if ((flags & Insertion) !== NoFlags$1) {
	            setIsRunningInsertionEffect(false);
	          }
	        }

	        {
	          if ((flags & Passive$1) !== NoFlags$1) {
	            markComponentPassiveEffectMountStopped();
	          } else if ((flags & Layout) !== NoFlags$1) {
	            markComponentLayoutEffectMountStopped();
	          }
	        }

	        {
	          var destroy = effect.destroy;

	          if (destroy !== undefined && typeof destroy !== 'function') {
	            var hookName = void 0;

	            if ((effect.tag & Layout) !== NoFlags) {
	              hookName = 'useLayoutEffect';
	            } else if ((effect.tag & Insertion) !== NoFlags) {
	              hookName = 'useInsertionEffect';
	            } else {
	              hookName = 'useEffect';
	            }

	            var addendum = void 0;

	            if (destroy === null) {
	              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
	            } else if (typeof destroy.then === 'function') {
	              addendum = '\n\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + hookName + '(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
	            } else {
	              addendum = ' You returned: ' + destroy;
	            }

	            error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);
	          }
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitPassiveEffectDurations(finishedRoot, finishedWork) {
	  {
	    // Only Profilers with work in their subtree will have an Update effect scheduled.
	    if ((finishedWork.flags & Update) !== NoFlags) {
	      switch (finishedWork.tag) {
	        case Profiler:
	          {
	            var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
	            var _finishedWork$memoize = finishedWork.memoizedProps,
	                id = _finishedWork$memoize.id,
	                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.
	            // It does not get reset until the start of the next commit phase.

	            var commitTime = getCommitTime();
	            var phase = finishedWork.alternate === null ? 'mount' : 'update';

	            {
	              if (isCurrentUpdateNested()) {
	                phase = 'nested-update';
	              }
	            }

	            if (typeof onPostCommit === 'function') {
	              onPostCommit(id, phase, passiveEffectDuration, commitTime);
	            } // Bubble times to the next nearest ancestor Profiler.
	            // After we process that Profiler, we'll bubble further up.


	            var parentFiber = finishedWork.return;

	            outer: while (parentFiber !== null) {
	              switch (parentFiber.tag) {
	                case HostRoot:
	                  var root = parentFiber.stateNode;
	                  root.passiveEffectDuration += passiveEffectDuration;
	                  break outer;

	                case Profiler:
	                  var parentStateNode = parentFiber.stateNode;
	                  parentStateNode.passiveEffectDuration += passiveEffectDuration;
	                  break outer;
	              }

	              parentFiber = parentFiber.return;
	            }

	            break;
	          }
	      }
	    }
	  }
	}

	function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
	  if ((finishedWork.flags & LayoutMask) !== NoFlags) {
	    switch (finishedWork.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          if ( !offscreenSubtreeWasHidden) {
	            // At this point layout effects have already been destroyed (during mutation phase).
	            // This is done to prevent sibling component effects from interfering with each other,
	            // e.g. a destroy function in one component should never override a ref set
	            // by a create function in another component during the same commit.
	            if ( finishedWork.mode & ProfileMode) {
	              try {
	                startLayoutEffectTimer();
	                commitHookEffectListMount(Layout | HasEffect, finishedWork);
	              } finally {
	                recordLayoutEffectDuration(finishedWork);
	              }
	            } else {
	              commitHookEffectListMount(Layout | HasEffect, finishedWork);
	            }
	          }

	          break;
	        }

	      case ClassComponent:
	        {
	          var instance = finishedWork.stateNode;

	          if (finishedWork.flags & Update) {
	            if (!offscreenSubtreeWasHidden) {
	              if (current === null) {
	                // We could update instance props and state here,
	                // but instead we rely on them being set during last render.
	                // TODO: revisit this when we implement resuming.
	                {
	                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                    if (instance.props !== finishedWork.memoizedProps) {
	                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                    }

	                    if (instance.state !== finishedWork.memoizedState) {
	                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                    }
	                  }
	                }

	                if ( finishedWork.mode & ProfileMode) {
	                  try {
	                    startLayoutEffectTimer();
	                    instance.componentDidMount();
	                  } finally {
	                    recordLayoutEffectDuration(finishedWork);
	                  }
	                } else {
	                  instance.componentDidMount();
	                }
	              } else {
	                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
	                var prevState = current.memoizedState; // We could update instance props and state here,
	                // but instead we rely on them being set during last render.
	                // TODO: revisit this when we implement resuming.

	                {
	                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                    if (instance.props !== finishedWork.memoizedProps) {
	                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                    }

	                    if (instance.state !== finishedWork.memoizedState) {
	                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                    }
	                  }
	                }

	                if ( finishedWork.mode & ProfileMode) {
	                  try {
	                    startLayoutEffectTimer();
	                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
	                  } finally {
	                    recordLayoutEffectDuration(finishedWork);
	                  }
	                } else {
	                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
	                }
	              }
	            }
	          } // TODO: I think this is now always non-null by the time it reaches the
	          // commit phase. Consider removing the type check.


	          var updateQueue = finishedWork.updateQueue;

	          if (updateQueue !== null) {
	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                }
	              }
	            } // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.


	            commitUpdateQueue(finishedWork, updateQueue, instance);
	          }

	          break;
	        }

	      case HostRoot:
	        {
	          // TODO: I think this is now always non-null by the time it reaches the
	          // commit phase. Consider removing the type check.
	          var _updateQueue = finishedWork.updateQueue;

	          if (_updateQueue !== null) {
	            var _instance = null;

	            if (finishedWork.child !== null) {
	              switch (finishedWork.child.tag) {
	                case HostComponent:
	                  _instance = getPublicInstance(finishedWork.child.stateNode);
	                  break;

	                case ClassComponent:
	                  _instance = finishedWork.child.stateNode;
	                  break;
	              }
	            }

	            commitUpdateQueue(finishedWork, _updateQueue, _instance);
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
	          // (eg DOM renderer may schedule auto-focus for inputs and form controls).
	          // These effects should only be committed when components are first mounted,
	          // aka when there is no current/alternate.

	          if (current === null && finishedWork.flags & Update) {
	            var type = finishedWork.type;
	            var props = finishedWork.memoizedProps;
	            commitMount(_instance2, type, props);
	          }

	          break;
	        }

	      case HostText:
	        {
	          // We have no life-cycles associated with text.
	          break;
	        }

	      case HostPortal:
	        {
	          // We have no life-cycles associated with portals.
	          break;
	        }

	      case Profiler:
	        {
	          {
	            var _finishedWork$memoize2 = finishedWork.memoizedProps,
	                onCommit = _finishedWork$memoize2.onCommit,
	                onRender = _finishedWork$memoize2.onRender;
	            var effectDuration = finishedWork.stateNode.effectDuration;
	            var commitTime = getCommitTime();
	            var phase = current === null ? 'mount' : 'update';

	            {
	              if (isCurrentUpdateNested()) {
	                phase = 'nested-update';
	              }
	            }

	            if (typeof onRender === 'function') {
	              onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);
	            }

	            {
	              if (typeof onCommit === 'function') {
	                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
	              } // Schedule a passive effect for this Profiler to call onPostCommit hooks.
	              // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
	              // because the effect is also where times bubble to parent Profilers.


	              enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.
	              // Do not reset these values until the next render so DevTools has a chance to read them first.

	              var parentFiber = finishedWork.return;

	              outer: while (parentFiber !== null) {
	                switch (parentFiber.tag) {
	                  case HostRoot:
	                    var root = parentFiber.stateNode;
	                    root.effectDuration += effectDuration;
	                    break outer;

	                  case Profiler:
	                    var parentStateNode = parentFiber.stateNode;
	                    parentStateNode.effectDuration += effectDuration;
	                    break outer;
	                }

	                parentFiber = parentFiber.return;
	              }
	            }
	          }

	          break;
	        }

	      case SuspenseComponent:
	        {
	          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
	          break;
	        }

	      case SuspenseListComponent:
	      case IncompleteClassComponent:
	      case ScopeComponent:
	      case OffscreenComponent:
	      case LegacyHiddenComponent:
	      case TracingMarkerComponent:
	        {
	          break;
	        }

	      default:
	        throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');
	    }
	  }

	  if ( !offscreenSubtreeWasHidden) {
	    {
	      if (finishedWork.flags & Ref) {
	        commitAttachRef(finishedWork);
	      }
	    }
	  }
	}

	function reappearLayoutEffectsOnFiber(node) {
	  // Turn on layout effects in a tree that previously disappeared.
	  // TODO (Offscreen) Check: flags & LayoutStatic
	  switch (node.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        if ( node.mode & ProfileMode) {
	          try {
	            startLayoutEffectTimer();
	            safelyCallCommitHookLayoutEffectListMount(node, node.return);
	          } finally {
	            recordLayoutEffectDuration(node);
	          }
	        } else {
	          safelyCallCommitHookLayoutEffectListMount(node, node.return);
	        }

	        break;
	      }

	    case ClassComponent:
	      {
	        var instance = node.stateNode;

	        if (typeof instance.componentDidMount === 'function') {
	          safelyCallComponentDidMount(node, node.return, instance);
	        }

	        safelyAttachRef(node, node.return);
	        break;
	      }

	    case HostComponent:
	      {
	        safelyAttachRef(node, node.return);
	        break;
	      }
	  }
	}

	function hideOrUnhideAllChildren(finishedWork, isHidden) {
	  // Only hide or unhide the top-most host nodes.
	  var hostSubtreeRoot = null;

	  {
	    // We only have the top Fiber that was inserted but we need to recurse down its
	    // children to find all the terminal nodes.
	    var node = finishedWork;

	    while (true) {
	      if (node.tag === HostComponent) {
	        if (hostSubtreeRoot === null) {
	          hostSubtreeRoot = node;

	          try {
	            var instance = node.stateNode;

	            if (isHidden) {
	              hideInstance(instance);
	            } else {
	              unhideInstance(node.stateNode, node.memoizedProps);
	            }
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }
	        }
	      } else if (node.tag === HostText) {
	        if (hostSubtreeRoot === null) {
	          try {
	            var _instance3 = node.stateNode;

	            if (isHidden) {
	              hideTextInstance(_instance3);
	            } else {
	              unhideTextInstance(_instance3, node.memoizedProps);
	            }
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }
	        }
	      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === finishedWork) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === finishedWork) {
	          return;
	        }

	        if (hostSubtreeRoot === node) {
	          hostSubtreeRoot = null;
	        }

	        node = node.return;
	      }

	      if (hostSubtreeRoot === node) {
	        hostSubtreeRoot = null;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }
	}

	function commitAttachRef(finishedWork) {
	  var ref = finishedWork.ref;

	  if (ref !== null) {
	    var instance = finishedWork.stateNode;
	    var instanceToUse;

	    switch (finishedWork.tag) {
	      case HostComponent:
	        instanceToUse = getPublicInstance(instance);
	        break;

	      default:
	        instanceToUse = instance;
	    } // Moved outside to ensure DCE works with this flag

	    if (typeof ref === 'function') {
	      var retVal;

	      if ( finishedWork.mode & ProfileMode) {
	        try {
	          startLayoutEffectTimer();
	          retVal = ref(instanceToUse);
	        } finally {
	          recordLayoutEffectDuration(finishedWork);
	        }
	      } else {
	        retVal = ref(instanceToUse);
	      }

	      {
	        if (typeof retVal === 'function') {
	          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));
	        }
	      }
	    } else {
	      {
	        if (!ref.hasOwnProperty('current')) {
	          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));
	        }
	      }

	      ref.current = instanceToUse;
	    }
	  }
	}

	function detachFiberMutation(fiber) {
	  // Cut off the return pointer to disconnect it from the tree.
	  // This enables us to detect and warn against state updates on an unmounted component.
	  // It also prevents events from bubbling from within disconnected components.
	  //
	  // Ideally, we should also clear the child pointer of the parent alternate to let this
	  // get GC:ed but we don't know which for sure which parent is the current
	  // one so we'll settle for GC:ing the subtree of this child.
	  // This child itself will be GC:ed when the parent updates the next time.
	  //
	  // Note that we can't clear child or sibling pointers yet.
	  // They're needed for passive effects and for findDOMNode.
	  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
	  //
	  // Don't reset the alternate yet, either. We need that so we can detach the
	  // alternate's fields in the passive phase. Clearing the return pointer is
	  // sufficient for findDOMNode semantics.
	  var alternate = fiber.alternate;

	  if (alternate !== null) {
	    alternate.return = null;
	  }

	  fiber.return = null;
	}

	function detachFiberAfterEffects(fiber) {
	  var alternate = fiber.alternate;

	  if (alternate !== null) {
	    fiber.alternate = null;
	    detachFiberAfterEffects(alternate);
	  } // Note: Defensively using negation instead of < in case
	  // `deletedTreeCleanUpLevel` is undefined.


	  {
	    // Clear cyclical Fiber fields. This level alone is designed to roughly
	    // approximate the planned Fiber refactor. In that world, `setState` will be
	    // bound to a special "instance" object instead of a Fiber. The Instance
	    // object will not have any of these fields. It will only be connected to
	    // the fiber tree via a single link at the root. So if this level alone is
	    // sufficient to fix memory issues, that bodes well for our plans.
	    fiber.child = null;
	    fiber.deletions = null;
	    fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host
	    // tree, which has its own pointers to children, parents, and siblings.
	    // The other host nodes also point back to fibers, so we should detach that
	    // one, too.

	    if (fiber.tag === HostComponent) {
	      var hostInstance = fiber.stateNode;

	      if (hostInstance !== null) {
	        detachDeletedInstance(hostInstance);
	      }
	    }

	    fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We
	    // already disconnect the `return` pointer at the root of the deleted
	    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not
	    // cyclical — it's only cyclical when combined with `child`, `sibling`, and
	    // `alternate`. But we'll clear it in the next level anyway, just in case.

	    {
	      fiber._debugOwner = null;
	    }

	    {
	      // Theoretically, nothing in here should be necessary, because we already
	      // disconnected the fiber from the tree. So even if something leaks this
	      // particular fiber, it won't leak anything else
	      //
	      // The purpose of this branch is to be super aggressive so we can measure
	      // if there's any difference in memory impact. If there is, that could
	      // indicate a React leak we don't know about.
	      fiber.return = null;
	      fiber.dependencies = null;
	      fiber.memoizedProps = null;
	      fiber.memoizedState = null;
	      fiber.pendingProps = null;
	      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.

	      fiber.updateQueue = null;
	    }
	  }
	}

	function getHostParentFiber(fiber) {
	  var parent = fiber.return;

	  while (parent !== null) {
	    if (isHostParent(parent)) {
	      return parent;
	    }

	    parent = parent.return;
	  }

	  throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');
	}

	function isHostParent(fiber) {
	  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
	}

	function getHostSibling(fiber) {
	  // We're going to search forward into the tree until we find a sibling host
	  // node. Unfortunately, if multiple insertions are done in a row we have to
	  // search past them. This leads to exponential search for the next sibling.
	  // TODO: Find a more efficient way to do this.
	  var node = fiber;

	  siblings: while (true) {
	    // If we didn't find anything, let's try the next sibling.
	    while (node.sibling === null) {
	      if (node.return === null || isHostParent(node.return)) {
	        // If we pop out of the root or hit the parent the fiber we are the
	        // last sibling.
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;

	    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
	      // If it is not host node and, we might have a host node inside it.
	      // Try to search down until we find one.
	      if (node.flags & Placement) {
	        // If we don't have a child, try the siblings instead.
	        continue siblings;
	      } // If we don't have a child, try the siblings instead.
	      // We also skip portals because they are not part of this host tree.


	      if (node.child === null || node.tag === HostPortal) {
	        continue siblings;
	      } else {
	        node.child.return = node;
	        node = node.child;
	      }
	    } // Check if this host node is stable or about to be placed.


	    if (!(node.flags & Placement)) {
	      // Found it!
	      return node.stateNode;
	    }
	  }
	}

	function commitPlacement(finishedWork) {


	  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

	  switch (parentFiber.tag) {
	    case HostComponent:
	      {
	        var parent = parentFiber.stateNode;

	        if (parentFiber.flags & ContentReset) {
	          // Reset the text content of the parent before doing any insertions
	          resetTextContent(parent); // Clear ContentReset from the effect tag

	          parentFiber.flags &= ~ContentReset;
	        }

	        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
	        // children to find all the terminal nodes.

	        insertOrAppendPlacementNode(finishedWork, before, parent);
	        break;
	      }

	    case HostRoot:
	    case HostPortal:
	      {
	        var _parent = parentFiber.stateNode.containerInfo;

	        var _before = getHostSibling(finishedWork);

	        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
	        break;
	      }
	    // eslint-disable-next-line-no-fallthrough

	    default:
	      throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');
	  }
	}

	function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
	  var tag = node.tag;
	  var isHost = tag === HostComponent || tag === HostText;

	  if (isHost) {
	    var stateNode = node.stateNode;

	    if (before) {
	      insertInContainerBefore(parent, stateNode, before);
	    } else {
	      appendChildToContainer(parent, stateNode);
	    }
	  } else if (tag === HostPortal) ; else {
	    var child = node.child;

	    if (child !== null) {
	      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
	      var sibling = child.sibling;

	      while (sibling !== null) {
	        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
	        sibling = sibling.sibling;
	      }
	    }
	  }
	}

	function insertOrAppendPlacementNode(node, before, parent) {
	  var tag = node.tag;
	  var isHost = tag === HostComponent || tag === HostText;

	  if (isHost) {
	    var stateNode = node.stateNode;

	    if (before) {
	      insertBefore(parent, stateNode, before);
	    } else {
	      appendChild(parent, stateNode);
	    }
	  } else if (tag === HostPortal) ; else {
	    var child = node.child;

	    if (child !== null) {
	      insertOrAppendPlacementNode(child, before, parent);
	      var sibling = child.sibling;

	      while (sibling !== null) {
	        insertOrAppendPlacementNode(sibling, before, parent);
	        sibling = sibling.sibling;
	      }
	    }
	  }
	} // These are tracked on the stack as we recursively traverse a
	// deleted subtree.
	// TODO: Update these during the whole mutation phase, not just during
	// a deletion.


	var hostParent = null;
	var hostParentIsContainer = false;

	function commitDeletionEffects(root, returnFiber, deletedFiber) {
	  {
	    // We only have the top Fiber that was deleted but we need to recurse down its
	    // children to find all the terminal nodes.
	    // Recursively delete all host nodes from the parent, detach refs, clean
	    // up mounted layout effects, and call componentWillUnmount.
	    // We only need to remove the topmost host child in each branch. But then we
	    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We
	    // could split this into two separate traversals functions, where the second
	    // one doesn't include any removeChild logic. This is maybe the same
	    // function as "disappearLayoutEffects" (or whatever that turns into after
	    // the layout phase is refactored to use recursion).
	    // Before starting, find the nearest host parent on the stack so we know
	    // which instance/container to remove the children from.
	    // TODO: Instead of searching up the fiber return path on every deletion, we
	    // can track the nearest host component on the JS stack as we traverse the
	    // tree during the commit phase. This would make insertions faster, too.
	    var parent = returnFiber;

	    findParent: while (parent !== null) {
	      switch (parent.tag) {
	        case HostComponent:
	          {
	            hostParent = parent.stateNode;
	            hostParentIsContainer = false;
	            break findParent;
	          }

	        case HostRoot:
	          {
	            hostParent = parent.stateNode.containerInfo;
	            hostParentIsContainer = true;
	            break findParent;
	          }

	        case HostPortal:
	          {
	            hostParent = parent.stateNode.containerInfo;
	            hostParentIsContainer = true;
	            break findParent;
	          }
	      }

	      parent = parent.return;
	    }

	    if (hostParent === null) {
	      throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');
	    }

	    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
	    hostParent = null;
	    hostParentIsContainer = false;
	  }

	  detachFiberMutation(deletedFiber);
	}

	function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
	  // TODO: Use a static flag to skip trees that don't have unmount effects
	  var child = parent.child;

	  while (child !== null) {
	    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
	    child = child.sibling;
	  }
	}

	function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
	  onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse
	  // into their subtree. There are simpler cases in the inner switch
	  // that don't modify the stack.

	  switch (deletedFiber.tag) {
	    case HostComponent:
	      {
	        if (!offscreenSubtreeWasHidden) {
	          safelyDetachRef(deletedFiber, nearestMountedAncestor);
	        } // Intentional fallthrough to next branch

	      }
	    // eslint-disable-next-line-no-fallthrough

	    case HostText:
	      {
	        // We only need to remove the nearest host child. Set the host parent
	        // to `null` on the stack to indicate that nested children don't
	        // need to be removed.
	        {
	          var prevHostParent = hostParent;
	          var prevHostParentIsContainer = hostParentIsContainer;
	          hostParent = null;
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	          hostParent = prevHostParent;
	          hostParentIsContainer = prevHostParentIsContainer;

	          if (hostParent !== null) {
	            // Now that all the child effects have unmounted, we can remove the
	            // node from the tree.
	            if (hostParentIsContainer) {
	              removeChildFromContainer(hostParent, deletedFiber.stateNode);
	            } else {
	              removeChild(hostParent, deletedFiber.stateNode);
	            }
	          }
	        }

	        return;
	      }

	    case DehydratedFragment:
	      {
	        // Delete the dehydrated suspense boundary and all of its content.


	        {
	          if (hostParent !== null) {
	            if (hostParentIsContainer) {
	              clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
	            } else {
	              clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
	            }
	          }
	        }

	        return;
	      }

	    case HostPortal:
	      {
	        {
	          // When we go into a portal, it becomes the parent to remove from.
	          var _prevHostParent = hostParent;
	          var _prevHostParentIsContainer = hostParentIsContainer;
	          hostParent = deletedFiber.stateNode.containerInfo;
	          hostParentIsContainer = true;
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	          hostParent = _prevHostParent;
	          hostParentIsContainer = _prevHostParentIsContainer;
	        }

	        return;
	      }

	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      {
	        if (!offscreenSubtreeWasHidden) {
	          var updateQueue = deletedFiber.updateQueue;

	          if (updateQueue !== null) {
	            var lastEffect = updateQueue.lastEffect;

	            if (lastEffect !== null) {
	              var firstEffect = lastEffect.next;
	              var effect = firstEffect;

	              do {
	                var _effect = effect,
	                    destroy = _effect.destroy,
	                    tag = _effect.tag;

	                if (destroy !== undefined) {
	                  if ((tag & Insertion) !== NoFlags$1) {
	                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
	                  } else if ((tag & Layout) !== NoFlags$1) {
	                    {
	                      markComponentLayoutEffectUnmountStarted(deletedFiber);
	                    }

	                    if ( deletedFiber.mode & ProfileMode) {
	                      startLayoutEffectTimer();
	                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
	                      recordLayoutEffectDuration(deletedFiber);
	                    } else {
	                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
	                    }

	                    {
	                      markComponentLayoutEffectUnmountStopped();
	                    }
	                  }
	                }

	                effect = effect.next;
	              } while (effect !== firstEffect);
	            }
	          }
	        }

	        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        return;
	      }

	    case ClassComponent:
	      {
	        if (!offscreenSubtreeWasHidden) {
	          safelyDetachRef(deletedFiber, nearestMountedAncestor);
	          var instance = deletedFiber.stateNode;

	          if (typeof instance.componentWillUnmount === 'function') {
	            safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
	          }
	        }

	        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        return;
	      }

	    case ScopeComponent:
	      {

	        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        return;
	      }

	    case OffscreenComponent:
	      {
	        if ( // TODO: Remove this dead flag
	         deletedFiber.mode & ConcurrentMode) {
	          // If this offscreen component is hidden, we already unmounted it. Before
	          // deleting the children, track that it's already unmounted so that we
	          // don't attempt to unmount the effects again.
	          // TODO: If the tree is hidden, in most cases we should be able to skip
	          // over the nested children entirely. An exception is we haven't yet found
	          // the topmost host node to delete, which we already track on the stack.
	          // But the other case is portals, which need to be detached no matter how
	          // deeply they are nested. We should use a subtree flag to track whether a
	          // subtree includes a nested portal.
	          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	        } else {
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        }

	        break;
	      }

	    default:
	      {
	        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        return;
	      }
	  }
	}

	function commitSuspenseCallback(finishedWork) {
	  // TODO: Move this to passive phase
	  finishedWork.memoizedState;
	}

	function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

	  var newState = finishedWork.memoizedState;

	  if (newState === null) {
	    var current = finishedWork.alternate;

	    if (current !== null) {
	      var prevState = current.memoizedState;

	      if (prevState !== null) {
	        var suspenseInstance = prevState.dehydrated;

	        if (suspenseInstance !== null) {
	          commitHydratedSuspenseInstance(suspenseInstance);
	        }
	      }
	    }
	  }
	}

	function attachSuspenseRetryListeners(finishedWork) {
	  // If this boundary just timed out, then it will have a set of wakeables.
	  // For each wakeable, attach a listener so that when it resolves, React
	  // attempts to re-render the boundary in the primary (pre-timeout) state.
	  var wakeables = finishedWork.updateQueue;

	  if (wakeables !== null) {
	    finishedWork.updateQueue = null;
	    var retryCache = finishedWork.stateNode;

	    if (retryCache === null) {
	      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
	    }

	    wakeables.forEach(function (wakeable) {
	      // Memoize using the boundary fiber to prevent redundant listeners.
	      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

	      if (!retryCache.has(wakeable)) {
	        retryCache.add(wakeable);

	        {
	          if (isDevToolsPresent) {
	            if (inProgressLanes !== null && inProgressRoot !== null) {
	              // If we have pending work still, associate the original updaters with it.
	              restorePendingUpdaters(inProgressRoot, inProgressLanes);
	            } else {
	              throw Error('Expected finished root and lanes to be set. This is a bug in React.');
	            }
	          }
	        }

	        wakeable.then(retry, retry);
	      }
	    });
	  }
	} // This function detects when a Suspense boundary goes from visible to hidden.
	function commitMutationEffects(root, finishedWork, committedLanes) {
	  inProgressLanes = committedLanes;
	  inProgressRoot = root;
	  setCurrentFiber(finishedWork);
	  commitMutationEffectsOnFiber(finishedWork, root);
	  setCurrentFiber(finishedWork);
	  inProgressLanes = null;
	  inProgressRoot = null;
	}

	function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {
	  // Deletions effects can be scheduled on any fiber type. They need to happen
	  // before the children effects hae fired.
	  var deletions = parentFiber.deletions;

	  if (deletions !== null) {
	    for (var i = 0; i < deletions.length; i++) {
	      var childToDelete = deletions[i];

	      try {
	        commitDeletionEffects(root, parentFiber, childToDelete);
	      } catch (error) {
	        captureCommitPhaseError(childToDelete, parentFiber, error);
	      }
	    }
	  }

	  var prevDebugFiber = getCurrentFiber();

	  if (parentFiber.subtreeFlags & MutationMask) {
	    var child = parentFiber.child;

	    while (child !== null) {
	      setCurrentFiber(child);
	      commitMutationEffectsOnFiber(child, root);
	      child = child.sibling;
	    }
	  }

	  setCurrentFiber(prevDebugFiber);
	}

	function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
	  var current = finishedWork.alternate;
	  var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,
	  // because the fiber tag is more specific. An exception is any flag related
	  // to reconcilation, because those can be set on all fiber types.

	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          try {
	            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
	            commitHookEffectListMount(Insertion | HasEffect, finishedWork);
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          } // Layout effects are destroyed during the mutation phase so that all
	          // destroy functions for all fibers are called before any create functions.
	          // This prevents sibling component effects from interfering with each other,
	          // e.g. a destroy function in one component should never override a ref set
	          // by a create function in another component during the same commit.


	          if ( finishedWork.mode & ProfileMode) {
	            try {
	              startLayoutEffectTimer();
	              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }

	            recordLayoutEffectDuration(finishedWork);
	          } else {
	            try {
	              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	        }

	        return;
	      }

	    case ClassComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Ref) {
	          if (current !== null) {
	            safelyDetachRef(current, current.return);
	          }
	        }

	        return;
	      }

	    case HostComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Ref) {
	          if (current !== null) {
	            safelyDetachRef(current, current.return);
	          }
	        }

	        {
	          // TODO: ContentReset gets cleared by the children during the commit
	          // phase. This is a refactor hazard because it means we must read
	          // flags the flags after `commitReconciliationEffects` has already run;
	          // the order matters. We should refactor so that ContentReset does not
	          // rely on mutating the flag during commit. Like by setting a flag
	          // during the render phase instead.
	          if (finishedWork.flags & ContentReset) {
	            var instance = finishedWork.stateNode;

	            try {
	              resetTextContent(instance);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }

	          if (flags & Update) {
	            var _instance4 = finishedWork.stateNode;

	            if (_instance4 != null) {
	              // Commit the work prepared earlier.
	              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	              // as the newProps. The updatePayload will contain the real change in
	              // this case.

	              var oldProps = current !== null ? current.memoizedProps : newProps;
	              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

	              var updatePayload = finishedWork.updateQueue;
	              finishedWork.updateQueue = null;

	              if (updatePayload !== null) {
	                try {
	                  commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
	                } catch (error) {
	                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
	                }
	              }
	            }
	          }
	        }

	        return;
	      }

	    case HostText:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          {
	            if (finishedWork.stateNode === null) {
	              throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');
	            }

	            var textInstance = finishedWork.stateNode;
	            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	            // as the newProps. The updatePayload will contain the real change in
	            // this case.

	            var oldText = current !== null ? current.memoizedProps : newText;

	            try {
	              commitTextUpdate(textInstance, oldText, newText);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	        }

	        return;
	      }

	    case HostRoot:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          {
	            if (current !== null) {
	              var prevRootState = current.memoizedState;

	              if (prevRootState.isDehydrated) {
	                try {
	                  commitHydratedContainer(root.containerInfo);
	                } catch (error) {
	                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
	                }
	              }
	            }
	          }
	        }

	        return;
	      }

	    case HostPortal:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        return;
	      }

	    case SuspenseComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);
	        var offscreenFiber = finishedWork.child;

	        if (offscreenFiber.flags & Visibility) {
	          var offscreenInstance = offscreenFiber.stateNode;
	          var newState = offscreenFiber.memoizedState;
	          var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can
	          // read it during an event

	          offscreenInstance.isHidden = isHidden;

	          if (isHidden) {
	            var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;

	            if (!wasHidden) {
	              // TODO: Move to passive phase
	              markCommitTimeOfFallback();
	            }
	          }
	        }

	        if (flags & Update) {
	          try {
	            commitSuspenseCallback(finishedWork);
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }

	          attachSuspenseRetryListeners(finishedWork);
	        }

	        return;
	      }

	    case OffscreenComponent:
	      {
	        var _wasHidden = current !== null && current.memoizedState !== null;

	        if ( // TODO: Remove this dead flag
	         finishedWork.mode & ConcurrentMode) {
	          // Before committing the children, track on the stack whether this
	          // offscreen subtree was already hidden, so that we don't unmount the
	          // effects again.
	          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	        } else {
	          recursivelyTraverseMutationEffects(root, finishedWork);
	        }

	        commitReconciliationEffects(finishedWork);

	        if (flags & Visibility) {
	          var _offscreenInstance = finishedWork.stateNode;
	          var _newState = finishedWork.memoizedState;

	          var _isHidden = _newState !== null;

	          var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can
	          // read it during an event

	          _offscreenInstance.isHidden = _isHidden;

	          {
	            if (_isHidden) {
	              if (!_wasHidden) {
	                if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
	                  nextEffect = offscreenBoundary;
	                  var offscreenChild = offscreenBoundary.child;

	                  while (offscreenChild !== null) {
	                    nextEffect = offscreenChild;
	                    disappearLayoutEffects_begin(offscreenChild);
	                    offscreenChild = offscreenChild.sibling;
	                  }
	                }
	              }
	            }
	          }

	          {
	            // TODO: This needs to run whenever there's an insertion or update
	            // inside a hidden Offscreen tree.
	            hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
	          }
	        }

	        return;
	      }

	    case SuspenseListComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          attachSuspenseRetryListeners(finishedWork);
	        }

	        return;
	      }

	    case ScopeComponent:
	      {

	        return;
	      }

	    default:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);
	        return;
	      }
	  }
	}

	function commitReconciliationEffects(finishedWork) {
	  // Placement effects (insertions, reorders) can be scheduled on any fiber
	  // type. They needs to happen after the children effects have fired, but
	  // before the effects on this fiber have fired.
	  var flags = finishedWork.flags;

	  if (flags & Placement) {
	    try {
	      commitPlacement(finishedWork);
	    } catch (error) {
	      captureCommitPhaseError(finishedWork, finishedWork.return, error);
	    } // Clear the "placement" from effect tag so that we know that this is
	    // inserted, before any life-cycles like componentDidMount gets called.
	    // TODO: findDOMNode doesn't rely on this any more but isMounted does
	    // and isMounted is deprecated anyway so we should be able to kill this.


	    finishedWork.flags &= ~Placement;
	  }

	  if (flags & Hydrating) {
	    finishedWork.flags &= ~Hydrating;
	  }
	}

	function commitLayoutEffects(finishedWork, root, committedLanes) {
	  inProgressLanes = committedLanes;
	  inProgressRoot = root;
	  nextEffect = finishedWork;
	  commitLayoutEffects_begin(finishedWork, root, committedLanes);
	  inProgressLanes = null;
	  inProgressRoot = null;
	}

	function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
	  // Suspense layout effects semantics don't change for legacy roots.
	  var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;

	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var firstChild = fiber.child;

	    if ( fiber.tag === OffscreenComponent && isModernRoot) {
	      // Keep track of the current Offscreen stack's state.
	      var isHidden = fiber.memoizedState !== null;
	      var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;

	      if (newOffscreenSubtreeIsHidden) {
	        // The Offscreen tree is hidden. Skip over its layout effects.
	        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
	        continue;
	      } else {
	        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask
	        var current = fiber.alternate;
	        var wasHidden = current !== null && current.memoizedState !== null;
	        var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
	        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
	        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.

	        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
	        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;

	        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
	          // This is the root of a reappearing boundary. Turn its layout effects
	          // back on.
	          nextEffect = fiber;
	          reappearLayoutEffects_begin(fiber);
	        }

	        var child = firstChild;

	        while (child !== null) {
	          nextEffect = child;
	          commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.
	          root, committedLanes);
	          child = child.sibling;
	        } // Restore Offscreen state and resume in our-progress traversal.


	        nextEffect = fiber;
	        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
	        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
	        continue;
	      }
	    }

	    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
	      firstChild.return = fiber;
	      nextEffect = firstChild;
	    } else {
	      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
	    }
	  }
	}

	function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;

	    if ((fiber.flags & LayoutMask) !== NoFlags) {
	      var current = fiber.alternate;
	      setCurrentFiber(fiber);

	      try {
	        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
	      } catch (error) {
	        captureCommitPhaseError(fiber, fiber.return, error);
	      }

	      resetCurrentFiber();
	    }

	    if (fiber === subtreeRoot) {
	      nextEffect = null;
	      return;
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function disappearLayoutEffects_begin(subtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)

	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case MemoComponent:
	      case SimpleMemoComponent:
	        {
	          if ( fiber.mode & ProfileMode) {
	            try {
	              startLayoutEffectTimer();
	              commitHookEffectListUnmount(Layout, fiber, fiber.return);
	            } finally {
	              recordLayoutEffectDuration(fiber);
	            }
	          } else {
	            commitHookEffectListUnmount(Layout, fiber, fiber.return);
	          }

	          break;
	        }

	      case ClassComponent:
	        {
	          // TODO (Offscreen) Check: flags & RefStatic
	          safelyDetachRef(fiber, fiber.return);
	          var instance = fiber.stateNode;

	          if (typeof instance.componentWillUnmount === 'function') {
	            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          safelyDetachRef(fiber, fiber.return);
	          break;
	        }

	      case OffscreenComponent:
	        {
	          // Check if this is a
	          var isHidden = fiber.memoizedState !== null;

	          if (isHidden) {
	            // Nested Offscreen tree is already hidden. Don't disappear
	            // its effects.
	            disappearLayoutEffects_complete(subtreeRoot);
	            continue;
	          }

	          break;
	        }
	    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic


	    if (firstChild !== null) {
	      firstChild.return = fiber;
	      nextEffect = firstChild;
	    } else {
	      disappearLayoutEffects_complete(subtreeRoot);
	    }
	  }
	}

	function disappearLayoutEffects_complete(subtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;

	    if (fiber === subtreeRoot) {
	      nextEffect = null;
	      return;
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function reappearLayoutEffects_begin(subtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var firstChild = fiber.child;

	    if (fiber.tag === OffscreenComponent) {
	      var isHidden = fiber.memoizedState !== null;

	      if (isHidden) {
	        // Nested Offscreen tree is still hidden. Don't re-appear its effects.
	        reappearLayoutEffects_complete(subtreeRoot);
	        continue;
	      }
	    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic


	    if (firstChild !== null) {
	      // This node may have been reused from a previous render, so we can't
	      // assume its return pointer is correct.
	      firstChild.return = fiber;
	      nextEffect = firstChild;
	    } else {
	      reappearLayoutEffects_complete(subtreeRoot);
	    }
	  }
	}

	function reappearLayoutEffects_complete(subtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic

	    setCurrentFiber(fiber);

	    try {
	      reappearLayoutEffectsOnFiber(fiber);
	    } catch (error) {
	      captureCommitPhaseError(fiber, fiber.return, error);
	    }

	    resetCurrentFiber();

	    if (fiber === subtreeRoot) {
	      nextEffect = null;
	      return;
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      // This node may have been reused from a previous render, so we can't
	      // assume its return pointer is correct.
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {
	  nextEffect = finishedWork;
	  commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);
	}

	function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var firstChild = fiber.child;

	    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
	      firstChild.return = fiber;
	      nextEffect = firstChild;
	    } else {
	      commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);
	    }
	  }
	}

	function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;

	    if ((fiber.flags & Passive) !== NoFlags) {
	      setCurrentFiber(fiber);

	      try {
	        commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);
	      } catch (error) {
	        captureCommitPhaseError(fiber, fiber.return, error);
	      }

	      resetCurrentFiber();
	    }

	    if (fiber === subtreeRoot) {
	      nextEffect = null;
	      return;
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        if ( finishedWork.mode & ProfileMode) {
	          startPassiveEffectTimer();

	          try {
	            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
	          } finally {
	            recordPassiveEffectDuration(finishedWork);
	          }
	        } else {
	          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
	        }

	        break;
	      }
	  }
	}

	function commitPassiveUnmountEffects(firstChild) {
	  nextEffect = firstChild;
	  commitPassiveUnmountEffects_begin();
	}

	function commitPassiveUnmountEffects_begin() {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var child = fiber.child;

	    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
	      var deletions = fiber.deletions;

	      if (deletions !== null) {
	        for (var i = 0; i < deletions.length; i++) {
	          var fiberToDelete = deletions[i];
	          nextEffect = fiberToDelete;
	          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
	        }

	        {
	          // A fiber was deleted from this parent fiber, but it's still part of
	          // the previous (alternate) parent fiber's list of children. Because
	          // children are a linked list, an earlier sibling that's still alive
	          // will be connected to the deleted fiber via its `alternate`:
	          //
	          //   live fiber
	          //   --alternate--> previous live fiber
	          //   --sibling--> deleted fiber
	          //
	          // We can't disconnect `alternate` on nodes that haven't been deleted
	          // yet, but we can disconnect the `sibling` and `child` pointers.
	          var previousFiber = fiber.alternate;

	          if (previousFiber !== null) {
	            var detachedChild = previousFiber.child;

	            if (detachedChild !== null) {
	              previousFiber.child = null;

	              do {
	                var detachedSibling = detachedChild.sibling;
	                detachedChild.sibling = null;
	                detachedChild = detachedSibling;
	              } while (detachedChild !== null);
	            }
	          }
	        }

	        nextEffect = fiber;
	      }
	    }

	    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
	      child.return = fiber;
	      nextEffect = child;
	    } else {
	      commitPassiveUnmountEffects_complete();
	    }
	  }
	}

	function commitPassiveUnmountEffects_complete() {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;

	    if ((fiber.flags & Passive) !== NoFlags) {
	      setCurrentFiber(fiber);
	      commitPassiveUnmountOnFiber(fiber);
	      resetCurrentFiber();
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function commitPassiveUnmountOnFiber(finishedWork) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        if ( finishedWork.mode & ProfileMode) {
	          startPassiveEffectTimer();
	          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
	          recordPassiveEffectDuration(finishedWork);
	        } else {
	          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
	        }

	        break;
	      }
	  }
	}

	function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect; // Deletion effects fire in parent -> child order
	    // TODO: Check if fiber has a PassiveStatic flag

	    setCurrentFiber(fiber);
	    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
	    resetCurrentFiber();
	    var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
	    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)

	    if (child !== null) {
	      child.return = fiber;
	      nextEffect = child;
	    } else {
	      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
	    }
	  }
	}

	function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var sibling = fiber.sibling;
	    var returnFiber = fiber.return;

	    {
	      // Recursively traverse the entire deleted tree and clean up fiber fields.
	      // This is more aggressive than ideal, and the long term goal is to only
	      // have to detach the deleted tree at the root.
	      detachFiberAfterEffects(fiber);

	      if (fiber === deletedSubtreeRoot) {
	        nextEffect = null;
	        return;
	      }
	    }

	    if (sibling !== null) {
	      sibling.return = returnFiber;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = returnFiber;
	  }
	}

	function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
	  switch (current.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        if ( current.mode & ProfileMode) {
	          startPassiveEffectTimer();
	          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
	          recordPassiveEffectDuration(current);
	        } else {
	          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
	        }

	        break;
	      }
	  }
	} // TODO: Reuse reappearLayoutEffects traversal here?


	function invokeLayoutEffectMountInDEV(fiber) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          try {
	            commitHookEffectListMount(Layout | HasEffect, fiber);
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }

	          break;
	        }

	      case ClassComponent:
	        {
	          var instance = fiber.stateNode;

	          try {
	            instance.componentDidMount();
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }

	          break;
	        }
	    }
	  }
	}

	function invokePassiveEffectMountInDEV(fiber) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          try {
	            commitHookEffectListMount(Passive$1 | HasEffect, fiber);
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }

	          break;
	        }
	    }
	  }
	}

	function invokeLayoutEffectUnmountInDEV(fiber) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          try {
	            commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }

	          break;
	        }

	      case ClassComponent:
	        {
	          var instance = fiber.stateNode;

	          if (typeof instance.componentWillUnmount === 'function') {
	            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
	          }

	          break;
	        }
	    }
	  }
	}

	function invokePassiveEffectUnmountInDEV(fiber) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          try {
	            commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }
	        }
	    }
	  }
	}

	if (typeof Symbol === 'function' && Symbol.for) {
	  var symbolFor = Symbol.for;
	  symbolFor('selector.component');
	  symbolFor('selector.has_pseudo_class');
	  symbolFor('selector.role');
	  symbolFor('selector.test_id');
	  symbolFor('selector.text');
	}
	var commitHooks = [];
	function onCommitRoot$1() {
	  {
	    commitHooks.forEach(function (commitHook) {
	      return commitHook();
	    });
	  }
	}

	var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
	function isLegacyActEnvironment(fiber) {
	  {
	    // Legacy mode. We preserve the behavior of React 17's act. It assumes an
	    // act environment whenever `jest` is defined, but you can still turn off
	    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
	    // to false.
	    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
	    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest

	    var jestIsDefined = typeof jest !== 'undefined';
	    return  jestIsDefined && isReactActEnvironmentGlobal !== false;
	  }
	}
	function isConcurrentActEnvironment() {
	  {
	    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
	    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;

	    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
	      // TODO: Include link to relevant documentation page.
	      error('The current testing environment is not configured to support ' + 'act(...)');
	    }

	    return isReactActEnvironmentGlobal;
	  }
	}

	var ceil = Math.ceil;
	var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
	    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
	    ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig,
	    ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
	var NoContext =
	/*             */
	0;
	var BatchedContext =
	/*               */
	1;
	var RenderContext =
	/*                */
	2;
	var CommitContext =
	/*                */
	4;
	var RootInProgress = 0;
	var RootFatalErrored = 1;
	var RootErrored = 2;
	var RootSuspended = 3;
	var RootSuspendedWithDelay = 4;
	var RootCompleted = 5;
	var RootDidNotComplete = 6; // Describes where we are in the React execution stack

	var executionContext = NoContext; // The root we're working on

	var workInProgressRoot = null; // The fiber we're working on

	var workInProgress = null; // The lanes we're rendering

	var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
	// This is a superset of the lanes we started working on at the root. The only
	// case where it's different from `workInProgressRootRenderLanes` is when we
	// enter a subtree that is hidden and needs to be unhidden: Suspense and
	// Offscreen component.
	//
	// Most things in the work loop should deal with workInProgressRootRenderLanes.
	// Most things in begin/complete phases should deal with subtreeRenderLanes.

	var subtreeRenderLanes = NoLanes;
	var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

	var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown

	var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
	// includes unprocessed updates, not work in bailed out children.

	var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

	var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).

	var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.

	var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.
	// We will log them once the tree commits.

	var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train
	// model where we don't commit new loading states in too quick succession.

	var globalMostRecentFallbackTime = 0;
	var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
	// more and prefer CPU suspense heuristics instead.

	var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
	// suspense heuristics and opt out of rendering more content.

	var RENDER_TIMEOUT_MS = 500;
	var workInProgressTransitions = null;

	function resetRenderTimer() {
	  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
	}

	function getRenderTargetTime() {
	  return workInProgressRootRenderTargetTime;
	}
	var hasUncaughtError = false;
	var firstUncaughtError = null;
	var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;
	var rootDoesHavePassiveEffects = false;
	var rootWithPendingPassiveEffects = null;
	var pendingPassiveEffectsLanes = NoLanes;
	var pendingPassiveProfilerEffects = [];
	var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates

	var NESTED_UPDATE_LIMIT = 50;
	var nestedUpdateCount = 0;
	var rootWithNestedUpdates = null;
	var isFlushingPassiveEffects = false;
	var didScheduleUpdateDuringPassiveEffects = false;
	var NESTED_PASSIVE_UPDATE_LIMIT = 50;
	var nestedPassiveUpdateCount = 0;
	var rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their
	// event times as simultaneous, even if the actual clock time has advanced
	// between the first and second call.

	var currentEventTime = NoTimestamp;
	var currentEventTransitionLane = NoLanes;
	var isRunningInsertionEffect = false;
	function getWorkInProgressRoot() {
	  return workInProgressRoot;
	}
	function requestEventTime() {
	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    // We're inside React, so it's fine to read the actual time.
	    return now();
	  } // We're not inside React, so we may be in the middle of a browser event.


	  if (currentEventTime !== NoTimestamp) {
	    // Use the same start time for all updates until we enter React again.
	    return currentEventTime;
	  } // This is the first update since React yielded. Compute a new start time.


	  currentEventTime = now();
	  return currentEventTime;
	}
	function requestUpdateLane(fiber) {
	  // Special cases
	  var mode = fiber.mode;

	  if ((mode & ConcurrentMode) === NoMode) {
	    return SyncLane;
	  } else if ( (executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
	    // This is a render phase update. These are not officially supported. The
	    // old behavior is to give this the same "thread" (lanes) as
	    // whatever is currently rendering. So if you call `setState` on a component
	    // that happens later in the same render, it will flush. Ideally, we want to
	    // remove the special case and treat them as if they came from an
	    // interleaved event. Regardless, this pattern is not officially supported.
	    // This behavior is only a fallback. The flag only exists until we can roll
	    // out the setState warning, since existing code might accidentally rely on
	    // the current behavior.
	    return pickArbitraryLane(workInProgressRootRenderLanes);
	  }

	  var isTransition = requestCurrentTransition() !== NoTransition;

	  if (isTransition) {
	    if ( ReactCurrentBatchConfig$3.transition !== null) {
	      var transition = ReactCurrentBatchConfig$3.transition;

	      if (!transition._updatedFibers) {
	        transition._updatedFibers = new Set();
	      }

	      transition._updatedFibers.add(fiber);
	    } // The algorithm for assigning an update to a lane should be stable for all
	    // updates at the same priority within the same event. To do this, the
	    // inputs to the algorithm must be the same.
	    //
	    // The trick we use is to cache the first of each of these inputs within an
	    // event. Then reset the cached values once we can be sure the event is
	    // over. Our heuristic for that is whenever we enter a concurrent work loop.


	    if (currentEventTransitionLane === NoLane) {
	      // All transitions within the same event are assigned the same lane.
	      currentEventTransitionLane = claimNextTransitionLane();
	    }

	    return currentEventTransitionLane;
	  } // Updates originating inside certain React methods, like flushSync, have
	  // their priority set by tracking it with a context variable.
	  //
	  // The opaque type returned by the host config is internally a lane, so we can
	  // use that directly.
	  // TODO: Move this type conversion to the event priority module.


	  var updateLane = getCurrentUpdatePriority();

	  if (updateLane !== NoLane) {
	    return updateLane;
	  } // This update originated outside React. Ask the host environment for an
	  // appropriate priority, based on the type of event.
	  //
	  // The opaque type returned by the host config is internally a lane, so we can
	  // use that directly.
	  // TODO: Move this type conversion to the event priority module.


	  var eventLane = getCurrentEventPriority();
	  return eventLane;
	}

	function requestRetryLane(fiber) {
	  // This is a fork of `requestUpdateLane` designed specifically for Suspense
	  // "retries" — a special update that attempts to flip a Suspense boundary
	  // from its placeholder state to its primary/resolved state.
	  // Special cases
	  var mode = fiber.mode;

	  if ((mode & ConcurrentMode) === NoMode) {
	    return SyncLane;
	  }

	  return claimNextRetryLane();
	}

	function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
	  checkForNestedUpdates();

	  {
	    if (isRunningInsertionEffect) {
	      error('useInsertionEffect must not schedule updates.');
	    }
	  }

	  {
	    if (isFlushingPassiveEffects) {
	      didScheduleUpdateDuringPassiveEffects = true;
	    }
	  } // Mark that the root has a pending update.


	  markRootUpdated(root, lane, eventTime);

	  if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {
	    // This update was dispatched during the render phase. This is a mistake
	    // if the update originates from user space (with the exception of local
	    // hook updates, which are handled differently and don't reach this
	    // function), but there are some internal React features that use this as
	    // an implementation detail, like selective hydration.
	    warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase
	  } else {
	    // This is a normal update, scheduled from outside the render phase. For
	    // example, during an input event.
	    {
	      if (isDevToolsPresent) {
	        addFiberToLanesMap(root, fiber, lane);
	      }
	    }

	    warnIfUpdatesNotWrappedWithActDEV(fiber);

	    if (root === workInProgressRoot) {
	      // Received an update to a tree that's in the middle of rendering. Mark
	      // that there was an interleaved update work on this root. Unless the
	      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
	      // phase update. In that case, we don't treat render phase updates as if
	      // they were interleaved, for backwards compat reasons.
	      if ( (executionContext & RenderContext) === NoContext) {
	        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
	      }

	      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
	        // The root already suspended with a delay, which means this render
	        // definitely won't finish. Since we have a new update, let's mark it as
	        // suspended now, right before marking the incoming update. This has the
	        // effect of interrupting the current render and switching to the update.
	        // TODO: Make sure this doesn't override pings that happen while we've
	        // already started rendering.
	        markRootSuspended$1(root, workInProgressRootRenderLanes);
	      }
	    }

	    ensureRootIsScheduled(root, eventTime);

	    if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
	    !( ReactCurrentActQueue$1.isBatchingLegacy)) {
	      // Flush the synchronous work now, unless we're already working or inside
	      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
	      // scheduleCallbackForFiber to preserve the ability to schedule a callback
	      // without immediately flushing it. We only do this for user-initiated
	      // updates, to preserve historical behavior of legacy mode.
	      resetRenderTimer();
	      flushSyncCallbacksOnlyInLegacyMode();
	    }
	  }
	}
	function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
	  // This is a special fork of scheduleUpdateOnFiber that is only used to
	  // schedule the initial hydration of a root that has just been created. Most
	  // of the stuff in scheduleUpdateOnFiber can be skipped.
	  //
	  // The main reason for this separate path, though, is to distinguish the
	  // initial children from subsequent updates. In fully client-rendered roots
	  // (createRoot instead of hydrateRoot), all top-level renders are modeled as
	  // updates, but hydration roots are special because the initial render must
	  // match what was rendered on the server.
	  var current = root.current;
	  current.lanes = lane;
	  markRootUpdated(root, lane, eventTime);
	  ensureRootIsScheduled(root, eventTime);
	}
	function isUnsafeClassRenderPhaseUpdate(fiber) {
	  // Check if this is a render phase update. Only called by class components,
	  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.
	  return (// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
	    // decided not to enable it.
	     (executionContext & RenderContext) !== NoContext
	  );
	} // Use this function to schedule a task for a root. There's only one task per
	// root; if a task was already scheduled, we'll check to make sure the priority
	// of the existing task is the same as the priority of the next level that the
	// root has work on. This function is called on every update, and right before
	// exiting a task.

	function ensureRootIsScheduled(root, currentTime) {
	  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
	  // expired so we know to work on those next.

	  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

	  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

	  if (nextLanes === NoLanes) {
	    // Special case: There's nothing to work on.
	    if (existingCallbackNode !== null) {
	      cancelCallback$1(existingCallbackNode);
	    }

	    root.callbackNode = null;
	    root.callbackPriority = NoLane;
	    return;
	  } // We use the highest priority lane to represent the priority of the callback.


	  var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.

	  var existingCallbackPriority = root.callbackPriority;

	  if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
	  // Scheduler task, rather than an `act` task, cancel it and re-scheduled
	  // on the `act` queue.
	  !( ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
	    {
	      // If we're going to re-use an existing task, it needs to exist.
	      // Assume that discrete update microtasks are non-cancellable and null.
	      // TODO: Temporary until we confirm this warning is not fired.
	      if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
	        error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');
	      }
	    } // The priority hasn't changed. We can reuse the existing task. Exit.


	    return;
	  }

	  if (existingCallbackNode != null) {
	    // Cancel the existing callback. We'll schedule a new one below.
	    cancelCallback$1(existingCallbackNode);
	  } // Schedule a new callback.


	  var newCallbackNode;

	  if (newCallbackPriority === SyncLane) {
	    // Special case: Sync React callbacks are scheduled on a special
	    // internal queue
	    if (root.tag === LegacyRoot) {
	      if ( ReactCurrentActQueue$1.isBatchingLegacy !== null) {
	        ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
	      }

	      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
	    } else {
	      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
	    }

	    {
	      // Flush the queue in a microtask.
	      if ( ReactCurrentActQueue$1.current !== null) {
	        // Inside `act`, use our internal `act` queue so that these get flushed
	        // at the end of the current scope even when using the sync version
	        // of `act`.
	        ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
	      } else {
	        scheduleMicrotask(function () {
	          // In Safari, appending an iframe forces microtasks to run.
	          // https://github.com/facebook/react/issues/22459
	          // We don't support running callbacks in the middle of render
	          // or commit so we need to check against that.
	          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
	            // Note that this would still prematurely flush the callbacks
	            // if this happens outside render or commit phase (e.g. in an event).
	            flushSyncCallbacks();
	          }
	        });
	      }
	    }

	    newCallbackNode = null;
	  } else {
	    var schedulerPriorityLevel;

	    switch (lanesToEventPriority(nextLanes)) {
	      case DiscreteEventPriority:
	        schedulerPriorityLevel = ImmediatePriority;
	        break;

	      case ContinuousEventPriority:
	        schedulerPriorityLevel = UserBlockingPriority;
	        break;

	      case DefaultEventPriority:
	        schedulerPriorityLevel = NormalPriority;
	        break;

	      case IdleEventPriority:
	        schedulerPriorityLevel = IdlePriority;
	        break;

	      default:
	        schedulerPriorityLevel = NormalPriority;
	        break;
	    }

	    newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
	  }

	  root.callbackPriority = newCallbackPriority;
	  root.callbackNode = newCallbackNode;
	} // This is the entry point for every concurrent task, i.e. anything that
	// goes through Scheduler.


	function performConcurrentWorkOnRoot(root, didTimeout) {
	  {
	    resetNestedUpdateFlag();
	  } // Since we know we're in a React event, we can clear the current
	  // event time. The next update will compute a new event time.


	  currentEventTime = NoTimestamp;
	  currentEventTransitionLane = NoLanes;

	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    throw new Error('Should not already be working.');
	  } // Flush any pending passive effects before deciding which lanes to work on,
	  // in case they schedule additional work.


	  var originalCallbackNode = root.callbackNode;
	  var didFlushPassiveEffects = flushPassiveEffects();

	  if (didFlushPassiveEffects) {
	    // Something in the passive effect phase may have canceled the current task.
	    // Check if the task node for this root was changed.
	    if (root.callbackNode !== originalCallbackNode) {
	      // The current task was canceled. Exit. We don't need to call
	      // `ensureRootIsScheduled` because the check above implies either that
	      // there's a new task, or that there's no remaining work on this root.
	      return null;
	    }
	  } // Determine the next lanes to work on, using the fields stored
	  // on the root.


	  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

	  if (lanes === NoLanes) {
	    // Defensive coding. This is never expected to happen.
	    return null;
	  } // We disable time-slicing in some cases: if the work has been CPU-bound
	  // for too long ("expired" work, to prevent starvation), or we're in
	  // sync-updates-by-default mode.
	  // TODO: We only check `didTimeout` defensively, to account for a Scheduler
	  // bug we're still investigating. Once the bug in Scheduler is fixed,
	  // we can remove this, since we track expiration ourselves.


	  var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && ( !didTimeout);
	  var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);

	  if (exitStatus !== RootInProgress) {
	    if (exitStatus === RootErrored) {
	      // If something threw an error, try rendering one more time. We'll
	      // render synchronously to block concurrent data mutations, and we'll
	      // includes all pending updates are included. If it still fails after
	      // the second attempt, we'll give up and commit the resulting tree.
	      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

	      if (errorRetryLanes !== NoLanes) {
	        lanes = errorRetryLanes;
	        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
	      }
	    }

	    if (exitStatus === RootFatalErrored) {
	      var fatalError = workInProgressRootFatalError;
	      prepareFreshStack(root, NoLanes);
	      markRootSuspended$1(root, lanes);
	      ensureRootIsScheduled(root, now());
	      throw fatalError;
	    }

	    if (exitStatus === RootDidNotComplete) {
	      // The render unwound without completing the tree. This happens in special
	      // cases where need to exit the current render without producing a
	      // consistent tree or committing.
	      //
	      // This should only happen during a concurrent render, not a discrete or
	      // synchronous update. We should have already checked for this when we
	      // unwound the stack.
	      markRootSuspended$1(root, lanes);
	    } else {
	      // The render completed.
	      // Check if this render may have yielded to a concurrent event, and if so,
	      // confirm that any newly rendered stores are consistent.
	      // TODO: It's possible that even a concurrent render may never have yielded
	      // to the main thread, if it was fast enough, or if it expired. We could
	      // skip the consistency check in that case, too.
	      var renderWasConcurrent = !includesBlockingLane(root, lanes);
	      var finishedWork = root.current.alternate;

	      if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
	        // A store was mutated in an interleaved event. Render again,
	        // synchronously, to block further mutations.
	        exitStatus = renderRootSync(root, lanes); // We need to check again if something threw

	        if (exitStatus === RootErrored) {
	          var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

	          if (_errorRetryLanes !== NoLanes) {
	            lanes = _errorRetryLanes;
	            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any
	            // concurrent events.
	          }
	        }

	        if (exitStatus === RootFatalErrored) {
	          var _fatalError = workInProgressRootFatalError;
	          prepareFreshStack(root, NoLanes);
	          markRootSuspended$1(root, lanes);
	          ensureRootIsScheduled(root, now());
	          throw _fatalError;
	        }
	      } // We now have a consistent tree. The next step is either to commit it,
	      // or, if something suspended, wait to commit it after a timeout.


	      root.finishedWork = finishedWork;
	      root.finishedLanes = lanes;
	      finishConcurrentRender(root, exitStatus, lanes);
	    }
	  }

	  ensureRootIsScheduled(root, now());

	  if (root.callbackNode === originalCallbackNode) {
	    // The task node scheduled for this root is the same one that's
	    // currently executed. Need to return a continuation.
	    return performConcurrentWorkOnRoot.bind(null, root);
	  }

	  return null;
	}

	function recoverFromConcurrentError(root, errorRetryLanes) {
	  // If an error occurred during hydration, discard server response and fall
	  // back to client side render.
	  // Before rendering again, save the errors from the previous attempt.
	  var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;

	  if (isRootDehydrated(root)) {
	    // The shell failed to hydrate. Set a flag to force a client rendering
	    // during the next attempt. To do this, we call prepareFreshStack now
	    // to create the root work-in-progress fiber. This is a bit weird in terms
	    // of factoring, because it relies on renderRootSync not calling
	    // prepareFreshStack again in the call below, which happens because the
	    // root and lanes haven't changed.
	    //
	    // TODO: I think what we should do is set ForceClientRender inside
	    // throwException, like we do for nested Suspense boundaries. The reason
	    // it's here instead is so we can switch to the synchronous work loop, too.
	    // Something to consider for a future refactor.
	    var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
	    rootWorkInProgress.flags |= ForceClientRender;

	    {
	      errorHydratingContainer(root.containerInfo);
	    }
	  }

	  var exitStatus = renderRootSync(root, errorRetryLanes);

	  if (exitStatus !== RootErrored) {
	    // Successfully finished rendering on retry
	    // The errors from the failed first attempt have been recovered. Add
	    // them to the collection of recoverable errors. We'll log them in the
	    // commit phase.
	    var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
	    workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors
	    // from the first attempt, to preserve the causal sequence.

	    if (errorsFromSecondAttempt !== null) {
	      queueRecoverableErrors(errorsFromSecondAttempt);
	    }
	  }

	  return exitStatus;
	}

	function queueRecoverableErrors(errors) {
	  if (workInProgressRootRecoverableErrors === null) {
	    workInProgressRootRecoverableErrors = errors;
	  } else {
	    workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
	  }
	}

	function finishConcurrentRender(root, exitStatus, lanes) {
	  switch (exitStatus) {
	    case RootInProgress:
	    case RootFatalErrored:
	      {
	        throw new Error('Root did not complete. This is a bug in React.');
	      }
	    // Flow knows about invariant, so it complains if I add a break
	    // statement, but eslint doesn't know about invariant, so it complains
	    // if I do. eslint-disable-next-line no-fallthrough

	    case RootErrored:
	      {
	        // We should have already attempted to retry this tree. If we reached
	        // this point, it errored again. Commit it.
	        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
	        break;
	      }

	    case RootSuspended:
	      {
	        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
	        // should immediately commit it or wait a bit.

	        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
	        !shouldForceFlushFallbacksInDEV()) {
	          // This render only included retries, no updates. Throttle committing
	          // retries so that we don't show too many loading states too quickly.
	          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

	          if (msUntilTimeout > 10) {
	            var nextLanes = getNextLanes(root, NoLanes);

	            if (nextLanes !== NoLanes) {
	              // There's additional work on this root.
	              break;
	            }

	            var suspendedLanes = root.suspendedLanes;

	            if (!isSubsetOfLanes(suspendedLanes, lanes)) {
	              // We should prefer to render the fallback of at the last
	              // suspended level. Ping the last suspended level to try
	              // rendering it again.
	              // FIXME: What if the suspended lanes are Idle? Should not restart.
	              requestEventTime();
	              markRootPinged(root, suspendedLanes);
	              break;
	            } // The render is suspended, it hasn't timed out, and there's no
	            // lower priority work to do. Instead of committing the fallback
	            // immediately, wait for more data to arrive.


	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
	            break;
	          }
	        } // The work expired. Commit immediately.


	        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
	        break;
	      }

	    case RootSuspendedWithDelay:
	      {
	        markRootSuspended$1(root, lanes);

	        if (includesOnlyTransitions(lanes)) {
	          // This is a transition, so we should exit without committing a
	          // placeholder and without scheduling a timeout. Delay indefinitely
	          // until we receive more data.
	          break;
	        }

	        if (!shouldForceFlushFallbacksInDEV()) {
	          // This is not a transition, but we did trigger an avoided state.
	          // Schedule a placeholder to display after a short delay, using the Just
	          // Noticeable Difference.
	          // TODO: Is the JND optimization worth the added complexity? If this is
	          // the only reason we track the event time, then probably not.
	          // Consider removing.
	          var mostRecentEventTime = getMostRecentEventTime(root, lanes);
	          var eventTimeMs = mostRecentEventTime;
	          var timeElapsedMs = now() - eventTimeMs;

	          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.


	          if (_msUntilTimeout > 10) {
	            // Instead of committing the fallback immediately, wait for more data
	            // to arrive.
	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
	            break;
	          }
	        } // Commit the placeholder.


	        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
	        break;
	      }

	    case RootCompleted:
	      {
	        // The work completed. Ready to commit.
	        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
	        break;
	      }

	    default:
	      {
	        throw new Error('Unknown root exit status.');
	      }
	  }
	}

	function isRenderConsistentWithExternalStores(finishedWork) {
	  // Search the rendered tree for external store reads, and check whether the
	  // stores were mutated in a concurrent event. Intentionally using an iterative
	  // loop instead of recursion so we can exit early.
	  var node = finishedWork;

	  while (true) {
	    if (node.flags & StoreConsistency) {
	      var updateQueue = node.updateQueue;

	      if (updateQueue !== null) {
	        var checks = updateQueue.stores;

	        if (checks !== null) {
	          for (var i = 0; i < checks.length; i++) {
	            var check = checks[i];
	            var getSnapshot = check.getSnapshot;
	            var renderedValue = check.value;

	            try {
	              if (!objectIs(getSnapshot(), renderedValue)) {
	                // Found an inconsistent store.
	                return false;
	              }
	            } catch (error) {
	              // If `getSnapshot` throws, return `false`. This will schedule
	              // a re-render, and the error will be rethrown during render.
	              return false;
	            }
	          }
	        }
	      }
	    }

	    var child = node.child;

	    if (node.subtreeFlags & StoreConsistency && child !== null) {
	      child.return = node;
	      node = child;
	      continue;
	    }

	    if (node === finishedWork) {
	      return true;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === finishedWork) {
	        return true;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  } // Flow doesn't know this is unreachable, but eslint does
	  // eslint-disable-next-line no-unreachable


	  return true;
	}

	function markRootSuspended$1(root, suspendedLanes) {
	  // When suspending, we should always exclude lanes that were pinged or (more
	  // rarely, since we try to avoid it) updated during the render phase.
	  // TODO: Lol maybe there's a better way to factor this besides this
	  // obnoxiously named function :)
	  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
	  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
	  markRootSuspended(root, suspendedLanes);
	} // This is the entry point for synchronous tasks that don't go
	// through Scheduler


	function performSyncWorkOnRoot(root) {
	  {
	    syncNestedUpdateFlag();
	  }

	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    throw new Error('Should not already be working.');
	  }

	  flushPassiveEffects();
	  var lanes = getNextLanes(root, NoLanes);

	  if (!includesSomeLane(lanes, SyncLane)) {
	    // There's no remaining sync work left.
	    ensureRootIsScheduled(root, now());
	    return null;
	  }

	  var exitStatus = renderRootSync(root, lanes);

	  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
	    // If something threw an error, try rendering one more time. We'll render
	    // synchronously to block concurrent data mutations, and we'll includes
	    // all pending updates are included. If it still fails after the second
	    // attempt, we'll give up and commit the resulting tree.
	    var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

	    if (errorRetryLanes !== NoLanes) {
	      lanes = errorRetryLanes;
	      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
	    }
	  }

	  if (exitStatus === RootFatalErrored) {
	    var fatalError = workInProgressRootFatalError;
	    prepareFreshStack(root, NoLanes);
	    markRootSuspended$1(root, lanes);
	    ensureRootIsScheduled(root, now());
	    throw fatalError;
	  }

	  if (exitStatus === RootDidNotComplete) {
	    throw new Error('Root did not complete. This is a bug in React.');
	  } // We now have a consistent tree. Because this is a sync render, we
	  // will commit it even if something suspended.


	  var finishedWork = root.current.alternate;
	  root.finishedWork = finishedWork;
	  root.finishedLanes = lanes;
	  commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next
	  // pending level.

	  ensureRootIsScheduled(root, now());
	  return null;
	}

	function flushRoot(root, lanes) {
	  if (lanes !== NoLanes) {
	    markRootEntangled(root, mergeLanes(lanes, SyncLane));
	    ensureRootIsScheduled(root, now());

	    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
	      resetRenderTimer();
	      flushSyncCallbacks();
	    }
	  }
	}
	function batchedUpdates$1(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer
	    // most batchedUpdates-like method.

	    if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
	    !( ReactCurrentActQueue$1.isBatchingLegacy)) {
	      resetRenderTimer();
	      flushSyncCallbacksOnlyInLegacyMode();
	    }
	  }
	}
	function discreteUpdates(fn, a, b, c, d) {
	  var previousPriority = getCurrentUpdatePriority();
	  var prevTransition = ReactCurrentBatchConfig$3.transition;

	  try {
	    ReactCurrentBatchConfig$3.transition = null;
	    setCurrentUpdatePriority(DiscreteEventPriority);
	    return fn(a, b, c, d);
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$3.transition = prevTransition;

	    if (executionContext === NoContext) {
	      resetRenderTimer();
	    }
	  }
	} // Overload the definition to the two valid signatures.
	// Warning, this opts-out of checking the function body.

	// eslint-disable-next-line no-redeclare
	function flushSync(fn) {
	  // In legacy mode, we flush pending passive effects at the beginning of the
	  // next event, not at the end of the previous one.
	  if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
	    flushPassiveEffects();
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;
	  var prevTransition = ReactCurrentBatchConfig$3.transition;
	  var previousPriority = getCurrentUpdatePriority();

	  try {
	    ReactCurrentBatchConfig$3.transition = null;
	    setCurrentUpdatePriority(DiscreteEventPriority);

	    if (fn) {
	      return fn();
	    } else {
	      return undefined;
	    }
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$3.transition = prevTransition;
	    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
	    // Note that this will happen even if batchedUpdates is higher up
	    // the stack.

	    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
	      flushSyncCallbacks();
	    }
	  }
	}
	function isAlreadyRendering() {
	  // Used by the renderer to print a warning if certain APIs are called from
	  // the wrong context.
	  return  (executionContext & (RenderContext | CommitContext)) !== NoContext;
	}
	function pushRenderLanes(fiber, lanes) {
	  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
	  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
	}
	function popRenderLanes(fiber) {
	  subtreeRenderLanes = subtreeRenderLanesCursor.current;
	  pop(subtreeRenderLanesCursor, fiber);
	}

	function prepareFreshStack(root, lanes) {
	  root.finishedWork = null;
	  root.finishedLanes = NoLanes;
	  var timeoutHandle = root.timeoutHandle;

	  if (timeoutHandle !== noTimeout) {
	    // The root previous suspended and scheduled a timeout to commit a fallback
	    // state. Now that we have additional work, cancel the timeout.
	    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

	    cancelTimeout(timeoutHandle);
	  }

	  if (workInProgress !== null) {
	    var interruptedWork = workInProgress.return;

	    while (interruptedWork !== null) {
	      var current = interruptedWork.alternate;
	      unwindInterruptedWork(current, interruptedWork);
	      interruptedWork = interruptedWork.return;
	    }
	  }

	  workInProgressRoot = root;
	  var rootWorkInProgress = createWorkInProgress(root.current, null);
	  workInProgress = rootWorkInProgress;
	  workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
	  workInProgressRootExitStatus = RootInProgress;
	  workInProgressRootFatalError = null;
	  workInProgressRootSkippedLanes = NoLanes;
	  workInProgressRootInterleavedUpdatedLanes = NoLanes;
	  workInProgressRootPingedLanes = NoLanes;
	  workInProgressRootConcurrentErrors = null;
	  workInProgressRootRecoverableErrors = null;
	  finishQueueingConcurrentUpdates();

	  {
	    ReactStrictModeWarnings.discardPendingWarnings();
	  }

	  return rootWorkInProgress;
	}

	function handleError(root, thrownValue) {
	  do {
	    var erroredWork = workInProgress;

	    try {
	      // Reset module-level state that was set during the render phase.
	      resetContextDependencies();
	      resetHooksAfterThrow();
	      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
	      // separate issue. Write a regression test using string refs.

	      ReactCurrentOwner$2.current = null;

	      if (erroredWork === null || erroredWork.return === null) {
	        // Expected to be working on a non-root fiber. This is a fatal error
	        // because there's no ancestor that can handle it; the root is
	        // supposed to capture all errors that weren't caught by an error
	        // boundary.
	        workInProgressRootExitStatus = RootFatalErrored;
	        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
	        // sibling, or the parent if there are no siblings. But since the root
	        // has no siblings nor a parent, we set it to null. Usually this is
	        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
	        // intentionally not calling those, we need set it here.
	        // TODO: Consider calling `unwindWork` to pop the contexts.

	        workInProgress = null;
	        return;
	      }

	      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
	        // Record the time spent rendering before an error was thrown. This
	        // avoids inaccurate Profiler durations in the case of a
	        // suspended render.
	        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
	      }

	      if (enableSchedulingProfiler) {
	        markComponentRenderStopped();

	        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
	          var wakeable = thrownValue;
	          markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
	        } else {
	          markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
	        }
	      }

	      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
	      completeUnitOfWork(erroredWork);
	    } catch (yetAnotherThrownValue) {
	      // Something in the return path also threw.
	      thrownValue = yetAnotherThrownValue;

	      if (workInProgress === erroredWork && erroredWork !== null) {
	        // If this boundary has already errored, then we had trouble processing
	        // the error. Bubble it to the next boundary.
	        erroredWork = erroredWork.return;
	        workInProgress = erroredWork;
	      } else {
	        erroredWork = workInProgress;
	      }

	      continue;
	    } // Return to the normal work loop.


	    return;
	  } while (true);
	}

	function pushDispatcher() {
	  var prevDispatcher = ReactCurrentDispatcher$2.current;
	  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

	  if (prevDispatcher === null) {
	    // The React isomorphic package does not include a default dispatcher.
	    // Instead the first renderer will lazily attach one, in order to give
	    // nicer error messages.
	    return ContextOnlyDispatcher;
	  } else {
	    return prevDispatcher;
	  }
	}

	function popDispatcher(prevDispatcher) {
	  ReactCurrentDispatcher$2.current = prevDispatcher;
	}

	function markCommitTimeOfFallback() {
	  globalMostRecentFallbackTime = now();
	}
	function markSkippedUpdateLanes(lane) {
	  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
	}
	function renderDidSuspend() {
	  if (workInProgressRootExitStatus === RootInProgress) {
	    workInProgressRootExitStatus = RootSuspended;
	  }
	}
	function renderDidSuspendDelayIfPossible() {
	  if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
	    workInProgressRootExitStatus = RootSuspendedWithDelay;
	  } // Check if there are updates that we skipped tree that might have unblocked
	  // this render.


	  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
	    // Mark the current render as suspended so that we switch to working on
	    // the updates that were skipped. Usually we only suspend at the end of
	    // the render phase.
	    // TODO: We should probably always mark the root as suspended immediately
	    // (inside this function), since by suspending at the end of the render
	    // phase introduces a potential mistake where we suspend lanes that were
	    // pinged or updated while we were rendering.
	    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
	  }
	}
	function renderDidError(error) {
	  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
	    workInProgressRootExitStatus = RootErrored;
	  }

	  if (workInProgressRootConcurrentErrors === null) {
	    workInProgressRootConcurrentErrors = [error];
	  } else {
	    workInProgressRootConcurrentErrors.push(error);
	  }
	} // Called during render to determine if anything has suspended.
	// Returns false if we're not sure.

	function renderHasNotSuspendedYet() {
	  // If something errored or completed, we can't really be sure,
	  // so those are false.
	  return workInProgressRootExitStatus === RootInProgress;
	}

	function renderRootSync(root, lanes) {
	  var prevExecutionContext = executionContext;
	  executionContext |= RenderContext;
	  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
	  // and prepare a fresh one. Otherwise we'll continue where we left off.

	  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
	    {
	      if (isDevToolsPresent) {
	        var memoizedUpdaters = root.memoizedUpdaters;

	        if (memoizedUpdaters.size > 0) {
	          restorePendingUpdaters(root, workInProgressRootRenderLanes);
	          memoizedUpdaters.clear();
	        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
	        // If we bailout on this work, we'll move them back (like above).
	        // It's important to move them now in case the work spawns more work at the same priority with different updaters.
	        // That way we can keep the current update and future updates separate.


	        movePendingFibersToMemoized(root, lanes);
	      }
	    }

	    workInProgressTransitions = getTransitionsForLanes();
	    prepareFreshStack(root, lanes);
	  }

	  {
	    markRenderStarted(lanes);
	  }

	  do {
	    try {
	      workLoopSync();
	      break;
	    } catch (thrownValue) {
	      handleError(root, thrownValue);
	    }
	  } while (true);

	  resetContextDependencies();
	  executionContext = prevExecutionContext;
	  popDispatcher(prevDispatcher);

	  if (workInProgress !== null) {
	    // This is a sync render, so we should have finished the whole tree.
	    throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');
	  }

	  {
	    markRenderStopped();
	  } // Set this to null to indicate there's no in-progress render.


	  workInProgressRoot = null;
	  workInProgressRootRenderLanes = NoLanes;
	  return workInProgressRootExitStatus;
	} // The work loop is an extremely hot path. Tell Closure not to inline it.

	/** @noinline */


	function workLoopSync() {
	  // Already timed out, so perform work without checking if we need to yield.
	  while (workInProgress !== null) {
	    performUnitOfWork(workInProgress);
	  }
	}

	function renderRootConcurrent(root, lanes) {
	  var prevExecutionContext = executionContext;
	  executionContext |= RenderContext;
	  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
	  // and prepare a fresh one. Otherwise we'll continue where we left off.

	  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
	    {
	      if (isDevToolsPresent) {
	        var memoizedUpdaters = root.memoizedUpdaters;

	        if (memoizedUpdaters.size > 0) {
	          restorePendingUpdaters(root, workInProgressRootRenderLanes);
	          memoizedUpdaters.clear();
	        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
	        // If we bailout on this work, we'll move them back (like above).
	        // It's important to move them now in case the work spawns more work at the same priority with different updaters.
	        // That way we can keep the current update and future updates separate.


	        movePendingFibersToMemoized(root, lanes);
	      }
	    }

	    workInProgressTransitions = getTransitionsForLanes();
	    resetRenderTimer();
	    prepareFreshStack(root, lanes);
	  }

	  {
	    markRenderStarted(lanes);
	  }

	  do {
	    try {
	      workLoopConcurrent();
	      break;
	    } catch (thrownValue) {
	      handleError(root, thrownValue);
	    }
	  } while (true);

	  resetContextDependencies();
	  popDispatcher(prevDispatcher);
	  executionContext = prevExecutionContext;


	  if (workInProgress !== null) {
	    // Still work remaining.
	    {
	      markRenderYielded();
	    }

	    return RootInProgress;
	  } else {
	    // Completed the tree.
	    {
	      markRenderStopped();
	    } // Set this to null to indicate there's no in-progress render.


	    workInProgressRoot = null;
	    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

	    return workInProgressRootExitStatus;
	  }
	}
	/** @noinline */


	function workLoopConcurrent() {
	  // Perform work until Scheduler asks us to yield
	  while (workInProgress !== null && !shouldYield()) {
	    performUnitOfWork(workInProgress);
	  }
	}

	function performUnitOfWork(unitOfWork) {
	  // The current, flushed, state of this fiber is the alternate. Ideally
	  // nothing should rely on this, but relying on it here means that we don't
	  // need an additional field on the work in progress.
	  var current = unitOfWork.alternate;
	  setCurrentFiber(unitOfWork);
	  var next;

	  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
	    startProfilerTimer(unitOfWork);
	    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
	    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
	  } else {
	    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
	  }

	  resetCurrentFiber();
	  unitOfWork.memoizedProps = unitOfWork.pendingProps;

	  if (next === null) {
	    // If this doesn't spawn new work, complete the current work.
	    completeUnitOfWork(unitOfWork);
	  } else {
	    workInProgress = next;
	  }

	  ReactCurrentOwner$2.current = null;
	}

	function completeUnitOfWork(unitOfWork) {
	  // Attempt to complete the current unit of work, then move to the next
	  // sibling. If there are no more siblings, return to the parent fiber.
	  var completedWork = unitOfWork;

	  do {
	    // The current, flushed, state of this fiber is the alternate. Ideally
	    // nothing should rely on this, but relying on it here means that we don't
	    // need an additional field on the work in progress.
	    var current = completedWork.alternate;
	    var returnFiber = completedWork.return; // Check if the work completed or if something threw.

	    if ((completedWork.flags & Incomplete) === NoFlags) {
	      setCurrentFiber(completedWork);
	      var next = void 0;

	      if ( (completedWork.mode & ProfileMode) === NoMode) {
	        next = completeWork(current, completedWork, subtreeRenderLanes);
	      } else {
	        startProfilerTimer(completedWork);
	        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

	        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
	      }

	      resetCurrentFiber();

	      if (next !== null) {
	        // Completing this fiber spawned new work. Work on that next.
	        workInProgress = next;
	        return;
	      }
	    } else {
	      // This fiber did not complete because something threw. Pop values off
	      // the stack without entering the complete phase. If this is a boundary,
	      // capture values if possible.
	      var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.


	      if (_next !== null) {
	        // If completing this work spawned new work, do that next. We'll come
	        // back here again.
	        // Since we're restarting, remove anything that is not a host effect
	        // from the effect tag.
	        _next.flags &= HostEffectMask;
	        workInProgress = _next;
	        return;
	      }

	      if ( (completedWork.mode & ProfileMode) !== NoMode) {
	        // Record the render duration for the fiber that errored.
	        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

	        var actualDuration = completedWork.actualDuration;
	        var child = completedWork.child;

	        while (child !== null) {
	          actualDuration += child.actualDuration;
	          child = child.sibling;
	        }

	        completedWork.actualDuration = actualDuration;
	      }

	      if (returnFiber !== null) {
	        // Mark the parent fiber as incomplete and clear its subtree flags.
	        returnFiber.flags |= Incomplete;
	        returnFiber.subtreeFlags = NoFlags;
	        returnFiber.deletions = null;
	      } else {
	        // We've unwound all the way to the root.
	        workInProgressRootExitStatus = RootDidNotComplete;
	        workInProgress = null;
	        return;
	      }
	    }

	    var siblingFiber = completedWork.sibling;

	    if (siblingFiber !== null) {
	      // If there is more work to do in this returnFiber, do that next.
	      workInProgress = siblingFiber;
	      return;
	    } // Otherwise, return to the parent


	    completedWork = returnFiber; // Update the next thing we're working on in case something throws.

	    workInProgress = completedWork;
	  } while (completedWork !== null); // We've reached the root.


	  if (workInProgressRootExitStatus === RootInProgress) {
	    workInProgressRootExitStatus = RootCompleted;
	  }
	}

	function commitRoot(root, recoverableErrors, transitions) {
	  // TODO: This no longer makes any sense. We already wrap the mutation and
	  // layout phases. Should be able to remove.
	  var previousUpdateLanePriority = getCurrentUpdatePriority();
	  var prevTransition = ReactCurrentBatchConfig$3.transition;

	  try {
	    ReactCurrentBatchConfig$3.transition = null;
	    setCurrentUpdatePriority(DiscreteEventPriority);
	    commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
	  } finally {
	    ReactCurrentBatchConfig$3.transition = prevTransition;
	    setCurrentUpdatePriority(previousUpdateLanePriority);
	  }

	  return null;
	}

	function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
	  do {
	    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
	    // means `flushPassiveEffects` will sometimes result in additional
	    // passive effects. So we need to keep flushing in a loop until there are
	    // no more pending effects.
	    // TODO: Might be better if `flushPassiveEffects` did not automatically
	    // flush synchronous work at the end, to avoid factoring hazards like this.
	    flushPassiveEffects();
	  } while (rootWithPendingPassiveEffects !== null);

	  flushRenderPhaseStrictModeWarningsInDEV();

	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    throw new Error('Should not already be working.');
	  }

	  var finishedWork = root.finishedWork;
	  var lanes = root.finishedLanes;

	  {
	    markCommitStarted(lanes);
	  }

	  if (finishedWork === null) {

	    {
	      markCommitStopped();
	    }

	    return null;
	  } else {
	    {
	      if (lanes === NoLanes) {
	        error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');
	      }
	    }
	  }

	  root.finishedWork = null;
	  root.finishedLanes = NoLanes;

	  if (finishedWork === root.current) {
	    throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');
	  } // commitRoot never returns a continuation; it always finishes synchronously.
	  // So we can clear these now to allow a new callback to be scheduled.


	  root.callbackNode = null;
	  root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first
	  // pending time is whatever is left on the root fiber.

	  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
	  markRootFinished(root, remainingLanes);

	  if (root === workInProgressRoot) {
	    // We can reset these now that they are finished.
	    workInProgressRoot = null;
	    workInProgress = null;
	    workInProgressRootRenderLanes = NoLanes;
	  } // If there are pending passive effects, schedule a callback to process them.
	  // Do this as early as possible, so it is queued before anything else that
	  // might get scheduled in the commit phase. (See #16714.)
	  // TODO: Delete all other places that schedule the passive effect callback
	  // They're redundant.


	  if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
	    if (!rootDoesHavePassiveEffects) {
	      rootDoesHavePassiveEffects = true;
	      // to store it in pendingPassiveTransitions until they get processed
	      // We need to pass this through as an argument to commitRoot
	      // because workInProgressTransitions might have changed between
	      // the previous render and commit if we throttle the commit
	      // with setTimeout

	      pendingPassiveTransitions = transitions;
	      scheduleCallback$1(NormalPriority, function () {
	        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool
	        // *after* passive effects fire to avoid freeing a cache pool that may
	        // be referenced by a node in the tree (HostRoot, Cache boundary etc)

	        return null;
	      });
	    }
	  } // Check if there are any effects in the whole tree.
	  // TODO: This is left over from the effect list implementation, where we had
	  // to check for the existence of `firstEffect` to satisfy Flow. I think the
	  // only other reason this optimization exists is because it affects profiling.
	  // Reconsider whether this is necessary.


	  var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
	  var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;

	  if (subtreeHasEffects || rootHasEffect) {
	    var prevTransition = ReactCurrentBatchConfig$3.transition;
	    ReactCurrentBatchConfig$3.transition = null;
	    var previousPriority = getCurrentUpdatePriority();
	    setCurrentUpdatePriority(DiscreteEventPriority);
	    var prevExecutionContext = executionContext;
	    executionContext |= CommitContext; // Reset this to null before calling lifecycles

	    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
	    // of the effect list for each phase: all mutation effects come before all
	    // layout effects, and so on.
	    // The first phase a "before mutation" phase. We use this phase to read the
	    // state of the host tree right before we mutate it. This is where
	    // getSnapshotBeforeUpdate is called.

	    commitBeforeMutationEffects(root, finishedWork);

	    {
	      // Mark the current commit time to be shared by all Profilers in this
	      // batch. This enables them to be grouped later.
	      recordCommitTime();
	    }


	    commitMutationEffects(root, finishedWork, lanes);

	    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
	    // the mutation phase, so that the previous tree is still current during
	    // componentWillUnmount, but before the layout phase, so that the finished
	    // work is current during componentDidMount/Update.

	    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read

	    {
	      markLayoutEffectsStarted(lanes);
	    }

	    commitLayoutEffects(finishedWork, root, lanes);

	    {
	      markLayoutEffectsStopped();
	    }
	    // opportunity to paint.


	    requestPaint();
	    executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.

	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$3.transition = prevTransition;
	  } else {
	    // No effects.
	    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
	    // no effects.
	    // TODO: Maybe there's a better way to report this.

	    {
	      recordCommitTime();
	    }
	  }

	  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

	  if (rootDoesHavePassiveEffects) {
	    // This commit has passive effects. Stash a reference to them. But don't
	    // schedule a callback until after flushing layout work.
	    rootDoesHavePassiveEffects = false;
	    rootWithPendingPassiveEffects = root;
	    pendingPassiveEffectsLanes = lanes;
	  } else {

	    {
	      nestedPassiveUpdateCount = 0;
	      rootWithPassiveNestedUpdates = null;
	    }
	  } // Read this again, since an effect might have updated it


	  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
	  // TODO: This is part of the `componentDidCatch` implementation. Its purpose
	  // is to detect whether something might have called setState inside
	  // `componentDidCatch`. The mechanism is known to be flawed because `setState`
	  // inside `componentDidCatch` is itself flawed — that's why we recommend
	  // `getDerivedStateFromError` instead. However, it could be improved by
	  // checking if remainingLanes includes Sync work, instead of whether there's
	  // any work remaining at all (which would also include stuff like Suspense
	  // retries or transitions). It's been like this for a while, though, so fixing
	  // it probably isn't that urgent.

	  if (remainingLanes === NoLanes) {
	    // If there's no remaining work, we can clear the set of already failed
	    // error boundaries.
	    legacyErrorBoundariesThatAlreadyFailed = null;
	  }

	  {
	    if (!rootDidHavePassiveEffects) {
	      commitDoubleInvokeEffectsInDEV(root.current, false);
	    }
	  }

	  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);

	  {
	    if (isDevToolsPresent) {
	      root.memoizedUpdaters.clear();
	    }
	  }

	  {
	    onCommitRoot$1();
	  } // Always call this before exiting `commitRoot`, to ensure that any
	  // additional work on this root is scheduled.


	  ensureRootIsScheduled(root, now());

	  if (recoverableErrors !== null) {
	    // There were errors during this render, but recovered from them without
	    // needing to surface it to the UI. We log them here.
	    var onRecoverableError = root.onRecoverableError;

	    for (var i = 0; i < recoverableErrors.length; i++) {
	      var recoverableError = recoverableErrors[i];
	      var componentStack = recoverableError.stack;
	      var digest = recoverableError.digest;
	      onRecoverableError(recoverableError.value, {
	        componentStack: componentStack,
	        digest: digest
	      });
	    }
	  }

	  if (hasUncaughtError) {
	    hasUncaughtError = false;
	    var error$1 = firstUncaughtError;
	    firstUncaughtError = null;
	    throw error$1;
	  } // If the passive effects are the result of a discrete render, flush them
	  // synchronously at the end of the current task so that the result is
	  // immediately observable. Otherwise, we assume that they are not
	  // order-dependent and do not need to be observed by external systems, so we
	  // can wait until after paint.
	  // TODO: We can optimize this by not scheduling the callback earlier. Since we
	  // currently schedule the callback in multiple places, will wait until those
	  // are consolidated.


	  if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {
	    flushPassiveEffects();
	  } // Read this again, since a passive effect might have updated it


	  remainingLanes = root.pendingLanes;

	  if (includesSomeLane(remainingLanes, SyncLane)) {
	    {
	      markNestedUpdateScheduled();
	    } // Count the number of times the root synchronously re-renders without
	    // finishing. If there are too many, it indicates an infinite update loop.


	    if (root === rootWithNestedUpdates) {
	      nestedUpdateCount++;
	    } else {
	      nestedUpdateCount = 0;
	      rootWithNestedUpdates = root;
	    }
	  } else {
	    nestedUpdateCount = 0;
	  } // If layout work was scheduled, flush it now.


	  flushSyncCallbacks();

	  {
	    markCommitStopped();
	  }

	  return null;
	}

	function flushPassiveEffects() {
	  // Returns whether passive effects were flushed.
	  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
	  // probably just combine the two functions. I believe they were only separate
	  // in the first place because we used to wrap it with
	  // `Scheduler.runWithPriority`, which accepts a function. But now we track the
	  // priority within React itself, so we can mutate the variable directly.
	  if (rootWithPendingPassiveEffects !== null) {
	    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
	    var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
	    var prevTransition = ReactCurrentBatchConfig$3.transition;
	    var previousPriority = getCurrentUpdatePriority();

	    try {
	      ReactCurrentBatchConfig$3.transition = null;
	      setCurrentUpdatePriority(priority);
	      return flushPassiveEffectsImpl();
	    } finally {
	      setCurrentUpdatePriority(previousPriority);
	      ReactCurrentBatchConfig$3.transition = prevTransition; // Once passive effects have run for the tree - giving components a
	    }
	  }

	  return false;
	}
	function enqueuePendingPassiveProfilerEffect(fiber) {
	  {
	    pendingPassiveProfilerEffects.push(fiber);

	    if (!rootDoesHavePassiveEffects) {
	      rootDoesHavePassiveEffects = true;
	      scheduleCallback$1(NormalPriority, function () {
	        flushPassiveEffects();
	        return null;
	      });
	    }
	  }
	}

	function flushPassiveEffectsImpl() {
	  if (rootWithPendingPassiveEffects === null) {
	    return false;
	  } // Cache and clear the transitions flag


	  var transitions = pendingPassiveTransitions;
	  pendingPassiveTransitions = null;
	  var root = rootWithPendingPassiveEffects;
	  var lanes = pendingPassiveEffectsLanes;
	  rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
	  // Figure out why and fix it. It's not causing any known issues (probably
	  // because it's only used for profiling), but it's a refactor hazard.

	  pendingPassiveEffectsLanes = NoLanes;

	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    throw new Error('Cannot flush passive effects while already rendering.');
	  }

	  {
	    isFlushingPassiveEffects = true;
	    didScheduleUpdateDuringPassiveEffects = false;
	  }

	  {
	    markPassiveEffectsStarted(lanes);
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= CommitContext;
	  commitPassiveUnmountEffects(root.current);
	  commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects

	  {
	    var profilerEffects = pendingPassiveProfilerEffects;
	    pendingPassiveProfilerEffects = [];

	    for (var i = 0; i < profilerEffects.length; i++) {
	      var _fiber = profilerEffects[i];
	      commitPassiveEffectDurations(root, _fiber);
	    }
	  }

	  {
	    markPassiveEffectsStopped();
	  }

	  {
	    commitDoubleInvokeEffectsInDEV(root.current, true);
	  }

	  executionContext = prevExecutionContext;
	  flushSyncCallbacks();

	  {
	    // If additional passive effects were scheduled, increment a counter. If this
	    // exceeds the limit, we'll fire a warning.
	    if (didScheduleUpdateDuringPassiveEffects) {
	      if (root === rootWithPassiveNestedUpdates) {
	        nestedPassiveUpdateCount++;
	      } else {
	        nestedPassiveUpdateCount = 0;
	        rootWithPassiveNestedUpdates = root;
	      }
	    } else {
	      nestedPassiveUpdateCount = 0;
	    }

	    isFlushingPassiveEffects = false;
	    didScheduleUpdateDuringPassiveEffects = false;
	  } // TODO: Move to commitPassiveMountEffects


	  onPostCommitRoot(root);

	  {
	    var stateNode = root.current.stateNode;
	    stateNode.effectDuration = 0;
	    stateNode.passiveEffectDuration = 0;
	  }

	  return true;
	}

	function isAlreadyFailedLegacyErrorBoundary(instance) {
	  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
	}
	function markLegacyErrorBoundaryAsFailed(instance) {
	  if (legacyErrorBoundariesThatAlreadyFailed === null) {
	    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
	  } else {
	    legacyErrorBoundariesThatAlreadyFailed.add(instance);
	  }
	}

	function prepareToThrowUncaughtError(error) {
	  if (!hasUncaughtError) {
	    hasUncaughtError = true;
	    firstUncaughtError = error;
	  }
	}

	var onUncaughtError = prepareToThrowUncaughtError;

	function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
	  var errorInfo = createCapturedValueAtFiber(error, sourceFiber);
	  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
	  var root = enqueueUpdate(rootFiber, update, SyncLane);
	  var eventTime = requestEventTime();

	  if (root !== null) {
	    markRootUpdated(root, SyncLane, eventTime);
	    ensureRootIsScheduled(root, eventTime);
	  }
	}

	function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
	  {
	    reportUncaughtErrorInDEV(error$1);
	    setIsRunningInsertionEffect(false);
	  }

	  if (sourceFiber.tag === HostRoot) {
	    // Error was thrown at the root. There is no parent, so the root
	    // itself should capture it.
	    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
	    return;
	  }

	  var fiber = null;

	  {
	    fiber = nearestMountedAncestor;
	  }

	  while (fiber !== null) {
	    if (fiber.tag === HostRoot) {
	      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
	      return;
	    } else if (fiber.tag === ClassComponent) {
	      var ctor = fiber.type;
	      var instance = fiber.stateNode;

	      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
	        var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
	        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
	        var root = enqueueUpdate(fiber, update, SyncLane);
	        var eventTime = requestEventTime();

	        if (root !== null) {
	          markRootUpdated(root, SyncLane, eventTime);
	          ensureRootIsScheduled(root, eventTime);
	        }

	        return;
	      }
	    }

	    fiber = fiber.return;
	  }

	  {
	    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
	    // will fire for errors that are thrown by destroy functions inside deleted
	    // trees. What it should instead do is propagate the error to the parent of
	    // the deleted tree. In the meantime, do not add this warning to the
	    // allowlist; this is only for our internal use.
	    error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\n\n' + 'Error message:\n\n%s', error$1);
	  }
	}
	function pingSuspendedRoot(root, wakeable, pingedLanes) {
	  var pingCache = root.pingCache;

	  if (pingCache !== null) {
	    // The wakeable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    pingCache.delete(wakeable);
	  }

	  var eventTime = requestEventTime();
	  markRootPinged(root, pingedLanes);
	  warnIfSuspenseResolutionNotWrappedWithActDEV(root);

	  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
	    // Received a ping at the same priority level at which we're currently
	    // rendering. We might want to restart this render. This should mirror
	    // the logic of whether or not a root suspends once it completes.
	    // TODO: If we're rendering sync either due to Sync, Batched or expired,
	    // we should probably never restart.
	    // If we're suspended with delay, or if it's a retry, we'll always suspend
	    // so we can always restart.
	    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
	      // Restart from the root.
	      prepareFreshStack(root, NoLanes);
	    } else {
	      // Even though we can't restart right now, we might get an
	      // opportunity later. So we mark this render as having a ping.
	      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
	    }
	  }

	  ensureRootIsScheduled(root, eventTime);
	}

	function retryTimedOutBoundary(boundaryFiber, retryLane) {
	  // The boundary fiber (a Suspense component or SuspenseList component)
	  // previously was rendered in its fallback state. One of the promises that
	  // suspended it has resolved, which means at least part of the tree was
	  // likely unblocked. Try rendering again, at a new lanes.
	  if (retryLane === NoLane) {
	    // TODO: Assign this to `suspenseState.retryLane`? to avoid
	    // unnecessary entanglement?
	    retryLane = requestRetryLane(boundaryFiber);
	  } // TODO: Special case idle priority?


	  var eventTime = requestEventTime();
	  var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);

	  if (root !== null) {
	    markRootUpdated(root, retryLane, eventTime);
	    ensureRootIsScheduled(root, eventTime);
	  }
	}

	function retryDehydratedSuspenseBoundary(boundaryFiber) {
	  var suspenseState = boundaryFiber.memoizedState;
	  var retryLane = NoLane;

	  if (suspenseState !== null) {
	    retryLane = suspenseState.retryLane;
	  }

	  retryTimedOutBoundary(boundaryFiber, retryLane);
	}
	function resolveRetryWakeable(boundaryFiber, wakeable) {
	  var retryLane = NoLane; // Default

	  var retryCache;

	  switch (boundaryFiber.tag) {
	    case SuspenseComponent:
	      retryCache = boundaryFiber.stateNode;
	      var suspenseState = boundaryFiber.memoizedState;

	      if (suspenseState !== null) {
	        retryLane = suspenseState.retryLane;
	      }

	      break;

	    case SuspenseListComponent:
	      retryCache = boundaryFiber.stateNode;
	      break;

	    default:
	      throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');
	  }

	  if (retryCache !== null) {
	    // The wakeable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    retryCache.delete(wakeable);
	  }

	  retryTimedOutBoundary(boundaryFiber, retryLane);
	} // Computes the next Just Noticeable Difference (JND) boundary.
	// The theory is that a person can't tell the difference between small differences in time.
	// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
	// difference in the experience. However, waiting for longer might mean that we can avoid
	// showing an intermediate loading state. The longer we have already waited, the harder it
	// is to tell small differences in time. Therefore, the longer we've already waited,
	// the longer we can wait additionally. At some point we have to give up though.
	// We pick a train model where the next boundary commits at a consistent schedule.
	// These particular numbers are vague estimates. We expect to adjust them based on research.

	function jnd(timeElapsed) {
	  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
	}

	function checkForNestedUpdates() {
	  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
	    nestedUpdateCount = 0;
	    rootWithNestedUpdates = null;
	    throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');
	  }

	  {
	    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
	      nestedPassiveUpdateCount = 0;
	      rootWithPassiveNestedUpdates = null;

	      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
	    }
	  }
	}

	function flushRenderPhaseStrictModeWarningsInDEV() {
	  {
	    ReactStrictModeWarnings.flushLegacyContextWarning();

	    {
	      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
	    }
	  }
	}

	function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
	  {
	    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
	    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
	    // Maybe not a big deal since this is DEV only behavior.
	    setCurrentFiber(fiber);
	    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);

	    if (hasPassiveEffects) {
	      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
	    }

	    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);

	    if (hasPassiveEffects) {
	      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
	    }

	    resetCurrentFiber();
	  }
	}

	function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    var current = firstChild;
	    var subtreeRoot = null;

	    while (current !== null) {
	      var primarySubtreeFlag = current.subtreeFlags & fiberFlags;

	      if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {
	        current = current.child;
	      } else {
	        if ((current.flags & fiberFlags) !== NoFlags) {
	          invokeEffectFn(current);
	        }

	        if (current.sibling !== null) {
	          current = current.sibling;
	        } else {
	          current = subtreeRoot = current.return;
	        }
	      }
	    }
	  }
	}

	var didWarnStateUpdateForNotYetMountedComponent = null;
	function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
	  {
	    if ((executionContext & RenderContext) !== NoContext) {
	      // We let the other warning about render phase updates deal with this one.
	      return;
	    }

	    if (!(fiber.mode & ConcurrentMode)) {
	      return;
	    }

	    var tag = fiber.tag;

	    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
	      // Only warn for user-defined components, not internal ones like Suspense.
	      return;
	    } // We show the whole stack but dedupe on the top component's name because
	    // the problematic code almost always lies inside that component.


	    var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';

	    if (didWarnStateUpdateForNotYetMountedComponent !== null) {
	      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
	        return;
	      }

	      didWarnStateUpdateForNotYetMountedComponent.add(componentName);
	    } else {
	      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
	    }

	    var previousFiber = current;

	    try {
	      setCurrentFiber(fiber);

	      error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
	    } finally {
	      if (previousFiber) {
	        setCurrentFiber(fiber);
	      } else {
	        resetCurrentFiber();
	      }
	    }
	  }
	}
	var beginWork$1;

	{
	  var dummyFiber = null;

	  beginWork$1 = function (current, unitOfWork, lanes) {
	    // If a component throws an error, we replay it again in a synchronously
	    // dispatched event, so that the debugger will treat it as an uncaught
	    // error See ReactErrorUtils for more information.
	    // Before entering the begin phase, copy the work-in-progress onto a dummy
	    // fiber. If beginWork throws, we'll use this to reset the state.
	    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

	    try {
	      return beginWork(current, unitOfWork, lanes);
	    } catch (originalError) {
	      if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
	        // Don't replay promises.
	        // Don't replay errors if we are hydrating and have already suspended or handled an error
	        throw originalError;
	      } // Keep this code in sync with handleError; any changes here must have
	      // corresponding changes there.


	      resetContextDependencies();
	      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
	      // same fiber again.
	      // Unwind the failed stack frame

	      unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.

	      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

	      if ( unitOfWork.mode & ProfileMode) {
	        // Reset the profiler timer.
	        startProfilerTimer(unitOfWork);
	      } // Run beginWork again.


	      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

	      if (hasCaughtError()) {
	        var replayError = clearCaughtError();

	        if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {
	          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
	          originalError._suppressLogging = true;
	        }
	      } // We always throw the original error in case the second render pass is not idempotent.
	      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.


	      throw originalError;
	    }
	  };
	}

	var didWarnAboutUpdateInRender = false;
	var didWarnAboutUpdateInRenderForAnotherComponent;

	{
	  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
	}

	function warnAboutRenderPhaseUpdatesInDEV(fiber) {
	  {
	    if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
	      switch (fiber.tag) {
	        case FunctionComponent:
	        case ForwardRef:
	        case SimpleMemoComponent:
	          {
	            var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

	            var dedupeKey = renderingComponentName;

	            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
	              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
	              var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';

	              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
	            }

	            break;
	          }

	        case ClassComponent:
	          {
	            if (!didWarnAboutUpdateInRender) {
	              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

	              didWarnAboutUpdateInRender = true;
	            }

	            break;
	          }
	      }
	    }
	  }
	}

	function restorePendingUpdaters(root, lanes) {
	  {
	    if (isDevToolsPresent) {
	      var memoizedUpdaters = root.memoizedUpdaters;
	      memoizedUpdaters.forEach(function (schedulingFiber) {
	        addFiberToLanesMap(root, schedulingFiber, lanes);
	      }); // This function intentionally does not clear memoized updaters.
	      // Those may still be relevant to the current commit
	      // and a future one (e.g. Suspense).
	    }
	  }
	}
	var fakeActCallbackNode = {};

	function scheduleCallback$1(priorityLevel, callback) {
	  {
	    // If we're currently inside an `act` scope, bypass Scheduler and push to
	    // the `act` queue instead.
	    var actQueue = ReactCurrentActQueue$1.current;

	    if (actQueue !== null) {
	      actQueue.push(callback);
	      return fakeActCallbackNode;
	    } else {
	      return scheduleCallback(priorityLevel, callback);
	    }
	  }
	}

	function cancelCallback$1(callbackNode) {
	  if ( callbackNode === fakeActCallbackNode) {
	    return;
	  } // In production, always call Scheduler. This function will be stripped out.


	  return cancelCallback(callbackNode);
	}

	function shouldForceFlushFallbacksInDEV() {
	  // Never force flush in production. This function should get stripped out.
	  return  ReactCurrentActQueue$1.current !== null;
	}

	function warnIfUpdatesNotWrappedWithActDEV(fiber) {
	  {
	    if (fiber.mode & ConcurrentMode) {
	      if (!isConcurrentActEnvironment()) {
	        // Not in an act environment. No need to warn.
	        return;
	      }
	    } else {
	      // Legacy mode has additional cases where we suppress a warning.
	      if (!isLegacyActEnvironment()) {
	        // Not in an act environment. No need to warn.
	        return;
	      }

	      if (executionContext !== NoContext) {
	        // Legacy mode doesn't warn if the update is batched, i.e.
	        // batchedUpdates or flushSync.
	        return;
	      }

	      if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
	        // For backwards compatibility with pre-hooks code, legacy mode only
	        // warns for updates that originate from a hook.
	        return;
	      }
	    }

	    if (ReactCurrentActQueue$1.current === null) {
	      var previousFiber = current;

	      try {
	        setCurrentFiber(fiber);

	        error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));
	      } finally {
	        if (previousFiber) {
	          setCurrentFiber(fiber);
	        } else {
	          resetCurrentFiber();
	        }
	      }
	    }
	  }
	}

	function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
	  {
	    if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
	      error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\n\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\n\n' + 'act(() => {\n' + '  /* finish loading suspended data */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');
	    }
	  }
	}

	function setIsRunningInsertionEffect(isRunning) {
	  {
	    isRunningInsertionEffect = isRunning;
	  }
	}

	/* eslint-disable react-internal/prod-error-codes */
	var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

	var failedBoundaries = null;
	var setRefreshHandler = function (handler) {
	  {
	    resolveFamily = handler;
	  }
	};
	function resolveFunctionForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function resolveClassForHotReloading(type) {
	  // No implementation differences.
	  return resolveFunctionForHotReloading(type);
	}
	function resolveForwardRefForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      // Check if we're dealing with a real forwardRef. Don't want to crash early.
	      if (type !== null && type !== undefined && typeof type.render === 'function') {
	        // ForwardRef is special because its resolved .type is an object,
	        // but it's possible that we only have its inner render function in the map.
	        // If that inner render function is different, we'll build a new forwardRef type.
	        var currentRender = resolveFunctionForHotReloading(type.render);

	        if (type.render !== currentRender) {
	          var syntheticType = {
	            $$typeof: REACT_FORWARD_REF_TYPE,
	            render: currentRender
	          };

	          if (type.displayName !== undefined) {
	            syntheticType.displayName = type.displayName;
	          }

	          return syntheticType;
	        }
	      }

	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function isCompatibleFamilyForHotReloading(fiber, element) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return false;
	    }

	    var prevType = fiber.elementType;
	    var nextType = element.type; // If we got here, we know types aren't === equal.

	    var needsCompareFamilies = false;
	    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

	    switch (fiber.tag) {
	      case ClassComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case FunctionComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            // We don't know the inner type yet.
	            // We're going to assume that the lazy inner type is stable,
	            // and so it is sufficient to avoid reconciling it away.
	            // We're not going to unwrap or actually use the new lazy type.
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case ForwardRef:
	        {
	          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case MemoComponent:
	      case SimpleMemoComponent:
	        {
	          if ($$typeofNextType === REACT_MEMO_TYPE) {
	            // TODO: if it was but can no longer be simple,
	            // we shouldn't set this.
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      default:
	        return false;
	    } // Check if both types have a family and it's the same one.


	    if (needsCompareFamilies) {
	      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
	      // This means both of them need to be registered to preserve state.
	      // If we unwrapped and compared the inner types for wrappers instead,
	      // then we would risk falsely saying two separate memo(Foo)
	      // calls are equivalent because they wrap the same Foo function.
	      var prevFamily = resolveFamily(prevType);

	      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
	        return true;
	      }
	    }

	    return false;
	  }
	}
	function markFailedErrorBoundaryForHotReloading(fiber) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    if (typeof WeakSet !== 'function') {
	      return;
	    }

	    if (failedBoundaries === null) {
	      failedBoundaries = new WeakSet();
	    }

	    failedBoundaries.add(fiber);
	  }
	}
	var scheduleRefresh = function (root, update) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    var staleFamilies = update.staleFamilies,
	        updatedFamilies = update.updatedFamilies;
	    flushPassiveEffects();
	    flushSync(function () {
	      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
	    });
	  }
	};
	var scheduleRoot = function (root, element) {
	  {
	    if (root.context !== emptyContextObject) {
	      // Super edge case: root has a legacy _renderSubtree context
	      // but we don't know the parentComponent so we can't pass it.
	      // Just ignore. We'll delete this with _renderSubtree code path later.
	      return;
	    }

	    flushPassiveEffects();
	    flushSync(function () {
	      updateContainer(element, root, null, null);
	    });
	  }
	};

	function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
	  {
	    var alternate = fiber.alternate,
	        child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    if (resolveFamily === null) {
	      throw new Error('Expected resolveFamily to be set during hot reload.');
	    }

	    var needsRender = false;
	    var needsRemount = false;

	    if (candidateType !== null) {
	      var family = resolveFamily(candidateType);

	      if (family !== undefined) {
	        if (staleFamilies.has(family)) {
	          needsRemount = true;
	        } else if (updatedFamilies.has(family)) {
	          if (tag === ClassComponent) {
	            needsRemount = true;
	          } else {
	            needsRender = true;
	          }
	        }
	      }
	    }

	    if (failedBoundaries !== null) {
	      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
	        needsRemount = true;
	      }
	    }

	    if (needsRemount) {
	      fiber._debugNeedsRemount = true;
	    }

	    if (needsRemount || needsRender) {
	      var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	      if (_root !== null) {
	        scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
	      }
	    }

	    if (child !== null && !needsRemount) {
	      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
	    }

	    if (sibling !== null) {
	      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
	    }
	  }
	}

	var findHostInstancesForRefresh = function (root, families) {
	  {
	    var hostInstances = new Set();
	    var types = new Set(families.map(function (family) {
	      return family.current;
	    }));
	    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
	    return hostInstances;
	  }
	};

	function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
	  {
	    var child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    var didMatch = false;

	    if (candidateType !== null) {
	      if (types.has(candidateType)) {
	        didMatch = true;
	      }
	    }

	    if (didMatch) {
	      // We have a match. This only drills down to the closest host components.
	      // There's no need to search deeper because for the purpose of giving
	      // visual feedback, "flashing" outermost parent rectangles is sufficient.
	      findHostInstancesForFiberShallowly(fiber, hostInstances);
	    } else {
	      // If there's no match, maybe there will be one further down in the child tree.
	      if (child !== null) {
	        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
	      }
	    }

	    if (sibling !== null) {
	      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
	    }
	  }
	}

	function findHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

	    if (foundHostInstances) {
	      return;
	    } // If we didn't find any host children, fallback to closest host parent.


	    var node = fiber;

	    while (true) {
	      switch (node.tag) {
	        case HostComponent:
	          hostInstances.add(node.stateNode);
	          return;

	        case HostPortal:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;

	        case HostRoot:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;
	      }

	      if (node.return === null) {
	        throw new Error('Expected to reach root first.');
	      }

	      node = node.return;
	    }
	  }
	}

	function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var node = fiber;
	    var foundHostInstances = false;

	    while (true) {
	      if (node.tag === HostComponent) {
	        // We got a match.
	        foundHostInstances = true;
	        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === fiber) {
	        return foundHostInstances;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === fiber) {
	          return foundHostInstances;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }

	  return false;
	}

	var hasBadMapPolyfill;

	{
	  hasBadMapPolyfill = false;

	  try {
	    var nonExtensibleObject = Object.preventExtensions({});
	    /* eslint-disable no-new */

	    new Map([[nonExtensibleObject, null]]);
	    new Set([nonExtensibleObject]);
	    /* eslint-enable no-new */
	  } catch (e) {
	    // TODO: Consider warning about bad polyfills
	    hasBadMapPolyfill = true;
	  }
	}

	function FiberNode(tag, pendingProps, key, mode) {
	  // Instance
	  this.tag = tag;
	  this.key = key;
	  this.elementType = null;
	  this.type = null;
	  this.stateNode = null; // Fiber

	  this.return = null;
	  this.child = null;
	  this.sibling = null;
	  this.index = 0;
	  this.ref = null;
	  this.pendingProps = pendingProps;
	  this.memoizedProps = null;
	  this.updateQueue = null;
	  this.memoizedState = null;
	  this.dependencies = null;
	  this.mode = mode; // Effects

	  this.flags = NoFlags;
	  this.subtreeFlags = NoFlags;
	  this.deletions = null;
	  this.lanes = NoLanes;
	  this.childLanes = NoLanes;
	  this.alternate = null;

	  {
	    // Note: The following is done to avoid a v8 performance cliff.
	    //
	    // Initializing the fields below to smis and later updating them with
	    // double values will cause Fibers to end up having separate shapes.
	    // This behavior/bug has something to do with Object.preventExtension().
	    // Fortunately this only impacts DEV builds.
	    // Unfortunately it makes React unusably slow for some applications.
	    // To work around this, initialize the fields below with doubles.
	    //
	    // Learn more about this here:
	    // https://github.com/facebook/react/issues/14365
	    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
	    this.actualDuration = Number.NaN;
	    this.actualStartTime = Number.NaN;
	    this.selfBaseDuration = Number.NaN;
	    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
	    // This won't trigger the performance cliff mentioned above,
	    // and it simplifies other profiler code (including DevTools).

	    this.actualDuration = 0;
	    this.actualStartTime = -1;
	    this.selfBaseDuration = 0;
	    this.treeBaseDuration = 0;
	  }

	  {
	    // This isn't directly used but is handy for debugging internals:
	    this._debugSource = null;
	    this._debugOwner = null;
	    this._debugNeedsRemount = false;
	    this._debugHookTypes = null;

	    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
	      Object.preventExtensions(this);
	    }
	  }
	} // This is a constructor function, rather than a POJO constructor, still
	// please ensure we do the following:
	// 1) Nobody should add any instance methods on this. Instance methods can be
	//    more difficult to predict when they get optimized and they are almost
	//    never inlined properly in static compilers.
	// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
	//    always know when it is a fiber.
	// 3) We might want to experiment with using numeric keys since they are easier
	//    to optimize in a non-JIT environment.
	// 4) We can easily go from a constructor to a createFiber object literal if that
	//    is faster.
	// 5) It should be easy to port this to a C struct and keep a C implementation
	//    compatible.


	var createFiber = function (tag, pendingProps, key, mode) {
	  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
	  return new FiberNode(tag, pendingProps, key, mode);
	};

	function shouldConstruct$1(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function isSimpleFunctionComponent(type) {
	  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
	}
	function resolveLazyComponentTag(Component) {
	  if (typeof Component === 'function') {
	    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
	  } else if (Component !== undefined && Component !== null) {
	    var $$typeof = Component.$$typeof;

	    if ($$typeof === REACT_FORWARD_REF_TYPE) {
	      return ForwardRef;
	    }

	    if ($$typeof === REACT_MEMO_TYPE) {
	      return MemoComponent;
	    }
	  }

	  return IndeterminateComponent;
	} // This is used to create an alternate fiber to do work on.

	function createWorkInProgress(current, pendingProps) {
	  var workInProgress = current.alternate;

	  if (workInProgress === null) {
	    // We use a double buffering pooling technique because we know that we'll
	    // only ever need at most two versions of a tree. We pool the "other" unused
	    // node that we're free to reuse. This is lazily created to avoid allocating
	    // extra objects for things that are never updated. It also allow us to
	    // reclaim the extra memory if needed.
	    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
	    workInProgress.elementType = current.elementType;
	    workInProgress.type = current.type;
	    workInProgress.stateNode = current.stateNode;

	    {
	      // DEV-only fields
	      workInProgress._debugSource = current._debugSource;
	      workInProgress._debugOwner = current._debugOwner;
	      workInProgress._debugHookTypes = current._debugHookTypes;
	    }

	    workInProgress.alternate = current;
	    current.alternate = workInProgress;
	  } else {
	    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

	    workInProgress.type = current.type; // We already have an alternate.
	    // Reset the effect tag.

	    workInProgress.flags = NoFlags; // The effects are no longer valid.

	    workInProgress.subtreeFlags = NoFlags;
	    workInProgress.deletions = null;

	    {
	      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
	      // This prevents time from endlessly accumulating in new commits.
	      // This has the downside of resetting values for different priority renders,
	      // But works for yielding (the common case) and should support resuming.
	      workInProgress.actualDuration = 0;
	      workInProgress.actualStartTime = -1;
	    }
	  } // Reset all effects except static ones.
	  // Static effects are not specific to a render.


	  workInProgress.flags = current.flags & StaticMask;
	  workInProgress.childLanes = current.childLanes;
	  workInProgress.lanes = current.lanes;
	  workInProgress.child = current.child;
	  workInProgress.memoizedProps = current.memoizedProps;
	  workInProgress.memoizedState = current.memoizedState;
	  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
	  // it cannot be shared with the current fiber.

	  var currentDependencies = current.dependencies;
	  workInProgress.dependencies = currentDependencies === null ? null : {
	    lanes: currentDependencies.lanes,
	    firstContext: currentDependencies.firstContext
	  }; // These will be overridden during the parent's reconciliation

	  workInProgress.sibling = current.sibling;
	  workInProgress.index = current.index;
	  workInProgress.ref = current.ref;

	  {
	    workInProgress.selfBaseDuration = current.selfBaseDuration;
	    workInProgress.treeBaseDuration = current.treeBaseDuration;
	  }

	  {
	    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

	    switch (workInProgress.tag) {
	      case IndeterminateComponent:
	      case FunctionComponent:
	      case SimpleMemoComponent:
	        workInProgress.type = resolveFunctionForHotReloading(current.type);
	        break;

	      case ClassComponent:
	        workInProgress.type = resolveClassForHotReloading(current.type);
	        break;

	      case ForwardRef:
	        workInProgress.type = resolveForwardRefForHotReloading(current.type);
	        break;
	    }
	  }

	  return workInProgress;
	} // Used to reuse a Fiber for a second pass.

	function resetWorkInProgress(workInProgress, renderLanes) {
	  // This resets the Fiber to what createFiber or createWorkInProgress would
	  // have set the values to before during the first pass. Ideally this wouldn't
	  // be necessary but unfortunately many code paths reads from the workInProgress
	  // when they should be reading from current and writing to workInProgress.
	  // We assume pendingProps, index, key, ref, return are still untouched to
	  // avoid doing another reconciliation.
	  // Reset the effect flags but keep any Placement tags, since that's something
	  // that child fiber is setting, not the reconciliation.
	  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.

	  var current = workInProgress.alternate;

	  if (current === null) {
	    // Reset to createFiber's initial values.
	    workInProgress.childLanes = NoLanes;
	    workInProgress.lanes = renderLanes;
	    workInProgress.child = null;
	    workInProgress.subtreeFlags = NoFlags;
	    workInProgress.memoizedProps = null;
	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null;
	    workInProgress.dependencies = null;
	    workInProgress.stateNode = null;

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = 0;
	      workInProgress.treeBaseDuration = 0;
	    }
	  } else {
	    // Reset to the cloned values that createWorkInProgress would've.
	    workInProgress.childLanes = current.childLanes;
	    workInProgress.lanes = current.lanes;
	    workInProgress.child = current.child;
	    workInProgress.subtreeFlags = NoFlags;
	    workInProgress.deletions = null;
	    workInProgress.memoizedProps = current.memoizedProps;
	    workInProgress.memoizedState = current.memoizedState;
	    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

	    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
	    // it cannot be shared with the current fiber.

	    var currentDependencies = current.dependencies;
	    workInProgress.dependencies = currentDependencies === null ? null : {
	      lanes: currentDependencies.lanes,
	      firstContext: currentDependencies.firstContext
	    };

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = current.selfBaseDuration;
	      workInProgress.treeBaseDuration = current.treeBaseDuration;
	    }
	  }

	  return workInProgress;
	}
	function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
	  var mode;

	  if (tag === ConcurrentRoot) {
	    mode = ConcurrentMode;

	    if (isStrictMode === true) {
	      mode |= StrictLegacyMode;

	      {
	        mode |= StrictEffectsMode;
	      }
	    }
	  } else {
	    mode = NoMode;
	  }

	  if ( isDevToolsPresent) {
	    // Always collect profile timings when DevTools are present.
	    // This enables DevTools to start capturing timing at any point–
	    // Without some nodes in the tree having empty base times.
	    mode |= ProfileMode;
	  }

	  return createFiber(HostRoot, null, null, mode);
	}
	function createFiberFromTypeAndProps(type, // React$ElementType
	key, pendingProps, owner, mode, lanes) {
	  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

	  var resolvedType = type;

	  if (typeof type === 'function') {
	    if (shouldConstruct$1(type)) {
	      fiberTag = ClassComponent;

	      {
	        resolvedType = resolveClassForHotReloading(resolvedType);
	      }
	    } else {
	      {
	        resolvedType = resolveFunctionForHotReloading(resolvedType);
	      }
	    }
	  } else if (typeof type === 'string') {
	    fiberTag = HostComponent;
	  } else {
	    getTag: switch (type) {
	      case REACT_FRAGMENT_TYPE:
	        return createFiberFromFragment(pendingProps.children, mode, lanes, key);

	      case REACT_STRICT_MODE_TYPE:
	        fiberTag = Mode;
	        mode |= StrictLegacyMode;

	        if ( (mode & ConcurrentMode) !== NoMode) {
	          // Strict effects should never run on legacy roots
	          mode |= StrictEffectsMode;
	        }

	        break;

	      case REACT_PROFILER_TYPE:
	        return createFiberFromProfiler(pendingProps, mode, lanes, key);

	      case REACT_SUSPENSE_TYPE:
	        return createFiberFromSuspense(pendingProps, mode, lanes, key);

	      case REACT_SUSPENSE_LIST_TYPE:
	        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

	      case REACT_OFFSCREEN_TYPE:
	        return createFiberFromOffscreen(pendingProps, mode, lanes, key);

	      case REACT_LEGACY_HIDDEN_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      case REACT_SCOPE_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      case REACT_CACHE_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      case REACT_TRACING_MARKER_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      case REACT_DEBUG_TRACING_MODE_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      default:
	        {
	          if (typeof type === 'object' && type !== null) {
	            switch (type.$$typeof) {
	              case REACT_PROVIDER_TYPE:
	                fiberTag = ContextProvider;
	                break getTag;

	              case REACT_CONTEXT_TYPE:
	                // This is a consumer
	                fiberTag = ContextConsumer;
	                break getTag;

	              case REACT_FORWARD_REF_TYPE:
	                fiberTag = ForwardRef;

	                {
	                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
	                }

	                break getTag;

	              case REACT_MEMO_TYPE:
	                fiberTag = MemoComponent;
	                break getTag;

	              case REACT_LAZY_TYPE:
	                fiberTag = LazyComponent;
	                resolvedType = null;
	                break getTag;
	            }
	          }

	          var info = '';

	          {
	            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
	            }

	            var ownerName = owner ? getComponentNameFromFiber(owner) : null;

	            if (ownerName) {
	              info += '\n\nCheck the render method of `' + ownerName + '`.';
	            }
	          }

	          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + ("but got: " + (type == null ? type : typeof type) + "." + info));
	        }
	    }
	  }

	  var fiber = createFiber(fiberTag, pendingProps, key, mode);
	  fiber.elementType = type;
	  fiber.type = resolvedType;
	  fiber.lanes = lanes;

	  {
	    fiber._debugOwner = owner;
	  }

	  return fiber;
	}
	function createFiberFromElement(element, mode, lanes) {
	  var owner = null;

	  {
	    owner = element._owner;
	  }

	  var type = element.type;
	  var key = element.key;
	  var pendingProps = element.props;
	  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);

	  {
	    fiber._debugSource = element._source;
	    fiber._debugOwner = element._owner;
	  }

	  return fiber;
	}
	function createFiberFromFragment(elements, mode, lanes, key) {
	  var fiber = createFiber(Fragment, elements, key, mode);
	  fiber.lanes = lanes;
	  return fiber;
	}

	function createFiberFromProfiler(pendingProps, mode, lanes, key) {
	  {
	    if (typeof pendingProps.id !== 'string') {
	      error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
	    }
	  }

	  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
	  fiber.elementType = REACT_PROFILER_TYPE;
	  fiber.lanes = lanes;

	  {
	    fiber.stateNode = {
	      effectDuration: 0,
	      passiveEffectDuration: 0
	    };
	  }

	  return fiber;
	}

	function createFiberFromSuspense(pendingProps, mode, lanes, key) {
	  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
	  fiber.elementType = REACT_SUSPENSE_TYPE;
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
	  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
	  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
	  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
	  fiber.elementType = REACT_OFFSCREEN_TYPE;
	  fiber.lanes = lanes;
	  var primaryChildInstance = {
	    isHidden: false
	  };
	  fiber.stateNode = primaryChildInstance;
	  return fiber;
	}
	function createFiberFromText(content, mode, lanes) {
	  var fiber = createFiber(HostText, content, null, mode);
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromHostInstanceForDeletion() {
	  var fiber = createFiber(HostComponent, null, null, NoMode);
	  fiber.elementType = 'DELETED';
	  return fiber;
	}
	function createFiberFromDehydratedFragment(dehydratedNode) {
	  var fiber = createFiber(DehydratedFragment, null, null, NoMode);
	  fiber.stateNode = dehydratedNode;
	  return fiber;
	}
	function createFiberFromPortal(portal, mode, lanes) {
	  var pendingProps = portal.children !== null ? portal.children : [];
	  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
	  fiber.lanes = lanes;
	  fiber.stateNode = {
	    containerInfo: portal.containerInfo,
	    pendingChildren: null,
	    // Used by persistent updates
	    implementation: portal.implementation
	  };
	  return fiber;
	} // Used for stashing WIP properties to replay failed work in DEV.

	function assignFiberPropertiesInDEV(target, source) {
	  if (target === null) {
	    // This Fiber's initial properties will always be overwritten.
	    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
	    target = createFiber(IndeterminateComponent, null, null, NoMode);
	  } // This is intentionally written as a list of all properties.
	  // We tried to use Object.assign() instead but this is called in
	  // the hottest path, and Object.assign() was too slow:
	  // https://github.com/facebook/react/issues/12502
	  // This code is DEV-only so size is not a concern.


	  target.tag = source.tag;
	  target.key = source.key;
	  target.elementType = source.elementType;
	  target.type = source.type;
	  target.stateNode = source.stateNode;
	  target.return = source.return;
	  target.child = source.child;
	  target.sibling = source.sibling;
	  target.index = source.index;
	  target.ref = source.ref;
	  target.pendingProps = source.pendingProps;
	  target.memoizedProps = source.memoizedProps;
	  target.updateQueue = source.updateQueue;
	  target.memoizedState = source.memoizedState;
	  target.dependencies = source.dependencies;
	  target.mode = source.mode;
	  target.flags = source.flags;
	  target.subtreeFlags = source.subtreeFlags;
	  target.deletions = source.deletions;
	  target.lanes = source.lanes;
	  target.childLanes = source.childLanes;
	  target.alternate = source.alternate;

	  {
	    target.actualDuration = source.actualDuration;
	    target.actualStartTime = source.actualStartTime;
	    target.selfBaseDuration = source.selfBaseDuration;
	    target.treeBaseDuration = source.treeBaseDuration;
	  }

	  target._debugSource = source._debugSource;
	  target._debugOwner = source._debugOwner;
	  target._debugNeedsRemount = source._debugNeedsRemount;
	  target._debugHookTypes = source._debugHookTypes;
	  return target;
	}

	function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
	  this.tag = tag;
	  this.containerInfo = containerInfo;
	  this.pendingChildren = null;
	  this.current = null;
	  this.pingCache = null;
	  this.finishedWork = null;
	  this.timeoutHandle = noTimeout;
	  this.context = null;
	  this.pendingContext = null;
	  this.callbackNode = null;
	  this.callbackPriority = NoLane;
	  this.eventTimes = createLaneMap(NoLanes);
	  this.expirationTimes = createLaneMap(NoTimestamp);
	  this.pendingLanes = NoLanes;
	  this.suspendedLanes = NoLanes;
	  this.pingedLanes = NoLanes;
	  this.expiredLanes = NoLanes;
	  this.mutableReadLanes = NoLanes;
	  this.finishedLanes = NoLanes;
	  this.entangledLanes = NoLanes;
	  this.entanglements = createLaneMap(NoLanes);
	  this.identifierPrefix = identifierPrefix;
	  this.onRecoverableError = onRecoverableError;

	  {
	    this.mutableSourceEagerHydrationData = null;
	  }

	  {
	    this.effectDuration = 0;
	    this.passiveEffectDuration = 0;
	  }

	  {
	    this.memoizedUpdaters = new Set();
	    var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];

	    for (var _i = 0; _i < TotalLanes; _i++) {
	      pendingUpdatersLaneMap.push(new Set());
	    }
	  }

	  {
	    switch (tag) {
	      case ConcurrentRoot:
	        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';
	        break;

	      case LegacyRoot:
	        this._debugRootType = hydrate ? 'hydrate()' : 'render()';
	        break;
	    }
	  }
	}

	function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the
	// host config, but because they are passed in at runtime, we have to thread
	// them through the root constructor. Perhaps we should put them all into a
	// single type, like a DynamicHostConfig that is defined by the renderer.
	identifierPrefix, onRecoverableError, transitionCallbacks) {
	  var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
	  // stateNode is any.


	  var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
	  root.current = uninitializedFiber;
	  uninitializedFiber.stateNode = root;

	  {
	    var _initialState = {
	      element: initialChildren,
	      isDehydrated: hydrate,
	      cache: null,
	      // not enabled yet
	      transitions: null,
	      pendingSuspenseBoundaries: null
	    };
	    uninitializedFiber.memoizedState = _initialState;
	  }

	  initializeUpdateQueue(uninitializedFiber);
	  return root;
	}

	var ReactVersion = '18.3.1';

	function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
	implementation) {
	  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

	  {
	    checkKeyStringCoercion(key);
	  }

	  return {
	    // This tag allow us to uniquely identify this as a React Portal
	    $$typeof: REACT_PORTAL_TYPE,
	    key: key == null ? null : '' + key,
	    children: children,
	    containerInfo: containerInfo,
	    implementation: implementation
	  };
	}

	var didWarnAboutNestedUpdates;
	var didWarnAboutFindNodeInStrictMode;

	{
	  didWarnAboutNestedUpdates = false;
	  didWarnAboutFindNodeInStrictMode = {};
	}

	function getContextForSubtree(parentComponent) {
	  if (!parentComponent) {
	    return emptyContextObject;
	  }

	  var fiber = get(parentComponent);
	  var parentContext = findCurrentUnmaskedContext(fiber);

	  if (fiber.tag === ClassComponent) {
	    var Component = fiber.type;

	    if (isContextProvider(Component)) {
	      return processChildContext(fiber, Component, parentContext);
	    }
	  }

	  return parentContext;
	}

	function findHostInstanceWithWarning(component, methodName) {
	  {
	    var fiber = get(component);

	    if (fiber === undefined) {
	      if (typeof component.render === 'function') {
	        throw new Error('Unable to find node on an unmounted component.');
	      } else {
	        var keys = Object.keys(component).join(',');
	        throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
	      }
	    }

	    var hostFiber = findCurrentHostFiber(fiber);

	    if (hostFiber === null) {
	      return null;
	    }

	    if (hostFiber.mode & StrictLegacyMode) {
	      var componentName = getComponentNameFromFiber(fiber) || 'Component';

	      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
	        didWarnAboutFindNodeInStrictMode[componentName] = true;
	        var previousFiber = current;

	        try {
	          setCurrentFiber(hostFiber);

	          if (fiber.mode & StrictLegacyMode) {
	            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
	          } else {
	            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
	          }
	        } finally {
	          // Ideally this should reset to previous but this shouldn't be called in
	          // render and there's another warning for that anyway.
	          if (previousFiber) {
	            setCurrentFiber(previousFiber);
	          } else {
	            resetCurrentFiber();
	          }
	        }
	      }
	    }

	    return hostFiber.stateNode;
	  }
	}

	function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
	  var hydrate = false;
	  var initialChildren = null;
	  return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
	}
	function createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.
	callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
	  var hydrate = true;
	  var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor

	  root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from
	  // a regular update because the initial render must match was was rendered
	  // on the server.
	  // NOTE: This update intentionally doesn't have a payload. We're only using
	  // the update to schedule work on the root fiber (and, for legacy roots, to
	  // enqueue the callback if one is provided).

	  var current = root.current;
	  var eventTime = requestEventTime();
	  var lane = requestUpdateLane(current);
	  var update = createUpdate(eventTime, lane);
	  update.callback = callback !== undefined && callback !== null ? callback : null;
	  enqueueUpdate(current, update, lane);
	  scheduleInitialHydrationOnRoot(root, lane, eventTime);
	  return root;
	}
	function updateContainer(element, container, parentComponent, callback) {
	  {
	    onScheduleRoot(container, element);
	  }

	  var current$1 = container.current;
	  var eventTime = requestEventTime();
	  var lane = requestUpdateLane(current$1);

	  {
	    markRenderScheduled(lane);
	  }

	  var context = getContextForSubtree(parentComponent);

	  if (container.context === null) {
	    container.context = context;
	  } else {
	    container.pendingContext = context;
	  }

	  {
	    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
	      didWarnAboutNestedUpdates = true;

	      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');
	    }
	  }

	  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: element
	  };
	  callback = callback === undefined ? null : callback;

	  if (callback !== null) {
	    {
	      if (typeof callback !== 'function') {
	        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
	      }
	    }

	    update.callback = callback;
	  }

	  var root = enqueueUpdate(current$1, update, lane);

	  if (root !== null) {
	    scheduleUpdateOnFiber(root, current$1, lane, eventTime);
	    entangleTransitions(root, current$1, lane);
	  }

	  return lane;
	}
	function getPublicRootInstance(container) {
	  var containerFiber = container.current;

	  if (!containerFiber.child) {
	    return null;
	  }

	  switch (containerFiber.child.tag) {
	    case HostComponent:
	      return getPublicInstance(containerFiber.child.stateNode);

	    default:
	      return containerFiber.child.stateNode;
	  }
	}
	function attemptSynchronousHydration$1(fiber) {
	  switch (fiber.tag) {
	    case HostRoot:
	      {
	        var root = fiber.stateNode;

	        if (isRootDehydrated(root)) {
	          // Flush the first scheduled "update".
	          var lanes = getHighestPriorityPendingLanes(root);
	          flushRoot(root, lanes);
	        }

	        break;
	      }

	    case SuspenseComponent:
	      {
	        flushSync(function () {
	          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	          if (root !== null) {
	            var eventTime = requestEventTime();
	            scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);
	          }
	        }); // If we're still blocked after this, we need to increase
	        // the priority of any promises resolving within this
	        // boundary so that they next attempt also has higher pri.

	        var retryLane = SyncLane;
	        markRetryLaneIfNotHydrated(fiber, retryLane);
	        break;
	      }
	  }
	}

	function markRetryLaneImpl(fiber, retryLane) {
	  var suspenseState = fiber.memoizedState;

	  if (suspenseState !== null && suspenseState.dehydrated !== null) {
	    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
	  }
	} // Increases the priority of thenables when they resolve within this boundary.


	function markRetryLaneIfNotHydrated(fiber, retryLane) {
	  markRetryLaneImpl(fiber, retryLane);
	  var alternate = fiber.alternate;

	  if (alternate) {
	    markRetryLaneImpl(alternate, retryLane);
	  }
	}
	function attemptContinuousHydration$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority and they should not suspend on I/O,
	    // since you have to wrap anything that might suspend in
	    // Suspense.
	    return;
	  }

	  var lane = SelectiveHydrationLane;
	  var root = enqueueConcurrentRenderForLane(fiber, lane);

	  if (root !== null) {
	    var eventTime = requestEventTime();
	    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	  }

	  markRetryLaneIfNotHydrated(fiber, lane);
	}
	function attemptHydrationAtCurrentPriority$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority other than synchronously flush it.
	    return;
	  }

	  var lane = requestUpdateLane(fiber);
	  var root = enqueueConcurrentRenderForLane(fiber, lane);

	  if (root !== null) {
	    var eventTime = requestEventTime();
	    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	  }

	  markRetryLaneIfNotHydrated(fiber, lane);
	}
	function findHostInstanceWithNoPortals(fiber) {
	  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

	  if (hostFiber === null) {
	    return null;
	  }

	  return hostFiber.stateNode;
	}

	var shouldErrorImpl = function (fiber) {
	  return null;
	};

	function shouldError(fiber) {
	  return shouldErrorImpl(fiber);
	}

	var shouldSuspendImpl = function (fiber) {
	  return false;
	};

	function shouldSuspend(fiber) {
	  return shouldSuspendImpl(fiber);
	}
	var overrideHookState = null;
	var overrideHookStateDeletePath = null;
	var overrideHookStateRenamePath = null;
	var overrideProps = null;
	var overridePropsDeletePath = null;
	var overridePropsRenamePath = null;
	var scheduleUpdate = null;
	var setErrorHandler = null;
	var setSuspenseHandler = null;

	{
	  var copyWithDeleteImpl = function (obj, path, index) {
	    var key = path[index];
	    var updated = isArray(obj) ? obj.slice() : assign({}, obj);

	    if (index + 1 === path.length) {
	      if (isArray(updated)) {
	        updated.splice(key, 1);
	      } else {
	        delete updated[key];
	      }

	      return updated;
	    } // $FlowFixMe number or string is fine here


	    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
	    return updated;
	  };

	  var copyWithDelete = function (obj, path) {
	    return copyWithDeleteImpl(obj, path, 0);
	  };

	  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
	    var oldKey = oldPath[index];
	    var updated = isArray(obj) ? obj.slice() : assign({}, obj);

	    if (index + 1 === oldPath.length) {
	      var newKey = newPath[index]; // $FlowFixMe number or string is fine here

	      updated[newKey] = updated[oldKey];

	      if (isArray(updated)) {
	        updated.splice(oldKey, 1);
	      } else {
	        delete updated[oldKey];
	      }
	    } else {
	      // $FlowFixMe number or string is fine here
	      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
	      obj[oldKey], oldPath, newPath, index + 1);
	    }

	    return updated;
	  };

	  var copyWithRename = function (obj, oldPath, newPath) {
	    if (oldPath.length !== newPath.length) {
	      warn('copyWithRename() expects paths of the same length');

	      return;
	    } else {
	      for (var i = 0; i < newPath.length - 1; i++) {
	        if (oldPath[i] !== newPath[i]) {
	          warn('copyWithRename() expects paths to be the same except for the deepest key');

	          return;
	        }
	      }
	    }

	    return copyWithRenameImpl(obj, oldPath, newPath, 0);
	  };

	  var copyWithSetImpl = function (obj, path, index, value) {
	    if (index >= path.length) {
	      return value;
	    }

	    var key = path[index];
	    var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here

	    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
	    return updated;
	  };

	  var copyWithSet = function (obj, path, value) {
	    return copyWithSetImpl(obj, path, 0, value);
	  };

	  var findHook = function (fiber, id) {
	    // For now, the "id" of stateful hooks is just the stateful hook index.
	    // This may change in the future with e.g. nested hooks.
	    var currentHook = fiber.memoizedState;

	    while (currentHook !== null && id > 0) {
	      currentHook = currentHook.next;
	      id--;
	    }

	    return currentHook;
	  }; // Support DevTools editable values for useState and useReducer.


	  overrideHookState = function (fiber, id, path, value) {
	    var hook = findHook(fiber, id);

	    if (hook !== null) {
	      var newState = copyWithSet(hook.memoizedState, path, value);
	      hook.memoizedState = newState;
	      hook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = assign({}, fiber.memoizedProps);
	      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	      if (root !== null) {
	        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	      }
	    }
	  };

	  overrideHookStateDeletePath = function (fiber, id, path) {
	    var hook = findHook(fiber, id);

	    if (hook !== null) {
	      var newState = copyWithDelete(hook.memoizedState, path);
	      hook.memoizedState = newState;
	      hook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = assign({}, fiber.memoizedProps);
	      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	      if (root !== null) {
	        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	      }
	    }
	  };

	  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
	    var hook = findHook(fiber, id);

	    if (hook !== null) {
	      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
	      hook.memoizedState = newState;
	      hook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = assign({}, fiber.memoizedProps);
	      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	      if (root !== null) {
	        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	      }
	    }
	  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


	  overrideProps = function (fiber, path, value) {
	    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	    }
	  };

	  overridePropsDeletePath = function (fiber, path) {
	    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	    }
	  };

	  overridePropsRenamePath = function (fiber, oldPath, newPath) {
	    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	    }
	  };

	  scheduleUpdate = function (fiber) {
	    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	    }
	  };

	  setErrorHandler = function (newShouldErrorImpl) {
	    shouldErrorImpl = newShouldErrorImpl;
	  };

	  setSuspenseHandler = function (newShouldSuspendImpl) {
	    shouldSuspendImpl = newShouldSuspendImpl;
	  };
	}

	function findHostInstanceByFiber(fiber) {
	  var hostFiber = findCurrentHostFiber(fiber);

	  if (hostFiber === null) {
	    return null;
	  }

	  return hostFiber.stateNode;
	}

	function emptyFindFiberByHostInstance(instance) {
	  return null;
	}

	function getCurrentFiberForDevTools() {
	  return current;
	}

	function injectIntoDevTools(devToolsConfig) {
	  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
	  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	  return injectInternals({
	    bundleType: devToolsConfig.bundleType,
	    version: devToolsConfig.version,
	    rendererPackageName: devToolsConfig.rendererPackageName,
	    rendererConfig: devToolsConfig.rendererConfig,
	    overrideHookState: overrideHookState,
	    overrideHookStateDeletePath: overrideHookStateDeletePath,
	    overrideHookStateRenamePath: overrideHookStateRenamePath,
	    overrideProps: overrideProps,
	    overridePropsDeletePath: overridePropsDeletePath,
	    overridePropsRenamePath: overridePropsRenamePath,
	    setErrorHandler: setErrorHandler,
	    setSuspenseHandler: setSuspenseHandler,
	    scheduleUpdate: scheduleUpdate,
	    currentDispatcherRef: ReactCurrentDispatcher,
	    findHostInstanceByFiber: findHostInstanceByFiber,
	    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
	    // React Refresh
	    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
	    scheduleRefresh:  scheduleRefresh ,
	    scheduleRoot:  scheduleRoot ,
	    setRefreshHandler:  setRefreshHandler ,
	    // Enables DevTools to append owner stacks to error messages in DEV mode.
	    getCurrentFiber:  getCurrentFiberForDevTools ,
	    // Enables DevTools to detect reconciler version rather than renderer version
	    // which may not match for third party renderers.
	    reconcilerVersion: ReactVersion
	  });
	}

	/* global reportError */

	var defaultOnRecoverableError = typeof reportError === 'function' ? // In modern browsers, reportError will dispatch an error event,
	// emulating an uncaught JavaScript error.
	reportError : function (error) {
	  // In older browsers and test environments, fallback to console.error.
	  // eslint-disable-next-line react-internal/no-production-logging
	  console['error'](error);
	};

	function ReactDOMRoot(internalRoot) {
	  this._internalRoot = internalRoot;
	}

	ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function (children) {
	  var root = this._internalRoot;

	  if (root === null) {
	    throw new Error('Cannot update an unmounted root.');
	  }

	  {
	    if (typeof arguments[1] === 'function') {
	      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
	    } else if (isValidContainer(arguments[1])) {
	      error('You passed a container to the second argument of root.render(...). ' + "You don't need to pass it again since you already passed it to create the root.");
	    } else if (typeof arguments[1] !== 'undefined') {
	      error('You passed a second argument to root.render(...) but it only accepts ' + 'one argument.');
	    }

	    var container = root.containerInfo;

	    if (container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(root.current);

	      if (hostInstance) {
	        if (hostInstance.parentNode !== container) {
	          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
	        }
	      }
	    }
	  }

	  updateContainer(children, root, null, null);
	};

	ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function () {
	  {
	    if (typeof arguments[0] === 'function') {
	      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
	    }
	  }

	  var root = this._internalRoot;

	  if (root !== null) {
	    this._internalRoot = null;
	    var container = root.containerInfo;

	    {
	      if (isAlreadyRendering()) {
	        error('Attempted to synchronously unmount a root while React was already ' + 'rendering. React cannot finish unmounting the root until the ' + 'current render has completed, which may lead to a race condition.');
	      }
	    }

	    flushSync(function () {
	      updateContainer(null, root, null, null);
	    });
	    unmarkContainerAsRoot(container);
	  }
	};

	function createRoot(container, options) {
	  if (!isValidContainer(container)) {
	    throw new Error('createRoot(...): Target container is not a DOM element.');
	  }

	  warnIfReactDOMContainerInDEV(container);
	  var isStrictMode = false;
	  var concurrentUpdatesByDefaultOverride = false;
	  var identifierPrefix = '';
	  var onRecoverableError = defaultOnRecoverableError;

	  if (options !== null && options !== undefined) {
	    {
	      if (options.hydrate) {
	        warn('hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.');
	      } else {
	        if (typeof options === 'object' && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) {
	          error('You passed a JSX element to createRoot. You probably meant to ' + 'call root.render instead. ' + 'Example usage:\n\n' + '  let root = createRoot(domContainer);\n' + '  root.render(<App />);');
	        }
	      }
	    }

	    if (options.unstable_strictMode === true) {
	      isStrictMode = true;
	    }

	    if (options.identifierPrefix !== undefined) {
	      identifierPrefix = options.identifierPrefix;
	    }

	    if (options.onRecoverableError !== undefined) {
	      onRecoverableError = options.onRecoverableError;
	    }

	    if (options.transitionCallbacks !== undefined) {
	      options.transitionCallbacks;
	    }
	  }

	  var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
	  markContainerAsRoot(root.current, container);
	  var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
	  listenToAllSupportedEvents(rootContainerElement);
	  return new ReactDOMRoot(root);
	}

	function ReactDOMHydrationRoot(internalRoot) {
	  this._internalRoot = internalRoot;
	}

	function scheduleHydration(target) {
	  if (target) {
	    queueExplicitHydrationTarget(target);
	  }
	}

	ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
	function hydrateRoot(container, initialChildren, options) {
	  if (!isValidContainer(container)) {
	    throw new Error('hydrateRoot(...): Target container is not a DOM element.');
	  }

	  warnIfReactDOMContainerInDEV(container);

	  {
	    if (initialChildren === undefined) {
	      error('Must provide initial children as second argument to hydrateRoot. ' + 'Example usage: hydrateRoot(domContainer, <App />)');
	    }
	  } // For now we reuse the whole bag of options since they contain
	  // the hydration callbacks.


	  var hydrationCallbacks = options != null ? options : null; // TODO: Delete this option

	  var mutableSources = options != null && options.hydratedSources || null;
	  var isStrictMode = false;
	  var concurrentUpdatesByDefaultOverride = false;
	  var identifierPrefix = '';
	  var onRecoverableError = defaultOnRecoverableError;

	  if (options !== null && options !== undefined) {
	    if (options.unstable_strictMode === true) {
	      isStrictMode = true;
	    }

	    if (options.identifierPrefix !== undefined) {
	      identifierPrefix = options.identifierPrefix;
	    }

	    if (options.onRecoverableError !== undefined) {
	      onRecoverableError = options.onRecoverableError;
	    }
	  }

	  var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
	  markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.

	  listenToAllSupportedEvents(container);

	  if (mutableSources) {
	    for (var i = 0; i < mutableSources.length; i++) {
	      var mutableSource = mutableSources[i];
	      registerMutableSourceForHydration(root, mutableSource);
	    }
	  }

	  return new ReactDOMHydrationRoot(root);
	}
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers  ));
	} // TODO: Remove this function which also includes comment nodes.
	// We only use it in places that are currently more relaxed.

	function isValidContainerLegacy(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
	}

	function warnIfReactDOMContainerInDEV(container) {
	  {
	    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
	      error('createRoot(): Creating roots directly with document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try using a container element created ' + 'for your app.');
	    }

	    if (isContainerMarkedAsRoot(container)) {
	      if (container._reactRootContainer) {
	        error('You are calling ReactDOMClient.createRoot() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.');
	      } else {
	        error('You are calling ReactDOMClient.createRoot() on a container that ' + 'has already been passed to createRoot() before. Instead, call ' + 'root.render() on the existing root instead if you want to update it.');
	      }
	    }
	  }
	}

	var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
	var topLevelUpdateWarnings;

	{
	  topLevelUpdateWarnings = function (container) {
	    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);

	      if (hostInstance) {
	        if (hostInstance.parentNode !== container) {
	          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
	        }
	      }
	    }

	    var isRootRenderedBySomeReact = !!container._reactRootContainer;
	    var rootEl = getReactRootElementInContainer(container);
	    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));

	    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
	      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
	    }

	    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
	      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
	    }
	  };
	}

	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOCUMENT_NODE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function noopOnRecoverableError() {// This isn't reachable because onRecoverableError isn't called in the
	  // legacy API.
	}

	function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
	  if (isHydrationContainer) {
	    if (typeof callback === 'function') {
	      var originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(root);
	        originalCallback.call(instance);
	      };
	    }

	    var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, // hydrationCallbacks
	    false, // isStrictMode
	    false, // concurrentUpdatesByDefaultOverride,
	    '', // identifierPrefix
	    noopOnRecoverableError);
	    container._reactRootContainer = root;
	    markContainerAsRoot(root.current, container);
	    var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
	    listenToAllSupportedEvents(rootContainerElement);
	    flushSync();
	    return root;
	  } else {
	    // First clear any existing content.
	    var rootSibling;

	    while (rootSibling = container.lastChild) {
	      container.removeChild(rootSibling);
	    }

	    if (typeof callback === 'function') {
	      var _originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(_root);

	        _originalCallback.call(instance);
	      };
	    }

	    var _root = createContainer(container, LegacyRoot, null, // hydrationCallbacks
	    false, // isStrictMode
	    false, // concurrentUpdatesByDefaultOverride,
	    '', // identifierPrefix
	    noopOnRecoverableError);

	    container._reactRootContainer = _root;
	    markContainerAsRoot(_root.current, container);

	    var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;

	    listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.

	    flushSync(function () {
	      updateContainer(initialChildren, _root, parentComponent, callback);
	    });
	    return _root;
	  }
	}

	function warnOnInvalidCallback$1(callback, callerName) {
	  {
	    if (callback !== null && typeof callback !== 'function') {
	      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  }
	}

	function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
	  {
	    topLevelUpdateWarnings(container);
	    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
	  }

	  var maybeRoot = container._reactRootContainer;
	  var root;

	  if (!maybeRoot) {
	    // Initial mount
	    root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
	  } else {
	    root = maybeRoot;

	    if (typeof callback === 'function') {
	      var originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(root);
	        originalCallback.call(instance);
	      };
	    } // Update


	    updateContainer(children, root, parentComponent, callback);
	  }

	  return getPublicRootInstance(root);
	}

	var didWarnAboutFindDOMNode = false;
	function findDOMNode(componentOrElement) {
	  {
	    if (!didWarnAboutFindDOMNode) {
	      didWarnAboutFindDOMNode = true;

	      error('findDOMNode is deprecated and will be removed in the next major ' + 'release. Instead, add a ref directly to the element you want ' + 'to reference. Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node');
	    }

	    var owner = ReactCurrentOwner$3.current;

	    if (owner !== null && owner.stateNode !== null) {
	      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

	      if (!warnedAboutRefsInRender) {
	        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromType(owner.type) || 'A component');
	      }

	      owner.stateNode._warnedAboutRefsInRender = true;
	    }
	  }

	  if (componentOrElement == null) {
	    return null;
	  }

	  if (componentOrElement.nodeType === ELEMENT_NODE) {
	    return componentOrElement;
	  }

	  {
	    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
	  }
	}
	function hydrate(element, container, callback) {
	  {
	    error('ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + "if it's running React 17. Learn " + 'more: https://reactjs.org/link/switch-to-createroot');
	  }

	  if (!isValidContainerLegacy(container)) {
	    throw new Error('Target container is not a DOM element.');
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call hydrateRoot(container, element)?');
	    }
	  } // TODO: throw or warn if we couldn't hydrate?


	  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
	}
	function render(element, container, callback) {
	  {
	    error('ReactDOM.render is no longer supported in React 18. Use createRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + "if it's running React 17. Learn " + 'more: https://reactjs.org/link/switch-to-createroot');
	  }

	  if (!isValidContainerLegacy(container)) {
	    throw new Error('Target container is not a DOM element.');
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
	    }
	  }

	  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
	}
	function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
	  {
	    error('ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported ' + 'in React 18. Consider using a portal instead. Until you switch to ' + "the createRoot API, your app will behave as if it's running React " + '17. Learn more: https://reactjs.org/link/switch-to-createroot');
	  }

	  if (!isValidContainerLegacy(containerNode)) {
	    throw new Error('Target container is not a DOM element.');
	  }

	  if (parentComponent == null || !has(parentComponent)) {
	    throw new Error('parentComponent must be a valid React Component');
	  }

	  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
	}
	var didWarnAboutUnmountComponentAtNode = false;
	function unmountComponentAtNode(container) {
	  {
	    if (!didWarnAboutUnmountComponentAtNode) {
	      didWarnAboutUnmountComponentAtNode = true;

	      error('unmountComponentAtNode is deprecated and will be removed in the ' + 'next major release. Switch to the createRoot API. Learn ' + 'more: https://reactjs.org/link/switch-to-createroot');
	    }
	  }

	  if (!isValidContainerLegacy(container)) {
	    throw new Error('unmountComponentAtNode(...): Target container is not a DOM element.');
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?');
	    }
	  }

	  if (container._reactRootContainer) {
	    {
	      var rootEl = getReactRootElementInContainer(container);
	      var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);

	      if (renderedByDifferentReact) {
	        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
	      }
	    } // Unmount should not be batched.


	    flushSync(function () {
	      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
	        // $FlowFixMe This should probably use `delete container._reactRootContainer`
	        container._reactRootContainer = null;
	        unmarkContainerAsRoot(container);
	      });
	    }); // If you call unmountComponentAtNode twice in quick succession, you'll
	    // get `true` twice. That's probably fine?

	    return true;
	  } else {
	    {
	      var _rootEl = getReactRootElementInContainer(container);

	      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.

	      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;

	      if (hasNonRootReactChild) {
	        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
	      }
	    }

	    return false;
	  }
	}

	setAttemptSynchronousHydration(attemptSynchronousHydration$1);
	setAttemptContinuousHydration(attemptContinuousHydration$1);
	setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
	setGetCurrentUpdatePriority(getCurrentUpdatePriority);
	setAttemptHydrationAtPriority(runWithPriority);

	{
	  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
	  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
	  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
	    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
	  }
	}

	setRestoreImplementation(restoreControlledState$3);
	setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);

	function createPortal$1(children, container) {
	  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  if (!isValidContainer(container)) {
	    throw new Error('Target container is not a DOM element.');
	  } // TODO: pass ReactDOM portal implementation as third argument
	  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


	  return createPortal(children, container, null, key);
	}

	function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
	  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
	}

	var Internals = {
	  usingClientEntryPoint: false,
	  // Keep in sync with ReactTestUtils.js.
	  // This is an array for better minification.
	  Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
	};

	function createRoot$1(container, options) {
	  {
	    if (!Internals.usingClientEntryPoint && !false) {
	      error('You are importing createRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
	    }
	  }

	  return createRoot(container, options);
	}

	function hydrateRoot$1(container, initialChildren, options) {
	  {
	    if (!Internals.usingClientEntryPoint && !false) {
	      error('You are importing hydrateRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
	    }
	  }

	  return hydrateRoot(container, initialChildren, options);
	} // Overload the definition to the two valid signatures.
	// Warning, this opts-out of checking the function body.


	// eslint-disable-next-line no-redeclare
	function flushSync$1(fn) {
	  {
	    if (isAlreadyRendering()) {
	      error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
	    }
	  }

	  return flushSync(fn);
	}
	var foundDevTools = injectIntoDevTools({
	  findFiberByHostInstance: getClosestInstanceFromNode,
	  bundleType:  1 ,
	  version: ReactVersion,
	  rendererPackageName: 'react-dom'
	});

	{
	  if (!foundDevTools && canUseDOM && window.top === window.self) {
	    // If we're in Chrome or Firefox, provide a download link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

	      if (/^(https?|file):$/.test(protocol)) {
	        // eslint-disable-next-line react-internal/no-production-logging
	        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');
	      }
	    }
	  }
	}

	reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
	reactDom_development.createPortal = createPortal$1;
	reactDom_development.createRoot = createRoot$1;
	reactDom_development.findDOMNode = findDOMNode;
	reactDom_development.flushSync = flushSync$1;
	reactDom_development.hydrate = hydrate;
	reactDom_development.hydrateRoot = hydrateRoot$1;
	reactDom_development.render = render;
	reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
	reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
	reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
	reactDom_development.version = ReactVersion;
	          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
	    'function'
	) {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
	}
	        
	  })();
	}
	return reactDom_development;
}

function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (process.env.NODE_ENV === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  reactDom.exports = requireReactDom_production_min();
} else {
  reactDom.exports = requireReactDom_development();
}

var reactDomExports = reactDom.exports;

var createRoot;

var m = reactDomExports;
if (process.env.NODE_ENV === 'production') {
  createRoot = m.createRoot;
  m.hydrateRoot;
} else {
  var i$1 = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  createRoot = function(c, o) {
    i$1.usingClientEntryPoint = true;
    try {
      return m.createRoot(c, o);
    } finally {
      i$1.usingClientEntryPoint = false;
    }
  };
}

// src/subscribable.ts
var Subscribable = class {
  constructor() {
    this.listeners = /* @__PURE__ */ new Set();
    this.subscribe = this.subscribe.bind(this);
  }
  subscribe(listener) {
    this.listeners.add(listener);
    this.onSubscribe();
    return () => {
      this.listeners.delete(listener);
      this.onUnsubscribe();
    };
  }
  hasListeners() {
    return this.listeners.size > 0;
  }
  onSubscribe() {
  }
  onUnsubscribe() {
  }
};

// src/utils.ts
var isServer = typeof window === "undefined" || "Deno" in globalThis;
function noop$7() {
  return void 0;
}
function functionalUpdate(updater, input) {
  return typeof updater === "function" ? updater(input) : updater;
}
function isValidTimeout(value) {
  return typeof value === "number" && value >= 0 && value !== Infinity;
}
function timeUntilStale(updatedAt, staleTime) {
  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
}
function resolveStaleTime(staleTime, query) {
  return typeof staleTime === "function" ? staleTime(query) : staleTime;
}
function resolveEnabled(enabled, query) {
  return typeof enabled === "function" ? enabled(query) : enabled;
}
function matchQuery(filters, query) {
  const {
    type = "all",
    exact,
    fetchStatus,
    predicate,
    queryKey,
    stale
  } = filters;
  if (queryKey) {
    if (exact) {
      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
        return false;
      }
    } else if (!partialMatchKey(query.queryKey, queryKey)) {
      return false;
    }
  }
  if (type !== "all") {
    const isActive = query.isActive();
    if (type === "active" && !isActive) {
      return false;
    }
    if (type === "inactive" && isActive) {
      return false;
    }
  }
  if (typeof stale === "boolean" && query.isStale() !== stale) {
    return false;
  }
  if (fetchStatus && fetchStatus !== query.state.fetchStatus) {
    return false;
  }
  if (predicate && !predicate(query)) {
    return false;
  }
  return true;
}
function matchMutation(filters, mutation) {
  const { exact, status, predicate, mutationKey } = filters;
  if (mutationKey) {
    if (!mutation.options.mutationKey) {
      return false;
    }
    if (exact) {
      if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {
        return false;
      }
    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
      return false;
    }
  }
  if (status && mutation.state.status !== status) {
    return false;
  }
  if (predicate && !predicate(mutation)) {
    return false;
  }
  return true;
}
function hashQueryKeyByOptions(queryKey, options) {
  const hashFn = options?.queryKeyHashFn || hashKey;
  return hashFn(queryKey);
}
function hashKey(queryKey) {
  return JSON.stringify(
    queryKey,
    (_, val) => isPlainObject$1(val) ? Object.keys(val).sort().reduce((result, key) => {
      result[key] = val[key];
      return result;
    }, {}) : val
  );
}
function partialMatchKey(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== typeof b) {
    return false;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    return !Object.keys(b).some((key) => !partialMatchKey(a[key], b[key]));
  }
  return false;
}
function replaceEqualDeep(a, b) {
  if (a === b) {
    return a;
  }
  const array = isPlainArray(a) && isPlainArray(b);
  if (array || isPlainObject$1(a) && isPlainObject$1(b)) {
    const aItems = array ? a : Object.keys(a);
    const aSize = aItems.length;
    const bItems = array ? b : Object.keys(b);
    const bSize = bItems.length;
    const copy = array ? [] : {};
    let equalItems = 0;
    for (let i = 0; i < bSize; i++) {
      const key = array ? i : bItems[i];
      if ((!array && aItems.includes(key) || array) && a[key] === void 0 && b[key] === void 0) {
        copy[key] = void 0;
        equalItems++;
      } else {
        copy[key] = replaceEqualDeep(a[key], b[key]);
        if (copy[key] === a[key] && a[key] !== void 0) {
          equalItems++;
        }
      }
    }
    return aSize === bSize && equalItems === aSize ? a : copy;
  }
  return b;
}
function shallowEqualObjects(a, b) {
  if (!b || Object.keys(a).length !== Object.keys(b).length) {
    return false;
  }
  for (const key in a) {
    if (a[key] !== b[key]) {
      return false;
    }
  }
  return true;
}
function isPlainArray(value) {
  return Array.isArray(value) && value.length === Object.keys(value).length;
}
function isPlainObject$1(o) {
  if (!hasObjectPrototype(o)) {
    return false;
  }
  const ctor = o.constructor;
  if (ctor === void 0) {
    return true;
  }
  const prot = ctor.prototype;
  if (!hasObjectPrototype(prot)) {
    return false;
  }
  if (!prot.hasOwnProperty("isPrototypeOf")) {
    return false;
  }
  if (Object.getPrototypeOf(o) !== Object.prototype) {
    return false;
  }
  return true;
}
function hasObjectPrototype(o) {
  return Object.prototype.toString.call(o) === "[object Object]";
}
function sleep(timeout) {
  return new Promise((resolve) => {
    setTimeout(resolve, timeout);
  });
}
function replaceData(prevData, data, options) {
  if (typeof options.structuralSharing === "function") {
    return options.structuralSharing(prevData, data);
  } else if (options.structuralSharing !== false) {
    if (process.env.NODE_ENV !== "production") {
      try {
        return replaceEqualDeep(prevData, data);
      } catch (error) {
        console.error(
          `Structural sharing requires data to be JSON serializable. To fix this, turn off structuralSharing or return JSON-serializable data from your queryFn. [${options.queryHash}]: ${error}`
        );
      }
    }
    return replaceEqualDeep(prevData, data);
  }
  return data;
}
function addToEnd(items, item, max = 0) {
  const newItems = [...items, item];
  return max && newItems.length > max ? newItems.slice(1) : newItems;
}
function addToStart(items, item, max = 0) {
  const newItems = [item, ...items];
  return max && newItems.length > max ? newItems.slice(0, -1) : newItems;
}
var skipToken = Symbol();
function ensureQueryFn(options, fetchOptions) {
  if (process.env.NODE_ENV !== "production") {
    if (options.queryFn === skipToken) {
      console.error(
        `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${options.queryHash}'`
      );
    }
  }
  if (!options.queryFn && fetchOptions?.initialPromise) {
    return () => fetchOptions.initialPromise;
  }
  if (!options.queryFn || options.queryFn === skipToken) {
    return () => Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`));
  }
  return options.queryFn;
}

// src/focusManager.ts
var FocusManager = class extends Subscribable {
  #focused;
  #cleanup;
  #setup;
  constructor() {
    super();
    this.#setup = (onFocus) => {
      if (!isServer && window.addEventListener) {
        const listener = () => onFocus();
        window.addEventListener("visibilitychange", listener, false);
        return () => {
          window.removeEventListener("visibilitychange", listener);
        };
      }
      return;
    };
  }
  onSubscribe() {
    if (!this.#cleanup) {
      this.setEventListener(this.#setup);
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      this.#cleanup?.();
      this.#cleanup = void 0;
    }
  }
  setEventListener(setup) {
    this.#setup = setup;
    this.#cleanup?.();
    this.#cleanup = setup((focused) => {
      if (typeof focused === "boolean") {
        this.setFocused(focused);
      } else {
        this.onFocus();
      }
    });
  }
  setFocused(focused) {
    const changed = this.#focused !== focused;
    if (changed) {
      this.#focused = focused;
      this.onFocus();
    }
  }
  onFocus() {
    const isFocused = this.isFocused();
    this.listeners.forEach((listener) => {
      listener(isFocused);
    });
  }
  isFocused() {
    if (typeof this.#focused === "boolean") {
      return this.#focused;
    }
    return globalThis.document?.visibilityState !== "hidden";
  }
};
var focusManager = new FocusManager();

// src/onlineManager.ts
var OnlineManager = class extends Subscribable {
  #online = true;
  #cleanup;
  #setup;
  constructor() {
    super();
    this.#setup = (onOnline) => {
      if (!isServer && window.addEventListener) {
        const onlineListener = () => onOnline(true);
        const offlineListener = () => onOnline(false);
        window.addEventListener("online", onlineListener, false);
        window.addEventListener("offline", offlineListener, false);
        return () => {
          window.removeEventListener("online", onlineListener);
          window.removeEventListener("offline", offlineListener);
        };
      }
      return;
    };
  }
  onSubscribe() {
    if (!this.#cleanup) {
      this.setEventListener(this.#setup);
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      this.#cleanup?.();
      this.#cleanup = void 0;
    }
  }
  setEventListener(setup) {
    this.#setup = setup;
    this.#cleanup?.();
    this.#cleanup = setup(this.setOnline.bind(this));
  }
  setOnline(online) {
    const changed = this.#online !== online;
    if (changed) {
      this.#online = online;
      this.listeners.forEach((listener) => {
        listener(online);
      });
    }
  }
  isOnline() {
    return this.#online;
  }
};
var onlineManager = new OnlineManager();

// src/thenable.ts
function pendingThenable() {
  let resolve;
  let reject;
  const thenable = new Promise((_resolve, _reject) => {
    resolve = _resolve;
    reject = _reject;
  });
  thenable.status = "pending";
  thenable.catch(() => {
  });
  function finalize(data) {
    Object.assign(thenable, data);
    delete thenable.resolve;
    delete thenable.reject;
  }
  thenable.resolve = (value) => {
    finalize({
      status: "fulfilled",
      value
    });
    resolve(value);
  };
  thenable.reject = (reason) => {
    finalize({
      status: "rejected",
      reason
    });
    reject(reason);
  };
  return thenable;
}

// src/retryer.ts
function defaultRetryDelay(failureCount) {
  return Math.min(1e3 * 2 ** failureCount, 3e4);
}
function canFetch(networkMode) {
  return (networkMode ?? "online") === "online" ? onlineManager.isOnline() : true;
}
var CancelledError = class extends Error {
  constructor(options) {
    super("CancelledError");
    this.revert = options?.revert;
    this.silent = options?.silent;
  }
};
function isCancelledError(value) {
  return value instanceof CancelledError;
}
function createRetryer(config) {
  let isRetryCancelled = false;
  let failureCount = 0;
  let isResolved = false;
  let continueFn;
  const thenable = pendingThenable();
  const cancel = (cancelOptions) => {
    if (!isResolved) {
      reject(new CancelledError(cancelOptions));
      config.abort?.();
    }
  };
  const cancelRetry = () => {
    isRetryCancelled = true;
  };
  const continueRetry = () => {
    isRetryCancelled = false;
  };
  const canContinue = () => focusManager.isFocused() && (config.networkMode === "always" || onlineManager.isOnline()) && config.canRun();
  const canStart = () => canFetch(config.networkMode) && config.canRun();
  const resolve = (value) => {
    if (!isResolved) {
      isResolved = true;
      config.onSuccess?.(value);
      continueFn?.();
      thenable.resolve(value);
    }
  };
  const reject = (value) => {
    if (!isResolved) {
      isResolved = true;
      config.onError?.(value);
      continueFn?.();
      thenable.reject(value);
    }
  };
  const pause = () => {
    return new Promise((continueResolve) => {
      continueFn = (value) => {
        if (isResolved || canContinue()) {
          continueResolve(value);
        }
      };
      config.onPause?.();
    }).then(() => {
      continueFn = void 0;
      if (!isResolved) {
        config.onContinue?.();
      }
    });
  };
  const run = () => {
    if (isResolved) {
      return;
    }
    let promiseOrValue;
    const initialPromise = failureCount === 0 ? config.initialPromise : void 0;
    try {
      promiseOrValue = initialPromise ?? config.fn();
    } catch (error) {
      promiseOrValue = Promise.reject(error);
    }
    Promise.resolve(promiseOrValue).then(resolve).catch((error) => {
      if (isResolved) {
        return;
      }
      const retry = config.retry ?? (isServer ? 0 : 3);
      const retryDelay = config.retryDelay ?? defaultRetryDelay;
      const delay = typeof retryDelay === "function" ? retryDelay(failureCount, error) : retryDelay;
      const shouldRetry = retry === true || typeof retry === "number" && failureCount < retry || typeof retry === "function" && retry(failureCount, error);
      if (isRetryCancelled || !shouldRetry) {
        reject(error);
        return;
      }
      failureCount++;
      config.onFail?.(failureCount, error);
      sleep(delay).then(() => {
        return canContinue() ? void 0 : pause();
      }).then(() => {
        if (isRetryCancelled) {
          reject(error);
        } else {
          run();
        }
      });
    });
  };
  return {
    promise: thenable,
    cancel,
    continue: () => {
      continueFn?.();
      return thenable;
    },
    cancelRetry,
    continueRetry,
    canStart,
    start: () => {
      if (canStart()) {
        run();
      } else {
        pause().then(run);
      }
      return thenable;
    }
  };
}

// src/notifyManager.ts
function createNotifyManager() {
  let queue = [];
  let transactions = 0;
  let notifyFn = (callback) => {
    callback();
  };
  let batchNotifyFn = (callback) => {
    callback();
  };
  let scheduleFn = (cb) => setTimeout(cb, 0);
  const schedule = (callback) => {
    if (transactions) {
      queue.push(callback);
    } else {
      scheduleFn(() => {
        notifyFn(callback);
      });
    }
  };
  const flush = () => {
    const originalQueue = queue;
    queue = [];
    if (originalQueue.length) {
      scheduleFn(() => {
        batchNotifyFn(() => {
          originalQueue.forEach((callback) => {
            notifyFn(callback);
          });
        });
      });
    }
  };
  return {
    batch: (callback) => {
      let result;
      transactions++;
      try {
        result = callback();
      } finally {
        transactions--;
        if (!transactions) {
          flush();
        }
      }
      return result;
    },
    /**
     * All calls to the wrapped function will be batched.
     */
    batchCalls: (callback) => {
      return (...args) => {
        schedule(() => {
          callback(...args);
        });
      };
    },
    schedule,
    /**
     * Use this method to set a custom notify function.
     * This can be used to for example wrap notifications with `React.act` while running tests.
     */
    setNotifyFunction: (fn) => {
      notifyFn = fn;
    },
    /**
     * Use this method to set a custom function to batch notifications together into a single tick.
     * By default React Query will use the batch function provided by ReactDOM or React Native.
     */
    setBatchNotifyFunction: (fn) => {
      batchNotifyFn = fn;
    },
    setScheduler: (fn) => {
      scheduleFn = fn;
    }
  };
}
var notifyManager = createNotifyManager();

// src/removable.ts
var Removable = class {
  #gcTimeout;
  destroy() {
    this.clearGcTimeout();
  }
  scheduleGc() {
    this.clearGcTimeout();
    if (isValidTimeout(this.gcTime)) {
      this.#gcTimeout = setTimeout(() => {
        this.optionalRemove();
      }, this.gcTime);
    }
  }
  updateGcTime(newGcTime) {
    this.gcTime = Math.max(
      this.gcTime || 0,
      newGcTime ?? (isServer ? Infinity : 5 * 60 * 1e3)
    );
  }
  clearGcTimeout() {
    if (this.#gcTimeout) {
      clearTimeout(this.#gcTimeout);
      this.#gcTimeout = void 0;
    }
  }
};

// src/query.ts
var Query = class extends Removable {
  #initialState;
  #revertState;
  #cache;
  #retryer;
  #defaultOptions;
  #abortSignalConsumed;
  constructor(config) {
    super();
    this.#abortSignalConsumed = false;
    this.#defaultOptions = config.defaultOptions;
    this.setOptions(config.options);
    this.observers = [];
    this.#cache = config.cache;
    this.queryKey = config.queryKey;
    this.queryHash = config.queryHash;
    this.#initialState = getDefaultState$1(this.options);
    this.state = config.state ?? this.#initialState;
    this.scheduleGc();
  }
  get meta() {
    return this.options.meta;
  }
  get promise() {
    return this.#retryer?.promise;
  }
  setOptions(options) {
    this.options = { ...this.#defaultOptions, ...options };
    this.updateGcTime(this.options.gcTime);
  }
  optionalRemove() {
    if (!this.observers.length && this.state.fetchStatus === "idle") {
      this.#cache.remove(this);
    }
  }
  setData(newData, options) {
    const data = replaceData(this.state.data, newData, this.options);
    this.#dispatch({
      data,
      type: "success",
      dataUpdatedAt: options?.updatedAt,
      manual: options?.manual
    });
    return data;
  }
  setState(state, setStateOptions) {
    this.#dispatch({ type: "setState", state, setStateOptions });
  }
  cancel(options) {
    const promise = this.#retryer?.promise;
    this.#retryer?.cancel(options);
    return promise ? promise.then(noop$7).catch(noop$7) : Promise.resolve();
  }
  destroy() {
    super.destroy();
    this.cancel({ silent: true });
  }
  reset() {
    this.destroy();
    this.setState(this.#initialState);
  }
  isActive() {
    return this.observers.some(
      (observer) => resolveEnabled(observer.options.enabled, this) !== false
    );
  }
  isDisabled() {
    return this.getObserversCount() > 0 && !this.isActive();
  }
  isStale() {
    if (this.state.isInvalidated) {
      return true;
    }
    if (this.getObserversCount() > 0) {
      return this.observers.some(
        (observer) => observer.getCurrentResult().isStale
      );
    }
    return this.state.data === void 0;
  }
  isStaleByTime(staleTime = 0) {
    return this.state.isInvalidated || this.state.data === void 0 || !timeUntilStale(this.state.dataUpdatedAt, staleTime);
  }
  onFocus() {
    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus());
    observer?.refetch({ cancelRefetch: false });
    this.#retryer?.continue();
  }
  onOnline() {
    const observer = this.observers.find((x) => x.shouldFetchOnReconnect());
    observer?.refetch({ cancelRefetch: false });
    this.#retryer?.continue();
  }
  addObserver(observer) {
    if (!this.observers.includes(observer)) {
      this.observers.push(observer);
      this.clearGcTimeout();
      this.#cache.notify({ type: "observerAdded", query: this, observer });
    }
  }
  removeObserver(observer) {
    if (this.observers.includes(observer)) {
      this.observers = this.observers.filter((x) => x !== observer);
      if (!this.observers.length) {
        if (this.#retryer) {
          if (this.#abortSignalConsumed) {
            this.#retryer.cancel({ revert: true });
          } else {
            this.#retryer.cancelRetry();
          }
        }
        this.scheduleGc();
      }
      this.#cache.notify({ type: "observerRemoved", query: this, observer });
    }
  }
  getObserversCount() {
    return this.observers.length;
  }
  invalidate() {
    if (!this.state.isInvalidated) {
      this.#dispatch({ type: "invalidate" });
    }
  }
  fetch(options, fetchOptions) {
    if (this.state.fetchStatus !== "idle") {
      if (this.state.data !== void 0 && fetchOptions?.cancelRefetch) {
        this.cancel({ silent: true });
      } else if (this.#retryer) {
        this.#retryer.continueRetry();
        return this.#retryer.promise;
      }
    }
    if (options) {
      this.setOptions(options);
    }
    if (!this.options.queryFn) {
      const observer = this.observers.find((x) => x.options.queryFn);
      if (observer) {
        this.setOptions(observer.options);
      }
    }
    if (process.env.NODE_ENV !== "production") {
      if (!Array.isArray(this.options.queryKey)) {
        console.error(
          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`
        );
      }
    }
    const abortController = new AbortController();
    const addSignalProperty = (object) => {
      Object.defineProperty(object, "signal", {
        enumerable: true,
        get: () => {
          this.#abortSignalConsumed = true;
          return abortController.signal;
        }
      });
    };
    const fetchFn = () => {
      const queryFn = ensureQueryFn(this.options, fetchOptions);
      const queryFnContext = {
        queryKey: this.queryKey,
        meta: this.meta
      };
      addSignalProperty(queryFnContext);
      this.#abortSignalConsumed = false;
      if (this.options.persister) {
        return this.options.persister(
          queryFn,
          queryFnContext,
          this
        );
      }
      return queryFn(queryFnContext);
    };
    const context = {
      fetchOptions,
      options: this.options,
      queryKey: this.queryKey,
      state: this.state,
      fetchFn
    };
    addSignalProperty(context);
    this.options.behavior?.onFetch(
      context,
      this
    );
    this.#revertState = this.state;
    if (this.state.fetchStatus === "idle" || this.state.fetchMeta !== context.fetchOptions?.meta) {
      this.#dispatch({ type: "fetch", meta: context.fetchOptions?.meta });
    }
    const onError = (error) => {
      if (!(isCancelledError(error) && error.silent)) {
        this.#dispatch({
          type: "error",
          error
        });
      }
      if (!isCancelledError(error)) {
        this.#cache.config.onError?.(
          error,
          this
        );
        this.#cache.config.onSettled?.(
          this.state.data,
          error,
          this
        );
      }
      if (!this.isFetchingOptimistic) {
        this.scheduleGc();
      }
      this.isFetchingOptimistic = false;
    };
    this.#retryer = createRetryer({
      initialPromise: fetchOptions?.initialPromise,
      fn: context.fetchFn,
      abort: abortController.abort.bind(abortController),
      onSuccess: (data) => {
        if (data === void 0) {
          if (process.env.NODE_ENV !== "production") {
            console.error(
              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`
            );
          }
          onError(new Error(`${this.queryHash} data is undefined`));
          return;
        }
        try {
          this.setData(data);
        } catch (error) {
          onError(error);
          return;
        }
        this.#cache.config.onSuccess?.(data, this);
        this.#cache.config.onSettled?.(
          data,
          this.state.error,
          this
        );
        if (!this.isFetchingOptimistic) {
          this.scheduleGc();
        }
        this.isFetchingOptimistic = false;
      },
      onError,
      onFail: (failureCount, error) => {
        this.#dispatch({ type: "failed", failureCount, error });
      },
      onPause: () => {
        this.#dispatch({ type: "pause" });
      },
      onContinue: () => {
        this.#dispatch({ type: "continue" });
      },
      retry: context.options.retry,
      retryDelay: context.options.retryDelay,
      networkMode: context.options.networkMode,
      canRun: () => true
    });
    return this.#retryer.start();
  }
  #dispatch(action) {
    const reducer = (state) => {
      switch (action.type) {
        case "failed":
          return {
            ...state,
            fetchFailureCount: action.failureCount,
            fetchFailureReason: action.error
          };
        case "pause":
          return {
            ...state,
            fetchStatus: "paused"
          };
        case "continue":
          return {
            ...state,
            fetchStatus: "fetching"
          };
        case "fetch":
          return {
            ...state,
            ...fetchState(state.data, this.options),
            fetchMeta: action.meta ?? null
          };
        case "success":
          return {
            ...state,
            data: action.data,
            dataUpdateCount: state.dataUpdateCount + 1,
            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),
            error: null,
            isInvalidated: false,
            status: "success",
            ...!action.manual && {
              fetchStatus: "idle",
              fetchFailureCount: 0,
              fetchFailureReason: null
            }
          };
        case "error":
          const error = action.error;
          if (isCancelledError(error) && error.revert && this.#revertState) {
            return { ...this.#revertState, fetchStatus: "idle" };
          }
          return {
            ...state,
            error,
            errorUpdateCount: state.errorUpdateCount + 1,
            errorUpdatedAt: Date.now(),
            fetchFailureCount: state.fetchFailureCount + 1,
            fetchFailureReason: error,
            fetchStatus: "idle",
            status: "error"
          };
        case "invalidate":
          return {
            ...state,
            isInvalidated: true
          };
        case "setState":
          return {
            ...state,
            ...action.state
          };
      }
    };
    this.state = reducer(this.state);
    notifyManager.batch(() => {
      this.observers.forEach((observer) => {
        observer.onQueryUpdate();
      });
      this.#cache.notify({ query: this, type: "updated", action });
    });
  }
};
function fetchState(data, options) {
  return {
    fetchFailureCount: 0,
    fetchFailureReason: null,
    fetchStatus: canFetch(options.networkMode) ? "fetching" : "paused",
    ...data === void 0 && {
      error: null,
      status: "pending"
    }
  };
}
function getDefaultState$1(options) {
  const data = typeof options.initialData === "function" ? options.initialData() : options.initialData;
  const hasData = data !== void 0;
  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === "function" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;
  return {
    data,
    dataUpdateCount: 0,
    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,
    error: null,
    errorUpdateCount: 0,
    errorUpdatedAt: 0,
    fetchFailureCount: 0,
    fetchFailureReason: null,
    fetchMeta: null,
    isInvalidated: false,
    status: hasData ? "success" : "pending",
    fetchStatus: "idle"
  };
}

// src/queryCache.ts
var QueryCache = class extends Subscribable {
  constructor(config = {}) {
    super();
    this.config = config;
    this.#queries = /* @__PURE__ */ new Map();
  }
  #queries;
  build(client, options, state) {
    const queryKey = options.queryKey;
    const queryHash = options.queryHash ?? hashQueryKeyByOptions(queryKey, options);
    let query = this.get(queryHash);
    if (!query) {
      query = new Query({
        cache: this,
        queryKey,
        queryHash,
        options: client.defaultQueryOptions(options),
        state,
        defaultOptions: client.getQueryDefaults(queryKey)
      });
      this.add(query);
    }
    return query;
  }
  add(query) {
    if (!this.#queries.has(query.queryHash)) {
      this.#queries.set(query.queryHash, query);
      this.notify({
        type: "added",
        query
      });
    }
  }
  remove(query) {
    const queryInMap = this.#queries.get(query.queryHash);
    if (queryInMap) {
      query.destroy();
      if (queryInMap === query) {
        this.#queries.delete(query.queryHash);
      }
      this.notify({ type: "removed", query });
    }
  }
  clear() {
    notifyManager.batch(() => {
      this.getAll().forEach((query) => {
        this.remove(query);
      });
    });
  }
  get(queryHash) {
    return this.#queries.get(queryHash);
  }
  getAll() {
    return [...this.#queries.values()];
  }
  find(filters) {
    const defaultedFilters = { exact: true, ...filters };
    return this.getAll().find(
      (query) => matchQuery(defaultedFilters, query)
    );
  }
  findAll(filters = {}) {
    const queries = this.getAll();
    return Object.keys(filters).length > 0 ? queries.filter((query) => matchQuery(filters, query)) : queries;
  }
  notify(event) {
    notifyManager.batch(() => {
      this.listeners.forEach((listener) => {
        listener(event);
      });
    });
  }
  onFocus() {
    notifyManager.batch(() => {
      this.getAll().forEach((query) => {
        query.onFocus();
      });
    });
  }
  onOnline() {
    notifyManager.batch(() => {
      this.getAll().forEach((query) => {
        query.onOnline();
      });
    });
  }
};

// src/mutation.ts
var Mutation = class extends Removable {
  #observers;
  #mutationCache;
  #retryer;
  constructor(config) {
    super();
    this.mutationId = config.mutationId;
    this.#mutationCache = config.mutationCache;
    this.#observers = [];
    this.state = config.state || getDefaultState();
    this.setOptions(config.options);
    this.scheduleGc();
  }
  setOptions(options) {
    this.options = options;
    this.updateGcTime(this.options.gcTime);
  }
  get meta() {
    return this.options.meta;
  }
  addObserver(observer) {
    if (!this.#observers.includes(observer)) {
      this.#observers.push(observer);
      this.clearGcTimeout();
      this.#mutationCache.notify({
        type: "observerAdded",
        mutation: this,
        observer
      });
    }
  }
  removeObserver(observer) {
    this.#observers = this.#observers.filter((x) => x !== observer);
    this.scheduleGc();
    this.#mutationCache.notify({
      type: "observerRemoved",
      mutation: this,
      observer
    });
  }
  optionalRemove() {
    if (!this.#observers.length) {
      if (this.state.status === "pending") {
        this.scheduleGc();
      } else {
        this.#mutationCache.remove(this);
      }
    }
  }
  continue() {
    return this.#retryer?.continue() ?? // continuing a mutation assumes that variables are set, mutation must have been dehydrated before
    this.execute(this.state.variables);
  }
  async execute(variables) {
    this.#retryer = createRetryer({
      fn: () => {
        if (!this.options.mutationFn) {
          return Promise.reject(new Error("No mutationFn found"));
        }
        return this.options.mutationFn(variables);
      },
      onFail: (failureCount, error) => {
        this.#dispatch({ type: "failed", failureCount, error });
      },
      onPause: () => {
        this.#dispatch({ type: "pause" });
      },
      onContinue: () => {
        this.#dispatch({ type: "continue" });
      },
      retry: this.options.retry ?? 0,
      retryDelay: this.options.retryDelay,
      networkMode: this.options.networkMode,
      canRun: () => this.#mutationCache.canRun(this)
    });
    const restored = this.state.status === "pending";
    const isPaused = !this.#retryer.canStart();
    try {
      if (!restored) {
        this.#dispatch({ type: "pending", variables, isPaused });
        await this.#mutationCache.config.onMutate?.(
          variables,
          this
        );
        const context = await this.options.onMutate?.(variables);
        if (context !== this.state.context) {
          this.#dispatch({
            type: "pending",
            context,
            variables,
            isPaused
          });
        }
      }
      const data = await this.#retryer.start();
      await this.#mutationCache.config.onSuccess?.(
        data,
        variables,
        this.state.context,
        this
      );
      await this.options.onSuccess?.(data, variables, this.state.context);
      await this.#mutationCache.config.onSettled?.(
        data,
        null,
        this.state.variables,
        this.state.context,
        this
      );
      await this.options.onSettled?.(data, null, variables, this.state.context);
      this.#dispatch({ type: "success", data });
      return data;
    } catch (error) {
      try {
        await this.#mutationCache.config.onError?.(
          error,
          variables,
          this.state.context,
          this
        );
        await this.options.onError?.(
          error,
          variables,
          this.state.context
        );
        await this.#mutationCache.config.onSettled?.(
          void 0,
          error,
          this.state.variables,
          this.state.context,
          this
        );
        await this.options.onSettled?.(
          void 0,
          error,
          variables,
          this.state.context
        );
        throw error;
      } finally {
        this.#dispatch({ type: "error", error });
      }
    } finally {
      this.#mutationCache.runNext(this);
    }
  }
  #dispatch(action) {
    const reducer = (state) => {
      switch (action.type) {
        case "failed":
          return {
            ...state,
            failureCount: action.failureCount,
            failureReason: action.error
          };
        case "pause":
          return {
            ...state,
            isPaused: true
          };
        case "continue":
          return {
            ...state,
            isPaused: false
          };
        case "pending":
          return {
            ...state,
            context: action.context,
            data: void 0,
            failureCount: 0,
            failureReason: null,
            error: null,
            isPaused: action.isPaused,
            status: "pending",
            variables: action.variables,
            submittedAt: Date.now()
          };
        case "success":
          return {
            ...state,
            data: action.data,
            failureCount: 0,
            failureReason: null,
            error: null,
            status: "success",
            isPaused: false
          };
        case "error":
          return {
            ...state,
            data: void 0,
            error: action.error,
            failureCount: state.failureCount + 1,
            failureReason: action.error,
            isPaused: false,
            status: "error"
          };
      }
    };
    this.state = reducer(this.state);
    notifyManager.batch(() => {
      this.#observers.forEach((observer) => {
        observer.onMutationUpdate(action);
      });
      this.#mutationCache.notify({
        mutation: this,
        type: "updated",
        action
      });
    });
  }
};
function getDefaultState() {
  return {
    context: void 0,
    data: void 0,
    error: null,
    failureCount: 0,
    failureReason: null,
    isPaused: false,
    status: "idle",
    variables: void 0,
    submittedAt: 0
  };
}

// src/mutationCache.ts
var MutationCache = class extends Subscribable {
  constructor(config = {}) {
    super();
    this.config = config;
    this.#mutations = /* @__PURE__ */ new Map();
    this.#mutationId = Date.now();
  }
  #mutations;
  #mutationId;
  build(client, options, state) {
    const mutation = new Mutation({
      mutationCache: this,
      mutationId: ++this.#mutationId,
      options: client.defaultMutationOptions(options),
      state
    });
    this.add(mutation);
    return mutation;
  }
  add(mutation) {
    const scope = scopeFor(mutation);
    const mutations = this.#mutations.get(scope) ?? [];
    mutations.push(mutation);
    this.#mutations.set(scope, mutations);
    this.notify({ type: "added", mutation });
  }
  remove(mutation) {
    const scope = scopeFor(mutation);
    if (this.#mutations.has(scope)) {
      const mutations = this.#mutations.get(scope)?.filter((x) => x !== mutation);
      if (mutations) {
        if (mutations.length === 0) {
          this.#mutations.delete(scope);
        } else {
          this.#mutations.set(scope, mutations);
        }
      }
    }
    this.notify({ type: "removed", mutation });
  }
  canRun(mutation) {
    const firstPendingMutation = this.#mutations.get(scopeFor(mutation))?.find((m) => m.state.status === "pending");
    return !firstPendingMutation || firstPendingMutation === mutation;
  }
  runNext(mutation) {
    const foundMutation = this.#mutations.get(scopeFor(mutation))?.find((m) => m !== mutation && m.state.isPaused);
    return foundMutation?.continue() ?? Promise.resolve();
  }
  clear() {
    notifyManager.batch(() => {
      this.getAll().forEach((mutation) => {
        this.remove(mutation);
      });
    });
  }
  getAll() {
    return [...this.#mutations.values()].flat();
  }
  find(filters) {
    const defaultedFilters = { exact: true, ...filters };
    return this.getAll().find(
      (mutation) => matchMutation(defaultedFilters, mutation)
    );
  }
  findAll(filters = {}) {
    return this.getAll().filter((mutation) => matchMutation(filters, mutation));
  }
  notify(event) {
    notifyManager.batch(() => {
      this.listeners.forEach((listener) => {
        listener(event);
      });
    });
  }
  resumePausedMutations() {
    const pausedMutations = this.getAll().filter((x) => x.state.isPaused);
    return notifyManager.batch(
      () => Promise.all(
        pausedMutations.map((mutation) => mutation.continue().catch(noop$7))
      )
    );
  }
};
function scopeFor(mutation) {
  return mutation.options.scope?.id ?? String(mutation.mutationId);
}

// src/infiniteQueryBehavior.ts
function infiniteQueryBehavior(pages) {
  return {
    onFetch: (context, query) => {
      const options = context.options;
      const direction = context.fetchOptions?.meta?.fetchMore?.direction;
      const oldPages = context.state.data?.pages || [];
      const oldPageParams = context.state.data?.pageParams || [];
      let result = { pages: [], pageParams: [] };
      let currentPage = 0;
      const fetchFn = async () => {
        let cancelled = false;
        const addSignalProperty = (object) => {
          Object.defineProperty(object, "signal", {
            enumerable: true,
            get: () => {
              if (context.signal.aborted) {
                cancelled = true;
              } else {
                context.signal.addEventListener("abort", () => {
                  cancelled = true;
                });
              }
              return context.signal;
            }
          });
        };
        const queryFn = ensureQueryFn(context.options, context.fetchOptions);
        const fetchPage = async (data, param, previous) => {
          if (cancelled) {
            return Promise.reject();
          }
          if (param == null && data.pages.length) {
            return Promise.resolve(data);
          }
          const queryFnContext = {
            queryKey: context.queryKey,
            pageParam: param,
            direction: previous ? "backward" : "forward",
            meta: context.options.meta
          };
          addSignalProperty(queryFnContext);
          const page = await queryFn(
            queryFnContext
          );
          const { maxPages } = context.options;
          const addTo = previous ? addToStart : addToEnd;
          return {
            pages: addTo(data.pages, page, maxPages),
            pageParams: addTo(data.pageParams, param, maxPages)
          };
        };
        if (direction && oldPages.length) {
          const previous = direction === "backward";
          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;
          const oldData = {
            pages: oldPages,
            pageParams: oldPageParams
          };
          const param = pageParamFn(options, oldData);
          result = await fetchPage(oldData, param, previous);
        } else {
          const remainingPages = pages ?? oldPages.length;
          do {
            const param = currentPage === 0 ? oldPageParams[0] ?? options.initialPageParam : getNextPageParam(options, result);
            if (currentPage > 0 && param == null) {
              break;
            }
            result = await fetchPage(result, param);
            currentPage++;
          } while (currentPage < remainingPages);
        }
        return result;
      };
      if (context.options.persister) {
        context.fetchFn = () => {
          return context.options.persister?.(
            fetchFn,
            {
              queryKey: context.queryKey,
              meta: context.options.meta,
              signal: context.signal
            },
            query
          );
        };
      } else {
        context.fetchFn = fetchFn;
      }
    }
  };
}
function getNextPageParam(options, { pages, pageParams }) {
  const lastIndex = pages.length - 1;
  return pages.length > 0 ? options.getNextPageParam(
    pages[lastIndex],
    pages,
    pageParams[lastIndex],
    pageParams
  ) : void 0;
}
function getPreviousPageParam(options, { pages, pageParams }) {
  return pages.length > 0 ? options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams) : void 0;
}

// src/queryClient.ts
var QueryClient = class {
  #queryCache;
  #mutationCache;
  #defaultOptions;
  #queryDefaults;
  #mutationDefaults;
  #mountCount;
  #unsubscribeFocus;
  #unsubscribeOnline;
  constructor(config = {}) {
    this.#queryCache = config.queryCache || new QueryCache();
    this.#mutationCache = config.mutationCache || new MutationCache();
    this.#defaultOptions = config.defaultOptions || {};
    this.#queryDefaults = /* @__PURE__ */ new Map();
    this.#mutationDefaults = /* @__PURE__ */ new Map();
    this.#mountCount = 0;
  }
  mount() {
    this.#mountCount++;
    if (this.#mountCount !== 1)
      return;
    this.#unsubscribeFocus = focusManager.subscribe(async (focused) => {
      if (focused) {
        await this.resumePausedMutations();
        this.#queryCache.onFocus();
      }
    });
    this.#unsubscribeOnline = onlineManager.subscribe(async (online) => {
      if (online) {
        await this.resumePausedMutations();
        this.#queryCache.onOnline();
      }
    });
  }
  unmount() {
    this.#mountCount--;
    if (this.#mountCount !== 0)
      return;
    this.#unsubscribeFocus?.();
    this.#unsubscribeFocus = void 0;
    this.#unsubscribeOnline?.();
    this.#unsubscribeOnline = void 0;
  }
  isFetching(filters) {
    return this.#queryCache.findAll({ ...filters, fetchStatus: "fetching" }).length;
  }
  isMutating(filters) {
    return this.#mutationCache.findAll({ ...filters, status: "pending" }).length;
  }
  getQueryData(queryKey) {
    const options = this.defaultQueryOptions({ queryKey });
    return this.#queryCache.get(options.queryHash)?.state.data;
  }
  ensureQueryData(options) {
    const cachedData = this.getQueryData(options.queryKey);
    if (cachedData === void 0)
      return this.fetchQuery(options);
    else {
      const defaultedOptions = this.defaultQueryOptions(options);
      const query = this.#queryCache.build(this, defaultedOptions);
      if (options.revalidateIfStale && query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))) {
        void this.prefetchQuery(defaultedOptions);
      }
      return Promise.resolve(cachedData);
    }
  }
  getQueriesData(filters) {
    return this.#queryCache.findAll(filters).map(({ queryKey, state }) => {
      const data = state.data;
      return [queryKey, data];
    });
  }
  setQueryData(queryKey, updater, options) {
    const defaultedOptions = this.defaultQueryOptions({ queryKey });
    const query = this.#queryCache.get(
      defaultedOptions.queryHash
    );
    const prevData = query?.state.data;
    const data = functionalUpdate(updater, prevData);
    if (data === void 0) {
      return void 0;
    }
    return this.#queryCache.build(this, defaultedOptions).setData(data, { ...options, manual: true });
  }
  setQueriesData(filters, updater, options) {
    return notifyManager.batch(
      () => this.#queryCache.findAll(filters).map(({ queryKey }) => [
        queryKey,
        this.setQueryData(queryKey, updater, options)
      ])
    );
  }
  getQueryState(queryKey) {
    const options = this.defaultQueryOptions({ queryKey });
    return this.#queryCache.get(options.queryHash)?.state;
  }
  removeQueries(filters) {
    const queryCache = this.#queryCache;
    notifyManager.batch(() => {
      queryCache.findAll(filters).forEach((query) => {
        queryCache.remove(query);
      });
    });
  }
  resetQueries(filters, options) {
    const queryCache = this.#queryCache;
    const refetchFilters = {
      type: "active",
      ...filters
    };
    return notifyManager.batch(() => {
      queryCache.findAll(filters).forEach((query) => {
        query.reset();
      });
      return this.refetchQueries(refetchFilters, options);
    });
  }
  cancelQueries(filters = {}, cancelOptions = {}) {
    const defaultedCancelOptions = { revert: true, ...cancelOptions };
    const promises = notifyManager.batch(
      () => this.#queryCache.findAll(filters).map((query) => query.cancel(defaultedCancelOptions))
    );
    return Promise.all(promises).then(noop$7).catch(noop$7);
  }
  invalidateQueries(filters = {}, options = {}) {
    return notifyManager.batch(() => {
      this.#queryCache.findAll(filters).forEach((query) => {
        query.invalidate();
      });
      if (filters.refetchType === "none") {
        return Promise.resolve();
      }
      const refetchFilters = {
        ...filters,
        type: filters.refetchType ?? filters.type ?? "active"
      };
      return this.refetchQueries(refetchFilters, options);
    });
  }
  refetchQueries(filters = {}, options) {
    const fetchOptions = {
      ...options,
      cancelRefetch: options?.cancelRefetch ?? true
    };
    const promises = notifyManager.batch(
      () => this.#queryCache.findAll(filters).filter((query) => !query.isDisabled()).map((query) => {
        let promise = query.fetch(void 0, fetchOptions);
        if (!fetchOptions.throwOnError) {
          promise = promise.catch(noop$7);
        }
        return query.state.fetchStatus === "paused" ? Promise.resolve() : promise;
      })
    );
    return Promise.all(promises).then(noop$7);
  }
  fetchQuery(options) {
    const defaultedOptions = this.defaultQueryOptions(options);
    if (defaultedOptions.retry === void 0) {
      defaultedOptions.retry = false;
    }
    const query = this.#queryCache.build(this, defaultedOptions);
    return query.isStaleByTime(
      resolveStaleTime(defaultedOptions.staleTime, query)
    ) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
  }
  prefetchQuery(options) {
    return this.fetchQuery(options).then(noop$7).catch(noop$7);
  }
  fetchInfiniteQuery(options) {
    options.behavior = infiniteQueryBehavior(options.pages);
    return this.fetchQuery(options);
  }
  prefetchInfiniteQuery(options) {
    return this.fetchInfiniteQuery(options).then(noop$7).catch(noop$7);
  }
  ensureInfiniteQueryData(options) {
    options.behavior = infiniteQueryBehavior(options.pages);
    return this.ensureQueryData(options);
  }
  resumePausedMutations() {
    if (onlineManager.isOnline()) {
      return this.#mutationCache.resumePausedMutations();
    }
    return Promise.resolve();
  }
  getQueryCache() {
    return this.#queryCache;
  }
  getMutationCache() {
    return this.#mutationCache;
  }
  getDefaultOptions() {
    return this.#defaultOptions;
  }
  setDefaultOptions(options) {
    this.#defaultOptions = options;
  }
  setQueryDefaults(queryKey, options) {
    this.#queryDefaults.set(hashKey(queryKey), {
      queryKey,
      defaultOptions: options
    });
  }
  getQueryDefaults(queryKey) {
    const defaults = [...this.#queryDefaults.values()];
    let result = {};
    defaults.forEach((queryDefault) => {
      if (partialMatchKey(queryKey, queryDefault.queryKey)) {
        result = { ...result, ...queryDefault.defaultOptions };
      }
    });
    return result;
  }
  setMutationDefaults(mutationKey, options) {
    this.#mutationDefaults.set(hashKey(mutationKey), {
      mutationKey,
      defaultOptions: options
    });
  }
  getMutationDefaults(mutationKey) {
    const defaults = [...this.#mutationDefaults.values()];
    let result = {};
    defaults.forEach((queryDefault) => {
      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {
        result = { ...result, ...queryDefault.defaultOptions };
      }
    });
    return result;
  }
  defaultQueryOptions(options) {
    if (options._defaulted) {
      return options;
    }
    const defaultedOptions = {
      ...this.#defaultOptions.queries,
      ...this.getQueryDefaults(options.queryKey),
      ...options,
      _defaulted: true
    };
    if (!defaultedOptions.queryHash) {
      defaultedOptions.queryHash = hashQueryKeyByOptions(
        defaultedOptions.queryKey,
        defaultedOptions
      );
    }
    if (defaultedOptions.refetchOnReconnect === void 0) {
      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== "always";
    }
    if (defaultedOptions.throwOnError === void 0) {
      defaultedOptions.throwOnError = !!defaultedOptions.suspense;
    }
    if (!defaultedOptions.networkMode && defaultedOptions.persister) {
      defaultedOptions.networkMode = "offlineFirst";
    }
    if (defaultedOptions.enabled !== true && defaultedOptions.queryFn === skipToken) {
      defaultedOptions.enabled = false;
    }
    return defaultedOptions;
  }
  defaultMutationOptions(options) {
    if (options?._defaulted) {
      return options;
    }
    return {
      ...this.#defaultOptions.mutations,
      ...options?.mutationKey && this.getMutationDefaults(options.mutationKey),
      ...options,
      _defaulted: true
    };
  }
  clear() {
    this.#queryCache.clear();
    this.#mutationCache.clear();
  }
};

// src/queryObserver.ts
var QueryObserver = class extends Subscribable {
  constructor(client, options) {
    super();
    this.options = options;
    this.#client = client;
    this.#selectError = null;
    this.#currentThenable = pendingThenable();
    if (!this.options.experimental_prefetchInRender) {
      this.#currentThenable.reject(
        new Error("experimental_prefetchInRender feature flag is not enabled")
      );
    }
    this.bindMethods();
    this.setOptions(options);
  }
  #client;
  #currentQuery = void 0;
  #currentQueryInitialState = void 0;
  #currentResult = void 0;
  #currentResultState;
  #currentResultOptions;
  #currentThenable;
  #selectError;
  #selectFn;
  #selectResult;
  // This property keeps track of the last query with defined data.
  // It will be used to pass the previous data and query to the placeholder function between renders.
  #lastQueryWithDefinedData;
  #staleTimeoutId;
  #refetchIntervalId;
  #currentRefetchInterval;
  #trackedProps = /* @__PURE__ */ new Set();
  bindMethods() {
    this.refetch = this.refetch.bind(this);
  }
  onSubscribe() {
    if (this.listeners.size === 1) {
      this.#currentQuery.addObserver(this);
      if (shouldFetchOnMount(this.#currentQuery, this.options)) {
        this.#executeFetch();
      } else {
        this.updateResult();
      }
      this.#updateTimers();
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      this.destroy();
    }
  }
  shouldFetchOnReconnect() {
    return shouldFetchOn(
      this.#currentQuery,
      this.options,
      this.options.refetchOnReconnect
    );
  }
  shouldFetchOnWindowFocus() {
    return shouldFetchOn(
      this.#currentQuery,
      this.options,
      this.options.refetchOnWindowFocus
    );
  }
  destroy() {
    this.listeners = /* @__PURE__ */ new Set();
    this.#clearStaleTimeout();
    this.#clearRefetchInterval();
    this.#currentQuery.removeObserver(this);
  }
  setOptions(options, notifyOptions) {
    const prevOptions = this.options;
    const prevQuery = this.#currentQuery;
    this.options = this.#client.defaultQueryOptions(options);
    if (this.options.enabled !== void 0 && typeof this.options.enabled !== "boolean" && typeof this.options.enabled !== "function" && typeof resolveEnabled(this.options.enabled, this.#currentQuery) !== "boolean") {
      throw new Error(
        "Expected enabled to be a boolean or a callback that returns a boolean"
      );
    }
    this.#updateQuery();
    this.#currentQuery.setOptions(this.options);
    if (prevOptions._defaulted && !shallowEqualObjects(this.options, prevOptions)) {
      this.#client.getQueryCache().notify({
        type: "observerOptionsUpdated",
        query: this.#currentQuery,
        observer: this
      });
    }
    const mounted = this.hasListeners();
    if (mounted && shouldFetchOptionally(
      this.#currentQuery,
      prevQuery,
      this.options,
      prevOptions
    )) {
      this.#executeFetch();
    }
    this.updateResult(notifyOptions);
    if (mounted && (this.#currentQuery !== prevQuery || resolveEnabled(this.options.enabled, this.#currentQuery) !== resolveEnabled(prevOptions.enabled, this.#currentQuery) || resolveStaleTime(this.options.staleTime, this.#currentQuery) !== resolveStaleTime(prevOptions.staleTime, this.#currentQuery))) {
      this.#updateStaleTimeout();
    }
    const nextRefetchInterval = this.#computeRefetchInterval();
    if (mounted && (this.#currentQuery !== prevQuery || resolveEnabled(this.options.enabled, this.#currentQuery) !== resolveEnabled(prevOptions.enabled, this.#currentQuery) || nextRefetchInterval !== this.#currentRefetchInterval)) {
      this.#updateRefetchInterval(nextRefetchInterval);
    }
  }
  getOptimisticResult(options) {
    const query = this.#client.getQueryCache().build(this.#client, options);
    const result = this.createResult(query, options);
    if (shouldAssignObserverCurrentProperties(this, result)) {
      this.#currentResult = result;
      this.#currentResultOptions = this.options;
      this.#currentResultState = this.#currentQuery.state;
    }
    return result;
  }
  getCurrentResult() {
    return this.#currentResult;
  }
  trackResult(result, onPropTracked) {
    const trackedResult = {};
    Object.keys(result).forEach((key) => {
      Object.defineProperty(trackedResult, key, {
        configurable: false,
        enumerable: true,
        get: () => {
          this.trackProp(key);
          onPropTracked?.(key);
          return result[key];
        }
      });
    });
    return trackedResult;
  }
  trackProp(key) {
    this.#trackedProps.add(key);
  }
  getCurrentQuery() {
    return this.#currentQuery;
  }
  refetch({ ...options } = {}) {
    return this.fetch({
      ...options
    });
  }
  fetchOptimistic(options) {
    const defaultedOptions = this.#client.defaultQueryOptions(options);
    const query = this.#client.getQueryCache().build(this.#client, defaultedOptions);
    query.isFetchingOptimistic = true;
    return query.fetch().then(() => this.createResult(query, defaultedOptions));
  }
  fetch(fetchOptions) {
    return this.#executeFetch({
      ...fetchOptions,
      cancelRefetch: fetchOptions.cancelRefetch ?? true
    }).then(() => {
      this.updateResult();
      return this.#currentResult;
    });
  }
  #executeFetch(fetchOptions) {
    this.#updateQuery();
    let promise = this.#currentQuery.fetch(
      this.options,
      fetchOptions
    );
    if (!fetchOptions?.throwOnError) {
      promise = promise.catch(noop$7);
    }
    return promise;
  }
  #updateStaleTimeout() {
    this.#clearStaleTimeout();
    const staleTime = resolveStaleTime(
      this.options.staleTime,
      this.#currentQuery
    );
    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {
      return;
    }
    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime);
    const timeout = time + 1;
    this.#staleTimeoutId = setTimeout(() => {
      if (!this.#currentResult.isStale) {
        this.updateResult();
      }
    }, timeout);
  }
  #computeRefetchInterval() {
    return (typeof this.options.refetchInterval === "function" ? this.options.refetchInterval(this.#currentQuery) : this.options.refetchInterval) ?? false;
  }
  #updateRefetchInterval(nextInterval) {
    this.#clearRefetchInterval();
    this.#currentRefetchInterval = nextInterval;
    if (isServer || resolveEnabled(this.options.enabled, this.#currentQuery) === false || !isValidTimeout(this.#currentRefetchInterval) || this.#currentRefetchInterval === 0) {
      return;
    }
    this.#refetchIntervalId = setInterval(() => {
      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {
        this.#executeFetch();
      }
    }, this.#currentRefetchInterval);
  }
  #updateTimers() {
    this.#updateStaleTimeout();
    this.#updateRefetchInterval(this.#computeRefetchInterval());
  }
  #clearStaleTimeout() {
    if (this.#staleTimeoutId) {
      clearTimeout(this.#staleTimeoutId);
      this.#staleTimeoutId = void 0;
    }
  }
  #clearRefetchInterval() {
    if (this.#refetchIntervalId) {
      clearInterval(this.#refetchIntervalId);
      this.#refetchIntervalId = void 0;
    }
  }
  createResult(query, options) {
    const prevQuery = this.#currentQuery;
    const prevOptions = this.options;
    const prevResult = this.#currentResult;
    const prevResultState = this.#currentResultState;
    const prevResultOptions = this.#currentResultOptions;
    const queryChange = query !== prevQuery;
    const queryInitialState = queryChange ? query.state : this.#currentQueryInitialState;
    const { state } = query;
    let newState = { ...state };
    let isPlaceholderData = false;
    let data;
    if (options._optimisticResults) {
      const mounted = this.hasListeners();
      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);
      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);
      if (fetchOnMount || fetchOptionally) {
        newState = {
          ...newState,
          ...fetchState(state.data, query.options)
        };
      }
      if (options._optimisticResults === "isRestoring") {
        newState.fetchStatus = "idle";
      }
    }
    let { error, errorUpdatedAt, status } = newState;
    if (options.select && newState.data !== void 0) {
      if (prevResult && newState.data === prevResultState?.data && options.select === this.#selectFn) {
        data = this.#selectResult;
      } else {
        try {
          this.#selectFn = options.select;
          data = options.select(newState.data);
          data = replaceData(prevResult?.data, data, options);
          this.#selectResult = data;
          this.#selectError = null;
        } catch (selectError) {
          this.#selectError = selectError;
        }
      }
    } else {
      data = newState.data;
    }
    if (options.placeholderData !== void 0 && data === void 0 && status === "pending") {
      let placeholderData;
      if (prevResult?.isPlaceholderData && options.placeholderData === prevResultOptions?.placeholderData) {
        placeholderData = prevResult.data;
      } else {
        placeholderData = typeof options.placeholderData === "function" ? options.placeholderData(
          this.#lastQueryWithDefinedData?.state.data,
          this.#lastQueryWithDefinedData
        ) : options.placeholderData;
        if (options.select && placeholderData !== void 0) {
          try {
            placeholderData = options.select(placeholderData);
            this.#selectError = null;
          } catch (selectError) {
            this.#selectError = selectError;
          }
        }
      }
      if (placeholderData !== void 0) {
        status = "success";
        data = replaceData(
          prevResult?.data,
          placeholderData,
          options
        );
        isPlaceholderData = true;
      }
    }
    if (this.#selectError) {
      error = this.#selectError;
      data = this.#selectResult;
      errorUpdatedAt = Date.now();
      status = "error";
    }
    const isFetching = newState.fetchStatus === "fetching";
    const isPending = status === "pending";
    const isError = status === "error";
    const isLoading = isPending && isFetching;
    const hasData = data !== void 0;
    const result = {
      status,
      fetchStatus: newState.fetchStatus,
      isPending,
      isSuccess: status === "success",
      isError,
      isInitialLoading: isLoading,
      isLoading,
      data,
      dataUpdatedAt: newState.dataUpdatedAt,
      error,
      errorUpdatedAt,
      failureCount: newState.fetchFailureCount,
      failureReason: newState.fetchFailureReason,
      errorUpdateCount: newState.errorUpdateCount,
      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,
      isFetchedAfterMount: newState.dataUpdateCount > queryInitialState.dataUpdateCount || newState.errorUpdateCount > queryInitialState.errorUpdateCount,
      isFetching,
      isRefetching: isFetching && !isPending,
      isLoadingError: isError && !hasData,
      isPaused: newState.fetchStatus === "paused",
      isPlaceholderData,
      isRefetchError: isError && hasData,
      isStale: isStale(query, options),
      refetch: this.refetch,
      promise: this.#currentThenable
    };
    return result;
  }
  updateResult(notifyOptions) {
    const prevResult = this.#currentResult;
    const nextResult = this.createResult(this.#currentQuery, this.options);
    this.#currentResultState = this.#currentQuery.state;
    this.#currentResultOptions = this.options;
    if (this.#currentResultState.data !== void 0) {
      this.#lastQueryWithDefinedData = this.#currentQuery;
    }
    if (shallowEqualObjects(nextResult, prevResult)) {
      return;
    }
    if (this.options.experimental_prefetchInRender) {
      const finalizeThenableIfPossible = (thenable) => {
        if (nextResult.status === "error") {
          thenable.reject(nextResult.error);
        } else if (nextResult.data !== void 0) {
          thenable.resolve(nextResult.data);
        }
      };
      const recreateThenable = () => {
        const pending = this.#currentThenable = nextResult.promise = pendingThenable();
        finalizeThenableIfPossible(pending);
      };
      const prevThenable = this.#currentThenable;
      switch (prevThenable.status) {
        case "pending":
          finalizeThenableIfPossible(prevThenable);
          break;
        case "fulfilled":
          if (nextResult.status === "error" || nextResult.data !== prevThenable.value) {
            recreateThenable();
          }
          break;
        case "rejected":
          if (nextResult.status !== "error" || nextResult.error !== prevThenable.reason) {
            recreateThenable();
          }
          break;
      }
    }
    this.#currentResult = nextResult;
    const defaultNotifyOptions = {};
    const shouldNotifyListeners = () => {
      if (!prevResult) {
        return true;
      }
      const { notifyOnChangeProps } = this.options;
      const notifyOnChangePropsValue = typeof notifyOnChangeProps === "function" ? notifyOnChangeProps() : notifyOnChangeProps;
      if (notifyOnChangePropsValue === "all" || !notifyOnChangePropsValue && !this.#trackedProps.size) {
        return true;
      }
      const includedProps = new Set(
        notifyOnChangePropsValue ?? this.#trackedProps
      );
      if (this.options.throwOnError) {
        includedProps.add("error");
      }
      return Object.keys(this.#currentResult).some((key) => {
        const typedKey = key;
        const changed = this.#currentResult[typedKey] !== prevResult[typedKey];
        return changed && includedProps.has(typedKey);
      });
    };
    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {
      defaultNotifyOptions.listeners = true;
    }
    this.#notify({ ...defaultNotifyOptions, ...notifyOptions });
  }
  #updateQuery() {
    const query = this.#client.getQueryCache().build(this.#client, this.options);
    if (query === this.#currentQuery) {
      return;
    }
    const prevQuery = this.#currentQuery;
    this.#currentQuery = query;
    this.#currentQueryInitialState = query.state;
    if (this.hasListeners()) {
      prevQuery?.removeObserver(this);
      query.addObserver(this);
    }
  }
  onQueryUpdate() {
    this.updateResult();
    if (this.hasListeners()) {
      this.#updateTimers();
    }
  }
  #notify(notifyOptions) {
    notifyManager.batch(() => {
      if (notifyOptions.listeners) {
        this.listeners.forEach((listener) => {
          listener(this.#currentResult);
        });
      }
      this.#client.getQueryCache().notify({
        query: this.#currentQuery,
        type: "observerResultsUpdated"
      });
    });
  }
};
function shouldLoadOnMount(query, options) {
  return resolveEnabled(options.enabled, query) !== false && query.state.data === void 0 && !(query.state.status === "error" && options.retryOnMount === false);
}
function shouldFetchOnMount(query, options) {
  return shouldLoadOnMount(query, options) || query.state.data !== void 0 && shouldFetchOn(query, options, options.refetchOnMount);
}
function shouldFetchOn(query, options, field) {
  if (resolveEnabled(options.enabled, query) !== false) {
    const value = typeof field === "function" ? field(query) : field;
    return value === "always" || value !== false && isStale(query, options);
  }
  return false;
}
function shouldFetchOptionally(query, prevQuery, options, prevOptions) {
  return (query !== prevQuery || resolveEnabled(prevOptions.enabled, query) === false) && (!options.suspense || query.state.status !== "error") && isStale(query, options);
}
function isStale(query, options) {
  return resolveEnabled(options.enabled, query) !== false && query.isStaleByTime(resolveStaleTime(options.staleTime, query));
}
function shouldAssignObserverCurrentProperties(observer, optimisticResult) {
  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {
    return true;
  }
  return false;
}

// src/mutationObserver.ts
var MutationObserver = class extends Subscribable {
  #client;
  #currentResult = void 0;
  #currentMutation;
  #mutateOptions;
  constructor(client, options) {
    super();
    this.#client = client;
    this.setOptions(options);
    this.bindMethods();
    this.#updateResult();
  }
  bindMethods() {
    this.mutate = this.mutate.bind(this);
    this.reset = this.reset.bind(this);
  }
  setOptions(options) {
    const prevOptions = this.options;
    this.options = this.#client.defaultMutationOptions(options);
    if (!shallowEqualObjects(this.options, prevOptions)) {
      this.#client.getMutationCache().notify({
        type: "observerOptionsUpdated",
        mutation: this.#currentMutation,
        observer: this
      });
    }
    if (prevOptions?.mutationKey && this.options.mutationKey && hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)) {
      this.reset();
    } else if (this.#currentMutation?.state.status === "pending") {
      this.#currentMutation.setOptions(this.options);
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      this.#currentMutation?.removeObserver(this);
    }
  }
  onMutationUpdate(action) {
    this.#updateResult();
    this.#notify(action);
  }
  getCurrentResult() {
    return this.#currentResult;
  }
  reset() {
    this.#currentMutation?.removeObserver(this);
    this.#currentMutation = void 0;
    this.#updateResult();
    this.#notify();
  }
  mutate(variables, options) {
    this.#mutateOptions = options;
    this.#currentMutation?.removeObserver(this);
    this.#currentMutation = this.#client.getMutationCache().build(this.#client, this.options);
    this.#currentMutation.addObserver(this);
    return this.#currentMutation.execute(variables);
  }
  #updateResult() {
    const state = this.#currentMutation?.state ?? getDefaultState();
    this.#currentResult = {
      ...state,
      isPending: state.status === "pending",
      isSuccess: state.status === "success",
      isError: state.status === "error",
      isIdle: state.status === "idle",
      mutate: this.mutate,
      reset: this.reset
    };
  }
  #notify(action) {
    notifyManager.batch(() => {
      if (this.#mutateOptions && this.hasListeners()) {
        const variables = this.#currentResult.variables;
        const context = this.#currentResult.context;
        if (action?.type === "success") {
          this.#mutateOptions.onSuccess?.(action.data, variables, context);
          this.#mutateOptions.onSettled?.(action.data, null, variables, context);
        } else if (action?.type === "error") {
          this.#mutateOptions.onError?.(action.error, variables, context);
          this.#mutateOptions.onSettled?.(
            void 0,
            action.error,
            variables,
            context
          );
        }
      }
      this.listeners.forEach((listener) => {
        listener(this.#currentResult);
      });
    });
  }
};

var jsxRuntime = {exports: {}};

var reactJsxRuntime_production_min = {};

/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactJsxRuntime_production_min;

function requireReactJsxRuntime_production_min () {
	if (hasRequiredReactJsxRuntime_production_min) return reactJsxRuntime_production_min;
	hasRequiredReactJsxRuntime_production_min = 1;
var f=reactExports,k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};
	function q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=""+g);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return {$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}reactJsxRuntime_production_min.Fragment=l;reactJsxRuntime_production_min.jsx=q;reactJsxRuntime_production_min.jsxs=q;
	return reactJsxRuntime_production_min;
}

var reactJsxRuntime_development = {};

/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactJsxRuntime_development;

function requireReactJsxRuntime_development () {
	if (hasRequiredReactJsxRuntime_development) return reactJsxRuntime_development;
	hasRequiredReactJsxRuntime_development = 1;

	if (process.env.NODE_ENV !== "production") {
	  (function() {

	var React = reactExports;

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	var REACT_MEMO_TYPE = Symbol.for('react.memo');
	var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
	var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	function error(format) {
	  {
	    {
	      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        args[_key2 - 1] = arguments[_key2];
	      }

	      printWarning('error', format, args);
	    }
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();

	    if (stack !== '') {
	      format += '%s';
	      args = args.concat([stack]);
	    } // eslint-disable-next-line react-internal/safe-string-coercion


	    var argsWithFormat = args.map(function (item) {
	      return String(item);
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);
	  }
	}

	// -----------------------------------------------------------------------------

	var enableScopeAPI = false; // Experimental Create Event Handle API.
	var enableCacheElement = false;
	var enableTransitionTracing = false; // No known bugs, but needs performance testing

	var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
	// stuff. Intended to enable React core members to more easily debug scheduling
	// issues in DEV builds.

	var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

	var REACT_MODULE_REFERENCE;

	{
	  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
	}

	function isValidElementType(type) {
	  if (typeof type === 'string' || typeof type === 'function') {
	    return true;
	  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


	  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
	    return true;
	  }

	  if (typeof type === 'object' && type !== null) {
	    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
	    // types supported by any Flight configuration anywhere since
	    // we don't know which Flight build this will end up being used
	    // with.
	    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
	      return true;
	    }
	  }

	  return false;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var displayName = outerType.displayName;

	  if (displayName) {
	    return displayName;
	  }

	  var functionName = innerType.displayName || innerType.name || '';
	  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
	} // Keep in sync with react-reconciler/getComponentNameFromFiber


	function getContextName(type) {
	  return type.displayName || 'Context';
	} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


	function getComponentNameFromType(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return 'Profiler';

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';

	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        var context = type;
	        return getContextName(context) + '.Consumer';

	      case REACT_PROVIDER_TYPE:
	        var provider = type;
	        return getContextName(provider._context) + '.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        var outerName = type.displayName || null;

	        if (outerName !== null) {
	          return outerName;
	        }

	        return getComponentNameFromType(type.type) || 'Memo';

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            return getComponentNameFromType(init(payload));
	          } catch (x) {
	            return null;
	          }
	        }

	      // eslint-disable-next-line no-fallthrough
	    }
	  }

	  return null;
	}

	var assign = Object.assign;

	// Helpers to patch console.logs to avoid logging during side-effect free
	// replaying on render function. This currently only patches the object
	// lazily which won't cover if the log function was extracted eagerly.
	// We could also eagerly patch the method.
	var disabledDepth = 0;
	var prevLog;
	var prevInfo;
	var prevWarn;
	var prevError;
	var prevGroup;
	var prevGroupCollapsed;
	var prevGroupEnd;

	function disabledLog() {}

	disabledLog.__reactDisabledLog = true;
	function disableLogs() {
	  {
	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      prevLog = console.log;
	      prevInfo = console.info;
	      prevWarn = console.warn;
	      prevError = console.error;
	      prevGroup = console.group;
	      prevGroupCollapsed = console.groupCollapsed;
	      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

	      var props = {
	        configurable: true,
	        enumerable: true,
	        value: disabledLog,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        info: props,
	        log: props,
	        warn: props,
	        error: props,
	        group: props,
	        groupCollapsed: props,
	        groupEnd: props
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    disabledDepth++;
	  }
	}
	function reenableLogs() {
	  {
	    disabledDepth--;

	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      var props = {
	        configurable: true,
	        enumerable: true,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        log: assign({}, props, {
	          value: prevLog
	        }),
	        info: assign({}, props, {
	          value: prevInfo
	        }),
	        warn: assign({}, props, {
	          value: prevWarn
	        }),
	        error: assign({}, props, {
	          value: prevError
	        }),
	        group: assign({}, props, {
	          value: prevGroup
	        }),
	        groupCollapsed: assign({}, props, {
	          value: prevGroupCollapsed
	        }),
	        groupEnd: assign({}, props, {
	          value: prevGroupEnd
	        })
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    if (disabledDepth < 0) {
	      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
	    }
	  }
	}

	var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	var prefix;
	function describeBuiltInComponentFrame(name, source, ownerFn) {
	  {
	    if (prefix === undefined) {
	      // Extract the VM specific prefix used by each line.
	      try {
	        throw Error();
	      } catch (x) {
	        var match = x.stack.trim().match(/\n( *(at )?)/);
	        prefix = match && match[1] || '';
	      }
	    } // We use the prefix to ensure our stacks line up with native stack frames.


	    return '\n' + prefix + name;
	  }
	}
	var reentry = false;
	var componentFrameCache;

	{
	  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
	  componentFrameCache = new PossiblyWeakMap();
	}

	function describeNativeComponentFrame(fn, construct) {
	  // If something asked for a stack inside a fake render, it should get ignored.
	  if ( !fn || reentry) {
	    return '';
	  }

	  {
	    var frame = componentFrameCache.get(fn);

	    if (frame !== undefined) {
	      return frame;
	    }
	  }

	  var control;
	  reentry = true;
	  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

	  Error.prepareStackTrace = undefined;
	  var previousDispatcher;

	  {
	    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
	    // for warnings.

	    ReactCurrentDispatcher.current = null;
	    disableLogs();
	  }

	  try {
	    // This should throw.
	    if (construct) {
	      // Something should be setting the props in the constructor.
	      var Fake = function () {
	        throw Error();
	      }; // $FlowFixMe


	      Object.defineProperty(Fake.prototype, 'props', {
	        set: function () {
	          // We use a throwing setter instead of frozen or non-writable props
	          // because that won't throw in a non-strict mode function.
	          throw Error();
	        }
	      });

	      if (typeof Reflect === 'object' && Reflect.construct) {
	        // We construct a different control for this case to include any extra
	        // frames added by the construct call.
	        try {
	          Reflect.construct(Fake, []);
	        } catch (x) {
	          control = x;
	        }

	        Reflect.construct(fn, [], Fake);
	      } else {
	        try {
	          Fake.call();
	        } catch (x) {
	          control = x;
	        }

	        fn.call(Fake.prototype);
	      }
	    } else {
	      try {
	        throw Error();
	      } catch (x) {
	        control = x;
	      }

	      fn();
	    }
	  } catch (sample) {
	    // This is inlined manually because closure doesn't do it for us.
	    if (sample && control && typeof sample.stack === 'string') {
	      // This extracts the first frame from the sample that isn't also in the control.
	      // Skipping one frame that we assume is the frame that calls the two.
	      var sampleLines = sample.stack.split('\n');
	      var controlLines = control.stack.split('\n');
	      var s = sampleLines.length - 1;
	      var c = controlLines.length - 1;

	      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
	        // We expect at least one stack frame to be shared.
	        // Typically this will be the root most one. However, stack frames may be
	        // cut off due to maximum stack limits. In this case, one maybe cut off
	        // earlier than the other. We assume that the sample is longer or the same
	        // and there for cut off earlier. So we should find the root most frame in
	        // the sample somewhere in the control.
	        c--;
	      }

	      for (; s >= 1 && c >= 0; s--, c--) {
	        // Next we find the first one that isn't the same which should be the
	        // frame that called our sample function and the control.
	        if (sampleLines[s] !== controlLines[c]) {
	          // In V8, the first line is describing the message but other VMs don't.
	          // If we're about to return the first line, and the control is also on the same
	          // line, that's a pretty good indicator that our sample threw at same line as
	          // the control. I.e. before we entered the sample frame. So we ignore this result.
	          // This can happen if you passed a class to function component, or non-function.
	          if (s !== 1 || c !== 1) {
	            do {
	              s--;
	              c--; // We may still have similar intermediate frames from the construct call.
	              // The next one that isn't the same should be our match though.

	              if (c < 0 || sampleLines[s] !== controlLines[c]) {
	                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
	                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
	                // but we have a user-provided "displayName"
	                // splice it in to make the stack more readable.


	                if (fn.displayName && _frame.includes('<anonymous>')) {
	                  _frame = _frame.replace('<anonymous>', fn.displayName);
	                }

	                {
	                  if (typeof fn === 'function') {
	                    componentFrameCache.set(fn, _frame);
	                  }
	                } // Return the line we found.


	                return _frame;
	              }
	            } while (s >= 1 && c >= 0);
	          }

	          break;
	        }
	      }
	    }
	  } finally {
	    reentry = false;

	    {
	      ReactCurrentDispatcher.current = previousDispatcher;
	      reenableLogs();
	    }

	    Error.prepareStackTrace = previousPrepareStackTrace;
	  } // Fallback to just using the name if we couldn't make it throw.


	  var name = fn ? fn.displayName || fn.name : '';
	  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

	  {
	    if (typeof fn === 'function') {
	      componentFrameCache.set(fn, syntheticFrame);
	    }
	  }

	  return syntheticFrame;
	}
	function describeFunctionComponentFrame(fn, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(fn, false);
	  }
	}

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

	  if (type == null) {
	    return '';
	  }

	  if (typeof type === 'function') {
	    {
	      return describeNativeComponentFrame(type, shouldConstruct(type));
	    }
	  }

	  if (typeof type === 'string') {
	    return describeBuiltInComponentFrame(type);
	  }

	  switch (type) {
	    case REACT_SUSPENSE_TYPE:
	      return describeBuiltInComponentFrame('Suspense');

	    case REACT_SUSPENSE_LIST_TYPE:
	      return describeBuiltInComponentFrame('SuspenseList');
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_FORWARD_REF_TYPE:
	        return describeFunctionComponentFrame(type.render);

	      case REACT_MEMO_TYPE:
	        // Memo may contain any component type so we recursively resolve it.
	        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            // Lazy may contain any component type so we recursively resolve it.
	            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
	          } catch (x) {}
	        }
	    }
	  }

	  return '';
	}

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var loggedTypeFailures = {};
	var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame.setExtraStackFrame(null);
	    }
	  }
	}

	function checkPropTypes(typeSpecs, values, location, componentName, element) {
	  {
	    // $FlowFixMe This is okay but Flow doesn't know it.
	    var has = Function.call.bind(hasOwnProperty);

	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.

	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            // eslint-disable-next-line react-internal/prod-error-codes
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }

	          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        } catch (ex) {
	          error$1 = ex;
	        }

	        if (error$1 && !(error$1 instanceof Error)) {
	          setCurrentlyValidatingElement(element);

	          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

	          setCurrentlyValidatingElement(null);
	        }

	        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error$1.message] = true;
	          setCurrentlyValidatingElement(element);

	          error('Failed %s type: %s', location, error$1.message);

	          setCurrentlyValidatingElement(null);
	        }
	      }
	    }
	  }
	}

	var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

	function isArray(a) {
	  return isArrayImpl(a);
	}

	/*
	 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
	 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
	 *
	 * The functions in this module will throw an easier-to-understand,
	 * easier-to-debug exception with a clear errors message message explaining the
	 * problem. (Instead of a confusing exception thrown inside the implementation
	 * of the `value` object).
	 */
	// $FlowFixMe only called in DEV, so void return is not possible.
	function typeName(value) {
	  {
	    // toStringTag is needed for namespaced types like Temporal.Instant
	    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
	    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
	    return type;
	  }
	} // $FlowFixMe only called in DEV, so void return is not possible.


	function willCoercionThrow(value) {
	  {
	    try {
	      testStringCoercion(value);
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	}

	function testStringCoercion(value) {
	  // If you ended up here by following an exception call stack, here's what's
	  // happened: you supplied an object or symbol value to React (as a prop, key,
	  // DOM attribute, CSS property, string ref, etc.) and when React tried to
	  // coerce it to a string using `'' + value`, an exception was thrown.
	  //
	  // The most common types that will cause this exception are `Symbol` instances
	  // and Temporal objects like `Temporal.Instant`. But any object that has a
	  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
	  // exception. (Library authors do this to prevent users from using built-in
	  // numeric operators like `+` or comparison operators like `>=` because custom
	  // methods are needed to perform accurate arithmetic or comparison.)
	  //
	  // To fix the problem, coerce this object or symbol value to a string before
	  // passing it to React. The most reliable way is usually `String(value)`.
	  //
	  // To find which value is throwing, check the browser or debugger console.
	  // Before this exception was thrown, there should be `console.error` output
	  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
	  // problem and how that type was used: key, atrribute, input value prop, etc.
	  // In most cases, this console output also shows the component and its
	  // ancestor components where the exception happened.
	  //
	  // eslint-disable-next-line react-internal/safe-string-coercion
	  return '' + value;
	}
	function checkKeyStringCoercion(value) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}

	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	var specialPropKeyWarningShown;
	var specialPropRefWarningShown;
	var didWarnAboutStringRefs;

	{
	  didWarnAboutStringRefs = {};
	}

	function hasValidRef(config) {
	  {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.key !== undefined;
	}

	function warnIfStringRefCannotBeAutoConverted(config, self) {
	  {
	    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
	      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

	      if (!didWarnAboutStringRefs[componentName]) {
	        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);

	        didWarnAboutStringRefs[componentName] = true;
	      }
	    }
	  }
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  {
	    var warnAboutAccessingKey = function () {
	      if (!specialPropKeyWarningShown) {
	        specialPropKeyWarningShown = true;

	        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	      }
	    };

	    warnAboutAccessingKey.isReactWarning = true;
	    Object.defineProperty(props, 'key', {
	      get: warnAboutAccessingKey,
	      configurable: true
	    });
	  }
	}

	function defineRefPropWarningGetter(props, displayName) {
	  {
	    var warnAboutAccessingRef = function () {
	      if (!specialPropRefWarningShown) {
	        specialPropRefWarningShown = true;

	        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	      }
	    };

	    warnAboutAccessingRef.isReactWarning = true;
	    Object.defineProperty(props, 'ref', {
	      get: warnAboutAccessingRef,
	      configurable: true
	    });
	  }
	}
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, instanceof check
	 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} props
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} owner
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @internal
	 */


	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allows us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.

	    Object.defineProperty(element._store, 'validated', {
	      configurable: false,
	      enumerable: false,
	      writable: true,
	      value: false
	    }); // self and source are DEV only properties.

	    Object.defineProperty(element, '_self', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: self
	    }); // Two elements created in two different places should be considered
	    // equal for testing purposes and therefore we hide it from enumeration.

	    Object.defineProperty(element, '_source', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: source
	    });

	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};
	/**
	 * https://github.com/reactjs/rfcs/pull/107
	 * @param {*} type
	 * @param {object} props
	 * @param {string} key
	 */

	function jsxDEV(type, config, maybeKey, source, self) {
	  {
	    var propName; // Reserved names are extracted

	    var props = {};
	    var key = null;
	    var ref = null; // Currently, key can be spread in as a prop. This causes a potential
	    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
	    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
	    // but as an intermediary step, we will use jsxDEV for everything except
	    // <div {...props} key="Hi" />, because we aren't currently able to tell if
	    // key is explicitly declared to be undefined or not.

	    if (maybeKey !== undefined) {
	      {
	        checkKeyStringCoercion(maybeKey);
	      }

	      key = '' + maybeKey;
	    }

	    if (hasValidKey(config)) {
	      {
	        checkKeyStringCoercion(config.key);
	      }

	      key = '' + config.key;
	    }

	    if (hasValidRef(config)) {
	      ref = config.ref;
	      warnIfStringRefCannotBeAutoConverted(config, self);
	    } // Remaining properties are added to a new props object


	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    } // Resolve default props


	    if (type && type.defaultProps) {
	      var defaultProps = type.defaultProps;

	      for (propName in defaultProps) {
	        if (props[propName] === undefined) {
	          props[propName] = defaultProps[propName];
	        }
	      }
	    }

	    if (key || ref) {
	      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

	      if (key) {
	        defineKeyPropWarningGetter(props, displayName);
	      }

	      if (ref) {
	        defineRefPropWarningGetter(props, displayName);
	      }
	    }

	    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	  }
	}

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
	var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement$1(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
	    }
	  }
	}

	var propTypesMisspellWarningShown;

	{
	  propTypesMisspellWarningShown = false;
	}
	/**
	 * Verifies the object is a ReactElement.
	 * See https://reactjs.org/docs/react-api.html#isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a ReactElement.
	 * @final
	 */


	function isValidElement(object) {
	  {
	    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	  }
	}

	function getDeclarationErrorAddendum() {
	  {
	    if (ReactCurrentOwner$1.current) {
	      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);

	      if (name) {
	        return '\n\nCheck the render method of `' + name + '`.';
	      }
	    }

	    return '';
	  }
	}

	function getSourceInfoErrorAddendum(source) {
	  {

	    return '';
	  }
	}
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */


	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  {
	    var info = getDeclarationErrorAddendum();

	    if (!info) {
	      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

	      if (parentName) {
	        info = "\n\nCheck the top-level render call using <" + parentName + ">.";
	      }
	    }

	    return info;
	  }
	}
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */


	function validateExplicitKey(element, parentType) {
	  {
	    if (!element._store || element._store.validated || element.key != null) {
	      return;
	    }

	    element._store.validated = true;
	    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

	    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	      return;
	    }

	    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
	    // property, it may be the creator of the child that's responsible for
	    // assigning it a key.

	    var childOwner = '';

	    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
	      // Give the component that originally created this child.
	      childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
	    }

	    setCurrentlyValidatingElement$1(element);

	    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

	    setCurrentlyValidatingElement$1(null);
	  }
	}
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */


	function validateChildKeys(node, parentType) {
	  {
	    if (typeof node !== 'object') {
	      return;
	    }

	    if (isArray(node)) {
	      for (var i = 0; i < node.length; i++) {
	        var child = node[i];

	        if (isValidElement(child)) {
	          validateExplicitKey(child, parentType);
	        }
	      }
	    } else if (isValidElement(node)) {
	      // This element was passed in a valid location.
	      if (node._store) {
	        node._store.validated = true;
	      }
	    } else if (node) {
	      var iteratorFn = getIteratorFn(node);

	      if (typeof iteratorFn === 'function') {
	        // Entry iterators used to provide implicit keys,
	        // but now we print a separate warning for them later.
	        if (iteratorFn !== node.entries) {
	          var iterator = iteratorFn.call(node);
	          var step;

	          while (!(step = iterator.next()).done) {
	            if (isValidElement(step.value)) {
	              validateExplicitKey(step.value, parentType);
	            }
	          }
	        }
	      }
	    }
	  }
	}
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */


	function validatePropTypes(element) {
	  {
	    var type = element.type;

	    if (type === null || type === undefined || typeof type === 'string') {
	      return;
	    }

	    var propTypes;

	    if (typeof type === 'function') {
	      propTypes = type.propTypes;
	    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
	    // Inner props are checked in the reconciler.
	    type.$$typeof === REACT_MEMO_TYPE)) {
	      propTypes = type.propTypes;
	    } else {
	      return;
	    }

	    if (propTypes) {
	      // Intentionally inside to avoid triggering lazy initializers:
	      var name = getComponentNameFromType(type);
	      checkPropTypes(propTypes, element.props, 'prop', name, element);
	    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

	      var _name = getComponentNameFromType(type);

	      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
	    }

	    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
	    }
	  }
	}
	/**
	 * Given a fragment, validate that it can only be provided with fragment props
	 * @param {ReactElement} fragment
	 */


	function validateFragmentProps(fragment) {
	  {
	    var keys = Object.keys(fragment.props);

	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];

	      if (key !== 'children' && key !== 'key') {
	        setCurrentlyValidatingElement$1(fragment);

	        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

	        setCurrentlyValidatingElement$1(null);
	        break;
	      }
	    }

	    if (fragment.ref !== null) {
	      setCurrentlyValidatingElement$1(fragment);

	      error('Invalid attribute `ref` supplied to `React.Fragment`.');

	      setCurrentlyValidatingElement$1(null);
	    }
	  }
	}

	var didWarnAboutKeySpread = {};
	function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
	  {
	    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.

	    if (!validType) {
	      var info = '';

	      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	      }

	      var sourceInfo = getSourceInfoErrorAddendum();

	      if (sourceInfo) {
	        info += sourceInfo;
	      } else {
	        info += getDeclarationErrorAddendum();
	      }

	      var typeString;

	      if (type === null) {
	        typeString = 'null';
	      } else if (isArray(type)) {
	        typeString = 'array';
	      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
	        typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
	        info = ' Did you accidentally export a JSX literal instead of a component?';
	      } else {
	        typeString = typeof type;
	      }

	      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
	    }

	    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.

	    if (element == null) {
	      return element;
	    } // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)


	    if (validType) {
	      var children = props.children;

	      if (children !== undefined) {
	        if (isStaticChildren) {
	          if (isArray(children)) {
	            for (var i = 0; i < children.length; i++) {
	              validateChildKeys(children[i], type);
	            }

	            if (Object.freeze) {
	              Object.freeze(children);
	            }
	          } else {
	            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
	          }
	        } else {
	          validateChildKeys(children, type);
	        }
	      }
	    }

	    {
	      if (hasOwnProperty.call(props, 'key')) {
	        var componentName = getComponentNameFromType(type);
	        var keys = Object.keys(props).filter(function (k) {
	          return k !== 'key';
	        });
	        var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';

	        if (!didWarnAboutKeySpread[componentName + beforeExample]) {
	          var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';

	          error('A props object containing a "key" prop is being spread into JSX:\n' + '  let props = %s;\n' + '  <%s {...props} />\n' + 'React keys must be passed directly to JSX without using spread:\n' + '  let props = %s;\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);

	          didWarnAboutKeySpread[componentName + beforeExample] = true;
	        }
	      }
	    }

	    if (type === REACT_FRAGMENT_TYPE) {
	      validateFragmentProps(element);
	    } else {
	      validatePropTypes(element);
	    }

	    return element;
	  }
	} // These two functions exist to still get child warnings in dev
	// even with the prod transform. This means that jsxDEV is purely
	// opt-in behavior for better messages but that we won't stop
	// giving you warnings if you use production apis.

	function jsxWithValidationStatic(type, props, key) {
	  {
	    return jsxWithValidation(type, props, key, true);
	  }
	}
	function jsxWithValidationDynamic(type, props, key) {
	  {
	    return jsxWithValidation(type, props, key, false);
	  }
	}

	var jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.
	// for now we can ship identical prod functions

	var jsxs =  jsxWithValidationStatic ;

	reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
	reactJsxRuntime_development.jsx = jsx;
	reactJsxRuntime_development.jsxs = jsxs;
	  })();
	}
	return reactJsxRuntime_development;
}

if (process.env.NODE_ENV === 'production') {
  jsxRuntime.exports = requireReactJsxRuntime_production_min();
} else {
  jsxRuntime.exports = requireReactJsxRuntime_development();
}

var jsxRuntimeExports = jsxRuntime.exports;

var QueryClientContext = reactExports.createContext(
  void 0
);
var useQueryClient = (queryClient) => {
  const client = reactExports.useContext(QueryClientContext);
  if (!client) {
    throw new Error("No QueryClient set, use QueryClientProvider to set one");
  }
  return client;
};
var QueryClientProvider = ({
  client,
  children
}) => {
  reactExports.useEffect(() => {
    client.mount();
    return () => {
      client.unmount();
    };
  }, [client]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(QueryClientContext.Provider, { value: client, children });
};

var IsRestoringContext = reactExports.createContext(false);
var useIsRestoring = () => reactExports.useContext(IsRestoringContext);
IsRestoringContext.Provider;

function createValue() {
  let isReset = false;
  return {
    clearReset: () => {
      isReset = false;
    },
    reset: () => {
      isReset = true;
    },
    isReset: () => {
      return isReset;
    }
  };
}
var QueryErrorResetBoundaryContext = reactExports.createContext(createValue());
var useQueryErrorResetBoundary = () => reactExports.useContext(QueryErrorResetBoundaryContext);

// src/utils.ts
function shouldThrowError(throwError, params) {
  if (typeof throwError === "function") {
    return throwError(...params);
  }
  return !!throwError;
}
function noop$6() {
}

var ensurePreventErrorBoundaryRetry = (options, errorResetBoundary) => {
  if (options.suspense || options.throwOnError) {
    if (!errorResetBoundary.isReset()) {
      options.retryOnMount = false;
    }
  }
};
var useClearResetErrorBoundary = (errorResetBoundary) => {
  reactExports.useEffect(() => {
    errorResetBoundary.clearReset();
  }, [errorResetBoundary]);
};
var getHasError = ({
  result,
  errorResetBoundary,
  throwOnError,
  query
}) => {
  return result.isError && !errorResetBoundary.isReset() && !result.isFetching && query && shouldThrowError(throwOnError, [result.error, query]);
};

// src/suspense.ts
var defaultThrowOnError = (_error, query) => query.state.data === void 0;
var ensureSuspenseTimers = (defaultedOptions) => {
  if (defaultedOptions.suspense) {
    if (typeof defaultedOptions.staleTime !== "number") {
      defaultedOptions.staleTime = 1e3;
    }
    if (typeof defaultedOptions.gcTime === "number") {
      defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1e3);
    }
  }
};
var willFetch = (result, isRestoring) => result.isLoading && result.isFetching && !isRestoring;
var shouldSuspend = (defaultedOptions, result) => defaultedOptions?.suspense && result.isPending;
var fetchOptimistic = (defaultedOptions, observer, errorResetBoundary) => observer.fetchOptimistic(defaultedOptions).catch(() => {
  errorResetBoundary.clearReset();
});

function useBaseQuery(options, Observer, queryClient) {
  if (process.env.NODE_ENV !== "production") {
    if (typeof options !== "object" || Array.isArray(options)) {
      throw new Error(
        'Bad argument type. Starting with v5, only the "Object" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object'
      );
    }
  }
  const client = useQueryClient();
  const isRestoring = useIsRestoring();
  const errorResetBoundary = useQueryErrorResetBoundary();
  const defaultedOptions = client.defaultQueryOptions(options);
  client.getDefaultOptions().queries?._experimental_beforeQuery?.(
    defaultedOptions
  );
  defaultedOptions._optimisticResults = isRestoring ? "isRestoring" : "optimistic";
  ensureSuspenseTimers(defaultedOptions);
  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);
  useClearResetErrorBoundary(errorResetBoundary);
  const isNewCacheEntry = !client.getQueryState(options.queryKey);
  const [observer] = reactExports.useState(
    () => new Observer(
      client,
      defaultedOptions
    )
  );
  const result = observer.getOptimisticResult(defaultedOptions);
  reactExports.useSyncExternalStore(
    reactExports.useCallback(
      (onStoreChange) => {
        const unsubscribe = isRestoring ? () => void 0 : observer.subscribe(notifyManager.batchCalls(onStoreChange));
        observer.updateResult();
        return unsubscribe;
      },
      [observer, isRestoring]
    ),
    () => observer.getCurrentResult(),
    () => observer.getCurrentResult()
  );
  reactExports.useEffect(() => {
    observer.setOptions(defaultedOptions, { listeners: false });
  }, [defaultedOptions, observer]);
  if (shouldSuspend(defaultedOptions, result)) {
    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary);
  }
  if (getHasError({
    result,
    errorResetBoundary,
    throwOnError: defaultedOptions.throwOnError,
    query: client.getQueryCache().get(defaultedOptions.queryHash)
  })) {
    throw result.error;
  }
  client.getDefaultOptions().queries?._experimental_afterQuery?.(
    defaultedOptions,
    result
  );
  if (defaultedOptions.experimental_prefetchInRender && !isServer && willFetch(result, isRestoring)) {
    const promise = isNewCacheEntry ? (
      // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted
      fetchOptimistic(defaultedOptions, observer, errorResetBoundary)
    ) : (
      // subscribe to the "cache promise" so that we can finalize the currentThenable once data comes in
      client.getQueryCache().get(defaultedOptions.queryHash)?.promise
    );
    promise?.catch(noop$6).finally(() => {
      if (!observer.hasListeners()) {
        observer.updateResult();
      }
    });
  }
  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;
}

function useSuspenseQuery(options, queryClient) {
  if (process.env.NODE_ENV !== "production") {
    if (options.queryFn === skipToken) {
      console.error("skipToken is not allowed for useSuspenseQuery");
    }
  }
  return useBaseQuery(
    {
      ...options,
      enabled: true,
      suspense: true,
      throwOnError: defaultThrowOnError,
      placeholderData: void 0
    },
    QueryObserver);
}

function useMutation(options, queryClient) {
  const client = useQueryClient();
  const [observer] = reactExports.useState(
    () => new MutationObserver(
      client,
      options
    )
  );
  reactExports.useEffect(() => {
    observer.setOptions(options);
  }, [observer, options]);
  const result = reactExports.useSyncExternalStore(
    reactExports.useCallback(
      (onStoreChange) => observer.subscribe(notifyManager.batchCalls(onStoreChange)),
      [observer]
    ),
    () => observer.getCurrentResult(),
    () => observer.getCurrentResult()
  );
  const mutate = reactExports.useCallback(
    (variables, mutateOptions) => {
      observer.mutate(variables, mutateOptions).catch(noop$6);
    },
    [observer]
  );
  if (result.error && shouldThrowError(observer.options.throwOnError, [result.error])) {
    throw result.error;
  }
  return { ...result, mutate, mutateAsync: result.mutate };
}

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}

function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}

function toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}

function _defineProperty$1(e, r, t) {
  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}

function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}

function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}

function _arrayLikeToArray$1(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}

function _unsupportedIterableToArray$1(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray$1(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$1(r, a) : void 0;
  }
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray$1(r, e) || _nonIterableRest();
}

var isDevelopment$2 = false;

/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/

function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  } // this weirdness brought to you by firefox

  /* istanbul ignore next */


  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i];
    }
  } // this function should always return with a value
  // TS can't understand it though so we make it stop complaining here


  return undefined;
}

function createStyleElement(options) {
  var tag = document.createElement('style');
  tag.setAttribute('data-emotion', options.key);

  if (options.nonce !== undefined) {
    tag.setAttribute('nonce', options.nonce);
  }

  tag.appendChild(document.createTextNode(''));
  tag.setAttribute('data-s', '');
  return tag;
}

var StyleSheet = /*#__PURE__*/function () {
  // Using Node instead of HTMLElement since container may be a ShadowRoot
  function StyleSheet(options) {
    var _this = this;

    this._insertTag = function (tag) {
      var before;

      if (_this.tags.length === 0) {
        if (_this.insertionPoint) {
          before = _this.insertionPoint.nextSibling;
        } else if (_this.prepend) {
          before = _this.container.firstChild;
        } else {
          before = _this.before;
        }
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }

      _this.container.insertBefore(tag, before);

      _this.tags.push(tag);
    };

    this.isSpeedy = options.speedy === undefined ? !isDevelopment$2 : options.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

    this.key = options.key;
    this.container = options.container;
    this.prepend = options.prepend;
    this.insertionPoint = options.insertionPoint;
    this.before = null;
  }

  var _proto = StyleSheet.prototype;

  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };

  _proto.insert = function insert(rule) {
    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
    // it's 1 in dev because we insert source maps that map a single rule to a location
    // and you can only have one source map per style tag
    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }

    var tag = this.tags[this.tags.length - 1];

    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);

      try {
        // this is the ultrafast version, works across browsers
        // the big drawback is that the css won't be editable in devtools
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e) {
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }

    this.ctr++;
  };

  _proto.flush = function flush() {
    this.tags.forEach(function (tag) {
      var _tag$parentNode;

      return (_tag$parentNode = tag.parentNode) == null ? void 0 : _tag$parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;
  };

  return StyleSheet;
}();

var MS = '-ms-';
var MOZ = '-moz-';
var WEBKIT = '-webkit-';

var COMMENT = 'comm';
var RULESET = 'rule';
var DECLARATION = 'decl';
var IMPORT = '@import';
var KEYFRAMES = '@keyframes';
var LAYER = '@layer';

/**
 * @param {number}
 * @return {number}
 */
var abs = Math.abs;

/**
 * @param {number}
 * @return {string}
 */
var from = String.fromCharCode;

/**
 * @param {object}
 * @return {object}
 */
var assign = Object.assign;

/**
 * @param {string} value
 * @param {number} length
 * @return {number}
 */
function hash (value, length) {
	return charat(value, 0) ^ 45 ? (((((((length << 2) ^ charat(value, 0)) << 2) ^ charat(value, 1)) << 2) ^ charat(value, 2)) << 2) ^ charat(value, 3) : 0
}

/**
 * @param {string} value
 * @return {string}
 */
function trim (value) {
	return value.trim()
}

/**
 * @param {string} value
 * @param {RegExp} pattern
 * @return {string?}
 */
function match (value, pattern) {
	return (value = pattern.exec(value)) ? value[0] : value
}

/**
 * @param {string} value
 * @param {(string|RegExp)} pattern
 * @param {string} replacement
 * @return {string}
 */
function replace (value, pattern, replacement) {
	return value.replace(pattern, replacement)
}

/**
 * @param {string} value
 * @param {string} search
 * @return {number}
 */
function indexof (value, search) {
	return value.indexOf(search)
}

/**
 * @param {string} value
 * @param {number} index
 * @return {number}
 */
function charat (value, index) {
	return value.charCodeAt(index) | 0
}

/**
 * @param {string} value
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function substr (value, begin, end) {
	return value.slice(begin, end)
}

/**
 * @param {string} value
 * @return {number}
 */
function strlen (value) {
	return value.length
}

/**
 * @param {any[]} value
 * @return {number}
 */
function sizeof (value) {
	return value.length
}

/**
 * @param {any} value
 * @param {any[]} array
 * @return {any}
 */
function append (value, array) {
	return array.push(value), value
}

/**
 * @param {string[]} array
 * @param {function} callback
 * @return {string}
 */
function combine (array, callback) {
	return array.map(callback).join('')
}

var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = '';

/**
 * @param {string} value
 * @param {object | null} root
 * @param {object | null} parent
 * @param {string} type
 * @param {string[] | string} props
 * @param {object[] | string} children
 * @param {number} length
 */
function node (value, root, parent, type, props, children, length) {
	return {value: value, root: root, parent: parent, type: type, props: props, children: children, line: line, column: column, length: length, return: ''}
}

/**
 * @param {object} root
 * @param {object} props
 * @return {object}
 */
function copy (root, props) {
	return assign(node('', null, null, '', null, null, 0), root, {length: -root.length}, props)
}

/**
 * @return {number}
 */
function char () {
	return character
}

/**
 * @return {number}
 */
function prev () {
	character = position > 0 ? charat(characters, --position) : 0;

	if (column--, character === 10)
		column = 1, line--;

	return character
}

/**
 * @return {number}
 */
function next () {
	character = position < length ? charat(characters, position++) : 0;

	if (column++, character === 10)
		column = 1, line++;

	return character
}

/**
 * @return {number}
 */
function peek () {
	return charat(characters, position)
}

/**
 * @return {number}
 */
function caret () {
	return position
}

/**
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function slice (begin, end) {
	return substr(characters, begin, end)
}

/**
 * @param {number} type
 * @return {number}
 */
function token (type) {
	switch (type) {
		// \0 \t \n \r \s whitespace token
		case 0: case 9: case 10: case 13: case 32:
			return 5
		// ! + , / > @ ~ isolate token
		case 33: case 43: case 44: case 47: case 62: case 64: case 126:
		// ; { } breakpoint token
		case 59: case 123: case 125:
			return 4
		// : accompanied token
		case 58:
			return 3
		// " ' ( [ opening delimit token
		case 34: case 39: case 40: case 91:
			return 2
		// ) ] closing delimit token
		case 41: case 93:
			return 1
	}

	return 0
}

/**
 * @param {string} value
 * @return {any[]}
 */
function alloc (value) {
	return line = column = 1, length = strlen(characters = value), position = 0, []
}

/**
 * @param {any} value
 * @return {any}
 */
function dealloc (value) {
	return characters = '', value
}

/**
 * @param {number} type
 * @return {string}
 */
function delimit (type) {
	return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)))
}

/**
 * @param {number} type
 * @return {string}
 */
function whitespace (type) {
	while (character = peek())
		if (character < 33)
			next();
		else
			break

	return token(type) > 2 || token(character) > 3 ? '' : ' '
}

/**
 * @param {number} index
 * @param {number} count
 * @return {string}
 */
function escaping (index, count) {
	while (--count && next())
		// not 0-9 A-F a-f
		if (character < 48 || character > 102 || (character > 57 && character < 65) || (character > 70 && character < 97))
			break

	return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32))
}

/**
 * @param {number} type
 * @return {number}
 */
function delimiter (type) {
	while (next())
		switch (character) {
			// ] ) " '
			case type:
				return position
			// " '
			case 34: case 39:
				if (type !== 34 && type !== 39)
					delimiter(character);
				break
			// (
			case 40:
				if (type === 41)
					delimiter(type);
				break
			// \
			case 92:
				next();
				break
		}

	return position
}

/**
 * @param {number} type
 * @param {number} index
 * @return {number}
 */
function commenter (type, index) {
	while (next())
		// //
		if (type + character === 47 + 10)
			break
		// /*
		else if (type + character === 42 + 42 && peek() === 47)
			break

	return '/*' + slice(index, position - 1) + '*' + from(type === 47 ? type : next())
}

/**
 * @param {number} index
 * @return {string}
 */
function identifier (index) {
	while (!token(peek()))
		next();

	return slice(index, position)
}

/**
 * @param {string} value
 * @return {object[]}
 */
function compile (value) {
	return dealloc(parse$7('', null, null, null, [''], value = alloc(value), 0, [0], value))
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {string[]} rule
 * @param {string[]} rules
 * @param {string[]} rulesets
 * @param {number[]} pseudo
 * @param {number[]} points
 * @param {string[]} declarations
 * @return {object}
 */
function parse$7 (value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
	var index = 0;
	var offset = 0;
	var length = pseudo;
	var atrule = 0;
	var property = 0;
	var previous = 0;
	var variable = 1;
	var scanning = 1;
	var ampersand = 1;
	var character = 0;
	var type = '';
	var props = rules;
	var children = rulesets;
	var reference = rule;
	var characters = type;

	while (scanning)
		switch (previous = character, character = next()) {
			// (
			case 40:
				if (previous != 108 && charat(characters, length - 1) == 58) {
					if (indexof(characters += replace(delimit(character), '&', '&\f'), '&\f') != -1)
						ampersand = -1;
					break
				}
			// " ' [
			case 34: case 39: case 91:
				characters += delimit(character);
				break
			// \t \n \r \s
			case 9: case 10: case 13: case 32:
				characters += whitespace(previous);
				break
			// \
			case 92:
				characters += escaping(caret() - 1, 7);
				continue
			// /
			case 47:
				switch (peek()) {
					case 42: case 47:
						append(comment(commenter(next(), caret()), root, parent), declarations);
						break
					default:
						characters += '/';
				}
				break
			// {
			case 123 * variable:
				points[index++] = strlen(characters) * ampersand;
			// } ; \0
			case 125 * variable: case 59: case 0:
				switch (character) {
					// \0 }
					case 0: case 125: scanning = 0;
					// ;
					case 59 + offset: if (ampersand == -1) characters = replace(characters, /\f/g, '');
						if (property > 0 && (strlen(characters) - length))
							append(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2), declarations);
						break
					// @ ;
					case 59: characters += ';';
					// { rule/at-rule
					default:
						append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);

						if (character === 123)
							if (offset === 0)
								parse$7(characters, root, reference, reference, props, rulesets, length, points, children);
							else
								switch (atrule === 99 && charat(characters, 3) === 110 ? 100 : atrule) {
									// d l m s
									case 100: case 108: case 109: case 115:
										parse$7(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);
										break
									default:
										parse$7(characters, reference, reference, reference, [''], children, 0, points, children);
								}
				}

				index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
				break
			// :
			case 58:
				length = 1 + strlen(characters), property = previous;
			default:
				if (variable < 1)
					if (character == 123)
						--variable;
					else if (character == 125 && variable++ == 0 && prev() == 125)
						continue

				switch (characters += from(character), character * variable) {
					// &
					case 38:
						ampersand = offset > 0 ? 1 : (characters += '\f', -1);
						break
					// ,
					case 44:
						points[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1;
						break
					// @
					case 64:
						// -
						if (peek() === 45)
							characters += delimit(next());

						atrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++;
						break
					// -
					case 45:
						if (previous === 45 && strlen(characters) == 2)
							variable = 0;
				}
		}

	return rulesets
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} index
 * @param {number} offset
 * @param {string[]} rules
 * @param {number[]} points
 * @param {string} type
 * @param {string[]} props
 * @param {string[]} children
 * @param {number} length
 * @return {object}
 */
function ruleset (value, root, parent, index, offset, rules, points, type, props, children, length) {
	var post = offset - 1;
	var rule = offset === 0 ? rules : [''];
	var size = sizeof(rule);

	for (var i = 0, j = 0, k = 0; i < index; ++i)
		for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
			if (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\f/g, rule[x])))
				props[k++] = z;

	return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length)
}

/**
 * @param {number} value
 * @param {object} root
 * @param {object?} parent
 * @return {object}
 */
function comment (value, root, parent) {
	return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0)
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} length
 * @return {object}
 */
function declaration (value, root, parent, length) {
	return node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length)
}

/**
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function serialize (children, callback) {
	var output = '';
	var length = sizeof(children);

	for (var i = 0; i < length; i++)
		output += callback(children[i], i, children, callback) || '';

	return output
}

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function stringify (element, index, children, callback) {
	switch (element.type) {
		case LAYER: if (element.children.length) break
		case IMPORT: case DECLARATION: return element.return = element.return || element.value
		case COMMENT: return ''
		case KEYFRAMES: return element.return = element.value + '{' + serialize(element.children, callback) + '}'
		case RULESET: element.value = element.props.join(',');
	}

	return strlen(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : ''
}

/**
 * @param {function[]} collection
 * @return {function}
 */
function middleware (collection) {
	var length = sizeof(collection);

	return function (element, index, children, callback) {
		var output = '';

		for (var i = 0; i < length; i++)
			output += collection[i](element, index, children, callback) || '';

		return output
	}
}

/**
 * @param {function} callback
 * @return {function}
 */
function rulesheet (callback) {
	return function (element) {
		if (!element.root)
			if (element = element.return)
				callback(element);
	}
}

var weakMemoize = function weakMemoize(func) {
  var cache = new WeakMap();
  return function (arg) {
    if (cache.has(arg)) {
      // Use non-null assertion because we just checked that the cache `has` it
      // This allows us to remove `undefined` from the return value
      return cache.get(arg);
    }

    var ret = func(arg);
    cache.set(arg, ret);
    return ret;
  };
};

function memoize$3(fn) {
  var cache = Object.create(null);
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

var isBrowser$3 = typeof document !== 'undefined';

var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
  var previous = 0;
  var character = 0;

  while (true) {
    previous = character;
    character = peek(); // &\f

    if (previous === 38 && character === 12) {
      points[index] = 1;
    }

    if (token(character)) {
      break;
    }

    next();
  }

  return slice(begin, position);
};

var toRules = function toRules(parsed, points) {
  // pretend we've started with a comma
  var index = -1;
  var character = 44;

  do {
    switch (token(character)) {
      case 0:
        // &\f
        if (character === 38 && peek() === 12) {
          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
          // and when it should just concatenate the outer and inner selectors
          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
          points[index] = 1;
        }

        parsed[index] += identifierWithPointTracking(position - 1, points, index);
        break;

      case 2:
        parsed[index] += delimit(character);
        break;

      case 4:
        // comma
        if (character === 44) {
          // colon
          parsed[++index] = peek() === 58 ? '&\f' : '';
          points[index] = parsed[index].length;
          break;
        }

      // fallthrough

      default:
        parsed[index] += from(character);
    }
  } while (character = next());

  return parsed;
};

var getRules = function getRules(value, points) {
  return dealloc(toRules(alloc(value), points));
}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


var fixedElements = /* #__PURE__ */new WeakMap();
var compat = function compat(element) {
  if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  element.length < 1) {
    return;
  }

  var value = element.value,
      parent = element.parent;
  var isImplicitRule = element.column === parent.column && element.line === parent.line;

  while (parent.type !== 'rule') {
    parent = parent.parent;
    if (!parent) return;
  } // short-circuit for the simplest case


  if (element.props.length === 1 && value.charCodeAt(0) !== 58
  /* colon */
  && !fixedElements.get(parent)) {
    return;
  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


  if (isImplicitRule) {
    return;
  }

  fixedElements.set(element, true);
  var points = [];
  var rules = getRules(value, points);
  var parentRules = parent.props;

  for (var i = 0, k = 0; i < rules.length; i++) {
    for (var j = 0; j < parentRules.length; j++, k++) {
      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
    }
  }
};
var removeLabel = function removeLabel(element) {
  if (element.type === 'decl') {
    var value = element.value;

    if ( // charcode for l
    value.charCodeAt(0) === 108 && // charcode for b
    value.charCodeAt(2) === 98) {
      // this ignores label
      element["return"] = '';
      element.value = '';
    }
  }
};

/* eslint-disable no-fallthrough */

function prefix$1(value, length) {
  switch (hash(value, length)) {
    // color-adjust
    case 5103:
      return WEBKIT + 'print-' + value + value;
    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)

    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break

    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,

    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)

    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    // appearance, user-select, transform, hyphens, text-size-adjust

    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    // flex, flex-direction

    case 6828:
    case 4268:
      return WEBKIT + value + MS + value + value;
    // order

    case 6165:
      return WEBKIT + value + MS + 'flex-' + value + value;
    // align-items

    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') + value;
    // align-self

    case 5443:
      return WEBKIT + value + MS + 'flex-item-' + replace(value, /flex-|-self/, '') + value;
    // align-content

    case 4675:
      return WEBKIT + value + MS + 'flex-line-pack' + replace(value, /align-content|flex-|-self/, '') + value;
    // flex-shrink

    case 5548:
      return WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value;
    // flex-basis

    case 5292:
      return WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value;
    // flex-grow

    case 6060:
      return WEBKIT + 'box-' + replace(value, '-grow', '') + WEBKIT + value + MS + replace(value, 'grow', 'positive') + value;
    // transition

    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value;
    // cursor

    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + '$1'), /(image-set)/, WEBKIT + '$1'), value, '') + value;
    // background, background-image

    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + '$1' + '$`$1');
    // justify-content

    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT + value + value;
    // (margin|padding)-inline-(start|end)

    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value;
    // (min|max)?(width|height|inline-size|block-size)

    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      // stretch, max-content, min-content, fill-available
      if (strlen(value) - 1 - length > 6) switch (charat(value, length + 1)) {
        // (m)ax-content, (m)in-content
        case 109:
          // -
          if (charat(value, length + 4) !== 45) break;
        // (f)ill-available, (f)it-content

        case 102:
          return replace(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT + '$2-$3' + '$1' + MOZ + (charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
        // (s)tretch

        case 115:
          return ~indexof(value, 'stretch') ? prefix$1(replace(value, 'stretch', 'fill-available'), length) + value : value;
      }
      break;
    // position: sticky

    case 4949:
      // (s)ticky?
      if (charat(value, length + 1) !== 115) break;
    // display: (flex|inline-flex)

    case 6444:
      switch (charat(value, strlen(value) - 3 - (~indexof(value, '!important') && 10))) {
        // stic(k)y
        case 107:
          return replace(value, ':', ':' + WEBKIT) + value;
        // (inline-)?fl(e)x

        case 101:
          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + WEBKIT + (charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT + '$2$3' + '$1' + MS + '$2box$3') + value;
      }

      break;
    // writing-mode

    case 5936:
      switch (charat(value, length + 11)) {
        // vertical-l(r)
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
        // vertical-r(l)

        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
        // horizontal(-)tb

        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
      }

      return WEBKIT + value + MS + value + value;
  }

  return value;
}

var prefixer = function prefixer(element, index, children, callback) {
  if (element.length > -1) if (!element["return"]) switch (element.type) {
    case DECLARATION:
      element["return"] = prefix$1(element.value, element.length);
      break;

    case KEYFRAMES:
      return serialize([copy(element, {
        value: replace(element.value, '@', '@' + WEBKIT)
      })], callback);

    case RULESET:
      if (element.length) return combine(element.props, function (value) {
        switch (match(value, /(::plac\w+|:read-\w+)/)) {
          // :read-(only|write)
          case ':read-only':
          case ':read-write':
            return serialize([copy(element, {
              props: [replace(value, /:(read-\w+)/, ':' + MOZ + '$1')]
            })], callback);
          // :placeholder

          case '::placeholder':
            return serialize([copy(element, {
              props: [replace(value, /:(plac\w+)/, ':' + WEBKIT + 'input-$1')]
            }), copy(element, {
              props: [replace(value, /:(plac\w+)/, ':' + MOZ + '$1')]
            }), copy(element, {
              props: [replace(value, /:(plac\w+)/, MS + 'input-$1')]
            })], callback);
        }

        return '';
      });
  }
};

/* import type { StylisPlugin } from './types' */

/*
export type Options = {
  nonce?: string,
  stylisPlugins?: StylisPlugin[],
  key: string,
  container?: HTMLElement,
  speedy?: boolean,
  prepend?: boolean,
  insertionPoint?: HTMLElement
}
*/

var getServerStylisCache = isBrowser$3 ? undefined : weakMemoize(function () {
  return memoize$3(function () {
    var cache = {};
    return function (name) {
      return cache[name];
    };
  });
});
var defaultStylisPlugins = [prefixer];

var createCache = function
  /*: EmotionCache */
createCache(options
/*: Options */
) {
  var key = options.key;

  if (isBrowser$3 && key === 'css') {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
    // note this very very intentionally targets all style elements regardless of the key to ensure
    // that creating a cache works inside of render of a React component

    Array.prototype.forEach.call(ssrStyles, function (node
    /*: HTMLStyleElement */
    ) {
      // we want to only move elements which have a space in the data-emotion attribute value
      // because that indicates that it is an Emotion 11 server-side rendered style elements
      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
      // will not result in the Emotion 10 styles being destroyed
      var dataEmotionAttribute = node.getAttribute('data-emotion');

      if (dataEmotionAttribute.indexOf(' ') === -1) {
        return;
      }

      document.head.appendChild(node);
      node.setAttribute('data-s', '');
    });
  }

  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

  var inserted = {};
  var container;
  /* : Node */

  var nodesToHydrate = [];

  if (isBrowser$3) {
    container = options.container || document.head;
    Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node
    /*: HTMLStyleElement */
    ) {
      var attrib = node.getAttribute("data-emotion").split(' ');

      for (var i = 1; i < attrib.length; i++) {
        inserted[attrib[i]] = true;
      }

      nodesToHydrate.push(node);
    });
  }

  var _insert;
  /*: (
  selector: string,
  serialized: SerializedStyles,
  sheet: StyleSheet,
  shouldCache: boolean
  ) => string | void */


  var omnipresentPlugins = [compat, removeLabel];

  if (isBrowser$3) {
    var currentSheet;
    var finalizingPlugins = [stringify, rulesheet(function (rule) {
      currentSheet.insert(rule);
    })];
    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

    var stylis = function stylis(styles) {
      return serialize(compile(styles), serializer);
    };

    _insert = function
      /*: void */
    insert(selector
    /*: string */
    , serialized
    /*: SerializedStyles */
    , sheet
    /*: StyleSheet */
    , shouldCache
    /*: boolean */
    ) {
      currentSheet = sheet;

      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

      if (shouldCache) {
        cache.inserted[serialized.name] = true;
      }
    };
  } else {
    var _finalizingPlugins = [stringify];

    var _serializer = middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));

    var _stylis = function _stylis(styles) {
      return serialize(compile(styles), _serializer);
    };

    var serverStylisCache = getServerStylisCache(stylisPlugins)(key);

    var getRules = function
      /*: string */
    getRules(selector
    /*: string */
    , serialized
    /*: SerializedStyles */
    ) {
      var name = serialized.name;

      if (serverStylisCache[name] === undefined) {
        serverStylisCache[name] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
      }

      return serverStylisCache[name];
    };

    _insert = function
      /*: string | void */
    _insert(selector
    /*: string */
    , serialized
    /*: SerializedStyles */
    , sheet
    /*: StyleSheet */
    , shouldCache
    /*: boolean */
    ) {
      var name = serialized.name;
      var rules = getRules(selector, serialized);

      if (cache.compat === undefined) {
        // in regular mode, we don't set the styles on the inserted cache
        // since we don't need to and that would be wasting memory
        // we return them so that they are rendered in a style tag
        if (shouldCache) {
          cache.inserted[name] = true;
        }

        return rules;
      } else {
        // in compat mode, we put the styles on the inserted cache so
        // that emotion-server can pull out the styles
        // except when we don't want to cache it which was in Global but now
        // is nowhere but we don't want to do a major right now
        // and just in case we're going to leave the case here
        // it's also not affecting client side bundle size
        // so it's really not a big deal
        if (shouldCache) {
          cache.inserted[name] = rules;
        } else {
          return rules;
        }
      }
    };
  }

  var cache
  /*: EmotionCache */
  = {
    key: key,
    sheet: new StyleSheet({
      key: key,
      container: container,
      nonce: options.nonce,
      speedy: options.speedy,
      prepend: options.prepend,
      insertionPoint: options.insertionPoint
    }),
    nonce: options.nonce,
    inserted: inserted,
    registered: {},
    insert: _insert
  };
  cache.sheet.hydrate(nodesToHydrate);
  return cache;
};

var reactIs$2 = {exports: {}};

var reactIs_production_min$1 = {};

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_production_min$1;

function requireReactIs_production_min$1 () {
	if (hasRequiredReactIs_production_min$1) return reactIs_production_min$1;
	hasRequiredReactIs_production_min$1 = 1;
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
	Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
	function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min$1.AsyncMode=l;reactIs_production_min$1.ConcurrentMode=m;reactIs_production_min$1.ContextConsumer=k;reactIs_production_min$1.ContextProvider=h;reactIs_production_min$1.Element=c;reactIs_production_min$1.ForwardRef=n;reactIs_production_min$1.Fragment=e;reactIs_production_min$1.Lazy=t;reactIs_production_min$1.Memo=r;reactIs_production_min$1.Portal=d;
	reactIs_production_min$1.Profiler=g;reactIs_production_min$1.StrictMode=f;reactIs_production_min$1.Suspense=p;reactIs_production_min$1.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min$1.isConcurrentMode=A;reactIs_production_min$1.isContextConsumer=function(a){return z(a)===k};reactIs_production_min$1.isContextProvider=function(a){return z(a)===h};reactIs_production_min$1.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min$1.isForwardRef=function(a){return z(a)===n};reactIs_production_min$1.isFragment=function(a){return z(a)===e};reactIs_production_min$1.isLazy=function(a){return z(a)===t};
	reactIs_production_min$1.isMemo=function(a){return z(a)===r};reactIs_production_min$1.isPortal=function(a){return z(a)===d};reactIs_production_min$1.isProfiler=function(a){return z(a)===g};reactIs_production_min$1.isStrictMode=function(a){return z(a)===f};reactIs_production_min$1.isSuspense=function(a){return z(a)===p};
	reactIs_production_min$1.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min$1.typeOf=z;
	return reactIs_production_min$1;
}

var reactIs_development$1 = {};

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_development$1;

function requireReactIs_development$1 () {
	if (hasRequiredReactIs_development$1) return reactIs_development$1;
	hasRequiredReactIs_development$1 = 1;



	if (process.env.NODE_ENV !== "production") {
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	reactIs_development$1.AsyncMode = AsyncMode;
	reactIs_development$1.ConcurrentMode = ConcurrentMode;
	reactIs_development$1.ContextConsumer = ContextConsumer;
	reactIs_development$1.ContextProvider = ContextProvider;
	reactIs_development$1.Element = Element;
	reactIs_development$1.ForwardRef = ForwardRef;
	reactIs_development$1.Fragment = Fragment;
	reactIs_development$1.Lazy = Lazy;
	reactIs_development$1.Memo = Memo;
	reactIs_development$1.Portal = Portal;
	reactIs_development$1.Profiler = Profiler;
	reactIs_development$1.StrictMode = StrictMode;
	reactIs_development$1.Suspense = Suspense;
	reactIs_development$1.isAsyncMode = isAsyncMode;
	reactIs_development$1.isConcurrentMode = isConcurrentMode;
	reactIs_development$1.isContextConsumer = isContextConsumer;
	reactIs_development$1.isContextProvider = isContextProvider;
	reactIs_development$1.isElement = isElement;
	reactIs_development$1.isForwardRef = isForwardRef;
	reactIs_development$1.isFragment = isFragment;
	reactIs_development$1.isLazy = isLazy;
	reactIs_development$1.isMemo = isMemo;
	reactIs_development$1.isPortal = isPortal;
	reactIs_development$1.isProfiler = isProfiler;
	reactIs_development$1.isStrictMode = isStrictMode;
	reactIs_development$1.isSuspense = isSuspense;
	reactIs_development$1.isValidElementType = isValidElementType;
	reactIs_development$1.typeOf = typeOf;
	  })();
	}
	return reactIs_development$1;
}

if (process.env.NODE_ENV === 'production') {
  reactIs$2.exports = requireReactIs_production_min$1();
} else {
  reactIs$2.exports = requireReactIs_development$1();
}

var reactIsExports = reactIs$2.exports;

var reactIs$1 = reactIsExports;
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs$1.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs$1.Memo] = MEMO_STATICS;

var isBrowser$2 = typeof document !== 'undefined';

function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = '';
  classNames.split(' ').forEach(function (className) {
    if (registered[className] !== undefined) {
      registeredStyles.push(registered[className] + ";");
    } else if (className) {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;

  if ( // we only need to add the styles to the registered cache if the
  // class name could be used further down
  // the tree but if it's a string tag, we know it won't
  // so we don't have to add it to registered cache.
  // this improves memory usage since we can avoid storing the whole style string
  (isStringTag === false || // we need to always store it if we're in compat mode and
  // in node since emotion-server relies on whether a style is in
  // the registered cache to know whether a style is global or not
  // also, note that this check will be dead code eliminated in the browser
  isBrowser$2 === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
    cache.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles(cache, serialized, isStringTag) {
  registerStyles(cache, serialized, isStringTag);
  var className = cache.key + "-" + serialized.name;

  if (cache.inserted[serialized.name] === undefined) {
    var stylesForSSR = '';
    var current = serialized;

    do {
      var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

      if (!isBrowser$2 && maybeStyles !== undefined) {
        stylesForSSR += maybeStyles;
      }

      current = current.next;
    } while (current !== undefined);

    if (!isBrowser$2 && stylesForSSR.length !== 0) {
      return stylesForSSR;
    }
  }
};

/* eslint-disable */
// Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
function murmur2(str) {
  // 'm' and 'r' are mixing constants generated offline.
  // They're not really 'magic', they just happen to work well.
  // const m = 0x5bd1e995;
  // const r = 24;
  // Initialize the hash
  var h = 0; // Mix 4 bytes at a time into the hash

  var k,
      i = 0,
      len = str.length;

  for (; len >= 4; ++i, len -= 4) {
    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
    k =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
    k ^=
    /* k >>> r: */
    k >>> 24;
    h =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
    /* Math.imul(h, m): */
    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Handle the last few bytes of the input array


  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

    case 2:
      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

    case 1:
      h ^= str.charCodeAt(i) & 0xff;
      h =
      /* Math.imul(h, m): */
      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Do a few final mixes of the hash to ensure the last few
  // bytes are well-incorporated.


  h ^= h >>> 13;
  h =
  /* Math.imul(h, m): */
  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  return ((h ^ h >>> 15) >>> 0).toString(36);
}

var unitlessKeys = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  scale: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};

var isDevelopment$1 = false;

var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

var isCustomProperty = function isCustomProperty(property) {
  return property.charCodeAt(1) === 45;
};

var isProcessableValue = function isProcessableValue(value) {
  return value != null && typeof value !== 'boolean';
};

var processStyleName = /* #__PURE__ */memoize$3(function (styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
});

var processStyleValue = function processStyleValue(key, value) {
  switch (key) {
    case 'animation':
    case 'animationName':
      {
        if (typeof value === 'string') {
          return value.replace(animationRegex, function (match, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
  }

  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
    return value + 'px';
  }

  return value;
};

var noComponentSelectorMessage = 'Component selectors can only be used in conjunction with ' + '@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware ' + 'compiler transform.';

function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return '';
  }

  var componentSelector = interpolation;

  if (componentSelector.__emotion_styles !== undefined) {

    return componentSelector;
  }

  switch (typeof interpolation) {
    case 'boolean':
      {
        return '';
      }

    case 'object':
      {
        var keyframes = interpolation;

        if (keyframes.anim === 1) {
          cursor = {
            name: keyframes.name,
            styles: keyframes.styles,
            next: cursor
          };
          return keyframes.name;
        }

        var serializedStyles = interpolation;

        if (serializedStyles.styles !== undefined) {
          var next = serializedStyles.next;

          if (next !== undefined) {
            // not the most efficient thing ever but this is a pretty rare case
            // and there will be very few iterations of this generally
            while (next !== undefined) {
              cursor = {
                name: next.name,
                styles: next.styles,
                next: cursor
              };
              next = next.next;
            }
          }

          var styles = serializedStyles.styles + ";";

          return styles;
        }

        return createStringFromObject(mergedProps, registered, interpolation);
      }

    case 'function':
      {
        if (mergedProps !== undefined) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        }

        break;
      }
  } // finalize string values (regular strings and functions interpolated into css calls)


  var asString = interpolation;

  if (registered == null) {
    return asString;
  }

  var cached = registered[asString];
  return cached !== undefined ? cached : asString;
}

function createStringFromObject(mergedProps, registered, obj) {
  var string = '';

  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    }
  } else {
    for (var key in obj) {
      var value = obj[key];

      if (typeof value !== 'object') {
        var asString = value;

        if (registered != null && registered[asString] !== undefined) {
          string += key + "{" + registered[asString] + "}";
        } else if (isProcessableValue(asString)) {
          string += processStyleName(key) + ":" + processStyleValue(key, asString) + ";";
        }
      } else {
        if (key === 'NO_COMPONENT_SELECTOR' && isDevelopment$1) {
          throw new Error(noComponentSelectorMessage);
        }

        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(key) + ":" + processStyleValue(key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);

          switch (key) {
            case 'animation':
            case 'animationName':
              {
                string += processStyleName(key) + ":" + interpolated + ";";
                break;
              }

            default:
              {

                string += key + "{" + interpolated + "}";
              }
          }
        }
      }
    }
  }

  return string;
}

var labelPattern = /label:\s*([^\s;{]+)\s*(;|$)/g;
// keyframes are stored on the SerializedStyles object as a linked list


var cursor;
function serializeStyles(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
    return args[0];
  }

  var stringMode = true;
  var styles = '';
  cursor = undefined;
  var strings = args[0];

  if (strings == null || strings.raw === undefined) {
    stringMode = false;
    styles += handleInterpolation(mergedProps, registered, strings);
  } else {
    var asTemplateStringsArr = strings;

    styles += asTemplateStringsArr[0];
  } // we start at 1 since we've already handled the first arg


  for (var i = 1; i < args.length; i++) {
    styles += handleInterpolation(mergedProps, registered, args[i]);

    if (stringMode) {
      var templateStringsArr = strings;

      styles += templateStringsArr[i];
    }
  }


  labelPattern.lastIndex = 0;
  var identifierName = '';
  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

  while ((match = labelPattern.exec(styles)) !== null) {
    identifierName += '-' + match[1];
  }

  var name = murmur2(styles) + identifierName;

  return {
    name: name,
    styles: styles,
    next: cursor
  };
}

var isBrowser$1 = typeof document !== 'undefined';

var syncFallback = function syncFallback(create) {
  return create();
};

var useInsertionEffect = React$1['useInsertion' + 'Effect'] ? React$1['useInsertion' + 'Effect'] : false;
var useInsertionEffectAlwaysWithSyncFallback = !isBrowser$1 ? syncFallback : useInsertionEffect || syncFallback;

var isDevelopment = false;

var isBrowser = typeof document !== 'undefined';

/* import { type EmotionCache } from '@emotion/utils' */
var EmotionCacheContext
/*: React.Context<EmotionCache | null> */
= /* #__PURE__ */reactExports.createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case
// because this module is primarily intended for the browser and node
// but it's also required in react native and similar environments sometimes
// and we could have a special build just for that
// but this is much easier and the native packages
// might use a different theme context in the future anyway
typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache({
  key: 'css'
}) : null);

EmotionCacheContext.Provider;

var withEmotionCache = function withEmotionCache
/* <Props, Ref: React.Ref<*>> */
(func
/*: (props: Props, cache: EmotionCache, ref: Ref) => React.Node */
)
/*: React.AbstractComponent<Props> */
{
  return /*#__PURE__*/reactExports.forwardRef(function (props
  /*: Props */
  , ref
  /*: Ref */
  ) {
    // the cache will never be null in the browser
    var cache = reactExports.useContext(EmotionCacheContext);
    return func(props, cache, ref);
  });
};

if (!isBrowser) {
  withEmotionCache = function withEmotionCache
  /* <Props> */
  (func
  /*: (props: Props, cache: EmotionCache) => React.Node */
  )
  /*: React.StatelessFunctionalComponent<Props> */
  {
    return function (props
    /*: Props */
    ) {
      var cache = reactExports.useContext(EmotionCacheContext);

      if (cache === null) {
        // yes, we're potentially creating this on every render
        // it doesn't actually matter though since it's only on the server
        // so there will only every be a single render
        // that could change in the future because of suspense and etc. but for now,
        // this works and i don't want to optimise for a future thing that we aren't sure about
        cache = createCache({
          key: 'css'
        });
        return /*#__PURE__*/reactExports.createElement(EmotionCacheContext.Provider, {
          value: cache
        }, func(props, cache));
      } else {
        return func(props, cache);
      }
    };
  };
}

var ThemeContext = /* #__PURE__ */reactExports.createContext({});

var hasOwn = {}.hasOwnProperty;

var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
var createEmotionProps = function createEmotionProps(type
/*: React.ElementType */
, props
/*: Object */
) {

  var newProps
  /*: any */
  = {};

  for (var key in props) {
    if (hasOwn.call(props, key)) {
      newProps[key] = props[key];
    }
  }

  newProps[typePropName] = type; // Runtime labeling is an opt-in feature because:

  return newProps;
};

var Insertion$1 = function Insertion(_ref) {
  var cache = _ref.cache,
      serialized = _ref.serialized,
      isStringTag = _ref.isStringTag;
  registerStyles(cache, serialized, isStringTag);
  var rules = useInsertionEffectAlwaysWithSyncFallback(function () {
    return insertStyles(cache, serialized, isStringTag);
  });

  if (!isBrowser && rules !== undefined) {
    var _ref2;

    var serializedNames = serialized.name;
    var next = serialized.next;

    while (next !== undefined) {
      serializedNames += ' ' + next.name;
      next = next.next;
    }

    return /*#__PURE__*/reactExports.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
      __html: rules
    }, _ref2.nonce = cache.sheet.nonce, _ref2));
  }

  return null;
};

var Emotion = /* #__PURE__ */withEmotionCache(
/* <any, any> */
function (props, cache, ref) {
  var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
  // not passing the registered cache to serializeStyles because it would
  // make certain babel optimisations not possible

  if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {
    cssProp = cache.registered[cssProp];
  }

  var WrappedComponent = props[typePropName];
  var registeredStyles = [cssProp];
  var className = '';

  if (typeof props.className === 'string') {
    className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
  } else if (props.className != null) {
    className = props.className + " ";
  }

  var serialized = serializeStyles(registeredStyles, undefined, reactExports.useContext(ThemeContext));

  className += cache.key + "-" + serialized.name;
  var newProps = {};

  for (var key in props) {
    if (hasOwn.call(props, key) && key !== 'css' && key !== typePropName && (!isDevelopment )) {
      newProps[key] = props[key];
    }
  }

  newProps.className = className;

  if (ref) {
    newProps.ref = ref;
  }

  return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(Insertion$1, {
    cache: cache,
    serialized: serialized,
    isStringTag: typeof WrappedComponent === 'string'
  }), /*#__PURE__*/reactExports.createElement(WrappedComponent, newProps));
});

var Emotion$1 = Emotion;

var jsx
/*: typeof React.createElement */
= function jsx
/*: typeof React.createElement */
(type
/*: React.ElementType */
, props
/*: Object */
) {
  var args = arguments;

  if (props == null || !hasOwn.call(props, 'css')) {
    return reactExports.createElement.apply(undefined, args);
  }

  var argsLength = args.length;
  var createElementArgArray = new Array(argsLength);
  createElementArgArray[0] = Emotion$1;
  createElementArgArray[1] = createEmotionProps(type, props);

  for (var i = 2; i < argsLength; i++) {
    createElementArgArray[i] = args[i];
  }

  return reactExports.createElement.apply(null, createElementArgArray);
};

/* import type { Interpolation, SerializedStyles } from '@emotion/utils' */

function css$2()
/*: SerializedStyles */
{
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return serializeStyles(args);
}

/*
type Keyframes = {|
  name: string,
  styles: string,
  anim: 1,
  toString: () => string
|} & string
*/

var keyframes = function
  /*: Keyframes */
keyframes() {
  var insertable = css$2.apply(void 0, arguments);
  var name = "animation-" + insertable.name;
  return {
    name: name,
    styles: "@keyframes " + name + "{" + insertable.styles + "}",
    anim: 1,
    toString: function toString() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }
  };
};

/*
type ClassNameArg =
  | string
  | boolean
  | { [key: string]: boolean }
  | Array<ClassNameArg>
  | null
  | void
*/

var classnames = function
  /*: string */
classnames(args
/*: Array<ClassNameArg> */
) {
  var len = args.length;
  var i = 0;
  var cls = '';

  for (; i < len; i++) {
    var arg = args[i];
    if (arg == null) continue;
    var toAdd = void 0;

    switch (typeof arg) {
      case 'boolean':
        break;

      case 'object':
        {
          if (Array.isArray(arg)) {
            toAdd = classnames(arg);
          } else {

            toAdd = '';

            for (var k in arg) {
              if (arg[k] && k) {
                toAdd && (toAdd += ' ');
                toAdd += k;
              }
            }
          }

          break;
        }

      default:
        {
          toAdd = arg;
        }
    }

    if (toAdd) {
      cls && (cls += ' ');
      cls += toAdd;
    }
  }

  return cls;
};

function merge(registered
/*: Object */
, css
/*: (...args: Array<any>) => string */
, className
/*: string */
) {
  var registeredStyles = [];
  var rawClassName = getRegisteredStyles(registered, registeredStyles, className);

  if (registeredStyles.length < 2) {
    return className;
  }

  return rawClassName + css(registeredStyles);
}

var Insertion = function Insertion(_ref) {
  var cache = _ref.cache,
      serializedArr = _ref.serializedArr;
  var rules = useInsertionEffectAlwaysWithSyncFallback(function () {
    var rules = '';

    for (var i = 0; i < serializedArr.length; i++) {
      var res = insertStyles(cache, serializedArr[i], false);

      if (!isBrowser && res !== undefined) {
        rules += res;
      }
    }

    if (!isBrowser) {
      return rules;
    }
  });

  if (!isBrowser && rules.length !== 0) {
    var _ref2;

    return /*#__PURE__*/reactExports.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedArr.map(function (serialized) {
      return serialized.name;
    }).join(' '), _ref2.dangerouslySetInnerHTML = {
      __html: rules
    }, _ref2.nonce = cache.sheet.nonce, _ref2));
  }

  return null;
};
/*
type Props = {
  children: ({
    css: (...args: any) => string,
    cx: (...args: Array<ClassNameArg>) => string,
    theme: Object
  }) => React.Node
} */


var ClassNames
/*: React.AbstractComponent<Props>*/
= /* #__PURE__ */withEmotionCache(function (props, cache) {
  var hasRendered = false;
  var serializedArr = [];

  var css = function css() {
    if (hasRendered && isDevelopment) {
      throw new Error('css can only be used during render');
    }

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var serialized = serializeStyles(args, cache.registered);
    serializedArr.push(serialized); // registration has to happen here as the result of this might get consumed by `cx`

    registerStyles(cache, serialized, false);
    return cache.key + "-" + serialized.name;
  };

  var cx = function cx() {
    if (hasRendered && isDevelopment) {
      throw new Error('cx can only be used during render');
    }

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return merge(cache.registered, css, classnames(args));
  };

  var content = {
    css: css,
    cx: cx,
    theme: reactExports.useContext(ThemeContext)
  };
  var ele = props.children(content);
  hasRendered = true;
  return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(Insertion, {
    cache: cache,
    serializedArr: serializedArr
  }), ele);
});

function areInputsEqual$1(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }

  for (var i = 0; i < newInputs.length; i++) {
    if (newInputs[i] !== lastInputs[i]) {
      return false;
    }
  }

  return true;
}

function useMemoOne(getResult, inputs) {
  var initial = reactExports.useState(function () {
    return {
      inputs: inputs,
      result: getResult()
    };
  })[0];
  var isFirstRun = reactExports.useRef(true);
  var committed = reactExports.useRef(initial);
  var useCache = isFirstRun.current || Boolean(inputs && committed.current.inputs && areInputsEqual$1(inputs, committed.current.inputs));
  var cache = useCache ? committed.current : {
    inputs: inputs,
    result: getResult()
  };
  reactExports.useEffect(function () {
    isFirstRun.current = false;
    committed.current = cache;
  }, [cache]);
  return cache.result;
}
function useCallbackOne(callback, inputs) {
  return useMemoOne(function () {
    return callback;
  }, inputs);
}

function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray$1(r);
}

function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray$1(r) || _nonIterableSpread();
}

function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}

function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}

function _assertThisInitialized(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}

function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
    return t.__proto__ || Object.getPrototypeOf(t);
  }, _getPrototypeOf(t);
}

function _superPropBase(t, o) {
  for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t)););
  return t;
}

function _get() {
  return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {
    var p = _superPropBase(e, t);
    if (p) {
      var n = Object.getOwnPropertyDescriptor(p, t);
      return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;
    }
  }, _get.apply(null, arguments);
}

function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    return t.__proto__ = e, t;
  }, _setPrototypeOf(t, e);
}

function _inherits(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: !0,
      configurable: !0
    }
  }), Object.defineProperty(t, "prototype", {
    writable: !1
  }), e && _setPrototypeOf(t, e);
}

function _possibleConstructorReturn(t, e) {
  if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t);
}

function ownKeys$m(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$l(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$m(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$m(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var AnalyticsEvent = /*#__PURE__*/function () {
  function AnalyticsEvent(props) {
    var _this = this;
    _classCallCheck(this, AnalyticsEvent);
    _defineProperty$1(this, "_isAnalyticsEvent", true);
    _defineProperty$1(this, "clone", function () {
      // just a shallow clone, don't change sub refs unless you want to
      // affect the original's too
      var payload = _objectSpread$l({}, _this.payload);
      return new AnalyticsEvent({
        payload: payload
      });
    });
    this.payload = props.payload;
  }
  _createClass(AnalyticsEvent, [{
    key: "update",
    value: function update(updater) {
      if (typeof updater === 'function') {
        this.payload = updater(this.payload);
      }
      if (_typeof(updater) === 'object') {
        this.payload = _objectSpread$l(_objectSpread$l({}, this.payload), updater);
      }
      return this;
    }
  }]);
  return AnalyticsEvent;
}();

function _createSuper$2(t) { var r = _isNativeReflectConstruct$2(); return function () { var e, o = _getPrototypeOf(t); if (r) { var s = _getPrototypeOf(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return _possibleConstructorReturn(this, e); }; }
function _isNativeReflectConstruct$2() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2 = function _isNativeReflectConstruct() { return !!t; })(); }
var UIAnalyticsEvent = /*#__PURE__*/function (_AnalyticsEvent) {
  _inherits(UIAnalyticsEvent, _AnalyticsEvent);
  var _super = _createSuper$2(UIAnalyticsEvent);
  function UIAnalyticsEvent(props) {
    var _this;
    _classCallCheck(this, UIAnalyticsEvent);
    _this = _super.call(this, props);
    _defineProperty$1(_assertThisInitialized(_this), "_isUIAnalyticsEvent", true);
    _defineProperty$1(_assertThisInitialized(_this), "clone", function () {
      if (_this.hasFired) {
        if (process.env.NODE_ENV !== 'production' && !process.env.CI) {
          // eslint-disable-next-line no-console
          console.warn("Cannot clone an event after it's been fired.");
        }
        return null;
      }
      var context = _toConsumableArray(_this.context);
      var handlers = _toConsumableArray(_this.handlers);

      /**
       * A hacky "deep clone" of the object. This is limited in that it wont
       * support functions, regexs, Maps, Sets, etc, but none of those need to
       * be represented in our payload.
       */
      var payload = JSON.parse(JSON.stringify(_this.payload));
      return new UIAnalyticsEvent({
        context: context,
        handlers: handlers,
        payload: payload
      });
    });
    _defineProperty$1(_assertThisInitialized(_this), "fire", function (channel) {
      if (_this.hasFired) {
        if (process.env.NODE_ENV !== 'production' && !process.env.CI) {
          // eslint-disable-next-line no-console
          console.warn('Cannot fire an event twice.');
        }
        return;
      }
      _this.handlers.forEach(function (handler) {
        return handler(_assertThisInitialized(_this), channel);
      });
      _this.hasFired = true;
    });
    _this.context = props.context || [];
    _this.handlers = props.handlers || [];
    _this.hasFired = false;
    return _this;
  }
  _createClass(UIAnalyticsEvent, [{
    key: "update",
    value: function update(updater) {
      if (this.hasFired) {
        if (process.env.NODE_ENV !== 'production' && !process.env.CI) {
          // eslint-disable-next-line no-console
          console.warn("Cannot update an event after it's been fired.");
        }
        return this;
      }
      return _get(_getPrototypeOf(UIAnalyticsEvent.prototype), "update", this).call(this, updater);
    }
  }]);
  return UIAnalyticsEvent;
}(AnalyticsEvent);

var AnalyticsNextContext = reactExports.createContext({
    getAtlaskitAnalyticsContext: function () { return []; },
    getAtlaskitAnalyticsEventHandlers: function () { return []; },
});

var useAnalyticsContext = function useAnalyticsContext() {
  return reactExports.useContext(AnalyticsNextContext);
};

function useAnalyticsEvents() {
  var analyticsContext = useAnalyticsContext();
  var createAnalyticsEvent = useCallbackOne(function (payload) {
    return new UIAnalyticsEvent({
      context: analyticsContext.getAtlaskitAnalyticsContext(),
      handlers: analyticsContext.getAtlaskitAnalyticsEventHandlers(),
      payload: payload
    });
  }, [analyticsContext]);
  return {
    createAnalyticsEvent: createAnalyticsEvent
  };
}

var useTrackedRef = function useTrackedRef(value) {
  var ref = reactExports.useRef(value);
  ref.current = value;
  return ref;
};

function ownKeys$l(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$k(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$l(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$l(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// WARNING: This hook will only function correctly for leaf node components - as in
// no children inside the component will require analytics themselves.
// Ignoring this warning will mean the analytics context of child components will not
// include the context of this component, .e.g, lost data.
// If you are going to have child components that require analytics use withAnalytics
// or AnalyticsContext component instead.
function usePlatformLeafEventHandler(_ref) {
  var fn = _ref.fn,
    action = _ref.action,
    componentName = _ref.componentName,
    actionSubject = _ref.actionSubject,
    packageName = _ref.packageName,
    packageVersion = _ref.packageVersion,
    analyticsData = _ref.analyticsData;
  var _useAnalyticsEvents = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;

  // We put analyticsData and fn in a ref so that we don't need to break
  // memoization.
  // Generally these could be defined by consumers inline
  // and so we do this to avoid breaking memoization of useCallback
  var dataRef = useTrackedRef(analyticsData);
  var fnRef = useTrackedRef(fn);
  var handler = reactExports.useCallback(function (value) {
    var analyticsEvent = createAnalyticsEvent({
      action: action,
      actionSubject: actionSubject || componentName,
      attributes: {
        componentName: componentName,
        packageName: packageName,
        packageVersion: packageVersion
      }
    });

    // To avoid wrapping this component in AnalyticsContext we manually
    // push the parent context's meta data into the context.
    // Note: this new 'context'
    var context = _objectSpread$k({
      componentName: componentName,
      packageName: packageName,
      packageVersion: packageVersion
    }, dataRef.current);
    analyticsEvent.context.push(context);

    // fire an event on the atlaskit channel
    var clone = analyticsEvent.clone();
    if (clone) {
      clone.fire('atlaskit');
    }
    fnRef.current(value, analyticsEvent);
  }, [
  // These are strings and won't change
  action, componentName, actionSubject, packageName, packageVersion,
  // This function is memoized in the context
  createAnalyticsEvent,
  // these are a stable ref because of the useTrackedRef hook
  dataRef, fnRef]);
  return handler;
}

/**
 * An empty function which does nothing.
 */
// eslint-disable-next-line @repo/internal/react/use-noop
function noop$5() {}

function _objectWithoutPropertiesLoose(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (e.includes(n)) continue;
    t[n] = r[n];
  }
  return t;
}

function _objectWithoutProperties(e, t) {
  if (null == e) return {};
  var o,
    r,
    i = _objectWithoutPropertiesLoose(e, t);
  if (Object.getOwnPropertySymbols) {
    var s = Object.getOwnPropertySymbols(e);
    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
  }
  return i;
}

// Allows support for heading levels 1-9 via aria-level

var HeadingLevelContext = /*#__PURE__*/reactExports.createContext(0);

/**
 * @internal
 * @returns The current heading level context.
 */
var useHeadingLevel = function useHeadingLevel() {
  return reactExports.useContext(HeadingLevelContext);
};

/**
 * Infers the correct heading markup based on the current heading level context.
 */
var useHeading = function useHeading(fallback) {
  var hLevel = useHeadingLevel();
  /**
   * Order here is important, we for now apply
   * 1. inferred a11y level (this only applies if context is present)
   * 2. default final fallback
   */
  return [hLevel, hLevel && (hLevel > 6 ? 'div' : "h".concat(hLevel)) || fallback];
};

var _ref$1, _process, _process2;
// We can't rely on NODE_ENV === 'test' if its value is already configured by the consumer to some other value, so better to use JEST_WORKER_ID
// https://jestjs.io/docs/environment-variables#jest_worker_id
var TESTS_MODE = (_ref$1 = (globalThis === null || globalThis === void 0 || (_process = globalThis.process) === null || _process === void 0 || (_process = _process.env) === null || _process === void 0 ? void 0 : _process.JEST_WORKER_ID) !== undefined) !== null && _ref$1 !== void 0 ? _ref$1 : false;
var DEBUG_MODE = !TESTS_MODE && (globalThis === null || globalThis === void 0 || (_process2 = globalThis.process) === null || _process2 === void 0 || (_process2 = _process2.env) === null || _process2 === void 0 ? void 0 : _process2.NODE_ENV) !== 'production';
var debug$2 = function debug() {
  var _console;
  if (!DEBUG_MODE) {
    return;
  }

  // eslint-disable-next-line no-console
  (_console = console).debug.apply(_console, arguments);
};

var pkgName = '@atlaskit/platform-feature-flags';
var PFF_GLOBAL_KEY = '__PLATFORM_FEATURE_FLAGS__';
var hasProcessEnv = typeof process !== 'undefined' && typeof process.env !== 'undefined';

// FF global overrides can be configured by test runners or Storybook
var ENV_ENABLE_PLATFORM_FF = hasProcessEnv ?
// Use global "process" variable and process.env['FLAG_NAME'] syntax, so it can be replaced by webpack DefinePlugin
process.env['ENABLE_PLATFORM_FF'] === 'true' : false;

// STORYBOOK_ENABLE_PLATFORM_FF is included as storybook only allows env vars prefixed with STORYBOOK
// https://github.com/storybookjs/storybook/issues/12270

var ENV_STORYBOOK_ENABLE_PLATFORM_FF = hasProcessEnv ?
// Use global "process" variable and process.env['FLAG_NAME'] syntax, so it can be replaced by webpack DefinePlugin
process.env['STORYBOOK_ENABLE_PLATFORM_FF'] === 'true' : false;
var ENABLE_GLOBAL_PLATFORM_FF_OVERRIDE = ENV_ENABLE_PLATFORM_FF || ENV_STORYBOOK_ENABLE_PLATFORM_FF;
var DEFAULT_PFF_GLOBAL = {
  // In development mode we want to capture any feature flag checks that happen using the default resolver and log this result when the resolver is replaced.
  // This is because evaluating feature flags when the resolver/FF client is loaded asynchronously could cause unexpected issues.
  earlyResolvedFlags: new Map(),
  booleanResolver: function booleanResolver(flagKey) {
    if (process.env.NODE_ENV !== 'production') {
      var unresolvedFlagCount = this.earlyResolvedFlags.get(flagKey) || 0;
      this.earlyResolvedFlags.set(flagKey, unresolvedFlagCount + 1);
    }
    return false;
  }
};
var globalVar = typeof window !== 'undefined' ? window : globalThis;
globalVar[PFF_GLOBAL_KEY] = globalVar[PFF_GLOBAL_KEY] || DEFAULT_PFF_GLOBAL;
function resolveBooleanFlag(flagKey) {
  if (ENABLE_GLOBAL_PLATFORM_FF_OVERRIDE) {
    debug$2('[%s]: The feature flags were enabled while running tests. The flag "%s" will be always enabled.', pkgName, flagKey);
    return true;
  }
  try {
    var _globalVar$PFF_GLOBAL2;
    var result = (_globalVar$PFF_GLOBAL2 = globalVar[PFF_GLOBAL_KEY]) === null || _globalVar$PFF_GLOBAL2 === void 0 ? void 0 : _globalVar$PFF_GLOBAL2.booleanResolver(flagKey);
    if (typeof result !== 'boolean') {
      // eslint-disable-next-line no-console
      console.warn("".concat(flagKey, " resolved to a non-boolean value, returning false for safety"));
      return false;
    }
    return result;
  } catch (e) {
    return false;
  }
}

/**
 * Returns the value of a feature flag. If the flag does not resolve, it returns the "false" as a default value.
 *
 * @param name
 */
function fg(name) {
  return resolveBooleanFlag(name);
}

var CSS_PREFIX = 'ds';
var CURRENT_SURFACE_CSS_VAR = "--".concat(CSS_PREFIX, "-elevation-surface-current");

function ownKeys$k(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$j(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$k(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$k(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }

/**
 * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::c98c944b8a999cfc194a2cfe851d2433>>
 * @codegenId dimensions
 * @codegenCommand yarn workspace @atlaskit/primitives codegen-styles
 * @codegenParams ["dimensions"]
 * @codegenDependency ../../scripts/codegen-file-templates/dimensions.tsx <<SignedSource::cc9b3f12104c6ede803da6a42daac0b0>>
 */
var dimensionMap = {
  '100%': '100%',
  'size.100': '1rem',
  'size.200': '1.5rem',
  'size.300': '2rem',
  'size.400': '2.5rem',
  'size.500': '3rem',
  'size.600': '6rem',
  'size.1000': '12rem'
};
/**
 * @codegenEnd
 */

/**
 * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::0d3c08d703b8431712d7e238a3f7229b>>
 * @codegenId spacing
 * @codegenCommand yarn workspace @atlaskit/primitives codegen-styles
 * @codegenDependency ../../../tokens/src/artifacts/tokens-raw/atlassian-spacing.tsx <<SignedSource::55622b91aca9b3afac4bce440f222b71>>
 */
var positiveSpaceMap = {
  'space.0': "var(--ds-space-0, 0px)",
  'space.025': "var(--ds-space-025, 2px)",
  'space.050': "var(--ds-space-050, 4px)",
  'space.075': "var(--ds-space-075, 6px)",
  'space.100': "var(--ds-space-100, 8px)",
  'space.150': "var(--ds-space-150, 12px)",
  'space.200': "var(--ds-space-200, 16px)",
  'space.250': "var(--ds-space-250, 20px)",
  'space.300': "var(--ds-space-300, 24px)",
  'space.400': "var(--ds-space-400, 32px)",
  'space.500': "var(--ds-space-500, 40px)",
  'space.600': "var(--ds-space-600, 48px)",
  'space.800': "var(--ds-space-800, 64px)",
  'space.1000': "var(--ds-space-1000, 80px)"
};
var negativeSpaceMap = {
  'space.negative.025': "var(--ds-space-negative-025, -2px)",
  'space.negative.050': "var(--ds-space-negative-050, -4px)",
  'space.negative.075': "var(--ds-space-negative-075, -6px)",
  'space.negative.100': "var(--ds-space-negative-100, -8px)",
  'space.negative.150': "var(--ds-space-negative-150, -12px)",
  'space.negative.200': "var(--ds-space-negative-200, -16px)",
  'space.negative.250': "var(--ds-space-negative-250, -20px)",
  'space.negative.300': "var(--ds-space-negative-300, -24px)",
  'space.negative.400': "var(--ds-space-negative-400, -32px)"
};
var allSpaceMap = _objectSpread$j(_objectSpread$j({}, positiveSpaceMap), negativeSpaceMap);
/**
 * @codegenEnd
 */

/**
 * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::dd33c75b34fe7374656f10b21ba9b161>>
 * @codegenId inverse-colors
 * @codegenCommand yarn workspace @atlaskit/primitives codegen-styles
 * @codegenDependency ../../../tokens/src/artifacts/tokens-raw/atlassian-light.tsx <<SignedSource::f27d1519d51cc4a85383a00907847774>>
 */
var inverseColorMap = {
  'color.background.neutral.bold': 'color.text.inverse',
  'color.background.neutral.bold.hovered': 'color.text.inverse',
  'color.background.neutral.bold.pressed': 'color.text.inverse',
  'color.background.selected.bold': 'color.text.inverse',
  'color.background.selected.bold.hovered': 'color.text.inverse',
  'color.background.selected.bold.pressed': 'color.text.inverse',
  'color.background.brand.bold': 'color.text.inverse',
  'color.background.brand.bold.hovered': 'color.text.inverse',
  'color.background.brand.bold.pressed': 'color.text.inverse',
  'color.background.brand.boldest': 'color.text.inverse',
  'color.background.brand.boldest.hovered': 'color.text.inverse',
  'color.background.brand.boldest.pressed': 'color.text.inverse',
  'color.background.danger.bold': 'color.text.inverse',
  'color.background.danger.bold.hovered': 'color.text.inverse',
  'color.background.danger.bold.pressed': 'color.text.inverse',
  'color.background.warning.bold': 'color.text.warning.inverse',
  'color.background.warning.bold.hovered': 'color.text.warning.inverse',
  'color.background.warning.bold.pressed': 'color.text.warning.inverse',
  'color.background.success.bold': 'color.text.inverse',
  'color.background.success.bold.hovered': 'color.text.inverse',
  'color.background.success.bold.pressed': 'color.text.inverse',
  'color.background.discovery.bold': 'color.text.inverse',
  'color.background.discovery.bold.hovered': 'color.text.inverse',
  'color.background.discovery.bold.pressed': 'color.text.inverse',
  'color.background.information.bold': 'color.text.inverse',
  'color.background.information.bold.hovered': 'color.text.inverse',
  'color.background.information.bold.pressed': 'color.text.inverse'
};

/**
 * @codegenEnd
 */

/**
 * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::fde38a9999e3a081afa4a517da815ede>>
 * @codegenId elevation
 * @codegenCommand yarn workspace @atlaskit/primitives codegen-styles
 * @codegenParams ["opacity", "shadow", "surface"]
 * @codegenDependency ../../../tokens/src/artifacts/tokens-raw/atlassian-light.tsx <<SignedSource::f27d1519d51cc4a85383a00907847774>>
 */
var opacityMap = {
  'opacity.disabled': "var(--ds-opacity-disabled, 0.4)",
  'opacity.loading': "var(--ds-opacity-loading, 0.2)"
};
var shadowMap = {
  'elevation.shadow.overflow': "var(--ds-shadow-overflow, 0px 0px 8px #091e423f, 0px 0px 1px #091e424f)",
  'elevation.shadow.overflow.perimeter': "var(--ds-shadow-overflow-perimeter, #091e421f)",
  'elevation.shadow.overflow.spread': "var(--ds-shadow-overflow-spread, #091e4229)",
  'elevation.shadow.overlay': "var(--ds-shadow-overlay, 0px 8px 12px #091e423f, 0px 0px 1px #091e424f)",
  'elevation.shadow.raised': "var(--ds-shadow-raised, 0px 1px 1px #091e423f, 0px 0px 1px #091e4221)"
};
var surfaceColorMap = {
  'elevation.surface': "var(--ds-surface, #FFFFFF)",
  'elevation.surface.hovered': "var(--ds-surface-hovered, #FAFBFC)",
  'elevation.surface.pressed': "var(--ds-surface-pressed, #F4F5F7)",
  'elevation.surface.overlay': "var(--ds-surface-overlay, #FFFFFF)",
  'elevation.surface.overlay.hovered': "var(--ds-surface-overlay-hovered, #FAFBFC)",
  'elevation.surface.overlay.pressed': "var(--ds-surface-overlay-pressed, #F4F5F7)",
  'elevation.surface.raised': "var(--ds-surface-raised, #FFFFFF)",
  'elevation.surface.raised.hovered': "var(--ds-surface-raised-hovered, #FAFBFC)",
  'elevation.surface.raised.pressed': "var(--ds-surface-raised-pressed, #F4F5F7)",
  'elevation.surface.sunken': "var(--ds-surface-sunken, #F4F5F7)"
};
/**
 * @codegenEnd
 */

/**
 * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::b0d40448c552e91658e4f2267d9f40b3>>
 * @codegenId colors
 * @codegenCommand yarn workspace @atlaskit/primitives codegen-styles
 * @codegenParams ["border", "background", "text", "fill"]
 * @codegenDependency ../../../tokens/src/artifacts/tokens-raw/atlassian-light.tsx <<SignedSource::f27d1519d51cc4a85383a00907847774>>
 */
var borderColorMap = {
  'color.border': "var(--ds-border, #091e4221)",
  'color.border.accent.lime': "var(--ds-border-accent-lime, #6A9A23)",
  'color.border.accent.red': "var(--ds-border-accent-red, #FF5630)",
  'color.border.accent.orange': "var(--ds-border-accent-orange, #D94008)",
  'color.border.accent.yellow': "var(--ds-border-accent-yellow, #FFAB00)",
  'color.border.accent.green': "var(--ds-border-accent-green, #36B37E)",
  'color.border.accent.teal': "var(--ds-border-accent-teal, #00B8D9)",
  'color.border.accent.blue': "var(--ds-border-accent-blue, #0065FF)",
  'color.border.accent.purple': "var(--ds-border-accent-purple, #6554C0)",
  'color.border.accent.magenta': "var(--ds-border-accent-magenta, #CD519D)",
  'color.border.accent.gray': "var(--ds-border-accent-gray, #5E6C84)",
  'color.border.disabled': "var(--ds-border-disabled, #FAFBFC)",
  'color.border.focused': "var(--ds-border-focused, #2684FF)",
  'color.border.input': "var(--ds-border-input, #FAFBFC)",
  'color.border.inverse': "var(--ds-border-inverse, #FFFFFF)",
  'color.border.selected': "var(--ds-border-selected, #0052CC)",
  'color.border.brand': "var(--ds-border-brand, #0052CC)",
  'color.border.danger': "var(--ds-border-danger, #FF5630)",
  'color.border.warning': "var(--ds-border-warning, #FFC400)",
  'color.border.success': "var(--ds-border-success, #00875A)",
  'color.border.discovery': "var(--ds-border-discovery, #998DD9)",
  'color.border.information': "var(--ds-border-information, #0065FF)",
  'color.border.bold': "var(--ds-border-bold, #344563)"
};
var backgroundColorMap = {
  'color.background.accent.lime.subtlest': "var(--ds-background-accent-lime-subtlest, #EEFBDA)",
  'color.background.accent.lime.subtlest.hovered': "var(--ds-background-accent-lime-subtlest-hovered, #D3F1A7)",
  'color.background.accent.lime.subtlest.pressed': "var(--ds-background-accent-lime-subtlest-pressed, #B3DF72)",
  'color.background.accent.lime.subtler': "var(--ds-background-accent-lime-subtler, #D3F1A7)",
  'color.background.accent.lime.subtler.hovered': "var(--ds-background-accent-lime-subtler-hovered, #B3DF72)",
  'color.background.accent.lime.subtler.pressed': "var(--ds-background-accent-lime-subtler-pressed, #94C748)",
  'color.background.accent.lime.subtle': "var(--ds-background-accent-lime-subtle, #94C748)",
  'color.background.accent.lime.subtle.hovered': "var(--ds-background-accent-lime-subtle-hovered, #B3DF72)",
  'color.background.accent.lime.subtle.pressed': "var(--ds-background-accent-lime-subtle-pressed, #D3F1A7)",
  'color.background.accent.lime.bolder': "var(--ds-background-accent-lime-bolder, #5B7F24)",
  'color.background.accent.lime.bolder.hovered': "var(--ds-background-accent-lime-bolder-hovered, #37471F)",
  'color.background.accent.lime.bolder.pressed': "var(--ds-background-accent-lime-bolder-pressed, #37471F)",
  'color.background.accent.red.subtlest': "var(--ds-background-accent-red-subtlest, #FF8F73)",
  'color.background.accent.red.subtlest.hovered': "var(--ds-background-accent-red-subtlest-hovered, #FF7452)",
  'color.background.accent.red.subtlest.pressed': "var(--ds-background-accent-red-subtlest-pressed, #FF5630)",
  'color.background.accent.red.subtler': "var(--ds-background-accent-red-subtler, #FF7452)",
  'color.background.accent.red.subtler.hovered': "var(--ds-background-accent-red-subtler-hovered, #FF5630)",
  'color.background.accent.red.subtler.pressed': "var(--ds-background-accent-red-subtler-pressed, #DE350B)",
  'color.background.accent.red.subtle': "var(--ds-background-accent-red-subtle, #DE350B)",
  'color.background.accent.red.subtle.hovered': "var(--ds-background-accent-red-subtle-hovered, #FF5630)",
  'color.background.accent.red.subtle.pressed': "var(--ds-background-accent-red-subtle-pressed, #FF7452)",
  'color.background.accent.red.bolder': "var(--ds-background-accent-red-bolder, #DE350B)",
  'color.background.accent.red.bolder.hovered': "var(--ds-background-accent-red-bolder-hovered, #FF5630)",
  'color.background.accent.red.bolder.pressed': "var(--ds-background-accent-red-bolder-pressed, #FF7452)",
  'color.background.accent.orange.subtlest': "var(--ds-background-accent-orange-subtlest, #F18D13)",
  'color.background.accent.orange.subtlest.hovered': "var(--ds-background-accent-orange-subtlest-hovered, #FEC57B)",
  'color.background.accent.orange.subtlest.pressed': "var(--ds-background-accent-orange-subtlest-pressed, #FFE2BD)",
  'color.background.accent.orange.subtler': "var(--ds-background-accent-orange-subtler, #B65C02)",
  'color.background.accent.orange.subtler.hovered': "var(--ds-background-accent-orange-subtler-hovered, #F18D13)",
  'color.background.accent.orange.subtler.pressed': "var(--ds-background-accent-orange-subtler-pressed, #FEC57B)",
  'color.background.accent.orange.subtle': "var(--ds-background-accent-orange-subtle, #5F3811)",
  'color.background.accent.orange.subtle.hovered': "var(--ds-background-accent-orange-subtle-hovered, #974F0C)",
  'color.background.accent.orange.subtle.pressed': "var(--ds-background-accent-orange-subtle-pressed, #B65C02)",
  'color.background.accent.orange.bolder': "var(--ds-background-accent-orange-bolder, #43290F)",
  'color.background.accent.orange.bolder.hovered': "var(--ds-background-accent-orange-bolder-hovered, #5F3811)",
  'color.background.accent.orange.bolder.pressed': "var(--ds-background-accent-orange-bolder-pressed, #974F0C)",
  'color.background.accent.yellow.subtlest': "var(--ds-background-accent-yellow-subtlest, #FFE380)",
  'color.background.accent.yellow.subtlest.hovered': "var(--ds-background-accent-yellow-subtlest-hovered, #FFC400)",
  'color.background.accent.yellow.subtlest.pressed': "var(--ds-background-accent-yellow-subtlest-pressed, #FFAB00)",
  'color.background.accent.yellow.subtler': "var(--ds-background-accent-yellow-subtler, #FFC400)",
  'color.background.accent.yellow.subtler.hovered': "var(--ds-background-accent-yellow-subtler-hovered, #FFAB00)",
  'color.background.accent.yellow.subtler.pressed': "var(--ds-background-accent-yellow-subtler-pressed, #FF991F)",
  'color.background.accent.yellow.subtle': "var(--ds-background-accent-yellow-subtle, #FF991F)",
  'color.background.accent.yellow.subtle.hovered': "var(--ds-background-accent-yellow-subtle-hovered, #FFAB00)",
  'color.background.accent.yellow.subtle.pressed': "var(--ds-background-accent-yellow-subtle-pressed, #FFC400)",
  'color.background.accent.yellow.bolder': "var(--ds-background-accent-yellow-bolder, #FF991F)",
  'color.background.accent.yellow.bolder.hovered': "var(--ds-background-accent-yellow-bolder-hovered, #FFAB00)",
  'color.background.accent.yellow.bolder.pressed': "var(--ds-background-accent-yellow-bolder-pressed, #FFC400)",
  'color.background.accent.green.subtlest': "var(--ds-background-accent-green-subtlest, #79F2C0)",
  'color.background.accent.green.subtlest.hovered': "var(--ds-background-accent-green-subtlest-hovered, #57D9A3)",
  'color.background.accent.green.subtlest.pressed': "var(--ds-background-accent-green-subtlest-pressed, #36B37E)",
  'color.background.accent.green.subtler': "var(--ds-background-accent-green-subtler, #57D9A3)",
  'color.background.accent.green.subtler.hovered': "var(--ds-background-accent-green-subtler-hovered, #36B37E)",
  'color.background.accent.green.subtler.pressed': "var(--ds-background-accent-green-subtler-pressed, #00875A)",
  'color.background.accent.green.subtle': "var(--ds-background-accent-green-subtle, #00875A)",
  'color.background.accent.green.subtle.hovered': "var(--ds-background-accent-green-subtle-hovered, #36B37E)",
  'color.background.accent.green.subtle.pressed': "var(--ds-background-accent-green-subtle-pressed, #57D9A3)",
  'color.background.accent.green.bolder': "var(--ds-background-accent-green-bolder, #00875A)",
  'color.background.accent.green.bolder.hovered': "var(--ds-background-accent-green-bolder-hovered, #36B37E)",
  'color.background.accent.green.bolder.pressed': "var(--ds-background-accent-green-bolder-pressed, #57D9A3)",
  'color.background.accent.teal.subtlest': "var(--ds-background-accent-teal-subtlest, #79E2F2)",
  'color.background.accent.teal.subtlest.hovered': "var(--ds-background-accent-teal-subtlest-hovered, #00C7E6)",
  'color.background.accent.teal.subtlest.pressed': "var(--ds-background-accent-teal-subtlest-pressed, #00B8D9)",
  'color.background.accent.teal.subtler': "var(--ds-background-accent-teal-subtler, #00C7E6)",
  'color.background.accent.teal.subtler.hovered': "var(--ds-background-accent-teal-subtler-hovered, #00B8D9)",
  'color.background.accent.teal.subtler.pressed': "var(--ds-background-accent-teal-subtler-pressed, #00A3BF)",
  'color.background.accent.teal.subtle': "var(--ds-background-accent-teal-subtle, #00A3BF)",
  'color.background.accent.teal.subtle.hovered': "var(--ds-background-accent-teal-subtle-hovered, #00B8D9)",
  'color.background.accent.teal.subtle.pressed': "var(--ds-background-accent-teal-subtle-pressed, #00C7E6)",
  'color.background.accent.teal.bolder': "var(--ds-background-accent-teal-bolder, #00A3BF)",
  'color.background.accent.teal.bolder.hovered': "var(--ds-background-accent-teal-bolder-hovered, #00B8D9)",
  'color.background.accent.teal.bolder.pressed': "var(--ds-background-accent-teal-bolder-pressed, #00C7E6)",
  'color.background.accent.blue.subtlest': "var(--ds-background-accent-blue-subtlest, #4C9AFF)",
  'color.background.accent.blue.subtlest.hovered': "var(--ds-background-accent-blue-subtlest-hovered, #2684FF)",
  'color.background.accent.blue.subtlest.pressed': "var(--ds-background-accent-blue-subtlest-pressed, #0065FF)",
  'color.background.accent.blue.subtler': "var(--ds-background-accent-blue-subtler, #2684FF)",
  'color.background.accent.blue.subtler.hovered': "var(--ds-background-accent-blue-subtler-hovered, #0065FF)",
  'color.background.accent.blue.subtler.pressed': "var(--ds-background-accent-blue-subtler-pressed, #0052CC)",
  'color.background.accent.blue.subtle': "var(--ds-background-accent-blue-subtle, #0052CC)",
  'color.background.accent.blue.subtle.hovered': "var(--ds-background-accent-blue-subtle-hovered, #0065FF)",
  'color.background.accent.blue.subtle.pressed': "var(--ds-background-accent-blue-subtle-pressed, #2684FF)",
  'color.background.accent.blue.bolder': "var(--ds-background-accent-blue-bolder, #0052CC)",
  'color.background.accent.blue.bolder.hovered': "var(--ds-background-accent-blue-bolder-hovered, #0065FF)",
  'color.background.accent.blue.bolder.pressed': "var(--ds-background-accent-blue-bolder-pressed, #2684FF)",
  'color.background.accent.purple.subtlest': "var(--ds-background-accent-purple-subtlest, #998DD9)",
  'color.background.accent.purple.subtlest.hovered': "var(--ds-background-accent-purple-subtlest-hovered, #8777D9)",
  'color.background.accent.purple.subtlest.pressed': "var(--ds-background-accent-purple-subtlest-pressed, #6554C0)",
  'color.background.accent.purple.subtler': "var(--ds-background-accent-purple-subtler, #8777D9)",
  'color.background.accent.purple.subtler.hovered': "var(--ds-background-accent-purple-subtler-hovered, #6554C0)",
  'color.background.accent.purple.subtler.pressed': "var(--ds-background-accent-purple-subtler-pressed, #5243AA)",
  'color.background.accent.purple.subtle': "var(--ds-background-accent-purple-subtle, #5243AA)",
  'color.background.accent.purple.subtle.hovered': "var(--ds-background-accent-purple-subtle-hovered, #6554C0)",
  'color.background.accent.purple.subtle.pressed': "var(--ds-background-accent-purple-subtle-pressed, #8777D9)",
  'color.background.accent.purple.bolder': "var(--ds-background-accent-purple-bolder, #5243AA)",
  'color.background.accent.purple.bolder.hovered': "var(--ds-background-accent-purple-bolder-hovered, #6554C0)",
  'color.background.accent.purple.bolder.pressed': "var(--ds-background-accent-purple-bolder-pressed, #8777D9)",
  'color.background.accent.magenta.subtlest': "var(--ds-background-accent-magenta-subtlest, #FFECF8)",
  'color.background.accent.magenta.subtlest.hovered': "var(--ds-background-accent-magenta-subtlest-hovered, #FDD0EC)",
  'color.background.accent.magenta.subtlest.pressed': "var(--ds-background-accent-magenta-subtlest-pressed, #F797D2)",
  'color.background.accent.magenta.subtler': "var(--ds-background-accent-magenta-subtler, #FDD0EC)",
  'color.background.accent.magenta.subtler.hovered': "var(--ds-background-accent-magenta-subtler-hovered, #F797D2)",
  'color.background.accent.magenta.subtler.pressed': "var(--ds-background-accent-magenta-subtler-pressed, #E774BB)",
  'color.background.accent.magenta.subtle': "var(--ds-background-accent-magenta-subtle, #E774BB)",
  'color.background.accent.magenta.subtle.hovered': "var(--ds-background-accent-magenta-subtle-hovered, #F797D2)",
  'color.background.accent.magenta.subtle.pressed': "var(--ds-background-accent-magenta-subtle-pressed, #FDD0EC)",
  'color.background.accent.magenta.bolder': "var(--ds-background-accent-magenta-bolder, #AE4787)",
  'color.background.accent.magenta.bolder.hovered': "var(--ds-background-accent-magenta-bolder-hovered, #943D73)",
  'color.background.accent.magenta.bolder.pressed': "var(--ds-background-accent-magenta-bolder-pressed, #50253F)",
  'color.background.accent.gray.subtlest': "var(--ds-background-accent-gray-subtlest, #6B778C)",
  'color.background.accent.gray.subtlest.hovered': "var(--ds-background-accent-gray-subtlest-hovered, #5E6C84)",
  'color.background.accent.gray.subtlest.pressed': "var(--ds-background-accent-gray-subtlest-pressed, #505F79)",
  'color.background.accent.gray.subtler': "var(--ds-background-accent-gray-subtler, #5E6C84)",
  'color.background.accent.gray.subtler.hovered': "var(--ds-background-accent-gray-subtler-hovered, #505F79)",
  'color.background.accent.gray.subtler.pressed': "var(--ds-background-accent-gray-subtler-pressed, #42526E)",
  'color.background.accent.gray.subtle': "var(--ds-background-accent-gray-subtle, #505F79)",
  'color.background.accent.gray.subtle.hovered': "var(--ds-background-accent-gray-subtle-hovered, #5E6C84)",
  'color.background.accent.gray.subtle.pressed': "var(--ds-background-accent-gray-subtle-pressed, #6B778C)",
  'color.background.accent.gray.bolder': "var(--ds-background-accent-gray-bolder, #42526E)",
  'color.background.accent.gray.bolder.hovered': "var(--ds-background-accent-gray-bolder-hovered, #344563)",
  'color.background.accent.gray.bolder.pressed': "var(--ds-background-accent-gray-bolder-pressed, #253858)",
  'color.background.disabled': "var(--ds-background-disabled, #091e4289)",
  'color.background.input': "var(--ds-background-input, #FAFBFC)",
  'color.background.input.hovered': "var(--ds-background-input-hovered, #EBECF0)",
  'color.background.input.pressed': "var(--ds-background-input-pressed, #FFFFFF)",
  'color.background.inverse.subtle': "var(--ds-background-inverse-subtle, #00000029)",
  'color.background.inverse.subtle.hovered': "var(--ds-background-inverse-subtle-hovered, #0000003D)",
  'color.background.inverse.subtle.pressed': "var(--ds-background-inverse-subtle-pressed, #00000052)",
  'color.background.neutral': "var(--ds-background-neutral, #DFE1E6)",
  'color.background.neutral.hovered': "var(--ds-background-neutral-hovered, #091e4214)",
  'color.background.neutral.pressed': "var(--ds-background-neutral-pressed, #B3D4FF)",
  'color.background.neutral.subtle': "var(--ds-background-neutral-subtle, transparent)",
  'color.background.neutral.subtle.hovered': "var(--ds-background-neutral-subtle-hovered, #091e4214)",
  'color.background.neutral.subtle.pressed': "var(--ds-background-neutral-subtle-pressed, #B3D4FF)",
  'color.background.neutral.bold': "var(--ds-background-neutral-bold, #42526E)",
  'color.background.neutral.bold.hovered': "var(--ds-background-neutral-bold-hovered, #505F79)",
  'color.background.neutral.bold.pressed': "var(--ds-background-neutral-bold-pressed, #344563)",
  'color.background.selected': "var(--ds-background-selected, #DEEBFF)",
  'color.background.selected.hovered': "var(--ds-background-selected-hovered, #B3D4FF)",
  'color.background.selected.pressed': "var(--ds-background-selected-pressed, #4C9AFF)",
  'color.background.selected.bold': "var(--ds-background-selected-bold, #0052CC)",
  'color.background.selected.bold.hovered': "var(--ds-background-selected-bold-hovered, #2684FF)",
  'color.background.selected.bold.pressed': "var(--ds-background-selected-bold-pressed, #0052CC)",
  'color.background.brand.subtlest': "var(--ds-background-brand-subtlest, #B3D4FF)",
  'color.background.brand.subtlest.hovered': "var(--ds-background-brand-subtlest-hovered, #DEEBFF)",
  'color.background.brand.subtlest.pressed': "var(--ds-background-brand-subtlest-pressed, #4C9AFF)",
  'color.background.brand.bold': "var(--ds-background-brand-bold, #0052CC)",
  'color.background.brand.bold.hovered': "var(--ds-background-brand-bold-hovered, #0065FF)",
  'color.background.brand.bold.pressed': "var(--ds-background-brand-bold-pressed, #0747A6)",
  'color.background.brand.boldest': "var(--ds-background-brand-boldest, #0747A6)",
  'color.background.brand.boldest.hovered': "var(--ds-background-brand-boldest-hovered, #0052CC)",
  'color.background.brand.boldest.pressed': "var(--ds-background-brand-boldest-pressed, #0747A6)",
  'color.background.danger': "var(--ds-background-danger, #FFEBE6)",
  'color.background.danger.hovered': "var(--ds-background-danger-hovered, #FFBDAD)",
  'color.background.danger.pressed': "var(--ds-background-danger-pressed, #FF8F73)",
  'color.background.danger.bold': "var(--ds-background-danger-bold, #DE350B)",
  'color.background.danger.bold.hovered': "var(--ds-background-danger-bold-hovered, #FF5630)",
  'color.background.danger.bold.pressed': "var(--ds-background-danger-bold-pressed, #BF2600)",
  'color.background.warning': "var(--ds-background-warning, #FFFAE6)",
  'color.background.warning.hovered': "var(--ds-background-warning-hovered, #FFF0B3)",
  'color.background.warning.pressed': "var(--ds-background-warning-pressed, #FFE380)",
  'color.background.warning.bold': "var(--ds-background-warning-bold, #FFAB00)",
  'color.background.warning.bold.hovered': "var(--ds-background-warning-bold-hovered, #FFC400)",
  'color.background.warning.bold.pressed': "var(--ds-background-warning-bold-pressed, #FF991F)",
  'color.background.success': "var(--ds-background-success, #E3FCEF)",
  'color.background.success.hovered': "var(--ds-background-success-hovered, #ABF5D1)",
  'color.background.success.pressed': "var(--ds-background-success-pressed, #79F2C0)",
  'color.background.success.bold': "var(--ds-background-success-bold, #00875A)",
  'color.background.success.bold.hovered': "var(--ds-background-success-bold-hovered, #57D9A3)",
  'color.background.success.bold.pressed': "var(--ds-background-success-bold-pressed, #00875A)",
  'color.background.discovery': "var(--ds-background-discovery, #EAE6FF)",
  'color.background.discovery.hovered': "var(--ds-background-discovery-hovered, #C0B6F2)",
  'color.background.discovery.pressed': "var(--ds-background-discovery-pressed, #998DD9)",
  'color.background.discovery.bold': "var(--ds-background-discovery-bold, #5243AA)",
  'color.background.discovery.bold.hovered': "var(--ds-background-discovery-bold-hovered, #8777D9)",
  'color.background.discovery.bold.pressed': "var(--ds-background-discovery-bold-pressed, #5243AA)",
  'color.background.information': "var(--ds-background-information, #DEEBFF)",
  'color.background.information.hovered': "var(--ds-background-information-hovered, #B3D4FF)",
  'color.background.information.pressed': "var(--ds-background-information-pressed, #4C9AFF)",
  'color.background.information.bold': "var(--ds-background-information-bold, #0052CC)",
  'color.background.information.bold.hovered': "var(--ds-background-information-bold-hovered, #2684FF)",
  'color.background.information.bold.pressed': "var(--ds-background-information-bold-pressed, #0052CC)",
  'color.blanket': "var(--ds-blanket, #091e4289)",
  'color.blanket.selected': "var(--ds-blanket-selected, #388BFF14)",
  'color.blanket.danger': "var(--ds-blanket-danger, #EF5C4814)",
  'color.skeleton': "var(--ds-skeleton, #F4F5F7)",
  'color.skeleton.subtle': "var(--ds-skeleton-subtle, #091e420a)",
  'elevation.surface': "var(--ds-surface, #FFFFFF)",
  'elevation.surface.hovered': "var(--ds-surface-hovered, #FAFBFC)",
  'elevation.surface.pressed': "var(--ds-surface-pressed, #F4F5F7)",
  'elevation.surface.overlay': "var(--ds-surface-overlay, #FFFFFF)",
  'elevation.surface.overlay.hovered': "var(--ds-surface-overlay-hovered, #FAFBFC)",
  'elevation.surface.overlay.pressed': "var(--ds-surface-overlay-pressed, #F4F5F7)",
  'elevation.surface.raised': "var(--ds-surface-raised, #FFFFFF)",
  'elevation.surface.raised.hovered': "var(--ds-surface-raised-hovered, #FAFBFC)",
  'elevation.surface.raised.pressed': "var(--ds-surface-raised-pressed, #F4F5F7)",
  'elevation.surface.sunken': "var(--ds-surface-sunken, #F4F5F7)",
  'utility.elevation.surface.current': "var(--ds-elevation-surface-current, #FFFFFF)"
};
var textColorMap = {
  'color.text': "var(--ds-text, #172B4D)",
  'color.text.accent.lime': "var(--ds-text-accent-lime, #4C6B1F)",
  'color.text.accent.lime.bolder': "var(--ds-text-accent-lime-bolder, #37471F)",
  'color.text.accent.red': "var(--ds-text-accent-red, #DE350B)",
  'color.text.accent.red.bolder': "var(--ds-text-accent-red-bolder, #BF2600)",
  'color.text.accent.orange': "var(--ds-text-accent-orange, #F18D13)",
  'color.text.accent.orange.bolder': "var(--ds-text-accent-orange-bolder, #B65C02)",
  'color.text.accent.yellow': "var(--ds-text-accent-yellow, #FF991F)",
  'color.text.accent.yellow.bolder': "var(--ds-text-accent-yellow-bolder, #FF8B00)",
  'color.text.accent.green': "var(--ds-text-accent-green, #00875A)",
  'color.text.accent.green.bolder': "var(--ds-text-accent-green-bolder, #006644)",
  'color.text.accent.teal': "var(--ds-text-accent-teal, #00A3BF)",
  'color.text.accent.teal.bolder': "var(--ds-text-accent-teal-bolder, #008DA6)",
  'color.text.accent.blue': "var(--ds-text-accent-blue, #0052CC)",
  'color.text.accent.blue.bolder': "var(--ds-text-accent-blue-bolder, #0747A6)",
  'color.text.accent.purple': "var(--ds-text-accent-purple, #5243AA)",
  'color.text.accent.purple.bolder': "var(--ds-text-accent-purple-bolder, #403294)",
  'color.text.accent.magenta': "var(--ds-text-accent-magenta, #E774BB)",
  'color.text.accent.magenta.bolder': "var(--ds-text-accent-magenta-bolder, #DA62AC)",
  'color.text.accent.gray': "var(--ds-text-accent-gray, #505F79)",
  'color.text.accent.gray.bolder': "var(--ds-text-accent-gray-bolder, #172B4D)",
  'color.text.disabled': "var(--ds-text-disabled, #A5ADBA)",
  'color.text.inverse': "var(--ds-text-inverse, #FFFFFF)",
  'color.text.selected': "var(--ds-text-selected, #0052CC)",
  'color.text.brand': "var(--ds-text-brand, #0065FF)",
  'color.text.danger': "var(--ds-text-danger, #DE350B)",
  'color.text.warning': "var(--ds-text-warning, #974F0C)",
  'color.text.warning.inverse': "var(--ds-text-warning-inverse, #172B4D)",
  'color.text.success': "var(--ds-text-success, #006644)",
  'color.text.discovery': "var(--ds-text-discovery, #403294)",
  'color.text.information': "var(--ds-text-information, #0052CC)",
  'color.text.subtlest': "var(--ds-text-subtlest, #7A869A)",
  'color.text.subtle': "var(--ds-text-subtle, #42526E)",
  'color.link': "var(--ds-link, #0052CC)",
  'color.link.pressed': "var(--ds-link-pressed, #0747A6)",
  'color.link.visited': "var(--ds-link-visited, #403294)",
  'color.link.visited.pressed': "var(--ds-link-visited-pressed, #403294)"
};
/**
 * @codegenEnd
 */

/**
 * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::28920e82ff201211ac94808a1fd821d4>>
 * @codegenId misc
 * @codegenCommand yarn workspace @atlaskit/primitives codegen-styles
 * @codegenParams ["layer"]
 * @codegenDependency ../../scripts/codegen-file-templates/dimensions.tsx <<SignedSource::cc9b3f12104c6ede803da6a42daac0b0>>
 * @codegenDependency ../../scripts/codegen-file-templates/layer.tsx <<SignedSource::6f10945ad9139d0119003738c65ae40a>>
 */
var layerMap = {
  card: 100,
  navigation: 200,
  dialog: 300,
  layer: 400,
  blanket: 500,
  modal: 510,
  flag: 600,
  spotlight: 700,
  tooltip: 800
};
/**
 * @codegenEnd
 */

/**
 * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::957baf1fa3fc3fe5eb06b497a7ba6599>>
 * @codegenId border
 * @codegenCommand yarn workspace @atlaskit/primitives codegen-styles
 * @codegenParams ["width", "radius"]
 * @codegenDependency ../../../tokens/src/artifacts/tokens-raw/atlassian-shape.tsx <<SignedSource::80457377fd80c31f5dfcb5cc743d7016>>
 */
var borderWidthMap = {
  'border.width': "var(--ds-border-width, 1px)",
  'border.width.0': "var(--ds-border-width-0, 0px)",
  'border.width.indicator': "var(--ds-border-width-indicator, 3px)",
  'border.width.outline': "var(--ds-border-width-outline, 2px)"
};
var borderRadiusMap = {
  'border.radius.050': "var(--ds-border-radius-050, 2px)",
  'border.radius': "var(--ds-border-radius, 3px)",
  'border.radius.100': "var(--ds-border-radius-100, 3px)",
  'border.radius.200': "var(--ds-border-radius-200, 8px)",
  'border.radius.300': "var(--ds-border-radius-300, 12px)",
  'border.radius.400': "var(--ds-border-radius-400, 16px)",
  'border.radius.circle': "var(--ds-border-radius-circle, 32032px)"
};
/**
 * @codegenEnd
 */

/**
 * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::80cc7623e264a740959237b5a1643873>>
 * @codegenId typography
 * @codegenCommand yarn workspace @atlaskit/primitives codegen-styles
 * @codegenParams ["fontSize", "fontWeight", "fontFamily", "lineHeight", "body", "ui"]
 * @codegenDependency ../../scripts/codegen-file-templates/dimensions.tsx <<SignedSource::cc9b3f12104c6ede803da6a42daac0b0>>
 * @codegenDependency ../../scripts/codegen-file-templates/layer.tsx <<SignedSource::6f10945ad9139d0119003738c65ae40a>>
 */
var fontMap = {
  'font.body': "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  'font.body.UNSAFE_small': "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  'font.body.large': "var(--ds-font-body-large, normal 400 16px/24px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  'font.body.small': "var(--ds-font-body-small, normal 400 11px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  'font.code': "var(--ds-font-code, normal 400 0.875em/1 ui-monospace, Menlo, \"Segoe UI Mono\", \"Ubuntu Mono\", monospace)",
  'font.heading.large': "var(--ds-font-heading-large, normal 500 24px/28px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  'font.heading.medium': "var(--ds-font-heading-medium, normal 500 20px/24px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  'font.heading.small': "var(--ds-font-heading-small, normal 600 16px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  'font.heading.xlarge': "var(--ds-font-heading-xlarge, normal 600 29px/32px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  'font.heading.xsmall': "var(--ds-font-heading-xsmall, normal 600 14px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  'font.heading.xxlarge': "var(--ds-font-heading-xxlarge, normal 500 35px/40px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  'font.heading.xxsmall': "var(--ds-font-heading-xxsmall, normal 600 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)"
};
var fontWeightMap = {
  'font.weight.bold': "var(--ds-font-weight-bold, 700)",
  'font.weight.medium': "var(--ds-font-weight-medium, 500)",
  'font.weight.regular': "var(--ds-font-weight-regular, 400)",
  'font.weight.semibold': "var(--ds-font-weight-semibold, 600)"
};
var fontFamilyMap = {
  'font.family.body': "var(--ds-font-family-body, ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  'font.family.brand.body': "var(--ds-font-family-brand-body, \"Charlie Text\", ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  'font.family.brand.heading': "var(--ds-font-family-brand-heading, \"Charlie Display\", ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  'font.family.code': "var(--ds-font-family-code, ui-monospace, Menlo, \"Segoe UI Mono\", \"Ubuntu Mono\", monospace)",
  'font.family.heading': "var(--ds-font-family-heading, ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)"
};
/**
 * @codegenEnd
 */

/**
 * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::d92525f319a39edc53a30184bd02aa2c>>
 * @codegenId text
 * @codegenCommand yarn workspace @atlaskit/primitives codegen-styles
 * @codegenDependency ../../scripts/codegen-file-templates/dimensions.tsx <<SignedSource::cc9b3f12104c6ede803da6a42daac0b0>>
 * @codegenDependency ../../scripts/codegen-file-templates/layer.tsx <<SignedSource::6f10945ad9139d0119003738c65ae40a>>
 */
var textSizeMap = {
  medium: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  UNSAFE_small: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  large: "var(--ds-font-body-large, normal 400 16px/24px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  small: "var(--ds-font-body-small, normal 400 11px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)"
};
var textWeightMap = {
  bold: "var(--ds-font-weight-bold, 700)",
  medium: "var(--ds-font-weight-medium, 500)",
  regular: "var(--ds-font-weight-regular, 400)",
  semibold: "var(--ds-font-weight-semibold, 600)"
};

/**
 * @codegenEnd
 */

// Margin needs some bespoke types: https://atlassian.slack.com/archives/CKRHB23K8/p1712623192772909

// Generate maps for Box props. backgroundColor, padding, etc
var spacingProperties = [
// Used by Box
'padding', 'paddingBlock', 'paddingBlockStart', 'paddingBlockEnd', 'paddingInline', 'paddingInlineStart', 'paddingInlineEnd',
// Used by Inline and Stack
'gap', 'rowGap', 'columnGap'];
var getSerializedStylesMap = function getSerializedStylesMap(cssProperty, tokenMap) {
  return Object.keys(tokenMap).reduce(function (emotionSpacingMap, token) {
    // eslint-disable-next-line @repo/internal/styles/no-exported-styles
    emotionSpacingMap[token] = css$2(_defineProperty$1({}, cssProperty, tokenMap[token]));
    return emotionSpacingMap;
  }, {});
};
var paddingStylesMap = spacingProperties.reduce(function (styleMap, spacingProperty) {
  styleMap[spacingProperty] = getSerializedStylesMap(spacingProperty, positiveSpaceMap);
  return styleMap;
}, {});
var spaceStylesMap = spacingProperties.reduce(function (styleMap, spacingProperty) {
  styleMap[spacingProperty] = getSerializedStylesMap(spacingProperty, positiveSpaceMap);
  return styleMap;
}, {});
var backgroundColorStylesMap = getSerializedStylesMap('backgroundColor', backgroundColorMap);
var textColorStylesMap = getSerializedStylesMap('color', textColorMap);
getSerializedStylesMap('fontWeight', fontWeightMap);
getSerializedStylesMap('fontFamily', fontFamilyMap);
getSerializedStylesMap('font', fontMap);
var textSizeStylesMap = getSerializedStylesMap('font', textSizeMap);
var textWeightStylesMap = getSerializedStylesMap('fontWeight', textWeightMap);
var surfaceColorStylesMap = getSerializedStylesMap(CURRENT_SURFACE_CSS_VAR, surfaceColorMap);
var isSurfaceColorToken = function isSurfaceColorToken(color) {
  return surfaceColorMap[color] !== undefined;
};

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var tokensMap = {
  backgroundColor: backgroundColorMap,
  blockSize: dimensionMap,
  borderBlockColor: borderColorMap,
  borderBlockEndColor: borderColorMap,
  borderBlockEndWidth: borderWidthMap,
  borderBlockStartColor: borderColorMap,
  borderBlockStartWidth: borderWidthMap,
  borderBlockWidth: borderWidthMap,
  borderBottomColor: borderColorMap,
  borderBottomLeftRadius: borderRadiusMap,
  borderBottomRightRadius: borderRadiusMap,
  borderBottomWidth: borderWidthMap,
  borderColor: borderColorMap,
  borderEndEndRadius: borderRadiusMap,
  borderEndStartRadius: borderRadiusMap,
  borderInlineColor: borderColorMap,
  borderInlineEndColor: borderColorMap,
  borderInlineEndWidth: borderWidthMap,
  borderInlineStartColor: borderColorMap,
  borderInlineStartWidth: borderWidthMap,
  borderInlineWidth: borderWidthMap,
  borderLeftColor: borderColorMap,
  borderLeftWidth: borderWidthMap,
  borderRadius: borderRadiusMap,
  borderRightColor: borderColorMap,
  borderRightWidth: borderWidthMap,
  borderStartEndRadius: borderRadiusMap,
  borderStartStartRadius: borderRadiusMap,
  borderTopColor: borderColorMap,
  borderTopLeftRadius: borderRadiusMap,
  borderTopRightRadius: borderRadiusMap,
  borderTopWidth: borderWidthMap,
  borderWidth: borderWidthMap,
  bottom: allSpaceMap,
  boxShadow: shadowMap,
  color: textColorMap,
  columnGap: positiveSpaceMap,
  font: fontMap,
  fontFamily: fontFamilyMap,
  fontWeight: fontWeightMap,
  gap: positiveSpaceMap,
  height: dimensionMap,
  inlineSize: dimensionMap,
  inset: allSpaceMap,
  insetBlock: allSpaceMap,
  insetBlockEnd: allSpaceMap,
  insetBlockStart: allSpaceMap,
  insetInline: allSpaceMap,
  insetInlineEnd: allSpaceMap,
  insetInlineStart: allSpaceMap,
  left: allSpaceMap,
  margin: allSpaceMap,
  marginBlock: allSpaceMap,
  marginBlockEnd: allSpaceMap,
  marginBlockStart: allSpaceMap,
  marginBottom: allSpaceMap,
  marginInline: allSpaceMap,
  marginInlineEnd: allSpaceMap,
  marginInlineStart: allSpaceMap,
  marginLeft: allSpaceMap,
  marginRight: allSpaceMap,
  marginTop: allSpaceMap,
  maxBlockSize: dimensionMap,
  maxHeight: dimensionMap,
  maxInlineSize: dimensionMap,
  maxWidth: dimensionMap,
  minBlockSize: dimensionMap,
  minHeight: dimensionMap,
  minInlineSize: dimensionMap,
  minWidth: dimensionMap,
  opacity: opacityMap,
  outlineColor: borderColorMap,
  outlineOffset: positiveSpaceMap,
  outlineWidth: borderWidthMap,
  padding: positiveSpaceMap,
  paddingBlock: positiveSpaceMap,
  paddingBlockEnd: positiveSpaceMap,
  paddingBlockStart: positiveSpaceMap,
  paddingBottom: positiveSpaceMap,
  paddingInline: positiveSpaceMap,
  paddingInlineEnd: positiveSpaceMap,
  paddingInlineStart: positiveSpaceMap,
  paddingLeft: positiveSpaceMap,
  paddingRight: positiveSpaceMap,
  paddingTop: positiveSpaceMap,
  right: allSpaceMap,
  rowGap: positiveSpaceMap,
  top: allSpaceMap,
  width: dimensionMap,
  zIndex: layerMap
};
var uniqueSymbol = Symbol('UNSAFE_INTERNAL_styles');
var isSafeEnvToThrow = function isSafeEnvToThrow() {
  return (typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object' && _typeof(process.env) === 'object' && process.env.NODE_ENV !== 'production';
};
var reNestedSelectors = /(\.|\s|&+|\*\>|#|\[.*\])/;
var safeSelectors = /^@media .*$|^::?.*$|^@supports .*$/;
var transformStyles = function transformStyles(styleObj) {
  if (!styleObj || _typeof(styleObj) !== 'object') {
    return styleObj;
  }

  // If styles are defined as a CSSObject[], recursively call on each element until we reach CSSObject
  if (Array.isArray(styleObj)) {
    return styleObj.map(transformStyles);
  }

  // Modifies styleObj in place. Be careful.
  Object.entries(styleObj).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      key = _ref2[0],
      value = _ref2[1];
    // If key is a pseudo class or a pseudo element, then value should be an object.
    // So, call transformStyles on the value
    if (_typeof(value) === 'object' && safeSelectors.test(key)) {
      styleObj[key] = transformStyles(value);
      return;
    }
    if (isSafeEnvToThrow()) {
      // We don't support `.class`, `[data-testid]`, `> *`, `#some-id`
      if (reNestedSelectors.test(key)) {
        throw new Error("Styles not supported for key '".concat(key, "'."));
      }
    }

    // We have now dealt with all the special cases, so,
    // check whether what remains is a style property
    // that can be transformed.
    if (!(key in tokensMap)) {
      return;
    }
    var tokenValue = tokensMap[key][value];
    styleObj[key] = tokenValue !== null && tokenValue !== void 0 ? tokenValue : value;
  });
  return styleObj;
};
var baseXcss = function baseXcss(style) {
  var transformedStyles = transformStyles(style);
  return _defineProperty$1({}, uniqueSymbol, css$2(transformedStyles));
};

/**
 * Picks out runtime XCSS objects and build-time XCSS strings. This is needed
 * to supported both Emotion and Compiled styles until we've fully migrated
 * to Compiled.
 *
 * @private
 * @deprecated
 */
var parseXcss = function parseXcss(args) {
  if (Array.isArray(args)) {
    var emotion = [];
    var staticArr = [];
    var _iterator = _createForOfIteratorHelper(args),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var arg = _step.value;
        var result = parseXcss(arg);
        if (result.emotion) {
          emotion.push.apply(emotion, _toConsumableArray(result.emotion));
        }
        if (result.static) {
          staticArr.push(result.static);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return {
      emotion: emotion,
      static: staticArr.join(' ')
    };
  }
  var objArgs = args;
  var _ref4 = objArgs || {},
    styles = _ref4[uniqueSymbol];
  if (styles) {
    return {
      emotion: [styles]
    };
  }
  if (args) {
    // We use string interpolation here instead of .toString() just
    // in case the resulting object doesn't have the method available.
    var stringifiedArgs = "".concat(args);
    if (stringifiedArgs) {
      return {
        static: stringifiedArgs
      };
    }
  }
  return {};
};

// Media queries should not contain nested media queries

// Allow only a specific subset of chained selectors to maintain workable TypeScript performance

// Pseudos should not contain nested pseudos, or media queries

/**
 * ### xcss
 *
 * `xcss` is a safer, tokens-first approach to CSS-in-JS. It allows token-backed values for
 * CSS application.
 *
 * ```tsx
 * const styles = xcss({
 *   padding: 'space.100'
 * })
 * ```
 */
function xcss(style) {
  return baseXcss(style);
}

/**
 * __Surface context__
 *
 * A surface context provides context information on the current background (if set).
 */
var SurfaceContext = /*#__PURE__*/reactExports.createContext('elevation.surface');

/**
 * __useSurface__
 *
 * Return the current surface. If no parent sets a surface color it falls back to the default surface.
 *
 * @see SurfaceContext
 */
var useSurface = function useSurface() {
  return reactExports.useContext(SurfaceContext);
};
SurfaceContext.displayName = 'SurfaceProvider';

var _excluded$h = ["as", "children", "backgroundColor", "padding", "paddingBlock", "paddingBlockStart", "paddingBlockEnd", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "style", "testId", "xcss"],
  _excluded2$4 = ["className"];

// Can either Exclude or Extract - here we're excluding all SVG-related elements, <button> elements (handled by Pressable), and <a> elements (handled by Anchor)

// Basically just ElementType but without ComponentType, it makes sense to keep the "Type" suffix
// eslint-disable-next-line @repo/internal/react/consistent-types-definitions

/**
 * __Box__
 *
 * A Box is a primitive component that has the design decisions of the Atlassian Design System baked in.
 * Renders a `div` by default.
 *
 * - [Examples](https://atlassian.design/components/primitives/box/examples)
 * - [Code](https://atlassian.design/components/primitives/box/code)
 * - [Usage](https://atlassian.design/components/primitives/box/usage)
 */
var Box = /*#__PURE__*/reactExports.forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as,
    Component = _ref$as === void 0 ? 'div' : _ref$as,
    children = _ref.children,
    backgroundColor = _ref.backgroundColor,
    padding = _ref.padding,
    paddingBlock = _ref.paddingBlock,
    paddingBlockStart = _ref.paddingBlockStart,
    paddingBlockEnd = _ref.paddingBlockEnd,
    paddingInline = _ref.paddingInline,
    paddingInlineStart = _ref.paddingInlineStart,
    paddingInlineEnd = _ref.paddingInlineEnd,
    style = _ref.style,
    testId = _ref.testId,
    xcss = _ref.xcss,
    htmlAttributes = _objectWithoutProperties(_ref, _excluded$h);
  // This is to remove className from safeHtmlAttributes
  // @ts-expect-error className doesn't exist in the prop definition but we want to ensure it cannot be applied even if types are bypassed
  htmlAttributes.className;
    var safeHtmlAttributes = _objectWithoutProperties(htmlAttributes, _excluded2$4);
  var resolvedStyles = parseXcss(xcss);
  var node =
  // @ts-expect-error Expression produces a union type that is too complex to represent. I think this is unavoidable
  jsx(Component
  // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
  , _extends({
    style: style
    // @ts-ignore Expression produces a union type that is too complex to represent. We may be able to narrow the type here but unsure.
    ,
    ref: ref
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: resolvedStyles.static
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, safeHtmlAttributes, {
    css: [baseStyles$4,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    backgroundColor && backgroundColorStylesMap[backgroundColor],
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    isSurfaceColorToken(backgroundColor) && surfaceColorStylesMap[backgroundColor],
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    padding && paddingStylesMap.padding[padding],
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    paddingBlock && paddingStylesMap.paddingBlock[paddingBlock],
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    paddingBlockStart && paddingStylesMap.paddingBlockStart[paddingBlockStart],
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    paddingBlockEnd && paddingStylesMap.paddingBlockEnd[paddingBlockEnd],
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    paddingInline && paddingStylesMap.paddingInline[paddingInline],
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    paddingInlineStart && paddingStylesMap.paddingInlineStart[paddingInlineStart],
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    paddingInlineEnd && paddingStylesMap.paddingInlineEnd[paddingInlineEnd],
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    resolvedStyles.emotion],
    "data-testid": testId
  }), children);
  return backgroundColor ? jsx(SurfaceContext.Provider, {
    value: backgroundColor
  }, node) : node;
}
// @ts-ignore This typescript error has been surpessed while locally enrolling `@atlaskit/primitives` into Jira
// The return type of `BoxComponent` does not match the return type of `forwardRef` in React 18
);
var baseStyles$4 = css$2({
  boxSizing: 'border-box',
  appearance: 'none',
  border: 'none'
});

/**
 * @jsxRuntime classic
 * @jsx jsx
 */
var justifyContentMap = {
  start: css$2({
    justifyContent: 'start'
  }),
  center: css$2({
    justifyContent: 'center'
  }),
  end: css$2({
    justifyContent: 'end'
  }),
  'space-between': css$2({
    justifyContent: 'space-between'
  }),
  'space-around': css$2({
    justifyContent: 'space-around'
  }),
  'space-evenly': css$2({
    justifyContent: 'space-evenly'
  }),
  stretch: css$2({
    justifyContent: 'stretch'
  })
};
var flexDirectionMap = {
  column: css$2({
    flexDirection: 'column'
  }),
  row: css$2({
    flexDirection: 'row'
  })
};
var flexWrapMap = {
  wrap: css$2({
    flexWrap: 'wrap'
  }),
  nowrap: css$2({
    flexWrap: 'nowrap'
  })
};
var alignItemsMap = {
  start: css$2({
    alignItems: 'start'
  }),
  center: css$2({
    alignItems: 'center'
  }),
  baseline: css$2({
    alignItems: 'baseline'
  }),
  end: css$2({
    alignItems: 'end'
  }),
  stretch: css$2({
    alignItems: 'stretch'
  })
};
var baseStyles$3 = css$2({
  display: 'flex',
  boxSizing: 'border-box'
});

/**
 * __Flex__
 *
 * `Flex` is a primitive component that implements the CSS Flexbox API.
 *
 * - [Examples](https://atlassian.design/components/primitives/flex/examples)
 * - [Code](https://atlassian.design/components/primitives/flex/code)
 *
 * @example
 * ```tsx
 * import { Flex, Box } from '@atlaskit/primitives'
 *
 * const Component = () => (
 *   <Flex direction="column">
 *     <Box padding="space.100" backgroundColor="neutral"></Box>
 *     <Box padding="space.100" backgroundColor="neutral"></Box>
 *   </Flex>
 * )
 * ```
 */
var Flex = /*#__PURE__*/reactExports.memo( /*#__PURE__*/reactExports.forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as,
    Component = _ref$as === void 0 ? 'div' : _ref$as,
    role = _ref.role,
    alignItems = _ref.alignItems,
    justifyContent = _ref.justifyContent,
    gap = _ref.gap,
    columnGap = _ref.columnGap,
    rowGap = _ref.rowGap,
    children = _ref.children,
    testId = _ref.testId,
    direction = _ref.direction,
    wrap = _ref.wrap,
    xcss = _ref.xcss;
  var resolvedStyles = parseXcss(xcss);
  return jsx(Component, {
    role: role
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: resolvedStyles.static,
    css: [baseStyles$3,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    gap && spaceStylesMap.gap[gap],
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    columnGap && spaceStylesMap.columnGap[columnGap],
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    rowGap && spaceStylesMap.rowGap[rowGap], alignItems && alignItemsMap[alignItems], direction && flexDirectionMap[direction], justifyContent && justifyContentMap[justifyContent], wrap && flexWrapMap[wrap],
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    resolvedStyles.emotion],
    "data-testid": testId,
    ref: ref
  }, children);
}));
Flex.displayName = 'Flex';

var flexGrowMap$1 = {
  hug: xcss({
    flexGrow: 0
  }),
  fill: xcss({
    width: '100%',
    flexGrow: 1
  })
};
var separatorStyles = css$2({
  color: "var(--ds-text-subtle, #42526E)",
  marginBlock: "var(--ds-space-0, 0px)",
  marginInline: "var(--ds-space-negative-025, -2px)",
  pointerEvents: 'none',
  userSelect: 'none'
});
var Separator = function Separator(_ref) {
  var children = _ref.children;
  return jsx("span", {
    css: separatorStyles
  }, children);
};

/**
 * __Inline__
 *
 * Inline is a primitive component based on CSS Flexbox that manages the horizontal layout of direct children.
 *
 * @example
 * ```tsx
 *  <Inline>
 *    <Box padding="space.100" backgroundColor="neutral"></Box>
 *    <Box padding="space.100" backgroundColor="neutral"></Box>
 *  </Inline>
 * ```
 *
 */
var Inline = /*#__PURE__*/reactExports.memo( /*#__PURE__*/reactExports.forwardRef(function (_ref2, ref) {
  var as = _ref2.as,
    alignInline = _ref2.alignInline,
    _ref2$alignBlock = _ref2.alignBlock,
    alignItems = _ref2$alignBlock === void 0 ? 'start' : _ref2$alignBlock,
    _ref2$shouldWrap = _ref2.shouldWrap,
    shouldWrap = _ref2$shouldWrap === void 0 ? false : _ref2$shouldWrap,
    spread = _ref2.spread,
    grow = _ref2.grow,
    space = _ref2.space,
    rowSpace = _ref2.rowSpace,
    separator = _ref2.separator,
    xcss = _ref2.xcss,
    testId = _ref2.testId,
    role = _ref2.role,
    rawChildren = _ref2.children;
  var separatorComponent = typeof separator === 'string' ? jsx(Separator, null, separator) : separator;
  var children = separatorComponent ? reactExports.Children.toArray(rawChildren).filter(Boolean).map(function (child, index) {
    return jsx(reactExports.Fragment, {
      key: index
    }, separator && index > 0 ? separatorComponent : null, child);
  }) : rawChildren;
  var justifyContent = spread || alignInline;

  // We're type coercing this as Compiled styles in an array isn't supported by the types
  // But the runtime accepts it none-the-wiser. We can remove this entire block and replace
  // it with cx(defaultStyles, focusRingStyles, xcssStyles) when we've moved away from Emotion.
  var styles = grow ? [flexGrowMap$1[grow]].concat(_toConsumableArray(Array.isArray(xcss) ? xcss : [xcss])) : xcss;
  return jsx(Flex, {
    as: as,
    role: role,
    alignItems: alignItems,
    justifyContent: justifyContent,
    direction: "row",
    gap: space,
    rowGap: rowSpace,
    wrap: shouldWrap ? 'wrap' : undefined
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    ,
    xcss: styles,
    testId: testId,
    ref: ref
  }, children);
}));
Inline.displayName = 'Inline';

var flexGrowMap = {
  hug: xcss({
    flexGrow: 0
  }),
  fill: xcss({
    width: '100%',
    flexGrow: 1
  })
};

/**
 * __Stack__
 *
 * Stack is a primitive component based on flexbox that manages the block layout of direct children.
 *
 * @example
 * ```tsx
 *  <Stack>
 *    <Box padding="space.100" backgroundColor="neutral"></Box>
 *    <Box padding="space.100" backgroundColor="neutral"></Box>
 *  </Stack>
 * ```
 *
 */
var Stack = /*#__PURE__*/reactExports.memo( /*#__PURE__*/reactExports.forwardRef(function (_ref, ref) {
  var as = _ref.as,
    alignItems = _ref.alignInline,
    _ref$alignBlock = _ref.alignBlock,
    alignBlock = _ref$alignBlock === void 0 ? 'stretch' : _ref$alignBlock,
    spread = _ref.spread,
    grow = _ref.grow,
    space = _ref.space,
    children = _ref.children,
    testId = _ref.testId,
    xcss = _ref.xcss,
    role = _ref.role;
  var justifyContent = spread || alignBlock;

  // We're type coercing this as Compiled styles in an array isn't supported by the types
  // But the runtime accepts it none-the-wiser. We can remove this entire block and replace
  // it with cx(defaultStyles, focusRingStyles, xcssStyles) when we've moved away from Emotion.
  var styles = grow ? [flexGrowMap[grow]].concat(_toConsumableArray(Array.isArray(xcss) ? xcss : [xcss])) : xcss;
  return jsx(Flex, {
    as: as,
    role: role,
    gap: space,
    direction: "column",
    alignItems: alignItems,
    justifyContent: justifyContent
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    ,
    xcss: styles,
    testId: testId,
    ref: ref
  }, children);
}));
Stack.displayName = 'Stack';

var isProduction = process.env.NODE_ENV === 'production';
var prefix = 'Invariant failed';
function invariant(condition, message) {
    if (condition) {
        return;
    }
    if (isProduction) {
        throw new Error(prefix);
    }
    var provided = typeof message === 'function' ? message() : message;
    var value = provided ? "".concat(prefix, ": ").concat(provided) : prefix;
    throw new Error(value);
}

/**
 * @jsxRuntime classic
 * @jsx jsx
 */
var asAllowlist = ['span', 'p', 'strong', 'em'];
// We're doing this because our CSS reset can add top margins to elements such as `p` which is totally insane.
// Long term we should remove those instances from the reset - it should be a reset to 0.
// For now, at least we know <Text> will be unaffected by this.
var resetStyles = css$2({
  margin: 0,
  overflowWrap: 'anywhere'
});
var strongStyles = css$2({
  fontWeight: 'bold'
});
var emStyles = css$2({
  fontStyle: 'italic'
});
var textAlignMap = {
  center: css$2({
    textAlign: 'center'
  }),
  end: css$2({
    textAlign: 'end'
  }),
  start: css$2({
    textAlign: 'start'
  })
};
var truncationStyles = css$2({
  display: '-webkit-box',
  overflow: 'hidden',
  WebkitBoxOrient: 'vertical'
});
var wordBreakMap = {
  breakAll: css$2({
    wordBreak: 'break-all'
  })
};
var HasTextAncestorContext = /*#__PURE__*/reactExports.createContext(false);
var useHasTextAncestor = function useHasTextAncestor() {
  return reactExports.useContext(HasTextAncestorContext);
};

/**
 * Custom hook designed to abstract the parsing of the color props and make it clearer in the future how color is reconciled between themes and tokens.
 */
var useColor$1 = function useColor(colorProp, hasTextAncestor) {
  var surface = useSurface();

  /**
   * Where the color of the surface is inverted we always override the color
   * as there is no valid choice that is not covered by the override.
   */
  if (inverseColorMap.hasOwnProperty(surface)) {
    return inverseColorMap[surface];
  }
  if (colorProp === 'inherit') {
    return undefined;
  }
  if (!colorProp && hasTextAncestor) {
    return undefined;
  }
  return colorProp || 'color.text';
};

/**
 * __Text__
 *
 * Text is a primitive component that has the Atlassian Design System's design guidelines baked in.
 * This includes considerations for text attributes such as color, font size, font weight, and line height.
 * It renders a `span` by default.
 *
 * @internal
 */
var Text = /*#__PURE__*/reactExports.forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as,
    Component = _ref$as === void 0 ? 'span' : _ref$as,
    colorProp = _ref.color,
    align = _ref.align,
    testId = _ref.testId,
    id = _ref.id,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    weight = _ref.weight,
    maxLines = _ref.maxLines,
    children = _ref.children;
  invariant(asAllowlist.includes(Component), "@atlaskit/primitives: Text received an invalid \"as\" value of \"".concat(Component, "\""));
  var hasTextAncestor = useHasTextAncestor();
  var color = useColor$1(colorProp, hasTextAncestor);
  var component = jsx(Component, {
    ref: ref,
    css: [resetStyles,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values
    textSizeStylesMap[size],
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values
    color && textColorStylesMap[color], maxLines && truncationStyles, maxLines === 1 && wordBreakMap.breakAll, align && textAlignMap[align],
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values
    weight && textWeightStylesMap[weight], Component === 'em' && emStyles, Component === 'strong' && strongStyles],
    style: {
      WebkitLineClamp: maxLines
    },
    "data-testid": testId,
    id: id
  }, children);
  return hasTextAncestor ?
  // no need to re-apply context if the text is already wrapped
  component : jsx(HasTextAncestorContext.Provider, {
    value: true
  }, component);
});

var _process$env;
var isModernContextEnabledEnv = typeof process !== 'undefined' && process !== null && ((_process$env = process.env) === null || _process$env === void 0 ? void 0 : _process$env['ANALYTICS_NEXT_MODERN_CONTEXT']);

var propTypes = {exports: {}};

var reactIs = {exports: {}};

var reactIs_production_min = {};

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_production_min;

function requireReactIs_production_min () {
	if (hasRequiredReactIs_production_min) return reactIs_production_min;
	hasRequiredReactIs_production_min = 1;
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
	Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
	function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;
	reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
	reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
	reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;
	return reactIs_production_min;
}

var reactIs_development = {};

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_development;

function requireReactIs_development () {
	if (hasRequiredReactIs_development) return reactIs_development;
	hasRequiredReactIs_development = 1;



	if (process.env.NODE_ENV !== "production") {
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	reactIs_development.AsyncMode = AsyncMode;
	reactIs_development.ConcurrentMode = ConcurrentMode;
	reactIs_development.ContextConsumer = ContextConsumer;
	reactIs_development.ContextProvider = ContextProvider;
	reactIs_development.Element = Element;
	reactIs_development.ForwardRef = ForwardRef;
	reactIs_development.Fragment = Fragment;
	reactIs_development.Lazy = Lazy;
	reactIs_development.Memo = Memo;
	reactIs_development.Portal = Portal;
	reactIs_development.Profiler = Profiler;
	reactIs_development.StrictMode = StrictMode;
	reactIs_development.Suspense = Suspense;
	reactIs_development.isAsyncMode = isAsyncMode;
	reactIs_development.isConcurrentMode = isConcurrentMode;
	reactIs_development.isContextConsumer = isContextConsumer;
	reactIs_development.isContextProvider = isContextProvider;
	reactIs_development.isElement = isElement;
	reactIs_development.isForwardRef = isForwardRef;
	reactIs_development.isFragment = isFragment;
	reactIs_development.isLazy = isLazy;
	reactIs_development.isMemo = isMemo;
	reactIs_development.isPortal = isPortal;
	reactIs_development.isProfiler = isProfiler;
	reactIs_development.isStrictMode = isStrictMode;
	reactIs_development.isSuspense = isSuspense;
	reactIs_development.isValidElementType = isValidElementType;
	reactIs_development.typeOf = typeOf;
	  })();
	}
	return reactIs_development;
}

var hasRequiredReactIs;

function requireReactIs () {
	if (hasRequiredReactIs) return reactIs.exports;
	hasRequiredReactIs = 1;

	if (process.env.NODE_ENV === 'production') {
	  reactIs.exports = requireReactIs_production_min();
	} else {
	  reactIs.exports = requireReactIs_development();
	}
	return reactIs.exports;
}

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

var objectAssign;
var hasRequiredObjectAssign;

function requireObjectAssign () {
	if (hasRequiredObjectAssign) return objectAssign;
	hasRequiredObjectAssign = 1;
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};
	return objectAssign;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret_1;
var hasRequiredReactPropTypesSecret;

function requireReactPropTypesSecret () {
	if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
	hasRequiredReactPropTypesSecret = 1;

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	ReactPropTypesSecret_1 = ReactPropTypesSecret;
	return ReactPropTypesSecret_1;
}

var has;
var hasRequiredHas;

function requireHas () {
	if (hasRequiredHas) return has;
	hasRequiredHas = 1;
	has = Function.call.bind(Object.prototype.hasOwnProperty);
	return has;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var checkPropTypes_1;
var hasRequiredCheckPropTypes;

function requireCheckPropTypes () {
	if (hasRequiredCheckPropTypes) return checkPropTypes_1;
	hasRequiredCheckPropTypes = 1;

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  var ReactPropTypesSecret = requireReactPropTypesSecret();
	  var loggedTypeFailures = {};
	  var has = requireHas();

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) { /**/ }
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +
	              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function() {
	  if (process.env.NODE_ENV !== 'production') {
	    loggedTypeFailures = {};
	  }
	};

	checkPropTypes_1 = checkPropTypes;
	return checkPropTypes_1;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithTypeCheckers;
var hasRequiredFactoryWithTypeCheckers;

function requireFactoryWithTypeCheckers () {
	if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
	hasRequiredFactoryWithTypeCheckers = 1;

	var ReactIs = requireReactIs();
	var assign = requireObjectAssign();

	var ReactPropTypesSecret = requireReactPropTypesSecret();
	var has = requireHas();
	var checkPropTypes = requireCheckPropTypes();

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bigint: createPrimitiveTypeChecker('bigint'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message, data) {
	    this.message = message;
	    this.data = data && typeof data === 'object' ? data: {};
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError(
	          'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),
	          {expectedType: expectedType}
	        );
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!ReactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (arguments.length > 1) {
	          printWarning(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var expectedTypes = [];
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
	        if (checkerResult == null) {
	          return null;
	        }
	        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
	          expectedTypes.push(checkerResult.data.expectedType);
	        }
	      }
	      var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function invalidValidatorError(componentName, location, propFullName, key, type) {
	    return new PropTypeError(
	      (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +
	      'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'
	    );
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (has(shapeTypes, key) && typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};
	return factoryWithTypeCheckers;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithThrowingShims;
var hasRequiredFactoryWithThrowingShims;

function requireFactoryWithThrowingShims () {
	if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
	hasRequiredFactoryWithThrowingShims = 1;

	var ReactPropTypesSecret = requireReactPropTypesSecret();

	function emptyFunction() {}
	function emptyFunctionWithReset() {}
	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	factoryWithThrowingShims = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  }	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  }	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bigint: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,

	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };

	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};
	return factoryWithThrowingShims;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var ReactIs = requireReactIs();

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  propTypes.exports = requireFactoryWithThrowingShims()();
}

var propTypesExports = propTypes.exports;
var PropTypes = /*@__PURE__*/getDefaultExportFromCjs(propTypesExports);

function _createSuper$1(t) { var r = _isNativeReflectConstruct$1(); return function () { var e, o = _getPrototypeOf(t); if (r) { var s = _getPrototypeOf(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return _possibleConstructorReturn(this, e); }; }
function _isNativeReflectConstruct$1() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1 = function _isNativeReflectConstruct() { return !!t; })(); }
var ContextTypes = {
  getAtlaskitAnalyticsContext: PropTypes.func,
  getAtlaskitAnalyticsEventHandlers: PropTypes.func
};
var noop$4 = function noop() {
  return [];
};

// eslint-disable-next-line @repo/internal/react/no-class-components
var AnalyticsContext$1 = /*#__PURE__*/function (_Component) {
  _inherits(AnalyticsContext, _Component);
  var _super = _createSuper$1(AnalyticsContext);
  function AnalyticsContext(props) {
    var _this;
    _classCallCheck(this, AnalyticsContext);
    _this = _super.call(this, props);
    _defineProperty$1(_assertThisInitialized(_this), "getChildContext", function () {
      return {
        getAtlaskitAnalyticsContext: _this.getAnalyticsContext
      };
    });
    _defineProperty$1(_assertThisInitialized(_this), "getAnalyticsContext", function () {
      var data = _this.props.data;
      var _this$context$getAtla = _this.context.getAtlaskitAnalyticsContext,
        getAtlaskitAnalyticsContext = _this$context$getAtla === void 0 ? noop$4 : _this$context$getAtla;
      return [].concat(_toConsumableArray(getAtlaskitAnalyticsContext()), [data]);
    });
    _defineProperty$1(_assertThisInitialized(_this), "getAnalyticsEventHandlers", function () {
      var _this$context$getAtla2 = _this.context.getAtlaskitAnalyticsEventHandlers,
        getAtlaskitAnalyticsEventHandlers = _this$context$getAtla2 === void 0 ? noop$4 : _this$context$getAtla2;
      return getAtlaskitAnalyticsEventHandlers();
    });
    _this.contextValue = {
      getAtlaskitAnalyticsContext: _this.getAnalyticsContext,
      getAtlaskitAnalyticsEventHandlers: _this.getAnalyticsEventHandlers
    };
    return _this;
  }
  _createClass(AnalyticsContext, [{
    key: "render",
    value: function render() {
      var children = this.props.children;
      return /*#__PURE__*/React.createElement(AnalyticsNextContext.Provider, {
        value: this.contextValue
      }, children);
    }
  }]);
  return AnalyticsContext;
}(reactExports.Component);
_defineProperty$1(AnalyticsContext$1, "contextTypes", ContextTypes);
_defineProperty$1(AnalyticsContext$1, "childContextTypes", ContextTypes);

var AnalyticsContext = function AnalyticsContext(_ref) {
  var data = _ref.data,
    children = _ref.children;
  var dataRef = useTrackedRef(data);
  var _useAnalyticsContext = useAnalyticsContext(),
    getAtlaskitAnalyticsEventHandlers = _useAnalyticsContext.getAtlaskitAnalyticsEventHandlers,
    getOriginalAnalyticsContext = _useAnalyticsContext.getAtlaskitAnalyticsContext;
  var getAtlaskitAnalyticsContext = reactExports.useCallback(function () {
    return [].concat(_toConsumableArray(getOriginalAnalyticsContext()), [dataRef.current]);
  }, [getOriginalAnalyticsContext, dataRef]);
  var value = reactExports.useMemo(function () {
    return {
      getAtlaskitAnalyticsContext: getAtlaskitAnalyticsContext,
      getAtlaskitAnalyticsEventHandlers: getAtlaskitAnalyticsEventHandlers
    };
  }, [getAtlaskitAnalyticsContext, getAtlaskitAnalyticsEventHandlers]);
  return /*#__PURE__*/React.createElement(AnalyticsNextContext.Provider, {
    value: value
  }, children);
};

var ExportedAnalyticsContext = function ExportedAnalyticsContext(props) {
  var isModernContext = isModernContextEnabledEnv || fg('platform.analytics-next-use-modern-context_fqgbx');
  return isModernContext ? /*#__PURE__*/React.createElement(AnalyticsContext, props) : /*#__PURE__*/React.createElement(AnalyticsContext$1, props);
};

var _excluded$g = ["analyticsContext"];
function ownKeys$j(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$i(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$j(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$j(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var withAnalyticsContext = function withAnalyticsContext(defaultData) {
  return function (WrappedComponent) {
    var WithAnalyticsContext = /*#__PURE__*/reactExports.forwardRef(function (_ref, ref) {
      var analyticsContext = _ref.analyticsContext,
        rest = _objectWithoutProperties(_ref, _excluded$g);
      var analyticsData = reactExports.useMemo(function () {
        return _objectSpread$i(_objectSpread$i({}, defaultData), analyticsContext);
      }, [analyticsContext]);
      return /*#__PURE__*/React.createElement(ExportedAnalyticsContext, {
        data: analyticsData
      }, /*#__PURE__*/React.createElement(WrappedComponent, _extends({}, rest, {
        ref: ref
      })));
    });
    WithAnalyticsContext.displayName = "WithAnalyticsContext(".concat(WrappedComponent.displayName || WrappedComponent.name, ")");
    return WithAnalyticsContext;
  };
};

function ownKeys$i(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$h(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$i(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$i(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function usePatchedProps() {
  var createEventMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var wrappedComponentProps = arguments.length > 1 ? arguments[1] : undefined;
  var _useAnalyticsEvents = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var handlerCache = reactExports.useRef({});
  var patchedProps = reactExports.useMemo(function () {
    var cache = handlerCache.current;

    // Clean up no longer used handlers in cache
    Object.keys(cache).filter(function (key) {
      return !(key in createEventMap);
    }).forEach(function (key) {
      return delete cache[key];
    });
    return Object.keys(createEventMap).reduce(function (p, k) {
      var eventCreator = createEventMap[k];
      if (!['object', 'function'].includes(_typeof(eventCreator))) {
        return p;
      }
      var propValue = wrappedComponentProps[k];
      if (k in cache && cache[k].eventCreator === eventCreator && cache[k].propValue === propValue) {
        return _objectSpread$h(_objectSpread$h({}, p), {}, _defineProperty$1({}, k, cache[k].wrappedCallback));
      }
      var wrappedCallback = function wrappedCallback() {
        var analyticsEvent = typeof eventCreator === 'function' ? eventCreator(createAnalyticsEvent, wrappedComponentProps) : createAnalyticsEvent(eventCreator);
        if (propValue && typeof propValue === 'function') {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          propValue.apply(void 0, args.concat([analyticsEvent]));
        }
      };
      cache[k] = {
        eventCreator: eventCreator,
        wrappedCallback: wrappedCallback,
        propValue: propValue
      };
      return _objectSpread$h(_objectSpread$h({}, p), {}, _defineProperty$1({}, k, wrappedCallback));
    }, {});
  }, [createEventMap, wrappedComponentProps, createAnalyticsEvent, handlerCache]);
  return {
    patchedEventProps: patchedProps
  };
}

var withAnalyticsEvents = function withAnalyticsEvents() {
  var createEventMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (WrappedComponent) {
    var WithAnalyticsEvents = /*#__PURE__*/reactExports.forwardRef(function (props, ref) {
      var _usePatchedProps = usePatchedProps(createEventMap, props),
        patchedEventProps = _usePatchedProps.patchedEventProps;
      var _useAnalyticsEvents = useAnalyticsEvents(),
        createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
      return /*#__PURE__*/React.createElement(WrappedComponent, _extends({}, props, patchedEventProps, {
        createAnalyticsEvent: createAnalyticsEvent,
        ref: ref
      }));
    });
    WithAnalyticsEvents.displayName = "WithAnalyticsEvents(".concat(WrappedComponent.displayName || WrappedComponent.name, ")");
    return WithAnalyticsEvents;
  };
};

var createAndFireEvent = (function (channel) {
  return function (payload) {
    return function (createAnalyticsEvent) {
      var consumerEvent = createAnalyticsEvent(payload);
      var clonedEvent = consumerEvent.clone();
      if (clonedEvent) {
        clonedEvent.fire(channel);
      }
      return consumerEvent;
    };
  };
});

var InteractionContext = /*#__PURE__*/reactExports.createContext(null);

var _excluded$f = ["children", "backgroundColor", "padding", "paddingBlock", "paddingBlockStart", "paddingBlockEnd", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "isDisabled", "type", "onClick", "interactionName", "componentName", "analyticsContext", "style", "testId", "xcss"],
  _excluded2$3 = ["className"];
// This duplicates FocusRing styles from `@atlaskit/focus-ring`.
var focusRingStyles$1 = css$2({
  '&:focus, &:focus-visible': {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values
    outlineColor: borderColorMap['color.border.focused'],
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values
    outlineOffset: positiveSpaceMap['space.025'],
    outlineStyle: 'solid',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values
    outlineWidth: borderWidthMap['border.width.outline']
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors
  '&:focus:not(:focus-visible)': {
    outline: 'none'
  },
  '@media screen and (forced-colors: active), screen and (-ms-high-contrast: active)': {
    '&:focus-visible': {
      outline: '1px solid'
    }
  }
});
var baseStyles$2 = css$2({
  boxSizing: 'border-box',
  appearance: 'none',
  border: 'none'
});
var enabledStyles$1 = css$2({
  cursor: 'pointer'
});
var disabledStyles$2 = css$2({
  cursor: 'not-allowed'
});

/**
 * __Pressable__
 *
 * A primitive for building custom buttons.
 *
 * - [Examples](https://atlassian.design/components/primitives/pressable/examples)
 * - [Code](https://atlassian.design/components/primitives/pressable/code)
 * - [Usage](https://atlassian.design/components/primitives/pressable/usage)
 */
var Pressable = /*#__PURE__*/reactExports.forwardRef(function (_ref, ref) {
  var children = _ref.children,
    backgroundColor = _ref.backgroundColor,
    padding = _ref.padding,
    paddingBlock = _ref.paddingBlock,
    paddingBlockStart = _ref.paddingBlockStart,
    paddingBlockEnd = _ref.paddingBlockEnd,
    paddingInline = _ref.paddingInline,
    paddingInlineStart = _ref.paddingInlineStart,
    paddingInlineEnd = _ref.paddingInlineEnd,
    isDisabled = _ref.isDisabled,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'button' : _ref$type,
    _ref$onClick = _ref.onClick,
    providedOnClick = _ref$onClick === void 0 ? noop$5 : _ref$onClick,
    interactionName = _ref.interactionName,
    componentName = _ref.componentName,
    analyticsContext = _ref.analyticsContext,
    style = _ref.style,
    testId = _ref.testId,
    xcss = _ref.xcss,
    htmlAttributes = _objectWithoutProperties(_ref, _excluded$f);
  var interactionContext = reactExports.useContext(InteractionContext);
  var handleClick = reactExports.useCallback(function (e, analyticsEvent) {
    interactionContext && interactionContext.tracePress(interactionName, e.timeStamp);
    providedOnClick(e, analyticsEvent);
  }, [providedOnClick, interactionContext, interactionName]);
  var onClick = usePlatformLeafEventHandler({
    fn: handleClick,
    action: 'clicked',
    componentName: componentName || 'Pressable',
    packageName: "@atlaskit/primitives",
    packageVersion: "12.2.2",
    analyticsData: analyticsContext,
    actionSubject: 'button'
  });

  // This is to remove className from safeHtmlAttributes
  // @ts-expect-error className doesn't exist in the prop definition but we want to ensure it cannot be applied even if types are bypassed
  htmlAttributes.className;
    var safeHtmlAttributes = _objectWithoutProperties(htmlAttributes, _excluded2$3);
  var resolvedStyles = parseXcss(xcss);
  return (
    // eslint-disable-next-line @atlaskit/design-system/no-html-button
    jsx("button", _extends({
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      style: style,
      ref: ref
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: resolvedStyles.static
      // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    }, safeHtmlAttributes, {
      // eslint-disable-next-line react/button-has-type
      type: type,
      onClick: onClick,
      disabled: isDisabled,
      css: [baseStyles$2, focusRingStyles$1, isDisabled ? disabledStyles$2 : enabledStyles$1,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      backgroundColor && backgroundColorStylesMap[backgroundColor],
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      padding && paddingStylesMap.padding[padding],
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      paddingBlock && paddingStylesMap.paddingBlock[paddingBlock],
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      paddingBlockStart && paddingStylesMap.paddingBlockStart[paddingBlockStart],
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      paddingBlockEnd && paddingStylesMap.paddingBlockEnd[paddingBlockEnd],
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      paddingInline && paddingStylesMap.paddingInline[paddingInline],
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      paddingInlineStart && paddingStylesMap.paddingInlineStart[paddingInlineStart],
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      paddingInlineEnd && paddingStylesMap.paddingInlineEnd[paddingInlineEnd],
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      resolvedStyles.emotion],
      "data-testid": testId
    }), children)
  );
});

/**
 * generates a UID factory
 * @internal
 * @example
 * const uid = generateUID();
 * uid(object) = 1;
 * uid(object) = 1;
 * uid(anotherObject) = 2;
 */
var generateUID$1 = function () {
    var counter = 1;
    var map = new WeakMap();
    /**
     * @borrows {uid}
     */
    var uid = function (item, index) {
        if (typeof item === 'number' || typeof item === 'string') {
            return index ? "idx-".concat(index) : "val-".concat(item);
        }
        if (!map.has(item)) {
            map.set(item, counter++);
            return uid(item);
        }
        return 'uid' + map.get(item);
    };
    return uid;
};
/**
 * @name uid
 * returns an UID associated with {item}
 * @param {Object} item - object to generate UID for
 * @param {Number} index, a fallback index
 * @example
 * uid(object) == 1;
 * uid(object) == 1;
 * uid(anotherObject) == 2;
 * uid("not object", 42) == 42
 *
 * @see {@link useUID}
 */
var uid = generateUID$1();

var createSource = function (prefix) {
    if (prefix === void 0) { prefix = ''; }
    return ({
        value: 1,
        prefix: prefix,
        uid: generateUID$1(),
    });
};
var counter = createSource();
var source = reactExports.createContext(createSource());
var getId = function (source) { return source.value++; };
var getPrefix = function (source) { return (source ? source.prefix : ''); };

var generateUID = function (context) {
    var quartz = context || counter;
    var prefix = getPrefix(quartz);
    var id = getId(quartz);
    var uid = prefix + id;
    var gen = function (item) { return uid + quartz.uid(item); };
    return { uid: uid, gen: gen };
};
var useUIDState = function () {
    if (process.env.NODE_ENV !== 'production') {
        if (!('useContext' in React$1)) {
            throw new Error('Hooks API requires React 16.8+');
        }
    }
    var context = reactExports.useContext(source);
    var uid = reactExports.useState(function () { return generateUID(context); })[0];
    return uid;
};
/**
 * returns and unique id. SSR friendly
 * returns {String}
 * @see {@link UIDConsumer}
 * @see https://github.com/thearnica/react-uid#hooks-168
 * @example
 * const id = useUID();
 * id == 1; // for example
 */
var useUID = function () {
    var uid = useUIDState().uid;
    return uid;
};

var _React$useId$1;

// Type copied from https://github.com/thearnica/react-uid/blob/0f507fbbdb1ab84acf477ec32698afe3d2191e49/src/hooks.ts#L12
// Copied rather than inferred to make the type transparent

// @ts-ignore - useId is not accessible in React 16
var react18UseId$1 = (_React$useId$1 = React.useId) !== null && _React$useId$1 !== void 0 ? _React$useId$1 : undefined;

/**
 * Returns a unique id
 *
 * React 18 SSR and Concurrent modes are supported when the `platform.design-system-team.react-18-use-id_mn8q4` flag is enabled.
 * This is a interop function that supports React 16 and 18.
 *
 * If migrating from `useUID` in the `react-uid` package, then `useId` is a direct replacement.
 *
 * @return string
 * @see {@link useIdSeed}
 * @see https://github.com/thearnica/react-uid#hooks-168
 * @example
 * const id = useUID();
 * id == 1; // for example
 *
 * Parts of the above are from: https://github.com/thearnica/react-uid/blob/0f507fbbdb1ab84acf477ec32698afe3d2191e49/src/hooks.ts#L41C1-L49C4
 */
function useId$1() {
  if (react18UseId$1 && fg('platform.design-system-team.react-18-use-id_mn8q4')) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return react18UseId$1();
  }

  // eslint-disable-next-line react-hooks/rules-of-hooks
  return useUID();
}

/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/design-system/use-visually-hidden
var visuallyHiddenStyles = css$2({
  width: '1px',
  height: '1px',
  padding: '0',
  position: 'absolute',
  border: '0',
  clip: 'rect(1px, 1px, 1px, 1px)',
  overflow: 'hidden',
  whiteSpace: 'nowrap'
});

/**
 * __Visually hidden__
 *
 * A composable element to apply a visually hidden effect to children.
 * Useful for accessibility compliance.
 *
 * @example
 * ```jsx
 * import VisuallyHidden from '@atlaskit/visually-hidden';
 *
 * export default () => (
 *   <div style={{ border: '1px solid black' }}>
 *      There is text hidden between the brackets [
 *      <VisuallyHidden>Can't see me!</VisuallyHidden>]
 *   </div>
 * );
 * ```
 */
var VisuallyHidden = function VisuallyHidden(_ref) {
  var children = _ref.children,
    testId = _ref.testId,
    role = _ref.role,
    id = _ref.id;
  return jsx("span", {
    id: id,
    "data-testid": testId,
    css: visuallyHiddenStyles,
    role: role
  }, children);
};

var sizeTagMap = {
  xxlarge: 'h1',
  xlarge: 'h1',
  large: 'h2',
  medium: 'h3',
  small: 'h4',
  xsmall: 'h5',
  xxsmall: 'h6'
};
var headingResetStyles$1 = css$2({
  letterSpacing: 'normal',
  marginBlock: 0,
  textTransform: 'none'
});
var useColor = function useColor(colorProp) {
  var surface = useSurface();

  /**
   * Where the color of the surface is inverted we always override the color
   * as there is no valid choice that is not covered by the override.
   */
  if (inverseColorMap.hasOwnProperty(surface)) {
    return inverseColorMap[surface];
  }
  return colorProp || 'color.text';
};

/**
 * __Heading__
 *
 * Heading is a typography component used to display text in defined sizes and styles.
 *
 * @example
 *
 * ```jsx
 * <Heading size="xxlarge">Page title</Heading>
 * ```
 */
var Heading$1 = function Heading(_ref) {
  var children = _ref.children,
    size = _ref.size,
    id = _ref.id,
    testId = _ref.testId,
    as = _ref.as,
    colorProp = _ref.color;
  if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production' && as && typeof as !== 'string') {
    throw new Error('`as` prop should be a string.');
  }

  // Technically size can be undefined here due to how the types work.
  // Once removing the level prop this assertion can be removed since size will be a required prop.
  var _useHeading = useHeading(sizeTagMap[size]),
    _useHeading2 = _slicedToArray(_useHeading, 2),
    hLevel = _useHeading2[0],
    inferredElement = _useHeading2[1];
  var Component = as || inferredElement;
  var needsAriaRole = Component === 'div' && hLevel;
  var color = useColor(colorProp);
  return jsx(Component, {
    id: id,
    "data-testid": testId,
    role: needsAriaRole ? 'heading' : undefined,
    "aria-level": needsAriaRole ? hLevel : undefined,
    css: [headingResetStyles$1, size && headingSizeStylesMap[size], headingColorStylesMap[color]]
  }, children);
};

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles
var headingColorStylesMap = {
  'color.text': css$2({
    color: "var(--ds-text, #172B4D)"
  }),
  'color.text.inverse': css$2({
    color: "var(--ds-text-inverse, #FFFFFF)"
  }),
  'color.text.warning.inverse': css$2({
    color: "var(--ds-text-warning-inverse, #172B4D)"
  })
};

/**
 * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::df829c6c0aa19bb57c0c77dc08d12d60>>
 * @codegenId typography
 * @codegenCommand yarn workspace @atlaskit/heading codegen
 */
var headingSizeStylesMap = {
  xxlarge: css$2({
    font: "var(--ds-font-heading-xxlarge, normal 500 35px/40px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)"
  }),
  xlarge: css$2({
    font: "var(--ds-font-heading-xlarge, normal 600 29px/32px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)"
  }),
  large: css$2({
    font: "var(--ds-font-heading-large, normal 500 24px/28px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)"
  }),
  medium: css$2({
    font: "var(--ds-font-heading-medium, normal 500 20px/24px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)"
  }),
  small: css$2({
    font: "var(--ds-font-heading-small, normal 600 16px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)"
  }),
  xsmall: css$2({
    font: "var(--ds-font-heading-xsmall, normal 600 14px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)"
  }),
  xxsmall: css$2({
    font: "var(--ds-font-heading-xxsmall, normal 600 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)"
  })
};

var _excluded$e = ["level"];
// https://atlassian.design/foundations/typography
var levelMap = {
  h900: 'h1',
  h800: 'h1',
  h700: 'h2',
  h600: 'h3',
  h500: 'h4',
  h400: 'h5',
  h300: 'h6',
  // NB: These two levels are not covered at all by the existing @atlaskit/css-reset
  h200: 'div',
  h100: 'div'
};
var headingResetStyles = css$2({
  color: "var(--ds-text, #172B4D)",
  marginBlock: "var(--ds-space-0, 0px)"
});
var h900Styles = css$2({
  fontSize: "var(--ds-font-size-600, 35px)",
  fontWeight: "var(--ds-font-weight-medium, 500)",
  letterSpacing: '-0.01em',
  lineHeight: "var(--ds-font-lineHeight-600, 40px)"
});
var h800Styles = css$2({
  fontSize: "var(--ds-font-size-500, 29px)",
  fontWeight: "var(--ds-font-weight-semibold, 600)",
  letterSpacing: '-0.01em',
  lineHeight: "var(--ds-font-lineHeight-500, 32px)"
});
var h700Styles = css$2({
  fontSize: "var(--ds-font-size-400, 24px)",
  fontWeight: "var(--ds-font-weight-medium, 500)",
  letterSpacing: '-0.01em',
  lineHeight: "var(--ds-font-lineHeight-400, 28px)"
});
var h600Styles = css$2({
  fontSize: "var(--ds-font-size-300, 20px)",
  fontWeight: "var(--ds-font-weight-medium, 500)",
  letterSpacing: '-0.008em',
  lineHeight: "var(--ds-font-lineHeight-300, 24px)"
});
var h500Styles = css$2({
  fontSize: "var(--ds-font-size-200, 16px)",
  fontWeight: "var(--ds-font-weight-semibold, 600)",
  letterSpacing: '-0.006em',
  lineHeight: "var(--ds-font-lineHeight-200, 20px)"
});
var h400Styles = css$2({
  fontSize: "var(--ds-font-size-100, 14px)",
  fontWeight: "var(--ds-font-weight-semibold, 600)",
  letterSpacing: '-0.003em',
  lineHeight: "var(--ds-font-lineHeight-100, 16px)"
});
var h300Styles = css$2({
  fontSize: "var(--ds-font-size-075, 12px)",
  fontWeight: "var(--ds-font-weight-semibold, 600)",
  letterSpacing: 0,
  lineHeight: "var(--ds-font-lineHeight-100, 16px)",
  textTransform: 'uppercase'
});
var h200Styles = css$2({
  fontSize: "var(--ds-font-size-075, 12px)",
  fontWeight: "var(--ds-font-weight-semibold, 600)",
  letterSpacing: 0,
  lineHeight: "var(--ds-font-lineHeight-100, 16px)"
});
var h100Styles = css$2({
  fontSize: "var(--ds-font-size-050, 11px)",
  fontWeight: "var(--ds-font-weight-bold, 700)",
  letterSpacing: 0,
  lineHeight: "var(--ds-font-lineHeight-100, 16px)"
});
var inverseStyles = css$2({
  color: "var(--ds-text-inverse, #FFF)"
});
var subtlestStyles = css$2({
  color: "var(--ds-text-subtlest, #6B778C)"
});

/**
 * __Heading__
 *
 * A heading is a typography component used to display text in different sizes and formats.
 *
 * @example
 *
 * ```jsx
 * import Heading from '@atlaskit/heading';
 *
 * const H100 = () => (
 *   <Heading level="h100">h100</Heading>
 * );
 * ```
 */
var OldHeading = function OldHeading(_ref) {
  var children = _ref.children,
    level = _ref.level,
    id = _ref.id,
    testId = _ref.testId,
    as = _ref.as,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'default' : _ref$color;
  if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production' && as && typeof as !== 'string') {
    throw new Error('`as` prop should be a string.');
  }
  var _useHeading = useHeading(levelMap[level]),
    _useHeading2 = _slicedToArray(_useHeading, 2),
    hLevel = _useHeading2[0],
    inferredElement = _useHeading2[1];
  var Markup = as || inferredElement;
  var isSubtleHeading = level === 'h200' || level === 'h100';
  var needsAriaRole = Markup === 'div' && hLevel;
  return jsx(Markup, {
    id: id,
    "data-testid": testId,
    role: needsAriaRole ? 'heading' : undefined,
    "aria-level": needsAriaRole ? hLevel : undefined,
    css: [headingResetStyles, level === 'h100' && h100Styles, level === 'h200' && h200Styles, level === 'h300' && h300Styles, level === 'h400' && h400Styles, level === 'h500' && h500Styles, level === 'h600' && h600Styles, level === 'h700' && h700Styles, level === 'h800' && h800Styles, level === 'h900' && h900Styles, color === 'inverse' && inverseStyles, color === 'default' && isSubtleHeading && subtlestStyles]
  }, children);
};

/**
 * __Heading__
 *
 * A heading is a typography component used to display text in different sizes and formats.
 *
 * @example
 *
 * ```jsx
 * import Heading from '@atlaskit/heading';
 *
 * // New component
 * <Heading size="xxlarge">Page title</Heading>
 *
 * // Old component
 * const H100 = () => (
 *   <Heading level="h100">h100</Heading>
 * );
 * ```
 */
var Heading = function Heading(_ref2) {
  var level = _ref2.level,
    props = _objectWithoutProperties(_ref2, _excluded$e);
  return level ?
  // eslint-disable-next-line jsx-a11y/heading-has-content, @repo/internal/react/no-unsafe-spread-props
  jsx(OldHeading, _extends({
    level: level
  }, props)) :
  // eslint-disable-next-line jsx-a11y/heading-has-content, @repo/internal/react/no-unsafe-spread-props
  jsx(Heading$1, props);
};

var DEFAULT_APPEARANCE = 'normal';
var VAR_COLOR = '--color';
var VAR_BG_COLOR = '--bg-color';
var VAR_BG_COLOR_HOVER = '--bg-color-hover';
var VAR_BG_COLOR_ACTIVE = '--bg-color-active';

/* eslint-disable @atlaskit/design-system/ensure-design-token-usage */

var R75 = '#FFBDAD';
var R300 = '#FF5630';
var R400 = '#DE350B';
var R500 = '#BF2600';
var Y200 = '#FFC400';
var Y300 = '#FFAB00';
var Y400 = '#FF991F';
var G400 = '#00875A';
var G500 = '#006644';

// Blues
var B50 = '#DEEBFF';
var B75 = '#B3D4FF';
var B100 = '#4C9AFF';
var B200 = '#2684FF';
var B300 = '#0065FF';
var B400 = '#0052CC';
var B500 = '#0747A6';

// Neutrals
var N0 = '#FFFFFF';
var N10 = '#FAFBFC';
var N20 = '#F4F5F7';
var N30 = '#EBECF0';
var N40 = '#DFE1E6';
var N70 = '#A5ADBA';
var N90 = '#8993A4';
var N100 = '#7A869A';
var N200 = '#6B778C';
var N300 = '#5E6C84';
var N400 = '#505F79';
var N500 = '#42526E';
var N700 = '#253858';
var N800 = '#172B4D';

// ATTENTION: update the tints if you update this
var N900 = '#091E42';
var N20A = 'rgba(9, 30, 66, 0.04)';
var N30A = 'rgba(9, 30, 66, 0.08)';
var DN400 = '#9FB0CC';
var DN300 = '#8C9CB8';
var DN100 = '#67758F';
var DN70 = '#3B475C';
var DN60 = '#313D52';
var DN30 = '#1B2638';

// ATTENTION: update the tints if you update this
var DN0 = '#0D1424';

/**
 * @deprecated {@link https://hello.atlassian.net/browse/ENGHEALTH-386 Internal documentation for deprecation (no external access)}
 * @deprecated Use `token('space.100', '8px')` instead with any of the space tokens.
 * Available space tokens can be found on {@link https://atlassian.design/foundations/spacing/#scale}
 */
var gridSize$2 = function gridSize() {
  return 8;
};
var layers = {
  card: function card() {
    return 100;
  },
  navigation: function navigation() {
    return 200;
  },
  dialog: function dialog() {
    return 300;
  },
  layer: function layer() {
    return 400;
  },
  blanket: function blanket() {
    return 500;
  },
  modal: function modal() {
    return 510;
  },
  flag: function flag() {
    return 600;
  },
  spotlight: function spotlight() {
    return 700;
  },
  tooltip: function tooltip() {
    return 9999;
  }
};

var _excluded$d = ["children"];
/**
 * createTheme is used to create a set of Providers and Consumers for theming components.
 * - Takes a default theme function; this theme function gets a set of props, and returns tokens
 *  based on those props. An example of this default theme function is one that produces the standard
 *  appearance of the component
 * - Returns three things - a Provider that allow for additional themes to be applied, a Consumer
 *  that can get the current theme and fetch it, and a custom hook - useTheme which provides an alternate (although functionally the same) API
 *  to the Consumer.
 */
function createTheme(defaultGetTokens) {
  var emptyThemeFn = function emptyThemeFn(getTokens, props) {
    return getTokens(props);
  };

  /**
   * Internally, Theme uses React Context, with internal providers and consumers.
   * The React Context passes only a function that gets props, and turns them into tokens. This
   * function gets mixed as more Providers with their own themes are added. This mixed function
   * is ultimately picked up by Consumers, which implement a context consumer internally to fetch
   * the theme.
   */
  var ThemeContext = /*#__PURE__*/reactExports.createContext(defaultGetTokens);
  function useTheme(themeProps) {
    var theme = reactExports.useContext(ThemeContext);
    var themeFn = theme || emptyThemeFn;
    var tokens = themeFn(themeProps);
    return tokens;
  }

  // The Theme Consumer takes a function as its child - this function takes tokens, and the
  // return value is generally a set of nodes with the tokens applied appropriately.
  function Consumer(props) {
    var children = props.children,
      themeProps = _objectWithoutProperties(props, _excluded$d);

    // @ts-ignore See issue for more info: https://github.com/Microsoft/TypeScript/issues/10727
    // Argument of type 'Pick<ThemeProps & { children: (tokens: ThemeTokens) => ReactNode; }, Exclude<keyof ThemeProps, "children">>' is not assignable to parameter of type 'ThemeProps'.ts(2345)
    var tokens = useTheme(themeProps);
    // We add a fragment to ensure we don't break people upgrading.
    // Previously they may have been able to pass in undefined without things blowing up.
    return /*#__PURE__*/React.createElement(React.Fragment, null, children(tokens));
  }

  /**
   * The Theme Provider takes regular nodes as its children, but also takes a *theme function*
   * - The theme function takes a set of props, as well as a function (getTokens) that can turn props into tokens.
   * - The getTokens function isn't called immediately - instead the props are passed
   *    through a mix of parent theming functions
   * Children of this provider will receive this mixed theme
   */
  function Provider(props) {
    var themeFn = reactExports.useContext(ThemeContext);
    var valueFn = props.value || emptyThemeFn;
    var mixedFn = reactExports.useCallback(function (themeProps) {
      return valueFn(themeFn, themeProps);
    }, [themeFn, valueFn]);
    return /*#__PURE__*/React.createElement(ThemeContext.Provider, {
      value: mixedFn
    }, props.children);
  }
  return {
    Consumer: Consumer,
    Provider: Provider,
    useTheme: useTheme
  };
}

// Create default global light theme
var _createTheme = createTheme(function () {
    return {
      mode: 'light'
    };
  }),
  Provider = _createTheme.Provider,
  Consumer = _createTheme.Consumer;
var Theme$1 = {
  Provider: Provider,
  Consumer: Consumer
};

/**
 * Focusing on the passed element ref after initial mount.
 * Will only focus on initial mount.
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/autofocus
 *
 * ```tsx
 * import useAutoFocus from '@atlaskit/ds-lib/use-auto-focus';
 *
 * const elementRef = useRef();
 * useAutoFocus(elementRef, true);
 *
 * <button ref={elementRef} />;
 * ```
 *
 * @param ref
 * @param autoFocus
 */
function useAutoFocus(ref, autoFocus) {
  var initialMount = reactExports.useRef(true);
  reactExports.useEffect(function () {
    if (ref && initialMount.current && autoFocus && ref.current) {
      ref.current.focus();
    }
    initialMount.current = false;
  }, [autoFocus, ref]);
}

/**
 * @jsxRuntime classic
 * @jsx jsx
 */
var BORDER_WIDTH = 2;
var baseFocusOutsideStyles = css$2({
  outline: "".concat(BORDER_WIDTH, "px solid ", "var(--ds-border-focused, #2684FF)"),
  outlineOffset: BORDER_WIDTH
});
var baseInsetStyles = css$2({
  outlineColor: "var(--ds-border-focused, #2684FF)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  outlineOffset: -BORDER_WIDTH,
  outlineStyle: 'solid',
  outlineWidth: "var(--ds-border-width-outline, 2px)"
});
var focusRingStyles = css$2({
  // Focus styles used when :focus-visible isn't supported
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values
  '&:focus': baseFocusOutsideStyles,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values
  '&:focus-visible': baseFocusOutsideStyles,
  // Remove default focus styles for mouse interactions if :focus-visible is supported
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors
  '&:focus:not(:focus-visible)': {
    outline: 'none'
  },
  '@media screen and (forced-colors: active), screen and (-ms-high-contrast: active)': {
    '&:focus-visible': {
      outline: '1px solid'
    }
  }
});
var insetFocusRingStyles = css$2({
  // Focus styles used when :focus-visible isn't supported
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values
  '&:focus': baseInsetStyles,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values
  '&:focus-visible': baseInsetStyles,
  // Remove default focus styles for mouse interactions if :focus-visible is supported
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors
  '&:focus:not(:focus-visible)': {
    outline: 'none'
  },
  '@media screen and (forced-colors: active), screen and (-ms-high-contrast: active)': {
    '&:focus-visible': {
      outline: '1px solid',
      // eslint-disable-next-line @atlaskit/design-system/use-tokens-space
      outlineOffset: '-1px'
    }
  }
});

/**
 * __Focus ring__
 *
 * A focus ring visually indicates the currently focused item.
 *
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/focus-ring)
 *
 * @example
 * ```jsx
 * import FocusRing from '@atlaskit/focus-ring';
 *
 * const InteractiveComponent = () => (
 *   <FocusRing>
 *     <button type="button">Hello</button>
 *   </FocusRing>
 * )
 * ```
 */
var FocusRing = /*#__PURE__*/reactExports.memo(function (_ref) {
  var children = _ref.children,
    isInset = _ref.isInset,
    focus = _ref.focus;
  var controlledStyles = isInset ? baseInsetStyles : baseFocusOutsideStyles;
  var uncontrolledStyles = isInset ? insetFocusRingStyles : focusRingStyles;
  var focusCls = typeof focus === 'undefined' ? uncontrolledStyles : focus === 'on' && controlledStyles;
  return jsx(ClassNames, null, function (_ref2) {
    var css = _ref2.css,
      cx = _ref2.cx;
    return reactExports.Children.only(
    // This may look unwieldy but means we skip applying styles / cloning if no className is applicable
    focusCls ?
    /*#__PURE__*/
    // eslint-disable-next-line @repo/internal/react/no-clone-element
    reactExports.cloneElement(children, {
      className: cx([css(focusCls), children.props.className])
    }) : children);
  });
});
FocusRing.displayName = 'FocusRing';

function abort$1(event) {
  event.preventDefault();
  event.stopPropagation();
}
var tabKeyCode$1 = 9;
function onKey$1(event) {
  // Allowing tab so that a user can move focus away
  if (event.keyCode === tabKeyCode$1) {
    return;
  }
  abort$1(event);
}
var block = {
  onMouseDownCapture: abort$1,
  onMouseUpCapture: abort$1,
  // because we have tabIndex = -1 when disabled,
  // keyboard events can only occur when there is an overlay
  onKeyDownCapture: onKey$1,
  onKeyUpCapture: onKey$1,
  onTouchStartCapture: abort$1,
  onTouchEndCapture: abort$1,
  onPointerDownCapture: abort$1,
  onPointerUpCapture: abort$1,
  onClickCapture: abort$1,
  // Just smashing the existing onClick for good measure
  onClick: abort$1
};
var doNotBlock = {};
function blockEvents$1(_ref) {
  var isInteractive = _ref.isInteractive;
  return isInteractive ? doNotBlock : block;
}

// Hard coding the active rgba color value rather than using a helper to convert it
// With helper it would be: hex2rgba(colors.B75, 0.6)
var fadedB75 = 'rgba(179, 212, 255, 0.6)';
var values = {
  // Default appearance
  background: {
    default: {
      default: {
        light: "var(--ds-background-neutral, ".concat(N20A, ")"),
        dark: "var(--ds-background-neutral, ".concat(DN70, ")")
      },
      hover: {
        light: "var(--ds-background-neutral-hovered, ".concat(N30A, ")"),
        dark: "var(--ds-background-neutral-hovered, ".concat(DN60, ")")
      },
      active: {
        light: "var(--ds-background-neutral-pressed, ".concat(fadedB75, ")"),
        dark: "var(--ds-background-neutral-pressed, ".concat(B75, ")")
      },
      disabled: {
        light: "var(--ds-background-disabled, ".concat(N20A, ")"),
        dark: "var(--ds-background-disabled, ".concat(DN70, ")")
      },
      selected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(DN0, ")")
      },
      focusSelected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(DN0, ")")
      }
    },
    primary: {
      default: {
        light: "var(--ds-background-brand-bold, ".concat(B400, ")"),
        dark: "var(--ds-background-brand-bold, ".concat(B100, ")")
      },
      hover: {
        light: "var(--ds-background-brand-bold-hovered, ".concat(B300, ")"),
        dark: "var(--ds-background-brand-bold-hovered, ".concat(B75, ")")
      },
      active: {
        light: "var(--ds-background-brand-bold-pressed, ".concat(B500, ")"),
        dark: "var(--ds-background-brand-bold-pressed, ".concat(B200, ")")
      },
      disabled: {
        light: "var(--ds-background-disabled, ".concat(N20A, ")"),
        dark: "var(--ds-background-disabled, ".concat(DN70, ")")
      },
      selected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(DN0, ")")
      },
      focusSelected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(DN0, ")")
      }
    },
    warning: {
      default: {
        light: "var(--ds-background-warning-bold, ".concat(Y300, ")"),
        dark: "var(--ds-background-warning-bold, ".concat(Y300, ")")
      },
      hover: {
        light: "var(--ds-background-warning-bold-hovered, ".concat(Y200, ")"),
        dark: "var(--ds-background-warning-bold-hovered, ".concat(Y200, ")")
      },
      active: {
        light: "var(--ds-background-warning-bold-pressed, ".concat(Y400, ")"),
        dark: "var(--ds-background-warning-bold-pressed, ".concat(Y400, ")")
      },
      disabled: {
        light: "var(--ds-background-disabled, ".concat(N20A, ")"),
        dark: "var(--ds-background-disabled, ".concat(DN70, ")")
      },
      selected: {
        light: "var(--ds-background-selected, ".concat(Y400, ")"),
        dark: "var(--ds-background-selected, ".concat(Y400, ")")
      },
      focusSelected: {
        light: "var(--ds-background-selected, ".concat(Y400, ")"),
        dark: "var(--ds-background-selected, ".concat(Y400, ")")
      }
    },
    danger: {
      default: {
        light: "var(--ds-background-danger-bold, ".concat(R400, ")"),
        dark: "var(--ds-background-danger-bold, ".concat(R400, ")")
      },
      hover: {
        light: "var(--ds-background-danger-bold-hovered, ".concat(R300, ")"),
        dark: "var(--ds-background-danger-bold-hovered, ".concat(R300, ")")
      },
      active: {
        light: "var(--ds-background-danger-bold-pressed, ".concat(R500, ")"),
        dark: "var(--ds-background-danger-bold-pressed, ".concat(R500, ")")
      },
      disabled: {
        light: "var(--ds-background-disabled, ".concat(N20A, ")"),
        dark: "var(--ds-background-disabled, ".concat(DN70, ")")
      },
      selected: {
        light: "var(--ds-background-selected, ".concat(R500, ")"),
        dark: "var(--ds-background-selected, ".concat(R500, ")")
      },
      focusSelected: {
        light: "var(--ds-background-selected, ".concat(R500, ")"),
        dark: "var(--ds-background-selected, ".concat(R500, ")")
      }
    },
    link: {
      default: {
        light: "var(--ds-background-neutral-subtle, none)",
        dark: "var(--ds-background-neutral-subtle, none)"
      },
      selected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(N20, ")")
      },
      focusSelected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(N20, ")")
      }
    },
    subtle: {
      default: {
        light: "var(--ds-background-neutral-subtle, none)",
        dark: "var(--ds-background-neutral-subtle, none)"
      },
      hover: {
        light: "var(--ds-background-neutral-subtle-hovered, ".concat(N30A, ")"),
        dark: "var(--ds-background-neutral-subtle-hovered, ".concat(DN60, ")")
      },
      active: {
        light: "var(--ds-background-neutral-subtle-pressed, ".concat(fadedB75, ")"),
        dark: "var(--ds-background-neutral-subtle-pressed, ".concat(B75, ")")
      },
      disabled: {
        light: "var(--ds-background-neutral-subtle, none)",
        dark: "var(--ds-background-neutral-subtle, none)"
      },
      selected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(DN0, ")")
      },
      focusSelected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(DN0, ")")
      }
    },
    'subtle-link': {
      default: {
        light: "var(--ds-background-neutral-subtle, none)",
        dark: "var(--ds-background-neutral-subtle, none)"
      },
      selected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(N20, ")")
      },
      focusSelected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(N20, ")")
      }
    }
  },
  color: {
    default: {
      default: {
        light: "var(--ds-text, ".concat(N500, ")"),
        dark: "var(--ds-text, ".concat(DN400, ")")
      },
      active: {
        light: "var(--ds-text, ".concat(B400, ")"),
        dark: "var(--ds-text, ".concat(B400, ")")
      },
      disabled: {
        light: "var(--ds-text-disabled, ".concat(N70, ")"),
        dark: "var(--ds-text-disabled, ".concat(DN30, ")")
      },
      selected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(DN400, ")")
      },
      focusSelected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(DN400, ")")
      }
    },
    primary: {
      default: {
        light: "var(--ds-text-inverse, ".concat(N0, ")"),
        dark: "var(--ds-text-inverse, ".concat(DN30, ")")
      },
      disabled: {
        light: "var(--ds-text-disabled, ".concat(N70, ")"),
        dark: "var(--ds-text-disabled, ".concat(DN30, ")")
      },
      selected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(DN400, ")")
      },
      focusSelected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(DN400, ")")
      }
    },
    warning: {
      default: {
        light: "var(--ds-text-warning-inverse, ".concat(N800, ")"),
        dark: "var(--ds-text-warning-inverse, ".concat(N800, ")")
      },
      disabled: {
        light: "var(--ds-text-disabled, ".concat(N70, ")"),
        dark: "var(--ds-text-disabled, ".concat(DN30, ")")
      },
      selected: {
        light: "var(--ds-text-selected, ".concat(N800, ")"),
        dark: "var(--ds-text-selected, ".concat(N800, ")")
      },
      focusSelected: {
        light: "var(--ds-text-selected, ".concat(N800, ")"),
        dark: "var(--ds-text-selected, ".concat(N800, ")")
      }
    },
    danger: {
      default: {
        light: "var(--ds-text-inverse, ".concat(N0, ")"),
        dark: "var(--ds-text-inverse, ".concat(N0, ")")
      },
      disabled: {
        light: "var(--ds-text-disabled, ".concat(N70, ")"),
        dark: "var(--ds-text-disabled, ".concat(DN30, ")")
      },
      selected: {
        light: "var(--ds-text-selected, ".concat(N0, ")"),
        dark: "var(--ds-text-selected, ".concat(N0, ")")
      },
      focusSelected: {
        light: "var(--ds-text-selected, ".concat(N0, ")"),
        dark: "var(--ds-text-selected, ".concat(N0, ")")
      }
    },
    link: {
      default: {
        light: "var(--ds-link, ".concat(B400, ")"),
        dark: "var(--ds-link, ".concat(B100, ")")
      },
      hover: {
        light: "var(--ds-link, ".concat(B300, ")"),
        dark: "var(--ds-link, ".concat(B75, ")")
      },
      active: {
        light: "var(--ds-link-pressed, ".concat(B500, ")"),
        dark: "var(--ds-link-pressed, ".concat(B200, ")")
      },
      disabled: {
        light: "var(--ds-text-disabled, ".concat(N70, ")"),
        dark: "var(--ds-text-disabled, ".concat(DN100, ")")
      },
      selected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(N700, ")")
      },
      focusSelected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(N700, ")")
      }
    },
    subtle: {
      default: {
        light: "var(--ds-text, ".concat(N500, ")"),
        dark: "var(--ds-text, ".concat(DN400, ")")
      },
      active: {
        light: "var(--ds-text, ".concat(B400, ")"),
        dark: "var(--ds-text, ".concat(B400, ")")
      },
      disabled: {
        light: "var(--ds-text-disabled, ".concat(N70, ")"),
        dark: "var(--ds-text-disabled, ".concat(DN100, ")")
      },
      selected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(DN400, ")")
      },
      focusSelected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(DN400, ")")
      }
    },
    'subtle-link': {
      default: {
        light: "var(--ds-text-subtle, ".concat(N200, ")"),
        dark: "var(--ds-text-subtle, ".concat(DN400, ")")
      },
      hover: {
        light: "var(--ds-text-subtle, ".concat(N90, ")"),
        dark: "var(--ds-text-subtle, ".concat(B50, ")")
      },
      active: {
        light: "var(--ds-text, ".concat(N400, ")"),
        dark: "var(--ds-text, ".concat(DN300, ")")
      },
      disabled: {
        light: "var(--ds-text-disabled, ".concat(N70, ")"),
        dark: "var(--ds-text-disabled, ".concat(DN100, ")")
      },
      selected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(DN400, ")")
      },
      focusSelected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(DN400, ")")
      }
    }
  }
};

function ownKeys$h(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$g(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$h(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$h(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var gridSize$1 = gridSize$2();
var HAS_DISABLED_BACKGROUND = ['default', 'primary', 'danger', 'warning'];

// ## Button layout
//
// /------------------------------------------------------------------------------------------------------------------\
// |       →  |  ←      |          |      →  |  ←      |           |      →  |  ←      |         |      →  |  ←       |
// |  10px →  |  ← 2px  |   icon   |  2px →  |  ← 2px  |           |  2px →  |  ← 2px  |  icon   |  2px →  |  ← 10px  |
// |  padding |  margin |  before  |  margin |  margin |  content  |  margin |  margin |  after  |  margin |  padding |
// |    (12px total)    |          |    (4px total)    |           |    (4px total)    |         |    (12px total)    |
// |       →  |  ←      |          |      →  |  ←      |           |      →  |  ←      |         |      →  |  ←       |
// \------------------------------------------------------------------------------------------------------------------/
//                                           ↑                               ↑
//                                        Margins don't collapse with inline-flex
//
var heights = {
  default: "".concat(32 / 14, "em"),
  // 32px
  compact: "".concat(24 / 14, "em"),
  none: 'auto'
};
var lineHeights = {
  default: heights.default,
  compact: heights.compact,
  none: 'inherit'
};
var padding = {
  // 10px gutter
  default: "0 ".concat(gridSize$1 + gridSize$1 / 4, "px"),
  compact: "0 ".concat(gridSize$1 + gridSize$1 / 4, "px"),
  none: '0'
};
var singleIconPadding = {
  // 2px gutter
  compact: "0 ".concat(gridSize$1 / 4, "px"),
  default: "0 ".concat(gridSize$1 / 4, "px"),
  none: '0'
};
var verticalAlign = {
  default: 'middle',
  compact: 'middle',
  none: 'baseline'
};
var innerMargin = {
  content: "0 ".concat(gridSize$1 / 4, "px"),
  icon: "0 ".concat(gridSize$1 / 4, "px")
};
var defaultAfterStyles = {
  borderRadius: 'inherit',
  inset: "var(--ds-space-0, 0px)",
  borderStyle: 'solid',
  borderWidth: "var(--ds-border-width, 1px)",
  pointerEvents: 'none',
  position: 'absolute'
};
var defaultStyles$2 = {
  background: "var(--ds-background-neutral-subtle, #00000000)",
  color: "var(--ds-text, #172B4D)",
  '&:not([disabled])::after': _objectSpread$g(_objectSpread$g({}, defaultAfterStyles), {}, {
    content: '""',
    borderColor: "var(--ds-border, #091E4224)"
  }),
  '&:hover': {
    background: "var(--ds-background-neutral-hovered, #091E4224)"
  },
  '&:active': {
    background: "var(--ds-background-neutral-pressed, #091E424F)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "var(--ds-background-neutral-subtle, #00000000)"
  }
};
var primaryStyles$1 = {
  background: "var(--ds-background-brand-bold, #0C66E4)",
  color: "var(--ds-text-inverse, #FFFFFF)",
  '&:hover': {
    background: "var(--ds-background-brand-bold-hovered, #0055CC)"
  },
  '&:active': {
    background: "var(--ds-background-brand-bold-pressed, #09326C)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "var(--ds-background-brand-bold, #0C66E4)"
  }
};
var linkStyles = {
  background: 'transparent',
  color: "var(--ds-link, #0C66E4)",
  '&:hover': {
    color: "var(--ds-link, #0C66E4)",
    textDecoration: 'underline'
  },
  '&:active': {
    color: "var(--ds-link-pressed, #0055CC)",
    textDecoration: 'underline'
  }
};
var subtleStyles$1 = {
  background: 'transparent',
  color: "var(--ds-text-subtle, #44546F)",
  '&:hover': {
    background: "var(--ds-background-neutral-subtle-hovered, #091E420F)"
  },
  '&:active': {
    background: "var(--ds-background-neutral-subtle-pressed, #091E4224)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: 'transparent'
  }
};
var subtleLinkStyles = {
  background: 'transparent',
  color: "var(--ds-text-subtle, #44546F)",
  '&:hover': {
    background: 'transparent',
    color: "var(--ds-text-subtle, #44546F)",
    textDecoration: 'underline'
  },
  '&:active': {
    background: 'transparent',
    color: "var(--ds-text, #172B4D)",
    textDecoration: 'underline'
  }
};
var warningStyles$1 = {
  background: "var(--ds-background-warning-bold, #F5CD47)",
  color: "var(--ds-text-warning-inverse, #172B4D)",
  '&:hover': {
    background: "var(--ds-background-warning-bold-hovered, #E2B203)"
  },
  '&:active': {
    background: "var(--ds-background-warning-bold-pressed, #CF9F02)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "var(--ds-background-warning-bold, #F5CD47)"
  }
};
var dangerStyles$1 = {
  background: "var(--ds-background-danger-bold, #C9372C)",
  color: "var(--ds-text-inverse, #FFFFFF)",
  '&:hover': {
    background: "var(--ds-background-danger-bold-hovered, #AE2E24)"
  },
  '&:active': {
    background: "var(--ds-background-danger-bold-pressed, #5D1F1A)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "var(--ds-background-danger-bold, #C9372C)"
  }
};
var selectedStyles$1 = {
  background: "var(--ds-background-selected, #E9F2FF)",
  color: "var(--ds-text-selected, #0C66E4)",
  '&:not([disabled])::after': _objectSpread$g(_objectSpread$g({}, defaultAfterStyles), {}, {
    content: '""',
    borderColor: "var(--ds-border-selected, #0C66E4)"
  })
};
var hasOverlayStyles = {
  '&[data-has-overlay="true"]': {
    cursor: 'default',
    textDecoration: 'none'
  }
};
function getColor(_ref) {
  var group = _ref.group,
    key = _ref.key,
    mode = _ref.mode;
  var rule = group[key] || group.default;
  return rule[mode];
}
function getColors$1(_ref2) {
  var appearance = _ref2.appearance,
    key = _ref2.key,
    mode = _ref2.mode;
  return {
    background: getColor({
      group: values.background[appearance],
      key: key,
      mode: mode
    }),
    // Needing to add !important to overcome specificity issue caused by deprecated AtlaskitThemeProvider
    color: "".concat(getColor({
      group: values.color[appearance],
      key: key,
      mode: mode
    }), " !important")
  };
}
function getCss(_ref3) {
  var appearance = _ref3.appearance,
    spacing = _ref3.spacing,
    mode = _ref3.mode,
    isSelected = _ref3.isSelected,
    shouldFitContainer = _ref3.shouldFitContainer,
    isOnlySingleIcon = _ref3.isOnlySingleIcon;
  var baseColors = getColors$1({
    appearance: appearance,
    key: isSelected ? 'selected' : 'default',
    mode: mode
  });
  return _objectSpread$g(_objectSpread$g(_objectSpread$g(_objectSpread$g({
    // 0px margin added to css-reset
    alignItems: 'baseline',
    borderWidth: 0,
    borderRadius: "var(--ds-border-radius, 3px)",
    boxSizing: 'border-box',
    display: 'inline-flex',
    fontSize: 'inherit',
    fontStyle: 'normal',
    // Chrome recently changed button so that they use 'arial' as the font family
    fontFamily: 'inherit',
    fontWeight: 500,
    // margin for button has been applied to css reset
    maxWidth: '100%',
    // Needed to position overlay
    position: 'relative',
    textAlign: 'center',
    textDecoration: 'none',
    transition: 'background 0.1s ease-out, box-shadow 0.15s cubic-bezier(0.47, 0.03, 0.49, 1.38)',
    whiteSpace: 'nowrap'
  }, !fg('platform-component-visual-refresh') && baseColors), {}, {
    cursor: 'pointer',
    height: heights[spacing],
    lineHeight: lineHeights[spacing],
    padding: isOnlySingleIcon ? singleIconPadding[spacing] : padding[spacing],
    verticalAlign: verticalAlign[spacing],
    width: shouldFitContainer ? '100%' : 'auto',
    // justifyContent required for shouldFitContainer buttons with an icon inside
    justifyContent: 'center'
  }, !fg('platform-component-visual-refresh') && _objectSpread$g(_objectSpread$g({
    // Disabling visited styles (just using the base colors)
    '&:visited': _objectSpread$g({}, baseColors),
    '&:hover': _objectSpread$g(_objectSpread$g({}, getColors$1({
      appearance: appearance,
      key: isSelected ? 'selected' : 'hover',
      mode: mode
    })), {}, {
      textDecoration: !isSelected && (appearance === 'link' || appearance === 'subtle-link') ? 'underline' : 'inherit',
      // background, box-shadow
      transitionDuration: '0s, 0.15s'
    }),
    // giving active styles preference by listing them after focus
    '&:active': _objectSpread$g(_objectSpread$g({}, getColors$1({
      appearance: appearance,
      key: isSelected ? 'selected' : 'active',
      mode: mode
    })), {}, {
      // background, box-shadow
      transitionDuration: '0s, 0s'
    }),
    // preventDefault prevents regular active styles from applying in Firefox
    '&[data-firefox-is-active="true"]': _objectSpread$g(_objectSpread$g({}, getColors$1({
      appearance: appearance,
      key: isSelected ? 'selected' : 'active',
      mode: mode
    })), {}, {
      // background, box-shadow
      transitionDuration: '0s, 0s'
    }),
    // Giving disabled styles preference over active by listing them after.
    // Not using '&:disabled' because :disabled is not a valid state for all element types
    // so we are targeting the attribute
    // Attributes have the same specificity a pseudo classes so we are overriding :disabled here
    '&[disabled]': _objectSpread$g(_objectSpread$g({}, getColors$1({
      appearance: appearance,
      key: 'disabled',
      mode: mode
    })), {}, {
      cursor: 'not-allowed',
      textDecoration: 'none'
    })
  }, hasOverlayStyles), {}, {
    // disabling hover and active color changes when there is an overlay, but the button is not disabled
    '&[data-has-overlay="true"]:not([disabled]):hover, &[data-has-overlay="true"]:not([disabled]):active': _objectSpread$g({}, getColors$1({
      appearance: appearance,
      key: isSelected ? 'selected' : 'default',
      mode: mode
    }))
  })), fg('platform-component-visual-refresh') && (isSelected ? selectedStyles$1 : _objectSpread$g(_objectSpread$g(_objectSpread$g(_objectSpread$g(_objectSpread$g(_objectSpread$g(_objectSpread$g(_objectSpread$g({}, appearance === 'default' && defaultStyles$2), appearance === 'primary' && primaryStyles$1), appearance === 'link' && linkStyles), appearance === 'subtle' && subtleStyles$1), appearance === 'subtle-link' && subtleLinkStyles), appearance === 'warning' && warningStyles$1), appearance === 'danger' && dangerStyles$1), {}, {
    '&[disabled]': {
      color: "var(--ds-text-disabled, #091E424F)",
      backgroundColor: HAS_DISABLED_BACKGROUND.includes(appearance) ? "var(--ds-background-disabled, #091E4208)" : 'transparent',
      cursor: 'not-allowed',
      textDecoration: 'none',
      '&:hovered': {
        backgroundColor: HAS_DISABLED_BACKGROUND.includes(appearance) ? "var(--ds-background-disabled, #091E4208)" : 'transparent'
      },
      '&:active': {
        backgroundColor: HAS_DISABLED_BACKGROUND.includes(appearance) ? "var(--ds-background-disabled, #091E4208)" : 'transparent'
      }
    }
  }, hasOverlayStyles))), {}, {
    '&::-moz-focus-inner': {
      border: 0,
      margin: 0,
      padding: 0
    }
  });
}

// inline-flex child
function getIconStyle(_ref4) {
  var spacing = _ref4.spacing;
  return css$2({
    display: 'flex',
    // icon size cannot grow and shrink
    // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    margin: spacing === 'none' ? 0 : innerMargin.icon,
    flexGrow: 0,
    flexShrink: 0,
    alignSelf: 'center',
    fontSize: 0,
    lineHeight: 0,
    userSelect: 'none'
  });
}

// inline-flex child
function getContentStyle(_ref5) {
  var spacing = _ref5.spacing;
  return css$2({
    // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    margin: spacing === 'none' ? 0 : innerMargin.content,
    // content can grow and shrink
    flexGrow: 1,
    flexShrink: 1,
    // ellipsis for overflow text
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  });
}
function getFadingCss(_ref6) {
  var hasOverlay = _ref6.hasOverlay;
  return css$2({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    opacity: hasOverlay ? 0 : 1,
    transition: 'opacity 0.3s'
  });
}
var overlayCss = {
  // stretching to full width / height of button
  // this is important as we need it to still block
  // event if clicking in the button's own padding
  position: 'absolute',
  left: 0,
  top: 0,
  right: 0,
  bottom: 0,
  // Putting all children in the center
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center'
};

var getIfVisuallyHiddenChildren = function getIfVisuallyHiddenChildren(children) {
  return children && /*#__PURE__*/reactExports.isValidElement(children) && children.type === VisuallyHidden;
};

var _excluded$c = ["analyticsContext", "appearance", "autoFocus", "buttonCss", "children", "className", "href", "component", "iconAfter", "iconBefore", "interactionName", "isDisabled", "isSelected", "onBlur", "onClick", "onFocus", "onMouseDown", "overlay", "shouldFitContainer", "spacing", "tabIndex", "type", "testId"];

// Disabled buttons will still publish events for nested elements in webkit.
// We are disabling pointer events on child elements so that
// the button will always be the target of events
// Note: firefox does not have this behaviour for child elements
var noPointerEventsOnChildrenCss = {
  '> *': {
    pointerEvents: 'none'
  }
};
/**
 * These CSS variables consumed by the new icons, to allow them to have appropriate
 * padding inside Button while also maintaining spacing for the existing icons.
 *
 * These styles can be removed once the new icons are fully rolled out, feature flag
 * platform.design-system-team.enable-new-icons is cleaned up,
 * and we bump Button to set padding based on the new icons.
 */
var iconBeforeSpacingFixStyle = css$2({
  '--ds--button--new-icon-padding-end': "var(--ds-space-025, 2px)",
  '--ds--button--new-icon-padding-start': "var(--ds-space-050, 4px)",
  marginInlineStart: "var(--ds-space-negative-025, -2px)"
});
var iconAfterSpacingFixStyle = css$2({
  '--ds--button--new-icon-padding-end': "var(--ds-space-050, 4px)",
  '--ds--button--new-icon-padding-start': "var(--ds-space-025, 2px)",
  marginInlineEnd: "var(--ds-space-negative-025, -2px)"
});
var getSpacingFix = function getSpacingFix(children, spacingStyles) {
  if (!children || getIfVisuallyHiddenChildren(children)) {
    return null;
  }
  return spacingStyles;
};
var getChildren = function getChildren(children, childrenStyles) {
  if (getIfVisuallyHiddenChildren(children)) {
    return children;
  }
  return children ? jsx("span", {
    css: childrenStyles
  }, children) : null;
};
var ButtonBase = /*#__PURE__*/React.forwardRef(function ButtonBase(props, ref) {
  var analyticsContext = props.analyticsContext,
    _props$appearance = props.appearance,
    appearance = _props$appearance === void 0 ? 'default' : _props$appearance,
    _props$autoFocus = props.autoFocus,
    autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
    buttonCss = props.buttonCss,
    children = props.children,
    className = props.className,
    href = props.href,
    _props$component = props.component,
    Component = _props$component === void 0 ? href ? 'a' : 'button' : _props$component,
    iconAfter = props.iconAfter,
    iconBefore = props.iconBefore,
    interactionName = props.interactionName,
    _props$isDisabled = props.isDisabled,
    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
    _props$isSelected = props.isSelected,
    isSelected = _props$isSelected === void 0 ? false : _props$isSelected,
    onBlur = props.onBlur,
    _props$onClick = props.onClick,
    providedOnClick = _props$onClick === void 0 ? noop$5 : _props$onClick,
    onFocus = props.onFocus,
    _props$onMouseDown = props.onMouseDown,
    providedOnMouseDown = _props$onMouseDown === void 0 ? noop$5 : _props$onMouseDown,
    overlay = props.overlay;
    props.shouldFitContainer;
    var _props$spacing = props.spacing,
    spacing = _props$spacing === void 0 ? 'default' : _props$spacing,
    _props$tabIndex = props.tabIndex,
    tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,
    _props$type = props.type,
    type = _props$type === void 0 ? !href ? 'button' : undefined : _props$type,
    testId = props.testId,
    rest = _objectWithoutProperties(props, _excluded$c);
  var ourRef = reactExports.useRef();
  var setRef = reactExports.useCallback(function (node) {
    ourRef.current = node;
    if (ref == null) {
      return;
    }
    if (typeof ref === 'function') {
      ref(node);
      return;
    }

    // We can write to ref's `current` property, but Typescript does not like it.
    // @ts-ignore
    ref.current = node;
  }, [ourRef, ref]);

  // Cross browser auto focusing is pretty broken, so we are doing it ourselves
  useAutoFocus(ourRef, autoFocus);
  var interactionContext = reactExports.useContext(InteractionContext);
  var handleClick = reactExports.useCallback(function (e, analyticsEvent) {
    interactionContext && interactionContext.tracePress(interactionName, e.timeStamp);
    providedOnClick(e, analyticsEvent);
  }, [providedOnClick, interactionContext, interactionName]);
  var onClick = usePlatformLeafEventHandler({
    fn: handleClick,
    action: 'clicked',
    componentName: 'button',
    packageName: "@atlaskit/button",
    packageVersion: "20.2.1",
    analyticsData: analyticsContext
  });

  // Button currently calls preventDefault, which is not standard button behaviour
  var onMouseDown = reactExports.useCallback(function (event) {
    event.preventDefault();
    providedOnMouseDown(event);
  }, [providedOnMouseDown]);

  // Lose focus when becoming disabled (standard button behaviour)
  reactExports.useEffect(function () {
    var el = ourRef.current;
    if (isDisabled && el && el === document.activeElement) {
      el.blur();
    }
  }, [isDisabled]);

  // we are 'disabling' input with a button when there is an overlay
  var hasOverlay = Boolean(overlay);
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  var fadeStyles = css$2(getFadingCss({
    hasOverlay: hasOverlay
  }));
  var isInteractive = !isDisabled && !hasOverlay;

  /**
   * HACK: Spinner needs to have different colours in the "new" tokens design compared to the old design.
   * For now, while we support both, these styles reach into Spinner when a theme is set, applies the right color.
   * Ticket to remove: https://product-fabric.atlassian.net/browse/DSP-2067.
   */
  var spinnerHackCss = {};
  if (isSelected || isDisabled || appearance === 'warning') {
    spinnerHackCss = {
      '[data-theme] & circle': {
        stroke: "".concat(isSelected || isDisabled ? "var(--ds-icon-subtle, ".concat(N500, ")") : "var(--ds-icon-warning-inverse, ".concat(N500, ")"), " !important")
      }
    };
  }
  return jsx(FocusRing, null, jsx(Component, _extends({}, rest, {
    ref: setRef
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: className,
    css: [buttonCss, isInteractive ? null : noPointerEventsOnChildrenCss]
    // using undefined so that the property doesn't exist when false
    ,
    "data-has-overlay": hasOverlay ? true : undefined,
    "data-testid": testId,
    disabled: isDisabled,
    href: isInteractive ? href : undefined,
    onBlur: onBlur,
    onClick: onClick,
    onFocus: onFocus,
    onMouseDown: onMouseDown
    // Adding a tab index so element is always focusable, even when not a <button> or <a>
    // Disabling focus via keyboard navigation when disabled
    // as this is standard button behaviour
    ,
    tabIndex: isDisabled ? -1 : tabIndex,
    type: type
  }, blockEvents$1({
    isInteractive: isInteractive
  })), iconBefore ? jsx("span", {
    css: [fadeStyles,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    getIconStyle({
      spacing: spacing
    }), getSpacingFix(children, iconBeforeSpacingFixStyle)]
  }, iconBefore) : null, getChildren(children, [fadeStyles, getContentStyle({
    spacing: spacing
  })]), iconAfter ? jsx("span", {
    css: [fadeStyles,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    getIconStyle({
      spacing: spacing
    }), getSpacingFix(children, iconAfterSpacingFixStyle)]
  }, iconAfter) : null, overlay ? jsx("span", {
    css: [overlayCss, spinnerHackCss]
  }, overlay) : null));
});

function getIsOnlySingleIcon(_ref) {
  var children = _ref.children,
    iconBefore = _ref.iconBefore,
    iconAfter = _ref.iconAfter;
  if (getIfVisuallyHiddenChildren(children)) {
    return true;
  }
  if (children) {
    return false;
  }
  if (iconBefore && !iconAfter) {
    return true;
  }
  if (!iconBefore && iconAfter) {
    return true;
  }
  return false;
}

var presetSizes = {
  xsmall: 8,
  small: 16,
  medium: 24,
  large: 48,
  xlarge: 96
};

/**
 * @jsxRuntime classic
 * @jsx jsx
 */
/**
 * Returns the appropriate circle stroke color.
 */
function getStrokeColor(appearance) {
  return appearance === 'inherit' ? "var(--ds-icon-subtle, ".concat(N500, ")") : "var(--ds-icon-inverse, ".concat(N0, ")");
}
var rotate = keyframes({
  to: {
    transform: 'rotate(360deg)'
  }
});
var rotateStyles = css$2({
  animation: "".concat(rotate, " 0.86s infinite"),
  animationTimingFunction: 'cubic-bezier(0.4, 0.15, 0.6, 0.85)',
  transformOrigin: 'center'
});

/**
 * There are three parts to the load in animation:
 * 1. Fade in
 * 2. Accelerated spin
 * 3. Stretch the spinner line
 */
var loadIn = keyframes({
  from: {
    transform: 'rotate(50deg)',
    opacity: 0,
    strokeDashoffset: 60
  },
  to: {
    transform: 'rotate(230deg)',
    opacity: 1,
    strokeDashoffset: 50
  }
});
var loadInStyles = css$2({
  animation: "".concat(loadIn, " 1s ease-in-out"),
  /**
   * When the animation completes, stay at the last frame of the animation.
   */
  animationFillMode: 'forwards',
  /**
   * We are going to animate this in.
   */
  opacity: 0
});
var wrapperStyles = css$2({
  display: 'inline-flex',
  /**
   * Align better inline with text.
   */
  verticalAlign: 'middle'
});
var circleStyles$1 = css$2({
  fill: 'none',
  strokeDasharray: 60,
  strokeDashoffset: 'inherit',
  strokeLinecap: 'round',
  strokeWidth: 1.5,
  '@media screen and (forced-colors: active)': {
    filter: 'grayscale(100%)',
    stroke: 'CanvasText'
  }
});

/**
 * `useLayoutEffect` is being used in SSR safe form. On the server, this work doesn’t need to run.
 * `useEffect` is used in-place, because `useEffect` is not run on the server and it matches types
 * which makes things simpler than doing an `isServer` check or a `null` check.
 *
 * @see https://hello.atlassian.net/wiki/spaces/DST/pages/2081696628/DSTDACI-010+-+Interaction+Tracing+hooks+in+DS+components
 */
var useLayoutEffect = typeof window === 'undefined' ? reactExports.useEffect : reactExports.useLayoutEffect;

/**
 * __Spinner__
 *
 * A spinner is an animated spinning icon that lets users know content is being loaded.
 *
 * - [Examples](https://atlassian.design/components/spinner/examples)
 * - [Code](https://atlassian.design/components/spinner/code)
 * - [Usage](https://atlassian.design/components/spinner/usage)
 */
var Spinner = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function Spinner(_ref, ref) {
  var _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'inherit' : _ref$appearance,
    _ref$delay = _ref.delay,
    delay = _ref$delay === void 0 ? 0 : _ref$delay,
    interactionName = _ref.interactionName,
    label = _ref.label,
    _ref$size = _ref.size,
    providedSize = _ref$size === void 0 ? 'medium' : _ref$size,
    testId = _ref.testId;
  var size = typeof providedSize === 'number' ? providedSize : presetSizes[providedSize];
  var animationDelay = "".concat(delay, "ms");
  var stroke = getStrokeColor(appearance);
  var context = reactExports.useContext(InteractionContext);
  useLayoutEffect(function () {
    if (context != null) {
      return context.hold(interactionName);
    }
  }, [context, interactionName]);

  /**
   * The Spinner animation uses a combination of two
   * css animations on two separate elements.
   */
  return jsx("span", {
    /**
     * This span exists to off-load animations from the circle element,
     * which were causing performance issues (style recalculations)
     * on Safari and older versions of Chrome.
     *
     * This can be removed and styles placed back on the circle element once
     * Safari fixes this bug and off-loads rendering to the GPU from the CPU.
     */
    css: [wrapperStyles, rotateStyles],
    "data-testid": testId && "".concat(testId, "-wrapper")
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: {
      animationDelay: animationDelay,
      width: size,
      height: size
    }
  }, jsx("svg", {
    height: size,
    width: size,
    viewBox: "0 0 16 16",
    xmlns: "http://www.w3.org/2000/svg",
    "data-testid": testId,
    ref: ref,
    "aria-label": label || undefined,
    css: loadInStyles
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: {
      animationDelay: animationDelay
    },
    role: label ? 'img' : 'none'
  }, jsx("circle", {
    cx: "8",
    cy: "8",
    r: "7",
    css: circleStyles$1,
    style: {
      stroke: stroke
    }
  })));
}));

function getSpinnerAppearance$1(_ref) {
  var appearance = _ref.appearance,
    isDisabled = _ref.isDisabled,
    isSelected = _ref.isSelected;
  if (isDisabled) {
    return 'inherit';
  }
  if (isSelected) {
    return 'invert';
  }
  if (appearance === 'primary' || appearance === 'danger') {
    return 'invert';
  }
  return 'inherit';
}
function LoadingSpinner(_ref2) {
  var appearance = _ref2.appearance,
    isDisabled = _ref2.isDisabled,
    isSelected = _ref2.isSelected,
    _ref2$spacing = _ref2.spacing,
    spacing = _ref2$spacing === void 0 ? 'default' : _ref2$spacing;
  var size = spacing === 'default' ? 'medium' : 'small';
  return /*#__PURE__*/React.createElement(Spinner, {
    size: size,
    label: ", Loading",
    appearance: getSpinnerAppearance$1({
      appearance: appearance,
      isDisabled: isDisabled,
      isSelected: isSelected
    })
  });
}

function ownKeys$g(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$f(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$g(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$g(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var stateToSelectorMap = {
  focus: '&:focus',
  focusSelected: '&:focus',
  hover: '&:hover',
  active: '&:active',
  disabled: '&[disabled]'
};

// Mapping the new clean css back to the legacy theme format.
// The legacy theme format has all styles at the top level (no nested selectors)
// and uses `getSpecifiers()` to apply the style to all pseudo states
function getCustomCss(_ref) {
  var _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,
    _ref$spacing = _ref.spacing,
    spacing = _ref$spacing === void 0 ? 'default' : _ref$spacing,
    _ref$mode = _ref.mode,
    mode = _ref$mode === void 0 ? 'light' : _ref$mode,
    _ref$isSelected = _ref.isSelected,
    isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,
    _ref$shouldFitContain = _ref.shouldFitContainer,
    shouldFitContainer = _ref$shouldFitContain === void 0 ? false : _ref$shouldFitContain,
    _ref$iconIsOnlyChild = _ref.iconIsOnlyChild,
    iconIsOnlyChild = _ref$iconIsOnlyChild === void 0 ? false : _ref$iconIsOnlyChild,
    _ref$isLoading = _ref.isLoading,
    isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading,
    state = _ref.state;
  var result = getCss({
    appearance: appearance,
    spacing: spacing,
    mode: mode,
    isSelected: isSelected,
    shouldFitContainer: shouldFitContainer,
    isOnlySingleIcon: iconIsOnlyChild
  });

  // we need to disable the default browser focus styles always
  // this is because we are not expressing that we can have two pseudo states at a time
  result.outline = 'none';

  // Pulling relevant styles up to the top level
  var selector = stateToSelectorMap[state];
  if (selector) {
    result = _objectSpread$f(_objectSpread$f({}, result), result[selector]);
  }
  if (isLoading) {
    result = _objectSpread$f(_objectSpread$f({}, result), result['&[data-has-overlay="true"]']);
  }

  // Delete all selectors and just keep root styles
  Object.keys(result).forEach(function (key) {
    // want to keep this one
    if (key === '&::-moz-focus-inner') {
      return;
    }

    // Not using .startsWith for ie11
    if (key.indexOf('&') === 0) {
      delete result[key];
    }
  });
  return result;
}

// This styling approach works by generating a 'style' and applying with maximum specificity
// To do this we are overwriting all pseudo selectors
function getSpecifiers(styles) {
  return {
    '&, &:hover, &:active, &:focus, &:focus-visible, &:visited, &:disabled, &[disabled]': styles
  };
}
function defaultThemeFn(current, values) {
  return current(values);
}
var Theme = createTheme(function (themeProps) {
  return {
    buttonStyles: getCustomCss(themeProps),
    // No styles being applied directly to spinner by default
    // Keeping this for legacy compat. We could remove it, but given
    // that we are changing theme soon there is no point
    spinnerStyles: {}
  };
});

var _excluded$b = ["appearance", "autoFocus", "isDisabled", "isSelected", "shouldFitContainer", "spacing", "isLoading", "onMouseEnter", "onMouseLeave", "onMouseDown", "onMouseUp", "onFocus", "onBlur", "theme"];
function ownKeys$f(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$e(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$f(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$f(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function getInteractionState(_ref) {
  var _ref$isDisabled = _ref.isDisabled,
    isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
    _ref$isActive = _ref.isActive,
    isActive = _ref$isActive === void 0 ? false : _ref$isActive,
    _ref$isFocus = _ref.isFocus,
    isFocus = _ref$isFocus === void 0 ? false : _ref$isFocus,
    _ref$isHover = _ref.isHover,
    isHover = _ref$isHover === void 0 ? false : _ref$isHover,
    _ref$isSelected = _ref.isSelected,
    isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,
    _ref$isLoading = _ref.isLoading,
    isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading;
  if (isDisabled) {
    return 'disabled';
  }
  if (isSelected && isFocus) {
    return 'focusSelected';
  }
  if (isSelected) {
    return 'selected';
  }
  // not allowing active or focus style changes while loading
  if (!isLoading && isActive) {
    return 'active';
  }
  if (!isLoading && isHover) {
    return 'hover';
  }
  if (isFocus) {
    return 'focus';
  }
  return 'default';
}
var initial = {
  isHover: false,
  isActive: false,
  isFocus: false
};

/**
 * __Custom theme button__
 *
 * @deprecated Legacy buttons are deprecated and will be removed from `atlaskit/button` in an upcoming major release. Please use the new Button components from `@atlaskit/button/new`
 *
 * Please refer to the [migration guide](https://atlassian.design/components/button/button-legacy/migration-guide) for further details.
 *
 * A custom theme button. Avoid using this component. It exists for those already using custom theming, which is hard to use and has performance issues.
 *
 * - [Examples](https://atlassian.design/components/button/examples#custom-theme-button)
 */
var CustomThemeButton = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function CustomThemeButton(_ref2, ref) {
  var _ref2$appearance = _ref2.appearance,
    appearance = _ref2$appearance === void 0 ? 'default' : _ref2$appearance,
    _ref2$autoFocus = _ref2.autoFocus,
    autoFocus = _ref2$autoFocus === void 0 ? false : _ref2$autoFocus,
    _ref2$isDisabled = _ref2.isDisabled,
    isDisabled = _ref2$isDisabled === void 0 ? false : _ref2$isDisabled,
    _ref2$isSelected = _ref2.isSelected,
    isSelected = _ref2$isSelected === void 0 ? false : _ref2$isSelected,
    _ref2$shouldFitContai = _ref2.shouldFitContainer,
    shouldFitContainer = _ref2$shouldFitContai === void 0 ? false : _ref2$shouldFitContai,
    _ref2$spacing = _ref2.spacing,
    spacing = _ref2$spacing === void 0 ? 'default' : _ref2$spacing,
    _ref2$isLoading = _ref2.isLoading,
    isLoading = _ref2$isLoading === void 0 ? false : _ref2$isLoading,
    providedOnMouseEnter = _ref2.onMouseEnter,
    providedOnMouseLeave = _ref2.onMouseLeave,
    providedOnMouseDown = _ref2.onMouseDown,
    providedOnMouseUp = _ref2.onMouseUp,
    providedOnFocus = _ref2.onFocus,
    providedOnBlur = _ref2.onBlur,
    _ref2$theme = _ref2.theme,
    theme = _ref2$theme === void 0 ? defaultThemeFn : _ref2$theme,
    rest = _objectWithoutProperties(_ref2, _excluded$b);
  // TODO is there a nicer way to do this?
  // Add default props back into object for spreading
  var restProps = _objectSpread$e({
    appearance: appearance,
    autoFocus: autoFocus,
    isDisabled: isDisabled,
    isSelected: isSelected,
    shouldFitContainer: shouldFitContainer,
    spacing: spacing
  }, rest);
  var _useState = reactExports.useState(initial),
    _useState2 = _slicedToArray(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  var onMouseEnter = reactExports.useCallback(function (event) {
    setState(function (current) {
      return _objectSpread$e(_objectSpread$e({}, current), {}, {
        isHover: true
      });
    });
    if (providedOnMouseEnter) {
      providedOnMouseEnter(event);
    }
  }, [providedOnMouseEnter]);
  var onMouseLeave = reactExports.useCallback(function (event) {
    setState(function (current) {
      return _objectSpread$e(_objectSpread$e({}, current), {}, {
        isHover: false,
        isActive: false
      });
    });
    if (providedOnMouseLeave) {
      providedOnMouseLeave(event);
    }
  }, [providedOnMouseLeave]);
  var onMouseDown = reactExports.useCallback(function (event) {
    setState(function (current) {
      return _objectSpread$e(_objectSpread$e({}, current), {}, {
        isActive: true
      });
    });
    if (providedOnMouseDown) {
      providedOnMouseDown(event);
    }
  }, [providedOnMouseDown]);
  var onMouseUp = reactExports.useCallback(function (event) {
    setState(function (current) {
      return _objectSpread$e(_objectSpread$e({}, current), {}, {
        isActive: false
      });
    });
    if (providedOnMouseUp) {
      providedOnMouseUp(event);
    }
  }, [providedOnMouseUp]);
  var onFocus = reactExports.useCallback(function (event) {
    setState(function (current) {
      return _objectSpread$e(_objectSpread$e({}, current), {}, {
        isFocus: true
      });
    });
    if (providedOnFocus) {
      providedOnFocus(event);
    }
  }, [providedOnFocus]);
  var onBlur = reactExports.useCallback(function (event) {
    setState(function (current) {
      return _objectSpread$e(_objectSpread$e({}, current), {}, {
        isFocus: false
      });
    });
    if (providedOnBlur) {
      providedOnBlur(event);
    }
  }, [providedOnBlur]);
  return /*#__PURE__*/React.createElement(Theme.Provider, {
    value: theme
  }, /*#__PURE__*/React.createElement(Theme$1.Consumer, null, function (_ref3) {
    var mode = _ref3.mode;
    return /*#__PURE__*/React.createElement(Theme.Consumer, _extends({
      mode: mode,
      state: getInteractionState(_objectSpread$e(_objectSpread$e({}, state), {}, {
        isLoading: isLoading,
        isSelected: restProps.isSelected,
        isDisabled: restProps.isDisabled
      })),
      iconIsOnlyChild: getIsOnlySingleIcon(restProps),
      isLoading: isLoading
    }, restProps), function (_ref4) {
      var buttonStyles = _ref4.buttonStyles;
      return /*#__PURE__*/React.createElement(ButtonBase, _extends({}, restProps, {
        ref: ref,
        overlay: isLoading ? /*#__PURE__*/React.createElement(LoadingSpinner, restProps) : null
        // No need to render aria-disabled when it is false
        ,
        "aria-disabled": isLoading || restProps['aria-disabled'],
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onMouseDown: onMouseDown,
        onMouseUp: onMouseUp,
        onFocus: onFocus,
        onBlur: onBlur,
        buttonCss: getSpecifiers(buttonStyles)
      }));
    });
  }));
}));

// Tools including enzyme rely on components having a display name
CustomThemeButton.displayName = 'CustomThemeButton';

/* eslint-disable @atlaskit/design-system/ensure-design-token-usage */

var flagBackgroundColor = {
  error: 'color.background.danger.bold',
  info: 'color.background.neutral.bold',
  normal: 'elevation.surface.overlay',
  success: 'color.background.success.bold',
  warning: 'color.background.warning.bold'
};
var flagIconColor = {
  error: "var(--ds-icon-inverse, ".concat(N0, ")"),
  info: "var(--ds-icon-inverse, ".concat(N0, ")"),
  normal: "var(--ds-icon-subtle, ".concat(N500, ")"),
  success: "var(--ds-icon-inverse, ".concat(N0, ")"),
  warning: "var(--ds-icon-warning-inverse, ".concat(N700, ")")
};

/* eslint-disable @atlaskit/design-system/ensure-design-token-usage */
var flagTextColor = {
  error: 'color.text.inverse',
  info: 'color.text.inverse',
  normal: 'color.text',
  success: 'color.text.inverse',
  warning: 'color.text.warning.inverse'
};
var flagTextColorToken = {
  error: "var(--ds-text-inverse, ".concat(N0, ")"),
  info: "var(--ds-text-inverse, ".concat(N0, ")"),
  normal: "var(--ds-text, ".concat(N800, ")"),
  success: "var(--ds-text-inverse, ".concat(N0, ")"),
  warning: "var(--ds-text-warning-inverse, ".concat(N700, ")")
};
// TODO: DSP-2519 Interaction tokens should be used for hovered and pressed states
// https://product-fabric.atlassian.net/browse/DSP-2519
var actionBackgroundColor = {
  success: {
    default: "var(--ds-background-inverse-subtle, ".concat(N30A, ")"),
    active: "var(--ds-background-inverse-subtle-pressed, ".concat(N30A, ")"),
    pressed: "var(--ds-background-inverse-subtle-hovered, ".concat(N30A, ")")
  },
  info: {
    default: "var(--ds-background-inverse-subtle, ".concat(N30A, ")"),
    active: "var(--ds-background-inverse-subtle-pressed, ".concat(N30A, ")"),
    pressed: "var(--ds-background-inverse-subtle-hovered, ".concat(N30A, ")")
  },
  error: {
    default: "var(--ds-background-inverse-subtle, ".concat(N30A, ")"),
    active: "var(--ds-background-inverse-subtle-pressed, ".concat(N30A, ")"),
    pressed: "var(--ds-background-inverse-subtle-hovered, ".concat(N30A, ")")
  },
  warning: {
    default: "var(--ds-background-inverse-subtle, ".concat(N30A, ")"),
    active: "var(--ds-background-inverse-subtle-pressed, ".concat(N30A, ")"),
    pressed: "var(--ds-background-inverse-subtle-hovered, ".concat(N30A, ")")
  },
  normal: {
    default: 'none',
    active: 'none',
    pressed: 'none'
  }
};
var actionTextColor = {
  success: "var(--ds-text-inverse, ".concat(N0, ")"),
  info: "var(--ds-text-inverse, ".concat(N0, ")"),
  error: "var(--ds-text-inverse, ".concat(N0, ")"),
  warning: "var(--ds-text-warning-inverse, ".concat(N700, ")"),
  normal: "var(--ds-link, ".concat(B400, ")")
};

var buttonStyles$2 = css$2({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '&&, a&&': {
    // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
    padding: "0 ".concat("var(--ds-space-100, 8px)", " !important"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    background: "var(".concat(VAR_BG_COLOR, ")"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles, @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    color: "var(".concat(VAR_COLOR, ") !important"),
    fontWeight: "var(--ds-font-weight-medium, 500)"
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '&&:hover, &&:active, a&&:hover, a&&:active': {
    textDecoration: 'underline'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '&&:hover': {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    backgroundColor: "var(".concat(VAR_BG_COLOR_HOVER, ")")
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '&&:active': {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    backgroundColor: "var(".concat(VAR_BG_COLOR_ACTIVE, ")")
  }
});
var appearanceNormalButtonStyles = css$2({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '&&, a&&': {
    // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
    padding: '0 !important'
  }
});
var appearanceNormalActionsContainerStyles = css$2({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '&&, a&&': {
    transform: 'translateX(-2px)'
  }
});
var FlagActions = function FlagActions(props) {
  var _props$appearance = props.appearance,
    appearance = _props$appearance === void 0 ? DEFAULT_APPEARANCE : _props$appearance,
    _props$actions = props.actions,
    actions = _props$actions === void 0 ? [] : _props$actions,
    linkComponent = props.linkComponent,
    testId = props.testId;
  if (!actions.length) {
    return null;
  }
  var isBold = appearance !== DEFAULT_APPEARANCE;
  return jsx("span", {
    css: !isBold && appearanceNormalActionsContainerStyles
  }, jsx(Inline, {
    space: "space.100",
    shouldWrap: true,
    alignBlock: "center",
    separator: isBold ? undefined : '·',
    testId: testId && "".concat(testId, "-actions")
  }, actions.map(function (action, index) {
    var _ref;
    return jsx(CustomThemeButton, {
      onClick: action.onClick,
      href: action.href,
      target: action.target,
      appearance: isBold ? 'default' : 'link',
      component: linkComponent,
      spacing: "compact",
      testId: action.testId,
      key: index
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      ,
      style: (_ref = {}, _defineProperty$1(_ref, VAR_COLOR, actionTextColor[appearance]), _defineProperty$1(_ref, VAR_BG_COLOR, actionBackgroundColor[appearance].default), _defineProperty$1(_ref, VAR_BG_COLOR_HOVER, actionBackgroundColor[appearance].pressed), _defineProperty$1(_ref, VAR_BG_COLOR_ACTIVE, actionBackgroundColor[appearance].active), _ref)
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      ,
      css: [buttonStyles$2, appearance === DEFAULT_APPEARANCE && appearanceNormalButtonStyles]
    }, action.content);
  })));
};

/**
 * Think of this as the motion equivalent of the @atlaskit/theme `grid()`.
 */
var durationStep = 25;
var mediumDurationMs = durationStep * 14;
var largeDurationMs = durationStep * 28;

var easeInOut = 'cubic-bezier(0.15,1,0.3,1)';
var easeOut = 'cubic-bezier(0.2,0,0,1)';
var easeIn = 'cubic-bezier(0.8,0,0,0.8)';

var isMatchMediaAvailable = function isMatchMediaAvailable() {
  return typeof window !== 'undefined' && 'matchMedia' in window;
};

/**
 * Use for any programatic motions needed at runtime.
 * Will return `true` if the current user prefers reduced motion.
 * This is generally set through OS preferences/settings.
 */
var isReducedMotion = function isReducedMotion() {
  if (!isMatchMediaAvailable()) {
    return false;
  }
  var _window$matchMedia = window.matchMedia('(prefers-reduced-motion: reduce)'),
    matches = _window$matchMedia.matches;
  return matches;
};

/**
 * Use for any CSS based motion (animation or transition).
 * Always put at the end of your declaration for correct use of the cascade.
 * Reduced motion preference is generally set through OS preferences/settings.
 */
var reduceMotionAsPerUserPreference = {
  '@media (prefers-reduced-motion: reduce)': {
    animation: 'none',
    transition: 'none'
  }
};

var getHookDeps = function getHookDeps(opts) {
  switch (opts.cleanup) {
    case 'next-effect':
      return undefined;
    case 'unmount':
    default:
      return [];
  }
};

/**
 * Will return set  timeout as a function which will clean itself up.
 */
var useSetTimeout = function useSetTimeout() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    cleanup: 'unmount'
  };
  var timeouts = reactExports.useRef([]);
  reactExports.useEffect(function () {
    return function () {
      if (timeouts.current.length) {
        timeouts.current.forEach(function (id) {
          return clearTimeout(id);
        });
        timeouts.current = [];
      }
    };
    // We dynamically set this so we either clean up on the next effect - or on unmount.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, getHookDeps(opts));
  return reactExports.useCallback(function (handler, timeout) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    var id = setTimeout.apply(void 0, [function () {
      timeouts.current = timeouts.current.filter(function (timeoutId) {
        return timeoutId !== id;
      });
      handler();
    }, timeout].concat(args));
    timeouts.current.push(id);
  }, []);
};

/**
 * Internally we will be playing with an element that will always have a key defined.
 */

/**
 * Internal data passed to child motions.
 */

// We define empty context here so the object doesn't change.
var emptyContext = {
  // Motions will always appear if not inside a exiting persistence component.
  appear: true,
  isExiting: false
};

/**
 * __Exiting context__
 *
 * An exiting context.
 */
var ExitingContext = /*#__PURE__*/reactExports.createContext(emptyContext);

/**
 * This method will wrap any React element with a context provider. We're using context (instead of
 * cloneElement) so we can communicate between multiple elements without the need of prop drilling
 * (results in a better API for consumers).
 */
var wrapChildWithContextProvider = function wrapChildWithContextProvider(child) {
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyContext;
  return /*#__PURE__*/React.createElement(ExitingContext.Provider, {
    key: "".concat(child.key, "-provider"),
    value: value
  }, child);
};

/**
 * This function will convert all children types to an array while also filtering out non-valid React elements.
 */
var childrenToArray = function childrenToArray(children) {
  var childrenAsArray = [];

  // We convert children to an array using this helper method as it will add keys to children that do not
  // have them, such as when we have hardcoded children that are conditionally rendered.
  reactExports.Children.toArray(children).forEach(function (child) {
    // We ignore any boolean children to make our code a little more simple later on,
    // and also filter out any falsies (empty strings, nulls, and undefined).
    if (typeof child !== 'boolean' && Boolean(child)) {
      // Children WILL have a key after being forced into an array using the React.Children helper.
      childrenAsArray.push(child);
    }
  });
  return childrenAsArray;
};
var spliceNewElementsIntoPrevious = function spliceNewElementsIntoPrevious(current, previous) {
  var splicedChildren = previous.concat([]);
  var previousMap = childrenToObj(previous);
  for (var i = 0; i < current.length; i++) {
    var child = current[i];
    var childIsNew = !previousMap[child.key];
    if (childIsNew) {
      // This will insert the new element after the previous element.
      splicedChildren.splice(i + 1, 0, child);
    }
  }
  return splicedChildren;
};
var childrenToObj = function childrenToObj(children) {
  return children.reduce(function (acc, child) {
    acc[child.key] = child;
    return acc;
  }, {});
};
var getMissingKeys = function getMissingKeys(current, previous) {
  var currentMapKeys = new Set(current.map(function (child) {
    return child.key;
  }));
  var missing = new Set();
  for (var i = 0; i < previous.length; i++) {
    var element = previous[i];
    var _key = element.key;
    if (!currentMapKeys.has(_key)) {
      missing.add(_key);
    }
  }
  return missing;
};

/**
 * __ExitingPersistence__
 *
 * Useful for enabling elements to persist and animate away when they are removed from the DOM.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/motion/docs/entering-motions)
 */
var ExitingPersistence = /*#__PURE__*/reactExports.memo(function (_ref) {
  var _ref$appear = _ref.appear,
    appear = _ref$appear === void 0 ? false : _ref$appear,
    children = _ref.children,
    exitThenEnter = _ref.exitThenEnter;
  var _useState = reactExports.useState([null, children]),
    _useState2 = _slicedToArray(_useState, 2),
    stateChildren = _useState2[0],
    setChildren = _useState2[1];
  var _useState3 = reactExports.useState([]),
    _useState4 = _slicedToArray(_useState3, 2),
    exitingChildren = _useState4[0],
    setExitingChildren = _useState4[1];
  var _useState5 = reactExports.useState(function () {
      return {
        appear: appear,
        isExiting: false
      };
    }),
    _useState6 = _slicedToArray(_useState5, 2),
    defaultContext = _useState6[0],
    setDefaultContext = _useState6[1];
  reactExports.useEffect(function () {
    if (!defaultContext.appear) {
      setDefaultContext({
        appear: true,
        isExiting: false
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  if (isReducedMotion()) {
    return children;
  }

  /**
   * NOTE: This is a workaround for the test case written in Jira where the stateChildren is a boolean value because
   * useState is mocked to return a boolean value.
   */
  if (typeof stateChildren === 'boolean') {
    return children;
  }
  var _stateChildren = _slicedToArray(stateChildren, 2),
    previousChildren = _stateChildren[0],
    currentChildren = _stateChildren[1];
  var previous = childrenToArray(previousChildren);
  var current = childrenToArray(currentChildren);
  if (currentChildren !== children) {
    setChildren([currentChildren, children]);
  }
  var missingKeys = getMissingKeys(current, previous);
  var isSomeChildRemoved = !!missingKeys.size;
  var visibleChildren = current;
  if (isSomeChildRemoved) {
    visibleChildren = spliceNewElementsIntoPrevious(current, previous);
  }
  if (exitThenEnter) {
    if (exitingChildren.length) {
      visibleChildren = exitingChildren;
    } else {
      var nextExitingChildren = visibleChildren.filter(function (child) {
        return missingKeys.has(child.key);
      });
      if (nextExitingChildren.length) {
        setExitingChildren(nextExitingChildren);
      }
    }
  }
  if (missingKeys.size) {
    visibleChildren = visibleChildren.map(function (child) {
      var isExiting = missingKeys.has(child.key);
      return wrapChildWithContextProvider(child, {
        appear: true,
        isExiting: isExiting,
        onFinish: isExiting ? function () {
          missingKeys.delete(child.key);
          if (missingKeys.size === 0) {
            setChildren([null, children]);
            setExitingChildren([]);
          }
        } : undefined
      });
    });
  } else {
    visibleChildren = visibleChildren.map(function (child) {
      return wrapChildWithContextProvider(child, defaultContext);
    });
  }
  return visibleChildren;
});
var useExitingPersistence = function useExitingPersistence() {
  return reactExports.useContext(ExitingContext);
};
ExitingPersistence.displayName = 'ExitingPersistence';

/* eslint-disable @repo/internal/react/disallow-unstable-values */

/**
 * Will return a unique id that does not change between renders.
 * Try not use this to render DOM markup (attributes or otherwise)
 * as you will probably not get the same result on the Server vs. Client.
 */
function useUniqueId() {
  var identifier = reactExports.useRef('');
  if (!identifier.current) {
    identifier.current = '_' + (Number(String(Math.random()).slice(2)) + Date.now() + Math.round(performance.now())).toString(36);
  }
  return identifier.current;
}

var StaggeredEntranceContext = /*#__PURE__*/reactExports.createContext(function () {
  return {
    isReady: true,
    delay: 0,
    ref: noop$5
  };
});
var useStaggeredEntrance = function useStaggeredEntrance() {
  var indentifier = useUniqueId();
  var context = reactExports.useContext(StaggeredEntranceContext);
  return context(indentifier);
};

function ownKeys$e(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$d(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$e(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$e(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }

/**
 * These are props that motions should use as their external props for consumers.
 * See [FadeIn](packages/helpers/motion/src/entering/fade-in.tsx) for an example usage.
 */

/**
 * Used to multiply the initial duration for exiting motions.
 */
var EXITING_MOTION_MULTIPLIER = 0.5;

/**
 * This is the base INTERNAL component used for all other entering motions.
 * This does not need Javascript to execute on the client so it will run immediately
 * for any SSR rendered React apps before the JS has executed.
 */
var EnteringMotion = function EnteringMotion(_ref) {
  var children = _ref.children,
    animationTimingFunction = _ref.animationTimingFunction,
    enteringAnimation = _ref.enteringAnimation,
    exitingAnimation = _ref.exitingAnimation,
    isPaused = _ref.isPaused,
    onFinishMotion = _ref.onFinish,
    _ref$duration = _ref.duration,
    duration = _ref$duration === void 0 ? largeDurationMs : _ref$duration;
  var staggered = useStaggeredEntrance();
  var _useExitingPersistenc = useExitingPersistence(),
    isExiting = _useExitingPersistenc.isExiting,
    onExitFinished = _useExitingPersistenc.onFinish,
    appear = _useExitingPersistenc.appear;
  var setTimeout = useSetTimeout();
  var paused = isPaused || !staggered.isReady;
  var delay = isExiting ? 0 : staggered.delay;
  var state = isExiting ? 'exiting' : 'entering';
  var _useState = reactExports.useState(appear),
    _useState2 = _slicedToArray(_useState, 2),
    hasAnimationStyles = _useState2[0],
    setHasAnimationStyles = _useState2[1];
  reactExports.useEffect(function () {
    // Tracking this to prevent changing state on an unmounted component
    var isCancelled = false;
    if (paused) {
      return;
    }

    // On initial mount if elements aren't set to animate on appear, we return early and callback
    if (!appear) {
      onFinishMotion && onFinishMotion(state);
      return;
    }

    // Elements may need animation styles back after initial mount (they could animate out)
    setHasAnimationStyles(true);
    setTimeout(function () {
      if (state === 'exiting') {
        onExitFinished && onExitFinished();
      }
      if (!isCancelled) {
        setHasAnimationStyles(false);
      }
      onFinishMotion && onFinishMotion(state);
    }, isExiting ? duration * EXITING_MOTION_MULTIPLIER : duration + delay);
    return function () {
      isCancelled = true;
    };
    // We ignore this for onFinishMotion as consumers could potentially inline the function
    // which would then trigger this effect every re-render.
    // We want to make it easier for consumers so we go down this path unfortunately.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [onExitFinished, state, isExiting, duration, delay, paused, setTimeout]);
  return /*#__PURE__*/React.createElement(ClassNames, null, function (_ref2) {
    var css = _ref2.css;
    return children({
      ref: staggered.ref,
      className: hasAnimationStyles ? css(_objectSpread$d(_objectSpread$d({}, reduceMotionAsPerUserPreference), {}, {
        animationDelay: "".concat(delay, "ms"),
        animationDuration: "".concat(isExiting ? duration * EXITING_MOTION_MULTIPLIER : duration, "ms"),
        animationFillMode: isExiting ? 'forwards' : 'backwards',
        animationName: "".concat(keyframes(
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
        isExiting ? exitingAnimation || enteringAnimation : enteringAnimation)),
        animationPlayState: paused ? 'paused' : 'running',
        animationTimingFunction: animationTimingFunction(state)
      })) : ''
    }, state);
  });
};

function ownKeys$d(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$c(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$d(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$d(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var directionMotions = {
  proportional: {
    bottom: 'translate3d(0, calc(5% + 4px), 0)',
    left: 'translate3d(calc(-5% - 4px), 0, 0)',
    right: 'translate3d(calc(5% + 4px), 0, 0)',
    top: 'translate3d(0, calc(-5% - 4px), 0)'
  },
  constant: {
    bottom: 'translate3d(0, 4px, 0)',
    left: 'translate3d(-4px, 0, 0)',
    right: 'translate3d(4px, 0, 0)',
    top: 'translate3d(0, -4px, 0)'
  }
};
var invertedDirection = {
  top: 'bottom',
  bottom: 'top',
  left: 'right',
  right: 'left'
};
var fadeInAnimation = function fadeInAnimation(direction) {
  var distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'proportional';
  return {
    from: _objectSpread$c({
      opacity: 0
    }, direction !== undefined && {
      transform: directionMotions[distance][direction]
    }),
    '50%': {
      opacity: 1
    },
    to: {
      transform: direction !== undefined ? 'none' : undefined
    }
  };
};
var fadeOutAnimation = function fadeOutAnimation(direction) {
  var distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'proportional';
  return {
    from: {
      opacity: 1,
      transform: direction !== undefined ? 'translate3d(0, 0, 0)' : undefined
    },
    to: _objectSpread$c({
      opacity: 0
    }, direction !== undefined && {
      transform: directionMotions[distance][direction]
    })
  };
};

/**
 * Props for controlling the behavior of the FadeIn animation
 */

/**
 * __FadeIn__
 *
 * Useful for fading in one or more elements.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/motion/docs/entering-motions)
 */
var FadeIn = function FadeIn(_ref) {
  var children = _ref.children,
    _ref$duration = _ref.duration,
    duration = _ref$duration === void 0 ? largeDurationMs : _ref$duration,
    entranceDirection = _ref.entranceDirection,
    exitDirection = _ref.exitDirection,
    _ref$distance = _ref.distance,
    distance = _ref$distance === void 0 ? 'proportional' : _ref$distance,
    onFinish = _ref.onFinish,
    isPaused = _ref.isPaused;
  var invertedEntranceDirection = entranceDirection && invertedDirection[entranceDirection];
  return /*#__PURE__*/React.createElement(EnteringMotion, {
    duration: duration,
    enteringAnimation: fadeInAnimation(entranceDirection, distance),
    exitingAnimation: fadeOutAnimation(exitDirection || invertedEntranceDirection, distance),
    animationTimingFunction: function animationTimingFunction() {
      return easeInOut;
    },
    onFinish: onFinish,
    isPaused: isPaused
  }, children);
};

var slideInAnimation = function slideInAnimation(from, state, fade) {
  var _ref;
  var initial = state === 'entering' ? '0%' : '100%';
  var end = state === 'entering' ? '100%' : '0%';
  var fromMap = {
    top: 'translate3d(0, -100%, 0)',
    right: 'translate3d(100%, 0, 0)',
    bottom: 'translate3d(0, 100%, 0)',
    left: 'translate3d(-100%, 0, 0)'
  };
  var animateOpacity = fade === 'inout' || fade === 'in' && state === 'entering' || fade === 'out' && state === 'exiting';
  return _ref = {}, _defineProperty$1(_ref, initial, {
    transform: fromMap[from],
    opacity: animateOpacity ? 0 : 1
  }), _defineProperty$1(_ref, end, {
    transform: 'none',
    opacity: 1
  }), _ref;
};
/**
 * __SlideIn__
 *
 * Will slide an element into position, generally used for things that appear from outside of the viewport into view.
 *
 * See [examples](https://atlaskit.atlassian.com/packages/design-system/motion/docs/entering-motions).
 */
var SlideIn = function SlideIn(_ref2) {
  var children = _ref2.children,
    enterFrom = _ref2.enterFrom,
    exitTo = _ref2.exitTo,
    _ref2$fade = _ref2.fade,
    fade = _ref2$fade === void 0 ? 'none' : _ref2$fade,
    _ref2$duration = _ref2.duration,
    duration = _ref2$duration === void 0 ? mediumDurationMs : _ref2$duration,
    isPaused = _ref2.isPaused,
    onFinish = _ref2.onFinish,
    _ref2$animationTiming = _ref2.animationTimingFunction,
    animationTimingFunction = _ref2$animationTiming === void 0 ? function (state) {
      return state === 'entering' ? easeOut : easeIn;
    } : _ref2$animationTiming;
  return /*#__PURE__*/React.createElement(EnteringMotion, {
    duration: duration,
    enteringAnimation: slideInAnimation(enterFrom, 'entering', fade),
    exitingAnimation: slideInAnimation(exitTo || enterFrom, 'exiting', fade),
    animationTimingFunction: animationTimingFunction,
    isPaused: isPaused,
    onFinish: onFinish
  }, children);
};

var portalParentClassName = 'atlaskit-portal-container';
var portalParentSelector = 'body > .atlaskit-portal-container';
var portalClassName = 'atlaskit-portal';

/**
 * Creates a new portal container element with provided z-index and class name 'atlaskit-portal',
 * it is not be attached to any DOM node at this stage.
 * @param {number | string} zIndex - the z-index value of the newly created portal container element
 * @return {number} - The newly created container element
 */
var createContainer = function createContainer(zIndex) {
  var container = document.createElement('div');
  container.className = portalClassName;
  container.style.zIndex = "".concat(zIndex);
  return container;
};

/**
 * Returns document body element
 * @return {number} - The document body element
 */
var getBody = function getBody() {
  return document.body;
};

/**
 * Returns portal parent container. If no container exists already then it creates a new container with class name 'atlaskit-portal-container'
 * @return {Element} - The portal parent container div element
 */
var getPortalParent = function getPortalParent() {
  var parentElement = document.querySelector(portalParentSelector);
  if (!parentElement) {
    var _getBody;
    var parent = document.createElement('div');
    parent.className = portalParentClassName;
    // we are setting display to flex because we want each portal to create a new stacking context
    // See https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context
    parent.style.display = 'flex';
    (_getBody = getBody()) === null || _getBody === void 0 || _getBody.appendChild(parent);
    return parent;
  }
  return parentElement;
};

/**
 * Removes portal container from portal parent container
 *  @param {HTMLDivElement | undefined} container - portal container to be removed from portal parent container
 */
var removePortalContainer = function removePortalContainer(container) {
  getPortalParent().removeChild(container);
};

/**
 * Appends portal container to portal parent container if it hasn't already been done
 *  @param {HTMLDivElement | undefined} container - portal container to be added to portal parent container
 */
var appendPortalContainerIfNotAppended = function appendPortalContainerIfNotAppended(container) {
  if (!container.parentElement) {
    getPortalParent().appendChild(container);
  }
};
var isDocumentDefined = function isDocumentDefined() {
  return document !== undefined;
};
var createAtlaskitPortal = function createAtlaskitPortal(zIndex) {
  //atlaskit-portal div
  if (isDocumentDefined()) {
    var atlaskitportal = document.createElement('div');
    atlaskitportal.className = portalClassName;
    atlaskitportal.style.zIndex = "".concat(zIndex);
    return atlaskitportal;
  }
};
var createPortalParent = function createPortalParent() {
  //atlaskit-portal-container div
  if (isDocumentDefined()) {
    var parentElement = document.querySelector(portalParentSelector);
    if (!parentElement) {
      var _getBody2;
      var parent = document.createElement('div');
      parent.className = portalParentClassName;
      parent.style.display = 'flex';
      (_getBody2 = getBody()) === null || _getBody2 === void 0 || _getBody2.appendChild(parent);
      return parent;
    }
    return parentElement;
  }
};

function InternalPortal(props) {
  var zIndex = props.zIndex,
    children = props.children;
  var container = reactExports.useMemo(function () {
    return createContainer(zIndex);
  }, [zIndex]);

  // This is in the render method instead of useEffect so that
  // the portal will be added to the DOM before the children render.
  // For any further changes, ensure that the container does not have a
  // parent besides the portal parent.
  appendPortalContainerIfNotAppended(container);
  reactExports.useEffect(function () {
    return function () {
      removePortalContainer(container);
    };
  }, [container]);
  return /*#__PURE__*/reactDomExports.createPortal(children, container);
}

/**
 * Needed to supress the SSR warning when running use layout effect on the server.
 */
var useIsomorphicLayoutEffect = typeof window !== 'undefined' ? reactExports.useLayoutEffect : reactExports.useEffect;

function InternalPortalNew(props) {
  var zIndex = props.zIndex,
    children = props.children;
  var _useState = reactExports.useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    atlaskitPortal = _useState2[0],
    setAtlaskitPortal = _useState2[1];
  useIsomorphicLayoutEffect(function () {
    var tempPortalContainer = createAtlaskitPortal(zIndex);
    setAtlaskitPortal(tempPortalContainer);
    var portalParent = createPortalParent();
    if (!tempPortalContainer || !portalParent) {
      return;
    }
    portalParent.appendChild(tempPortalContainer);
    return function () {
      if (tempPortalContainer) {
        portalParent.removeChild(tempPortalContainer);
      }
      setAtlaskitPortal(null);
    };
  }, [zIndex]);
  return atlaskitPortal ? /*#__PURE__*/reactDomExports.createPortal(children, atlaskitPortal) : null;
}

var useIsSubsequentRender = function useIsSubsequentRender(mountStrategy) {
  var _useState = reactExports.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isSubsequentRender = _useState2[0],
    setIsSubsequentRender = _useState2[1];
  var _useState3 = reactExports.useState(function () {
      return mountStrategy === 'layoutEffect' ? useIsomorphicLayoutEffect : reactExports.useEffect;
    }),
    _useState4 = _slicedToArray(_useState3, 1),
    useMountEffect = _useState4[0];
  useMountEffect(function () {
    setIsSubsequentRender(true);
  }, []);
  return isSubsequentRender;
};

var PORTAL_MOUNT_EVENT = 'akPortalMount';
var PORTAL_UNMOUNT_EVENT = 'akPortalUnmount';

var zIndexToName = {
  100: 'card',
  200: 'navigation',
  300: 'dialog',
  400: 'layer',
  500: 'blanket',
  510: 'modal',
  600: 'flag',
  700: 'spotlight',
  9999: 'tooltip'
};

/**
 * return layer name in Atlassian design system corresponding to given z-index
 * @param {number} zIndex - z-index value for which layer name is needed
 * @returns {LayerName | null} - The layer name for given z-index. If layer name is not found then null is returned
 */
var getLayerName = function getLayerName(zIndex) {
  return zIndexToName.hasOwnProperty(zIndex) ? zIndexToName[zIndex] : null;
};

/**
 * Creates a PortalEvent object with given eventName, given zIndex and corresponding layer
 * @param {string} eventName - either of Mount or Unmount event name
 * @param {number} zIndex - z-index value which will be included in the event to be dispatched
 * @returns {PortalEvent} - The newly created PortalEvent object
 */
var getEvent = function getEvent(eventName, zIndex) {
  var detail = {
    layer: getLayerName(Number(zIndex)),
    zIndex: zIndex
  };
  return new CustomEvent(eventName, {
    detail: detail
  });
};

/**
 * Dispatches a custom event on window with given eventName, given zIndex and corresponding layer
 * @param {string} eventName - either of Mount or Unmount event name
 * @param {number} zIndex - z-index value which will be included in the event to be dispatched
 */
function firePortalEvent(eventName, zIndex) {
  var event = getEvent(eventName, zIndex);
  window.dispatchEvent(event);
}

var useFirePortalEvent = function useFirePortalEvent(zIndex) {
  var zIndexNumber = Number(zIndex);
  reactExports.useEffect(function () {
    firePortalEvent(PORTAL_MOUNT_EVENT, zIndexNumber);
    return function () {
      firePortalEvent(PORTAL_UNMOUNT_EVENT, zIndexNumber);
    };
  }, [zIndexNumber]);
};

function Portal(_ref) {
  var _ref$zIndex = _ref.zIndex,
    zIndex = _ref$zIndex === void 0 ? 0 : _ref$zIndex,
    children = _ref.children,
    _ref$mountStrategy = _ref.mountStrategy,
    mountStrategy = _ref$mountStrategy === void 0 ? 'effect' : _ref$mountStrategy;
  var isSubsequentRender = useIsSubsequentRender(mountStrategy);
  useFirePortalEvent(zIndex);

  // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
  return !fg('dsp-19516-design-system-portal-logic-update') ? isSubsequentRender ? /*#__PURE__*/React.createElement(InternalPortal, {
    zIndex: zIndex
  }, children) : null : /*#__PURE__*/React.createElement(InternalPortalNew, {
    zIndex: zIndex
  }, children);
}

var gridSize = gridSize$2();
var flagWidth = gridSize * 50;
var flagAnimationTime = 400;
var defaultFlagGroupContext = {
  onDismissed: noop$5,
  isDismissAllowed: false
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var FlagGroupContext = /*#__PURE__*/reactExports.createContext(defaultFlagGroupContext);

// eslint-disable-next-line @repo/internal/react/require-jsdoc
function useFlagGroup() {
  return reactExports.useContext(FlagGroupContext);
}

// transition: none is set on first-of-type to prevent a bug in Firefox
// that causes a broken transition
var baseStyles$1 = css$2({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  width: flagWidth,
  position: 'absolute',
  insetBlockEnd: 0,
  transition: "transform ".concat(flagAnimationTime, "ms ease-in-out"),
  // TODO: Use new breakpoints
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles
  '@media (max-width: 560px)': {
    width: '100vw'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':first-of-type': {
    transform: "translate(0,0)",
    transition: 'none'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':nth-of-type(n + 2)': {
    animationDuration: '0ms',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    transform: "translateX(0) translateY(100%) translateY(".concat(2 * gridSize, "px)")
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':nth-of-type(1)': {
    zIndex: 5
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':nth-of-type(2)': {
    zIndex: 4
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '&:nth-of-type(n + 4)': {
    visibility: 'hidden'
  }
});

// Transform needed to push up while 1st flag is leaving
// Exiting time should match the exiting time of motion so is halved
var dismissAllowedStyles = css$2({
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '&& + *': {
    transform: "translate(0, 0)",
    transitionDuration: "".concat(flagAnimationTime / 2, "ms")
  }
});
var flagGroupContainerStyles = css$2({
  position: 'fixed',
  zIndex: 'flag',
  insetBlockEnd: "var(--ds-space-600, 48px)",
  insetInlineStart: "var(--ds-space-1000, 80px)",
  // TODO: Use new breakpoints
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles
  '@media (max-width: 560px)': {
    insetBlockEnd: 0,
    insetInlineStart: 0
  }
});

/**
 * __Flag group__
 *
 * A flag group is used to group a set of related flags, with entry and exit animations.
 *
 * - [Examples](https://atlassian.design/components/flag/flag-group/examples)
 * - [Code](https://atlassian.design/components/flag/flag-group/code)
 */
var FlagGroup = function FlagGroup(props) {
  var id = props.id,
    _props$label = props.label,
    label = _props$label === void 0 ? 'Flag notifications' : _props$label,
    _props$labelTag = props.labelTag,
    LabelTag = _props$labelTag === void 0 ? 'h2' : _props$labelTag,
    _props$shouldRenderTo = props.shouldRenderToParent,
    shouldRenderToParent = _props$shouldRenderTo === void 0 ? false : _props$shouldRenderTo,
    children = props.children,
    _props$onDismissed = props.onDismissed,
    onDismissed = _props$onDismissed === void 0 ? noop$5 : _props$onDismissed;
  var hasFlags = Array.isArray(children) ? children.length > 0 : Boolean(children);
  var dismissFlagContext = reactExports.useMemo(function () {
    return {
      onDismissed: onDismissed,
      isDismissAllowed: true
    };
  }, [onDismissed]);
  var renderChildren = function renderChildren() {
    return children && _typeof(children) === 'object' ? reactExports.Children.map(children, function (flag, index) {
      var isDismissAllowed = index === 0;
      return jsx(SlideIn, {
        enterFrom: "left",
        fade: "inout",
        duration: flagAnimationTime,
        animationTimingFunction: function animationTimingFunction() {
          return easeIn;
        }
      }, function (_ref) {
        var className = _ref.className,
          ref = _ref.ref;
        return jsx("div", {
          css: [baseStyles$1, isDismissAllowed && dismissAllowedStyles]
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
          ,
          className: className,
          ref: ref
        }, jsx(FlagGroupContext.Provider, {
          value:
          // Only the first flag should be able to be dismissed.
          isDismissAllowed ? dismissFlagContext : defaultFlagGroupContext
        }, flag));
      });
    }) : false;
  };
  var flags = jsx("div", {
    id: id,
    css: flagGroupContainerStyles
  }, hasFlags ? jsx(VisuallyHidden, null, jsx(LabelTag, null, label)) : null, jsx(ExitingPersistence, {
    appear: false
  }, renderChildren()));
  return shouldRenderToParent ? flags : jsx(Portal, {
    zIndex: layers.flag()
  }, flags);
};

var expanderStyles = xcss({
  width: '100%'
});
var containerStyles$1 = xcss({
  transition: "max-height 0.3s"
});
var Expander = function Expander(_ref) {
  var children = _ref.children,
    isExpanded = _ref.isExpanded,
    testId = _ref.testId;
  // Need to always render the ExpanderInternal otherwise the
  // reveal transition doesn't happen. We can't use CSS animation for
  // the the reveal because we don't know the height of the content.

  return /*#__PURE__*/React.createElement(Box, {
    xcss: containerStyles$1,
    style: {
      maxHeight: isExpanded ? 150 : 0,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      flex: '1 1 100%',
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      minWidth: 0
    },
    "aria-hidden": !isExpanded,
    testId: testId && "".concat(testId, "-expander")
  }, /*#__PURE__*/React.createElement(ExitingPersistence, {
    appear: true
  }, isExpanded && /*#__PURE__*/React.createElement(FadeIn, null, function (props) {
    return /*#__PURE__*/React.createElement(Box, _extends({
      xcss: expanderStyles
    }, props), /*#__PURE__*/React.createElement(Stack, {
      space: "space.100"
    }, children));
  })));
};

var chevronDown$3 = {};

var sizes = {
  small: '16px',
  medium: '24px',
  large: '32px',
  xlarge: '48px'
};
var dimensions$1 = {
  small: {
    width: sizes.small,
    height: sizes.small
  },
  medium: {
    width: sizes.medium,
    height: sizes.medium
  },
  large: {
    width: sizes.large,
    height: sizes.large
  },
  xlarge: {
    width: sizes.xlarge,
    height: sizes.xlarge
  }
};

var commonSVGStyles$1 = {
  overflow: 'hidden',
  pointerEvents: 'none',
  /**
   * Stop-color doesn't properly apply in chrome when the inherited/current color changes.
   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS
   * rule) and then override it with currentColor for the color changes to be picked up.
   */
  stop: {
    stopColor: 'currentColor'
  }
};

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
css$2(dimensions$1.small);
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
css$2(dimensions$1.medium);
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
css$2(dimensions$1.large);
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
css$2(dimensions$1.xlarge);

/**
 * Returns the width of the icon's parent span. This function has
 * special behaviour to deal with icon-file-type specifically.
 *
 * The reality is the SVG still has its own dimensions, so this is
 * a secondary fallback which in 95% of cases is not required.
 * It's only really being kept to maintain backward compatability.
 */
var getIconSize = function getIconSize(_ref) {
  var width = _ref.width,
    height = _ref.height,
    size = _ref.size;
  if (width && height) {
    return {
      width: width,
      height: height
    };
  }
  if (size) {
    return dimensions$1[size];
  }
  return undefined;
};

var getBackground = function getBackground() {
  return "var(--ds-surface, #FFFFFF)";
};

function ownKeys$c(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$b(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$c(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$c(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }

/**
 * We are hiding these props from consumers as they're used to
 * hack around icon sizing specifically for icon-file-type.
 */

var iconStyles$2 = css$2({
  display: 'inline-block',
  flexShrink: 0,
  lineHeight: 1,
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '> svg': _objectSpread$b(_objectSpread$b({}, commonSVGStyles$1), {}, {
    maxWidth: '100%',
    maxHeight: '100%',
    color: 'var(--icon-primary-color)',
    fill: 'var(--icon-secondary-color)',
    verticalAlign: 'bottom'
  })
});
/**
 * For windows high contrast mode
 */
var baseHcmStyles$1 = css$2({
  '@media screen and (forced-colors: active)': {
    // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '> svg': {
      filter: 'grayscale(1)',
      '--icon-primary-color': 'CanvasText',
      // foreground
      '--icon-secondary-color': 'Canvas' // background
    }
  }
});
var primaryEqualsSecondaryHcmStyles = css$2({
  '@media screen and (forced-colors: active)': {
    // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '> svg': {
      // if the primaryColor is the same as the secondaryColor we
      // set the --icon-primary-color to Canvas
      // this is usually to convey state i.e. Checkbox checked -> not checked
      '--icon-primary-color': 'Canvas' // foreground
    }
  }
});
var secondaryTransparentHcmStyles = css$2({
  '@media screen and (forced-colors: active)': {
    // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '> svg': {
      '--icon-secondary-color': 'transparent' // background
    }
  }
});

/**
 * __Icon__
 *
 * An icon is used as a visual representation of common actions and commands to provide context.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
var Icon$2 = /*#__PURE__*/reactExports.memo(function Icon(props) {
  var _ref = props,
    Glyph = _ref.glyph,
    dangerouslySetGlyph = _ref.dangerouslySetGlyph,
    _ref$primaryColor = _ref.primaryColor,
    primaryColor = _ref$primaryColor === void 0 ? 'currentColor' : _ref$primaryColor,
    secondaryColor = _ref.secondaryColor,
    size = _ref.size,
    testId = _ref.testId,
    label = _ref.label,
    width = _ref.width,
    height = _ref.height,
    UNSAFE_margin = _ref.UNSAFE_margin;
  var glyphProps = dangerouslySetGlyph ? {
    dangerouslySetInnerHTML: {
      __html: dangerouslySetGlyph
    }
  } : {
    children: Glyph ? jsx(Glyph, {
      role: "presentation"
    }) : null
  };
  var dimensions = getIconSize({
    width: width,
    height: height,
    size: size
  });
  return jsx("span", _extends({
    "data-testid": testId,
    "data-vc": "icon-".concat(testId),
    role: label ? 'img' : undefined,
    "aria-label": label ? label : undefined,
    "aria-hidden": label ? undefined : true
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: _objectSpread$b({
      '--icon-primary-color': primaryColor,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      '--icon-secondary-color': secondaryColor || getBackground()
    }, UNSAFE_margin ? {
      margin: UNSAFE_margin
    } : {})
  }, glyphProps, {
    css: [iconStyles$2, baseHcmStyles$1, primaryColor === secondaryColor && primaryEqualsSecondaryHcmStyles, secondaryColor === 'transparent' && secondaryTransparentHcmStyles,
    // NB: This can be resolved if this component, composes base SVG / and/or skeleton
    // We could then simplify how common styles are dealt with simply by encapsulating them
    // at their appropriate level and/or having a singular approach to css variables in the package
    dimensions &&
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    css$2({
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      width: dimensions.width,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      height: dimensions.height,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      '> svg': dimensions
    })]
  }));
});
var LegacyIcon = Icon$2;

var _excluded$a = ["dangerouslySetGlyph"];
var sizesEligibleForNewIcons = ['small', 'medium'];

/**
 * `IconFacade` is a component that conditionally renders either a new or legacy icon based on a feature flag.
 *
 * @param {IconFacadeProps} props - The props for the IconFacade component. Includes properties for configuring
 * the icon such as `size`, `spacing`, `primaryColor`, `iconType`, and potentially others depending on the icon.
 * `dangerouslySetGlyph` is a prop specific to the legacy icon component for setting the icon glyph directly.
 * @returns A React element representing either the new or legacy icon based on the feature flag and icon size.
 */
var IconFacade = /*#__PURE__*/reactExports.memo(function IconFacade(_ref) {
  var _props$size;
  var dangerouslySetGlyph = _ref.dangerouslySetGlyph,
    props = _objectWithoutProperties(_ref, _excluded$a);
  var NewIcon = props.newIcon;

  // By default, the icon size will be medium and spacing will be none for small icons
  var size = (_props$size = props.size) !== null && _props$size !== void 0 ? _props$size : 'medium';
  var spacing = size === 'small' ? 'none' : 'spacious';
  var useNewIcon = !props.isFacadeDisabled &&
  // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
  fg('platform-visual-refresh-icons-legacy-facade') && sizesEligibleForNewIcons.includes(size);
  if (useNewIcon && NewIcon) {
    return /*#__PURE__*/React.createElement(NewIcon, _extends({}, props, {
      spacing: spacing,
      color: props.primaryColor || 'currentColor',
      type: props.iconType
    }));
  }
  return /*#__PURE__*/React.createElement(LegacyIcon, _extends({
    dangerouslySetGlyph: dangerouslySetGlyph
  }, props));
});

var base = /*#__PURE__*/Object.freeze({
	__proto__: null,
	Icon: Icon$2,
	UNSAFE_IconFacade: IconFacade,
	default: LegacyIcon
});

var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(base);

var chevronDown$2 = {};

/**
 * @jsxRuntime classic
 * @jsx jsx
 */

/**
 * We are hiding this props from consumers as it's reserved
 * for use by Icon Tile.
 */

var commonSVGStyles = css$2({
  overflow: 'hidden',
  pointerEvents: 'none',
  /**
   * Stop-color doesn't properly apply in chrome when the inherited/current color changes.
   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS
   * rule) and then override it with currentColor for the color changes to be picked up.
   */
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  stop: {
    stopColor: 'currentColor'
  }
});
var svgStyles = css$2({
  color: 'currentColor',
  verticalAlign: 'bottom'
});
var iconStyles$1 = css$2({
  display: 'inline-block',
  boxSizing: 'border-box',
  flexShrink: 0,
  lineHeight: 1,
  paddingInlineEnd: 'var(--ds--button--new-icon-padding-end, 0)',
  paddingInlineStart: 'var(--ds--button--new-icon-padding-start, 0)'
});
var utilityIconStyles = css$2({
  lineHeight: "var(--ds-space-150, 12px)"
});
var scaleStyles = css$2({
  width: 'inherit',
  height: 'inherit'
});

/**
 * For windows high contrast mode
 */
var baseHcmStyles = css$2({
  '@media screen and (forced-colors: active)': {
    color: 'CanvasText',
    filter: 'grayscale(1)'
  }
});
var sizeMap = {
  scale: css$2({
    width: 'inherit',
    height: 'inherit'
  }),
  utility: css$2({
    width: "var(--ds-space-150, 12px)",
    height: "var(--ds-space-150, 12px)"
  }),
  none: css$2({
    width: "var(--ds-space-200, 16px)",
    height: "var(--ds-space-200, 16px)"
  }),
  spacious: css$2({
    width: "var(--ds-space-300, 24px)",
    height: "var(--ds-space-300, 24px)"
  })
};
var baseSizeMap = {
  global: 16,
  utility: 12
};

/**
 * __Icon__
 *
 * An icon is used as a visual representation of common actions and commands to provide context.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
var Icon = /*#__PURE__*/reactExports.memo(function Icon(props) {
  var _ref = props,
    providedColor = _ref.color,
    _ref$spacing = _ref.spacing,
    providedSpacing = _ref$spacing === void 0 ? 'none' : _ref$spacing,
    testId = _ref.testId,
    label = _ref.label,
    LEGACY_primaryColor = _ref.LEGACY_primaryColor,
    LEGACY_secondaryColor = _ref.LEGACY_secondaryColor,
    LEGACY_size = _ref.LEGACY_size,
    FallbackIcon = _ref.LEGACY_fallbackIcon,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'global' : _ref$type,
    dangerouslySetGlyph = _ref.dangerouslySetGlyph,
    shouldScale = _ref.shouldScale,
    LEGACY_margin = _ref.LEGACY_margin;
  var fallbackColor = "var(--ds-icon, #44546F)";
  if (fg('platform-design-system-new-icon-default-color') || fg('platform-design-system-new-icon-default-color-2')) {
    fallbackColor = 'currentColor';
  }
  var color = providedColor !== null && providedColor !== void 0 ? providedColor : fallbackColor;
  var dangerouslySetInnerHTML = dangerouslySetGlyph ? {
    __html: dangerouslySetGlyph
  } : undefined;

  // Fall back to old icon
  if (FallbackIcon && !fg('platform.design-system-team.enable-new-icons')) {
    // parse out unnecessary props
    return jsx(FallbackIcon, {
      primaryColor: LEGACY_primaryColor !== null && LEGACY_primaryColor !== void 0 ? LEGACY_primaryColor : color,
      secondaryColor: LEGACY_secondaryColor,
      size: LEGACY_size,
      label: label,
      testId: testId
      // @ts-ignore-next-line
      ,
      UNSAFE_margin: LEGACY_margin
    });
  }

  // Utility icons don't have 'spacing' as a type, but in case it's provided, we default to 'none'
  var spacing = type === 'utility' ? 'none' : providedSpacing;
  var baseSize = baseSizeMap[type];
  var size = type === 'utility' ? 'utility' : shouldScale ? 'scale' : spacing;
  var viewBoxPadding = spacing === 'spacious' ? 4 : 0;
  var viewBoxSize = baseSize + 2 * viewBoxPadding;

  // Workaround for the transparency in our disabled icon token.
  // Because we have multiple strokes in icons, opacities overlap
  // This filter has an impact on render performance, but this is
  // acceptable as icons aren't commonly disabled en-masse
  var iconColor = color;
  if (dangerouslySetInnerHTML && color === "var(--ds-icon-disabled, #091E424F)") {
    dangerouslySetInnerHTML.__html = "\n<filter id=\"ds-newIconOpacityFilter\">\n  <feFlood flood-color=\"var(--ds-icon-disabled)\" />\n  <feComposite in2=\"SourceGraphic\" operator=\"in\" />\n</filter>\n<g filter=\"url(#ds-newIconOpacityFilter)\">\n  ".concat(dangerouslySetInnerHTML.__html, "\n</g>");
    iconColor = "var(--ds-icon, #44546F)";
  }
  return jsx("span", {
    "data-testid": testId,
    role: label ? 'img' : undefined,
    "aria-label": label ? label : undefined,
    "aria-hidden": label ? undefined : true,
    style: {
      color: iconColor
    },
    css: [iconStyles$1, baseHcmStyles, shouldScale && scaleStyles, type === 'utility' && utilityIconStyles]
  }, jsx("svg", {
    fill: "none"
    // Adjusting the viewBox allows the icon padding to scale with the contents of the SVG, which
    // we want for Icon Tile
    ,
    viewBox: "".concat(0 - viewBoxPadding, " ").concat(0 - viewBoxPadding, " ").concat(viewBoxSize, " ").concat(viewBoxSize),
    role: "presentation",
    css: [commonSVGStyles, svgStyles, sizeMap[size]],
    dangerouslySetInnerHTML: dangerouslySetInnerHTML
  }));
});
var Icon$1 = Icon;

var baseNew = /*#__PURE__*/Object.freeze({
	__proto__: null,
	Icon: Icon,
	default: Icon$1
});

var require$$1 = /*@__PURE__*/getAugmentedNamespace(baseNew);

/**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::3c58509c5f883b07cf4640f47a045782>>
 * @codegenCommand yarn build:icon-glyphs
 */

Object.defineProperty(chevronDown$2, "__esModule", {
  value: true
});
chevronDown$2.default = void 0;
var _react$m = _interopRequireDefault$m(reactExports);
var _UNSAFE_baseNew$9 = _interopRequireDefault$m(require$$1);
function _interopRequireDefault$m(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * ⚠️ EXPERIMENTAL ⚠️ - New icons are in alpha - and subject to change or removal in future minor or patch releases.
 * Please reach out in #icon-contributions before using these in production.
 *
 * Icon: "ChevronDown".
 * Category: utility
 * Location: @atlaskit/icon
 * Usage guidance: Reserved for dropdown menus, selects, accordions, and expands.
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
const ChevronDownIcon$2 = props => /*#__PURE__*/_react$m.default.createElement(_UNSAFE_baseNew$9.default, Object.assign({
  dangerouslySetGlyph: `<path stroke="currentcolor" stroke-linejoin="round" stroke-width="1.5" d="M10.5 4.5 8.25 6.75 6 9 3.75 6.75 1.5 4.5"/>`,
  type: 'utility'
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));
ChevronDownIcon$2.displayName = 'ChevronDownIcon';
chevronDown$2.default = ChevronDownIcon$2;

Object.defineProperty(chevronDown$3, "__esModule", {
  value: true
});
var default_1$b = chevronDown$3.default = void 0;
var _react$l = _interopRequireDefault$l(reactExports);
var _base$8 = require$$1$1;
var _chevronDown$2 = _interopRequireDefault$l(chevronDown$2);
function _interopRequireDefault$l(e) { return e && e.__esModule ? e : { default: e }; }
const HipchatChevronDownIcon = props => /*#__PURE__*/_react$l.default.createElement(_base$8.UNSAFE_IconFacade, Object.assign({
  dangerouslySetGlyph: `<svg width="24" height="24" viewBox="0 0 24 24" role="presentation"><path fill="currentcolor" d="M6.744 8.744a1.053 1.053 0 0 0 0 1.49l4.547 4.557a1 1 0 0 0 1.416 0l4.55-4.558a1.051 1.051 0 1 0-1.488-1.488l-3.77 3.776-3.768-3.776a1.05 1.05 0 0 0-1.487 0"/></svg>`
}, props, {
  newIcon: _chevronDown$2.default,
  iconType: "utility"
}));
HipchatChevronDownIcon.displayName = 'HipchatChevronDownIcon';
default_1$b = chevronDown$3.default = HipchatChevronDownIcon;

var chevronUp$1 = {};

var chevronUp = {};

/**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::f998c57d427ae10203b04c2186c5e29c>>
 * @codegenCommand yarn build:icon-glyphs
 */

Object.defineProperty(chevronUp, "__esModule", {
  value: true
});
chevronUp.default = void 0;
var _react$k = _interopRequireDefault$k(reactExports);
var _UNSAFE_baseNew$8 = _interopRequireDefault$k(require$$1);
function _interopRequireDefault$k(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * ⚠️ EXPERIMENTAL ⚠️ - New icons are in alpha - and subject to change or removal in future minor or patch releases.
 * Please reach out in #icon-contributions before using these in production.
 *
 * Icon: "ChevronUp".
 * Category: utility
 * Location: @atlaskit/icon
 * Usage guidance: Reserved for accordions.
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
const ChevronUpIcon = props => /*#__PURE__*/_react$k.default.createElement(_UNSAFE_baseNew$8.default, Object.assign({
  dangerouslySetGlyph: `<path stroke="currentcolor" stroke-linejoin="round" stroke-width="1.5" d="M10.5 7.5 6 3 1.5 7.5"/>`,
  type: 'utility'
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));
ChevronUpIcon.displayName = 'ChevronUpIcon';
chevronUp.default = ChevronUpIcon;

Object.defineProperty(chevronUp$1, "__esModule", {
  value: true
});
var default_1$a = chevronUp$1.default = void 0;
var _react$j = _interopRequireDefault$j(reactExports);
var _base$7 = require$$1$1;
var _chevronUp = _interopRequireDefault$j(chevronUp);
function _interopRequireDefault$j(e) { return e && e.__esModule ? e : { default: e }; }
const HipchatChevronUpIcon = props => /*#__PURE__*/_react$j.default.createElement(_base$7.UNSAFE_IconFacade, Object.assign({
  dangerouslySetGlyph: `<svg width="24" height="24" viewBox="0 0 24 24" role="presentation"><path fill="currentcolor" fill-rule="evenodd" d="m11.294 8.708-4.549 4.559a1.051 1.051 0 1 0 1.486 1.488l.001-.001 3.77-3.776 3.768 3.776a1.05 1.05 0 0 0 1.486.001h.001a1.054 1.054 0 0 0 .001-1.489L12.71 8.708a1 1 0 0 0-1.415-.001"/></svg>`
}, props, {
  newIcon: _chevronUp.default,
  iconType: "utility"
}));
HipchatChevronUpIcon.displayName = 'HipchatChevronUpIcon';
default_1$a = chevronUp$1.default = HipchatChevronUpIcon;

var cross$1 = {};

var close$1 = {};

/**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::03f86cbf4091cea96938f1feb145f315>>
 * @codegenCommand yarn build:icon-glyphs
 */

Object.defineProperty(close$1, "__esModule", {
  value: true
});
close$1.default = void 0;
var _react$i = _interopRequireDefault$i(reactExports);
var _UNSAFE_baseNew$7 = _interopRequireDefault$i(require$$1);
function _interopRequireDefault$i(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * ⚠️ EXPERIMENTAL ⚠️ - New icons are in alpha - and subject to change or removal in future minor or patch releases.
 * Please reach out in #icon-contributions before using these in production.
 *
 * Icon: "Close".
 * Category: single-purpose
 * Location: @atlaskit/icon
 * Usage guidance: Single purpose - Reserved for closing an element.
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
const CloseIcon = props => /*#__PURE__*/_react$i.default.createElement(_UNSAFE_baseNew$7.default, Object.assign({
  dangerouslySetGlyph: `<path stroke="currentcolor" stroke-linejoin="round" stroke-width="1.5" d="M2.5 13.5 8 8m5.5-5.5L8 8m0 0L2.5 2.5M8 8l5.5 5.5"/>`
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));
CloseIcon.displayName = 'CloseIcon';
close$1.default = CloseIcon;

Object.defineProperty(cross$1, "__esModule", {
  value: true
});
var default_1$9 = cross$1.default = void 0;
var _react$h = _interopRequireDefault$h(reactExports);
var _base$6 = require$$1$1;
var _close$2 = _interopRequireDefault$h(close$1);
function _interopRequireDefault$h(e) { return e && e.__esModule ? e : { default: e }; }
const CrossIcon$3 = props => /*#__PURE__*/_react$h.default.createElement(_base$6.UNSAFE_IconFacade, Object.assign({
  dangerouslySetGlyph: `<svg width="24" height="24" viewBox="0 0 24 24" role="presentation"><path fill="currentcolor" d="M12 10.586 6.707 5.293a1 1 0 0 0-1.414 1.414L10.586 12l-5.293 5.293a1 1 0 0 0 1.414 1.414L12 13.414l5.293 5.293a1 1 0 0 0 1.414-1.414L13.414 12l5.293-5.293a1 1 0 1 0-1.414-1.414z"/></svg>`
}, props, {
  newIcon: _close$2.default
}));
CrossIcon$3.displayName = 'CrossIcon';
default_1$9 = cross$1.default = CrossIcon$3;

var buttonStyles$1 = xcss({
  display: 'flex',
  width: '24px',
  height: '24px',
  padding: 'space.0',
  alignItems: 'center',
  justifyContent: 'center',
  flex: '0 0 auto',
  background: 'none',
  borderStyle: 'none',
  cursor: 'pointer',
  whiteSpace: 'nowrap'
});
var DismissButtonComponent = function DismissButtonComponent(_ref) {
  var appearance = _ref.appearance,
    onClick = _ref.onClick,
    isBold = _ref.isBold,
    isExpanded = _ref.isExpanded,
    testId = _ref.testId;
  var ButtonIcon = default_1$9;
  var buttonLabel = 'Dismiss';
  var size = 'small';
  var buttonTestId = testId && "".concat(testId, "-dismiss");
  if (isBold) {
    ButtonIcon = isExpanded ? default_1$a : default_1$b;
    buttonLabel = isExpanded ? 'Collapse' : 'Expand';
    size = 'medium';
    buttonTestId = testId && "".concat(testId, "-toggle");
  }
  return /*#__PURE__*/React.createElement(Pressable, {
    xcss: buttonStyles$1,
    onClick: onClick,
    "aria-expanded": isBold ? isExpanded : undefined,
    testId: buttonTestId
  }, /*#__PURE__*/React.createElement(ButtonIcon, {
    label: buttonLabel,
    size: size,
    primaryColor: flagTextColorToken[appearance]
  }));
};
var DismissButton = /*#__PURE__*/reactExports.memo(DismissButtonComponent);

function ownKeys$b(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$a(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$b(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$b(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var CSS_VAR_ICON_COLOR = '--flag-icon-color';

// For cases where a single word is longer than the container (e.g. filenames)
var overflowWrapStyles = xcss({
  overflowWrap: 'anywhere'
});
var descriptionStyles = css$2({
  maxHeight: 100,
  // height is defined as 5 lines maximum by design
  overflow: 'auto',
  overflowWrap: 'anywhere' // For cases where a single word is longer than the container (e.g. filenames)
});
var iconWrapperStyles$1 = css$2({
  display: 'flex',
  alignItems: 'start',
  flexShrink: 0,
  color: "var(".concat(CSS_VAR_ICON_COLOR, ")")
});
var flagStyles = xcss({
  boxShadow: 'elevation.shadow.overlay',
  borderRadius: 'border.radius.100',
  overflow: 'hidden',
  zIndex: 'flag',
  width: '100%',
  transition: 'background-color 200ms'
});
var flagWrapperStyles = css$2({
  width: '100%'
});
var analyticsAttributes$1 = {
  componentName: 'flag',
  packageName: "@atlaskit/flag",
  packageVersion: "15.8.3"
};
var transitionStyles = css$2({
  flexGrow: 1,
  transition: "gap 0.3s"
});

/**
 * __Flag__
 *
 * A flag is used for confirmations, alerts, and acknowledgments that require minimal user interaction,
 * often displayed using a flag group.
 *
 * - [Examples](https://atlassian.design/components/flag/examples)
 * - [Code](https://atlassian.design/components/flag/code)
 * - [Usage](https://atlassian.design/components/flag/usage)
 */
var Flag = function Flag(props) {
  var _props$actions = props.actions,
    actions = _props$actions === void 0 ? [] : _props$actions,
    _props$appearance = props.appearance,
    appearance = _props$appearance === void 0 ? DEFAULT_APPEARANCE : _props$appearance,
    icon = props.icon,
    title = props.title,
    description = props.description,
    linkComponent = props.linkComponent,
    onMouseOver = props.onMouseOver,
    _props$onFocus = props.onFocus,
    onFocus = _props$onFocus === void 0 ? noop$5 : _props$onFocus,
    onMouseOut = props.onMouseOut,
    _props$onBlur = props.onBlur,
    onBlur = _props$onBlur === void 0 ? noop$5 : _props$onBlur,
    _props$onDismissed = props.onDismissed,
    onDismissedProp = _props$onDismissed === void 0 ? noop$5 : _props$onDismissed,
    testId = props.testId,
    id = props.id,
    analyticsContext = props.analyticsContext,
    delayAnnouncement = props.delayAnnouncement,
    _props$headingLevel = props.headingLevel,
    headingLevel = _props$headingLevel === void 0 ? 2 : _props$headingLevel;
  var _useState = reactExports.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isDelayToAnnounce = _useState2[0],
    setIsDelayToAnnounce = _useState2[1];
  var _useFlagGroup = useFlagGroup(),
    onDismissedFromFlagGroup = _useFlagGroup.onDismissed,
    isDismissAllowed = _useFlagGroup.isDismissAllowed;
  var onDismissed = reactExports.useCallback(function (id, analyticsEvent) {
    onDismissedProp(id, analyticsEvent);
    onDismissedFromFlagGroup(id, analyticsEvent);
  }, [onDismissedProp, onDismissedFromFlagGroup]);
  var _useState3 = reactExports.useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isExpanded = _useState4[0],
    setIsExpanded = _useState4[1];
  var onDismissedAnalytics = usePlatformLeafEventHandler(_objectSpread$a({
    fn: onDismissed,
    action: 'dismissed',
    analyticsData: analyticsContext
  }, analyticsAttributes$1));
  var isBold = appearance !== DEFAULT_APPEARANCE;
  var toggleExpand = reactExports.useCallback(function () {
    setIsExpanded(function (previous) {
      return !previous;
    });
  }, []);
  var buttonActionCallback = reactExports.useCallback(function () {
    if (isDismissAllowed) {
      onDismissedAnalytics(id);
    }
  }, [onDismissedAnalytics, id, isDismissAllowed]);
  reactExports.useEffect(function () {
    // If buttons are removed as a prop, update isExpanded to be false
    if (isBold && isExpanded && !description && !actions.length) {
      setIsExpanded(false);
    }
  }, [actions.length, description, isBold, isExpanded]);
  reactExports.useEffect(function () {
    if (!delayAnnouncement) {
      return;
    }
    setTimeout(function () {
      setIsDelayToAnnounce(true);
    }, delayAnnouncement);
  }, [delayAnnouncement]);
  var onFocusAnalytics = usePlatformLeafEventHandler(_objectSpread$a({
    fn: onFocus,
    action: 'focused',
    analyticsData: analyticsContext
  }, analyticsAttributes$1));
  var onBlurAnalytics = usePlatformLeafEventHandler(_objectSpread$a({
    fn: onBlur,
    action: 'blurred',
    analyticsData: analyticsContext
  }, analyticsAttributes$1));
  var autoDismissProps = {
    onMouseOver: onMouseOver,
    onFocus: onFocusAnalytics,
    onMouseOut: onMouseOut,
    onBlur: onBlurAnalytics
  };
  var textColor = flagTextColor[appearance];
  var iconColor = flagIconColor[appearance];
  var isDismissable = isBold || isDismissAllowed;
  var shouldRenderGap = !isBold && (description || actions.length) || isExpanded;
  // when delayAnnouncement is available we will use a hidden content for announcement
  var delayedAnnouncement = delayAnnouncement ? jsx(VisuallyHidden, {
    role: "alert"
  }, title, description) : undefined;
  return jsx("div", _extends({
    role: delayAnnouncement ? undefined : 'alert',
    css: flagWrapperStyles,
    "data-testid": testId
  }, autoDismissProps), jsx(Box, {
    backgroundColor: flagBackgroundColor[appearance],
    padding: "space.200",
    xcss: flagStyles
  }, jsx(Inline, {
    alignBlock: "stretch",
    space: "space.200"
  }, jsx("div", {
    css: iconWrapperStyles$1
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    ,
    style: _defineProperty$1({}, CSS_VAR_ICON_COLOR, iconColor)
  }, icon), jsx("span", {
    css: transitionStyles
  }, jsx(Stack, {
    space: shouldRenderGap ? 'space.100' : 'space.0' // Gap exists even when not expanded due to Expander internals always being in the DOM
  }, isDelayToAnnounce && delayedAnnouncement, jsx(Inline, {
    alignBlock: "stretch",
    space: "space.100",
    spread: "space-between"
  }, jsx(Box, {
    paddingBlockStart: "space.050",
    paddingBlockEnd: "space.025",
    xcss: overflowWrapStyles
  }, jsx(Heading, {
    as: "h".concat(headingLevel),
    size: "xsmall",
    color: textColor
  }, title)), isDismissable ? !(isBold && !description && !actions.length) && jsx(DismissButton, {
    testId: testId,
    appearance: appearance,
    isBold: isBold,
    isExpanded: isExpanded,
    onClick: isBold ? toggleExpand : buttonActionCallback
  }) : null), jsx(Expander, {
    isExpanded: !isBold || isExpanded,
    testId: testId
  }, description && jsx("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    style: {
      color: flagTextColorToken[appearance]
    },
    css: descriptionStyles,
    "data-testid": testId && "".concat(testId, "-description")
  }, description), jsx(FlagActions, {
    actions: actions,
    appearance: appearance,
    linkComponent: linkComponent,
    testId: testId
  })))))));
};

var packageName$1 = "@atlaskit/flag";
var packageVersion$1 = "15.8.3";
var AUTO_DISMISS_SECONDS = 8;

/**
 * __Auto dismiss flag__
 *
 * An auto dismiss flag is dismissed automatically after eight seconds.
 *
 * - [Examples](https://atlassian.design/components/flag/auto-dismiss-flag/examples)
 * - [Code](https://atlassian.design/components/flag/auto-dismiss-flag/code)
 */
var AutoDismissFlag = function AutoDismissFlag(props) {
  var id = props.id,
    analyticsContext = props.analyticsContext,
    _props$onDismissed = props.onDismissed,
    onDismissedProp = _props$onDismissed === void 0 ? noop$5 : _props$onDismissed;
  var autoDismissTimer = reactExports.useRef(null);
  var _useFlagGroup = useFlagGroup(),
    onDismissedFromFlagGroup = _useFlagGroup.onDismissed,
    isDismissAllowed = _useFlagGroup.isDismissAllowed;
  var onDismissed = reactExports.useCallback(function (id, analyticsEvent) {
    onDismissedProp(id, analyticsEvent);
    onDismissedFromFlagGroup(id, analyticsEvent);
  }, [onDismissedProp, onDismissedFromFlagGroup]);
  var onDismissedAnalytics = usePlatformLeafEventHandler({
    fn: onDismissed,
    action: 'dismissed',
    analyticsData: analyticsContext,
    componentName: 'flag',
    packageName: packageName$1,
    packageVersion: packageVersion$1
  });
  var isAutoDismissAllowed = isDismissAllowed && onDismissed;
  var dismissFlag = reactExports.useCallback(function () {
    if (isAutoDismissAllowed) {
      onDismissedAnalytics(id);
    }
  }, [id, onDismissedAnalytics, isAutoDismissAllowed]);
  var stopAutoDismissTimer = reactExports.useCallback(function () {
    if (autoDismissTimer.current) {
      clearTimeout(autoDismissTimer.current);
      autoDismissTimer.current = null;
    }
  }, []);
  var startAutoDismissTimer = reactExports.useCallback(function () {
    if (!isAutoDismissAllowed) {
      return;
    }
    stopAutoDismissTimer();
    autoDismissTimer.current = window.setTimeout(dismissFlag, AUTO_DISMISS_SECONDS * 1000);
  }, [dismissFlag, stopAutoDismissTimer, isAutoDismissAllowed]);
  reactExports.useEffect(function () {
    startAutoDismissTimer();
    return stopAutoDismissTimer;
  }, [startAutoDismissTimer, stopAutoDismissTimer]);
  return /*#__PURE__*/React.createElement(Flag
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  , _extends({}, props, {
    onMouseOver: stopAutoDismissTimer,
    onFocus: stopAutoDismissTimer,
    onMouseOut: startAutoDismissTimer,
    onBlur: startAutoDismissTimer
  }));
};

var _excluded$9 = ["isAutoDismiss"];
function ownKeys$a(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$9(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$a(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$a(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var FlagContext = /*#__PURE__*/React.createContext(null);

/**
 * useFlags is used to access the `showFlags` function which can be used to programatically display flags.
 * - [Examples](https://atlassian.design/components/flag/flags-provider/examples#using-showflags)
 */
function useFlags() {
  var api = reactExports.useContext(FlagContext);
  if (api == null) {
    throw new Error('Unable to find FlagProviderContext');
  }
  return api;
}
var getUniqueId = function () {
  var count = 0;
  return function () {
    return "flag-provider-unique-id:".concat(count++);
  };
}();
function FlagsProvider(_ref) {
  var children = _ref.children,
    shouldRenderToParent = _ref.shouldRenderToParent;
  var _useState = reactExports.useState([]),
    _useState2 = _slicedToArray(_useState, 2),
    flags = _useState2[0],
    setFlags = _useState2[1];
  var removeFlag = reactExports.useCallback(function (id) {
    setFlags(function (current) {
      return current.slice(0).filter(function (flag) {
        return flag.id !== id;
      });
    });
  }, []);
  var api = reactExports.useMemo(function () {
    return {
      showFlag: function show(value) {
        var flag = _objectSpread$9(_objectSpread$9({}, value), {}, {
          id: value.id || getUniqueId()
        });
        setFlags(function (current) {
          var index = current.findIndex(function (value) {
            return value.id === flag.id;
          });

          // If flag is not found add it
          if (index === -1) {
            return [flag].concat(_toConsumableArray(current));
          }

          // If flag already exists with the same id, then replace it
          var shallow = _toConsumableArray(current);
          shallow[index] = flag;
          return shallow;
        });
        return function dismiss() {
          removeFlag(flag.id);
        };
      }
    };
  }, [removeFlag]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FlagContext.Provider, {
    value: api
  }, children), /*#__PURE__*/React.createElement(FlagGroup, {
    onDismissed: removeFlag,
    shouldRenderToParent: shouldRenderToParent
  }, flags.map(function (flag) {
    var isAutoDismiss = flag.isAutoDismiss,
      restProps = _objectWithoutProperties(flag, _excluded$9);
    var FlagType = isAutoDismiss ? AutoDismissFlag : Flag;
    return /*#__PURE__*/React.createElement(FlagType, _extends({}, restProps, {
      key: flag.id
    }));
  })));
}

const ErrorBoundaryContext = reactExports.createContext(null);

const initialState = {
  didCatch: false,
  error: null
};
class ErrorBoundary extends reactExports.Component {
  constructor(props) {
    super(props);
    this.resetErrorBoundary = this.resetErrorBoundary.bind(this);
    this.state = initialState;
  }
  static getDerivedStateFromError(error) {
    return {
      didCatch: true,
      error
    };
  }
  resetErrorBoundary() {
    const {
      error
    } = this.state;
    if (error !== null) {
      var _this$props$onReset, _this$props;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      (_this$props$onReset = (_this$props = this.props).onReset) === null || _this$props$onReset === void 0 ? void 0 : _this$props$onReset.call(_this$props, {
        args,
        reason: "imperative-api"
      });
      this.setState(initialState);
    }
  }
  componentDidCatch(error, info) {
    var _this$props$onError, _this$props2;
    (_this$props$onError = (_this$props2 = this.props).onError) === null || _this$props$onError === void 0 ? void 0 : _this$props$onError.call(_this$props2, error, info);
  }
  componentDidUpdate(prevProps, prevState) {
    const {
      didCatch
    } = this.state;
    const {
      resetKeys
    } = this.props;

    // There's an edge case where if the thing that triggered the error happens to *also* be in the resetKeys array,
    // we'd end up resetting the error boundary immediately.
    // This would likely trigger a second error to be thrown.
    // So we make sure that we don't check the resetKeys on the first call of cDU after the error is set.

    if (didCatch && prevState.error !== null && hasArrayChanged(prevProps.resetKeys, resetKeys)) {
      var _this$props$onReset2, _this$props3;
      (_this$props$onReset2 = (_this$props3 = this.props).onReset) === null || _this$props$onReset2 === void 0 ? void 0 : _this$props$onReset2.call(_this$props3, {
        next: resetKeys,
        prev: prevProps.resetKeys,
        reason: "keys"
      });
      this.setState(initialState);
    }
  }
  render() {
    const {
      children,
      fallbackRender,
      FallbackComponent,
      fallback
    } = this.props;
    const {
      didCatch,
      error
    } = this.state;
    let childToRender = children;
    if (didCatch) {
      const props = {
        error,
        resetErrorBoundary: this.resetErrorBoundary
      };
      if (typeof fallbackRender === "function") {
        childToRender = fallbackRender(props);
      } else if (FallbackComponent) {
        childToRender = reactExports.createElement(FallbackComponent, props);
      } else if (fallback === null || reactExports.isValidElement(fallback)) {
        childToRender = fallback;
      } else {
        throw error;
      }
    }
    return reactExports.createElement(ErrorBoundaryContext.Provider, {
      value: {
        didCatch,
        error,
        resetErrorBoundary: this.resetErrorBoundary
      }
    }, childToRender);
  }
}
function hasArrayChanged() {
  let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return a.length !== b.length || a.some((item, index) => !Object.is(item, b[index]));
}

//      

var charCodeOfDot = ".".charCodeAt(0);
var reEscapeChar$1 = /\\(\\)?/g;
var rePropName$1 = RegExp(
// Match anything that isn't a dot or bracket.
"[^.[\\]]+" + "|" +
// Or match property names within brackets.
"\\[(?:" +
// Match a non-string expression.
"([^\"'][^[]*)" + "|" +
// Or match strings (supports escaping characters).
"([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2" + ")\\]" + "|" +
// Or match "" as the space between consecutive dots or empty brackets.
"(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))", "g");

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath$3 = function stringToPath(string) {
  var result = [];
  if (string.charCodeAt(0) === charCodeOfDot) {
    result.push("");
  }
  string.replace(rePropName$1, function (match, expression, quote, subString) {
    var key = match;
    if (quote) {
      key = subString.replace(reEscapeChar$1, "$1");
    } else if (expression) {
      key = expression.trim();
    }
    result.push(key);
  });
  return result;
};
var keysCache = {};
var keysRegex = /[.[\]]+/;
var toPath = function toPath(key) {
  if (key === null || key === undefined || !key.length) {
    return [];
  }
  if (typeof key !== "string") {
    throw new Error("toPath() expects a string");
  }
  if (keysCache[key] == null) {
    /**
     * The following patch fixes issue 456, introduced since v4.20.3:
     *
     * Before v4.20.3, i.e. in v4.20.2, a `key` like 'choices[]' would map to ['choices']
     * (e.g. an array of choices used where 'choices[]' is name attribute of an input of type checkbox).
     *
     * Since v4.20.3, a `key` like 'choices[]' would map to ['choices', ''] which is wrong and breaks
     * this kind of inputs e.g. in React.
     *
     * v4.20.3 introduced an unwanted breaking change, this patch fixes it, see the issue at the link below.
     *
     * @see https://github.com/final-form/final-form/issues/456
     */
    if (key.endsWith("[]")) {
      // v4.20.2 (a `key` like 'choices[]' should map to ['choices'], which is fine).
      keysCache[key] = key.split(keysRegex).filter(Boolean);
    } else {
      // v4.20.3 (a `key` like 'choices[]' maps to ['choices', ''], which breaks applications relying on inputs like `<input type="checkbox" name="choices[]" />`).
      keysCache[key] = stringToPath$3(key);
    }
  }
  return keysCache[key];
};

//      
var getIn = function getIn(state, complexKey) {
  // Intentionally using iteration rather than recursion
  var path = toPath(complexKey);
  var current = state;
  for (var i = 0; i < path.length; i++) {
    var key = path[i];
    if (current === undefined || current === null || typeof current !== "object" || Array.isArray(current) && isNaN(key)) {
      return undefined;
    }
    current = current[key];
  }
  return current;
};

function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (String )(input); }
var setInRecursor = function setInRecursor(current, index, path, value, destroyArrays) {
  if (index >= path.length) {
    // end of recursion
    return value;
  }
  var key = path[index];

  // determine type of key
  if (isNaN(key)) {
    var _extends2;
    // object set
    if (current === undefined || current === null) {
      var _ref;
      // recurse
      var _result = setInRecursor(undefined, index + 1, path, value, destroyArrays);

      // delete or create an object
      return _result === undefined ? undefined : (_ref = {}, _ref[key] = _result, _ref);
    }
    if (Array.isArray(current)) {
      throw new Error("Cannot set a non-numeric property on an array");
    }
    // current exists, so make a copy of all its values, and add/update the new one
    var _result2 = setInRecursor(current[key], index + 1, path, value, destroyArrays);
    if (_result2 === undefined) {
      var numKeys = Object.keys(current).length;
      if (current[key] === undefined && numKeys === 0) {
        // object was already empty
        return undefined;
      }
      if (current[key] !== undefined && numKeys <= 1) {
        // only key we had was the one we are deleting
        if (!isNaN(path[index - 1]) && !destroyArrays) {
          // we are in an array, so return an empty object
          return {};
        } else {
          return undefined;
        }
      }
      current[key];
        var _final = _objectWithoutPropertiesLoose(current, [key].map(_toPropertyKey));
      return _final;
    }
    // set result in key
    return _extends({}, current, (_extends2 = {}, _extends2[key] = _result2, _extends2));
  }
  // array set
  var numericKey = Number(key);
  if (current === undefined || current === null) {
    // recurse
    var _result3 = setInRecursor(undefined, index + 1, path, value, destroyArrays);

    // if nothing returned, delete it
    if (_result3 === undefined) {
      return undefined;
    }

    // create an array
    var _array = [];
    _array[numericKey] = _result3;
    return _array;
  }
  if (!Array.isArray(current)) {
    throw new Error("Cannot set a numeric property on an object");
  }
  // recurse
  var existingValue = current[numericKey];
  var result = setInRecursor(existingValue, index + 1, path, value, destroyArrays);

  // current exists, so make a copy of all its values, and add/update the new one
  var array = [].concat(current);
  if (destroyArrays && result === undefined) {
    array.splice(numericKey, 1);
    if (array.length === 0) {
      return undefined;
    }
  } else {
    array[numericKey] = result;
  }
  return array;
};
var setIn = function setIn(state, key, value, destroyArrays) {
  if (destroyArrays === void 0) {
    destroyArrays = false;
  }
  if (state === undefined || state === null) {
    throw new Error("Cannot call setIn() with " + String(state) + " state");
  }
  if (key === undefined || key === null) {
    throw new Error("Cannot call setIn() with " + String(key) + " key");
  }
  // Recursive function needs to accept and return State, but public API should
  // only deal with Objects
  return setInRecursor(state, 0, toPath(key), value, destroyArrays);
};

var FORM_ERROR = "FINAL_FORM/form-error";
var ARRAY_ERROR = "FINAL_FORM/array-error";

//      


/**
 * Converts internal field state to published field state
 */
function publishFieldState(formState, field) {
  var errors = formState.errors,
    initialValues = formState.initialValues,
    lastSubmittedValues = formState.lastSubmittedValues,
    submitErrors = formState.submitErrors,
    submitFailed = formState.submitFailed,
    submitSucceeded = formState.submitSucceeded,
    submitting = formState.submitting,
    values = formState.values;
  var active = field.active,
    blur = field.blur,
    change = field.change,
    data = field.data,
    focus = field.focus,
    modified = field.modified,
    modifiedSinceLastSubmit = field.modifiedSinceLastSubmit,
    name = field.name,
    touched = field.touched,
    validating = field.validating,
    visited = field.visited;
  var value = getIn(values, name);
  var error = getIn(errors, name);
  if (error && error[ARRAY_ERROR]) {
    error = error[ARRAY_ERROR];
  }
  var submitError = submitErrors && getIn(submitErrors, name);
  var initial = initialValues && getIn(initialValues, name);
  var pristine = field.isEqual(initial, value);
  var dirtySinceLastSubmit = !!(lastSubmittedValues && !field.isEqual(getIn(lastSubmittedValues, name), value));
  var valid = !error && !submitError;
  return {
    active: active,
    blur: blur,
    change: change,
    data: data,
    dirty: !pristine,
    dirtySinceLastSubmit: dirtySinceLastSubmit,
    error: error,
    focus: focus,
    initial: initial,
    invalid: !valid,
    length: Array.isArray(value) ? value.length : undefined,
    modified: modified,
    modifiedSinceLastSubmit: modifiedSinceLastSubmit,
    name: name,
    pristine: pristine,
    submitError: submitError,
    submitFailed: submitFailed,
    submitSucceeded: submitSucceeded,
    submitting: submitting,
    touched: touched,
    valid: valid,
    value: value,
    visited: visited,
    validating: validating
  };
}

//      
var fieldSubscriptionItems = ["active", "data", "dirty", "dirtySinceLastSubmit", "error", "initial", "invalid", "length", "modified", "modifiedSinceLastSubmit", "pristine", "submitError", "submitFailed", "submitSucceeded", "submitting", "touched", "valid", "value", "visited", "validating"];

//      

var shallowEqual = function shallowEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== "object" || !a || typeof b !== "object" || !b) {
    return false;
  }
  var keysA = Object.keys(a);
  var keysB = Object.keys(b);
  if (keysA.length !== keysB.length) {
    return false;
  }
  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(b);
  for (var idx = 0; idx < keysA.length; idx++) {
    var key = keysA[idx];
    if (!bHasOwnProperty(key) || a[key] !== b[key]) {
      return false;
    }
  }
  return true;
};

//      
function subscriptionFilter (dest, src, previous, subscription, keys, shallowEqualKeys) {
  var different = false;
  keys.forEach(function (key) {
    if (subscription[key]) {
      dest[key] = src[key];
      if (!previous || (~shallowEqualKeys.indexOf(key) ? !shallowEqual(src[key], previous[key]) : src[key] !== previous[key])) {
        different = true;
      }
    }
  });
  return different;
}

//      
var shallowEqualKeys$1 = ["data"];

/**
 * Filters items in a FieldState based on a FieldSubscription
 */
var filterFieldState = function filterFieldState(state, previousState, subscription, force) {
  var result = {
    blur: state.blur,
    change: state.change,
    focus: state.focus,
    name: state.name
  };
  var different = subscriptionFilter(result, state, previousState, subscription, fieldSubscriptionItems, shallowEqualKeys$1) || !previousState;
  return different || force ? result : undefined;
};

//      
var formSubscriptionItems = ["active", "dirty", "dirtyFields", "dirtyFieldsSinceLastSubmit", "dirtySinceLastSubmit", "error", "errors", "hasSubmitErrors", "hasValidationErrors", "initialValues", "invalid", "modified", "modifiedSinceLastSubmit", "pristine", "submitting", "submitError", "submitErrors", "submitFailed", "submitSucceeded", "touched", "valid", "validating", "values", "visited"];

//      
var shallowEqualKeys = ["touched", "visited"];

/**
 * Filters items in a FormState based on a FormSubscription
 */
function filterFormState(state, previousState, subscription, force) {
  var result = {};
  var different = subscriptionFilter(result, state, previousState, subscription, formSubscriptionItems, shallowEqualKeys) || !previousState;
  return different || force ? result : undefined;
}

//      
var memoize$2 = function memoize(fn) {
  var lastArgs;
  var lastResult;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (!lastArgs || args.length !== lastArgs.length || args.some(function (arg, index) {
      return !shallowEqual(lastArgs[index], arg);
    })) {
      lastArgs = args;
      lastResult = fn.apply(void 0, args);
    }
    return lastResult;
  };
};

var isPromise = (function (obj) {
  return !!obj && (typeof obj === "object" || typeof obj === "function") && typeof obj.then === "function";
});
var tripleEquals = function tripleEquals(a, b) {
  return a === b;
};
var hasAnyError = function hasAnyError(errors) {
  return Object.keys(errors).some(function (key) {
    var value = errors[key];
    if (value && typeof value === "object" && !(value instanceof Error)) {
      return hasAnyError(value);
    }
    return typeof value !== "undefined";
  });
};
function convertToExternalFormState(_ref) {
  var active = _ref.active,
    dirtySinceLastSubmit = _ref.dirtySinceLastSubmit,
    modifiedSinceLastSubmit = _ref.modifiedSinceLastSubmit,
    error = _ref.error,
    errors = _ref.errors,
    initialValues = _ref.initialValues,
    pristine = _ref.pristine,
    submitting = _ref.submitting,
    submitFailed = _ref.submitFailed,
    submitSucceeded = _ref.submitSucceeded,
    submitError = _ref.submitError,
    submitErrors = _ref.submitErrors,
    valid = _ref.valid,
    validating = _ref.validating,
    values = _ref.values;
  return {
    active: active,
    dirty: !pristine,
    dirtySinceLastSubmit: dirtySinceLastSubmit,
    modifiedSinceLastSubmit: modifiedSinceLastSubmit,
    error: error,
    errors: errors,
    hasSubmitErrors: !!(submitError || submitErrors && hasAnyError(submitErrors)),
    hasValidationErrors: !!(error || hasAnyError(errors)),
    invalid: !valid,
    initialValues: initialValues,
    pristine: pristine,
    submitting: submitting,
    submitFailed: submitFailed,
    submitSucceeded: submitSucceeded,
    submitError: submitError,
    submitErrors: submitErrors,
    valid: valid,
    validating: validating > 0,
    values: values
  };
}
function notifySubscriber(subscriber, subscription, state, lastState, filter, force) {
  var notification = filter(state, lastState, subscription, force);
  if (notification) {
    subscriber(notification);
    return true;
  }
  return false;
}
function notify(_ref2, state, lastState, filter, force) {
  var entries = _ref2.entries;
  Object.keys(entries).forEach(function (key) {
    var entry = entries[Number(key)];
    // istanbul ignore next
    if (entry) {
      var subscription = entry.subscription,
        subscriber = entry.subscriber,
        notified = entry.notified;
      if (notifySubscriber(subscriber, subscription, state, lastState, filter, force || !notified)) {
        entry.notified = true;
      }
    }
  });
}
function createForm(config) {
  if (!config) {
    throw new Error("No config specified");
  }
  var debug = config.debug,
    destroyOnUnregister = config.destroyOnUnregister,
    keepDirtyOnReinitialize = config.keepDirtyOnReinitialize,
    initialValues = config.initialValues,
    mutators = config.mutators,
    onSubmit = config.onSubmit,
    validate = config.validate,
    validateOnBlur = config.validateOnBlur;
  if (!onSubmit) {
    throw new Error("No onSubmit function specified");
  }
  var state = {
    subscribers: {
      index: 0,
      entries: {}
    },
    fieldSubscribers: {},
    fields: {},
    formState: {
      asyncErrors: {},
      dirtySinceLastSubmit: false,
      modifiedSinceLastSubmit: false,
      errors: {},
      initialValues: initialValues && _extends({}, initialValues),
      invalid: false,
      pristine: true,
      submitting: false,
      submitFailed: false,
      submitSucceeded: false,
      resetWhileSubmitting: false,
      valid: true,
      validating: 0,
      values: initialValues ? _extends({}, initialValues) : {}
    },
    lastFormState: undefined
  };
  var inBatch = 0;
  var validationPaused = false;
  var validationBlocked = false;
  var preventNotificationWhileValidationPaused = false;
  var nextAsyncValidationKey = 0;
  var asyncValidationPromises = {};
  var clearAsyncValidationPromise = function clearAsyncValidationPromise(key) {
    return function (result) {
      delete asyncValidationPromises[key];
      return result;
    };
  };
  var changeValue = function changeValue(state, name, mutate) {
    var before = getIn(state.formState.values, name);
    var after = mutate(before);
    state.formState.values = setIn(state.formState.values, name, after) || {};
  };
  var renameField = function renameField(state, from, to) {
    if (state.fields[from]) {
      var _extends2, _extends3;
      state.fields = _extends({}, state.fields, (_extends2 = {}, _extends2[to] = _extends({}, state.fields[from], {
        name: to,
        // rebind event handlers
        blur: function blur() {
          return api.blur(to);
        },
        change: function change(value) {
          return api.change(to, value);
        },
        focus: function focus() {
          return api.focus(to);
        },
        lastFieldState: undefined
      }), _extends2));
      delete state.fields[from];
      state.fieldSubscribers = _extends({}, state.fieldSubscribers, (_extends3 = {}, _extends3[to] = state.fieldSubscribers[from], _extends3));
      delete state.fieldSubscribers[from];
      var value = getIn(state.formState.values, from);
      state.formState.values = setIn(state.formState.values, from, undefined) || {};
      state.formState.values = setIn(state.formState.values, to, value);
      delete state.lastFormState;
    }
  };

  // bind state to mutators
  var getMutatorApi = function getMutatorApi(key) {
    return function () {
      // istanbul ignore next
      if (mutators) {
        // ^^ causes branch coverage warning, but needed to appease the Flow gods
        var mutatableState = {
          formState: state.formState,
          fields: state.fields,
          fieldSubscribers: state.fieldSubscribers,
          lastFormState: state.lastFormState
        };
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var returnValue = mutators[key](args, mutatableState, {
          changeValue: changeValue,
          getIn: getIn,
          renameField: renameField,
          resetFieldState: api.resetFieldState,
          setIn: setIn,
          shallowEqual: shallowEqual
        });
        state.formState = mutatableState.formState;
        state.fields = mutatableState.fields;
        state.fieldSubscribers = mutatableState.fieldSubscribers;
        state.lastFormState = mutatableState.lastFormState;
        runValidation(undefined, function () {
          notifyFieldListeners();
          notifyFormListeners();
        });
        return returnValue;
      }
    };
  };
  var mutatorsApi = mutators ? Object.keys(mutators).reduce(function (result, key) {
    result[key] = getMutatorApi(key);
    return result;
  }, {}) : {};
  var runRecordLevelValidation = function runRecordLevelValidation(setErrors) {
    var promises = [];
    if (validate) {
      var errorsOrPromise = validate(_extends({}, state.formState.values)); // clone to avoid writing
      if (isPromise(errorsOrPromise)) {
        promises.push(errorsOrPromise.then(function (errors) {
          return setErrors(errors, true);
        }));
      } else {
        setErrors(errorsOrPromise, false);
      }
    }
    return promises;
  };
  var getValidators = function getValidators(field) {
    return Object.keys(field.validators).reduce(function (result, index) {
      var validator = field.validators[Number(index)]();
      if (validator) {
        result.push(validator);
      }
      return result;
    }, []);
  };
  var runFieldLevelValidation = function runFieldLevelValidation(field, setError) {
    var promises = [];
    var validators = getValidators(field);
    if (validators.length) {
      var error;
      validators.forEach(function (validator) {
        var errorOrPromise = validator(getIn(state.formState.values, field.name), state.formState.values, validator.length === 0 || validator.length === 3 ? publishFieldState(state.formState, state.fields[field.name]) : undefined);
        if (errorOrPromise && isPromise(errorOrPromise)) {
          field.validating = true;
          var promise = errorOrPromise.then(function (error) {
            if (state.fields[field.name]) {
              state.fields[field.name].validating = false;
              setError(error);
            }
          }); // errors must be resolved, not rejected
          promises.push(promise);
        } else if (!error) {
          // first registered validator wins
          error = errorOrPromise;
        }
      });
      setError(error);
    }
    return promises;
  };
  var runValidation = function runValidation(fieldChanged, callback) {
    if (validationPaused) {
      validationBlocked = true;
      callback();
      return;
    }
    var fields = state.fields,
      formState = state.formState;
    var safeFields = _extends({}, fields);
    var fieldKeys = Object.keys(safeFields);
    if (!validate && !fieldKeys.some(function (key) {
      return getValidators(safeFields[key]).length;
    })) {
      callback();
      return; // no validation rules
    }

    // pare down field keys to actually validate
    var limitedFieldLevelValidation = false;
    if (fieldChanged) {
      var changedField = safeFields[fieldChanged];
      if (changedField) {
        var validateFields = changedField.validateFields;
        if (validateFields) {
          limitedFieldLevelValidation = true;
          fieldKeys = validateFields.length ? validateFields.concat(fieldChanged) : [fieldChanged];
        }
      }
    }
    var recordLevelErrors = {};
    var asyncRecordLevelErrors = {};
    var fieldLevelErrors = {};
    var promises = [].concat(runRecordLevelValidation(function (errors, wasAsync) {
      if (wasAsync) {
        asyncRecordLevelErrors = errors || {};
      } else {
        recordLevelErrors = errors || {};
      }
    }), fieldKeys.reduce(function (result, name) {
      return result.concat(runFieldLevelValidation(fields[name], function (error) {
        fieldLevelErrors[name] = error;
      }));
    }, []));
    var hasAsyncValidations = promises.length > 0;
    var asyncValidationPromiseKey = ++nextAsyncValidationKey;
    var promise = Promise.all(promises).then(clearAsyncValidationPromise(asyncValidationPromiseKey));

    // backwards-compat: add promise to submit-blocking promises iff there are any promises to await
    if (hasAsyncValidations) {
      asyncValidationPromises[asyncValidationPromiseKey] = promise;
    }
    var processErrors = function processErrors(afterAsync) {
      var merged = _extends({}, limitedFieldLevelValidation ? formState.errors : {}, recordLevelErrors, afterAsync ? asyncRecordLevelErrors // new async errors
      : formState.asyncErrors);
      var forEachError = function forEachError(fn) {
        fieldKeys.forEach(function (name) {
          if (fields[name]) {
            // make sure field is still registered
            // field-level errors take precedent over record-level errors
            var recordLevelError = getIn(recordLevelErrors, name);
            var errorFromParent = getIn(merged, name);
            var hasFieldLevelValidation = getValidators(safeFields[name]).length;
            var fieldLevelError = fieldLevelErrors[name];
            fn(name, hasFieldLevelValidation && fieldLevelError || validate && recordLevelError || (!recordLevelError && !limitedFieldLevelValidation ? errorFromParent : undefined));
          }
        });
      };
      forEachError(function (name, error) {
        merged = setIn(merged, name, error) || {};
      });
      forEachError(function (name, error) {
        if (error && error[ARRAY_ERROR]) {
          var existing = getIn(merged, name);
          var copy = [].concat(existing);
          copy[ARRAY_ERROR] = error[ARRAY_ERROR];
          merged = setIn(merged, name, copy);
        }
      });
      if (!shallowEqual(formState.errors, merged)) {
        formState.errors = merged;
      }
      if (afterAsync) {
        formState.asyncErrors = asyncRecordLevelErrors;
      }
      formState.error = recordLevelErrors[FORM_ERROR];
    };
    if (hasAsyncValidations) {
      // async validations are running, ensure validating is true before notifying
      state.formState.validating++;
      callback();
    }

    // process sync errors
    processErrors(false);
    // sync errors have been set. notify listeners while we wait for others
    callback();
    if (hasAsyncValidations) {
      var afterPromise = function afterPromise() {
        state.formState.validating--;
        callback();
        // field async validation may affect formState validating
        // so force notifyFormListeners if validating is still 0 after callback finished
        // and lastFormState validating is true
        if (state.formState.validating === 0 && state.lastFormState.validating) {
          notifyFormListeners();
        }
      };
      promise.then(function () {
        if (nextAsyncValidationKey > asyncValidationPromiseKey) {
          // if this async validator has been superseded by another, ignore its results
          return;
        }
        processErrors(true);
      }).then(afterPromise, afterPromise);
    }
  };
  var notifyFieldListeners = function notifyFieldListeners(name) {
    if (inBatch) {
      return;
    }
    var fields = state.fields,
      fieldSubscribers = state.fieldSubscribers,
      formState = state.formState;
    var safeFields = _extends({}, fields);
    var notifyField = function notifyField(name) {
      var field = safeFields[name];
      var fieldState = publishFieldState(formState, field);
      var lastFieldState = field.lastFieldState;
      field.lastFieldState = fieldState;
      var fieldSubscriber = fieldSubscribers[name];
      if (fieldSubscriber) {
        notify(fieldSubscriber, fieldState, lastFieldState, filterFieldState, lastFieldState === undefined);
      }
    };
    if (name) {
      notifyField(name);
    } else {
      Object.keys(safeFields).forEach(notifyField);
    }
  };
  var markAllFieldsTouched = function markAllFieldsTouched() {
    Object.keys(state.fields).forEach(function (key) {
      state.fields[key].touched = true;
    });
  };
  var hasSyncErrors = function hasSyncErrors() {
    return !!(state.formState.error || hasAnyError(state.formState.errors));
  };
  var calculateNextFormState = function calculateNextFormState() {
    var fields = state.fields,
      formState = state.formState,
      lastFormState = state.lastFormState;
    var safeFields = _extends({}, fields);
    var safeFieldKeys = Object.keys(safeFields);

    // calculate dirty/pristine
    var foundDirty = false;
    var dirtyFields = safeFieldKeys.reduce(function (result, key) {
      var dirty = !safeFields[key].isEqual(getIn(formState.values, key), getIn(formState.initialValues || {}, key));
      if (dirty) {
        foundDirty = true;
        result[key] = true;
      }
      return result;
    }, {});
    var dirtyFieldsSinceLastSubmit = safeFieldKeys.reduce(function (result, key) {
      // istanbul ignore next
      var nonNullLastSubmittedValues = formState.lastSubmittedValues || {}; // || {} is for flow, but causes branch coverage complaint
      if (!safeFields[key].isEqual(getIn(formState.values, key), getIn(nonNullLastSubmittedValues, key))) {
        result[key] = true;
      }
      return result;
    }, {});
    formState.pristine = !foundDirty;
    formState.dirtySinceLastSubmit = !!(formState.lastSubmittedValues && Object.values(dirtyFieldsSinceLastSubmit).some(function (value) {
      return value;
    }));
    formState.modifiedSinceLastSubmit = !!(formState.lastSubmittedValues &&
    // Object.values would treat values as mixed (facebook/flow#2221)
    Object.keys(safeFields).some(function (value) {
      return safeFields[value].modifiedSinceLastSubmit;
    }));
    formState.valid = !formState.error && !formState.submitError && !hasAnyError(formState.errors) && !(formState.submitErrors && hasAnyError(formState.submitErrors));
    var nextFormState = convertToExternalFormState(formState);
    var _safeFieldKeys$reduce = safeFieldKeys.reduce(function (result, key) {
        result.modified[key] = safeFields[key].modified;
        result.touched[key] = safeFields[key].touched;
        result.visited[key] = safeFields[key].visited;
        return result;
      }, {
        modified: {},
        touched: {},
        visited: {}
      }),
      modified = _safeFieldKeys$reduce.modified,
      touched = _safeFieldKeys$reduce.touched,
      visited = _safeFieldKeys$reduce.visited;
    nextFormState.dirtyFields = lastFormState && shallowEqual(lastFormState.dirtyFields, dirtyFields) ? lastFormState.dirtyFields : dirtyFields;
    nextFormState.dirtyFieldsSinceLastSubmit = lastFormState && shallowEqual(lastFormState.dirtyFieldsSinceLastSubmit, dirtyFieldsSinceLastSubmit) ? lastFormState.dirtyFieldsSinceLastSubmit : dirtyFieldsSinceLastSubmit;
    nextFormState.modified = lastFormState && shallowEqual(lastFormState.modified, modified) ? lastFormState.modified : modified;
    nextFormState.touched = lastFormState && shallowEqual(lastFormState.touched, touched) ? lastFormState.touched : touched;
    nextFormState.visited = lastFormState && shallowEqual(lastFormState.visited, visited) ? lastFormState.visited : visited;
    return lastFormState && shallowEqual(lastFormState, nextFormState) ? lastFormState : nextFormState;
  };
  var callDebug = function callDebug() {
    return debug && "development" !== "production" && debug(calculateNextFormState(), Object.keys(state.fields).reduce(function (result, key) {
      result[key] = state.fields[key];
      return result;
    }, {}));
  };
  var notifying = false;
  var scheduleNotification = false;
  var notifyFormListeners = function notifyFormListeners() {
    if (notifying) {
      scheduleNotification = true;
    } else {
      notifying = true;
      callDebug();
      if (!inBatch && !(validationPaused && preventNotificationWhileValidationPaused)) {
        var lastFormState = state.lastFormState;
        var nextFormState = calculateNextFormState();
        if (nextFormState !== lastFormState) {
          state.lastFormState = nextFormState;
          notify(state.subscribers, nextFormState, lastFormState, filterFormState);
        }
      }
      notifying = false;
      if (scheduleNotification) {
        scheduleNotification = false;
        notifyFormListeners();
      }
    }
  };
  var beforeSubmit = function beforeSubmit() {
    return Object.keys(state.fields).some(function (name) {
      return state.fields[name].beforeSubmit && state.fields[name].beforeSubmit() === false;
    });
  };
  var afterSubmit = function afterSubmit() {
    return Object.keys(state.fields).forEach(function (name) {
      return state.fields[name].afterSubmit && state.fields[name].afterSubmit();
    });
  };
  var resetModifiedAfterSubmit = function resetModifiedAfterSubmit() {
    return Object.keys(state.fields).forEach(function (key) {
      return state.fields[key].modifiedSinceLastSubmit = false;
    });
  };

  // generate initial errors
  runValidation(undefined, function () {
    notifyFormListeners();
  });
  var api = {
    batch: function batch(fn) {
      inBatch++;
      fn();
      inBatch--;
      notifyFieldListeners();
      notifyFormListeners();
    },
    blur: function blur(name) {
      var fields = state.fields,
        formState = state.formState;
      var previous = fields[name];
      if (previous) {
        // can only blur registered fields
        delete formState.active;
        fields[name] = _extends({}, previous, {
          active: false,
          touched: true
        });
        if (validateOnBlur) {
          runValidation(name, function () {
            notifyFieldListeners();
            notifyFormListeners();
          });
        } else {
          notifyFieldListeners();
          notifyFormListeners();
        }
      }
    },
    change: function change(name, value) {
      var fields = state.fields,
        formState = state.formState;
      if (getIn(formState.values, name) !== value) {
        changeValue(state, name, function () {
          return value;
        });
        var previous = fields[name];
        if (previous) {
          // only track modified for registered fields
          fields[name] = _extends({}, previous, {
            modified: true,
            modifiedSinceLastSubmit: !!formState.lastSubmittedValues
          });
        }
        if (validateOnBlur) {
          notifyFieldListeners();
          notifyFormListeners();
        } else {
          runValidation(name, function () {
            notifyFieldListeners();
            notifyFormListeners();
          });
        }
      }
    },
    get destroyOnUnregister() {
      return !!destroyOnUnregister;
    },
    set destroyOnUnregister(value) {
      destroyOnUnregister = value;
    },
    focus: function focus(name) {
      var field = state.fields[name];
      if (field && !field.active) {
        state.formState.active = name;
        field.active = true;
        field.visited = true;
        notifyFieldListeners();
        notifyFormListeners();
      }
    },
    mutators: mutatorsApi,
    getFieldState: function getFieldState(name) {
      var field = state.fields[name];
      return field && field.lastFieldState;
    },
    getRegisteredFields: function getRegisteredFields() {
      return Object.keys(state.fields);
    },
    getState: function getState() {
      return calculateNextFormState();
    },
    initialize: function initialize(data) {
      var fields = state.fields,
        formState = state.formState;
      var safeFields = _extends({}, fields);
      var values = typeof data === "function" ? data(formState.values) : data;
      if (!keepDirtyOnReinitialize) {
        formState.values = values;
      }
      /**
       * Hello, inquisitive code reader! Thanks for taking the time to dig in!
       *
       * The following code is the way it is to allow for non-registered deep
       * field values to be set via initialize()
       */

      // save dirty values
      var savedDirtyValues = keepDirtyOnReinitialize ? Object.keys(safeFields).reduce(function (result, key) {
        var field = safeFields[key];
        var pristine = field.isEqual(getIn(formState.values, key), getIn(formState.initialValues || {}, key));
        if (!pristine) {
          result[key] = getIn(formState.values, key);
        }
        return result;
      }, {}) : {};
      // update initalValues and values
      formState.initialValues = values;
      formState.values = values;
      // restore the dirty values
      Object.keys(savedDirtyValues).forEach(function (key) {
        formState.values = setIn(formState.values, key, savedDirtyValues[key]) || {};
      });
      runValidation(undefined, function () {
        notifyFieldListeners();
        notifyFormListeners();
      });
    },
    isValidationPaused: function isValidationPaused() {
      return validationPaused;
    },
    pauseValidation: function pauseValidation(preventNotification) {
      if (preventNotification === void 0) {
        preventNotification = true;
      }
      validationPaused = true;
      preventNotificationWhileValidationPaused = preventNotification;
    },
    registerField: function registerField(name, subscriber, subscription, fieldConfig) {
      if (subscription === void 0) {
        subscription = {};
      }
      if (!state.fieldSubscribers[name]) {
        state.fieldSubscribers[name] = {
          index: 0,
          entries: {}
        };
      }
      var index = state.fieldSubscribers[name].index++;

      // save field subscriber callback
      state.fieldSubscribers[name].entries[index] = {
        subscriber: memoize$2(subscriber),
        subscription: subscription,
        notified: false
      };

      // create initial field state if not exists
      var field = state.fields[name] || {
        active: false,
        afterSubmit: fieldConfig && fieldConfig.afterSubmit,
        beforeSubmit: fieldConfig && fieldConfig.beforeSubmit,
        data: fieldConfig && fieldConfig.data || {},
        isEqual: fieldConfig && fieldConfig.isEqual || tripleEquals,
        lastFieldState: undefined,
        modified: false,
        modifiedSinceLastSubmit: false,
        name: name,
        touched: false,
        valid: true,
        validateFields: fieldConfig && fieldConfig.validateFields,
        validators: {},
        validating: false,
        visited: false
      };
      // Mutators can create a field in order to keep the field states
      // We must update this field when registerField is called afterwards
      field.blur = field.blur || function () {
        return api.blur(name);
      };
      field.change = field.change || function (value) {
        return api.change(name, value);
      };
      field.focus = field.focus || function () {
        return api.focus(name);
      };
      state.fields[name] = field;
      var haveValidator = false;
      var silent = fieldConfig && fieldConfig.silent;
      var notify = function notify() {
        if (silent && state.fields[name]) {
          notifyFieldListeners(name);
        } else {
          notifyFormListeners();
          notifyFieldListeners();
        }
      };
      if (fieldConfig) {
        haveValidator = !!(fieldConfig.getValidator && fieldConfig.getValidator());
        if (fieldConfig.getValidator) {
          state.fields[name].validators[index] = fieldConfig.getValidator;
        }
        var noValueInFormState = getIn(state.formState.values, name) === undefined;
        if (fieldConfig.initialValue !== undefined && (noValueInFormState || getIn(state.formState.values, name) === getIn(state.formState.initialValues, name))
        // only initialize if we don't yet have any value for this field
        ) {
          state.formState.initialValues = setIn(state.formState.initialValues || {}, name, fieldConfig.initialValue);
          state.formState.values = setIn(state.formState.values, name, fieldConfig.initialValue);
          runValidation(undefined, notify);
        }

        // only use defaultValue if we don't yet have any value for this field
        if (fieldConfig.defaultValue !== undefined && fieldConfig.initialValue === undefined && getIn(state.formState.initialValues, name) === undefined && noValueInFormState) {
          state.formState.values = setIn(state.formState.values, name, fieldConfig.defaultValue);
        }
      }
      if (haveValidator) {
        runValidation(undefined, notify);
      } else {
        notify();
      }
      return function () {
        var validatorRemoved = false;
        // istanbul ignore next
        if (state.fields[name]) {
          // state.fields[name] may have been removed by a mutator
          validatorRemoved = !!(state.fields[name].validators[index] && state.fields[name].validators[index]());
          delete state.fields[name].validators[index];
        }
        var hasFieldSubscribers = !!state.fieldSubscribers[name];
        if (hasFieldSubscribers) {
          // state.fieldSubscribers[name] may have been removed by a mutator
          delete state.fieldSubscribers[name].entries[index];
        }
        var lastOne = hasFieldSubscribers && !Object.keys(state.fieldSubscribers[name].entries).length;
        if (lastOne) {
          delete state.fieldSubscribers[name];
          delete state.fields[name];
          if (validatorRemoved) {
            state.formState.errors = setIn(state.formState.errors, name, undefined) || {};
          }
          if (destroyOnUnregister) {
            state.formState.values = setIn(state.formState.values, name, undefined, true) || {};
          }
        }
        if (!silent) {
          if (validatorRemoved) {
            runValidation(undefined, function () {
              notifyFormListeners();
              notifyFieldListeners();
            });
          } else if (lastOne) {
            // values or errors may have changed
            notifyFormListeners();
          }
        }
      };
    },
    reset: function reset(initialValues) {
      if (initialValues === void 0) {
        initialValues = state.formState.initialValues;
      }
      if (state.formState.submitting) {
        state.formState.resetWhileSubmitting = true;
      }
      state.formState.submitFailed = false;
      state.formState.submitSucceeded = false;
      delete state.formState.submitError;
      delete state.formState.submitErrors;
      delete state.formState.lastSubmittedValues;
      api.initialize(initialValues || {});
    },
    /**
     * Resets all field flags (e.g. touched, visited, etc.) to their initial state
     */
    resetFieldState: function resetFieldState(name) {
      state.fields[name] = _extends({}, state.fields[name], {
        active: false,
        lastFieldState: undefined,
        modified: false,
        touched: false,
        valid: true,
        validating: false,
        visited: false
      });
      runValidation(undefined, function () {
        notifyFieldListeners();
        notifyFormListeners();
      });
    },
    /**
     * Returns the form to a clean slate; that is:
     * - Clear all values
     * - Resets all fields to their initial state
     */
    restart: function restart(initialValues) {
      if (initialValues === void 0) {
        initialValues = state.formState.initialValues;
      }
      api.batch(function () {
        for (var name in state.fields) {
          api.resetFieldState(name);
          state.fields[name] = _extends({}, state.fields[name], {
            active: false,
            lastFieldState: undefined,
            modified: false,
            modifiedSinceLastSubmit: false,
            touched: false,
            valid: true,
            validating: false,
            visited: false
          });
        }
        api.reset(initialValues);
      });
    },
    resumeValidation: function resumeValidation() {
      validationPaused = false;
      preventNotificationWhileValidationPaused = false;
      if (validationBlocked) {
        // validation was attempted while it was paused, so run it now
        runValidation(undefined, function () {
          notifyFieldListeners();
          notifyFormListeners();
        });
      }
      validationBlocked = false;
    },
    setConfig: function setConfig(name, value) {
      switch (name) {
        case "debug":
          debug = value;
          break;
        case "destroyOnUnregister":
          destroyOnUnregister = value;
          break;
        case "initialValues":
          api.initialize(value);
          break;
        case "keepDirtyOnReinitialize":
          keepDirtyOnReinitialize = value;
          break;
        case "mutators":
          mutators = value;
          if (value) {
            Object.keys(mutatorsApi).forEach(function (key) {
              if (!(key in value)) {
                delete mutatorsApi[key];
              }
            });
            Object.keys(value).forEach(function (key) {
              mutatorsApi[key] = getMutatorApi(key);
            });
          } else {
            Object.keys(mutatorsApi).forEach(function (key) {
              delete mutatorsApi[key];
            });
          }
          break;
        case "onSubmit":
          onSubmit = value;
          break;
        case "validate":
          validate = value;
          runValidation(undefined, function () {
            notifyFieldListeners();
            notifyFormListeners();
          });
          break;
        case "validateOnBlur":
          validateOnBlur = value;
          break;
        default:
          throw new Error("Unrecognised option " + name);
      }
    },
    submit: function submit() {
      var formState = state.formState;
      if (formState.submitting) {
        return;
      }
      delete formState.submitErrors;
      delete formState.submitError;
      formState.lastSubmittedValues = _extends({}, formState.values);
      if (hasSyncErrors()) {
        markAllFieldsTouched();
        resetModifiedAfterSubmit();
        state.formState.submitFailed = true;
        notifyFormListeners();
        notifyFieldListeners();
        return; // no submit for you!!
      }

      var asyncValidationPromisesKeys = Object.keys(asyncValidationPromises);
      if (asyncValidationPromisesKeys.length) {
        // still waiting on async validation to complete...
        Promise.all(asyncValidationPromisesKeys.map(function (key) {
          return asyncValidationPromises[Number(key)];
        })).then(api.submit, console.error);
        return;
      }
      var submitIsBlocked = beforeSubmit();
      if (submitIsBlocked) {
        return;
      }
      var resolvePromise;
      var completeCalled = false;
      var complete = function complete(errors) {
        formState.submitting = false;
        var resetWhileSubmitting = formState.resetWhileSubmitting;
        if (resetWhileSubmitting) {
          formState.resetWhileSubmitting = false;
        }
        if (errors && hasAnyError(errors)) {
          formState.submitFailed = true;
          formState.submitSucceeded = false;
          formState.submitErrors = errors;
          formState.submitError = errors[FORM_ERROR];
          markAllFieldsTouched();
        } else {
          if (!resetWhileSubmitting) {
            formState.submitFailed = false;
            formState.submitSucceeded = true;
          }
          afterSubmit();
        }
        notifyFormListeners();
        notifyFieldListeners();
        completeCalled = true;
        if (resolvePromise) {
          resolvePromise(errors);
        }
        return errors;
      };
      formState.submitting = true;
      formState.submitFailed = false;
      formState.submitSucceeded = false;
      formState.lastSubmittedValues = _extends({}, formState.values);
      resetModifiedAfterSubmit();

      // onSubmit is either sync, callback or async with a Promise
      var result = onSubmit(formState.values, api, complete);
      if (!completeCalled) {
        if (result && isPromise(result)) {
          // onSubmit is async with a Promise
          notifyFormListeners(); // let everyone know we are submitting
          notifyFieldListeners(); // notify fields also
          return result.then(complete, function (error) {
            complete();
            throw error;
          });
        } else if (onSubmit.length >= 3) {
          // must be async, so we should return a Promise
          notifyFormListeners(); // let everyone know we are submitting
          notifyFieldListeners(); // notify fields also
          return new Promise(function (resolve) {
            resolvePromise = resolve;
          });
        } else {
          // onSubmit is sync
          complete(result);
        }
      }
    },
    subscribe: function subscribe(subscriber, subscription) {
      if (!subscriber) {
        throw new Error("No callback given.");
      }
      if (!subscription) {
        throw new Error("No subscription provided. What values do you want to listen to?");
      }
      var memoized = memoize$2(subscriber);
      var subscribers = state.subscribers;
      var index = subscribers.index++;
      subscribers.entries[index] = {
        subscriber: memoized,
        subscription: subscription,
        notified: false
      };
      var nextFormState = calculateNextFormState();
      notifySubscriber(memoized, subscription, nextFormState, nextFormState, filterFormState, true);
      return function () {
        delete subscribers.entries[index];
      };
    }
  };
  return api;
}

//      

/**
 * Predicate to identify inputs that can have focus() called on them
 */
var isFocusableInput = function isFocusableInput(wtf) {
  return !!(wtf && typeof wtf.focus === 'function');
};

//      
/**
 * Gets all the inputs inside all forms on the page
 */

var getAllInputs = function getAllInputs() {
  if (typeof document === 'undefined') {
    return [];
  }

  return Array.prototype.slice.call(document.forms).reduce(function (accumulator, form) {
    return accumulator.concat(Array.prototype.slice.call(form).filter(isFocusableInput));
  }, []);
};

//      
/**
 * Finds the input by looking if the name attribute path is existing in the errors object
 */

var findInput = function findInput(inputs, errors) {
  return inputs.find(function (input) {
    return input.name && getIn(errors, input.name);
  });
};

//      

var noop$3 = function noop() {};

var createDecorator = function createDecorator(getInputs, findInput$$1) {
  return function (form) {
    var focusOnFirstError = function focusOnFirstError(errors) {
      if (!getInputs) {
        getInputs = getAllInputs;
      }

      if (!findInput$$1) {
        findInput$$1 = findInput;
      }

      var firstInput = findInput$$1(getInputs(), errors);

      if (firstInput) {
        firstInput.focus();
      }
    }; // Save original submit function


    var originalSubmit = form.submit; // Subscribe to errors, and keep a local copy of them

    var state = {};
    var unsubscribe = form.subscribe(function (nextState) {
      state = nextState;
    }, {
      errors: true,
      submitErrors: true
    }); // What to do after submit

    var afterSubmit = function afterSubmit() {
      var _state = state,
          errors = _state.errors,
          submitErrors = _state.submitErrors;

      if (errors && Object.keys(errors).length) {
        focusOnFirstError(errors);
      } else if (submitErrors && Object.keys(submitErrors).length) {
        focusOnFirstError(submitErrors);
      }
    }; // Rewrite submit function


    form.submit = function () {
      var result = originalSubmit.call(form);

      if (result && typeof result.then === 'function') {
        // async
        result.then(afterSubmit, noop$3);
      } else {
        // sync
        afterSubmit();
      }

      return result;
    };

    return function () {
      unsubscribe();
      form.submit = originalSubmit;
    };
  };
};

//

var createDecorator$1 = createDecorator;

/** Detect free variable `global` from Node.js. */

var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

var _freeGlobal = freeGlobal$1;

var freeGlobal = _freeGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root$3 = freeGlobal || freeSelf || Function('return this')();

var _root = root$3;

var root$2 = _root;

/** Built-in value references. */
var Symbol$4 = root$2.Symbol;

var _Symbol = Symbol$4;

var Symbol$3 = _Symbol;

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$5.toString;

/** Built-in value references. */
var symToStringTag$1 = Symbol$3 ? Symbol$3.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag$1(value) {
  var isOwn = hasOwnProperty$4.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

var _getRawTag = getRawTag$1;

/** Used for built-in method references. */

var objectProto$4 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto$4.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString$1(value) {
  return nativeObjectToString.call(value);
}

var _objectToString = objectToString$1;

var Symbol$2 = _Symbol,
    getRawTag = _getRawTag,
    objectToString = _objectToString;

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag$2(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

var _baseGetTag = baseGetTag$2;

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

function isObject$4(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

var isObject_1 = isObject$4;

var baseGetTag$1 = _baseGetTag,
    isObject$3 = isObject_1;

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction$3(value) {
  if (!isObject$3(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag$1(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

var isFunction_1 = isFunction$3;

var root$1 = _root;

/** Used to detect overreaching core-js shims. */
var coreJsData$1 = root$1['__core-js_shared__'];

var _coreJsData = coreJsData$1;

var coreJsData = _coreJsData;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked$1(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

var _isMasked = isMasked$1;

/** Used for built-in method references. */

var funcProto$1 = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource$1(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

var _toSource = toSource$1;

var isFunction$2 = isFunction_1,
    isMasked = _isMasked,
    isObject$2 = isObject_1,
    toSource = _toSource;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto$3 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty$3).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative$1(value) {
  if (!isObject$2(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

var _baseIsNative = baseIsNative$1;

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

function getValue$1(object, key) {
  return object == null ? undefined : object[key];
}

var _getValue = getValue$1;

var baseIsNative = _baseIsNative,
    getValue = _getValue;

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative$3(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

var _getNative = getNative$3;

var getNative$2 = _getNative;

var defineProperty$1 = (function() {
  try {
    var func = getNative$2(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

var _defineProperty = defineProperty$1;

var defineProperty = _defineProperty;

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue$1(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

var _baseAssignValue = baseAssignValue$1;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

function eq$5(value, other) {
  return value === other || (value !== value && other !== other);
}

var eq_1$1 = eq$5;

var baseAssignValue = _baseAssignValue,
    eq$4 = eq_1$1;

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue$1(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty$2.call(object, key) && eq$4(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

var _assignValue = assignValue$1;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

var isArray$4 = Array.isArray;

var isArray_1 = isArray$4;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

function isObjectLike$1(value) {
  return value != null && typeof value == 'object';
}

var isObjectLike_1 = isObjectLike$1;

var baseGetTag = _baseGetTag,
    isObjectLike = isObjectLike_1;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol$3(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

var isSymbol_1 = isSymbol$3;

var isArray$3 = isArray_1,
    isSymbol$2 = isSymbol_1;

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey$2(value, object) {
  if (isArray$3(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol$2(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

var _isKey = isKey$2;

var getNative$1 = _getNative;

/* Built-in method references that are verified to be native. */
var nativeCreate$4 = getNative$1(Object, 'create');

var _nativeCreate = nativeCreate$4;

var nativeCreate$3 = _nativeCreate;

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear$1() {
  this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
  this.size = 0;
}

var _hashClear = hashClear$1;

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function hashDelete$1(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

var _hashDelete = hashDelete$1;

var nativeCreate$2 = _nativeCreate;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet$1(key) {
  var data = this.__data__;
  if (nativeCreate$2) {
    var result = data[key];
    return result === HASH_UNDEFINED$1 ? undefined : result;
  }
  return hasOwnProperty$1.call(data, key) ? data[key] : undefined;
}

var _hashGet = hashGet$1;

var nativeCreate$1 = _nativeCreate;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas$1(key) {
  var data = this.__data__;
  return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

var _hashHas = hashHas$1;

var nativeCreate = _nativeCreate;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet$1(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

var _hashSet = hashSet$1;

var hashClear = _hashClear,
    hashDelete = _hashDelete,
    hashGet = _hashGet,
    hashHas = _hashHas,
    hashSet = _hashSet;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash$1(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash$1.prototype.clear = hashClear;
Hash$1.prototype['delete'] = hashDelete;
Hash$1.prototype.get = hashGet;
Hash$1.prototype.has = hashHas;
Hash$1.prototype.set = hashSet;

var _Hash = Hash$1;

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */

function listCacheClear$1() {
  this.__data__ = [];
  this.size = 0;
}

var _listCacheClear = listCacheClear$1;

var eq$3 = eq_1$1;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf$4(array, key) {
  var length = array.length;
  while (length--) {
    if (eq$3(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

var _assocIndexOf = assocIndexOf$4;

var assocIndexOf$3 = _assocIndexOf;

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete$1(key) {
  var data = this.__data__,
      index = assocIndexOf$3(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

var _listCacheDelete = listCacheDelete$1;

var assocIndexOf$2 = _assocIndexOf;

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet$1(key) {
  var data = this.__data__,
      index = assocIndexOf$2(data, key);

  return index < 0 ? undefined : data[index][1];
}

var _listCacheGet = listCacheGet$1;

var assocIndexOf$1 = _assocIndexOf;

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas$1(key) {
  return assocIndexOf$1(this.__data__, key) > -1;
}

var _listCacheHas = listCacheHas$1;

var assocIndexOf = _assocIndexOf;

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet$1(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

var _listCacheSet = listCacheSet$1;

var listCacheClear = _listCacheClear,
    listCacheDelete = _listCacheDelete,
    listCacheGet = _listCacheGet,
    listCacheHas = _listCacheHas,
    listCacheSet = _listCacheSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache$1(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache$1.prototype.clear = listCacheClear;
ListCache$1.prototype['delete'] = listCacheDelete;
ListCache$1.prototype.get = listCacheGet;
ListCache$1.prototype.has = listCacheHas;
ListCache$1.prototype.set = listCacheSet;

var _ListCache = ListCache$1;

var getNative = _getNative,
    root = _root;

/* Built-in method references that are verified to be native. */
var Map$2 = getNative(root, 'Map');

var _Map = Map$2;

var Hash = _Hash,
    ListCache = _ListCache,
    Map$1 = _Map;

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear$1() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map$1 || ListCache),
    'string': new Hash
  };
}

var _mapCacheClear = mapCacheClear$1;

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */

function isKeyable$1(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

var _isKeyable = isKeyable$1;

var isKeyable = _isKeyable;

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData$4(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

var _getMapData = getMapData$4;

var getMapData$3 = _getMapData;

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete$1(key) {
  var result = getMapData$3(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

var _mapCacheDelete = mapCacheDelete$1;

var getMapData$2 = _getMapData;

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet$1(key) {
  return getMapData$2(this, key).get(key);
}

var _mapCacheGet = mapCacheGet$1;

var getMapData$1 = _getMapData;

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas$1(key) {
  return getMapData$1(this, key).has(key);
}

var _mapCacheHas = mapCacheHas$1;

var getMapData = _getMapData;

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet$1(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

var _mapCacheSet = mapCacheSet$1;

var mapCacheClear = _mapCacheClear,
    mapCacheDelete = _mapCacheDelete,
    mapCacheGet = _mapCacheGet,
    mapCacheHas = _mapCacheHas,
    mapCacheSet = _mapCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache$1(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache$1.prototype.clear = mapCacheClear;
MapCache$1.prototype['delete'] = mapCacheDelete;
MapCache$1.prototype.get = mapCacheGet;
MapCache$1.prototype.has = mapCacheHas;
MapCache$1.prototype.set = mapCacheSet;

var _MapCache = MapCache$1;

var MapCache = _MapCache;

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize$1(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize$1.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize$1.Cache = MapCache;

var memoize_1 = memoize$1;

var memoize = memoize_1;

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped$1(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

var _memoizeCapped = memoizeCapped$1;

var memoizeCapped = _memoizeCapped;

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath$2 = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

var _stringToPath = stringToPath$2;

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

function arrayMap$1(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

var _arrayMap = arrayMap$1;

var Symbol$1 = _Symbol,
    arrayMap = _arrayMap,
    isArray$2 = isArray_1,
    isSymbol$1 = isSymbol_1;

/** Used as references for various `Number` constants. */
var INFINITY$1 = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString$1(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray$2(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString$1) + '';
  }
  if (isSymbol$1(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
}

var _baseToString = baseToString$1;

var baseToString = _baseToString;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString$1(value) {
  return value == null ? '' : baseToString(value);
}

var toString_1 = toString$1;

var isArray$1 = isArray_1,
    isKey$1 = _isKey,
    stringToPath$1 = _stringToPath,
    toString = toString_1;

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath$1(value, object) {
  if (isArray$1(value)) {
    return value;
  }
  return isKey$1(value, object) ? [value] : stringToPath$1(toString(value));
}

var _castPath = castPath$1;

/** Used as references for various `Number` constants. */

var MAX_SAFE_INTEGER$2 = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex$1(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$2 : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

var _isIndex = isIndex$1;

var isSymbol = isSymbol_1;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey$1(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

var _toKey = toKey$1;

var assignValue = _assignValue,
    castPath = _castPath,
    isIndex = _isIndex,
    isObject$1 = isObject_1,
    toKey = _toKey;

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet$1(object, path, value, customizer) {
  if (!isObject$1(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject$1(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

var _baseSet = baseSet$1;

var baseSet = _baseSet;

/**
 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
 * it's created. Arrays are created for missing index properties while objects
 * are created for all other missing properties. Use `_.setWith` to customize
 * `path` creation.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.set(object, 'a[0].b.c', 4);
 * console.log(object.a[0].b.c);
 * // => 4
 *
 * _.set(object, ['x', '0', 'y', 'z'], 5);
 * console.log(object.x[0].y.z);
 * // => 5
 */
function set$1(object, path, value) {
  return object == null ? object : baseSet(object, path, value);
}

var set_1 = set$1;

var set$2 = /*@__PURE__*/getDefaultExportFromCjs(set_1);

/**
 * __Form context__
 *
 * A form context creates a context for the field values and allows them to be accessed by the children.
 */
var FormContext = /*#__PURE__*/reactExports.createContext({
  registerField: function registerField() {
    return function () {};
  },
  getCurrentValue: function getCurrentValue() {
    return undefined;
  },
  subscribe: function subscribe() {
    return function () {};
  }
});

/**
 * __Is disabled context__
 *
 * An is disabled context creates the context for when a value is disabled.
 */
var IsDisabledContext = /*#__PURE__*/reactExports.createContext(false);
function Form(props) {
  var formRef = reactExports.useRef(null);
  var onSubmitRef = reactExports.useRef(props.onSubmit);
  onSubmitRef.current = props.onSubmit;
  var _useState = reactExports.useState(function () {
      // Types here would break the existing API
      var finalForm = createForm({
        onSubmit: function onSubmit() {
          return onSubmitRef.current.apply(onSubmitRef, arguments);
        },
        destroyOnUnregister: true,
        initialValues: {},
        mutators: {
          setDefaultValue: function setDefaultValue(_ref, state) {
            var _ref2 = _slicedToArray(_ref, 2),
              name = _ref2[0],
              defaultValue = _ref2[1];
            if (state.formState.initialValues) {
              var initialValues = state.formState.initialValues;
              var values = state.formState.values;
              var _value = name && typeof defaultValue === 'function' ? defaultValue(initialValues[name]) : defaultValue;

              /* eslint-disable no-param-reassign */
              set$2(initialValues, name, _value);
              set$2(values, name, _value);
              /* eslint-enable */
            }
          }
        }
      });
      createDecorator$1(function () {
        return formRef.current ? Array.from(formRef.current.querySelectorAll('input')) : [];
      })(finalForm);
      return finalForm;
    }),
    _useState2 = _slicedToArray(_useState, 1),
    form = _useState2[0];
  var _useState3 = reactExports.useState({
      dirty: false,
      submitting: false
    }),
    _useState4 = _slicedToArray(_useState3, 2),
    state = _useState4[0],
    setState = _useState4[1];
  reactExports.useEffect(function () {
    var unsubscribe = form.subscribe(function (_ref3) {
      var dirty = _ref3.dirty,
        submitting = _ref3.submitting;
      setState({
        dirty: dirty,
        submitting: submitting
      });
    }, {
      dirty: true,
      submitting: true
    });
    return unsubscribe;
  }, [form]);
  var registerField = reactExports.useCallback(function (name, defaultValue, subscriber, subscription, config) {
    form.pauseValidation();
    var unsubscribe = form.registerField(name, subscriber, subscription, config);
    form.mutators.setDefaultValue(name, defaultValue);
    form.resumeValidation();
    return unsubscribe;
  }, [form]);
  var handleSubmit = function handleSubmit(e) {
    if (e) {
      e.preventDefault();
    }
    form.submit();
  };
  var handleReset = function handleReset(initialValues) {
    form.reset(initialValues);
  };
  var handleKeyDown = function handleKeyDown(e) {
    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey) && formRef.current) {
      var submitButton = formRef.current.querySelector('button:not([type]), button[type="submit"], input[type="submit"]');
      if (submitButton) {
        submitButton.click();
      }
      e.preventDefault();
    }
  };
  var _props$isDisabled = props.isDisabled,
    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
    children = props.children;
  var dirty = state.dirty,
    submitting = state.submitting;

  /**
   * This method is needed in FormContext to use it on the field level
   * to check the current value of the field in case of the component re-mounting.
   */
  var getCurrentValue = reactExports.useCallback(function (name) {
    var formState = form.getState();
    return (formState === null || formState === void 0 ? void 0 : formState.values[name]) || undefined;
  }, [form]);
  var FormContextValue = reactExports.useMemo(function () {
    return {
      registerField: registerField,
      getCurrentValue: getCurrentValue,
      subscribe: form.subscribe
    };
  }, [registerField, getCurrentValue, form.subscribe]);
  return /*#__PURE__*/React.createElement(FormContext.Provider, {
    value: FormContextValue
  }, /*#__PURE__*/React.createElement(IsDisabledContext.Provider, {
    value: isDisabled
  }, children({
    formProps: {
      onSubmit: handleSubmit,
      ref: formRef,
      onKeyDown: handleKeyDown
    },
    dirty: dirty,
    reset: handleReset,
    submitting: submitting,
    disabled: isDisabled,
    getState: function getState() {
      return form.getState();
    },
    getValues: function getValues() {
      return form.getState().values;
    },
    // TODO: deprecate
    setFieldValue: form.change
  })));
}

/**
 * __Field id__
 *
 * A field id uses the context API. It provides the id of the field to message components. This links the message with the field of screenreaders.
 */
var FieldId = /*#__PURE__*/reactExports.createContext(undefined);

/**
 * @jsxRuntime classic
 * @jsx jsx
 */

var fieldsetLabelStyles = css$2({
  display: 'inline-block',
  color: "var(--ds-text-subtle, #44546F)",
  font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  fontWeight: "var(--ds-font-weight-bold, 700)",
  marginBlockEnd: "var(--ds-space-050, 4px)",
  marginBlockStart: "var(--ds-space-0, 0px)"
});

/**
 * __Label__
 *
 * A label represents a caption for an item in a user interface.
 *
 * It's recommended that a label has a `space.050` spacing above its associated
 * control element.
 */
var Label$1 = function Label(_ref) {
  var children = _ref.children,
    htmlFor = _ref.htmlFor,
    id = _ref.id,
    testId = _ref.testId;
  return jsx("label", {
    css: fieldsetLabelStyles,
    id: id,
    htmlFor: htmlFor,
    "data-testid": testId
  }, children);
};

/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var requiredIndicatorStyles = css$2({
  color: "var(--ds-text-danger, ".concat(R400, ")"),
  fontFamily: "var(--ds-font-family-body, ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  paddingInlineStart: "var(--ds-space-025, 2px)"
});
function RequiredAsterisk$1() {
  return jsx("span", {
    css: requiredIndicatorStyles,
    "aria-hidden": "true",
    title: "required"
  }, "*");
}

function ownKeys$9(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$8(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$9(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$9(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var fieldWrapperStyles = css$2({
  marginBlockStart: "var(--ds-space-100, 8px)"
});
function isEvent(event) {
  return Boolean(event && event.target);
}
function isFunction$1(x) {
  return typeof x === 'function';
}
function usePreviousRef(current) {
  var ref = reactExports.useRef(current);

  // will be updated on the next render
  reactExports.useEffect(function () {
    ref.current = current;
  });

  // return the existing current (pre render)
  return ref;
}
function isShallowEqual(previousValue, currentValue) {
  if (previousValue === currentValue) {
    return true;
  }

  // not checking functions
  if (typeof previousValue === 'function' && typeof currentValue === 'function') {
    return true;
  }
  if (Array.isArray(previousValue) && Array.isArray(currentValue)) {
    return JSON.stringify(previousValue) === JSON.stringify(currentValue);
  }
  if (_typeof(previousValue) === 'object' && _typeof(currentValue) === 'object') {
    return JSON.stringify(previousValue) === JSON.stringify(currentValue);
  }
  return false;
}
function Field(props) {
  var _getCurrentValue;
  var _useContext = reactExports.useContext(FormContext),
    registerField = _useContext.registerField,
    getCurrentValue = _useContext.getCurrentValue;
  var isDisabled = reactExports.useContext(IsDisabledContext) || props.isDisabled || false;
  var defaultValue = isFunction$1(props.defaultValue) ? props.defaultValue() : props.defaultValue;
  var latestPropsRef = usePreviousRef(props);

  /**
   * HACK: defaultValue can potentially be an array or object which cannot be
   * passed directly into a `useEffect` dependency array, since it will trigger
   * the hook every time.
   */
  var isDefaultValueChanged = !isShallowEqual(latestPropsRef.current.defaultValue, props.defaultValue);
  var _useState = reactExports.useState({
      fieldProps: {
        onChange: function onChange() {},
        onBlur: function onBlur() {},
        onFocus: function onFocus() {},
        /* Previously, defaultValue was being set as undefined in Field.defaultProps, which
         * effectively made it an optional prop to external consumers of Field. However the
         * prop types defined defaultValue as required, so inside the component it was not
         * valid for defaultValue to be undefined. We need to suppress the error
         * after changing defaultValue to explictly be an optional prop.
         * If default value has changed we are using new default value.
         * Otherwise we need to check if we already have value for this field
         * (because we are using changing key prop to re-run field level validation, and that
         * cause the component re-mounting) to not override the actual value with the default value.
         */
        // @ts-ignore
        value: isDefaultValueChanged ? defaultValue : (_getCurrentValue = getCurrentValue(props.name)) !== null && _getCurrentValue !== void 0 ? _getCurrentValue : defaultValue
      },
      error: undefined,
      valid: false,
      meta: {
        dirty: false,
        dirtySinceLastSubmit: false,
        touched: false,
        valid: false,
        validating: false,
        submitting: false,
        submitFailed: false,
        error: undefined,
        submitError: undefined
      }
    }),
    _useState2 = _slicedToArray(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  var latestStateRef = usePreviousRef(state);
  reactExports.useEffect(function () {
    if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production' && !process.env.CI) {
      invariant(latestPropsRef.current.name, '@atlaskit/form: Field components have a required name prop');
    }
    function fieldStateToMeta() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return {
        dirty: value.dirty || false,
        dirtySinceLastSubmit: value.dirtySinceLastSubmit || false,
        touched: value.touched || false,
        valid: value.valid || false,
        submitting: value.submitting || false,
        submitFailed: value.submitFailed || false,
        error: value.error,
        submitError: value.submitError,
        validating: !!value.validating
      };
    }
    var unregister = registerField(latestPropsRef.current.name,
    /**
     * Similar as for setting initial state value.
     * Additionally we are checking if the default value is a function,
     * it is used in checkbox fields, where fields with same name and
     * defaultIsChecked should create array of values. In this situation we can't
     * override the default value on re-registering, but also we don't need to change
     * the key prop to re-run validation.
     */
    // @ts-ignore
    isDefaultValueChanged ||
    // @ts-ignore
    isFunction$1(latestPropsRef.current.defaultValue) ? latestPropsRef.current.defaultValue : latestStateRef.current.fieldProps.value, function (fieldState) {
      /**
       * Do not update dirtySinceLastSubmit until submission has finished.
       */
      var modifiedDirtySinceLastSubmit = fieldState.submitting ? latestStateRef.current.meta.dirtySinceLastSubmit : fieldState.dirtySinceLastSubmit;

      /**
       * Do not update submitFailed until submission has finished.
       */
      var modifiedSubmitFailed = fieldState.submitting ? latestStateRef.current.meta.submitFailed : fieldState.submitFailed;

      /**
       * Do not use submitError if the value has changed.
       */
      var modifiedSubmitError = modifiedDirtySinceLastSubmit && latestPropsRef.current.validate ? undefined : fieldState.submitError;
      var modifiedError = modifiedSubmitError || (fieldState.touched || fieldState.dirty) && fieldState.error;

      /**
       * If there has been a submit error, then use logic in modifiedError to determine validity,
       * so we can determine when there is a submit error which we do not want to display
       * because the value has been changed.
       */
      var modifiedValid = modifiedSubmitFailed ? modifiedError === undefined : fieldState.valid;
      function getTransform(eventOrValue, currentValue) {
        if (latestPropsRef.current.transform) {
          return latestPropsRef.current.transform(eventOrValue, currentValue);
        }
        if (isEvent(eventOrValue)) {
          var currentTarget = eventOrValue.currentTarget;
          if (currentTarget.type === 'checkbox') {
            if (currentTarget.checked) {
              return currentTarget.value || true;
            }
            return currentTarget.value ? undefined : false;
          } else if (currentTarget) {
            return currentTarget.value;
          }
        } else {
          return eventOrValue;
        }
      }
      setState({
        fieldProps: {
          onChange: function onChange(e) {
            fieldState.change(getTransform(e, fieldState.value));
          },
          onBlur: fieldState.blur,
          onFocus: fieldState.focus,
          value: fieldState.value
        },
        error: modifiedError || undefined,
        /**
         * The following parameters are optionally typed in final-form to indicate that not all parameters need
         * to be subscribed to. We cast them as booleans (using || false), since this is what they are semantically.
         */
        valid: modifiedValid || false,
        meta: fieldStateToMeta(fieldState)
      });
    }, {
      dirty: true,
      dirtySinceLastSubmit: true,
      touched: true,
      valid: true,
      submitting: true,
      submitFailed: true,
      value: true,
      error: true,
      submitError: true,
      validating: true
    }, {
      getValidator: function getValidator() {
        return function validate(value, formState, fieldState) {
          var supplied = latestPropsRef.current.validate;
          if (supplied && fieldState) {
            return supplied(value, formState, fieldStateToMeta(fieldState));
          }
        };
      }
    });
    return unregister;
  }, [latestPropsRef, latestStateRef, registerField, props.name, isDefaultValueChanged]);
  var fieldId = reactExports.useMemo(
  // eslint-disable-next-line @repo/internal/react/disallow-unstable-values
  function () {
    return props.id ? props.id : "".concat(props.name, "-").concat(uid({
      id: props.name
    }));
  }, [props.id, props.name]);
  var getDescribedBy = function getDescribedBy() {
    var value = '';
    if (state.error) {
      value += "".concat(fieldId, "-error ");
    }
    if (state.valid) {
      value += "".concat(fieldId, "-valid ");
    }
    return "".concat(value).concat(fieldId, "-helper");
  };
  var extendedFieldProps = _objectSpread$8(_objectSpread$8({}, state.fieldProps), {}, {
    name: props.name,
    isDisabled: isDisabled,
    isInvalid: Boolean(state.error),
    isRequired: Boolean(props.isRequired),
    'aria-invalid': state.error ? 'true' : 'false',
    'aria-describedby': getDescribedBy(),
    'aria-labelledby': "".concat(fieldId, "-label"),
    id: fieldId
  });
  return jsx("div", {
    css: fieldWrapperStyles,
    "data-testid": props.testId
  }, props.label && jsx(Label$1, {
    htmlFor: fieldId,
    id: "".concat(fieldId, "-label"),
    testId: props.testId && "".concat(props.testId, "--label")
  }, props.label, props.isRequired && jsx(RequiredAsterisk$1, null), props.elementAfterLabel), jsx(FieldId.Provider, {
    value: fieldId
  }, props.children({
    fieldProps: extendedFieldProps,
    error: state.error,
    valid: state.valid,
    meta: state.meta
  })));
}

var error$1 = {};

var error = {};

/**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::8547c3f91abc335ca9c5bbfd88dd7340>>
 * @codegenCommand yarn build:icon-glyphs
 */

Object.defineProperty(error, "__esModule", {
  value: true
});
error.default = void 0;
var _react$g = _interopRequireDefault$g(reactExports);
var _UNSAFE_baseNew$6 = _interopRequireDefault$g(require$$1);
function _interopRequireDefault$g(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * ⚠️ EXPERIMENTAL ⚠️ - New icons are in alpha - and subject to change or removal in future minor or patch releases.
 * Please reach out in #icon-contributions before using these in production.
 *
 * Icon: "Error".
 * Category: single-purpose
 * Location: @atlaskit/icon
 * Usage guidance: Single purpose - Reserved for when there is an error.
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
const ErrorIcon$1 = props => /*#__PURE__*/_react$g.default.createElement(_UNSAFE_baseNew$6.default, Object.assign({
  dangerouslySetGlyph: `<path fill="currentcolor" fill-rule="evenodd" d="M6.586.604a2 2 0 0 1 2.828 0l5.982 5.982a2 2 0 0 1 0 2.828l-5.982 5.983a2 2 0 0 1-2.828 0L.604 9.414a2 2 0 0 1 0-2.828zM7.25 9V3.75h1.5V9zM8 12.25a1 1 0 1 0 0-2 1 1 0 0 0 0 2" clip-rule="evenodd"/>`
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));
ErrorIcon$1.displayName = 'ErrorIcon';
error.default = ErrorIcon$1;

Object.defineProperty(error$1, "__esModule", {
  value: true
});
var default_1$8 = error$1.default = void 0;
var _react$f = _interopRequireDefault$f(reactExports);
var _base$5 = require$$1$1;
var _error = _interopRequireDefault$f(error);
function _interopRequireDefault$f(e) { return e && e.__esModule ? e : { default: e }; }
const ErrorIcon = props => /*#__PURE__*/_react$f.default.createElement(_base$5.UNSAFE_IconFacade, Object.assign({
  dangerouslySetGlyph: `<svg width="24" height="24" viewBox="0 0 24 24" role="presentation"><g fill-rule="evenodd"><path fill="currentcolor" d="M13.416 4.417a2 2 0 0 0-2.832 0l-6.168 6.167a2 2 0 0 0 0 2.833l6.168 6.167a2 2 0 0 0 2.832 0l6.168-6.167a2 2 0 0 0 0-2.833z"/><path fill="inherit" d="M12 14a1 1 0 0 1-1-1V8a1 1 0 0 1 2 0v5a1 1 0 0 1-1 1m0 3a1 1 0 0 1 0-2 1 1 0 0 1 0 2"/></g></svg>`
}, props, {
  newIcon: _error.default
}));
ErrorIcon.displayName = 'ErrorIcon';
default_1$8 = error$1.default = ErrorIcon;

var isCheckBoxInput = (element) => element.type === 'checkbox';

var isDateObject = (value) => value instanceof Date;

var isNullOrUndefined = (value) => value == null;

const isObjectType = (value) => typeof value === 'object';
var isObject = (value) => !isNullOrUndefined(value) &&
    !Array.isArray(value) &&
    isObjectType(value) &&
    !isDateObject(value);

var getEventValue = (event) => isObject(event) && event.target
    ? isCheckBoxInput(event.target)
        ? event.target.checked
        : event.target.value
    : event;

var getNodeParentName = (name) => name.substring(0, name.search(/\.\d+(\.|$)/)) || name;

var isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));

var isPlainObject = (tempObject) => {
    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;
    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));
};

var isWeb = typeof window !== 'undefined' &&
    typeof window.HTMLElement !== 'undefined' &&
    typeof document !== 'undefined';

function cloneObject(data) {
    let copy;
    const isArray = Array.isArray(data);
    if (data instanceof Date) {
        copy = new Date(data);
    }
    else if (data instanceof Set) {
        copy = new Set(data);
    }
    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&
        (isArray || isObject(data))) {
        copy = isArray ? [] : {};
        if (!isArray && !isPlainObject(data)) {
            copy = data;
        }
        else {
            for (const key in data) {
                if (data.hasOwnProperty(key)) {
                    copy[key] = cloneObject(data[key]);
                }
            }
        }
    }
    else {
        return data;
    }
    return copy;
}

var compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];

var isUndefined = (val) => val === undefined;

var get = (object, path, defaultValue) => {
    if (!path || !isObject(object)) {
        return defaultValue;
    }
    const result = compact(path.split(/[,[\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);
    return isUndefined(result) || result === object
        ? isUndefined(object[path])
            ? defaultValue
            : object[path]
        : result;
};

var isBoolean = (value) => typeof value === 'boolean';

var isKey = (value) => /^\w*$/.test(value);

var stringToPath = (input) => compact(input.replace(/["|']|\]/g, '').split(/\.|\[/));

var set = (object, path, value) => {
    let index = -1;
    const tempPath = isKey(path) ? [path] : stringToPath(path);
    const length = tempPath.length;
    const lastIndex = length - 1;
    while (++index < length) {
        const key = tempPath[index];
        let newValue = value;
        if (index !== lastIndex) {
            const objValue = object[key];
            newValue =
                isObject(objValue) || Array.isArray(objValue)
                    ? objValue
                    : !isNaN(+tempPath[index + 1])
                        ? []
                        : {};
        }
        if (key === '__proto__') {
            return;
        }
        object[key] = newValue;
        object = object[key];
    }
    return object;
};

const EVENTS = {
    BLUR: 'blur',
    FOCUS_OUT: 'focusout',
    CHANGE: 'change',
};
const VALIDATION_MODE = {
    onBlur: 'onBlur',
    onChange: 'onChange',
    onSubmit: 'onSubmit',
    onTouched: 'onTouched',
    all: 'all',
};
const INPUT_VALIDATION_RULES = {
    max: 'max',
    min: 'min',
    maxLength: 'maxLength',
    minLength: 'minLength',
    pattern: 'pattern',
    required: 'required',
    validate: 'validate',
};

const HookFormContext = React.createContext(null);
/**
 * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.
 *
 * @remarks
 * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)
 *
 * @returns return all useForm methods
 *
 * @example
 * ```tsx
 * function App() {
 *   const methods = useForm();
 *   const onSubmit = data => console.log(data);
 *
 *   return (
 *     <FormProvider {...methods} >
 *       <form onSubmit={methods.handleSubmit(onSubmit)}>
 *         <NestedInput />
 *         <input type="submit" />
 *       </form>
 *     </FormProvider>
 *   );
 * }
 *
 *  function NestedInput() {
 *   const { register } = useFormContext(); // retrieve all hook methods
 *   return <input {...register("test")} />;
 * }
 * ```
 */
const useFormContext = () => React.useContext(HookFormContext);

var getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {
    const result = {
        defaultValues: control._defaultValues,
    };
    for (const key in formState) {
        Object.defineProperty(result, key, {
            get: () => {
                const _key = key;
                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {
                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;
                }
                localProxyFormState && (localProxyFormState[_key] = true);
                return formState[_key];
            },
        });
    }
    return result;
};

var isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;

var shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {
    updateFormState(formStateData);
    const { name, ...formState } = formStateData;
    return (isEmptyObject(formState) ||
        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||
        Object.keys(formState).find((key) => _proxyFormState[key] ===
            (!isRoot || VALIDATION_MODE.all)));
};

var convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);

var shouldSubscribeByName = (name, signalName, exact) => !name ||
    !signalName ||
    name === signalName ||
    convertToArrayPayload(name).some((currentName) => currentName &&
        (exact
            ? currentName === signalName
            : currentName.startsWith(signalName) ||
                signalName.startsWith(currentName)));

function useSubscribe(props) {
    const _props = React.useRef(props);
    _props.current = props;
    React.useEffect(() => {
        const subscription = !props.disabled &&
            _props.current.subject &&
            _props.current.subject.subscribe({
                next: _props.current.next,
            });
        return () => {
            subscription && subscription.unsubscribe();
        };
    }, [props.disabled]);
}

/**
 * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.
 *
 * @remarks
 * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)
 *
 * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}
 *
 * @example
 * ```tsx
 * function App() {
 *   const { register, handleSubmit, control } = useForm({
 *     defaultValues: {
 *     firstName: "firstName"
 *   }});
 *   const { dirtyFields } = useFormState({
 *     control
 *   });
 *   const onSubmit = (data) => console.log(data);
 *
 *   return (
 *     <form onSubmit={handleSubmit(onSubmit)}>
 *       <input {...register("firstName")} placeholder="First Name" />
 *       {dirtyFields.firstName && <p>Field is dirty.</p>}
 *       <input type="submit" />
 *     </form>
 *   );
 * }
 * ```
 */
function useFormState(props) {
    const methods = useFormContext();
    const { control = methods.control, disabled, name, exact } = props || {};
    const [formState, updateFormState] = React.useState(control._formState);
    const _mounted = React.useRef(true);
    const _localProxyFormState = React.useRef({
        isDirty: false,
        isLoading: false,
        dirtyFields: false,
        touchedFields: false,
        validatingFields: false,
        isValidating: false,
        isValid: false,
        errors: false,
    });
    const _name = React.useRef(name);
    _name.current = name;
    useSubscribe({
        disabled,
        next: (value) => _mounted.current &&
            shouldSubscribeByName(_name.current, value.name, exact) &&
            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&
            updateFormState({
                ...control._formState,
                ...value,
            }),
        subject: control._subjects.state,
    });
    React.useEffect(() => {
        _mounted.current = true;
        _localProxyFormState.current.isValid && control._updateValid(true);
        return () => {
            _mounted.current = false;
        };
    }, [control]);
    return getProxyFormState(formState, control, _localProxyFormState.current, false);
}

var isString = (value) => typeof value === 'string';

var generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {
    if (isString(names)) {
        isGlobal && _names.watch.add(names);
        return get(formValues, names, defaultValue);
    }
    if (Array.isArray(names)) {
        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));
    }
    isGlobal && (_names.watchAll = true);
    return formValues;
};

/**
 * Custom hook to subscribe to field change and isolate re-rendering at the component level.
 *
 * @remarks
 *
 * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)
 *
 * @example
 * ```tsx
 * const { control } = useForm();
 * const values = useWatch({
 *   name: "fieldName"
 *   control,
 * })
 * ```
 */
function useWatch(props) {
    const methods = useFormContext();
    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};
    const _name = React.useRef(name);
    _name.current = name;
    useSubscribe({
        disabled,
        subject: control._subjects.values,
        next: (formState) => {
            if (shouldSubscribeByName(_name.current, formState.name, exact)) {
                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));
            }
        },
    });
    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));
    React.useEffect(() => control._removeUnmounted());
    return value;
}

/**
 * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.
 *
 * @remarks
 * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)
 *
 * @param props - the path name to the form field value, and validation rules.
 *
 * @returns field properties, field and form state. {@link UseControllerReturn}
 *
 * @example
 * ```tsx
 * function Input(props) {
 *   const { field, fieldState, formState } = useController(props);
 *   return (
 *     <div>
 *       <input {...field} placeholder={props.name} />
 *       <p>{fieldState.isTouched && "Touched"}</p>
 *       <p>{formState.isSubmitted ? "submitted" : ""}</p>
 *     </div>
 *   );
 * }
 * ```
 */
function useController(props) {
    const methods = useFormContext();
    const { name, disabled, control = methods.control, shouldUnregister } = props;
    const isArrayField = isNameInFieldArray(control._names.array, name);
    const value = useWatch({
        control,
        name,
        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),
        exact: true,
    });
    const formState = useFormState({
        control,
        name,
        exact: true,
    });
    const _registerProps = React.useRef(control.register(name, {
        ...props.rules,
        value,
        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),
    }));
    React.useEffect(() => {
        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;
        const updateMounted = (name, value) => {
            const field = get(control._fields, name);
            if (field && field._f) {
                field._f.mount = value;
            }
        };
        updateMounted(name, true);
        if (_shouldUnregisterField) {
            const value = cloneObject(get(control._options.defaultValues, name));
            set(control._defaultValues, name, value);
            if (isUndefined(get(control._formValues, name))) {
                set(control._formValues, name, value);
            }
        }
        return () => {
            (isArrayField
                ? _shouldUnregisterField && !control._state.action
                : _shouldUnregisterField)
                ? control.unregister(name)
                : updateMounted(name, false);
        };
    }, [name, control, isArrayField, shouldUnregister]);
    React.useEffect(() => {
        if (get(control._fields, name)) {
            control._updateDisabledField({
                disabled,
                fields: control._fields,
                name,
                value: get(control._fields, name)._f.value,
            });
        }
    }, [disabled, name, control]);
    return {
        field: {
            name,
            value,
            ...(isBoolean(disabled) || formState.disabled
                ? { disabled: formState.disabled || disabled }
                : {}),
            onChange: React.useCallback((event) => _registerProps.current.onChange({
                target: {
                    value: getEventValue(event),
                    name: name,
                },
                type: EVENTS.CHANGE,
            }), [name]),
            onBlur: React.useCallback(() => _registerProps.current.onBlur({
                target: {
                    value: get(control._formValues, name),
                    name: name,
                },
                type: EVENTS.BLUR,
            }), [name, control]),
            ref: React.useCallback((elm) => {
                const field = get(control._fields, name);
                if (field && elm) {
                    field._f.ref = {
                        focus: () => elm.focus(),
                        select: () => elm.select(),
                        setCustomValidity: (message) => elm.setCustomValidity(message),
                        reportValidity: () => elm.reportValidity(),
                    };
                }
            }, [control._fields, name]),
        },
        formState,
        fieldState: Object.defineProperties({}, {
            invalid: {
                enumerable: true,
                get: () => !!get(formState.errors, name),
            },
            isDirty: {
                enumerable: true,
                get: () => !!get(formState.dirtyFields, name),
            },
            isTouched: {
                enumerable: true,
                get: () => !!get(formState.touchedFields, name),
            },
            isValidating: {
                enumerable: true,
                get: () => !!get(formState.validatingFields, name),
            },
            error: {
                enumerable: true,
                get: () => get(formState.errors, name),
            },
        }),
    };
}

/**
 * Component based on `useController` hook to work with controlled component.
 *
 * @remarks
 * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)
 *
 * @param props - the path name to the form field value, and validation rules.
 *
 * @returns provide field handler functions, field and form state.
 *
 * @example
 * ```tsx
 * function App() {
 *   const { control } = useForm<FormValues>({
 *     defaultValues: {
 *       test: ""
 *     }
 *   });
 *
 *   return (
 *     <form>
 *       <Controller
 *         control={control}
 *         name="test"
 *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (
 *           <>
 *             <input
 *               onChange={onChange} // send value to hook form
 *               onBlur={onBlur} // notify when input is touched
 *               value={value} // return updated value
 *               ref={ref} // set ref for focus management
 *             />
 *             <p>{formState.isSubmitted ? "submitted" : ""}</p>
 *             <p>{fieldState.isTouched ? "touched" : ""}</p>
 *           </>
 *         )}
 *       />
 *     </form>
 *   );
 * }
 * ```
 */
const Controller = (props) => props.render(useController(props));

var appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria
    ? {
        ...errors[name],
        types: {
            ...(errors[name] && errors[name].types ? errors[name].types : {}),
            [type]: message || true,
        },
    }
    : {};

var getValidationModes = (mode) => ({
    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,
    isOnBlur: mode === VALIDATION_MODE.onBlur,
    isOnChange: mode === VALIDATION_MODE.onChange,
    isOnAll: mode === VALIDATION_MODE.all,
    isOnTouch: mode === VALIDATION_MODE.onTouched,
});

var isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&
    (_names.watchAll ||
        _names.watch.has(name) ||
        [..._names.watch].some((watchName) => name.startsWith(watchName) &&
            /^\.\w+/.test(name.slice(watchName.length))));

const iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {
    for (const key of fieldsNames || Object.keys(fields)) {
        const field = get(fields, key);
        if (field) {
            const { _f, ...currentField } = field;
            if (_f) {
                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {
                    return true;
                }
                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {
                    return true;
                }
                else {
                    if (iterateFieldsByAction(currentField, action)) {
                        break;
                    }
                }
            }
            else if (isObject(currentField)) {
                if (iterateFieldsByAction(currentField, action)) {
                    break;
                }
            }
        }
    }
    return;
};

var updateFieldArrayRootError = (errors, error, name) => {
    const fieldArrayErrors = convertToArrayPayload(get(errors, name));
    set(fieldArrayErrors, 'root', error[name]);
    set(errors, name, fieldArrayErrors);
    return errors;
};

var isFileInput = (element) => element.type === 'file';

var isFunction = (value) => typeof value === 'function';

var isHTMLElement$1 = (value) => {
    if (!isWeb) {
        return false;
    }
    const owner = value ? value.ownerDocument : 0;
    return (value instanceof
        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));
};

var isMessage = (value) => isString(value);

var isRadioInput = (element) => element.type === 'radio';

var isRegex = (value) => value instanceof RegExp;

const defaultResult = {
    value: false,
    isValid: false,
};
const validResult = { value: true, isValid: true };
var getCheckboxValue = (options) => {
    if (Array.isArray(options)) {
        if (options.length > 1) {
            const values = options
                .filter((option) => option && option.checked && !option.disabled)
                .map((option) => option.value);
            return { value: values, isValid: !!values.length };
        }
        return options[0].checked && !options[0].disabled
            ? // @ts-expect-error expected to work in the browser
                options[0].attributes && !isUndefined(options[0].attributes.value)
                    ? isUndefined(options[0].value) || options[0].value === ''
                        ? validResult
                        : { value: options[0].value, isValid: true }
                    : validResult
            : defaultResult;
    }
    return defaultResult;
};

const defaultReturn = {
    isValid: false,
    value: null,
};
var getRadioValue = (options) => Array.isArray(options)
    ? options.reduce((previous, option) => option && option.checked && !option.disabled
        ? {
            isValid: true,
            value: option.value,
        }
        : previous, defaultReturn)
    : defaultReturn;

function getValidateError(result, ref, type = 'validate') {
    if (isMessage(result) ||
        (Array.isArray(result) && result.every(isMessage)) ||
        (isBoolean(result) && !result)) {
        return {
            type,
            message: isMessage(result) ? result : '',
            ref,
        };
    }
}

var getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)
    ? validationData
    : {
        value: validationData,
        message: '',
    };

var validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {
    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;
    const inputValue = get(formValues, name);
    if (!mount || disabled) {
        return {};
    }
    const inputRef = refs ? refs[0] : ref;
    const setCustomValidity = (message) => {
        if (shouldUseNativeValidation && inputRef.reportValidity) {
            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');
            inputRef.reportValidity();
        }
    };
    const error = {};
    const isRadio = isRadioInput(ref);
    const isCheckBox = isCheckBoxInput(ref);
    const isRadioOrCheckbox = isRadio || isCheckBox;
    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&
        isUndefined(ref.value) &&
        isUndefined(inputValue)) ||
        (isHTMLElement$1(ref) && ref.value === '') ||
        inputValue === '' ||
        (Array.isArray(inputValue) && !inputValue.length);
    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);
    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {
        const message = exceedMax ? maxLengthMessage : minLengthMessage;
        error[name] = {
            type: exceedMax ? maxType : minType,
            message,
            ref,
            ...appendErrorsCurry(exceedMax ? maxType : minType, message),
        };
    };
    if (isFieldArray
        ? !Array.isArray(inputValue) || !inputValue.length
        : required &&
            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||
                (isBoolean(inputValue) && !inputValue) ||
                (isCheckBox && !getCheckboxValue(refs).isValid) ||
                (isRadio && !getRadioValue(refs).isValid))) {
        const { value, message } = isMessage(required)
            ? { value: !!required, message: required }
            : getValueAndMessage(required);
        if (value) {
            error[name] = {
                type: INPUT_VALIDATION_RULES.required,
                message,
                ref: inputRef,
                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),
            };
            if (!validateAllFieldCriteria) {
                setCustomValidity(message);
                return error;
            }
        }
    }
    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {
        let exceedMax;
        let exceedMin;
        const maxOutput = getValueAndMessage(max);
        const minOutput = getValueAndMessage(min);
        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {
            const valueNumber = ref.valueAsNumber ||
                (inputValue ? +inputValue : inputValue);
            if (!isNullOrUndefined(maxOutput.value)) {
                exceedMax = valueNumber > maxOutput.value;
            }
            if (!isNullOrUndefined(minOutput.value)) {
                exceedMin = valueNumber < minOutput.value;
            }
        }
        else {
            const valueDate = ref.valueAsDate || new Date(inputValue);
            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);
            const isTime = ref.type == 'time';
            const isWeek = ref.type == 'week';
            if (isString(maxOutput.value) && inputValue) {
                exceedMax = isTime
                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)
                    : isWeek
                        ? inputValue > maxOutput.value
                        : valueDate > new Date(maxOutput.value);
            }
            if (isString(minOutput.value) && inputValue) {
                exceedMin = isTime
                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)
                    : isWeek
                        ? inputValue < minOutput.value
                        : valueDate < new Date(minOutput.value);
            }
        }
        if (exceedMax || exceedMin) {
            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);
            if (!validateAllFieldCriteria) {
                setCustomValidity(error[name].message);
                return error;
            }
        }
    }
    if ((maxLength || minLength) &&
        !isEmpty &&
        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {
        const maxLengthOutput = getValueAndMessage(maxLength);
        const minLengthOutput = getValueAndMessage(minLength);
        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&
            inputValue.length > +maxLengthOutput.value;
        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&
            inputValue.length < +minLengthOutput.value;
        if (exceedMax || exceedMin) {
            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);
            if (!validateAllFieldCriteria) {
                setCustomValidity(error[name].message);
                return error;
            }
        }
    }
    if (pattern && !isEmpty && isString(inputValue)) {
        const { value: patternValue, message } = getValueAndMessage(pattern);
        if (isRegex(patternValue) && !inputValue.match(patternValue)) {
            error[name] = {
                type: INPUT_VALIDATION_RULES.pattern,
                message,
                ref,
                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),
            };
            if (!validateAllFieldCriteria) {
                setCustomValidity(message);
                return error;
            }
        }
    }
    if (validate) {
        if (isFunction(validate)) {
            const result = await validate(inputValue, formValues);
            const validateError = getValidateError(result, inputRef);
            if (validateError) {
                error[name] = {
                    ...validateError,
                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),
                };
                if (!validateAllFieldCriteria) {
                    setCustomValidity(validateError.message);
                    return error;
                }
            }
        }
        else if (isObject(validate)) {
            let validationResult = {};
            for (const key in validate) {
                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {
                    break;
                }
                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);
                if (validateError) {
                    validationResult = {
                        ...validateError,
                        ...appendErrorsCurry(key, validateError.message),
                    };
                    setCustomValidity(validateError.message);
                    if (validateAllFieldCriteria) {
                        error[name] = validationResult;
                    }
                }
            }
            if (!isEmptyObject(validationResult)) {
                error[name] = {
                    ref: inputRef,
                    ...validationResult,
                };
                if (!validateAllFieldCriteria) {
                    return error;
                }
            }
        }
    }
    setCustomValidity(true);
    return error;
};

function baseGet(object, updatePath) {
    const length = updatePath.slice(0, -1).length;
    let index = 0;
    while (index < length) {
        object = isUndefined(object) ? index++ : object[updatePath[index++]];
    }
    return object;
}
function isEmptyArray(obj) {
    for (const key in obj) {
        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {
            return false;
        }
    }
    return true;
}
function unset(object, path) {
    const paths = Array.isArray(path)
        ? path
        : isKey(path)
            ? [path]
            : stringToPath(path);
    const childObject = paths.length === 1 ? object : baseGet(object, paths);
    const index = paths.length - 1;
    const key = paths[index];
    if (childObject) {
        delete childObject[key];
    }
    if (index !== 0 &&
        ((isObject(childObject) && isEmptyObject(childObject)) ||
            (Array.isArray(childObject) && isEmptyArray(childObject)))) {
        unset(object, paths.slice(0, -1));
    }
    return object;
}

var createSubject = () => {
    let _observers = [];
    const next = (value) => {
        for (const observer of _observers) {
            observer.next && observer.next(value);
        }
    };
    const subscribe = (observer) => {
        _observers.push(observer);
        return {
            unsubscribe: () => {
                _observers = _observers.filter((o) => o !== observer);
            },
        };
    };
    const unsubscribe = () => {
        _observers = [];
    };
    return {
        get observers() {
            return _observers;
        },
        next,
        subscribe,
        unsubscribe,
    };
};

var isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);

function deepEqual(object1, object2) {
    if (isPrimitive(object1) || isPrimitive(object2)) {
        return object1 === object2;
    }
    if (isDateObject(object1) && isDateObject(object2)) {
        return object1.getTime() === object2.getTime();
    }
    const keys1 = Object.keys(object1);
    const keys2 = Object.keys(object2);
    if (keys1.length !== keys2.length) {
        return false;
    }
    for (const key of keys1) {
        const val1 = object1[key];
        if (!keys2.includes(key)) {
            return false;
        }
        if (key !== 'ref') {
            const val2 = object2[key];
            if ((isDateObject(val1) && isDateObject(val2)) ||
                (isObject(val1) && isObject(val2)) ||
                (Array.isArray(val1) && Array.isArray(val2))
                ? !deepEqual(val1, val2)
                : val1 !== val2) {
                return false;
            }
        }
    }
    return true;
}

var isMultipleSelect = (element) => element.type === `select-multiple`;

var isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);

var live = (ref) => isHTMLElement$1(ref) && ref.isConnected;

var objectHasFunction = (data) => {
    for (const key in data) {
        if (isFunction(data[key])) {
            return true;
        }
    }
    return false;
};

function markFieldsDirty(data, fields = {}) {
    const isParentNodeArray = Array.isArray(data);
    if (isObject(data) || isParentNodeArray) {
        for (const key in data) {
            if (Array.isArray(data[key]) ||
                (isObject(data[key]) && !objectHasFunction(data[key]))) {
                fields[key] = Array.isArray(data[key]) ? [] : {};
                markFieldsDirty(data[key], fields[key]);
            }
            else if (!isNullOrUndefined(data[key])) {
                fields[key] = true;
            }
        }
    }
    return fields;
}
function getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {
    const isParentNodeArray = Array.isArray(data);
    if (isObject(data) || isParentNodeArray) {
        for (const key in data) {
            if (Array.isArray(data[key]) ||
                (isObject(data[key]) && !objectHasFunction(data[key]))) {
                if (isUndefined(formValues) ||
                    isPrimitive(dirtyFieldsFromValues[key])) {
                    dirtyFieldsFromValues[key] = Array.isArray(data[key])
                        ? markFieldsDirty(data[key], [])
                        : { ...markFieldsDirty(data[key]) };
                }
                else {
                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);
                }
            }
            else {
                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);
            }
        }
    }
    return dirtyFieldsFromValues;
}
var getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));

var getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)
    ? value
    : valueAsNumber
        ? value === ''
            ? NaN
            : value
                ? +value
                : value
        : valueAsDate && isString(value)
            ? new Date(value)
            : setValueAs
                ? setValueAs(value)
                : value;

function getFieldValue(_f) {
    const ref = _f.ref;
    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {
        return;
    }
    if (isFileInput(ref)) {
        return ref.files;
    }
    if (isRadioInput(ref)) {
        return getRadioValue(_f.refs).value;
    }
    if (isMultipleSelect(ref)) {
        return [...ref.selectedOptions].map(({ value }) => value);
    }
    if (isCheckBoxInput(ref)) {
        return getCheckboxValue(_f.refs).value;
    }
    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);
}

var getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {
    const fields = {};
    for (const name of fieldsNames) {
        const field = get(_fields, name);
        field && set(fields, name, field._f);
    }
    return {
        criteriaMode,
        names: [...fieldsNames],
        fields,
        shouldUseNativeValidation,
    };
};

var getRuleValue = (rule) => isUndefined(rule)
    ? rule
    : isRegex(rule)
        ? rule.source
        : isObject(rule)
            ? isRegex(rule.value)
                ? rule.value.source
                : rule.value
            : rule;

const ASYNC_FUNCTION = 'AsyncFunction';
var hasPromiseValidation = (fieldReference) => (!fieldReference || !fieldReference.validate) &&
    !!((isFunction(fieldReference.validate) &&
        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||
        (isObject(fieldReference.validate) &&
            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));

var hasValidation = (options) => options.mount &&
    (options.required ||
        options.min ||
        options.max ||
        options.maxLength ||
        options.minLength ||
        options.pattern ||
        options.validate);

function schemaErrorLookup(errors, _fields, name) {
    const error = get(errors, name);
    if (error || isKey(name)) {
        return {
            error,
            name,
        };
    }
    const names = name.split('.');
    while (names.length) {
        const fieldName = names.join('.');
        const field = get(_fields, fieldName);
        const foundError = get(errors, fieldName);
        if (field && !Array.isArray(field) && name !== fieldName) {
            return { name };
        }
        if (foundError && foundError.type) {
            return {
                name: fieldName,
                error: foundError,
            };
        }
        names.pop();
    }
    return {
        name,
    };
}

var skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {
    if (mode.isOnAll) {
        return false;
    }
    else if (!isSubmitted && mode.isOnTouch) {
        return !(isTouched || isBlurEvent);
    }
    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {
        return !isBlurEvent;
    }
    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {
        return isBlurEvent;
    }
    return true;
};

var unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);

const defaultOptions = {
    mode: VALIDATION_MODE.onSubmit,
    reValidateMode: VALIDATION_MODE.onChange,
    shouldFocusError: true,
};
function createFormControl(props = {}) {
    let _options = {
        ...defaultOptions,
        ...props,
    };
    let _formState = {
        submitCount: 0,
        isDirty: false,
        isLoading: isFunction(_options.defaultValues),
        isValidating: false,
        isSubmitted: false,
        isSubmitting: false,
        isSubmitSuccessful: false,
        isValid: false,
        touchedFields: {},
        dirtyFields: {},
        validatingFields: {},
        errors: _options.errors || {},
        disabled: _options.disabled || false,
    };
    let _fields = {};
    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)
        ? cloneObject(_options.defaultValues || _options.values) || {}
        : {};
    let _formValues = _options.shouldUnregister
        ? {}
        : cloneObject(_defaultValues);
    let _state = {
        action: false,
        mount: false,
        watch: false,
    };
    let _names = {
        mount: new Set(),
        unMount: new Set(),
        array: new Set(),
        watch: new Set(),
    };
    let delayErrorCallback;
    let timer = 0;
    const _proxyFormState = {
        isDirty: false,
        dirtyFields: false,
        validatingFields: false,
        touchedFields: false,
        isValidating: false,
        isValid: false,
        errors: false,
    };
    const _subjects = {
        values: createSubject(),
        array: createSubject(),
        state: createSubject(),
    };
    const validationModeBeforeSubmit = getValidationModes(_options.mode);
    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);
    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;
    const debounce = (callback) => (wait) => {
        clearTimeout(timer);
        timer = setTimeout(callback, wait);
    };
    const _updateValid = async (shouldUpdateValid) => {
        if (_proxyFormState.isValid || shouldUpdateValid) {
            const isValid = _options.resolver
                ? isEmptyObject((await _executeSchema()).errors)
                : await executeBuiltInValidation(_fields, true);
            if (isValid !== _formState.isValid) {
                _subjects.state.next({
                    isValid,
                });
            }
        }
    };
    const _updateIsValidating = (names, isValidating) => {
        if (_proxyFormState.isValidating || _proxyFormState.validatingFields) {
            (names || Array.from(_names.mount)).forEach((name) => {
                if (name) {
                    isValidating
                        ? set(_formState.validatingFields, name, isValidating)
                        : unset(_formState.validatingFields, name);
                }
            });
            _subjects.state.next({
                validatingFields: _formState.validatingFields,
                isValidating: !isEmptyObject(_formState.validatingFields),
            });
        }
    };
    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {
        if (args && method) {
            _state.action = true;
            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {
                const fieldValues = method(get(_fields, name), args.argA, args.argB);
                shouldSetValues && set(_fields, name, fieldValues);
            }
            if (shouldUpdateFieldsAndState &&
                Array.isArray(get(_formState.errors, name))) {
                const errors = method(get(_formState.errors, name), args.argA, args.argB);
                shouldSetValues && set(_formState.errors, name, errors);
                unsetEmptyArray(_formState.errors, name);
            }
            if (_proxyFormState.touchedFields &&
                shouldUpdateFieldsAndState &&
                Array.isArray(get(_formState.touchedFields, name))) {
                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);
                shouldSetValues && set(_formState.touchedFields, name, touchedFields);
            }
            if (_proxyFormState.dirtyFields) {
                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);
            }
            _subjects.state.next({
                name,
                isDirty: _getDirty(name, values),
                dirtyFields: _formState.dirtyFields,
                errors: _formState.errors,
                isValid: _formState.isValid,
            });
        }
        else {
            set(_formValues, name, values);
        }
    };
    const updateErrors = (name, error) => {
        set(_formState.errors, name, error);
        _subjects.state.next({
            errors: _formState.errors,
        });
    };
    const _setErrors = (errors) => {
        _formState.errors = errors;
        _subjects.state.next({
            errors: _formState.errors,
            isValid: false,
        });
    };
    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {
        const field = get(_fields, name);
        if (field) {
            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);
            isUndefined(defaultValue) ||
                (ref && ref.defaultChecked) ||
                shouldSkipSetValueAs
                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))
                : setFieldValue(name, defaultValue);
            _state.mount && _updateValid();
        }
    };
    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {
        let shouldUpdateField = false;
        let isPreviousDirty = false;
        const output = {
            name,
        };
        const disabledField = !!(get(_fields, name) &&
            get(_fields, name)._f &&
            get(_fields, name)._f.disabled);
        if (!isBlurEvent || shouldDirty) {
            if (_proxyFormState.isDirty) {
                isPreviousDirty = _formState.isDirty;
                _formState.isDirty = output.isDirty = _getDirty();
                shouldUpdateField = isPreviousDirty !== output.isDirty;
            }
            const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);
            isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));
            isCurrentFieldPristine || disabledField
                ? unset(_formState.dirtyFields, name)
                : set(_formState.dirtyFields, name, true);
            output.dirtyFields = _formState.dirtyFields;
            shouldUpdateField =
                shouldUpdateField ||
                    (_proxyFormState.dirtyFields &&
                        isPreviousDirty !== !isCurrentFieldPristine);
        }
        if (isBlurEvent) {
            const isPreviousFieldTouched = get(_formState.touchedFields, name);
            if (!isPreviousFieldTouched) {
                set(_formState.touchedFields, name, isBlurEvent);
                output.touchedFields = _formState.touchedFields;
                shouldUpdateField =
                    shouldUpdateField ||
                        (_proxyFormState.touchedFields &&
                            isPreviousFieldTouched !== isBlurEvent);
            }
        }
        shouldUpdateField && shouldRender && _subjects.state.next(output);
        return shouldUpdateField ? output : {};
    };
    const shouldRenderByError = (name, isValid, error, fieldState) => {
        const previousFieldError = get(_formState.errors, name);
        const shouldUpdateValid = _proxyFormState.isValid &&
            isBoolean(isValid) &&
            _formState.isValid !== isValid;
        if (props.delayError && error) {
            delayErrorCallback = debounce(() => updateErrors(name, error));
            delayErrorCallback(props.delayError);
        }
        else {
            clearTimeout(timer);
            delayErrorCallback = null;
            error
                ? set(_formState.errors, name, error)
                : unset(_formState.errors, name);
        }
        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||
            !isEmptyObject(fieldState) ||
            shouldUpdateValid) {
            const updatedFormState = {
                ...fieldState,
                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),
                errors: _formState.errors,
                name,
            };
            _formState = {
                ..._formState,
                ...updatedFormState,
            };
            _subjects.state.next(updatedFormState);
        }
    };
    const _executeSchema = async (name) => {
        _updateIsValidating(name, true);
        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));
        _updateIsValidating(name);
        return result;
    };
    const executeSchemaAndUpdateState = async (names) => {
        const { errors } = await _executeSchema(names);
        if (names) {
            for (const name of names) {
                const error = get(errors, name);
                error
                    ? set(_formState.errors, name, error)
                    : unset(_formState.errors, name);
            }
        }
        else {
            _formState.errors = errors;
        }
        return errors;
    };
    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {
        valid: true,
    }) => {
        for (const name in fields) {
            const field = fields[name];
            if (field) {
                const { _f, ...fieldValue } = field;
                if (_f) {
                    const isFieldArrayRoot = _names.array.has(_f.name);
                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);
                    if (isPromiseFunction && _proxyFormState.validatingFields) {
                        _updateIsValidating([name], true);
                    }
                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);
                    if (isPromiseFunction && _proxyFormState.validatingFields) {
                        _updateIsValidating([name]);
                    }
                    if (fieldError[_f.name]) {
                        context.valid = false;
                        if (shouldOnlyCheckValid) {
                            break;
                        }
                    }
                    !shouldOnlyCheckValid &&
                        (get(fieldError, _f.name)
                            ? isFieldArrayRoot
                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)
                                : set(_formState.errors, _f.name, fieldError[_f.name])
                            : unset(_formState.errors, _f.name));
                }
                !isEmptyObject(fieldValue) &&
                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));
            }
        }
        return context.valid;
    };
    const _removeUnmounted = () => {
        for (const name of _names.unMount) {
            const field = get(_fields, name);
            field &&
                (field._f.refs
                    ? field._f.refs.every((ref) => !live(ref))
                    : !live(field._f.ref)) &&
                unregister(name);
        }
        _names.unMount = new Set();
    };
    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),
        !deepEqual(getValues(), _defaultValues));
    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {
        ...(_state.mount
            ? _formValues
            : isUndefined(defaultValue)
                ? _defaultValues
                : isString(names)
                    ? { [names]: defaultValue }
                    : defaultValue),
    }, isGlobal, defaultValue);
    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));
    const setFieldValue = (name, value, options = {}) => {
        const field = get(_fields, name);
        let fieldValue = value;
        if (field) {
            const fieldReference = field._f;
            if (fieldReference) {
                !fieldReference.disabled &&
                    set(_formValues, name, getFieldValueAs(value, fieldReference));
                fieldValue =
                    isHTMLElement$1(fieldReference.ref) && isNullOrUndefined(value)
                        ? ''
                        : value;
                if (isMultipleSelect(fieldReference.ref)) {
                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));
                }
                else if (fieldReference.refs) {
                    if (isCheckBoxInput(fieldReference.ref)) {
                        fieldReference.refs.length > 1
                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&
                                (checkboxRef.checked = Array.isArray(fieldValue)
                                    ? !!fieldValue.find((data) => data === checkboxRef.value)
                                    : fieldValue === checkboxRef.value))
                            : fieldReference.refs[0] &&
                                (fieldReference.refs[0].checked = !!fieldValue);
                    }
                    else {
                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));
                    }
                }
                else if (isFileInput(fieldReference.ref)) {
                    fieldReference.ref.value = '';
                }
                else {
                    fieldReference.ref.value = fieldValue;
                    if (!fieldReference.ref.type) {
                        _subjects.values.next({
                            name,
                            values: { ..._formValues },
                        });
                    }
                }
            }
        }
        (options.shouldDirty || options.shouldTouch) &&
            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);
        options.shouldValidate && trigger(name);
    };
    const setValues = (name, value, options) => {
        for (const fieldKey in value) {
            const fieldValue = value[fieldKey];
            const fieldName = `${name}.${fieldKey}`;
            const field = get(_fields, fieldName);
            (_names.array.has(name) ||
                !isPrimitive(fieldValue) ||
                (field && !field._f)) &&
                !isDateObject(fieldValue)
                ? setValues(fieldName, fieldValue, options)
                : setFieldValue(fieldName, fieldValue, options);
        }
    };
    const setValue = (name, value, options = {}) => {
        const field = get(_fields, name);
        const isFieldArray = _names.array.has(name);
        const cloneValue = cloneObject(value);
        set(_formValues, name, cloneValue);
        if (isFieldArray) {
            _subjects.array.next({
                name,
                values: { ..._formValues },
            });
            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&
                options.shouldDirty) {
                _subjects.state.next({
                    name,
                    dirtyFields: getDirtyFields(_defaultValues, _formValues),
                    isDirty: _getDirty(name, cloneValue),
                });
            }
        }
        else {
            field && !field._f && !isNullOrUndefined(cloneValue)
                ? setValues(name, cloneValue, options)
                : setFieldValue(name, cloneValue, options);
        }
        isWatched(name, _names) && _subjects.state.next({ ..._formState });
        _subjects.values.next({
            name: _state.mount ? name : undefined,
            values: { ..._formValues },
        });
    };
    const onChange = async (event) => {
        _state.mount = true;
        const target = event.target;
        let name = target.name;
        let isFieldValueUpdated = true;
        const field = get(_fields, name);
        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);
        const _updateIsFieldValueUpdated = (fieldValue) => {
            isFieldValueUpdated =
                Number.isNaN(fieldValue) ||
                    deepEqual(fieldValue, get(_formValues, name, fieldValue));
        };
        if (field) {
            let error;
            let isValid;
            const fieldValue = getCurrentFieldValue();
            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;
            const shouldSkipValidation = (!hasValidation(field._f) &&
                !_options.resolver &&
                !get(_formState.errors, name) &&
                !field._f.deps) ||
                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);
            const watched = isWatched(name, _names, isBlurEvent);
            set(_formValues, name, fieldValue);
            if (isBlurEvent) {
                field._f.onBlur && field._f.onBlur(event);
                delayErrorCallback && delayErrorCallback(0);
            }
            else if (field._f.onChange) {
                field._f.onChange(event);
            }
            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);
            const shouldRender = !isEmptyObject(fieldState) || watched;
            !isBlurEvent &&
                _subjects.values.next({
                    name,
                    type: event.type,
                    values: { ..._formValues },
                });
            if (shouldSkipValidation) {
                if (_proxyFormState.isValid) {
                    if (props.mode === 'onBlur') {
                        if (isBlurEvent) {
                            _updateValid();
                        }
                    }
                    else {
                        _updateValid();
                    }
                }
                return (shouldRender &&
                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));
            }
            !isBlurEvent && watched && _subjects.state.next({ ..._formState });
            if (_options.resolver) {
                const { errors } = await _executeSchema([name]);
                _updateIsFieldValueUpdated(fieldValue);
                if (isFieldValueUpdated) {
                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);
                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);
                    error = errorLookupResult.error;
                    name = errorLookupResult.name;
                    isValid = isEmptyObject(errors);
                }
            }
            else {
                _updateIsValidating([name], true);
                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];
                _updateIsValidating([name]);
                _updateIsFieldValueUpdated(fieldValue);
                if (isFieldValueUpdated) {
                    if (error) {
                        isValid = false;
                    }
                    else if (_proxyFormState.isValid) {
                        isValid = await executeBuiltInValidation(_fields, true);
                    }
                }
            }
            if (isFieldValueUpdated) {
                field._f.deps &&
                    trigger(field._f.deps);
                shouldRenderByError(name, isValid, error, fieldState);
            }
        }
    };
    const _focusInput = (ref, key) => {
        if (get(_formState.errors, key) && ref.focus) {
            ref.focus();
            return 1;
        }
        return;
    };
    const trigger = async (name, options = {}) => {
        let isValid;
        let validationResult;
        const fieldNames = convertToArrayPayload(name);
        if (_options.resolver) {
            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);
            isValid = isEmptyObject(errors);
            validationResult = name
                ? !fieldNames.some((name) => get(errors, name))
                : isValid;
        }
        else if (name) {
            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {
                const field = get(_fields, fieldName);
                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);
            }))).every(Boolean);
            !(!validationResult && !_formState.isValid) && _updateValid();
        }
        else {
            validationResult = isValid = await executeBuiltInValidation(_fields);
        }
        _subjects.state.next({
            ...(!isString(name) ||
                (_proxyFormState.isValid && isValid !== _formState.isValid)
                ? {}
                : { name }),
            ...(_options.resolver || !name ? { isValid } : {}),
            errors: _formState.errors,
        });
        options.shouldFocus &&
            !validationResult &&
            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);
        return validationResult;
    };
    const getValues = (fieldNames) => {
        const values = {
            ...(_state.mount ? _formValues : _defaultValues),
        };
        return isUndefined(fieldNames)
            ? values
            : isString(fieldNames)
                ? get(values, fieldNames)
                : fieldNames.map((name) => get(values, name));
    };
    const getFieldState = (name, formState) => ({
        invalid: !!get((formState || _formState).errors, name),
        isDirty: !!get((formState || _formState).dirtyFields, name),
        error: get((formState || _formState).errors, name),
        isValidating: !!get(_formState.validatingFields, name),
        isTouched: !!get((formState || _formState).touchedFields, name),
    });
    const clearErrors = (name) => {
        name &&
            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));
        _subjects.state.next({
            errors: name ? _formState.errors : {},
        });
    };
    const setError = (name, error, options) => {
        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;
        const currentError = get(_formState.errors, name) || {};
        // Don't override existing error messages elsewhere in the object tree.
        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;
        set(_formState.errors, name, {
            ...restOfErrorTree,
            ...error,
            ref,
        });
        _subjects.state.next({
            name,
            errors: _formState.errors,
            isValid: false,
        });
        options && options.shouldFocus && ref && ref.focus && ref.focus();
    };
    const watch = (name, defaultValue) => isFunction(name)
        ? _subjects.values.subscribe({
            next: (payload) => name(_getWatch(undefined, defaultValue), payload),
        })
        : _getWatch(name, defaultValue, true);
    const unregister = (name, options = {}) => {
        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {
            _names.mount.delete(fieldName);
            _names.array.delete(fieldName);
            if (!options.keepValue) {
                unset(_fields, fieldName);
                unset(_formValues, fieldName);
            }
            !options.keepError && unset(_formState.errors, fieldName);
            !options.keepDirty && unset(_formState.dirtyFields, fieldName);
            !options.keepTouched && unset(_formState.touchedFields, fieldName);
            !options.keepIsValidating &&
                unset(_formState.validatingFields, fieldName);
            !_options.shouldUnregister &&
                !options.keepDefaultValue &&
                unset(_defaultValues, fieldName);
        }
        _subjects.values.next({
            values: { ..._formValues },
        });
        _subjects.state.next({
            ..._formState,
            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),
        });
        !options.keepIsValid && _updateValid();
    };
    const _updateDisabledField = ({ disabled, name, field, fields, value, }) => {
        if ((isBoolean(disabled) && _state.mount) || !!disabled) {
            const inputValue = disabled
                ? undefined
                : isUndefined(value)
                    ? getFieldValue(field ? field._f : get(fields, name)._f)
                    : value;
            set(_formValues, name, inputValue);
            updateTouchAndDirty(name, inputValue, false, false, true);
        }
    };
    const register = (name, options = {}) => {
        let field = get(_fields, name);
        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(props.disabled);
        set(_fields, name, {
            ...(field || {}),
            _f: {
                ...(field && field._f ? field._f : { ref: { name } }),
                name,
                mount: true,
                ...options,
            },
        });
        _names.mount.add(name);
        if (field) {
            _updateDisabledField({
                field,
                disabled: isBoolean(options.disabled)
                    ? options.disabled
                    : props.disabled,
                name,
                value: options.value,
            });
        }
        else {
            updateValidAndValue(name, true, options.value);
        }
        return {
            ...(disabledIsDefined
                ? { disabled: options.disabled || props.disabled }
                : {}),
            ...(_options.progressive
                ? {
                    required: !!options.required,
                    min: getRuleValue(options.min),
                    max: getRuleValue(options.max),
                    minLength: getRuleValue(options.minLength),
                    maxLength: getRuleValue(options.maxLength),
                    pattern: getRuleValue(options.pattern),
                }
                : {}),
            name,
            onChange,
            onBlur: onChange,
            ref: (ref) => {
                if (ref) {
                    register(name, options);
                    field = get(_fields, name);
                    const fieldRef = isUndefined(ref.value)
                        ? ref.querySelectorAll
                            ? ref.querySelectorAll('input,select,textarea')[0] || ref
                            : ref
                        : ref;
                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);
                    const refs = field._f.refs || [];
                    if (radioOrCheckbox
                        ? refs.find((option) => option === fieldRef)
                        : fieldRef === field._f.ref) {
                        return;
                    }
                    set(_fields, name, {
                        _f: {
                            ...field._f,
                            ...(radioOrCheckbox
                                ? {
                                    refs: [
                                        ...refs.filter(live),
                                        fieldRef,
                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),
                                    ],
                                    ref: { type: fieldRef.type, name },
                                }
                                : { ref: fieldRef }),
                        },
                    });
                    updateValidAndValue(name, false, undefined, fieldRef);
                }
                else {
                    field = get(_fields, name, {});
                    if (field._f) {
                        field._f.mount = false;
                    }
                    (_options.shouldUnregister || options.shouldUnregister) &&
                        !(isNameInFieldArray(_names.array, name) && _state.action) &&
                        _names.unMount.add(name);
                }
            },
        };
    };
    const _focusError = () => _options.shouldFocusError &&
        iterateFieldsByAction(_fields, _focusInput, _names.mount);
    const _disableForm = (disabled) => {
        if (isBoolean(disabled)) {
            _subjects.state.next({ disabled });
            iterateFieldsByAction(_fields, (ref, name) => {
                const currentField = get(_fields, name);
                if (currentField) {
                    ref.disabled = currentField._f.disabled || disabled;
                    if (Array.isArray(currentField._f.refs)) {
                        currentField._f.refs.forEach((inputRef) => {
                            inputRef.disabled = currentField._f.disabled || disabled;
                        });
                    }
                }
            }, 0, false);
        }
    };
    const handleSubmit = (onValid, onInvalid) => async (e) => {
        let onValidError = undefined;
        if (e) {
            e.preventDefault && e.preventDefault();
            e.persist && e.persist();
        }
        let fieldValues = cloneObject(_formValues);
        _subjects.state.next({
            isSubmitting: true,
        });
        if (_options.resolver) {
            const { errors, values } = await _executeSchema();
            _formState.errors = errors;
            fieldValues = values;
        }
        else {
            await executeBuiltInValidation(_fields);
        }
        unset(_formState.errors, 'root');
        if (isEmptyObject(_formState.errors)) {
            _subjects.state.next({
                errors: {},
            });
            try {
                await onValid(fieldValues, e);
            }
            catch (error) {
                onValidError = error;
            }
        }
        else {
            if (onInvalid) {
                await onInvalid({ ..._formState.errors }, e);
            }
            _focusError();
            setTimeout(_focusError);
        }
        _subjects.state.next({
            isSubmitted: true,
            isSubmitting: false,
            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,
            submitCount: _formState.submitCount + 1,
            errors: _formState.errors,
        });
        if (onValidError) {
            throw onValidError;
        }
    };
    const resetField = (name, options = {}) => {
        if (get(_fields, name)) {
            if (isUndefined(options.defaultValue)) {
                setValue(name, cloneObject(get(_defaultValues, name)));
            }
            else {
                setValue(name, options.defaultValue);
                set(_defaultValues, name, cloneObject(options.defaultValue));
            }
            if (!options.keepTouched) {
                unset(_formState.touchedFields, name);
            }
            if (!options.keepDirty) {
                unset(_formState.dirtyFields, name);
                _formState.isDirty = options.defaultValue
                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))
                    : _getDirty();
            }
            if (!options.keepError) {
                unset(_formState.errors, name);
                _proxyFormState.isValid && _updateValid();
            }
            _subjects.state.next({ ..._formState });
        }
    };
    const _reset = (formValues, keepStateOptions = {}) => {
        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;
        const cloneUpdatedValues = cloneObject(updatedValues);
        const isEmptyResetValues = isEmptyObject(formValues);
        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;
        if (!keepStateOptions.keepDefaultValues) {
            _defaultValues = updatedValues;
        }
        if (!keepStateOptions.keepValues) {
            if (keepStateOptions.keepDirtyValues) {
                for (const fieldName of _names.mount) {
                    get(_formState.dirtyFields, fieldName)
                        ? set(values, fieldName, get(_formValues, fieldName))
                        : setValue(fieldName, get(values, fieldName));
                }
            }
            else {
                if (isWeb && isUndefined(formValues)) {
                    for (const name of _names.mount) {
                        const field = get(_fields, name);
                        if (field && field._f) {
                            const fieldReference = Array.isArray(field._f.refs)
                                ? field._f.refs[0]
                                : field._f.ref;
                            if (isHTMLElement$1(fieldReference)) {
                                const form = fieldReference.closest('form');
                                if (form) {
                                    form.reset();
                                    break;
                                }
                            }
                        }
                    }
                }
                _fields = {};
            }
            _formValues = props.shouldUnregister
                ? keepStateOptions.keepDefaultValues
                    ? cloneObject(_defaultValues)
                    : {}
                : cloneObject(values);
            _subjects.array.next({
                values: { ...values },
            });
            _subjects.values.next({
                values: { ...values },
            });
        }
        _names = {
            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),
            unMount: new Set(),
            array: new Set(),
            watch: new Set(),
            watchAll: false,
            focus: '',
        };
        _state.mount =
            !_proxyFormState.isValid ||
                !!keepStateOptions.keepIsValid ||
                !!keepStateOptions.keepDirtyValues;
        _state.watch = !!props.shouldUnregister;
        _subjects.state.next({
            submitCount: keepStateOptions.keepSubmitCount
                ? _formState.submitCount
                : 0,
            isDirty: isEmptyResetValues
                ? false
                : keepStateOptions.keepDirty
                    ? _formState.isDirty
                    : !!(keepStateOptions.keepDefaultValues &&
                        !deepEqual(formValues, _defaultValues)),
            isSubmitted: keepStateOptions.keepIsSubmitted
                ? _formState.isSubmitted
                : false,
            dirtyFields: isEmptyResetValues
                ? {}
                : keepStateOptions.keepDirtyValues
                    ? keepStateOptions.keepDefaultValues && _formValues
                        ? getDirtyFields(_defaultValues, _formValues)
                        : _formState.dirtyFields
                    : keepStateOptions.keepDefaultValues && formValues
                        ? getDirtyFields(_defaultValues, formValues)
                        : keepStateOptions.keepDirty
                            ? _formState.dirtyFields
                            : {},
            touchedFields: keepStateOptions.keepTouched
                ? _formState.touchedFields
                : {},
            errors: keepStateOptions.keepErrors ? _formState.errors : {},
            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful
                ? _formState.isSubmitSuccessful
                : false,
            isSubmitting: false,
        });
    };
    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)
        ? formValues(_formValues)
        : formValues, keepStateOptions);
    const setFocus = (name, options = {}) => {
        const field = get(_fields, name);
        const fieldReference = field && field._f;
        if (fieldReference) {
            const fieldRef = fieldReference.refs
                ? fieldReference.refs[0]
                : fieldReference.ref;
            if (fieldRef.focus) {
                fieldRef.focus();
                options.shouldSelect && fieldRef.select();
            }
        }
    };
    const _updateFormState = (updatedFormState) => {
        _formState = {
            ..._formState,
            ...updatedFormState,
        };
    };
    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&
        _options.defaultValues().then((values) => {
            reset(values, _options.resetOptions);
            _subjects.state.next({
                isLoading: false,
            });
        });
    return {
        control: {
            register,
            unregister,
            getFieldState,
            handleSubmit,
            setError,
            _executeSchema,
            _getWatch,
            _getDirty,
            _updateValid,
            _removeUnmounted,
            _updateFieldArray,
            _updateDisabledField,
            _getFieldArray,
            _reset,
            _resetDefaultValues,
            _updateFormState,
            _disableForm,
            _subjects,
            _proxyFormState,
            _setErrors,
            get _fields() {
                return _fields;
            },
            get _formValues() {
                return _formValues;
            },
            get _state() {
                return _state;
            },
            set _state(value) {
                _state = value;
            },
            get _defaultValues() {
                return _defaultValues;
            },
            get _names() {
                return _names;
            },
            set _names(value) {
                _names = value;
            },
            get _formState() {
                return _formState;
            },
            set _formState(value) {
                _formState = value;
            },
            get _options() {
                return _options;
            },
            set _options(value) {
                _options = {
                    ..._options,
                    ...value,
                };
            },
        },
        trigger,
        register,
        handleSubmit,
        watch,
        setValue,
        getValues,
        reset,
        resetField,
        clearErrors,
        unregister,
        setError,
        setFocus,
        getFieldState,
    };
}

/**
 * Custom hook to manage the entire form.
 *
 * @remarks
 * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)
 *
 * @param props - form configuration and validation parameters.
 *
 * @returns methods - individual functions to manage the form state. {@link UseFormReturn}
 *
 * @example
 * ```tsx
 * function App() {
 *   const { register, handleSubmit, watch, formState: { errors } } = useForm();
 *   const onSubmit = data => console.log(data);
 *
 *   console.log(watch("example"));
 *
 *   return (
 *     <form onSubmit={handleSubmit(onSubmit)}>
 *       <input defaultValue="test" {...register("example")} />
 *       <input {...register("exampleRequired", { required: true })} />
 *       {errors.exampleRequired && <span>This field is required</span>}
 *       <button>Submit</button>
 *     </form>
 *   );
 * }
 * ```
 */
function useForm(props = {}) {
    const _formControl = React.useRef();
    const _values = React.useRef();
    const [formState, updateFormState] = React.useState({
        isDirty: false,
        isValidating: false,
        isLoading: isFunction(props.defaultValues),
        isSubmitted: false,
        isSubmitting: false,
        isSubmitSuccessful: false,
        isValid: false,
        submitCount: 0,
        dirtyFields: {},
        touchedFields: {},
        validatingFields: {},
        errors: props.errors || {},
        disabled: props.disabled || false,
        defaultValues: isFunction(props.defaultValues)
            ? undefined
            : props.defaultValues,
    });
    if (!_formControl.current) {
        _formControl.current = {
            ...createFormControl(props),
            formState,
        };
    }
    const control = _formControl.current.control;
    control._options = props;
    useSubscribe({
        subject: control._subjects.state,
        next: (value) => {
            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {
                updateFormState({ ...control._formState });
            }
        },
    });
    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);
    React.useEffect(() => {
        if (control._proxyFormState.isDirty) {
            const isDirty = control._getDirty();
            if (isDirty !== formState.isDirty) {
                control._subjects.state.next({
                    isDirty,
                });
            }
        }
    }, [control, formState.isDirty]);
    React.useEffect(() => {
        if (props.values && !deepEqual(props.values, _values.current)) {
            control._reset(props.values, control._options.resetOptions);
            _values.current = props.values;
            updateFormState((state) => ({ ...state }));
        }
        else {
            control._resetDefaultValues();
        }
    }, [props.values, control]);
    React.useEffect(() => {
        if (props.errors) {
            control._setErrors(props.errors);
        }
    }, [props.errors, control]);
    React.useEffect(() => {
        if (!control._state.mount) {
            control._updateValid();
            control._state.mount = true;
        }
        if (control._state.watch) {
            control._state.watch = false;
            control._subjects.state.next({ ...control._formState });
        }
        control._removeUnmounted();
    });
    React.useEffect(() => {
        props.shouldUnregister &&
            control._subjects.values.next({
                values: control._getWatch(),
            });
    }, [props.shouldUnregister, control]);
    _formControl.current.formState = getProxyFormState(formState, control);
    return _formControl.current;
}

function ownKeys$8(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$7(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$8(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$8(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var backgroundColor = {
  standard: "var(--ds-background-input, ".concat(N10, ")"),
  subtle: 'transparent',
  none: 'transparent'
};
var backgroundColorFocus = {
  standard: "var(--ds-background-input-pressed, ".concat(N0, ")"),
  subtle: "var(--ds-background-input-pressed, ".concat(N0, ")"),
  none: 'transparent'
};
var backgroundColorHover = {
  standard: "var(--ds-background-input-hovered, ".concat(N30, ")"),
  subtle: "var(--ds-background-input-hovered, ".concat(N30, ")"),
  none: 'transparent'
};
var borderColor = {
  standard: "var(--ds-border-input, ".concat(N100, ")"),
  subtle: 'transparent',
  none: 'transparent'
};
var borderColorFocus = {
  standard: "var(--ds-border-focused, ".concat(B200, ")"),
  subtle: "var(--ds-border-focused, ".concat(B200, ")"),
  none: 'transparent'
};
var borderColorHover = {
  standard: "var(--ds-border-input, ".concat(N100, ")"),
  subtle: "var(--ds-border-input, transparent)",
  none: 'transparent'
};
var getContainerTextBgAndBorderColor = function getContainerTextBgAndBorderColor(appearance) {
  return {
    backgroundColor: backgroundColor[appearance],
    borderColor: borderColor[appearance],
    color: "var(--ds-text, ".concat(N900, ")"),
    cursor: 'text',
    '&:hover:not([data-disabled])': {
      backgroundColor: backgroundColorHover[appearance],
      borderColor: borderColorHover[appearance]
    },
    '&:focus-within:not([data-disabled])': {
      backgroundColor: backgroundColorFocus[appearance],
      borderColor: borderColorFocus[appearance],
      boxShadow: "inset 0 0 0 ".concat("var(--ds-border-width, 1px)", " ", borderColorFocus[appearance])
    },
    '&[data-disabled]': _objectSpread$7({
      color: "var(--ds-text-disabled, ".concat(N70, ")"),
      cursor: 'not-allowed'
    }, appearance === 'standard' && {
      backgroundColor: "var(--ds-background-disabled, ".concat(N10, ")"),
      borderColor: "var(--ds-background-disabled, ".concat(N10, ")")
    }),
    '&[data-invalid], &[data-invalid]:hover': {
      borderColor: "var(--ds-border-danger, ".concat(R400, ")"),
      boxShadow: "inset 0 0 0 ".concat("var(--ds-border-width, 1px)", " ", "var(--ds-border-danger, ".concat(R400, ")"))
    },
    '&[data-invalid]:focus-within': {
      backgroundColor: "var(--ds-background-input-pressed, ".concat(N0, ")"),
      borderColor: "var(--ds-border-focused, ".concat(B200, ")"),
      boxShadow: "inset 0 0 0 ".concat("var(--ds-border-width, 1px)", " ", "var(--ds-border-focused, ".concat(B200, ")"))
    },
    '@media screen and (-ms-high-contrast: active)': {
      '&[data-invalid]:focus-within': {
        borderColor: 'Highlight'
      },
      '&:focus-within': {
        borderColor: 'Highlight'
      },
      '&[data-disabled]': {
        borderColor: 'GrayText'
      }
    }
  };
};
var widthMap = {
  xsmall: 80,
  small: 160,
  medium: 240,
  large: 320,
  xlarge: 480
};
var getMaxWidth = function getMaxWidth(width) {
  return !width ? "100%" : width in widthMap ? widthMap[width] : +width;
};
var containerStyles = function containerStyles(appearance, width) {
  return _objectSpread$7(_objectSpread$7(_objectSpread$7({
    alignItems: 'center'
  }, getContainerTextBgAndBorderColor(appearance)), {}, {
    borderRadius: 3,
    borderWidth: "var(--ds-border-width, 1px)"
  }, appearance !== 'none' ? {
    padding: "var(--ds-border-width, 1px)".concat(" 0")
  } : {}), {}, {
    borderStyle: appearance === 'none' ? 'none' : 'solid',
    boxSizing: 'border-box',
    display: 'flex',
    flex: '1 1 100%',
    font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
    justifyContent: 'space-between',
    maxWidth: getMaxWidth(width),
    overflow: 'hidden',
    transition: "background-color 0.2s ease-in-out, border-color 0.2s ease-in-out",
    wordWrap: 'break-word',
    verticalAlign: 'top',
    pointerEvents: 'auto'
  });
};
var inputStyles = function inputStyles() {
  return {
    backgroundColor: 'transparent',
    border: 0,
    boxSizing: 'border-box',
    color: 'inherit',
    cursor: 'inherit',
    font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
    minWidth: '0',
    outline: 'none',
    width: '100%',
    '&[data-monospaced]': {
      fontFamily: "var(--ds-font-family-code, ui-monospace, Menlo, \"Segoe UI Mono\", \"Ubuntu Mono\", monospace)"
    },
    '&[data-compact]': {
      padding: "var(--ds-space-050, 4px)".concat(" ", "var(--ds-space-075, 6px)")
    },
    '&:not([data-compact])': {
      padding: "var(--ds-space-100, 8px)".concat(" ", "var(--ds-space-075, 6px)")
    },
    '&[disabled]': {
      // Safari (WebKit) adds a -webkit-text-fill-color style to disabled inputs
      // which takes priority over color and makes the text unreadable. Need to
      // override it with the color we want.
      WebkitTextFillColor: "var(--ds-text-disabled, ".concat(N70, ")")
    },
    // Hide the clear indicator on Edge (Windows only)
    '&::-ms-clear': {
      display: 'none'
    },
    '&:invalid': {
      boxShadow: 'none'
    },
    '&:placeholder-shown': {
      textOverflow: 'ellipsis'
    },
    '&::placeholder': {
      color: "var(--ds-text-subtlest, ".concat(N200, ")"),
      '&:disabled': {
        color: "var(--ds-text-disabled, ".concat(N70, ")")
      }
    },
    '@media screen and (-ms-high-contrast: active)': {
      '&[disabled]': {
        color: 'GrayText'
      }
    }
  };
};

var _excluded$8 = ["appearance", "className", "elemAfterInput", "elemBeforeInput", "isCompact", "isDisabled", "isInvalid", "isMonospaced", "isReadOnly", "isRequired", "name", "onBlur", "onChange", "onFocus", "onMouseDown", "placeholder", "testId", "width"];
function ownKeys$7(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$6(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$7(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$7(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var analyticsParams = {
  componentName: 'textField',
  packageName: "@atlaskit/textfield",
  packageVersion: "6.5.2"
};

/**
 * __Textfield__
 *
 * A text field is an input that allows a user to write or edit text.
 *
 * - [Examples](https://atlassian.design/components/textfield/examples)
 * - [Code](https://atlassian.design/components/textfield/code)
 * - [Usage](https://atlassian.design/components/textfield/usage)
 */
var Textfield = /*#__PURE__*/reactExports.forwardRef(function (props, ref) {
  var _props$appearance = props.appearance,
    appearance = _props$appearance === void 0 ? 'standard' : _props$appearance,
    className = props.className,
    elemAfterInput = props.elemAfterInput,
    elemBeforeInput = props.elemBeforeInput,
    _props$isCompact = props.isCompact,
    isCompact = _props$isCompact === void 0 ? false : _props$isCompact,
    _props$isDisabled = props.isDisabled,
    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
    _props$isInvalid = props.isInvalid,
    isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,
    _props$isMonospaced = props.isMonospaced,
    isMonospaced = _props$isMonospaced === void 0 ? false : _props$isMonospaced,
    _props$isReadOnly = props.isReadOnly,
    isReadOnly = _props$isReadOnly === void 0 ? false : _props$isReadOnly,
    _props$isRequired = props.isRequired,
    isRequired = _props$isRequired === void 0 ? false : _props$isRequired,
    name = props.name,
    onBlur = props.onBlur,
    onChange = props.onChange,
    onFocus = props.onFocus,
    onMouseDown = props.onMouseDown,
    placeholder = props.placeholder,
    testId = props.testId,
    width = props.width,
    spreadProps = _objectWithoutProperties(props, _excluded$8);
  var inputRef = reactExports.useRef(null);
  var handleOnFocus = usePlatformLeafEventHandler(_objectSpread$6({
    fn: function fn(event) {
      onFocus && onFocus(event);
    },
    action: 'focused'
  }, analyticsParams));
  var handleOnBlur = usePlatformLeafEventHandler(_objectSpread$6({
    fn: function fn(event) {
      onBlur && onBlur(event);
    },
    action: 'blurred'
  }, analyticsParams));
  var handleOnMouseDown = reactExports.useCallback(function (event) {
    // Running e.preventDefault() on the INPUT prevents double click behaviour
    // Sadly we needed this cast as the target type is being correctly set
    var target = event.target;
    if (target.tagName !== 'INPUT') {
      event.preventDefault();
    }
    if (inputRef && inputRef.current && !isDisabled && document.activeElement !== inputRef.current) {
      inputRef.current.focus();
    }
    onMouseDown && onMouseDown(event);
  }, [onMouseDown, isDisabled]);
  var setInputRef = reactExports.useCallback(function (inputElement) {
    inputRef.current = inputElement;
    if (!ref) {
      return;
    }
    if (_typeof(ref) === 'object') {
      ref.current = inputElement;
    }
    if (typeof ref === 'function') {
      ref(inputElement);
    }
  }, [ref]);
  var containerStyles$1 = reactExports.useMemo(function () {
    return containerStyles(appearance, width);
  }, [appearance, width]);
  var inputStyle = inputStyles();
  return (
    /**
     * It is not normally acceptable to add click and key handlers to
     * non-interactive elements as this is an accessibility anti-pattern.
     * However, because this instance is to handle events on all children that
     * should be associated with the input, we can add role="presentation" so
     * that there are no negative impacts to assistive technologies.
     */
    jsx("div", {
      role: "presentation",
      "data-disabled": isDisabled ? isDisabled : undefined,
      "data-invalid": isInvalid ? isInvalid : undefined,
      "data-ds--text-field--container": true,
      "data-testid": testId && "".concat(testId, "-container"),
      onMouseDown: handleOnMouseDown
      // TODO: When removing legacy theming fix this.
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
      ,
      css: containerStyles$1
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: className
    }, elemBeforeInput, jsx("input", _extends({}, spreadProps, {
      "aria-invalid": isInvalid ? isInvalid : undefined
      // TODO: When removing legacy theming fix this.
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
      ,
      css: inputStyle,
      "data-compact": isCompact ? isCompact : undefined,
      "data-ds--text-field--input": true,
      "data-monospaced": isMonospaced ? isMonospaced : undefined,
      "data-testid": testId,
      disabled: isDisabled,
      name: name,
      onBlur: handleOnBlur,
      onChange: onChange,
      onFocus: handleOnFocus,
      placeholder: placeholder,
      readOnly: isReadOnly,
      ref: setInputRef,
      required: isRequired
    })), elemAfterInput)
  );
});

var textStyles = xcss({
  // content can grow and shrink
  flexGrow: 1,
  flexShrink: 1,
  // ellipsis for overflow text
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
});
var iconStyles = xcss({
  display: 'flex',
  // icon size cannot grow and shrink
  flexGrow: 0,
  flexShrink: 0,
  alignSelf: 'center',
  fontSize: 0,
  lineHeight: 0,
  userSelect: 'none'
});
var commonStyles = xcss({
  transition: 'opacity 0.3s'
});
var fadeStyles = xcss({
  opacity: 0
});

/**
 * These CSS variables consumed by the new icons, to allow them to have appropriate
 * padding inside Button while also maintaining spacing for the existing icons.
 *
 * These styles can be removed once the new icons are fully rolled out, feature flag
 * platform.design-system-team.enable-new-icons is cleaned up,
 * and we bump Button to set padding based on the new icons.
 */
var beforeIconStyles = xcss({
  // @ts-ignore
  '--ds--button--new-icon-padding-start': "var(--ds-space-050, 4px)",
  // @ts-ignore
  '--ds--button--new-icon-padding-end': "var(--ds-space-025, 2px)"
});
var afterIconStyles = xcss({
  // @ts-ignore
  '--ds--button--new-icon-padding-start': "var(--ds-space-025, 2px)",
  // @ts-ignore
  '--ds--button--new-icon-padding-end': "var(--ds-space-050, 4px)"
});
/**
 * __Content__
 *
 * Used for slots within a Button, including icons and text content.
 */
var Content = function Content(_ref) {
  var children = _ref.children,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'text' : _ref$type,
    isLoading = _ref.isLoading,
    position = _ref.position;
  return /*#__PURE__*/React.createElement(Box, {
    as: "span",
    xcss: [commonStyles].concat(_toConsumableArray(type === 'text' ? [textStyles] : [iconStyles]), _toConsumableArray(isLoading ? [fadeStyles] : []), _toConsumableArray(position === 'before' ? [beforeIconStyles] : []), _toConsumableArray(position === 'after' ? [afterIconStyles] : []))
  }, children);
};

function isIconRenderProp(func) {
  return !func.displayName &&
  // most function components and class components have a displayName, negate them
  !func.render &&
  // forwardRef doesn't require a display name, however it does include a render function, negate them
  typeof func === 'function' // at the very least we need to be a function
  ;
}

/**
 * __Icon renderer__
 *
 * Used to support render props with icons.
 *
 */
var IconRenderer = function IconRenderer(_ref) {
  var Icon = _ref.icon;
  return /*#__PURE__*/React.createElement(React.Fragment, null, isIconRenderProp(Icon) ? Icon({
    label: '',
    color: 'currentColor'
  }) : /*#__PURE__*/React.createElement(Icon, {
    label: "",
    color: 'currentColor'
  }));
};

/**
 * Assigns the node to all the refs passed in the argument.
 *
 * @param refs: An array of refs (as function or ref object)
 */
function mergeRefs(refs) {
  return function (value) {
    refs.forEach(function (ref) {
      if (typeof ref === 'function') {
        ref(value);
      } else if (ref !== null) {
        ref.current = value;
      }
    });
  };
}

/**
 * TODO: Add jsdoc
 */
var SplitButtonContext = /*#__PURE__*/reactExports.createContext(undefined);
var useSplitButtonContext = function useSplitButtonContext() {
  var context = reactExports.useContext(SplitButtonContext);
  if (!context) {
    return undefined;
  }
  if (context.appearance === 'navigation') {
    var newContext = {
      spacing: 'default',
      appearance: 'subtle',
      isDisabled: false,
      isActiveOverSelected: false,
      isNavigationSplitButton: true,
      isHighlighted: context.isHighlighted
    };
    return newContext;
  }
  var splitButtonContext = {
    spacing: context.spacing,
    appearance: context.appearance,
    isDisabled: context.isDisabled,
    isActiveOverSelected: true,
    isNavigationSplitButton: false,
    isHighlighted: false
  };
  return splitButtonContext;
};

function abort(event) {
  event.preventDefault();
  event.stopPropagation();
}
var tabKeyCode = 9;
function onKey(event) {
  // Allowing tab so that a user can move focus away
  if (event.keyCode === tabKeyCode) {
    return;
  }
  abort(event);
}
function blockEvents(shouldBlockEvents, events) {
  return shouldBlockEvents ? {
    onMouseDownCapture: abort,
    onMouseUpCapture: abort,
    onKeyDownCapture: onKey,
    onKeyUpCapture: onKey,
    onTouchStartCapture: abort,
    onTouchEndCapture: abort,
    onPointerDownCapture: abort,
    onPointerUpCapture: abort,
    onClickCapture: abort,
    // Just smashing the existing onClick for good measure
    onClick: abort
  } : events;
}

var LOADING_LABEL = ', Loading';

function getIconSpacing(spacing) {
  switch (spacing) {
    case 'compact':
      return 'small';
    default:
      return 'medium';
  }
}
function getSpinnerAppearance(_ref) {
  var appearance = _ref.appearance,
    isDisabled = _ref.isDisabled,
    isSelected = _ref.isSelected;
  if (isDisabled || isSelected) {
    return 'inherit';
  }
  if (appearance === 'primary' || appearance === 'danger' || appearance === 'discovery') {
    return 'invert';
  }
  return 'inherit';
}
function renderLoadingOverlay(_ref2) {
  var appearance = _ref2.appearance,
    spacing = _ref2.spacing,
    isDisabled = _ref2.isDisabled,
    isSelected = _ref2.isSelected,
    testId = _ref2.testId;
  return /*#__PURE__*/React.createElement(Spinner, {
    size: getIconSpacing(spacing),
    appearance: getSpinnerAppearance({
      appearance: appearance,
      isDisabled: isDisabled,
      isSelected: isSelected
    }),
    testId: testId ? "".concat(testId, "--loading-spinner") : undefined
  });
}

function ownKeys$6(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$6(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$6(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var buttonStyles = xcss({
  display: 'inline-flex',
  boxSizing: 'border-box',
  width: 'auto',
  maxWidth: '100%',
  position: 'relative',
  alignItems: 'baseline',
  justifyContent: 'center',
  columnGap: 'space.050',
  borderRadius: 'border.radius.100',
  borderWidth: 'border.width.0',
  flexShrink: 0,
  height: "".concat(32 / 14, "em"),
  paddingInlineEnd: 'space.150',
  paddingInlineStart: 'space.150',
  textAlign: 'center',
  transition: 'background 0.1s ease-out',
  verticalAlign: 'middle',
  '::after': {
    borderRadius: 'inherit',
    inset: 'space.0',
    borderStyle: 'solid',
    borderWidth: "var(--ds-border-width, 1px)",
    pointerEvents: 'none',
    position: 'absolute'
  }
});
var hardCodedButtonStyles = xcss({
  fontFamily: 'inherit',
  fontSize: 'inherit',
  fontStyle: 'normal',
  fontWeight: 500,
  lineHeight: "".concat(32 / 14, "em"),
  paddingBlock: 'space.0'
});
var tokenizedButtonStyles = xcss({
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  fontWeight: "var(--ds-font-weight-medium, 500)",
  paddingBlock: 'space.075'
});
var defaultInteractiveStyles = xcss({
  ':hover': {
    background: "var(--ds-background-neutral-hovered, #091e4214)",
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text, ".concat(N500, ")")
  },
  ':active': {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-neutral-pressed, ".concat(B75, ")"),
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text, ".concat(B400, ")")
  }
});
var defaultInteractiveRefreshedStyles = xcss({
  ':hover': {
    background: "var(--ds-background-neutral-subtle-hovered, #091E420F)",
    color: 'color.text.subtle'
  },
  ':active': {
    background: "var(--ds-background-neutral-subtle-pressed, #091E4224)",
    color: 'color.text.subtle'
  }
});
var defaultStyles$1 = xcss({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values
  background: "var(--ds-background-neutral, ".concat(N20A, ")"),
  // @ts-expect-error — using tokens for explicit fallback usage.
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values --  -- Ignored via go/DSP-18766
  color: "var(--ds-text, ".concat(N500, ")"),
  ':visited': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text, ".concat(N500, ")")
  }
});
var defaultRefreshedStyles = xcss({
  background: "var(--ds-background-neutral-subtle, #00000000)",
  color: 'color.text.subtle',
  '::after': {
    content: '""',
    borderColor: 'color.border'
  },
  ':visited': {
    color: 'color.text.subtle'
  }
});
var primaryStyles = xcss({
  background: "var(--ds-background-brand-bold, #0052CC)",
  // @ts-expect-error
  color: "var(--ds-text-inverse, #FFFFFF)",
  ':visited': {
    // @ts-expect-error
    color: "var(--ds-text-inverse, #FFFFFF)"
  }
});
var primaryInteractiveStyles = xcss({
  ':hover': {
    // @ts-expect-error
    color: "var(--ds-text-inverse, #FFFFFF)",
    background: "var(--ds-background-brand-bold-hovered, #0065FF)"
  },
  ':active': {
    // @ts-expect-error
    color: "var(--ds-text-inverse, #FFFFFF)",
    background: "var(--ds-background-brand-bold-pressed, #0747A6)"
  }
});
var warningStyles = xcss({
  background: "var(--ds-background-warning-bold, #FFAB00)",
  // @ts-expect-error
  color: "var(--ds-text-warning-inverse, #172B4D)",
  ':visited': {
    // @ts-expect-error
    color: "var(--ds-text-warning-inverse, #172B4D)"
  }
});
var warningInteractiveStyles = xcss({
  ':hover': {
    // @ts-expect-error
    color: "var(--ds-text-warning-inverse, #172B4D)",
    background: "var(--ds-background-warning-bold-hovered, #FFC400)"
  },
  ':active': {
    // @ts-expect-error
    color: "var(--ds-text-warning-inverse, #172B4D)",
    background: "var(--ds-background-warning-bold-pressed, #FF991F)"
  }
});
var dangerStyles = xcss({
  background: "var(--ds-background-danger-bold, #DE350B)",
  color: 'color.text.inverse',
  ':visited': {
    color: 'color.text.inverse'
  }
});
var dangerInteractiveStyles = xcss({
  ':hover': {
    color: 'color.text.inverse',
    background: "var(--ds-background-danger-bold-hovered, #FF5630)"
  },
  ':active': {
    color: 'color.text.inverse',
    background: "var(--ds-background-danger-bold-pressed, #BF2600)"
  }
});
var discoveryStyles = xcss({
  background: "var(--ds-background-discovery-bold, #5243AA)",
  color: 'color.text.inverse',
  ':visited': {
    color: 'color.text.inverse'
  }
});
var discoveryInteractiveStyles = xcss({
  ':hover': {
    color: 'color.text.inverse',
    background: "var(--ds-background-discovery-bold-hovered, #8777D9)"
  },
  ':active': {
    color: 'color.text.inverse',
    background: "var(--ds-background-discovery-bold-pressed, #5243AA)"
  }
});
var subtleStyles = xcss({
  background: "var(--ds-background-neutral-subtle, transparent)",
  // @ts-expect-error
  color: "var(--ds-text, #42526E)",
  ':visited': {
    // @ts-expect-error
    color: "var(--ds-text, #42526E)"
  }
});
var subtleRefreshedStyles = xcss({
  background: "var(--ds-background-neutral-subtle, transparent)",
  color: 'color.text.subtle',
  ':visited': {
    color: 'color.text.subtle'
  }
});
var subtleInteractiveStyles = xcss({
  ':hover': {
    background: "var(--ds-background-neutral-subtle-hovered, #091e4214)",
    // @ts-expect-error
    color: "var(--ds-text, #42526E)"
  },
  ':active': {
    background: "var(--ds-background-neutral-subtle-pressed, #B3D4FF)",
    // @ts-expect-error
    color: "var(--ds-text, #42526E)"
  }
});
var subtleInteractiveRefreshedStyles = xcss({
  ':hover': {
    background: "var(--ds-background-neutral-subtle-hovered, #091e4214)",
    color: 'color.text.subtle'
  },
  ':active': {
    background: "var(--ds-background-neutral-subtle-pressed, #B3D4FF)",
    color: 'color.text.subtle'
  }
});

// Required due to Jira's AUI CSS reset: https://product-fabric.atlassian.net/browse/DSP-15687
var linkDecorationUnsetStyles = xcss({
  textDecoration: 'none',
  ':hover': {
    textDecoration: 'none'
  },
  ':active': {
    textDecoration: 'none'
  },
  ':focus': {
    textDecoration: 'none'
  }
});
var disabledStyles$1 = xcss({
  cursor: 'not-allowed',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  background: "var(--ds-background-disabled, ".concat(N20A, ")"),
  // @ts-expect-error
  color: "var(--ds-text-disabled, #091E424F)",
  ':hover': {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-disabled, ".concat(N20A, ")"),
    // @ts-expect-error
    color: "var(--ds-text-disabled, #091E424F)"
  },
  ':active': {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-disabled, ".concat(N20A, ")"),
    // @ts-expect-error
    color: "var(--ds-text-disabled, #091E424F)"
  },
  '::after': {
    content: 'none'
  }
});
var selectedStyles = xcss({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  background: "var(--ds-background-selected, ".concat(N700, ")"),
  // @ts-expect-error
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  color: "var(--ds-text-selected, ".concat(N20, ")"),
  ':visited': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(N20, ")")
  }
});
var selectedRefreshedStyles = xcss({
  background: "var(--ds-background-selected, #E9F2FF)",
  color: 'color.text.selected',
  '::after': {
    content: '""',
    borderColor: 'color.border.selected'
  },
  ':visited': {
    color: 'color.text.selected'
  }
});
var selectedInsideSplitButtonStyles = xcss({
  // This is 2 so it appears above the split button divider when selected.
  // See split-button.tsx.
  // @ts-expect-error — We need a local zindex just for button.
  zIndex: 2
});
var selectedInteractiveStyles = xcss({
  ':hover': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(N20, ")"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-selected-hovered, ".concat(N700, ")")
  },
  ':active': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(N20, ")"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-selected-pressed, ".concat(N700, ")")
  }
});

// TODO: Remove me once we kill color fallbacks
var selectedWarningStyles = xcss({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  background: "var(--ds-background-selected, ".concat(Y400, ")"),
  // @ts-expect-error
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  color: "var(--ds-text-selected, ".concat(N800, ")"),
  ':hover': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(N20, ")"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-selected, ".concat(Y400, ")")
  },
  ':active': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(N20, ")"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-selected, ".concat(Y400, ")")
  }
});

// TODO: Remove me once we kill color fallbacks
var selectedDangerStyles = xcss({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  background: "var(--ds-background-selected, ".concat(R500, ")"),
  // @ts-expect-error
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  color: "var(--ds-text-selected, ".concat(N20, ")"),
  ':hover': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(N20, ")"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-selected, ".concat(R500, ")")
  },
  ':active': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(N20, ")"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-selected, ".concat(R500, ")")
  }
});

// TODO: Remove me once we kill color fallbacks
var selectedDiscoveryStyles = xcss({
  background: "var(--ds-background-selected, #403294)",
  // @ts-expect-error
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  color: "var(--ds-text-selected, ".concat(N20, ")"),
  ':hover': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(N20, ")"),
    background: "var(--ds-background-selected, #403294)"
  },
  ':active': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(N20, ")"),
    background: "var(--ds-background-selected, #403294)"
  }
});
var spacingCompactStyles = xcss({
  columnGap: 'space.050',
  height: "".concat(24 / 14, "em"),
  paddingInlineEnd: 'space.150',
  paddingInlineStart: 'space.150',
  verticalAlign: 'middle'
});
var baseSpacingCompactStyles = xcss({
  lineHeight: "".concat(24 / 14, "em")
});
var tokenizedSpacingCompactStyles = xcss({
  paddingBlock: 'space.025'
});
var circleStyles = xcss({
  borderRadius: 'border.radius.circle'
});
var fullWidthStyles = xcss({
  width: '100%'
});
var loadingStyles = xcss({
  cursor: 'progress'
});
var iconButtonStyles = xcss({
  height: "".concat(32 / 14, "em"),
  width: "".concat(32 / 14, "em"),
  paddingInlineEnd: 'space.0',
  paddingInlineStart: 'space.0'
});
var iconButtonCompactStyles = xcss({
  width: "".concat(24 / 14, "em"),
  height: "".concat(24 / 14, "em")
});
var buttonIconBeforeStyles = xcss({
  paddingInlineStart: 'space.100'
});
var buttonIconAfterStyles = xcss({
  paddingInlineEnd: 'space.100'
});
var splitButtonStyles = xcss({
  ':focus-visible': {
    zIndex: 'card'
  }
});
var navigationSplitButtonStyles = xcss({
  width: '24px',
  backgroundColor: 'color.background.neutral.subtle',
  paddingInlineEnd: 'space.075',
  paddingInlineStart: 'space.075'
});
var loadingOverlayStyles = xcss({
  display: 'flex',
  position: 'absolute',
  alignItems: 'center',
  justifyContent: 'center',
  insetBlockEnd: 'space.0',
  insetBlockStart: 'space.0',
  insetInlineEnd: 'space.0',
  insetInlineStart: 'space.0'
});

/**
 * __Use button base__
 *
 * A React hook that accepts a set of common Button props,
 * and processes them to return consistent base props for usage
 * across various Button components.
 *
 * It also:
 * - Implements auto focus when enabled.
 * - Appends the `onClick` event with UFO analytics tracking.
 *
 * @private
 */
var useButtonBase = function useButtonBase(_ref) {
  var _ref$appearance = _ref.appearance,
    propAppearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,
    _ref$autoFocus = _ref.autoFocus,
    autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus,
    _ref$isDisabled = _ref.isDisabled,
    propIsDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
    _ref$isLoading = _ref.isLoading,
    isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading,
    _ref$isSelected = _ref.isSelected,
    propIsSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,
    _ref$isIconButton = _ref.isIconButton,
    isIconButton = _ref$isIconButton === void 0 ? false : _ref$isIconButton,
    _ref$isCircle = _ref.isCircle,
    isCircle = _ref$isCircle === void 0 ? false : _ref$isCircle,
    _ref$hasIconBefore = _ref.hasIconBefore,
    hasIconBefore = _ref$hasIconBefore === void 0 ? false : _ref$hasIconBefore,
    _ref$hasIconAfter = _ref.hasIconAfter,
    hasIconAfter = _ref$hasIconAfter === void 0 ? false : _ref$hasIconAfter,
    children = _ref.children,
    onClick = _ref.onClick,
    onMouseDownCapture = _ref.onMouseDownCapture,
    onMouseUpCapture = _ref.onMouseUpCapture,
    onKeyDownCapture = _ref.onKeyDownCapture,
    onKeyUpCapture = _ref.onKeyUpCapture,
    onTouchStartCapture = _ref.onTouchStartCapture,
    onTouchEndCapture = _ref.onTouchEndCapture,
    onPointerDownCapture = _ref.onPointerDownCapture,
    onPointerUpCapture = _ref.onPointerUpCapture,
    onClickCapture = _ref.onClickCapture,
    ref = _ref.ref,
    _ref$shouldFitContain = _ref.shouldFitContainer,
    shouldFitContainer = _ref$shouldFitContain === void 0 ? false : _ref$shouldFitContain,
    _ref$spacing = _ref.spacing,
    propSpacing = _ref$spacing === void 0 ? 'default' : _ref$spacing,
    testId = _ref.testId,
    ariaLabel = _ref.ariaLabel,
    ariaLabelledBy = _ref.ariaLabelledBy;
  var localRef = reactExports.useRef(null);
  var splitButtonContext = useSplitButtonContext();
  var loadingLabelId = useId$1();
  var isSplitButton = Boolean(splitButtonContext);
  var isNavigationSplitButton = (splitButtonContext === null || splitButtonContext === void 0 ? void 0 : splitButtonContext.isNavigationSplitButton) || false;
  var isDefaultAppearanceSplitButton = (splitButtonContext === null || splitButtonContext === void 0 ? void 0 : splitButtonContext.appearance) === 'default';
  var appearance = isDefaultAppearanceSplitButton && fg('platform-component-visual-refresh') ? 'subtle' : (splitButtonContext === null || splitButtonContext === void 0 ? void 0 : splitButtonContext.appearance) || propAppearance;
  var spacing = (splitButtonContext === null || splitButtonContext === void 0 ? void 0 : splitButtonContext.spacing) || propSpacing;
  var isDisabled = (splitButtonContext === null || splitButtonContext === void 0 ? void 0 : splitButtonContext.isDisabled) || propIsDisabled;
  var isInteractive = !isDisabled && !isLoading;
  // Also treat loading buttons as disabled
  var isEffectivelyDisabled = isDisabled || isLoading;
  var isSelected = propIsSelected && !isDisabled;
  useAutoFocus(localRef, autoFocus);
  return _objectSpread$5({
    ref: mergeRefs([localRef, ref]),
    xcss: [fg('platform.design-system-team.button-tokenised-typography-styles') ? tokenizedButtonStyles : hardCodedButtonStyles, buttonStyles, appearance === 'default' && (fg('platform-component-visual-refresh') ? defaultRefreshedStyles : defaultStyles$1), appearance === 'default' && isInteractive && (fg('platform-component-visual-refresh') ? defaultInteractiveRefreshedStyles : defaultInteractiveStyles), appearance === 'primary' && primaryStyles, appearance === 'primary' && isInteractive && primaryInteractiveStyles, appearance === 'warning' && warningStyles, appearance === 'warning' && isInteractive && warningInteractiveStyles, appearance === 'danger' && dangerStyles, appearance === 'danger' && isInteractive && dangerInteractiveStyles, appearance === 'discovery' && discoveryStyles, appearance === 'discovery' && isInteractive && discoveryInteractiveStyles, appearance === 'subtle' && (fg('platform-component-visual-refresh') ? subtleRefreshedStyles : subtleStyles), appearance === 'subtle' && isInteractive && (fg('platform-component-visual-refresh') ? subtleInteractiveRefreshedStyles : subtleInteractiveStyles), linkDecorationUnsetStyles, isSelected && (fg('platform-component-visual-refresh') ? selectedRefreshedStyles : selectedStyles), isSelected && isSplitButton && selectedInsideSplitButtonStyles, isSelected && isInteractive && selectedInteractiveStyles,
    // TODO: remove me once we kill color fallbacks
    isSelected && appearance === 'danger' && selectedDangerStyles,
    // TODO: remove me once we kill color fallbacks
    isSelected && appearance === 'warning' && selectedWarningStyles,
    // TODO: remove me once we kill color fallbacks
    isSelected && appearance === 'discovery' && selectedDiscoveryStyles, isDisabled && disabledStyles$1, isCircle && !isSplitButton && circleStyles, spacing === 'compact' && spacingCompactStyles, spacing === 'compact' && (fg('platform.design-system-team.button-tokenised-typography-styles') ? tokenizedSpacingCompactStyles : baseSpacingCompactStyles), hasIconBefore && buttonIconBeforeStyles, hasIconAfter && buttonIconAfterStyles, isIconButton && iconButtonStyles, isIconButton && spacing === 'compact' && iconButtonCompactStyles, shouldFitContainer && fullWidthStyles, isLoading && loadingStyles, isSplitButton && splitButtonStyles, isNavigationSplitButton && navigationSplitButtonStyles],
    isDisabled: isEffectivelyDisabled,
    children: /*#__PURE__*/React.createElement(reactExports.Fragment, null, children, isLoading ? /*#__PURE__*/React.createElement(Box, {
      as: "span",
      xcss: loadingOverlayStyles
    }, renderLoadingOverlay({
      spacing: spacing,
      appearance: appearance,
      isDisabled: isDisabled,
      isSelected: isSelected,
      testId: testId
    })) : null, isLoading && (children && !ariaLabel && !ariaLabelledBy || ariaLabelledBy) && /*#__PURE__*/React.createElement(VisuallyHidden, {
      id: loadingLabelId
    }, LOADING_LABEL)),
    'aria-label': isLoading && ariaLabel && !ariaLabelledBy ? "".concat(ariaLabel, " ").concat(LOADING_LABEL) : ariaLabel,
    'aria-labelledby': isLoading && ariaLabelledBy ? "".concat(ariaLabelledBy, " ").concat(loadingLabelId) : ariaLabelledBy
  }, blockEvents(isEffectivelyDisabled, {
    onClick: onClick,
    onMouseDownCapture: onMouseDownCapture,
    onMouseUpCapture: onMouseUpCapture,
    onKeyDownCapture: onKeyDownCapture,
    onKeyUpCapture: onKeyUpCapture,
    onTouchStartCapture: onTouchStartCapture,
    onTouchEndCapture: onTouchEndCapture,
    onPointerDownCapture: onPointerDownCapture,
    onPointerUpCapture: onPointerUpCapture,
    onClickCapture: onClickCapture
  }));
};

/**
 * __Use default button base__
 *
 * A React hook that accepts a set of default Button props,
 * and processes them to return consistent base props for usage
 * across Button and LinkButton variants.
 *
 * @private
 */
var useDefaultButton = function useDefaultButton(_ref) {
  var analyticsContext = _ref.analyticsContext,
    appearance = _ref.appearance,
    ariaLabel = _ref.ariaLabel,
    ariaLabelledBy = _ref.ariaLabelledBy,
    autoFocus = _ref.autoFocus,
    buttonType = _ref.buttonType,
    children = _ref.children,
    iconAfter = _ref.iconAfter,
    iconBefore = _ref.iconBefore,
    interactionName = _ref.interactionName,
    isDisabled = _ref.isDisabled,
    _ref$isLoading = _ref.isLoading,
    isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading,
    isSelected = _ref.isSelected,
    onClick = _ref.onClick,
    onClickCapture = _ref.onClickCapture,
    onKeyDownCapture = _ref.onKeyDownCapture,
    onKeyUpCapture = _ref.onKeyUpCapture,
    onMouseDownCapture = _ref.onMouseDownCapture,
    onMouseUpCapture = _ref.onMouseUpCapture,
    onPointerDownCapture = _ref.onPointerDownCapture,
    onPointerUpCapture = _ref.onPointerUpCapture,
    onTouchEndCapture = _ref.onTouchEndCapture,
    onTouchStartCapture = _ref.onTouchStartCapture,
    ref = _ref.ref,
    shouldFitContainer = _ref.shouldFitContainer,
    spacing = _ref.spacing,
    testId = _ref.testId;
  var baseProps = useButtonBase({
    analyticsContext: analyticsContext,
    appearance: appearance,
    autoFocus: autoFocus,
    ariaLabel: ariaLabel,
    ariaLabelledBy: ariaLabelledBy,
    buttonType: buttonType,
    children: /*#__PURE__*/React.createElement(reactExports.Fragment, null, iconBefore && /*#__PURE__*/React.createElement(Content, {
      type: "icon",
      position: "before",
      isLoading: isLoading
    }, /*#__PURE__*/React.createElement(IconRenderer, {
      icon: iconBefore
    })), children && /*#__PURE__*/React.createElement(Content, {
      isLoading: isLoading
    }, children), iconAfter && /*#__PURE__*/React.createElement(Content, {
      type: "icon",
      position: "after",
      isLoading: isLoading
    }, /*#__PURE__*/React.createElement(IconRenderer, {
      icon: iconAfter
    }))),
    interactionName: interactionName,
    isDisabled: isDisabled,
    isLoading: isLoading,
    isSelected: isSelected,
    onClick: onClick,
    onMouseDownCapture: onMouseDownCapture,
    onMouseUpCapture: onMouseUpCapture,
    onKeyDownCapture: onKeyDownCapture,
    onKeyUpCapture: onKeyUpCapture,
    onTouchStartCapture: onTouchStartCapture,
    onTouchEndCapture: onTouchEndCapture,
    onPointerDownCapture: onPointerDownCapture,
    onPointerUpCapture: onPointerUpCapture,
    onClickCapture: onClickCapture,
    ref: ref,
    shouldFitContainer: shouldFitContainer,
    spacing: spacing,
    testId: testId,
    hasIconBefore: Boolean(iconBefore),
    hasIconAfter: Boolean(iconAfter)
  });
  return baseProps;
};

var _excluded$7 = ["analyticsContext", "appearance", "aria-label", "aria-labelledby", "autoFocus", "children", "iconAfter", "iconBefore", "interactionName", "isDisabled", "isLoading", "isSelected", "onClick", "onClickCapture", "onKeyDownCapture", "onKeyUpCapture", "onMouseDownCapture", "onMouseUpCapture", "onPointerDownCapture", "onPointerUpCapture", "onTouchEndCapture", "onTouchStartCapture", "shouldFitContainer", "spacing", "testId", "type"],
  _excluded2$2 = ["className", "css", "as", "style"];
/**
 * __Button__
 *
 * A button triggers an event or action.
 *
 * - [Examples](https://atlassian.design/components/button/examples)
 * - [Code](https://atlassian.design/components/button/code)
 * - [Usage](https://atlassian.design/components/button/usage)
 */
var Button = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function Button(_ref, ref) {
  var analyticsContext = _ref.analyticsContext,
    appearance = _ref.appearance,
    ariaLabel = _ref['aria-label'],
    ariaLabelledBy = _ref['aria-labelledby'],
    autoFocus = _ref.autoFocus,
    children = _ref.children,
    iconAfter = _ref.iconAfter,
    iconBefore = _ref.iconBefore,
    interactionName = _ref.interactionName,
    isDisabled = _ref.isDisabled,
    isLoading = _ref.isLoading,
    isSelected = _ref.isSelected,
    onClick = _ref.onClick,
    onClickCapture = _ref.onClickCapture,
    onKeyDownCapture = _ref.onKeyDownCapture,
    onKeyUpCapture = _ref.onKeyUpCapture,
    onMouseDownCapture = _ref.onMouseDownCapture,
    onMouseUpCapture = _ref.onMouseUpCapture,
    onPointerDownCapture = _ref.onPointerDownCapture,
    onPointerUpCapture = _ref.onPointerUpCapture,
    onTouchEndCapture = _ref.onTouchEndCapture,
    onTouchStartCapture = _ref.onTouchStartCapture,
    shouldFitContainer = _ref.shouldFitContainer,
    spacing = _ref.spacing,
    testId = _ref.testId,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'button' : _ref$type,
    unsafeRest = _objectWithoutProperties(_ref, _excluded$7);
  // @ts-expect-error
  unsafeRest.className;
    unsafeRest.css;
    unsafeRest.as;
    unsafeRest.style;
    var saferRest = _objectWithoutProperties(unsafeRest, _excluded2$2);
  var baseProps = useDefaultButton({
    ariaLabel: ariaLabel,
    ariaLabelledBy: ariaLabelledBy,
    analyticsContext: analyticsContext,
    appearance: appearance,
    autoFocus: autoFocus,
    buttonType: 'button',
    children: children,
    iconAfter: iconAfter,
    iconBefore: iconBefore,
    interactionName: interactionName,
    isDisabled: isDisabled,
    isLoading: isLoading,
    isSelected: isSelected,
    onClick: onClick,
    onClickCapture: onClickCapture,
    onKeyDownCapture: onKeyDownCapture,
    onKeyUpCapture: onKeyUpCapture,
    onMouseDownCapture: onMouseDownCapture,
    onMouseUpCapture: onMouseUpCapture,
    onPointerDownCapture: onPointerDownCapture,
    onPointerUpCapture: onPointerUpCapture,
    onTouchEndCapture: onTouchEndCapture,
    onTouchStartCapture: onTouchStartCapture,
    ref: ref,
    shouldFitContainer: shouldFitContainer,
    spacing: spacing,
    testId: testId
  });
  return /*#__PURE__*/React.createElement(Pressable
  // TODO: Remove spread props
  , _extends({}, saferRest, {
    "aria-label": baseProps['aria-label'],
    "aria-labelledby": baseProps['aria-labelledby'],
    ref: baseProps.ref,
    xcss: baseProps.xcss,
    isDisabled: baseProps.isDisabled,
    onClick: baseProps.onClick,
    onMouseDownCapture: baseProps.onMouseDownCapture,
    onMouseUpCapture: baseProps.onMouseUpCapture,
    onKeyDownCapture: baseProps.onKeyDownCapture,
    onKeyUpCapture: baseProps.onKeyUpCapture,
    onTouchStartCapture: baseProps.onTouchStartCapture,
    onTouchEndCapture: baseProps.onTouchEndCapture,
    onPointerDownCapture: baseProps.onPointerDownCapture,
    onPointerUpCapture: baseProps.onPointerUpCapture,
    onClickCapture: baseProps.onClickCapture,
    type: type,
    testId: testId,
    analyticsContext: analyticsContext,
    interactionName: interactionName,
    componentName: "Button"
  }), baseProps.children);
}));
Button.displayName = 'Button';

const StorageContext = reactExports.createContext(null);
const useStorage = () => {
    const storage = reactExports.useContext(StorageContext);
    if (!storage) {
        throw new Error("Cannot use useStorage outside of its provider");
    }
    return storage;
};
const StorageProvider = ({ storage, children }) => {
    const queryClient = useQueryClient();
    const { data: storageAvailable } = useSuspenseQuery({
        queryKey: teamConfigurationKeys.storageContainer(),
        queryFn: () => storage.storageContainerExists(globalTeamConfigurationStorageKey),
    });
    const { mutate: createStorage } = useMutation({
        mutationFn: () => storage.createStorageContainer(globalTeamConfigurationStorageKey, {}),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: teamConfigurationKeys.storageContainer() });
        },
    });
    if (!storageAvailable) {
        return (React.createElement(Flex, { direction: "column", gap: "space.100", justifyContent: "center", alignItems: "center" },
            React.createElement(Heading, { size: "medium" }, "Team storage has not been configured"),
            React.createElement(Button, { appearance: "primary", onClick: () => createStorage() }, "Configure now")));
    }
    return React.createElement(StorageContext.Provider, { value: storage }, children);
};

const globalTeamConfigurationStorageKey = "global-configuration";
const teamConfigurationKeys = {
    all: ["team-configuration"],
    storageContainer: () => [...teamConfigurationKeys.all, "storage-available"],
    globalConfiguration: () => [...teamConfigurationKeys.all, globalTeamConfigurationStorageKey],
};

const useGlobalTeamConfiguration = () => {
    const { get } = useStorage();
    const { data } = useSuspenseQuery({
        queryKey: teamConfigurationKeys.globalConfiguration(),
        queryFn: async () => {
            const data = await get(globalTeamConfigurationStorageKey);
            if (!data) {
                return {};
            }
            return data;
        },
    });
    return data;
};

const createNormalizeConfiguration = (values) => {
    return {
        getDaysPerSprint: () => Number(values.sprintLength),
        getVelocity: () => Number(values.velocityPerSprint),
        getParallelWorkLimit: () => Number(values.tracks),
        getStartDate: ({ fields }) => {
            const value = fields[values.startDateField];
            if (!value || typeof value !== "string") {
                return null;
            }
            return value;
        },
        getConfidence: ({ fields }) => {
            const value = fields[values.confidenceField];
            if (!value) {
                return null;
            }
            const confidence = Number(value);
            if (isNaN(confidence)) {
                return null;
            }
            return confidence;
        },
        getDueDate: ({ fields }) => {
            const value = fields[values.dueDateField];
            if (!value || typeof value !== "string") {
                return null;
            }
            return value;
        },
        getStoryPoints: ({ fields }) => {
            const value = fields[values.estimateField];
            if (!value) {
                return null;
            }
            const storyPoints = Number(value);
            if (isNaN(storyPoints)) {
                return null;
            }
            return storyPoints;
        },
        getStoryPointsMedian: ({ fields }) => {
            const value = fields[values.estimateField];
            if (!value) {
                return null;
            }
            const storyPoints = Number(value);
            if (isNaN(storyPoints)) {
                return null;
            }
            return storyPoints;
        },
    };
};

const useSaveGlobalTeamConfiguration = ({ onUpdate }) => {
    const queryClient = useQueryClient();
    const { showFlag } = useFlags();
    const { update } = useStorage();
    const { mutate } = useMutation({
        mutationFn: (values) => {
            return update(globalTeamConfigurationStorageKey, values);
        },
        onSuccess: (_, updatedValues) => {
            onUpdate?.(createNormalizeConfiguration(updatedValues));
            queryClient.invalidateQueries({ queryKey: teamConfigurationKeys.globalConfiguration() });
        },
        onError: (error) => {
            let description = error?.message;
            if (!description) {
                description = "Something went wrong";
            }
            showFlag({
                title: "Uh Oh!",
                description,
                isAutoDismiss: true,
                icon: React.createElement(default_1$8, { label: "error" }),
            });
        },
    });
    return mutate;
};

function isFieldUpdate(event) {
    return [
        "sprintLength",
        "velocityPerSprint",
        "tracks",
        "estimateField",
        "confidenceField",
        "startDateField",
        "dueDateField",
    ].includes(event.name);
}
const nonFieldDefaults = {
    sprintLength: 10,
    velocityPerSprint: 21,
    tracks: 1,
};
const findFieldCalled = (name, jiraFields) => {
    return jiraFields.find((field) => field.name.toLowerCase() === name.toLowerCase())?.name;
};
const createDefaultJiraFieldGetter = (formField, possibleNames, nameFragments = []) => {
    return function (userData, jiraFields) {
        const userDefinedFieldExists = findFieldCalled(formField, jiraFields);
        if (userData?.[formField] && userDefinedFieldExists) {
            return userData[formField];
        }
        for (const possibleName of possibleNames) {
            const field = findFieldCalled(possibleName, jiraFields);
            if (field) {
                return field;
            }
        }
        for (const fragment of nameFragments) {
            const field = jiraFields.find(({ name }) => name.includes(fragment));
            if (field) {
                return field.name;
            }
        }
        throw new Error(`Could not determine default value for ${formField}`);
    };
};
const getEstimateField = createDefaultJiraFieldGetter("estimateField", ["story points median", "days median", "story points", "story point estimate"], ["median", "estimate"]);
const getConfidenceField = createDefaultJiraFieldGetter("confidenceField", ["Story points confidence", "Estimate confidence", "Days confidence"], ["confidence"]);
const getStartDateField = createDefaultJiraFieldGetter("startDateField", ["start date", "starting date"]);
const getDueDateField = createDefaultJiraFieldGetter("dueDateField", ["due date", "end date", "target date"]);
const getFormData = async (jira, storage) => {
    const [jiraFields, userData] = await Promise.all([
        jira.fetchJiraFields(),
        storage.get(globalTeamConfigurationStorageKey),
    ]);
    return addDefaultFormData(jiraFields, userData ?? {});
};
const addDefaultFormData = (jiraFields, userData) => {
    return {
        ...nonFieldDefaults,
        ...userData,
        estimateField: getEstimateField(userData, jiraFields),
        confidenceField: getConfidenceField(userData, jiraFields),
        startDateField: getStartDateField(userData, jiraFields),
        dueDateField: getDueDateField(userData, jiraFields),
    };
};

const TextField = ({ register, onSave, type, label, name, min, disabled = false }) => {
    const handleBlur = (eventTarget) => {
        if (!isFieldUpdate(eventTarget)) {
            return;
        }
        onSave(eventTarget);
    };
    return (React.createElement(Field, { name: "sprintLength", label: label, isRequired: true }, () => (React.createElement(Textfield, { isDisabled: disabled, type: type, min: min, autoComplete: "off", ...register(name), onBlur: ({ target }) => handleBlur(target) }))));
};

function ownKeys$5(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys$5(Object(t), !0).forEach(function (r) {
      _defineProperty$1(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}

var _excluded$6 = ["defaultInputValue", "defaultMenuIsOpen", "defaultValue", "inputValue", "menuIsOpen", "onChange", "onInputChange", "onMenuClose", "onMenuOpen", "value"];
function useStateManager(_ref) {
  var _ref$defaultInputValu = _ref.defaultInputValue,
    defaultInputValue = _ref$defaultInputValu === void 0 ? '' : _ref$defaultInputValu,
    _ref$defaultMenuIsOpe = _ref.defaultMenuIsOpen,
    defaultMenuIsOpen = _ref$defaultMenuIsOpe === void 0 ? false : _ref$defaultMenuIsOpe,
    _ref$defaultValue = _ref.defaultValue,
    defaultValue = _ref$defaultValue === void 0 ? null : _ref$defaultValue,
    propsInputValue = _ref.inputValue,
    propsMenuIsOpen = _ref.menuIsOpen,
    propsOnChange = _ref.onChange,
    propsOnInputChange = _ref.onInputChange,
    propsOnMenuClose = _ref.onMenuClose,
    propsOnMenuOpen = _ref.onMenuOpen,
    propsValue = _ref.value,
    restSelectProps = _objectWithoutProperties(_ref, _excluded$6);
  var _useState = reactExports.useState(propsInputValue !== undefined ? propsInputValue : defaultInputValue),
    _useState2 = _slicedToArray(_useState, 2),
    stateInputValue = _useState2[0],
    setStateInputValue = _useState2[1];
  var _useState3 = reactExports.useState(propsMenuIsOpen !== undefined ? propsMenuIsOpen : defaultMenuIsOpen),
    _useState4 = _slicedToArray(_useState3, 2),
    stateMenuIsOpen = _useState4[0],
    setStateMenuIsOpen = _useState4[1];
  var _useState5 = reactExports.useState(propsValue !== undefined ? propsValue : defaultValue),
    _useState6 = _slicedToArray(_useState5, 2),
    stateValue = _useState6[0],
    setStateValue = _useState6[1];
  var onChange = reactExports.useCallback(function (value, actionMeta) {
    if (typeof propsOnChange === 'function') {
      propsOnChange(value, actionMeta);
    }
    setStateValue(value);
  }, [propsOnChange]);
  var onInputChange = reactExports.useCallback(function (value, actionMeta) {
    var newValue;
    if (typeof propsOnInputChange === 'function') {
      newValue = propsOnInputChange(value, actionMeta);
    }
    setStateInputValue(newValue !== undefined ? newValue : value);
  }, [propsOnInputChange]);
  var onMenuOpen = reactExports.useCallback(function () {
    if (typeof propsOnMenuOpen === 'function') {
      propsOnMenuOpen();
    }
    setStateMenuIsOpen(true);
  }, [propsOnMenuOpen]);
  var onMenuClose = reactExports.useCallback(function () {
    if (typeof propsOnMenuClose === 'function') {
      propsOnMenuClose();
    }
    setStateMenuIsOpen(false);
  }, [propsOnMenuClose]);
  var inputValue = propsInputValue !== undefined ? propsInputValue : stateInputValue;
  var menuIsOpen = propsMenuIsOpen !== undefined ? propsMenuIsOpen : stateMenuIsOpen;
  var value = propsValue !== undefined ? propsValue : stateValue;
  return _objectSpread2(_objectSpread2({}, restSelectProps), {}, {
    inputValue: inputValue,
    menuIsOpen: menuIsOpen,
    onChange: onChange,
    onInputChange: onInputChange,
    onMenuClose: onMenuClose,
    onMenuOpen: onMenuOpen,
    value: value
  });
}

function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
    return !!t;
  })();
}

function _createSuper(t) {
  var r = _isNativeReflectConstruct();
  return function () {
    var e,
      o = _getPrototypeOf(t);
    if (r) {
      var s = _getPrototypeOf(this).constructor;
      e = Reflect.construct(o, arguments, s);
    } else e = o.apply(this, arguments);
    return _possibleConstructorReturn(this, e);
  };
}

function _taggedTemplateLiteral(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, {
    raw: {
      value: Object.freeze(t)
    }
  }));
}

/**
 * Custom positioning reference element.
 * @see https://floating-ui.com/docs/virtual-elements
 */

const min = Math.min;
const max = Math.max;
const round = Math.round;
const floor = Math.floor;
const createCoords = v => ({
  x: v,
  y: v
});
function rectToClientRect(rect) {
  const {
    x,
    y,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x,
    y
  };
}

function hasWindow() {
  return typeof window !== 'undefined';
}
function getNodeName(node) {
  if (isNode$1(node)) {
    return (node.nodeName || '').toLowerCase();
  }
  // Mocked nodes in testing environments may not be instances of Node. By
  // returning `#document` an infinite loop won't occur.
  // https://github.com/floating-ui/floating-ui/issues/2317
  return '#document';
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode$1(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode$1(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (!hasWindow() || typeof ShadowRoot === 'undefined') {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle$1(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);
}
function isWebKit() {
  if (typeof CSS === 'undefined' || !CSS.supports) return false;
  return CSS.supports('-webkit-backdrop-filter', 'none');
}
function isLastTraversableNode(node) {
  return ['html', 'body', '#document'].includes(getNodeName(node));
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function getParentNode(node) {
  if (getNodeName(node) === 'html') {
    return node;
  }
  const result =
  // Step into the shadow DOM of the parent of a slotted node.
  node.assignedSlot ||
  // DOM Element detected.
  node.parentNode ||
  // ShadowRoot detected.
  isShadowRoot(node) && node.host ||
  // Fallback.
  getDocumentElement(node);
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    const frameElement = getFrameElement(win);
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getFrameElement(win) {
  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
}

function getCssDimensions(element) {
  const css = getComputedStyle$1(element);
  // In testing environments, the `width` and `height` properties are empty
  // strings for SVG elements, returning NaN. Fallback to `0` in this case.
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}

function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}

function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;

  // 0, NaN, or Infinity should always fallback to 1.

  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}

const noOffsets = /*#__PURE__*/createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  {
    return false;
  }
}

function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets() ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent;
    let currentWin = win;
    let currentIFrame = getFrameElement(currentWin);
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle$1(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = getFrameElement(currentWin);
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}

// https://samthor.au/2021/observing-dom/
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          // If the reference is clipped, the ratio is 0. Throttle the refresh
          // to prevent an infinite loop of updates.
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1000);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }

    // Older browsers don't support a `document` as the root and will throw an
    // error.
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}

/**
 * Automatically updates the position of the floating element when necessary.
 * Should only be called when the floating element is mounted on the DOM or
 * visible on the screen.
 * @returns cleanup function that should be invoked when the floating element is
 * removed from the DOM or hidden from the screen.
 * @see https://floating-ui.com/docs/autoUpdate
 */
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === 'function',
    layoutShift = typeof IntersectionObserver === 'function',
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];
  ancestors.forEach(ancestor => {
    ancestorScroll && ancestor.addEventListener('scroll', update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener('resize', update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver(_ref => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        // Prevent update loops when using the `size` middleware.
        // https://github.com/floating-ui/floating-ui/issues/1740
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach(ancestor => {
      ancestorScroll && ancestor.removeEventListener('scroll', update);
      ancestorResize && ancestor.removeEventListener('resize', update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}

var index = typeof document !== 'undefined' ? reactExports.useLayoutEffect : reactExports.useEffect;

var _excluded$4 = ["className", "clearValue", "cx", "getStyles", "getClassNames", "getValue", "hasValue", "isMulti", "isRtl", "options", "selectOption", "selectProps", "setValue", "theme"];
// ==============================
// NO OP
// ==============================

var noop$2 = function noop() {};

// ==============================
// Class Name Prefixer
// ==============================

/**
 String representation of component state for styling with class names.

 Expects an array of strings OR a string/object pair:
 - className(['comp', 'comp-arg', 'comp-arg-2'])
   @returns 'react-select__comp react-select__comp-arg react-select__comp-arg-2'
 - className('comp', { some: true, state: false })
   @returns 'react-select__comp react-select__comp--some'
*/
function applyPrefixToName(prefix, name) {
  if (!name) {
    return prefix;
  } else if (name[0] === '-') {
    return prefix + name;
  } else {
    return prefix + '__' + name;
  }
}
function classNames(prefix, state) {
  for (var _len = arguments.length, classNameList = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    classNameList[_key - 2] = arguments[_key];
  }
  var arr = [].concat(classNameList);
  if (state && prefix) {
    for (var key in state) {
      if (state.hasOwnProperty(key) && state[key]) {
        arr.push("".concat(applyPrefixToName(prefix, key)));
      }
    }
  }
  return arr.filter(function (i) {
    return i;
  }).map(function (i) {
    return String(i).trim();
  }).join(' ');
}
// ==============================
// Clean Value
// ==============================

var cleanValue = function cleanValue(value) {
  if (isArray(value)) return value.filter(Boolean);
  if (_typeof(value) === 'object' && value !== null) return [value];
  return [];
};

// ==============================
// Clean Common Props
// ==============================

var cleanCommonProps = function cleanCommonProps(props) {
  //className
  props.className;
    props.clearValue;
    props.cx;
    props.getStyles;
    props.getClassNames;
    props.getValue;
    props.hasValue;
    props.isMulti;
    props.isRtl;
    props.options;
    props.selectOption;
    props.selectProps;
    props.setValue;
    props.theme;
    var innerProps = _objectWithoutProperties(props, _excluded$4);
  return _objectSpread2({}, innerProps);
};

// ==============================
// Get Style Props
// ==============================

var getStyleProps = function getStyleProps(props, name, classNamesState) {
  var cx = props.cx,
    getStyles = props.getStyles,
    getClassNames = props.getClassNames,
    className = props.className;
  return {
    css: getStyles(name, props),
    className: cx(classNamesState !== null && classNamesState !== void 0 ? classNamesState : {}, getClassNames(name, props), className)
  };
};

// ==============================
// Scroll Helpers
// ==============================

function isDocumentElement(el) {
  return [document.documentElement, document.body, window].indexOf(el) > -1;
}

// Normalized Scroll Top
// ------------------------------

function normalizedHeight(el) {
  if (isDocumentElement(el)) {
    return window.innerHeight;
  }
  return el.clientHeight;
}

// Normalized scrollTo & scrollTop
// ------------------------------

function getScrollTop(el) {
  if (isDocumentElement(el)) {
    return window.pageYOffset;
  }
  return el.scrollTop;
}
function scrollTo(el, top) {
  // with a scroll distance, we perform scroll on the element
  if (isDocumentElement(el)) {
    window.scrollTo(0, top);
    return;
  }
  el.scrollTop = top;
}

// Get Scroll Parent
// ------------------------------

function getScrollParent(element) {
  var style = getComputedStyle(element);
  var excludeStaticParent = style.position === 'absolute';
  var overflowRx = /(auto|scroll)/;
  if (style.position === 'fixed') return document.documentElement;
  for (var parent = element; parent = parent.parentElement;) {
    style = getComputedStyle(parent);
    if (excludeStaticParent && style.position === 'static') {
      continue;
    }
    if (overflowRx.test(style.overflow + style.overflowY + style.overflowX)) {
      return parent;
    }
  }
  return document.documentElement;
}

// Animated Scroll To
// ------------------------------

/**
  @param t: time (elapsed)
  @param b: initial value
  @param c: amount of change
  @param d: duration
*/
function easeOutCubic(t, b, c, d) {
  return c * ((t = t / d - 1) * t * t + 1) + b;
}
function animatedScrollTo(element, to) {
  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;
  var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noop$2;
  var start = getScrollTop(element);
  var change = to - start;
  var increment = 10;
  var currentTime = 0;
  function animateScroll() {
    currentTime += increment;
    var val = easeOutCubic(currentTime, start, change, duration);
    scrollTo(element, val);
    if (currentTime < duration) {
      window.requestAnimationFrame(animateScroll);
    } else {
      callback(element);
    }
  }
  animateScroll();
}

// Scroll Into View
// ------------------------------

function scrollIntoView(menuEl, focusedEl) {
  var menuRect = menuEl.getBoundingClientRect();
  var focusedRect = focusedEl.getBoundingClientRect();
  var overScroll = focusedEl.offsetHeight / 3;
  if (focusedRect.bottom + overScroll > menuRect.bottom) {
    scrollTo(menuEl, Math.min(focusedEl.offsetTop + focusedEl.clientHeight - menuEl.offsetHeight + overScroll, menuEl.scrollHeight));
  } else if (focusedRect.top - overScroll < menuRect.top) {
    scrollTo(menuEl, Math.max(focusedEl.offsetTop - overScroll, 0));
  }
}

// ==============================
// Get bounding client object
// ==============================

// cannot get keys using array notation with DOMRect
function getBoundingClientObj(element) {
  var rect = element.getBoundingClientRect();
  return {
    bottom: rect.bottom,
    height: rect.height,
    left: rect.left,
    right: rect.right,
    top: rect.top,
    width: rect.width
  };
}

// ==============================
// Touch Capability Detector
// ==============================

function isTouchCapable() {
  try {
    document.createEvent('TouchEvent');
    return true;
  } catch (e) {
    return false;
  }
}

// ==============================
// Mobile Device Detector
// ==============================

function isMobileDevice() {
  try {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  } catch (e) {
    return false;
  }
}

// ==============================
// Passive Event Detector
// ==============================

// https://github.com/rafgraph/detect-it/blob/main/src/index.ts#L19-L36
var passiveOptionAccessed = false;
var options = {
  get passive() {
    return passiveOptionAccessed = true;
  }
};
// check for SSR
var w = typeof window !== 'undefined' ? window : {};
if (w.addEventListener && w.removeEventListener) {
  w.addEventListener('p', noop$2, options);
  w.removeEventListener('p', noop$2, false);
}
var supportsPassiveEvents = passiveOptionAccessed;
function notNullish(item) {
  return item != null;
}
function isArray(arg) {
  return Array.isArray(arg);
}
function valueTernary(isMulti, multiValue, singleValue) {
  return isMulti ? multiValue : singleValue;
}
function singleValueAsValue(singleValue) {
  return singleValue;
}
function multiValueAsValue(multiValue) {
  return multiValue;
}
var removeProps = function removeProps(propsObj) {
  for (var _len2 = arguments.length, properties = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    properties[_key2 - 1] = arguments[_key2];
  }
  var propsMap = Object.entries(propsObj).filter(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1),
      key = _ref2[0];
    return !properties.includes(key);
  });
  return propsMap.reduce(function (newProps, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
      key = _ref4[0],
      val = _ref4[1];
    newProps[key] = val;
    return newProps;
  }, {});
};

var _excluded$3 = ["children", "innerProps"],
  _excluded2$1 = ["children", "innerProps"];
function getMenuPlacement(_ref) {
  var preferredMaxHeight = _ref.maxHeight,
    menuEl = _ref.menuEl,
    minHeight = _ref.minHeight,
    preferredPlacement = _ref.placement,
    shouldScroll = _ref.shouldScroll,
    isFixedPosition = _ref.isFixedPosition,
    controlHeight = _ref.controlHeight;
  var scrollParent = getScrollParent(menuEl);
  var defaultState = {
    placement: 'bottom',
    maxHeight: preferredMaxHeight
  };

  // something went wrong, return default state
  if (!menuEl || !menuEl.offsetParent) return defaultState;

  // we can't trust `scrollParent.scrollHeight` --> it may increase when
  // the menu is rendered
  var _scrollParent$getBoun = scrollParent.getBoundingClientRect(),
    scrollHeight = _scrollParent$getBoun.height;
  var _menuEl$getBoundingCl = menuEl.getBoundingClientRect(),
    menuBottom = _menuEl$getBoundingCl.bottom,
    menuHeight = _menuEl$getBoundingCl.height,
    menuTop = _menuEl$getBoundingCl.top;
  var _menuEl$offsetParent$ = menuEl.offsetParent.getBoundingClientRect(),
    containerTop = _menuEl$offsetParent$.top;
  var viewHeight = isFixedPosition ? window.innerHeight : normalizedHeight(scrollParent);
  var scrollTop = getScrollTop(scrollParent);
  var marginBottom = parseInt(getComputedStyle(menuEl).marginBottom, 10);
  var marginTop = parseInt(getComputedStyle(menuEl).marginTop, 10);
  var viewSpaceAbove = containerTop - marginTop;
  var viewSpaceBelow = viewHeight - menuTop;
  var scrollSpaceAbove = viewSpaceAbove + scrollTop;
  var scrollSpaceBelow = scrollHeight - scrollTop - menuTop;
  var scrollDown = menuBottom - viewHeight + scrollTop + marginBottom;
  var scrollUp = scrollTop + menuTop - marginTop;
  var scrollDuration = 160;
  switch (preferredPlacement) {
    case 'auto':
    case 'bottom':
      // 1: the menu will fit, do nothing
      if (viewSpaceBelow >= menuHeight) {
        return {
          placement: 'bottom',
          maxHeight: preferredMaxHeight
        };
      }

      // 2: the menu will fit, if scrolled
      if (scrollSpaceBelow >= menuHeight && !isFixedPosition) {
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollDown, scrollDuration);
        }
        return {
          placement: 'bottom',
          maxHeight: preferredMaxHeight
        };
      }

      // 3: the menu will fit, if constrained
      if (!isFixedPosition && scrollSpaceBelow >= minHeight || isFixedPosition && viewSpaceBelow >= minHeight) {
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollDown, scrollDuration);
        }

        // we want to provide as much of the menu as possible to the user,
        // so give them whatever is available below rather than the minHeight.
        var constrainedHeight = isFixedPosition ? viewSpaceBelow - marginBottom : scrollSpaceBelow - marginBottom;
        return {
          placement: 'bottom',
          maxHeight: constrainedHeight
        };
      }

      // 4. Forked beviour when there isn't enough space below

      // AUTO: flip the menu, render above
      if (preferredPlacement === 'auto' || isFixedPosition) {
        // may need to be constrained after flipping
        var _constrainedHeight = preferredMaxHeight;
        var spaceAbove = isFixedPosition ? viewSpaceAbove : scrollSpaceAbove;
        if (spaceAbove >= minHeight) {
          _constrainedHeight = Math.min(spaceAbove - marginBottom - controlHeight, preferredMaxHeight);
        }
        return {
          placement: 'top',
          maxHeight: _constrainedHeight
        };
      }

      // BOTTOM: allow browser to increase scrollable area and immediately set scroll
      if (preferredPlacement === 'bottom') {
        if (shouldScroll) {
          scrollTo(scrollParent, scrollDown);
        }
        return {
          placement: 'bottom',
          maxHeight: preferredMaxHeight
        };
      }
      break;
    case 'top':
      // 1: the menu will fit, do nothing
      if (viewSpaceAbove >= menuHeight) {
        return {
          placement: 'top',
          maxHeight: preferredMaxHeight
        };
      }

      // 2: the menu will fit, if scrolled
      if (scrollSpaceAbove >= menuHeight && !isFixedPosition) {
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollUp, scrollDuration);
        }
        return {
          placement: 'top',
          maxHeight: preferredMaxHeight
        };
      }

      // 3: the menu will fit, if constrained
      if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
        var _constrainedHeight2 = preferredMaxHeight;

        // we want to provide as much of the menu as possible to the user,
        // so give them whatever is available below rather than the minHeight.
        if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
          _constrainedHeight2 = isFixedPosition ? viewSpaceAbove - marginTop : scrollSpaceAbove - marginTop;
        }
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollUp, scrollDuration);
        }
        return {
          placement: 'top',
          maxHeight: _constrainedHeight2
        };
      }

      // 4. not enough space, the browser WILL NOT increase scrollable area when
      // absolutely positioned element rendered above the viewport (only below).
      // Flip the menu, render below
      return {
        placement: 'bottom',
        maxHeight: preferredMaxHeight
      };
    default:
      throw new Error("Invalid placement provided \"".concat(preferredPlacement, "\"."));
  }
  return defaultState;
}

// Menu Component
// ------------------------------

function alignToControl(placement) {
  var placementToCSSProp = {
    bottom: 'top',
    top: 'bottom'
  };
  return placement ? placementToCSSProp[placement] : 'bottom';
}
var coercePlacement = function coercePlacement(p) {
  return p === 'auto' ? 'bottom' : p;
};
var menuCSS = function menuCSS(_ref2, unstyled) {
  var _objectSpread2$1;
  var placement = _ref2.placement,
    _ref2$theme = _ref2.theme,
    borderRadius = _ref2$theme.borderRadius,
    spacing = _ref2$theme.spacing,
    colors = _ref2$theme.colors;
  return _objectSpread2((_objectSpread2$1 = {
    label: 'menu'
  }, _defineProperty$1(_objectSpread2$1, alignToControl(placement), '100%'), _defineProperty$1(_objectSpread2$1, "position", 'absolute'), _defineProperty$1(_objectSpread2$1, "width", '100%'), _defineProperty$1(_objectSpread2$1, "zIndex", 1), _objectSpread2$1), unstyled ? {} : {
    backgroundColor: colors.neutral0,
    borderRadius: borderRadius,
    boxShadow: '0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)',
    marginBottom: spacing.menuGutter,
    marginTop: spacing.menuGutter
  });
};
var PortalPlacementContext = /*#__PURE__*/reactExports.createContext(null);

// NOTE: internal only
var MenuPlacer = function MenuPlacer(props) {
  var children = props.children,
    minMenuHeight = props.minMenuHeight,
    maxMenuHeight = props.maxMenuHeight,
    menuPlacement = props.menuPlacement,
    menuPosition = props.menuPosition,
    menuShouldScrollIntoView = props.menuShouldScrollIntoView,
    theme = props.theme;
  var _ref3 = reactExports.useContext(PortalPlacementContext) || {},
    setPortalPlacement = _ref3.setPortalPlacement;
  var ref = reactExports.useRef(null);
  var _useState = reactExports.useState(maxMenuHeight),
    _useState2 = _slicedToArray(_useState, 2),
    maxHeight = _useState2[0],
    setMaxHeight = _useState2[1];
  var _useState3 = reactExports.useState(null),
    _useState4 = _slicedToArray(_useState3, 2),
    placement = _useState4[0],
    setPlacement = _useState4[1];
  var controlHeight = theme.spacing.controlHeight;
  index(function () {
    var menuEl = ref.current;
    if (!menuEl) return;

    // DO NOT scroll if position is fixed
    var isFixedPosition = menuPosition === 'fixed';
    var shouldScroll = menuShouldScrollIntoView && !isFixedPosition;
    var state = getMenuPlacement({
      maxHeight: maxMenuHeight,
      menuEl: menuEl,
      minHeight: minMenuHeight,
      placement: menuPlacement,
      shouldScroll: shouldScroll,
      isFixedPosition: isFixedPosition,
      controlHeight: controlHeight
    });
    setMaxHeight(state.maxHeight);
    setPlacement(state.placement);
    setPortalPlacement === null || setPortalPlacement === void 0 ? void 0 : setPortalPlacement(state.placement);
  }, [maxMenuHeight, menuPlacement, menuPosition, menuShouldScrollIntoView, minMenuHeight, setPortalPlacement, controlHeight]);
  return children({
    ref: ref,
    placerProps: _objectSpread2(_objectSpread2({}, props), {}, {
      placement: placement || coercePlacement(menuPlacement),
      maxHeight: maxHeight
    })
  });
};
var Menu = function Menu(props) {
  var children = props.children,
    innerRef = props.innerRef,
    innerProps = props.innerProps;
  return jsx("div", _extends({}, getStyleProps(props, 'menu', {
    menu: true
  }), {
    ref: innerRef
  }, innerProps), children);
};
var Menu$1 = Menu;

// ==============================
// Menu List
// ==============================

var menuListCSS = function menuListCSS(_ref4, unstyled) {
  var maxHeight = _ref4.maxHeight,
    baseUnit = _ref4.theme.spacing.baseUnit;
  return _objectSpread2({
    maxHeight: maxHeight,
    overflowY: 'auto',
    position: 'relative',
    // required for offset[Height, Top] > keyboard scroll
    WebkitOverflowScrolling: 'touch'
  }, unstyled ? {} : {
    paddingBottom: baseUnit,
    paddingTop: baseUnit
  });
};
var MenuList = function MenuList(props) {
  var children = props.children,
    innerProps = props.innerProps,
    innerRef = props.innerRef,
    isMulti = props.isMulti;
  return jsx("div", _extends({}, getStyleProps(props, 'menuList', {
    'menu-list': true,
    'menu-list--is-multi': isMulti
  }), {
    ref: innerRef
  }, innerProps), children);
};

// ==============================
// Menu Notices
// ==============================

var noticeCSS = function noticeCSS(_ref5, unstyled) {
  var _ref5$theme = _ref5.theme,
    baseUnit = _ref5$theme.spacing.baseUnit,
    colors = _ref5$theme.colors;
  return _objectSpread2({
    textAlign: 'center'
  }, unstyled ? {} : {
    color: colors.neutral40,
    padding: "".concat(baseUnit * 2, "px ").concat(baseUnit * 3, "px")
  });
};
var noOptionsMessageCSS = noticeCSS;
var loadingMessageCSS = noticeCSS;
var NoOptionsMessage$1 = function NoOptionsMessage(_ref6) {
  var _ref6$children = _ref6.children,
    children = _ref6$children === void 0 ? 'No options' : _ref6$children,
    innerProps = _ref6.innerProps,
    restProps = _objectWithoutProperties(_ref6, _excluded$3);
  return jsx("div", _extends({}, getStyleProps(_objectSpread2(_objectSpread2({}, restProps), {}, {
    children: children,
    innerProps: innerProps
  }), 'noOptionsMessage', {
    'menu-notice': true,
    'menu-notice--no-options': true
  }), innerProps), children);
};
var LoadingMessage = function LoadingMessage(_ref7) {
  var _ref7$children = _ref7.children,
    children = _ref7$children === void 0 ? 'Loading...' : _ref7$children,
    innerProps = _ref7.innerProps,
    restProps = _objectWithoutProperties(_ref7, _excluded2$1);
  return jsx("div", _extends({}, getStyleProps(_objectSpread2(_objectSpread2({}, restProps), {}, {
    children: children,
    innerProps: innerProps
  }), 'loadingMessage', {
    'menu-notice': true,
    'menu-notice--loading': true
  }), innerProps), children);
};

// ==============================
// Menu Portal
// ==============================

var menuPortalCSS = function menuPortalCSS(_ref8) {
  var rect = _ref8.rect,
    offset = _ref8.offset,
    position = _ref8.position;
  return {
    left: rect.left,
    position: position,
    top: offset,
    width: rect.width,
    zIndex: 1
  };
};
var MenuPortal = function MenuPortal(props) {
  var appendTo = props.appendTo,
    children = props.children,
    controlElement = props.controlElement,
    innerProps = props.innerProps,
    menuPlacement = props.menuPlacement,
    menuPosition = props.menuPosition;
  var menuPortalRef = reactExports.useRef(null);
  var cleanupRef = reactExports.useRef(null);
  var _useState5 = reactExports.useState(coercePlacement(menuPlacement)),
    _useState6 = _slicedToArray(_useState5, 2),
    placement = _useState6[0],
    setPortalPlacement = _useState6[1];
  var portalPlacementContext = reactExports.useMemo(function () {
    return {
      setPortalPlacement: setPortalPlacement
    };
  }, []);
  var _useState7 = reactExports.useState(null),
    _useState8 = _slicedToArray(_useState7, 2),
    computedPosition = _useState8[0],
    setComputedPosition = _useState8[1];
  var updateComputedPosition = reactExports.useCallback(function () {
    if (!controlElement) return;
    var rect = getBoundingClientObj(controlElement);
    var scrollDistance = menuPosition === 'fixed' ? 0 : window.pageYOffset;
    var offset = rect[placement] + scrollDistance;
    if (offset !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset) || rect.left !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left) || rect.width !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width)) {
      setComputedPosition({
        offset: offset,
        rect: rect
      });
    }
  }, [controlElement, menuPosition, placement, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width]);
  index(function () {
    updateComputedPosition();
  }, [updateComputedPosition]);
  var runAutoUpdate = reactExports.useCallback(function () {
    if (typeof cleanupRef.current === 'function') {
      cleanupRef.current();
      cleanupRef.current = null;
    }
    if (controlElement && menuPortalRef.current) {
      cleanupRef.current = autoUpdate(controlElement, menuPortalRef.current, updateComputedPosition, {
        elementResize: 'ResizeObserver' in window
      });
    }
  }, [controlElement, updateComputedPosition]);
  index(function () {
    runAutoUpdate();
  }, [runAutoUpdate]);
  var setMenuPortalElement = reactExports.useCallback(function (menuPortalElement) {
    menuPortalRef.current = menuPortalElement;
    runAutoUpdate();
  }, [runAutoUpdate]);

  // bail early if required elements aren't present
  if (!appendTo && menuPosition !== 'fixed' || !computedPosition) return null;

  // same wrapper element whether fixed or portalled
  var menuWrapper = jsx("div", _extends({
    ref: setMenuPortalElement
  }, getStyleProps(_objectSpread2(_objectSpread2({}, props), {}, {
    offset: computedPosition.offset,
    position: menuPosition,
    rect: computedPosition.rect
  }), 'menuPortal', {
    'menu-portal': true
  }), innerProps), children);
  return jsx(PortalPlacementContext.Provider, {
    value: portalPlacementContext
  }, appendTo ? /*#__PURE__*/reactDomExports.createPortal(menuWrapper, appendTo) : menuWrapper);
};

// ==============================
// Root Container
// ==============================

var containerCSS = function containerCSS(_ref) {
  var isDisabled = _ref.isDisabled,
    isRtl = _ref.isRtl;
  return {
    label: 'container',
    direction: isRtl ? 'rtl' : undefined,
    pointerEvents: isDisabled ? 'none' : undefined,
    // cancel mouse events when disabled
    position: 'relative'
  };
};
var SelectContainer = function SelectContainer(props) {
  var children = props.children,
    innerProps = props.innerProps,
    isDisabled = props.isDisabled,
    isRtl = props.isRtl;
  return jsx("div", _extends({}, getStyleProps(props, 'container', {
    '--is-disabled': isDisabled,
    '--is-rtl': isRtl
  }), innerProps), children);
};

// ==============================
// Value Container
// ==============================

var valueContainerCSS = function valueContainerCSS(_ref2, unstyled) {
  var spacing = _ref2.theme.spacing,
    isMulti = _ref2.isMulti,
    hasValue = _ref2.hasValue,
    controlShouldRenderValue = _ref2.selectProps.controlShouldRenderValue;
  return _objectSpread2({
    alignItems: 'center',
    display: isMulti && hasValue && controlShouldRenderValue ? 'flex' : 'grid',
    flex: 1,
    flexWrap: 'wrap',
    WebkitOverflowScrolling: 'touch',
    position: 'relative',
    overflow: 'hidden'
  }, unstyled ? {} : {
    padding: "".concat(spacing.baseUnit / 2, "px ").concat(spacing.baseUnit * 2, "px")
  });
};
var ValueContainer = function ValueContainer(props) {
  var children = props.children,
    innerProps = props.innerProps,
    isMulti = props.isMulti,
    hasValue = props.hasValue;
  return jsx("div", _extends({}, getStyleProps(props, 'valueContainer', {
    'value-container': true,
    'value-container--is-multi': isMulti,
    'value-container--has-value': hasValue
  }), innerProps), children);
};

// ==============================
// Indicator Container
// ==============================

var indicatorsContainerCSS = function indicatorsContainerCSS() {
  return {
    alignItems: 'center',
    alignSelf: 'stretch',
    display: 'flex',
    flexShrink: 0
  };
};
var IndicatorsContainer = function IndicatorsContainer(props) {
  var children = props.children,
    innerProps = props.innerProps;
  return jsx("div", _extends({}, getStyleProps(props, 'indicatorsContainer', {
    indicators: true
  }), innerProps), children);
};

var _templateObject;
var _excluded$2 = ["size"],
  _excluded2 = ["innerProps", "isRtl", "size"];
function _EMOTION_STRINGIFIED_CSS_ERROR__$3() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

// ==============================
// Dropdown & Clear Icons
// ==============================
var _ref2$2 = process.env.NODE_ENV === "production" ? {
  name: "8mmkcg",
  styles: "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0"
} : {
  name: "tj5bde-Svg",
  styles: "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0;label:Svg;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$3
};
var Svg = function Svg(_ref) {
  var size = _ref.size,
    props = _objectWithoutProperties(_ref, _excluded$2);
  return jsx("svg", _extends({
    height: size,
    width: size,
    viewBox: "0 0 20 20",
    "aria-hidden": "true",
    focusable: "false",
    css: _ref2$2
  }, props));
};
var CrossIcon$2 = function CrossIcon(props) {
  return jsx(Svg, _extends({
    size: 20
  }, props), jsx("path", {
    d: "M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z"
  }));
};
var DownChevron = function DownChevron(props) {
  return jsx(Svg, _extends({
    size: 20
  }, props), jsx("path", {
    d: "M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
  }));
};

// ==============================
// Dropdown & Clear Buttons
// ==============================

var baseCSS = function baseCSS(_ref3, unstyled) {
  var isFocused = _ref3.isFocused,
    _ref3$theme = _ref3.theme,
    baseUnit = _ref3$theme.spacing.baseUnit,
    colors = _ref3$theme.colors;
  return _objectSpread2({
    label: 'indicatorContainer',
    display: 'flex',
    transition: 'color 150ms'
  }, unstyled ? {} : {
    color: isFocused ? colors.neutral60 : colors.neutral20,
    padding: baseUnit * 2,
    ':hover': {
      color: isFocused ? colors.neutral80 : colors.neutral40
    }
  });
};
var dropdownIndicatorCSS = baseCSS;
var DropdownIndicator$1 = function DropdownIndicator(props) {
  var children = props.children,
    innerProps = props.innerProps;
  return jsx("div", _extends({}, getStyleProps(props, 'dropdownIndicator', {
    indicator: true,
    'dropdown-indicator': true
  }), innerProps), children || jsx(DownChevron, null));
};
var clearIndicatorCSS = baseCSS;
var ClearIndicator$1 = function ClearIndicator(props) {
  var children = props.children,
    innerProps = props.innerProps;
  return jsx("div", _extends({}, getStyleProps(props, 'clearIndicator', {
    indicator: true,
    'clear-indicator': true
  }), innerProps), children || jsx(CrossIcon$2, null));
};

// ==============================
// Separator
// ==============================

var indicatorSeparatorCSS = function indicatorSeparatorCSS(_ref4, unstyled) {
  var isDisabled = _ref4.isDisabled,
    _ref4$theme = _ref4.theme,
    baseUnit = _ref4$theme.spacing.baseUnit,
    colors = _ref4$theme.colors;
  return _objectSpread2({
    label: 'indicatorSeparator',
    alignSelf: 'stretch',
    width: 1
  }, unstyled ? {} : {
    backgroundColor: isDisabled ? colors.neutral10 : colors.neutral20,
    marginBottom: baseUnit * 2,
    marginTop: baseUnit * 2
  });
};
var IndicatorSeparator$1 = function IndicatorSeparator(props) {
  var innerProps = props.innerProps;
  return jsx("span", _extends({}, innerProps, getStyleProps(props, 'indicatorSeparator', {
    'indicator-separator': true
  })));
};

// ==============================
// Loading
// ==============================

var loadingDotAnimations = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  0%, 80%, 100% { opacity: 0; }\n  40% { opacity: 1; }\n"])));
var loadingIndicatorCSS = function loadingIndicatorCSS(_ref5, unstyled) {
  var isFocused = _ref5.isFocused,
    size = _ref5.size,
    _ref5$theme = _ref5.theme,
    colors = _ref5$theme.colors,
    baseUnit = _ref5$theme.spacing.baseUnit;
  return _objectSpread2({
    label: 'loadingIndicator',
    display: 'flex',
    transition: 'color 150ms',
    alignSelf: 'center',
    fontSize: size,
    lineHeight: 1,
    marginRight: size,
    textAlign: 'center',
    verticalAlign: 'middle'
  }, unstyled ? {} : {
    color: isFocused ? colors.neutral60 : colors.neutral20,
    padding: baseUnit * 2
  });
};
var LoadingDot = function LoadingDot(_ref6) {
  var delay = _ref6.delay,
    offset = _ref6.offset;
  return jsx("span", {
    css: /*#__PURE__*/css$2({
      animation: "".concat(loadingDotAnimations, " 1s ease-in-out ").concat(delay, "ms infinite;"),
      backgroundColor: 'currentColor',
      borderRadius: '1em',
      display: 'inline-block',
      marginLeft: offset ? '1em' : undefined,
      height: '1em',
      verticalAlign: 'top',
      width: '1em'
    }, process.env.NODE_ENV === "production" ? "" : ";label:LoadingDot;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGljYXRvcnMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1RSSIsImZpbGUiOiJpbmRpY2F0b3JzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganN4LCBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbmltcG9ydCB7XG4gIENvbW1vblByb3BzQW5kQ2xhc3NOYW1lLFxuICBDU1NPYmplY3RXaXRoTGFiZWwsXG4gIEdyb3VwQmFzZSxcbn0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgZ2V0U3R5bGVQcm9wcyB9IGZyb20gJy4uL3V0aWxzJztcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBEcm9wZG93biAmIENsZWFyIEljb25zXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuY29uc3QgU3ZnID0gKHtcbiAgc2l6ZSxcbiAgLi4ucHJvcHNcbn06IEpTWC5JbnRyaW5zaWNFbGVtZW50c1snc3ZnJ10gJiB7IHNpemU6IG51bWJlciB9KSA9PiAoXG4gIDxzdmdcbiAgICBoZWlnaHQ9e3NpemV9XG4gICAgd2lkdGg9e3NpemV9XG4gICAgdmlld0JveD1cIjAgMCAyMCAyMFwiXG4gICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICBmb2N1c2FibGU9XCJmYWxzZVwiXG4gICAgY3NzPXt7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgICAgbGluZUhlaWdodDogMSxcbiAgICAgIHN0cm9rZTogJ2N1cnJlbnRDb2xvcicsXG4gICAgICBzdHJva2VXaWR0aDogMCxcbiAgICB9fVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbik7XG5cbmV4cG9ydCB0eXBlIENyb3NzSWNvblByb3BzID0gSlNYLkludHJpbnNpY0VsZW1lbnRzWydzdmcnXSAmIHsgc2l6ZT86IG51bWJlciB9O1xuZXhwb3J0IGNvbnN0IENyb3NzSWNvbiA9IChwcm9wczogQ3Jvc3NJY29uUHJvcHMpID0+IChcbiAgPFN2ZyBzaXplPXsyMH0gey4uLnByb3BzfT5cbiAgICA8cGF0aCBkPVwiTTE0LjM0OCAxNC44NDljLTAuNDY5IDAuNDY5LTEuMjI5IDAuNDY5LTEuNjk3IDBsLTIuNjUxLTMuMDMwLTIuNjUxIDMuMDI5Yy0wLjQ2OSAwLjQ2OS0xLjIyOSAwLjQ2OS0xLjY5NyAwLTAuNDY5LTAuNDY5LTAuNDY5LTEuMjI5IDAtMS42OTdsMi43NTgtMy4xNS0yLjc1OS0zLjE1MmMtMC40NjktMC40NjktMC40NjktMS4yMjggMC0xLjY5N3MxLjIyOC0wLjQ2OSAxLjY5NyAwbDIuNjUyIDMuMDMxIDIuNjUxLTMuMDMxYzAuNDY5LTAuNDY5IDEuMjI4LTAuNDY5IDEuNjk3IDBzMC40NjkgMS4yMjkgMCAxLjY5N2wtMi43NTggMy4xNTIgMi43NTggMy4xNWMwLjQ2OSAwLjQ2OSAwLjQ2OSAxLjIyOSAwIDEuNjk4elwiIC8+XG4gIDwvU3ZnPlxuKTtcbmV4cG9ydCB0eXBlIERvd25DaGV2cm9uUHJvcHMgPSBKU1guSW50cmluc2ljRWxlbWVudHNbJ3N2ZyddICYgeyBzaXplPzogbnVtYmVyIH07XG5leHBvcnQgY29uc3QgRG93bkNoZXZyb24gPSAocHJvcHM6IERvd25DaGV2cm9uUHJvcHMpID0+IChcbiAgPFN2ZyBzaXplPXsyMH0gey4uLnByb3BzfT5cbiAgICA8cGF0aCBkPVwiTTQuNTE2IDcuNTQ4YzAuNDM2LTAuNDQ2IDEuMDQzLTAuNDgxIDEuNTc2IDBsMy45MDggMy43NDcgMy45MDgtMy43NDdjMC41MzMtMC40ODEgMS4xNDEtMC40NDYgMS41NzQgMCAwLjQzNiAwLjQ0NSAwLjQwOCAxLjE5NyAwIDEuNjE1LTAuNDA2IDAuNDE4LTQuNjk1IDQuNTAyLTQuNjk1IDQuNTAyLTAuMjE3IDAuMjIzLTAuNTAyIDAuMzM1LTAuNzg3IDAuMzM1cy0wLjU3LTAuMTEyLTAuNzg5LTAuMzM1YzAgMC00LjI4Ny00LjA4NC00LjY5NS00LjUwMnMtMC40MzYtMS4xNyAwLTEuNjE1elwiIC8+XG4gIDwvU3ZnPlxuKTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBEcm9wZG93biAmIENsZWFyIEJ1dHRvbnNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgaW50ZXJmYWNlIERyb3Bkb3duSW5kaWNhdG9yUHJvcHM8XG4gIE9wdGlvbiA9IHVua25vd24sXG4gIElzTXVsdGkgZXh0ZW5kcyBib29sZWFuID0gYm9vbGVhbixcbiAgR3JvdXAgZXh0ZW5kcyBHcm91cEJhc2U8T3B0aW9uPiA9IEdyb3VwQmFzZTxPcHRpb24+XG4+IGV4dGVuZHMgQ29tbW9uUHJvcHNBbmRDbGFzc05hbWU8T3B0aW9uLCBJc011bHRpLCBHcm91cD4ge1xuICAvKiogVGhlIGNoaWxkcmVuIHRvIGJlIHJlbmRlcmVkIGluc2lkZSB0aGUgaW5kaWNhdG9yLiAqL1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgLyoqIFByb3BzIHRoYXQgd2lsbCBiZSBwYXNzZWQgb24gdG8gdGhlIGNoaWxkcmVuLiAqL1xuICBpbm5lclByb3BzOiBKU1guSW50cmluc2ljRWxlbWVudHNbJ2RpdiddO1xuICAvKiogVGhlIGZvY3VzZWQgc3RhdGUgb2YgdGhlIHNlbGVjdC4gKi9cbiAgaXNGb2N1c2VkOiBib29sZWFuO1xuICBpc0Rpc2FibGVkOiBib29sZWFuO1xufVxuXG5jb25zdCBiYXNlQ1NTID0gPFxuICBPcHRpb24sXG4gIElzTXVsdGkgZXh0ZW5kcyBib29sZWFuLFxuICBHcm91cCBleHRlbmRzIEdyb3VwQmFzZTxPcHRpb24+XG4+KFxuICB7XG4gICAgaXNGb2N1c2VkLFxuICAgIHRoZW1lOiB7XG4gICAgICBzcGFjaW5nOiB7IGJhc2VVbml0IH0sXG4gICAgICBjb2xvcnMsXG4gICAgfSxcbiAgfTpcbiAgICB8IERyb3Bkb3duSW5kaWNhdG9yUHJvcHM8T3B0aW9uLCBJc011bHRpLCBHcm91cD5cbiAgICB8IENsZWFySW5kaWNhdG9yUHJvcHM8T3B0aW9uLCBJc011bHRpLCBHcm91cD4sXG4gIHVuc3R5bGVkOiBib29sZWFuXG4pOiBDU1NPYmplY3RXaXRoTGFiZWwgPT4gKHtcbiAgbGFiZWw6ICdpbmRpY2F0b3JDb250YWluZXInLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIHRyYW5zaXRpb246ICdjb2xvciAxNTBtcycsXG4gIC4uLih1bnN0eWxlZFxuICAgID8ge31cbiAgICA6IHtcbiAgICAgICAgY29sb3I6IGlzRm9jdXNlZCA/IGNvbG9ycy5uZXV0cmFsNjAgOiBjb2xvcnMubmV1dHJhbDIwLFxuICAgICAgICBwYWRkaW5nOiBiYXNlVW5pdCAqIDIsXG4gICAgICAgICc6aG92ZXInOiB7XG4gICAgICAgICAgY29sb3I6IGlzRm9jdXNlZCA/IGNvbG9ycy5uZXV0cmFsODAgOiBjb2xvcnMubmV1dHJhbDQwLFxuICAgICAgICB9LFxuICAgICAgfSksXG59KTtcblxuZXhwb3J0IGNvbnN0IGRyb3Bkb3duSW5kaWNhdG9yQ1NTID0gYmFzZUNTUztcbmV4cG9ydCBjb25zdCBEcm9wZG93bkluZGljYXRvciA9IDxcbiAgT3B0aW9uLFxuICBJc011bHRpIGV4dGVuZHMgYm9vbGVhbixcbiAgR3JvdXAgZXh0ZW5kcyBHcm91cEJhc2U8T3B0aW9uPlxuPihcbiAgcHJvcHM6IERyb3Bkb3duSW5kaWNhdG9yUHJvcHM8T3B0aW9uLCBJc011bHRpLCBHcm91cD5cbikgPT4ge1xuICBjb25zdCB7IGNoaWxkcmVuLCBpbm5lclByb3BzIH0gPSBwcm9wcztcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICB7Li4uZ2V0U3R5bGVQcm9wcyhwcm9wcywgJ2Ryb3Bkb3duSW5kaWNhdG9yJywge1xuICAgICAgICBpbmRpY2F0b3I6IHRydWUsXG4gICAgICAgICdkcm9wZG93bi1pbmRpY2F0b3InOiB0cnVlLFxuICAgICAgfSl9XG4gICAgICB7Li4uaW5uZXJQcm9wc31cbiAgICA+XG4gICAgICB7Y2hpbGRyZW4gfHwgPERvd25DaGV2cm9uIC8+fVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBDbGVhckluZGljYXRvclByb3BzPFxuICBPcHRpb24gPSB1bmtub3duLFxuICBJc011bHRpIGV4dGVuZHMgYm9vbGVhbiA9IGJvb2xlYW4sXG4gIEdyb3VwIGV4dGVuZHMgR3JvdXBCYXNlPE9wdGlvbj4gPSBHcm91cEJhc2U8T3B0aW9uPlxuPiBleHRlbmRzIENvbW1vblByb3BzQW5kQ2xhc3NOYW1lPE9wdGlvbiwgSXNNdWx0aSwgR3JvdXA+IHtcbiAgLyoqIFRoZSBjaGlsZHJlbiB0byBiZSByZW5kZXJlZCBpbnNpZGUgdGhlIGluZGljYXRvci4gKi9cbiAgY2hpbGRyZW4/OiBSZWFjdE5vZGU7XG4gIC8qKiBQcm9wcyB0aGF0IHdpbGwgYmUgcGFzc2VkIG9uIHRvIHRoZSBjaGlsZHJlbi4gKi9cbiAgaW5uZXJQcm9wczogSlNYLkludHJpbnNpY0VsZW1lbnRzWydkaXYnXTtcbiAgLyoqIFRoZSBmb2N1c2VkIHN0YXRlIG9mIHRoZSBzZWxlY3QuICovXG4gIGlzRm9jdXNlZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IGNsZWFySW5kaWNhdG9yQ1NTID0gYmFzZUNTUztcbmV4cG9ydCBjb25zdCBDbGVhckluZGljYXRvciA9IDxcbiAgT3B0aW9uLFxuICBJc011bHRpIGV4dGVuZHMgYm9vbGVhbixcbiAgR3JvdXAgZXh0ZW5kcyBHcm91cEJhc2U8T3B0aW9uPlxuPihcbiAgcHJvcHM6IENsZWFySW5kaWNhdG9yUHJvcHM8T3B0aW9uLCBJc011bHRpLCBHcm91cD5cbikgPT4ge1xuICBjb25zdCB7IGNoaWxkcmVuLCBpbm5lclByb3BzIH0gPSBwcm9wcztcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICB7Li4uZ2V0U3R5bGVQcm9wcyhwcm9wcywgJ2NsZWFySW5kaWNhdG9yJywge1xuICAgICAgICBpbmRpY2F0b3I6IHRydWUsXG4gICAgICAgICdjbGVhci1pbmRpY2F0b3InOiB0cnVlLFxuICAgICAgfSl9XG4gICAgICB7Li4uaW5uZXJQcm9wc31cbiAgICA+XG4gICAgICB7Y2hpbGRyZW4gfHwgPENyb3NzSWNvbiAvPn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gU2VwYXJhdG9yXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZXhwb3J0IGludGVyZmFjZSBJbmRpY2F0b3JTZXBhcmF0b3JQcm9wczxcbiAgT3B0aW9uID0gdW5rbm93bixcbiAgSXNNdWx0aSBleHRlbmRzIGJvb2xlYW4gPSBib29sZWFuLFxuICBHcm91cCBleHRlbmRzIEdyb3VwQmFzZTxPcHRpb24+ID0gR3JvdXBCYXNlPE9wdGlvbj5cbj4gZXh0ZW5kcyBDb21tb25Qcm9wc0FuZENsYXNzTmFtZTxPcHRpb24sIElzTXVsdGksIEdyb3VwPiB7XG4gIGlzRGlzYWJsZWQ6IGJvb2xlYW47XG4gIGlzRm9jdXNlZDogYm9vbGVhbjtcbiAgaW5uZXJQcm9wcz86IEpTWC5JbnRyaW5zaWNFbGVtZW50c1snc3BhbiddO1xufVxuXG5leHBvcnQgY29uc3QgaW5kaWNhdG9yU2VwYXJhdG9yQ1NTID0gPFxuICBPcHRpb24sXG4gIElzTXVsdGkgZXh0ZW5kcyBib29sZWFuLFxuICBHcm91cCBleHRlbmRzIEdyb3VwQmFzZTxPcHRpb24+XG4+KFxuICB7XG4gICAgaXNEaXNhYmxlZCxcbiAgICB0aGVtZToge1xuICAgICAgc3BhY2luZzogeyBiYXNlVW5pdCB9LFxuICAgICAgY29sb3JzLFxuICAgIH0sXG4gIH06IEluZGljYXRvclNlcGFyYXRvclByb3BzPE9wdGlvbiwgSXNNdWx0aSwgR3JvdXA+LFxuICB1bnN0eWxlZDogYm9vbGVhblxuKTogQ1NTT2JqZWN0V2l0aExhYmVsID0+ICh7XG4gIGxhYmVsOiAnaW5kaWNhdG9yU2VwYXJhdG9yJyxcbiAgYWxpZ25TZWxmOiAnc3RyZXRjaCcsXG4gIHdpZHRoOiAxLFxuICAuLi4odW5zdHlsZWRcbiAgICA/IHt9XG4gICAgOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogaXNEaXNhYmxlZCA/IGNvbG9ycy5uZXV0cmFsMTAgOiBjb2xvcnMubmV1dHJhbDIwLFxuICAgICAgICBtYXJnaW5Cb3R0b206IGJhc2VVbml0ICogMixcbiAgICAgICAgbWFyZ2luVG9wOiBiYXNlVW5pdCAqIDIsXG4gICAgICB9KSxcbn0pO1xuXG5leHBvcnQgY29uc3QgSW5kaWNhdG9yU2VwYXJhdG9yID0gPFxuICBPcHRpb24sXG4gIElzTXVsdGkgZXh0ZW5kcyBib29sZWFuLFxuICBHcm91cCBleHRlbmRzIEdyb3VwQmFzZTxPcHRpb24+XG4+KFxuICBwcm9wczogSW5kaWNhdG9yU2VwYXJhdG9yUHJvcHM8T3B0aW9uLCBJc011bHRpLCBHcm91cD5cbikgPT4ge1xuICBjb25zdCB7IGlubmVyUHJvcHMgfSA9IHByb3BzO1xuICByZXR1cm4gKFxuICAgIDxzcGFuXG4gICAgICB7Li4uaW5uZXJQcm9wc31cbiAgICAgIHsuLi5nZXRTdHlsZVByb3BzKHByb3BzLCAnaW5kaWNhdG9yU2VwYXJhdG9yJywge1xuICAgICAgICAnaW5kaWNhdG9yLXNlcGFyYXRvcic6IHRydWUsXG4gICAgICB9KX1cbiAgICAvPlxuICApO1xufTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBMb2FkaW5nXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuY29uc3QgbG9hZGluZ0RvdEFuaW1hdGlvbnMgPSBrZXlmcmFtZXNgXG4gIDAlLCA4MCUsIDEwMCUgeyBvcGFjaXR5OiAwOyB9XG4gIDQwJSB7IG9wYWNpdHk6IDE7IH1cbmA7XG5cbmV4cG9ydCBjb25zdCBsb2FkaW5nSW5kaWNhdG9yQ1NTID0gPFxuICBPcHRpb24sXG4gIElzTXVsdGkgZXh0ZW5kcyBib29sZWFuLFxuICBHcm91cCBleHRlbmRzIEdyb3VwQmFzZTxPcHRpb24+XG4+KFxuICB7XG4gICAgaXNGb2N1c2VkLFxuICAgIHNpemUsXG4gICAgdGhlbWU6IHtcbiAgICAgIGNvbG9ycyxcbiAgICAgIHNwYWNpbmc6IHsgYmFzZVVuaXQgfSxcbiAgICB9LFxuICB9OiBMb2FkaW5nSW5kaWNhdG9yUHJvcHM8T3B0aW9uLCBJc011bHRpLCBHcm91cD4sXG4gIHVuc3R5bGVkOiBib29sZWFuXG4pOiBDU1NPYmplY3RXaXRoTGFiZWwgPT4gKHtcbiAgbGFiZWw6ICdsb2FkaW5nSW5kaWNhdG9yJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICB0cmFuc2l0aW9uOiAnY29sb3IgMTUwbXMnLFxuICBhbGlnblNlbGY6ICdjZW50ZXInLFxuICBmb250U2l6ZTogc2l6ZSxcbiAgbGluZUhlaWdodDogMSxcbiAgbWFyZ2luUmlnaHQ6IHNpemUsXG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAuLi4odW5zdHlsZWRcbiAgICA/IHt9XG4gICAgOiB7XG4gICAgICAgIGNvbG9yOiBpc0ZvY3VzZWQgPyBjb2xvcnMubmV1dHJhbDYwIDogY29sb3JzLm5ldXRyYWwyMCxcbiAgICAgICAgcGFkZGluZzogYmFzZVVuaXQgKiAyLFxuICAgICAgfSksXG59KTtcblxuaW50ZXJmYWNlIExvYWRpbmdEb3RQcm9wcyB7XG4gIGRlbGF5OiBudW1iZXI7XG4gIG9mZnNldDogYm9vbGVhbjtcbn1cbmNvbnN0IExvYWRpbmdEb3QgPSAoeyBkZWxheSwgb2Zmc2V0IH06IExvYWRpbmdEb3RQcm9wcykgPT4gKFxuICA8c3BhblxuICAgIGNzcz17e1xuICAgICAgYW5pbWF0aW9uOiBgJHtsb2FkaW5nRG90QW5pbWF0aW9uc30gMXMgZWFzZS1pbi1vdXQgJHtkZWxheX1tcyBpbmZpbml0ZTtgLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICAgIGJvcmRlclJhZGl1czogJzFlbScsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIG1hcmdpbkxlZnQ6IG9mZnNldCA/ICcxZW0nIDogdW5kZWZpbmVkLFxuICAgICAgaGVpZ2h0OiAnMWVtJyxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgICAgd2lkdGg6ICcxZW0nLFxuICAgIH19XG4gIC8+XG4pO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvYWRpbmdJbmRpY2F0b3JQcm9wczxcbiAgT3B0aW9uID0gdW5rbm93bixcbiAgSXNNdWx0aSBleHRlbmRzIGJvb2xlYW4gPSBib29sZWFuLFxuICBHcm91cCBleHRlbmRzIEdyb3VwQmFzZTxPcHRpb24+ID0gR3JvdXBCYXNlPE9wdGlvbj5cbj4gZXh0ZW5kcyBDb21tb25Qcm9wc0FuZENsYXNzTmFtZTxPcHRpb24sIElzTXVsdGksIEdyb3VwPiB7XG4gIC8qKiBQcm9wcyB0aGF0IHdpbGwgYmUgcGFzc2VkIG9uIHRvIHRoZSBjaGlsZHJlbi4gKi9cbiAgaW5uZXJQcm9wczogSlNYLkludHJpbnNpY0VsZW1lbnRzWydkaXYnXTtcbiAgLyoqIFRoZSBmb2N1c2VkIHN0YXRlIG9mIHRoZSBzZWxlY3QuICovXG4gIGlzRm9jdXNlZDogYm9vbGVhbjtcbiAgaXNEaXNhYmxlZDogYm9vbGVhbjtcbiAgLyoqIFNldCBzaXplIG9mIHRoZSBjb250YWluZXIuICovXG4gIHNpemU6IG51bWJlcjtcbn1cbmV4cG9ydCBjb25zdCBMb2FkaW5nSW5kaWNhdG9yID0gPFxuICBPcHRpb24sXG4gIElzTXVsdGkgZXh0ZW5kcyBib29sZWFuLFxuICBHcm91cCBleHRlbmRzIEdyb3VwQmFzZTxPcHRpb24+XG4+KHtcbiAgaW5uZXJQcm9wcyxcbiAgaXNSdGwsXG4gIHNpemUgPSA0LFxuICAuLi5yZXN0UHJvcHNcbn06IExvYWRpbmdJbmRpY2F0b3JQcm9wczxPcHRpb24sIElzTXVsdGksIEdyb3VwPikgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHsuLi5nZXRTdHlsZVByb3BzKFxuICAgICAgICB7IC4uLnJlc3RQcm9wcywgaW5uZXJQcm9wcywgaXNSdGwsIHNpemUgfSxcbiAgICAgICAgJ2xvYWRpbmdJbmRpY2F0b3InLFxuICAgICAgICB7XG4gICAgICAgICAgaW5kaWNhdG9yOiB0cnVlLFxuICAgICAgICAgICdsb2FkaW5nLWluZGljYXRvcic6IHRydWUsXG4gICAgICAgIH1cbiAgICAgICl9XG4gICAgICB7Li4uaW5uZXJQcm9wc31cbiAgICA+XG4gICAgICA8TG9hZGluZ0RvdCBkZWxheT17MH0gb2Zmc2V0PXtpc1J0bH0gLz5cbiAgICAgIDxMb2FkaW5nRG90IGRlbGF5PXsxNjB9IG9mZnNldCAvPlxuICAgICAgPExvYWRpbmdEb3QgZGVsYXk9ezMyMH0gb2Zmc2V0PXshaXNSdGx9IC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl19 */")
  });
};
var LoadingIndicator$1 = function LoadingIndicator(_ref7) {
  var innerProps = _ref7.innerProps,
    isRtl = _ref7.isRtl,
    _ref7$size = _ref7.size,
    size = _ref7$size === void 0 ? 4 : _ref7$size,
    restProps = _objectWithoutProperties(_ref7, _excluded2);
  return jsx("div", _extends({}, getStyleProps(_objectSpread2(_objectSpread2({}, restProps), {}, {
    innerProps: innerProps,
    isRtl: isRtl,
    size: size
  }), 'loadingIndicator', {
    indicator: true,
    'loading-indicator': true
  }), innerProps), jsx(LoadingDot, {
    delay: 0,
    offset: isRtl
  }), jsx(LoadingDot, {
    delay: 160,
    offset: true
  }), jsx(LoadingDot, {
    delay: 320,
    offset: !isRtl
  }));
};

var css$1 = function css(_ref, unstyled) {
  var isDisabled = _ref.isDisabled,
    isFocused = _ref.isFocused,
    _ref$theme = _ref.theme,
    colors = _ref$theme.colors,
    borderRadius = _ref$theme.borderRadius,
    spacing = _ref$theme.spacing;
  return _objectSpread2({
    label: 'control',
    alignItems: 'center',
    cursor: 'default',
    display: 'flex',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    minHeight: spacing.controlHeight,
    outline: '0 !important',
    position: 'relative',
    transition: 'all 100ms'
  }, unstyled ? {} : {
    backgroundColor: isDisabled ? colors.neutral5 : colors.neutral0,
    borderColor: isDisabled ? colors.neutral10 : isFocused ? colors.primary : colors.neutral20,
    borderRadius: borderRadius,
    borderStyle: 'solid',
    borderWidth: 1,
    boxShadow: isFocused ? "0 0 0 1px ".concat(colors.primary) : undefined,
    '&:hover': {
      borderColor: isFocused ? colors.primary : colors.neutral30
    }
  });
};
var Control = function Control(props) {
  var children = props.children,
    isDisabled = props.isDisabled,
    isFocused = props.isFocused,
    innerRef = props.innerRef,
    innerProps = props.innerProps,
    menuIsOpen = props.menuIsOpen;
  return jsx("div", _extends({
    ref: innerRef
  }, getStyleProps(props, 'control', {
    control: true,
    'control--is-disabled': isDisabled,
    'control--is-focused': isFocused,
    'control--menu-is-open': menuIsOpen
  }), innerProps, {
    "aria-disabled": isDisabled || undefined
  }), children);
};
var Control$1 = Control;

var _excluded$1$1 = ["data"];
var groupCSS = function groupCSS(_ref, unstyled) {
  var spacing = _ref.theme.spacing;
  return unstyled ? {} : {
    paddingBottom: spacing.baseUnit * 2,
    paddingTop: spacing.baseUnit * 2
  };
};
var Group = function Group(props) {
  var children = props.children,
    cx = props.cx,
    getStyles = props.getStyles,
    getClassNames = props.getClassNames,
    Heading = props.Heading,
    headingProps = props.headingProps,
    innerProps = props.innerProps,
    label = props.label,
    theme = props.theme,
    selectProps = props.selectProps;
  return jsx("div", _extends({}, getStyleProps(props, 'group', {
    group: true
  }), innerProps), jsx(Heading, _extends({}, headingProps, {
    selectProps: selectProps,
    theme: theme,
    getStyles: getStyles,
    getClassNames: getClassNames,
    cx: cx
  }), label), jsx("div", null, children));
};
var groupHeadingCSS = function groupHeadingCSS(_ref2, unstyled) {
  var _ref2$theme = _ref2.theme,
    colors = _ref2$theme.colors,
    spacing = _ref2$theme.spacing;
  return _objectSpread2({
    label: 'group',
    cursor: 'default',
    display: 'block'
  }, unstyled ? {} : {
    color: colors.neutral40,
    fontSize: '75%',
    fontWeight: 500,
    marginBottom: '0.25em',
    paddingLeft: spacing.baseUnit * 3,
    paddingRight: spacing.baseUnit * 3,
    textTransform: 'uppercase'
  });
};
var GroupHeading = function GroupHeading(props) {
  var _cleanCommonProps = cleanCommonProps(props);
    _cleanCommonProps.data;
    var innerProps = _objectWithoutProperties(_cleanCommonProps, _excluded$1$1);
  return jsx("div", _extends({}, getStyleProps(props, 'groupHeading', {
    'group-heading': true
  }), innerProps));
};
var Group$1 = Group;

var _excluded$5 = ["innerRef", "isDisabled", "isHidden", "inputClassName"];
var inputCSS = function inputCSS(_ref, unstyled) {
  var isDisabled = _ref.isDisabled,
    value = _ref.value,
    _ref$theme = _ref.theme,
    spacing = _ref$theme.spacing,
    colors = _ref$theme.colors;
  return _objectSpread2(_objectSpread2({
    visibility: isDisabled ? 'hidden' : 'visible',
    // force css to recompute when value change due to @emotion bug.
    // We can remove it whenever the bug is fixed.
    transform: value ? 'translateZ(0)' : ''
  }, containerStyle), unstyled ? {} : {
    margin: spacing.baseUnit / 2,
    paddingBottom: spacing.baseUnit / 2,
    paddingTop: spacing.baseUnit / 2,
    color: colors.neutral80
  });
};
var spacingStyle = {
  gridArea: '1 / 2',
  font: 'inherit',
  minWidth: '2px',
  border: 0,
  margin: 0,
  outline: 0,
  padding: 0
};
var containerStyle = {
  flex: '1 1 auto',
  display: 'inline-grid',
  gridArea: '1 / 1 / 2 / 3',
  gridTemplateColumns: '0 min-content',
  '&:after': _objectSpread2({
    content: 'attr(data-value) " "',
    visibility: 'hidden',
    whiteSpace: 'pre'
  }, spacingStyle)
};
var inputStyle = function inputStyle(isHidden) {
  return _objectSpread2({
    label: 'input',
    color: 'inherit',
    background: 0,
    opacity: isHidden ? 0 : 1,
    width: '100%'
  }, spacingStyle);
};
var Input$1 = function Input(props) {
  var cx = props.cx,
    value = props.value;
  var _cleanCommonProps = cleanCommonProps(props),
    innerRef = _cleanCommonProps.innerRef,
    isDisabled = _cleanCommonProps.isDisabled,
    isHidden = _cleanCommonProps.isHidden,
    inputClassName = _cleanCommonProps.inputClassName,
    innerProps = _objectWithoutProperties(_cleanCommonProps, _excluded$5);
  return jsx("div", _extends({}, getStyleProps(props, 'input', {
    'input-container': true
  }), {
    "data-value": value || ''
  }), jsx("input", _extends({
    className: cx({
      input: true
    }, inputClassName),
    ref: innerRef,
    style: inputStyle(isHidden),
    disabled: isDisabled
  }, innerProps)));
};
var Input$1$1 = Input$1;

var multiValueCSS = function multiValueCSS(_ref, unstyled) {
  var _ref$theme = _ref.theme,
    spacing = _ref$theme.spacing,
    borderRadius = _ref$theme.borderRadius,
    colors = _ref$theme.colors;
  return _objectSpread2({
    label: 'multiValue',
    display: 'flex',
    minWidth: 0
  }, unstyled ? {} : {
    backgroundColor: colors.neutral10,
    borderRadius: borderRadius / 2,
    margin: spacing.baseUnit / 2
  });
};
var multiValueLabelCSS = function multiValueLabelCSS(_ref2, unstyled) {
  var _ref2$theme = _ref2.theme,
    borderRadius = _ref2$theme.borderRadius,
    colors = _ref2$theme.colors,
    cropWithEllipsis = _ref2.cropWithEllipsis;
  return _objectSpread2({
    overflow: 'hidden',
    textOverflow: cropWithEllipsis || cropWithEllipsis === undefined ? 'ellipsis' : undefined,
    whiteSpace: 'nowrap'
  }, unstyled ? {} : {
    borderRadius: borderRadius / 2,
    color: colors.neutral80,
    fontSize: '85%',
    padding: 3,
    paddingLeft: 6
  });
};
var multiValueRemoveCSS = function multiValueRemoveCSS(_ref3, unstyled) {
  var _ref3$theme = _ref3.theme,
    spacing = _ref3$theme.spacing,
    borderRadius = _ref3$theme.borderRadius,
    colors = _ref3$theme.colors,
    isFocused = _ref3.isFocused;
  return _objectSpread2({
    alignItems: 'center',
    display: 'flex'
  }, unstyled ? {} : {
    borderRadius: borderRadius / 2,
    backgroundColor: isFocused ? colors.dangerLight : undefined,
    paddingLeft: spacing.baseUnit,
    paddingRight: spacing.baseUnit,
    ':hover': {
      backgroundColor: colors.dangerLight,
      color: colors.danger
    }
  });
};
var MultiValueGeneric = function MultiValueGeneric(_ref4) {
  var children = _ref4.children,
    innerProps = _ref4.innerProps;
  return jsx("div", innerProps, children);
};
var MultiValueContainer = MultiValueGeneric;
var MultiValueLabel = MultiValueGeneric;
function MultiValueRemove$1(_ref5) {
  var children = _ref5.children,
    innerProps = _ref5.innerProps;
  return jsx("div", _extends({
    role: "button"
  }, innerProps), children || jsx(CrossIcon$2, {
    size: 14
  }));
}
var MultiValue = function MultiValue(props) {
  var children = props.children,
    components = props.components,
    data = props.data,
    innerProps = props.innerProps,
    isDisabled = props.isDisabled,
    removeProps = props.removeProps,
    selectProps = props.selectProps;
  var Container = components.Container,
    Label = components.Label,
    Remove = components.Remove;
  return jsx(Container, {
    data: data,
    innerProps: _objectSpread2(_objectSpread2({}, getStyleProps(props, 'multiValue', {
      'multi-value': true,
      'multi-value--is-disabled': isDisabled
    })), innerProps),
    selectProps: selectProps
  }, jsx(Label, {
    data: data,
    innerProps: _objectSpread2({}, getStyleProps(props, 'multiValueLabel', {
      'multi-value__label': true
    })),
    selectProps: selectProps
  }, children), jsx(Remove, {
    data: data,
    innerProps: _objectSpread2(_objectSpread2({}, getStyleProps(props, 'multiValueRemove', {
      'multi-value__remove': true
    })), {}, {
      'aria-label': "Remove ".concat(children || 'option')
    }, removeProps),
    selectProps: selectProps
  }));
};
var MultiValue$1 = MultiValue;

var optionCSS = function optionCSS(_ref, unstyled) {
  var isDisabled = _ref.isDisabled,
    isFocused = _ref.isFocused,
    isSelected = _ref.isSelected,
    _ref$theme = _ref.theme,
    spacing = _ref$theme.spacing,
    colors = _ref$theme.colors;
  return _objectSpread2({
    label: 'option',
    cursor: 'default',
    display: 'block',
    fontSize: 'inherit',
    width: '100%',
    userSelect: 'none',
    WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)'
  }, unstyled ? {} : {
    backgroundColor: isSelected ? colors.primary : isFocused ? colors.primary25 : 'transparent',
    color: isDisabled ? colors.neutral20 : isSelected ? colors.neutral0 : 'inherit',
    padding: "".concat(spacing.baseUnit * 2, "px ").concat(spacing.baseUnit * 3, "px"),
    // provide some affordance on touch devices
    ':active': {
      backgroundColor: !isDisabled ? isSelected ? colors.primary : colors.primary50 : undefined
    }
  });
};
var Option = function Option(props) {
  var children = props.children,
    isDisabled = props.isDisabled,
    isFocused = props.isFocused,
    isSelected = props.isSelected,
    innerRef = props.innerRef,
    innerProps = props.innerProps;
  return jsx("div", _extends({}, getStyleProps(props, 'option', {
    option: true,
    'option--is-disabled': isDisabled,
    'option--is-focused': isFocused,
    'option--is-selected': isSelected
  }), {
    ref: innerRef,
    "aria-disabled": isDisabled
  }, innerProps), children);
};
var Option$1 = Option;

var placeholderCSS = function placeholderCSS(_ref, unstyled) {
  var _ref$theme = _ref.theme,
    spacing = _ref$theme.spacing,
    colors = _ref$theme.colors;
  return _objectSpread2({
    label: 'placeholder',
    gridArea: '1 / 1 / 2 / 3'
  }, unstyled ? {} : {
    color: colors.neutral50,
    marginLeft: spacing.baseUnit / 2,
    marginRight: spacing.baseUnit / 2
  });
};
var Placeholder = function Placeholder(props) {
  var children = props.children,
    innerProps = props.innerProps;
  return jsx("div", _extends({}, getStyleProps(props, 'placeholder', {
    placeholder: true
  }), innerProps), children);
};
var Placeholder$1 = Placeholder;

var css = function css(_ref, unstyled) {
  var isDisabled = _ref.isDisabled,
    _ref$theme = _ref.theme,
    spacing = _ref$theme.spacing,
    colors = _ref$theme.colors;
  return _objectSpread2({
    label: 'singleValue',
    gridArea: '1 / 1 / 2 / 3',
    maxWidth: '100%',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  }, unstyled ? {} : {
    color: isDisabled ? colors.neutral40 : colors.neutral80,
    marginLeft: spacing.baseUnit / 2,
    marginRight: spacing.baseUnit / 2
  });
};
var SingleValue = function SingleValue(props) {
  var children = props.children,
    isDisabled = props.isDisabled,
    innerProps = props.innerProps;
  return jsx("div", _extends({}, getStyleProps(props, 'singleValue', {
    'single-value': true,
    'single-value--is-disabled': isDisabled
  }), innerProps), children);
};
var SingleValue$1 = SingleValue;

var components = {
  ClearIndicator: ClearIndicator$1,
  Control: Control$1,
  DropdownIndicator: DropdownIndicator$1,
  DownChevron: DownChevron,
  CrossIcon: CrossIcon$2,
  Group: Group$1,
  GroupHeading: GroupHeading,
  IndicatorsContainer: IndicatorsContainer,
  IndicatorSeparator: IndicatorSeparator$1,
  Input: Input$1$1,
  LoadingIndicator: LoadingIndicator$1,
  Menu: Menu$1,
  MenuList: MenuList,
  MenuPortal: MenuPortal,
  LoadingMessage: LoadingMessage,
  NoOptionsMessage: NoOptionsMessage$1,
  MultiValue: MultiValue$1,
  MultiValueContainer: MultiValueContainer,
  MultiValueLabel: MultiValueLabel,
  MultiValueRemove: MultiValueRemove$1,
  Option: Option$1,
  Placeholder: Placeholder$1,
  SelectContainer: SelectContainer,
  SingleValue: SingleValue$1,
  ValueContainer: ValueContainer
};
var defaultComponents = function defaultComponents(props) {
  return _objectSpread2(_objectSpread2({}, components), props.components);
};

var safeIsNaN = Number.isNaN ||
    function ponyfill(value) {
        return typeof value === 'number' && value !== value;
    };
function isEqual(first, second) {
    if (first === second) {
        return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
        return true;
    }
    return false;
}
function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
        return false;
    }
    for (var i = 0; i < newInputs.length; i++) {
        if (!isEqual(newInputs[i], lastInputs[i])) {
            return false;
        }
    }
    return true;
}

function memoizeOne(resultFn, isEqual) {
    if (isEqual === void 0) { isEqual = areInputsEqual; }
    var cache = null;
    function memoized() {
        var newArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newArgs[_i] = arguments[_i];
        }
        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {
            return cache.lastResult;
        }
        var lastResult = resultFn.apply(this, newArgs);
        cache = {
            lastResult: lastResult,
            lastArgs: newArgs,
            lastThis: this,
        };
        return lastResult;
    }
    memoized.clear = function clear() {
        cache = null;
    };
    return memoized;
}

function _EMOTION_STRINGIFIED_CSS_ERROR__$2() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

// Assistive text to describe visual elements. Hidden for sighted users.
var _ref = process.env.NODE_ENV === "production" ? {
  name: "7pg0cj-a11yText",
  styles: "label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap"
} : {
  name: "1f43avz-a11yText-A11yText",
  styles: "label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap;label:A11yText;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkExMXlUZXh0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNSSIsImZpbGUiOiJBMTF5VGV4dC50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cbmltcG9ydCB7IGpzeCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLy8gQXNzaXN0aXZlIHRleHQgdG8gZGVzY3JpYmUgdmlzdWFsIGVsZW1lbnRzLiBIaWRkZW4gZm9yIHNpZ2h0ZWQgdXNlcnMuXG5jb25zdCBBMTF5VGV4dCA9IChwcm9wczogSlNYLkludHJpbnNpY0VsZW1lbnRzWydzcGFuJ10pID0+IChcbiAgPHNwYW5cbiAgICBjc3M9e3tcbiAgICAgIGxhYmVsOiAnYTExeVRleHQnLFxuICAgICAgekluZGV4OiA5OTk5LFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICB3aWR0aDogMSxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQTExeVRleHQ7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$2
};
var A11yText = function A11yText(props) {
  return jsx("span", _extends({
    css: _ref
  }, props));
};
var A11yText$1 = A11yText;

var defaultAriaLiveMessages = {
  guidance: function guidance(props) {
    var isSearchable = props.isSearchable,
      isMulti = props.isMulti,
      tabSelectsValue = props.tabSelectsValue,
      context = props.context,
      isInitialFocus = props.isInitialFocus;
    switch (context) {
      case 'menu':
        return "Use Up and Down to choose options, press Enter to select the currently focused option, press Escape to exit the menu".concat(tabSelectsValue ? ', press Tab to select the option and exit the menu' : '', ".");
      case 'input':
        return isInitialFocus ? "".concat(props['aria-label'] || 'Select', " is focused ").concat(isSearchable ? ',type to refine list' : '', ", press Down to open the menu, ").concat(isMulti ? ' press left to focus selected values' : '') : '';
      case 'value':
        return 'Use left and right to toggle between focused values, press Backspace to remove the currently focused value';
      default:
        return '';
    }
  },
  onChange: function onChange(props) {
    var action = props.action,
      _props$label = props.label,
      label = _props$label === void 0 ? '' : _props$label,
      labels = props.labels,
      isDisabled = props.isDisabled;
    switch (action) {
      case 'deselect-option':
      case 'pop-value':
      case 'remove-value':
        return "option ".concat(label, ", deselected.");
      case 'clear':
        return 'All selected options have been cleared.';
      case 'initial-input-focus':
        return "option".concat(labels.length > 1 ? 's' : '', " ").concat(labels.join(','), ", selected.");
      case 'select-option':
        return isDisabled ? "option ".concat(label, " is disabled. Select another option.") : "option ".concat(label, ", selected.");
      default:
        return '';
    }
  },
  onFocus: function onFocus(props) {
    var context = props.context,
      focused = props.focused,
      options = props.options,
      _props$label2 = props.label,
      label = _props$label2 === void 0 ? '' : _props$label2,
      selectValue = props.selectValue,
      isDisabled = props.isDisabled,
      isSelected = props.isSelected,
      isAppleDevice = props.isAppleDevice;
    var getArrayIndex = function getArrayIndex(arr, item) {
      return arr && arr.length ? "".concat(arr.indexOf(item) + 1, " of ").concat(arr.length) : '';
    };
    if (context === 'value' && selectValue) {
      return "value ".concat(label, " focused, ").concat(getArrayIndex(selectValue, focused), ".");
    }
    if (context === 'menu' && isAppleDevice) {
      var disabled = isDisabled ? ' disabled' : '';
      var status = "".concat(isSelected ? ' selected' : '').concat(disabled);
      return "".concat(label).concat(status, ", ").concat(getArrayIndex(options, focused), ".");
    }
    return '';
  },
  onFilter: function onFilter(props) {
    var inputValue = props.inputValue,
      resultsMessage = props.resultsMessage;
    return "".concat(resultsMessage).concat(inputValue ? ' for search term ' + inputValue : '', ".");
  }
};

var LiveRegion = function LiveRegion(props) {
  var ariaSelection = props.ariaSelection,
    focusedOption = props.focusedOption,
    focusedValue = props.focusedValue,
    focusableOptions = props.focusableOptions,
    isFocused = props.isFocused,
    selectValue = props.selectValue,
    selectProps = props.selectProps,
    id = props.id,
    isAppleDevice = props.isAppleDevice;
  var ariaLiveMessages = selectProps.ariaLiveMessages,
    getOptionLabel = selectProps.getOptionLabel,
    inputValue = selectProps.inputValue,
    isMulti = selectProps.isMulti,
    isOptionDisabled = selectProps.isOptionDisabled,
    isSearchable = selectProps.isSearchable,
    menuIsOpen = selectProps.menuIsOpen,
    options = selectProps.options,
    screenReaderStatus = selectProps.screenReaderStatus,
    tabSelectsValue = selectProps.tabSelectsValue,
    isLoading = selectProps.isLoading;
  var ariaLabel = selectProps['aria-label'];
  var ariaLive = selectProps['aria-live'];

  // Update aria live message configuration when prop changes
  var messages = reactExports.useMemo(function () {
    return _objectSpread2(_objectSpread2({}, defaultAriaLiveMessages), ariaLiveMessages || {});
  }, [ariaLiveMessages]);

  // Update aria live selected option when prop changes
  var ariaSelected = reactExports.useMemo(function () {
    var message = '';
    if (ariaSelection && messages.onChange) {
      var option = ariaSelection.option,
        selectedOptions = ariaSelection.options,
        removedValue = ariaSelection.removedValue,
        removedValues = ariaSelection.removedValues,
        value = ariaSelection.value;
      // select-option when !isMulti does not return option so we assume selected option is value
      var asOption = function asOption(val) {
        return !Array.isArray(val) ? val : null;
      };

      // If there is just one item from the action then get its label
      var selected = removedValue || option || asOption(value);
      var label = selected ? getOptionLabel(selected) : '';

      // If there are multiple items from the action then return an array of labels
      var multiSelected = selectedOptions || removedValues || undefined;
      var labels = multiSelected ? multiSelected.map(getOptionLabel) : [];
      var onChangeProps = _objectSpread2({
        // multiSelected items are usually items that have already been selected
        // or set by the user as a default value so we assume they are not disabled
        isDisabled: selected && isOptionDisabled(selected, selectValue),
        label: label,
        labels: labels
      }, ariaSelection);
      message = messages.onChange(onChangeProps);
    }
    return message;
  }, [ariaSelection, messages, isOptionDisabled, selectValue, getOptionLabel]);
  var ariaFocused = reactExports.useMemo(function () {
    var focusMsg = '';
    var focused = focusedOption || focusedValue;
    var isSelected = !!(focusedOption && selectValue && selectValue.includes(focusedOption));
    if (focused && messages.onFocus) {
      var onFocusProps = {
        focused: focused,
        label: getOptionLabel(focused),
        isDisabled: isOptionDisabled(focused, selectValue),
        isSelected: isSelected,
        options: focusableOptions,
        context: focused === focusedOption ? 'menu' : 'value',
        selectValue: selectValue,
        isAppleDevice: isAppleDevice
      };
      focusMsg = messages.onFocus(onFocusProps);
    }
    return focusMsg;
  }, [focusedOption, focusedValue, getOptionLabel, isOptionDisabled, messages, focusableOptions, selectValue, isAppleDevice]);
  var ariaResults = reactExports.useMemo(function () {
    var resultsMsg = '';
    if (menuIsOpen && options.length && !isLoading && messages.onFilter) {
      var resultsMessage = screenReaderStatus({
        count: focusableOptions.length
      });
      resultsMsg = messages.onFilter({
        inputValue: inputValue,
        resultsMessage: resultsMessage
      });
    }
    return resultsMsg;
  }, [focusableOptions, inputValue, menuIsOpen, messages, options, screenReaderStatus, isLoading]);
  var isInitialFocus = (ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === 'initial-input-focus';
  var ariaGuidance = reactExports.useMemo(function () {
    var guidanceMsg = '';
    if (messages.guidance) {
      var context = focusedValue ? 'value' : menuIsOpen ? 'menu' : 'input';
      guidanceMsg = messages.guidance({
        'aria-label': ariaLabel,
        context: context,
        isDisabled: focusedOption && isOptionDisabled(focusedOption, selectValue),
        isMulti: isMulti,
        isSearchable: isSearchable,
        tabSelectsValue: tabSelectsValue,
        isInitialFocus: isInitialFocus
      });
    }
    return guidanceMsg;
  }, [ariaLabel, focusedOption, focusedValue, isMulti, isOptionDisabled, isSearchable, menuIsOpen, messages, selectValue, tabSelectsValue, isInitialFocus]);
  var ScreenReaderText = jsx(reactExports.Fragment, null, jsx("span", {
    id: "aria-selection"
  }, ariaSelected), jsx("span", {
    id: "aria-focused"
  }, ariaFocused), jsx("span", {
    id: "aria-results"
  }, ariaResults), jsx("span", {
    id: "aria-guidance"
  }, ariaGuidance));
  return jsx(reactExports.Fragment, null, jsx(A11yText$1, {
    id: id
  }, isInitialFocus && ScreenReaderText), jsx(A11yText$1, {
    "aria-live": ariaLive,
    "aria-atomic": "false",
    "aria-relevant": "additions text",
    role: "log"
  }, isFocused && !isInitialFocus && ScreenReaderText));
};
var LiveRegion$1 = LiveRegion;

var diacritics = [{
  base: 'A',
  letters: "A\u24B6\uFF21\xC0\xC1\xC2\u1EA6\u1EA4\u1EAA\u1EA8\xC3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\xC4\u01DE\u1EA2\xC5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F"
}, {
  base: 'AA',
  letters: "\uA732"
}, {
  base: 'AE',
  letters: "\xC6\u01FC\u01E2"
}, {
  base: 'AO',
  letters: "\uA734"
}, {
  base: 'AU',
  letters: "\uA736"
}, {
  base: 'AV',
  letters: "\uA738\uA73A"
}, {
  base: 'AY',
  letters: "\uA73C"
}, {
  base: 'B',
  letters: "B\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181"
}, {
  base: 'C',
  letters: "C\u24B8\uFF23\u0106\u0108\u010A\u010C\xC7\u1E08\u0187\u023B\uA73E"
}, {
  base: 'D',
  letters: "D\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779"
}, {
  base: 'DZ',
  letters: "\u01F1\u01C4"
}, {
  base: 'Dz',
  letters: "\u01F2\u01C5"
}, {
  base: 'E',
  letters: "E\u24BA\uFF25\xC8\xC9\xCA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\xCB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E"
}, {
  base: 'F',
  letters: "F\u24BB\uFF26\u1E1E\u0191\uA77B"
}, {
  base: 'G',
  letters: "G\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E"
}, {
  base: 'H',
  letters: "H\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D"
}, {
  base: 'I',
  letters: "I\u24BE\uFF29\xCC\xCD\xCE\u0128\u012A\u012C\u0130\xCF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197"
}, {
  base: 'J',
  letters: "J\u24BF\uFF2A\u0134\u0248"
}, {
  base: 'K',
  letters: "K\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2"
}, {
  base: 'L',
  letters: "L\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780"
}, {
  base: 'LJ',
  letters: "\u01C7"
}, {
  base: 'Lj',
  letters: "\u01C8"
}, {
  base: 'M',
  letters: "M\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C"
}, {
  base: 'N',
  letters: "N\u24C3\uFF2E\u01F8\u0143\xD1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4"
}, {
  base: 'NJ',
  letters: "\u01CA"
}, {
  base: 'Nj',
  letters: "\u01CB"
}, {
  base: 'O',
  letters: "O\u24C4\uFF2F\xD2\xD3\xD4\u1ED2\u1ED0\u1ED6\u1ED4\xD5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\xD6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\xD8\u01FE\u0186\u019F\uA74A\uA74C"
}, {
  base: 'OI',
  letters: "\u01A2"
}, {
  base: 'OO',
  letters: "\uA74E"
}, {
  base: 'OU',
  letters: "\u0222"
}, {
  base: 'P',
  letters: "P\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754"
}, {
  base: 'Q',
  letters: "Q\u24C6\uFF31\uA756\uA758\u024A"
}, {
  base: 'R',
  letters: "R\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782"
}, {
  base: 'S',
  letters: "S\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784"
}, {
  base: 'T',
  letters: "T\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786"
}, {
  base: 'TZ',
  letters: "\uA728"
}, {
  base: 'U',
  letters: "U\u24CA\uFF35\xD9\xDA\xDB\u0168\u1E78\u016A\u1E7A\u016C\xDC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244"
}, {
  base: 'V',
  letters: "V\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245"
}, {
  base: 'VY',
  letters: "\uA760"
}, {
  base: 'W',
  letters: "W\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72"
}, {
  base: 'X',
  letters: "X\u24CD\uFF38\u1E8A\u1E8C"
}, {
  base: 'Y',
  letters: "Y\u24CE\uFF39\u1EF2\xDD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE"
}, {
  base: 'Z',
  letters: "Z\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762"
}, {
  base: 'a',
  letters: "a\u24D0\uFF41\u1E9A\xE0\xE1\xE2\u1EA7\u1EA5\u1EAB\u1EA9\xE3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\xE4\u01DF\u1EA3\xE5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250"
}, {
  base: 'aa',
  letters: "\uA733"
}, {
  base: 'ae',
  letters: "\xE6\u01FD\u01E3"
}, {
  base: 'ao',
  letters: "\uA735"
}, {
  base: 'au',
  letters: "\uA737"
}, {
  base: 'av',
  letters: "\uA739\uA73B"
}, {
  base: 'ay',
  letters: "\uA73D"
}, {
  base: 'b',
  letters: "b\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253"
}, {
  base: 'c',
  letters: "c\u24D2\uFF43\u0107\u0109\u010B\u010D\xE7\u1E09\u0188\u023C\uA73F\u2184"
}, {
  base: 'd',
  letters: "d\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A"
}, {
  base: 'dz',
  letters: "\u01F3\u01C6"
}, {
  base: 'e',
  letters: "e\u24D4\uFF45\xE8\xE9\xEA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\xEB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD"
}, {
  base: 'f',
  letters: "f\u24D5\uFF46\u1E1F\u0192\uA77C"
}, {
  base: 'g',
  letters: "g\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F"
}, {
  base: 'h',
  letters: "h\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265"
}, {
  base: 'hv',
  letters: "\u0195"
}, {
  base: 'i',
  letters: "i\u24D8\uFF49\xEC\xED\xEE\u0129\u012B\u012D\xEF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131"
}, {
  base: 'j',
  letters: "j\u24D9\uFF4A\u0135\u01F0\u0249"
}, {
  base: 'k',
  letters: "k\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3"
}, {
  base: 'l',
  letters: "l\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747"
}, {
  base: 'lj',
  letters: "\u01C9"
}, {
  base: 'm',
  letters: "m\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F"
}, {
  base: 'n',
  letters: "n\u24DD\uFF4E\u01F9\u0144\xF1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5"
}, {
  base: 'nj',
  letters: "\u01CC"
}, {
  base: 'o',
  letters: "o\u24DE\uFF4F\xF2\xF3\xF4\u1ED3\u1ED1\u1ED7\u1ED5\xF5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\xF6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\xF8\u01FF\u0254\uA74B\uA74D\u0275"
}, {
  base: 'oi',
  letters: "\u01A3"
}, {
  base: 'ou',
  letters: "\u0223"
}, {
  base: 'oo',
  letters: "\uA74F"
}, {
  base: 'p',
  letters: "p\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755"
}, {
  base: 'q',
  letters: "q\u24E0\uFF51\u024B\uA757\uA759"
}, {
  base: 'r',
  letters: "r\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783"
}, {
  base: 's',
  letters: "s\u24E2\uFF53\xDF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B"
}, {
  base: 't',
  letters: "t\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787"
}, {
  base: 'tz',
  letters: "\uA729"
}, {
  base: 'u',
  letters: "u\u24E4\uFF55\xF9\xFA\xFB\u0169\u1E79\u016B\u1E7B\u016D\xFC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289"
}, {
  base: 'v',
  letters: "v\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C"
}, {
  base: 'vy',
  letters: "\uA761"
}, {
  base: 'w',
  letters: "w\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73"
}, {
  base: 'x',
  letters: "x\u24E7\uFF58\u1E8B\u1E8D"
}, {
  base: 'y',
  letters: "y\u24E8\uFF59\u1EF3\xFD\u0177\u1EF9\u0233\u1E8F\xFF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF"
}, {
  base: 'z',
  letters: "z\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763"
}];
var anyDiacritic = new RegExp('[' + diacritics.map(function (d) {
  return d.letters;
}).join('') + ']', 'g');
var diacriticToBase = {};
for (var i = 0; i < diacritics.length; i++) {
  var diacritic = diacritics[i];
  for (var j = 0; j < diacritic.letters.length; j++) {
    diacriticToBase[diacritic.letters[j]] = diacritic.base;
  }
}
var stripDiacritics = function stripDiacritics(str) {
  return str.replace(anyDiacritic, function (match) {
    return diacriticToBase[match];
  });
};

var memoizedStripDiacriticsForInput = memoizeOne(stripDiacritics);
var trimString = function trimString(str) {
  return str.replace(/^\s+|\s+$/g, '');
};
var defaultStringify = function defaultStringify(option) {
  return "".concat(option.label, " ").concat(option.value);
};
var createFilter = function createFilter(config) {
  return function (option, rawInput) {
    // eslint-disable-next-line no-underscore-dangle
    if (option.data.__isNew__) return true;
    var _ignoreCase$ignoreAcc = _objectSpread2({
        ignoreCase: true,
        ignoreAccents: true,
        stringify: defaultStringify,
        trim: true,
        matchFrom: 'any'
      }, config),
      ignoreCase = _ignoreCase$ignoreAcc.ignoreCase,
      ignoreAccents = _ignoreCase$ignoreAcc.ignoreAccents,
      stringify = _ignoreCase$ignoreAcc.stringify,
      trim = _ignoreCase$ignoreAcc.trim,
      matchFrom = _ignoreCase$ignoreAcc.matchFrom;
    var input = trim ? trimString(rawInput) : rawInput;
    var candidate = trim ? trimString(stringify(option)) : stringify(option);
    if (ignoreCase) {
      input = input.toLowerCase();
      candidate = candidate.toLowerCase();
    }
    if (ignoreAccents) {
      input = memoizedStripDiacriticsForInput(input);
      candidate = stripDiacritics(candidate);
    }
    return matchFrom === 'start' ? candidate.substr(0, input.length) === input : candidate.indexOf(input) > -1;
  };
};

var _excluded$1 = ["innerRef"];
function DummyInput(_ref) {
  var innerRef = _ref.innerRef,
    props = _objectWithoutProperties(_ref, _excluded$1);
  // Remove animation props not meant for HTML elements
  var filteredProps = removeProps(props, 'onExited', 'in', 'enter', 'exit', 'appear');
  return jsx("input", _extends({
    ref: innerRef
  }, filteredProps, {
    css: /*#__PURE__*/css$2({
      label: 'dummyInput',
      // get rid of any default styles
      background: 0,
      border: 0,
      // important! this hides the flashing cursor
      caretColor: 'transparent',
      fontSize: 'inherit',
      gridArea: '1 / 1 / 2 / 3',
      outline: 0,
      padding: 0,
      // important! without `width` browsers won't allow focus
      width: 1,
      // remove cursor on desktop
      color: 'transparent',
      // remove cursor on mobile whilst maintaining "scroll into view" behaviour
      left: -100,
      opacity: 0,
      position: 'relative',
      transform: 'scale(.01)'
    }, process.env.NODE_ENV === "production" ? "" : ";label:DummyInput;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkR1bW15SW5wdXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlCTSIsImZpbGUiOiJEdW1teUlucHV0LnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsgUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganN4IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgcmVtb3ZlUHJvcHMgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIER1bW15SW5wdXQoe1xuICBpbm5lclJlZixcbiAgLi4ucHJvcHNcbn06IEpTWC5JbnRyaW5zaWNFbGVtZW50c1snaW5wdXQnXSAmIHtcbiAgcmVhZG9ubHkgaW5uZXJSZWY6IFJlZjxIVE1MSW5wdXRFbGVtZW50Pjtcbn0pIHtcbiAgLy8gUmVtb3ZlIGFuaW1hdGlvbiBwcm9wcyBub3QgbWVhbnQgZm9yIEhUTUwgZWxlbWVudHNcbiAgY29uc3QgZmlsdGVyZWRQcm9wcyA9IHJlbW92ZVByb3BzKFxuICAgIHByb3BzLFxuICAgICdvbkV4aXRlZCcsXG4gICAgJ2luJyxcbiAgICAnZW50ZXInLFxuICAgICdleGl0JyxcbiAgICAnYXBwZWFyJ1xuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGlucHV0XG4gICAgICByZWY9e2lubmVyUmVmfVxuICAgICAgey4uLmZpbHRlcmVkUHJvcHN9XG4gICAgICBjc3M9e3tcbiAgICAgICAgbGFiZWw6ICdkdW1teUlucHV0JyxcbiAgICAgICAgLy8gZ2V0IHJpZCBvZiBhbnkgZGVmYXVsdCBzdHlsZXNcbiAgICAgICAgYmFja2dyb3VuZDogMCxcbiAgICAgICAgYm9yZGVyOiAwLFxuICAgICAgICAvLyBpbXBvcnRhbnQhIHRoaXMgaGlkZXMgdGhlIGZsYXNoaW5nIGN1cnNvclxuICAgICAgICBjYXJldENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICAgICAgICBncmlkQXJlYTogJzEgLyAxIC8gMiAvIDMnLFxuICAgICAgICBvdXRsaW5lOiAwLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAvLyBpbXBvcnRhbnQhIHdpdGhvdXQgYHdpZHRoYCBicm93c2VycyB3b24ndCBhbGxvdyBmb2N1c1xuICAgICAgICB3aWR0aDogMSxcblxuICAgICAgICAvLyByZW1vdmUgY3Vyc29yIG9uIGRlc2t0b3BcbiAgICAgICAgY29sb3I6ICd0cmFuc3BhcmVudCcsXG5cbiAgICAgICAgLy8gcmVtb3ZlIGN1cnNvciBvbiBtb2JpbGUgd2hpbHN0IG1haW50YWluaW5nIFwic2Nyb2xsIGludG8gdmlld1wiIGJlaGF2aW91clxuICAgICAgICBsZWZ0OiAtMTAwLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoLjAxKScsXG4gICAgICB9fVxuICAgIC8+XG4gICk7XG59XG4iXX0= */")
  }));
}

var cancelScroll = function cancelScroll(event) {
  if (event.cancelable) event.preventDefault();
  event.stopPropagation();
};
function useScrollCapture(_ref) {
  var isEnabled = _ref.isEnabled,
    onBottomArrive = _ref.onBottomArrive,
    onBottomLeave = _ref.onBottomLeave,
    onTopArrive = _ref.onTopArrive,
    onTopLeave = _ref.onTopLeave;
  var isBottom = reactExports.useRef(false);
  var isTop = reactExports.useRef(false);
  var touchStart = reactExports.useRef(0);
  var scrollTarget = reactExports.useRef(null);
  var handleEventDelta = reactExports.useCallback(function (event, delta) {
    if (scrollTarget.current === null) return;
    var _scrollTarget$current = scrollTarget.current,
      scrollTop = _scrollTarget$current.scrollTop,
      scrollHeight = _scrollTarget$current.scrollHeight,
      clientHeight = _scrollTarget$current.clientHeight;
    var target = scrollTarget.current;
    var isDeltaPositive = delta > 0;
    var availableScroll = scrollHeight - clientHeight - scrollTop;
    var shouldCancelScroll = false;

    // reset bottom/top flags
    if (availableScroll > delta && isBottom.current) {
      if (onBottomLeave) onBottomLeave(event);
      isBottom.current = false;
    }
    if (isDeltaPositive && isTop.current) {
      if (onTopLeave) onTopLeave(event);
      isTop.current = false;
    }

    // bottom limit
    if (isDeltaPositive && delta > availableScroll) {
      if (onBottomArrive && !isBottom.current) {
        onBottomArrive(event);
      }
      target.scrollTop = scrollHeight;
      shouldCancelScroll = true;
      isBottom.current = true;

      // top limit
    } else if (!isDeltaPositive && -delta > scrollTop) {
      if (onTopArrive && !isTop.current) {
        onTopArrive(event);
      }
      target.scrollTop = 0;
      shouldCancelScroll = true;
      isTop.current = true;
    }

    // cancel scroll
    if (shouldCancelScroll) {
      cancelScroll(event);
    }
  }, [onBottomArrive, onBottomLeave, onTopArrive, onTopLeave]);
  var onWheel = reactExports.useCallback(function (event) {
    handleEventDelta(event, event.deltaY);
  }, [handleEventDelta]);
  var onTouchStart = reactExports.useCallback(function (event) {
    // set touch start so we can calculate touchmove delta
    touchStart.current = event.changedTouches[0].clientY;
  }, []);
  var onTouchMove = reactExports.useCallback(function (event) {
    var deltaY = touchStart.current - event.changedTouches[0].clientY;
    handleEventDelta(event, deltaY);
  }, [handleEventDelta]);
  var startListening = reactExports.useCallback(function (el) {
    // bail early if no element is available to attach to
    if (!el) return;
    var notPassive = supportsPassiveEvents ? {
      passive: false
    } : false;
    el.addEventListener('wheel', onWheel, notPassive);
    el.addEventListener('touchstart', onTouchStart, notPassive);
    el.addEventListener('touchmove', onTouchMove, notPassive);
  }, [onTouchMove, onTouchStart, onWheel]);
  var stopListening = reactExports.useCallback(function (el) {
    // bail early if no element is available to detach from
    if (!el) return;
    el.removeEventListener('wheel', onWheel, false);
    el.removeEventListener('touchstart', onTouchStart, false);
    el.removeEventListener('touchmove', onTouchMove, false);
  }, [onTouchMove, onTouchStart, onWheel]);
  reactExports.useEffect(function () {
    if (!isEnabled) return;
    var element = scrollTarget.current;
    startListening(element);
    return function () {
      stopListening(element);
    };
  }, [isEnabled, startListening, stopListening]);
  return function (element) {
    scrollTarget.current = element;
  };
}

var STYLE_KEYS = ['boxSizing', 'height', 'overflow', 'paddingRight', 'position'];
var LOCK_STYLES = {
  boxSizing: 'border-box',
  // account for possible declaration `width: 100%;` on body
  overflow: 'hidden',
  position: 'relative',
  height: '100%'
};
function preventTouchMove(e) {
  e.preventDefault();
}
function allowTouchMove(e) {
  e.stopPropagation();
}
function preventInertiaScroll() {
  var top = this.scrollTop;
  var totalScroll = this.scrollHeight;
  var currentScroll = top + this.offsetHeight;
  if (top === 0) {
    this.scrollTop = 1;
  } else if (currentScroll === totalScroll) {
    this.scrollTop = top - 1;
  }
}

// `ontouchstart` check works on most browsers
// `maxTouchPoints` works on IE10/11 and Surface
function isTouchDevice() {
  return 'ontouchstart' in window || navigator.maxTouchPoints;
}
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
var activeScrollLocks = 0;
var listenerOptions = {
  capture: false,
  passive: false
};
function useScrollLock(_ref) {
  var isEnabled = _ref.isEnabled,
    _ref$accountForScroll = _ref.accountForScrollbars,
    accountForScrollbars = _ref$accountForScroll === void 0 ? true : _ref$accountForScroll;
  var originalStyles = reactExports.useRef({});
  var scrollTarget = reactExports.useRef(null);
  var addScrollLock = reactExports.useCallback(function (touchScrollTarget) {
    if (!canUseDOM) return;
    var target = document.body;
    var targetStyle = target && target.style;
    if (accountForScrollbars) {
      // store any styles already applied to the body
      STYLE_KEYS.forEach(function (key) {
        var val = targetStyle && targetStyle[key];
        originalStyles.current[key] = val;
      });
    }

    // apply the lock styles and padding if this is the first scroll lock
    if (accountForScrollbars && activeScrollLocks < 1) {
      var currentPadding = parseInt(originalStyles.current.paddingRight, 10) || 0;
      var clientWidth = document.body ? document.body.clientWidth : 0;
      var adjustedPadding = window.innerWidth - clientWidth + currentPadding || 0;
      Object.keys(LOCK_STYLES).forEach(function (key) {
        var val = LOCK_STYLES[key];
        if (targetStyle) {
          targetStyle[key] = val;
        }
      });
      if (targetStyle) {
        targetStyle.paddingRight = "".concat(adjustedPadding, "px");
      }
    }

    // account for touch devices
    if (target && isTouchDevice()) {
      // Mobile Safari ignores { overflow: hidden } declaration on the body.
      target.addEventListener('touchmove', preventTouchMove, listenerOptions);

      // Allow scroll on provided target
      if (touchScrollTarget) {
        touchScrollTarget.addEventListener('touchstart', preventInertiaScroll, listenerOptions);
        touchScrollTarget.addEventListener('touchmove', allowTouchMove, listenerOptions);
      }
    }

    // increment active scroll locks
    activeScrollLocks += 1;
  }, [accountForScrollbars]);
  var removeScrollLock = reactExports.useCallback(function (touchScrollTarget) {
    if (!canUseDOM) return;
    var target = document.body;
    var targetStyle = target && target.style;

    // safely decrement active scroll locks
    activeScrollLocks = Math.max(activeScrollLocks - 1, 0);

    // reapply original body styles, if any
    if (accountForScrollbars && activeScrollLocks < 1) {
      STYLE_KEYS.forEach(function (key) {
        var val = originalStyles.current[key];
        if (targetStyle) {
          targetStyle[key] = val;
        }
      });
    }

    // remove touch listeners
    if (target && isTouchDevice()) {
      target.removeEventListener('touchmove', preventTouchMove, listenerOptions);
      if (touchScrollTarget) {
        touchScrollTarget.removeEventListener('touchstart', preventInertiaScroll, listenerOptions);
        touchScrollTarget.removeEventListener('touchmove', allowTouchMove, listenerOptions);
      }
    }
  }, [accountForScrollbars]);
  reactExports.useEffect(function () {
    if (!isEnabled) return;
    var element = scrollTarget.current;
    addScrollLock(element);
    return function () {
      removeScrollLock(element);
    };
  }, [isEnabled, addScrollLock, removeScrollLock]);
  return function (element) {
    scrollTarget.current = element;
  };
}

function _EMOTION_STRINGIFIED_CSS_ERROR__$1() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
var blurSelectInput = function blurSelectInput(event) {
  var element = event.target;
  return element.ownerDocument.activeElement && element.ownerDocument.activeElement.blur();
};
var _ref2$1 = process.env.NODE_ENV === "production" ? {
  name: "1kfdb0e",
  styles: "position:fixed;left:0;bottom:0;right:0;top:0"
} : {
  name: "bp8cua-ScrollManager",
  styles: "position:fixed;left:0;bottom:0;right:0;top:0;label:ScrollManager;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjcm9sbE1hbmFnZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9EVSIsImZpbGUiOiJTY3JvbGxNYW5hZ2VyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsganN4IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIFJlYWN0RWxlbWVudCwgUmVmQ2FsbGJhY2ssIE1vdXNlRXZlbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlU2Nyb2xsQ2FwdHVyZSBmcm9tICcuL3VzZVNjcm9sbENhcHR1cmUnO1xuaW1wb3J0IHVzZVNjcm9sbExvY2sgZnJvbSAnLi91c2VTY3JvbGxMb2NrJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgcmVhZG9ubHkgY2hpbGRyZW46IChyZWY6IFJlZkNhbGxiYWNrPEhUTUxFbGVtZW50PikgPT4gUmVhY3RFbGVtZW50O1xuICByZWFkb25seSBsb2NrRW5hYmxlZDogYm9vbGVhbjtcbiAgcmVhZG9ubHkgY2FwdHVyZUVuYWJsZWQ6IGJvb2xlYW47XG4gIHJlYWRvbmx5IG9uQm90dG9tQXJyaXZlPzogKGV2ZW50OiBXaGVlbEV2ZW50IHwgVG91Y2hFdmVudCkgPT4gdm9pZDtcbiAgcmVhZG9ubHkgb25Cb3R0b21MZWF2ZT86IChldmVudDogV2hlZWxFdmVudCB8IFRvdWNoRXZlbnQpID0+IHZvaWQ7XG4gIHJlYWRvbmx5IG9uVG9wQXJyaXZlPzogKGV2ZW50OiBXaGVlbEV2ZW50IHwgVG91Y2hFdmVudCkgPT4gdm9pZDtcbiAgcmVhZG9ubHkgb25Ub3BMZWF2ZT86IChldmVudDogV2hlZWxFdmVudCB8IFRvdWNoRXZlbnQpID0+IHZvaWQ7XG59XG5cbmNvbnN0IGJsdXJTZWxlY3RJbnB1dCA9IChldmVudDogTW91c2VFdmVudDxIVE1MRGl2RWxlbWVudD4pID0+IHtcbiAgY29uc3QgZWxlbWVudCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MRGl2RWxlbWVudDtcbiAgcmV0dXJuIChcbiAgICBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuICAgIChlbGVtZW50Lm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkuYmx1cigpXG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTY3JvbGxNYW5hZ2VyKHtcbiAgY2hpbGRyZW4sXG4gIGxvY2tFbmFibGVkLFxuICBjYXB0dXJlRW5hYmxlZCA9IHRydWUsXG4gIG9uQm90dG9tQXJyaXZlLFxuICBvbkJvdHRvbUxlYXZlLFxuICBvblRvcEFycml2ZSxcbiAgb25Ub3BMZWF2ZSxcbn06IFByb3BzKSB7XG4gIGNvbnN0IHNldFNjcm9sbENhcHR1cmVUYXJnZXQgPSB1c2VTY3JvbGxDYXB0dXJlKHtcbiAgICBpc0VuYWJsZWQ6IGNhcHR1cmVFbmFibGVkLFxuICAgIG9uQm90dG9tQXJyaXZlLFxuICAgIG9uQm90dG9tTGVhdmUsXG4gICAgb25Ub3BBcnJpdmUsXG4gICAgb25Ub3BMZWF2ZSxcbiAgfSk7XG4gIGNvbnN0IHNldFNjcm9sbExvY2tUYXJnZXQgPSB1c2VTY3JvbGxMb2NrKHsgaXNFbmFibGVkOiBsb2NrRW5hYmxlZCB9KTtcblxuICBjb25zdCB0YXJnZXRSZWY6IFJlZkNhbGxiYWNrPEhUTUxFbGVtZW50PiA9IChlbGVtZW50KSA9PiB7XG4gICAgc2V0U2Nyb2xsQ2FwdHVyZVRhcmdldChlbGVtZW50KTtcbiAgICBzZXRTY3JvbGxMb2NrVGFyZ2V0KGVsZW1lbnQpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAge2xvY2tFbmFibGVkICYmIChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIG9uQ2xpY2s9e2JsdXJTZWxlY3RJbnB1dH1cbiAgICAgICAgICBjc3M9e3sgcG9zaXRpb246ICdmaXhlZCcsIGxlZnQ6IDAsIGJvdHRvbTogMCwgcmlnaHQ6IDAsIHRvcDogMCB9fVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICAgIHtjaGlsZHJlbih0YXJnZXRSZWYpfVxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
function ScrollManager(_ref) {
  var children = _ref.children,
    lockEnabled = _ref.lockEnabled,
    _ref$captureEnabled = _ref.captureEnabled,
    captureEnabled = _ref$captureEnabled === void 0 ? true : _ref$captureEnabled,
    onBottomArrive = _ref.onBottomArrive,
    onBottomLeave = _ref.onBottomLeave,
    onTopArrive = _ref.onTopArrive,
    onTopLeave = _ref.onTopLeave;
  var setScrollCaptureTarget = useScrollCapture({
    isEnabled: captureEnabled,
    onBottomArrive: onBottomArrive,
    onBottomLeave: onBottomLeave,
    onTopArrive: onTopArrive,
    onTopLeave: onTopLeave
  });
  var setScrollLockTarget = useScrollLock({
    isEnabled: lockEnabled
  });
  var targetRef = function targetRef(element) {
    setScrollCaptureTarget(element);
    setScrollLockTarget(element);
  };
  return jsx(reactExports.Fragment, null, lockEnabled && jsx("div", {
    onClick: blurSelectInput,
    css: _ref2$1
  }), children(targetRef));
}

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "1a0ro4n-requiredInput",
  styles: "label:requiredInput;opacity:0;pointer-events:none;position:absolute;bottom:0;left:0;right:0;width:100%"
} : {
  name: "5kkxb2-requiredInput-RequiredInput",
  styles: "label:requiredInput;opacity:0;pointer-events:none;position:absolute;bottom:0;left:0;right:0;width:100%;label:RequiredInput;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlcXVpcmVkSW5wdXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNJIiwiZmlsZSI6IlJlcXVpcmVkSW5wdXQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgeyBGb2N1c0V2ZW50SGFuZGxlciwgRnVuY3Rpb25Db21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBqc3ggfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbmNvbnN0IFJlcXVpcmVkSW5wdXQ6IEZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgcmVhZG9ubHkgbmFtZT86IHN0cmluZztcbiAgcmVhZG9ubHkgb25Gb2N1czogRm9jdXNFdmVudEhhbmRsZXI8SFRNTElucHV0RWxlbWVudD47XG59PiA9ICh7IG5hbWUsIG9uRm9jdXMgfSkgPT4gKFxuICA8aW5wdXRcbiAgICByZXF1aXJlZFxuICAgIG5hbWU9e25hbWV9XG4gICAgdGFiSW5kZXg9ey0xfVxuICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICBjc3M9e3tcbiAgICAgIGxhYmVsOiAncmVxdWlyZWRJbnB1dCcsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgIH19XG4gICAgLy8gUHJldmVudCBgU3dpdGNoaW5nIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWRgIGVycm9yXG4gICAgdmFsdWU9XCJcIlxuICAgIG9uQ2hhbmdlPXsoKSA9PiB7fX1cbiAgLz5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IFJlcXVpcmVkSW5wdXQ7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
var RequiredInput = function RequiredInput(_ref) {
  var name = _ref.name,
    onFocus = _ref.onFocus;
  return jsx("input", {
    required: true,
    name: name,
    tabIndex: -1,
    "aria-hidden": "true",
    onFocus: onFocus,
    css: _ref2
    // Prevent `Switching from uncontrolled to controlled` error
    ,
    value: "",
    onChange: function onChange() {}
  });
};
var RequiredInput$1 = RequiredInput;

/// <reference types="user-agent-data-types" />

function testPlatform(re) {
  var _window$navigator$use;
  return typeof window !== 'undefined' && window.navigator != null ? re.test(((_window$navigator$use = window.navigator['userAgentData']) === null || _window$navigator$use === void 0 ? void 0 : _window$navigator$use.platform) || window.navigator.platform) : false;
}
function isIPhone() {
  return testPlatform(/^iPhone/i);
}
function isMac() {
  return testPlatform(/^Mac/i);
}
function isIPad() {
  return testPlatform(/^iPad/i) ||
  // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  isMac() && navigator.maxTouchPoints > 1;
}
function isIOS() {
  return isIPhone() || isIPad();
}
function isAppleDevice() {
  return isMac() || isIOS();
}

var formatGroupLabel = function formatGroupLabel(group) {
  return group.label;
};
var getOptionLabel$1 = function getOptionLabel(option) {
  return option.label;
};
var getOptionValue$1 = function getOptionValue(option) {
  return option.value;
};
var isOptionDisabled = function isOptionDisabled(option) {
  return !!option.isDisabled;
};

var defaultStyles = {
  clearIndicator: clearIndicatorCSS,
  container: containerCSS,
  control: css$1,
  dropdownIndicator: dropdownIndicatorCSS,
  group: groupCSS,
  groupHeading: groupHeadingCSS,
  indicatorsContainer: indicatorsContainerCSS,
  indicatorSeparator: indicatorSeparatorCSS,
  input: inputCSS,
  loadingIndicator: loadingIndicatorCSS,
  loadingMessage: loadingMessageCSS,
  menu: menuCSS,
  menuList: menuListCSS,
  menuPortal: menuPortalCSS,
  multiValue: multiValueCSS,
  multiValueLabel: multiValueLabelCSS,
  multiValueRemove: multiValueRemoveCSS,
  noOptionsMessage: noOptionsMessageCSS,
  option: optionCSS,
  placeholder: placeholderCSS,
  singleValue: css,
  valueContainer: valueContainerCSS
};
// Merge Utility
// Allows consumers to extend a base Select with additional styles

function mergeStyles(source) {
  var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  // initialize with source styles
  var styles = _objectSpread2({}, source);

  // massage in target styles
  Object.keys(target).forEach(function (keyAsString) {
    var key = keyAsString;
    if (source[key]) {
      styles[key] = function (rsCss, props) {
        return target[key](source[key](rsCss, props), props);
      };
    } else {
      styles[key] = target[key];
    }
  });
  return styles;
}

var colors = {
  primary: '#2684FF',
  primary75: '#4C9AFF',
  primary50: '#B2D4FF',
  primary25: '#DEEBFF',
  danger: '#DE350B',
  dangerLight: '#FFBDAD',
  neutral0: 'hsl(0, 0%, 100%)',
  neutral5: 'hsl(0, 0%, 95%)',
  neutral10: 'hsl(0, 0%, 90%)',
  neutral20: 'hsl(0, 0%, 80%)',
  neutral30: 'hsl(0, 0%, 70%)',
  neutral40: 'hsl(0, 0%, 60%)',
  neutral50: 'hsl(0, 0%, 50%)',
  neutral60: 'hsl(0, 0%, 40%)',
  neutral70: 'hsl(0, 0%, 30%)',
  neutral80: 'hsl(0, 0%, 20%)',
  neutral90: 'hsl(0, 0%, 10%)'
};
var borderRadius = 4;
// Used to calculate consistent margin/padding on elements
var baseUnit = 4;
// The minimum height of the control
var controlHeight = 38;
// The amount of space between the control and menu */
var menuGutter = baseUnit * 2;
var spacing = {
  baseUnit: baseUnit,
  controlHeight: controlHeight,
  menuGutter: menuGutter
};
var defaultTheme = {
  borderRadius: borderRadius,
  colors: colors,
  spacing: spacing
};

var defaultProps = {
  'aria-live': 'polite',
  backspaceRemovesValue: true,
  blurInputOnSelect: isTouchCapable(),
  captureMenuScroll: !isTouchCapable(),
  classNames: {},
  closeMenuOnSelect: true,
  closeMenuOnScroll: false,
  components: {},
  controlShouldRenderValue: true,
  escapeClearsValue: false,
  filterOption: createFilter(),
  formatGroupLabel: formatGroupLabel,
  getOptionLabel: getOptionLabel$1,
  getOptionValue: getOptionValue$1,
  isDisabled: false,
  isLoading: false,
  isMulti: false,
  isRtl: false,
  isSearchable: true,
  isOptionDisabled: isOptionDisabled,
  loadingMessage: function loadingMessage() {
    return 'Loading...';
  },
  maxMenuHeight: 300,
  minMenuHeight: 140,
  menuIsOpen: false,
  menuPlacement: 'bottom',
  menuPosition: 'absolute',
  menuShouldBlockScroll: false,
  menuShouldScrollIntoView: !isMobileDevice(),
  noOptionsMessage: function noOptionsMessage() {
    return 'No options';
  },
  openMenuOnFocus: false,
  openMenuOnClick: true,
  options: [],
  pageSize: 5,
  placeholder: 'Select...',
  screenReaderStatus: function screenReaderStatus(_ref) {
    var count = _ref.count;
    return "".concat(count, " result").concat(count !== 1 ? 's' : '', " available");
  },
  styles: {},
  tabIndex: 0,
  tabSelectsValue: true,
  unstyled: false
};
function toCategorizedOption(props, option, selectValue, index) {
  var isDisabled = _isOptionDisabled(props, option, selectValue);
  var isSelected = _isOptionSelected(props, option, selectValue);
  var label = getOptionLabel(props, option);
  var value = getOptionValue(props, option);
  return {
    type: 'option',
    data: option,
    isDisabled: isDisabled,
    isSelected: isSelected,
    label: label,
    value: value,
    index: index
  };
}
function buildCategorizedOptions(props, selectValue) {
  return props.options.map(function (groupOrOption, groupOrOptionIndex) {
    if ('options' in groupOrOption) {
      var categorizedOptions = groupOrOption.options.map(function (option, optionIndex) {
        return toCategorizedOption(props, option, selectValue, optionIndex);
      }).filter(function (categorizedOption) {
        return isFocusable(props, categorizedOption);
      });
      return categorizedOptions.length > 0 ? {
        type: 'group',
        data: groupOrOption,
        options: categorizedOptions,
        index: groupOrOptionIndex
      } : undefined;
    }
    var categorizedOption = toCategorizedOption(props, groupOrOption, selectValue, groupOrOptionIndex);
    return isFocusable(props, categorizedOption) ? categorizedOption : undefined;
  }).filter(notNullish);
}
function buildFocusableOptionsFromCategorizedOptions(categorizedOptions) {
  return categorizedOptions.reduce(function (optionsAccumulator, categorizedOption) {
    if (categorizedOption.type === 'group') {
      optionsAccumulator.push.apply(optionsAccumulator, _toConsumableArray(categorizedOption.options.map(function (option) {
        return option.data;
      })));
    } else {
      optionsAccumulator.push(categorizedOption.data);
    }
    return optionsAccumulator;
  }, []);
}
function buildFocusableOptionsWithIds(categorizedOptions, optionId) {
  return categorizedOptions.reduce(function (optionsAccumulator, categorizedOption) {
    if (categorizedOption.type === 'group') {
      optionsAccumulator.push.apply(optionsAccumulator, _toConsumableArray(categorizedOption.options.map(function (option) {
        return {
          data: option.data,
          id: "".concat(optionId, "-").concat(categorizedOption.index, "-").concat(option.index)
        };
      })));
    } else {
      optionsAccumulator.push({
        data: categorizedOption.data,
        id: "".concat(optionId, "-").concat(categorizedOption.index)
      });
    }
    return optionsAccumulator;
  }, []);
}
function buildFocusableOptions(props, selectValue) {
  return buildFocusableOptionsFromCategorizedOptions(buildCategorizedOptions(props, selectValue));
}
function isFocusable(props, categorizedOption) {
  var _props$inputValue = props.inputValue,
    inputValue = _props$inputValue === void 0 ? '' : _props$inputValue;
  var data = categorizedOption.data,
    isSelected = categorizedOption.isSelected,
    label = categorizedOption.label,
    value = categorizedOption.value;
  return (!shouldHideSelectedOptions(props) || !isSelected) && _filterOption(props, {
    label: label,
    value: value,
    data: data
  }, inputValue);
}
function getNextFocusedValue(state, nextSelectValue) {
  var focusedValue = state.focusedValue,
    lastSelectValue = state.selectValue;
  var lastFocusedIndex = lastSelectValue.indexOf(focusedValue);
  if (lastFocusedIndex > -1) {
    var nextFocusedIndex = nextSelectValue.indexOf(focusedValue);
    if (nextFocusedIndex > -1) {
      // the focused value is still in the selectValue, return it
      return focusedValue;
    } else if (lastFocusedIndex < nextSelectValue.length) {
      // the focusedValue is not present in the next selectValue array by
      // reference, so return the new value at the same index
      return nextSelectValue[lastFocusedIndex];
    }
  }
  return null;
}
function getNextFocusedOption(state, options) {
  var lastFocusedOption = state.focusedOption;
  return lastFocusedOption && options.indexOf(lastFocusedOption) > -1 ? lastFocusedOption : options[0];
}
var getFocusedOptionId = function getFocusedOptionId(focusableOptionsWithIds, focusedOption) {
  var _focusableOptionsWith;
  var focusedOptionId = (_focusableOptionsWith = focusableOptionsWithIds.find(function (option) {
    return option.data === focusedOption;
  })) === null || _focusableOptionsWith === void 0 ? void 0 : _focusableOptionsWith.id;
  return focusedOptionId || null;
};
var getOptionLabel = function getOptionLabel(props, data) {
  return props.getOptionLabel(data);
};
var getOptionValue = function getOptionValue(props, data) {
  return props.getOptionValue(data);
};
function _isOptionDisabled(props, option, selectValue) {
  return typeof props.isOptionDisabled === 'function' ? props.isOptionDisabled(option, selectValue) : false;
}
function _isOptionSelected(props, option, selectValue) {
  if (selectValue.indexOf(option) > -1) return true;
  if (typeof props.isOptionSelected === 'function') {
    return props.isOptionSelected(option, selectValue);
  }
  var candidate = getOptionValue(props, option);
  return selectValue.some(function (i) {
    return getOptionValue(props, i) === candidate;
  });
}
function _filterOption(props, option, inputValue) {
  return props.filterOption ? props.filterOption(option, inputValue) : true;
}
var shouldHideSelectedOptions = function shouldHideSelectedOptions(props) {
  var hideSelectedOptions = props.hideSelectedOptions,
    isMulti = props.isMulti;
  if (hideSelectedOptions === undefined) return isMulti;
  return hideSelectedOptions;
};
var instanceId = 1;
var Select$2 = /*#__PURE__*/function (_Component) {
  _inherits(Select, _Component);
  var _super = _createSuper(Select);
  // Misc. Instance Properties
  // ------------------------------

  // TODO

  // Refs
  // ------------------------------

  // Lifecycle
  // ------------------------------

  function Select(_props) {
    var _this;
    _classCallCheck(this, Select);
    _this = _super.call(this, _props);
    _this.state = {
      ariaSelection: null,
      focusedOption: null,
      focusedOptionId: null,
      focusableOptionsWithIds: [],
      focusedValue: null,
      inputIsHidden: false,
      isFocused: false,
      selectValue: [],
      clearFocusValueOnUpdate: false,
      prevWasFocused: false,
      inputIsHiddenAfterUpdate: undefined,
      prevProps: undefined,
      instancePrefix: ''
    };
    _this.blockOptionHover = false;
    _this.isComposing = false;
    _this.commonProps = void 0;
    _this.initialTouchX = 0;
    _this.initialTouchY = 0;
    _this.openAfterFocus = false;
    _this.scrollToFocusedOptionOnUpdate = false;
    _this.userIsDragging = void 0;
    _this.isAppleDevice = isAppleDevice();
    _this.controlRef = null;
    _this.getControlRef = function (ref) {
      _this.controlRef = ref;
    };
    _this.focusedOptionRef = null;
    _this.getFocusedOptionRef = function (ref) {
      _this.focusedOptionRef = ref;
    };
    _this.menuListRef = null;
    _this.getMenuListRef = function (ref) {
      _this.menuListRef = ref;
    };
    _this.inputRef = null;
    _this.getInputRef = function (ref) {
      _this.inputRef = ref;
    };
    _this.focus = _this.focusInput;
    _this.blur = _this.blurInput;
    _this.onChange = function (newValue, actionMeta) {
      var _this$props = _this.props,
        onChange = _this$props.onChange,
        name = _this$props.name;
      actionMeta.name = name;
      _this.ariaOnChange(newValue, actionMeta);
      onChange(newValue, actionMeta);
    };
    _this.setValue = function (newValue, action, option) {
      var _this$props2 = _this.props,
        closeMenuOnSelect = _this$props2.closeMenuOnSelect,
        isMulti = _this$props2.isMulti,
        inputValue = _this$props2.inputValue;
      _this.onInputChange('', {
        action: 'set-value',
        prevInputValue: inputValue
      });
      if (closeMenuOnSelect) {
        _this.setState({
          inputIsHiddenAfterUpdate: !isMulti
        });
        _this.onMenuClose();
      }
      // when the select value should change, we should reset focusedValue
      _this.setState({
        clearFocusValueOnUpdate: true
      });
      _this.onChange(newValue, {
        action: action,
        option: option
      });
    };
    _this.selectOption = function (newValue) {
      var _this$props3 = _this.props,
        blurInputOnSelect = _this$props3.blurInputOnSelect,
        isMulti = _this$props3.isMulti,
        name = _this$props3.name;
      var selectValue = _this.state.selectValue;
      var deselected = isMulti && _this.isOptionSelected(newValue, selectValue);
      var isDisabled = _this.isOptionDisabled(newValue, selectValue);
      if (deselected) {
        var candidate = _this.getOptionValue(newValue);
        _this.setValue(multiValueAsValue(selectValue.filter(function (i) {
          return _this.getOptionValue(i) !== candidate;
        })), 'deselect-option', newValue);
      } else if (!isDisabled) {
        // Select option if option is not disabled
        if (isMulti) {
          _this.setValue(multiValueAsValue([].concat(_toConsumableArray(selectValue), [newValue])), 'select-option', newValue);
        } else {
          _this.setValue(singleValueAsValue(newValue), 'select-option');
        }
      } else {
        _this.ariaOnChange(singleValueAsValue(newValue), {
          action: 'select-option',
          option: newValue,
          name: name
        });
        return;
      }
      if (blurInputOnSelect) {
        _this.blurInput();
      }
    };
    _this.removeValue = function (removedValue) {
      var isMulti = _this.props.isMulti;
      var selectValue = _this.state.selectValue;
      var candidate = _this.getOptionValue(removedValue);
      var newValueArray = selectValue.filter(function (i) {
        return _this.getOptionValue(i) !== candidate;
      });
      var newValue = valueTernary(isMulti, newValueArray, newValueArray[0] || null);
      _this.onChange(newValue, {
        action: 'remove-value',
        removedValue: removedValue
      });
      _this.focusInput();
    };
    _this.clearValue = function () {
      var selectValue = _this.state.selectValue;
      _this.onChange(valueTernary(_this.props.isMulti, [], null), {
        action: 'clear',
        removedValues: selectValue
      });
    };
    _this.popValue = function () {
      var isMulti = _this.props.isMulti;
      var selectValue = _this.state.selectValue;
      var lastSelectedValue = selectValue[selectValue.length - 1];
      var newValueArray = selectValue.slice(0, selectValue.length - 1);
      var newValue = valueTernary(isMulti, newValueArray, newValueArray[0] || null);
      if (lastSelectedValue) {
        _this.onChange(newValue, {
          action: 'pop-value',
          removedValue: lastSelectedValue
        });
      }
    };
    _this.getFocusedOptionId = function (focusedOption) {
      return getFocusedOptionId(_this.state.focusableOptionsWithIds, focusedOption);
    };
    _this.getFocusableOptionsWithIds = function () {
      return buildFocusableOptionsWithIds(buildCategorizedOptions(_this.props, _this.state.selectValue), _this.getElementId('option'));
    };
    _this.getValue = function () {
      return _this.state.selectValue;
    };
    _this.cx = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return classNames.apply(void 0, [_this.props.classNamePrefix].concat(args));
    };
    _this.getOptionLabel = function (data) {
      return getOptionLabel(_this.props, data);
    };
    _this.getOptionValue = function (data) {
      return getOptionValue(_this.props, data);
    };
    _this.getStyles = function (key, props) {
      var unstyled = _this.props.unstyled;
      var base = defaultStyles[key](props, unstyled);
      base.boxSizing = 'border-box';
      var custom = _this.props.styles[key];
      return custom ? custom(base, props) : base;
    };
    _this.getClassNames = function (key, props) {
      var _this$props$className, _this$props$className2;
      return (_this$props$className = (_this$props$className2 = _this.props.classNames)[key]) === null || _this$props$className === void 0 ? void 0 : _this$props$className.call(_this$props$className2, props);
    };
    _this.getElementId = function (element) {
      return "".concat(_this.state.instancePrefix, "-").concat(element);
    };
    _this.getComponents = function () {
      return defaultComponents(_this.props);
    };
    _this.buildCategorizedOptions = function () {
      return buildCategorizedOptions(_this.props, _this.state.selectValue);
    };
    _this.getCategorizedOptions = function () {
      return _this.props.menuIsOpen ? _this.buildCategorizedOptions() : [];
    };
    _this.buildFocusableOptions = function () {
      return buildFocusableOptionsFromCategorizedOptions(_this.buildCategorizedOptions());
    };
    _this.getFocusableOptions = function () {
      return _this.props.menuIsOpen ? _this.buildFocusableOptions() : [];
    };
    _this.ariaOnChange = function (value, actionMeta) {
      _this.setState({
        ariaSelection: _objectSpread2({
          value: value
        }, actionMeta)
      });
    };
    _this.onMenuMouseDown = function (event) {
      if (event.button !== 0) {
        return;
      }
      event.stopPropagation();
      event.preventDefault();
      _this.focusInput();
    };
    _this.onMenuMouseMove = function (event) {
      _this.blockOptionHover = false;
    };
    _this.onControlMouseDown = function (event) {
      // Event captured by dropdown indicator
      if (event.defaultPrevented) {
        return;
      }
      var openMenuOnClick = _this.props.openMenuOnClick;
      if (!_this.state.isFocused) {
        if (openMenuOnClick) {
          _this.openAfterFocus = true;
        }
        _this.focusInput();
      } else if (!_this.props.menuIsOpen) {
        if (openMenuOnClick) {
          _this.openMenu('first');
        }
      } else {
        if (event.target.tagName !== 'INPUT' && event.target.tagName !== 'TEXTAREA') {
          _this.onMenuClose();
        }
      }
      if (event.target.tagName !== 'INPUT' && event.target.tagName !== 'TEXTAREA') {
        event.preventDefault();
      }
    };
    _this.onDropdownIndicatorMouseDown = function (event) {
      // ignore mouse events that weren't triggered by the primary button
      if (event && event.type === 'mousedown' && event.button !== 0) {
        return;
      }
      if (_this.props.isDisabled) return;
      var _this$props4 = _this.props,
        isMulti = _this$props4.isMulti,
        menuIsOpen = _this$props4.menuIsOpen;
      _this.focusInput();
      if (menuIsOpen) {
        _this.setState({
          inputIsHiddenAfterUpdate: !isMulti
        });
        _this.onMenuClose();
      } else {
        _this.openMenu('first');
      }
      event.preventDefault();
    };
    _this.onClearIndicatorMouseDown = function (event) {
      // ignore mouse events that weren't triggered by the primary button
      if (event && event.type === 'mousedown' && event.button !== 0) {
        return;
      }
      _this.clearValue();
      event.preventDefault();
      _this.openAfterFocus = false;
      if (event.type === 'touchend') {
        _this.focusInput();
      } else {
        setTimeout(function () {
          return _this.focusInput();
        });
      }
    };
    _this.onScroll = function (event) {
      if (typeof _this.props.closeMenuOnScroll === 'boolean') {
        if (event.target instanceof HTMLElement && isDocumentElement(event.target)) {
          _this.props.onMenuClose();
        }
      } else if (typeof _this.props.closeMenuOnScroll === 'function') {
        if (_this.props.closeMenuOnScroll(event)) {
          _this.props.onMenuClose();
        }
      }
    };
    _this.onCompositionStart = function () {
      _this.isComposing = true;
    };
    _this.onCompositionEnd = function () {
      _this.isComposing = false;
    };
    _this.onTouchStart = function (_ref2) {
      var touches = _ref2.touches;
      var touch = touches && touches.item(0);
      if (!touch) {
        return;
      }
      _this.initialTouchX = touch.clientX;
      _this.initialTouchY = touch.clientY;
      _this.userIsDragging = false;
    };
    _this.onTouchMove = function (_ref3) {
      var touches = _ref3.touches;
      var touch = touches && touches.item(0);
      if (!touch) {
        return;
      }
      var deltaX = Math.abs(touch.clientX - _this.initialTouchX);
      var deltaY = Math.abs(touch.clientY - _this.initialTouchY);
      var moveThreshold = 5;
      _this.userIsDragging = deltaX > moveThreshold || deltaY > moveThreshold;
    };
    _this.onTouchEnd = function (event) {
      if (_this.userIsDragging) return;

      // close the menu if the user taps outside
      // we're checking on event.target here instead of event.currentTarget, because we want to assert information
      // on events on child elements, not the document (which we've attached this handler to).
      if (_this.controlRef && !_this.controlRef.contains(event.target) && _this.menuListRef && !_this.menuListRef.contains(event.target)) {
        _this.blurInput();
      }

      // reset move vars
      _this.initialTouchX = 0;
      _this.initialTouchY = 0;
    };
    _this.onControlTouchEnd = function (event) {
      if (_this.userIsDragging) return;
      _this.onControlMouseDown(event);
    };
    _this.onClearIndicatorTouchEnd = function (event) {
      if (_this.userIsDragging) return;
      _this.onClearIndicatorMouseDown(event);
    };
    _this.onDropdownIndicatorTouchEnd = function (event) {
      if (_this.userIsDragging) return;
      _this.onDropdownIndicatorMouseDown(event);
    };
    _this.handleInputChange = function (event) {
      var prevInputValue = _this.props.inputValue;
      var inputValue = event.currentTarget.value;
      _this.setState({
        inputIsHiddenAfterUpdate: false
      });
      _this.onInputChange(inputValue, {
        action: 'input-change',
        prevInputValue: prevInputValue
      });
      if (!_this.props.menuIsOpen) {
        _this.onMenuOpen();
      }
    };
    _this.onInputFocus = function (event) {
      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }
      _this.setState({
        inputIsHiddenAfterUpdate: false,
        isFocused: true
      });
      if (_this.openAfterFocus || _this.props.openMenuOnFocus) {
        _this.openMenu('first');
      }
      _this.openAfterFocus = false;
    };
    _this.onInputBlur = function (event) {
      var prevInputValue = _this.props.inputValue;
      if (_this.menuListRef && _this.menuListRef.contains(document.activeElement)) {
        _this.inputRef.focus();
        return;
      }
      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }
      _this.onInputChange('', {
        action: 'input-blur',
        prevInputValue: prevInputValue
      });
      _this.onMenuClose();
      _this.setState({
        focusedValue: null,
        isFocused: false
      });
    };
    _this.onOptionHover = function (focusedOption) {
      if (_this.blockOptionHover || _this.state.focusedOption === focusedOption) {
        return;
      }
      var options = _this.getFocusableOptions();
      var focusedOptionIndex = options.indexOf(focusedOption);
      _this.setState({
        focusedOption: focusedOption,
        focusedOptionId: focusedOptionIndex > -1 ? _this.getFocusedOptionId(focusedOption) : null
      });
    };
    _this.shouldHideSelectedOptions = function () {
      return shouldHideSelectedOptions(_this.props);
    };
    _this.onValueInputFocus = function (e) {
      e.preventDefault();
      e.stopPropagation();
      _this.focus();
    };
    _this.onKeyDown = function (event) {
      var _this$props5 = _this.props,
        isMulti = _this$props5.isMulti,
        backspaceRemovesValue = _this$props5.backspaceRemovesValue,
        escapeClearsValue = _this$props5.escapeClearsValue,
        inputValue = _this$props5.inputValue,
        isClearable = _this$props5.isClearable,
        isDisabled = _this$props5.isDisabled,
        menuIsOpen = _this$props5.menuIsOpen,
        onKeyDown = _this$props5.onKeyDown,
        tabSelectsValue = _this$props5.tabSelectsValue,
        openMenuOnFocus = _this$props5.openMenuOnFocus;
      var _this$state = _this.state,
        focusedOption = _this$state.focusedOption,
        focusedValue = _this$state.focusedValue,
        selectValue = _this$state.selectValue;
      if (isDisabled) return;
      if (typeof onKeyDown === 'function') {
        onKeyDown(event);
        if (event.defaultPrevented) {
          return;
        }
      }

      // Block option hover events when the user has just pressed a key
      _this.blockOptionHover = true;
      switch (event.key) {
        case 'ArrowLeft':
          if (!isMulti || inputValue) return;
          _this.focusValue('previous');
          break;
        case 'ArrowRight':
          if (!isMulti || inputValue) return;
          _this.focusValue('next');
          break;
        case 'Delete':
        case 'Backspace':
          if (inputValue) return;
          if (focusedValue) {
            _this.removeValue(focusedValue);
          } else {
            if (!backspaceRemovesValue) return;
            if (isMulti) {
              _this.popValue();
            } else if (isClearable) {
              _this.clearValue();
            }
          }
          break;
        case 'Tab':
          if (_this.isComposing) return;
          if (event.shiftKey || !menuIsOpen || !tabSelectsValue || !focusedOption ||
          // don't capture the event if the menu opens on focus and the focused
          // option is already selected; it breaks the flow of navigation
          openMenuOnFocus && _this.isOptionSelected(focusedOption, selectValue)) {
            return;
          }
          _this.selectOption(focusedOption);
          break;
        case 'Enter':
          if (event.keyCode === 229) {
            // ignore the keydown event from an Input Method Editor(IME)
            // ref. https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode
            break;
          }
          if (menuIsOpen) {
            if (!focusedOption) return;
            if (_this.isComposing) return;
            _this.selectOption(focusedOption);
            break;
          }
          return;
        case 'Escape':
          if (menuIsOpen) {
            _this.setState({
              inputIsHiddenAfterUpdate: false
            });
            _this.onInputChange('', {
              action: 'menu-close',
              prevInputValue: inputValue
            });
            _this.onMenuClose();
          } else if (isClearable && escapeClearsValue) {
            _this.clearValue();
          }
          break;
        case ' ':
          // space
          if (inputValue) {
            return;
          }
          if (!menuIsOpen) {
            _this.openMenu('first');
            break;
          }
          if (!focusedOption) return;
          _this.selectOption(focusedOption);
          break;
        case 'ArrowUp':
          if (menuIsOpen) {
            _this.focusOption('up');
          } else {
            _this.openMenu('last');
          }
          break;
        case 'ArrowDown':
          if (menuIsOpen) {
            _this.focusOption('down');
          } else {
            _this.openMenu('first');
          }
          break;
        case 'PageUp':
          if (!menuIsOpen) return;
          _this.focusOption('pageup');
          break;
        case 'PageDown':
          if (!menuIsOpen) return;
          _this.focusOption('pagedown');
          break;
        case 'Home':
          if (!menuIsOpen) return;
          _this.focusOption('first');
          break;
        case 'End':
          if (!menuIsOpen) return;
          _this.focusOption('last');
          break;
        default:
          return;
      }
      event.preventDefault();
    };
    _this.state.instancePrefix = 'react-select-' + (_this.props.instanceId || ++instanceId);
    _this.state.selectValue = cleanValue(_props.value);
    // Set focusedOption if menuIsOpen is set on init (e.g. defaultMenuIsOpen)
    if (_props.menuIsOpen && _this.state.selectValue.length) {
      var focusableOptionsWithIds = _this.getFocusableOptionsWithIds();
      var focusableOptions = _this.buildFocusableOptions();
      var optionIndex = focusableOptions.indexOf(_this.state.selectValue[0]);
      _this.state.focusableOptionsWithIds = focusableOptionsWithIds;
      _this.state.focusedOption = focusableOptions[optionIndex];
      _this.state.focusedOptionId = getFocusedOptionId(focusableOptionsWithIds, focusableOptions[optionIndex]);
    }
    return _this;
  }
  _createClass(Select, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.startListeningComposition();
      this.startListeningToTouch();
      if (this.props.closeMenuOnScroll && document && document.addEventListener) {
        // Listen to all scroll events, and filter them out inside of 'onScroll'
        document.addEventListener('scroll', this.onScroll, true);
      }
      if (this.props.autoFocus) {
        this.focusInput();
      }

      // Scroll focusedOption into view if menuIsOpen is set on mount (e.g. defaultMenuIsOpen)
      if (this.props.menuIsOpen && this.state.focusedOption && this.menuListRef && this.focusedOptionRef) {
        scrollIntoView(this.menuListRef, this.focusedOptionRef);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props6 = this.props,
        isDisabled = _this$props6.isDisabled,
        menuIsOpen = _this$props6.menuIsOpen;
      var isFocused = this.state.isFocused;
      if (
      // ensure focus is restored correctly when the control becomes enabled
      isFocused && !isDisabled && prevProps.isDisabled ||
      // ensure focus is on the Input when the menu opens
      isFocused && menuIsOpen && !prevProps.menuIsOpen) {
        this.focusInput();
      }
      if (isFocused && isDisabled && !prevProps.isDisabled) {
        // ensure select state gets blurred in case Select is programmatically disabled while focused
        // eslint-disable-next-line react/no-did-update-set-state
        this.setState({
          isFocused: false
        }, this.onMenuClose);
      } else if (!isFocused && !isDisabled && prevProps.isDisabled && this.inputRef === document.activeElement) {
        // ensure select state gets focused in case Select is programatically re-enabled while focused (Firefox)
        // eslint-disable-next-line react/no-did-update-set-state
        this.setState({
          isFocused: true
        });
      }

      // scroll the focused option into view if necessary
      if (this.menuListRef && this.focusedOptionRef && this.scrollToFocusedOptionOnUpdate) {
        scrollIntoView(this.menuListRef, this.focusedOptionRef);
        this.scrollToFocusedOptionOnUpdate = false;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.stopListeningComposition();
      this.stopListeningToTouch();
      document.removeEventListener('scroll', this.onScroll, true);
    }

    // ==============================
    // Consumer Handlers
    // ==============================
  }, {
    key: "onMenuOpen",
    value: function onMenuOpen() {
      this.props.onMenuOpen();
    }
  }, {
    key: "onMenuClose",
    value: function onMenuClose() {
      this.onInputChange('', {
        action: 'menu-close',
        prevInputValue: this.props.inputValue
      });
      this.props.onMenuClose();
    }
  }, {
    key: "onInputChange",
    value: function onInputChange(newValue, actionMeta) {
      this.props.onInputChange(newValue, actionMeta);
    }

    // ==============================
    // Methods
    // ==============================
  }, {
    key: "focusInput",
    value: function focusInput() {
      if (!this.inputRef) return;
      this.inputRef.focus();
    }
  }, {
    key: "blurInput",
    value: function blurInput() {
      if (!this.inputRef) return;
      this.inputRef.blur();
    }

    // aliased for consumers
  }, {
    key: "openMenu",
    value: function openMenu(focusOption) {
      var _this2 = this;
      var _this$state2 = this.state,
        selectValue = _this$state2.selectValue,
        isFocused = _this$state2.isFocused;
      var focusableOptions = this.buildFocusableOptions();
      var openAtIndex = focusOption === 'first' ? 0 : focusableOptions.length - 1;
      if (!this.props.isMulti) {
        var selectedIndex = focusableOptions.indexOf(selectValue[0]);
        if (selectedIndex > -1) {
          openAtIndex = selectedIndex;
        }
      }

      // only scroll if the menu isn't already open
      this.scrollToFocusedOptionOnUpdate = !(isFocused && this.menuListRef);
      this.setState({
        inputIsHiddenAfterUpdate: false,
        focusedValue: null,
        focusedOption: focusableOptions[openAtIndex],
        focusedOptionId: this.getFocusedOptionId(focusableOptions[openAtIndex])
      }, function () {
        return _this2.onMenuOpen();
      });
    }
  }, {
    key: "focusValue",
    value: function focusValue(direction) {
      var _this$state3 = this.state,
        selectValue = _this$state3.selectValue,
        focusedValue = _this$state3.focusedValue;

      // Only multiselects support value focusing
      if (!this.props.isMulti) return;
      this.setState({
        focusedOption: null
      });
      var focusedIndex = selectValue.indexOf(focusedValue);
      if (!focusedValue) {
        focusedIndex = -1;
      }
      var lastIndex = selectValue.length - 1;
      var nextFocus = -1;
      if (!selectValue.length) return;
      switch (direction) {
        case 'previous':
          if (focusedIndex === 0) {
            // don't cycle from the start to the end
            nextFocus = 0;
          } else if (focusedIndex === -1) {
            // if nothing is focused, focus the last value first
            nextFocus = lastIndex;
          } else {
            nextFocus = focusedIndex - 1;
          }
          break;
        case 'next':
          if (focusedIndex > -1 && focusedIndex < lastIndex) {
            nextFocus = focusedIndex + 1;
          }
          break;
      }
      this.setState({
        inputIsHidden: nextFocus !== -1,
        focusedValue: selectValue[nextFocus]
      });
    }
  }, {
    key: "focusOption",
    value: function focusOption() {
      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'first';
      var pageSize = this.props.pageSize;
      var focusedOption = this.state.focusedOption;
      var options = this.getFocusableOptions();
      if (!options.length) return;
      var nextFocus = 0; // handles 'first'
      var focusedIndex = options.indexOf(focusedOption);
      if (!focusedOption) {
        focusedIndex = -1;
      }
      if (direction === 'up') {
        nextFocus = focusedIndex > 0 ? focusedIndex - 1 : options.length - 1;
      } else if (direction === 'down') {
        nextFocus = (focusedIndex + 1) % options.length;
      } else if (direction === 'pageup') {
        nextFocus = focusedIndex - pageSize;
        if (nextFocus < 0) nextFocus = 0;
      } else if (direction === 'pagedown') {
        nextFocus = focusedIndex + pageSize;
        if (nextFocus > options.length - 1) nextFocus = options.length - 1;
      } else if (direction === 'last') {
        nextFocus = options.length - 1;
      }
      this.scrollToFocusedOptionOnUpdate = true;
      this.setState({
        focusedOption: options[nextFocus],
        focusedValue: null,
        focusedOptionId: this.getFocusedOptionId(options[nextFocus])
      });
    }
  }, {
    key: "getTheme",
    value:
    // ==============================
    // Getters
    // ==============================

    function getTheme() {
      // Use the default theme if there are no customisations.
      if (!this.props.theme) {
        return defaultTheme;
      }
      // If the theme prop is a function, assume the function
      // knows how to merge the passed-in default theme with
      // its own modifications.
      if (typeof this.props.theme === 'function') {
        return this.props.theme(defaultTheme);
      }
      // Otherwise, if a plain theme object was passed in,
      // overlay it with the default theme.
      return _objectSpread2(_objectSpread2({}, defaultTheme), this.props.theme);
    }
  }, {
    key: "getCommonProps",
    value: function getCommonProps() {
      var clearValue = this.clearValue,
        cx = this.cx,
        getStyles = this.getStyles,
        getClassNames = this.getClassNames,
        getValue = this.getValue,
        selectOption = this.selectOption,
        setValue = this.setValue,
        props = this.props;
      var isMulti = props.isMulti,
        isRtl = props.isRtl,
        options = props.options;
      var hasValue = this.hasValue();
      return {
        clearValue: clearValue,
        cx: cx,
        getStyles: getStyles,
        getClassNames: getClassNames,
        getValue: getValue,
        hasValue: hasValue,
        isMulti: isMulti,
        isRtl: isRtl,
        options: options,
        selectOption: selectOption,
        selectProps: props,
        setValue: setValue,
        theme: this.getTheme()
      };
    }
  }, {
    key: "hasValue",
    value: function hasValue() {
      var selectValue = this.state.selectValue;
      return selectValue.length > 0;
    }
  }, {
    key: "hasOptions",
    value: function hasOptions() {
      return !!this.getFocusableOptions().length;
    }
  }, {
    key: "isClearable",
    value: function isClearable() {
      var _this$props7 = this.props,
        isClearable = _this$props7.isClearable,
        isMulti = _this$props7.isMulti;

      // single select, by default, IS NOT clearable
      // multi select, by default, IS clearable
      if (isClearable === undefined) return isMulti;
      return isClearable;
    }
  }, {
    key: "isOptionDisabled",
    value: function isOptionDisabled(option, selectValue) {
      return _isOptionDisabled(this.props, option, selectValue);
    }
  }, {
    key: "isOptionSelected",
    value: function isOptionSelected(option, selectValue) {
      return _isOptionSelected(this.props, option, selectValue);
    }
  }, {
    key: "filterOption",
    value: function filterOption(option, inputValue) {
      return _filterOption(this.props, option, inputValue);
    }
  }, {
    key: "formatOptionLabel",
    value: function formatOptionLabel(data, context) {
      if (typeof this.props.formatOptionLabel === 'function') {
        var _inputValue = this.props.inputValue;
        var _selectValue = this.state.selectValue;
        return this.props.formatOptionLabel(data, {
          context: context,
          inputValue: _inputValue,
          selectValue: _selectValue
        });
      } else {
        return this.getOptionLabel(data);
      }
    }
  }, {
    key: "formatGroupLabel",
    value: function formatGroupLabel(data) {
      return this.props.formatGroupLabel(data);
    }

    // ==============================
    // Mouse Handlers
    // ==============================
  }, {
    key: "startListeningComposition",
    value:
    // ==============================
    // Composition Handlers
    // ==============================

    function startListeningComposition() {
      if (document && document.addEventListener) {
        document.addEventListener('compositionstart', this.onCompositionStart, false);
        document.addEventListener('compositionend', this.onCompositionEnd, false);
      }
    }
  }, {
    key: "stopListeningComposition",
    value: function stopListeningComposition() {
      if (document && document.removeEventListener) {
        document.removeEventListener('compositionstart', this.onCompositionStart);
        document.removeEventListener('compositionend', this.onCompositionEnd);
      }
    }
  }, {
    key: "startListeningToTouch",
    value:
    // ==============================
    // Touch Handlers
    // ==============================

    function startListeningToTouch() {
      if (document && document.addEventListener) {
        document.addEventListener('touchstart', this.onTouchStart, false);
        document.addEventListener('touchmove', this.onTouchMove, false);
        document.addEventListener('touchend', this.onTouchEnd, false);
      }
    }
  }, {
    key: "stopListeningToTouch",
    value: function stopListeningToTouch() {
      if (document && document.removeEventListener) {
        document.removeEventListener('touchstart', this.onTouchStart);
        document.removeEventListener('touchmove', this.onTouchMove);
        document.removeEventListener('touchend', this.onTouchEnd);
      }
    }
  }, {
    key: "renderInput",
    value:
    // ==============================
    // Renderers
    // ==============================
    function renderInput() {
      var _this$props8 = this.props,
        isDisabled = _this$props8.isDisabled,
        isSearchable = _this$props8.isSearchable,
        inputId = _this$props8.inputId,
        inputValue = _this$props8.inputValue,
        tabIndex = _this$props8.tabIndex,
        form = _this$props8.form,
        menuIsOpen = _this$props8.menuIsOpen,
        required = _this$props8.required;
      var _this$getComponents = this.getComponents(),
        Input = _this$getComponents.Input;
      var _this$state4 = this.state,
        inputIsHidden = _this$state4.inputIsHidden,
        ariaSelection = _this$state4.ariaSelection;
      var commonProps = this.commonProps;
      var id = inputId || this.getElementId('input');

      // aria attributes makes the JSX "noisy", separated for clarity
      var ariaAttributes = _objectSpread2(_objectSpread2(_objectSpread2({
        'aria-autocomplete': 'list',
        'aria-expanded': menuIsOpen,
        'aria-haspopup': true,
        'aria-errormessage': this.props['aria-errormessage'],
        'aria-invalid': this.props['aria-invalid'],
        'aria-label': this.props['aria-label'],
        'aria-labelledby': this.props['aria-labelledby'],
        'aria-required': required,
        role: 'combobox',
        'aria-activedescendant': this.isAppleDevice ? undefined : this.state.focusedOptionId || ''
      }, menuIsOpen && {
        'aria-controls': this.getElementId('listbox')
      }), !isSearchable && {
        'aria-readonly': true
      }), this.hasValue() ? (ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === 'initial-input-focus' && {
        'aria-describedby': this.getElementId('live-region')
      } : {
        'aria-describedby': this.getElementId('placeholder')
      });
      if (!isSearchable) {
        // use a dummy input to maintain focus/blur functionality
        return /*#__PURE__*/reactExports.createElement(DummyInput, _extends({
          id: id,
          innerRef: this.getInputRef,
          onBlur: this.onInputBlur,
          onChange: noop$2,
          onFocus: this.onInputFocus,
          disabled: isDisabled,
          tabIndex: tabIndex,
          inputMode: "none",
          form: form,
          value: ""
        }, ariaAttributes));
      }
      return /*#__PURE__*/reactExports.createElement(Input, _extends({}, commonProps, {
        autoCapitalize: "none",
        autoComplete: "off",
        autoCorrect: "off",
        id: id,
        innerRef: this.getInputRef,
        isDisabled: isDisabled,
        isHidden: inputIsHidden,
        onBlur: this.onInputBlur,
        onChange: this.handleInputChange,
        onFocus: this.onInputFocus,
        spellCheck: "false",
        tabIndex: tabIndex,
        form: form,
        type: "text",
        value: inputValue
      }, ariaAttributes));
    }
  }, {
    key: "renderPlaceholderOrValue",
    value: function renderPlaceholderOrValue() {
      var _this3 = this;
      var _this$getComponents2 = this.getComponents(),
        MultiValue = _this$getComponents2.MultiValue,
        MultiValueContainer = _this$getComponents2.MultiValueContainer,
        MultiValueLabel = _this$getComponents2.MultiValueLabel,
        MultiValueRemove = _this$getComponents2.MultiValueRemove,
        SingleValue = _this$getComponents2.SingleValue,
        Placeholder = _this$getComponents2.Placeholder;
      var commonProps = this.commonProps;
      var _this$props9 = this.props,
        controlShouldRenderValue = _this$props9.controlShouldRenderValue,
        isDisabled = _this$props9.isDisabled,
        isMulti = _this$props9.isMulti,
        inputValue = _this$props9.inputValue,
        placeholder = _this$props9.placeholder;
      var _this$state5 = this.state,
        selectValue = _this$state5.selectValue,
        focusedValue = _this$state5.focusedValue,
        isFocused = _this$state5.isFocused;
      if (!this.hasValue() || !controlShouldRenderValue) {
        return inputValue ? null : /*#__PURE__*/reactExports.createElement(Placeholder, _extends({}, commonProps, {
          key: "placeholder",
          isDisabled: isDisabled,
          isFocused: isFocused,
          innerProps: {
            id: this.getElementId('placeholder')
          }
        }), placeholder);
      }
      if (isMulti) {
        return selectValue.map(function (opt, index) {
          var isOptionFocused = opt === focusedValue;
          var key = "".concat(_this3.getOptionLabel(opt), "-").concat(_this3.getOptionValue(opt));
          return /*#__PURE__*/reactExports.createElement(MultiValue, _extends({}, commonProps, {
            components: {
              Container: MultiValueContainer,
              Label: MultiValueLabel,
              Remove: MultiValueRemove
            },
            isFocused: isOptionFocused,
            isDisabled: isDisabled,
            key: key,
            index: index,
            removeProps: {
              onClick: function onClick() {
                return _this3.removeValue(opt);
              },
              onTouchEnd: function onTouchEnd() {
                return _this3.removeValue(opt);
              },
              onMouseDown: function onMouseDown(e) {
                e.preventDefault();
              }
            },
            data: opt
          }), _this3.formatOptionLabel(opt, 'value'));
        });
      }
      if (inputValue) {
        return null;
      }
      var singleValue = selectValue[0];
      return /*#__PURE__*/reactExports.createElement(SingleValue, _extends({}, commonProps, {
        data: singleValue,
        isDisabled: isDisabled
      }), this.formatOptionLabel(singleValue, 'value'));
    }
  }, {
    key: "renderClearIndicator",
    value: function renderClearIndicator() {
      var _this$getComponents3 = this.getComponents(),
        ClearIndicator = _this$getComponents3.ClearIndicator;
      var commonProps = this.commonProps;
      var _this$props10 = this.props,
        isDisabled = _this$props10.isDisabled,
        isLoading = _this$props10.isLoading;
      var isFocused = this.state.isFocused;
      if (!this.isClearable() || !ClearIndicator || isDisabled || !this.hasValue() || isLoading) {
        return null;
      }
      var innerProps = {
        onMouseDown: this.onClearIndicatorMouseDown,
        onTouchEnd: this.onClearIndicatorTouchEnd,
        'aria-hidden': 'true'
      };
      return /*#__PURE__*/reactExports.createElement(ClearIndicator, _extends({}, commonProps, {
        innerProps: innerProps,
        isFocused: isFocused
      }));
    }
  }, {
    key: "renderLoadingIndicator",
    value: function renderLoadingIndicator() {
      var _this$getComponents4 = this.getComponents(),
        LoadingIndicator = _this$getComponents4.LoadingIndicator;
      var commonProps = this.commonProps;
      var _this$props11 = this.props,
        isDisabled = _this$props11.isDisabled,
        isLoading = _this$props11.isLoading;
      var isFocused = this.state.isFocused;
      if (!LoadingIndicator || !isLoading) return null;
      var innerProps = {
        'aria-hidden': 'true'
      };
      return /*#__PURE__*/reactExports.createElement(LoadingIndicator, _extends({}, commonProps, {
        innerProps: innerProps,
        isDisabled: isDisabled,
        isFocused: isFocused
      }));
    }
  }, {
    key: "renderIndicatorSeparator",
    value: function renderIndicatorSeparator() {
      var _this$getComponents5 = this.getComponents(),
        DropdownIndicator = _this$getComponents5.DropdownIndicator,
        IndicatorSeparator = _this$getComponents5.IndicatorSeparator;

      // separator doesn't make sense without the dropdown indicator
      if (!DropdownIndicator || !IndicatorSeparator) return null;
      var commonProps = this.commonProps;
      var isDisabled = this.props.isDisabled;
      var isFocused = this.state.isFocused;
      return /*#__PURE__*/reactExports.createElement(IndicatorSeparator, _extends({}, commonProps, {
        isDisabled: isDisabled,
        isFocused: isFocused
      }));
    }
  }, {
    key: "renderDropdownIndicator",
    value: function renderDropdownIndicator() {
      var _this$getComponents6 = this.getComponents(),
        DropdownIndicator = _this$getComponents6.DropdownIndicator;
      if (!DropdownIndicator) return null;
      var commonProps = this.commonProps;
      var isDisabled = this.props.isDisabled;
      var isFocused = this.state.isFocused;
      var innerProps = {
        onMouseDown: this.onDropdownIndicatorMouseDown,
        onTouchEnd: this.onDropdownIndicatorTouchEnd,
        'aria-hidden': 'true'
      };
      return /*#__PURE__*/reactExports.createElement(DropdownIndicator, _extends({}, commonProps, {
        innerProps: innerProps,
        isDisabled: isDisabled,
        isFocused: isFocused
      }));
    }
  }, {
    key: "renderMenu",
    value: function renderMenu() {
      var _this4 = this;
      var _this$getComponents7 = this.getComponents(),
        Group = _this$getComponents7.Group,
        GroupHeading = _this$getComponents7.GroupHeading,
        Menu = _this$getComponents7.Menu,
        MenuList = _this$getComponents7.MenuList,
        MenuPortal = _this$getComponents7.MenuPortal,
        LoadingMessage = _this$getComponents7.LoadingMessage,
        NoOptionsMessage = _this$getComponents7.NoOptionsMessage,
        Option = _this$getComponents7.Option;
      var commonProps = this.commonProps;
      var focusedOption = this.state.focusedOption;
      var _this$props12 = this.props,
        captureMenuScroll = _this$props12.captureMenuScroll,
        inputValue = _this$props12.inputValue,
        isLoading = _this$props12.isLoading,
        loadingMessage = _this$props12.loadingMessage,
        minMenuHeight = _this$props12.minMenuHeight,
        maxMenuHeight = _this$props12.maxMenuHeight,
        menuIsOpen = _this$props12.menuIsOpen,
        menuPlacement = _this$props12.menuPlacement,
        menuPosition = _this$props12.menuPosition,
        menuPortalTarget = _this$props12.menuPortalTarget,
        menuShouldBlockScroll = _this$props12.menuShouldBlockScroll,
        menuShouldScrollIntoView = _this$props12.menuShouldScrollIntoView,
        noOptionsMessage = _this$props12.noOptionsMessage,
        onMenuScrollToTop = _this$props12.onMenuScrollToTop,
        onMenuScrollToBottom = _this$props12.onMenuScrollToBottom;
      if (!menuIsOpen) return null;

      // TODO: Internal Option Type here
      var render = function render(props, id) {
        var type = props.type,
          data = props.data,
          isDisabled = props.isDisabled,
          isSelected = props.isSelected,
          label = props.label,
          value = props.value;
        var isFocused = focusedOption === data;
        var onHover = isDisabled ? undefined : function () {
          return _this4.onOptionHover(data);
        };
        var onSelect = isDisabled ? undefined : function () {
          return _this4.selectOption(data);
        };
        var optionId = "".concat(_this4.getElementId('option'), "-").concat(id);
        var innerProps = {
          id: optionId,
          onClick: onSelect,
          onMouseMove: onHover,
          onMouseOver: onHover,
          tabIndex: -1,
          role: 'option',
          'aria-selected': _this4.isAppleDevice ? undefined : isSelected // is not supported on Apple devices
        };

        return /*#__PURE__*/reactExports.createElement(Option, _extends({}, commonProps, {
          innerProps: innerProps,
          data: data,
          isDisabled: isDisabled,
          isSelected: isSelected,
          key: optionId,
          label: label,
          type: type,
          value: value,
          isFocused: isFocused,
          innerRef: isFocused ? _this4.getFocusedOptionRef : undefined
        }), _this4.formatOptionLabel(props.data, 'menu'));
      };
      var menuUI;
      if (this.hasOptions()) {
        menuUI = this.getCategorizedOptions().map(function (item) {
          if (item.type === 'group') {
            var _data = item.data,
              options = item.options,
              groupIndex = item.index;
            var groupId = "".concat(_this4.getElementId('group'), "-").concat(groupIndex);
            var headingId = "".concat(groupId, "-heading");
            return /*#__PURE__*/reactExports.createElement(Group, _extends({}, commonProps, {
              key: groupId,
              data: _data,
              options: options,
              Heading: GroupHeading,
              headingProps: {
                id: headingId,
                data: item.data
              },
              label: _this4.formatGroupLabel(item.data)
            }), item.options.map(function (option) {
              return render(option, "".concat(groupIndex, "-").concat(option.index));
            }));
          } else if (item.type === 'option') {
            return render(item, "".concat(item.index));
          }
        });
      } else if (isLoading) {
        var message = loadingMessage({
          inputValue: inputValue
        });
        if (message === null) return null;
        menuUI = /*#__PURE__*/reactExports.createElement(LoadingMessage, commonProps, message);
      } else {
        var _message = noOptionsMessage({
          inputValue: inputValue
        });
        if (_message === null) return null;
        menuUI = /*#__PURE__*/reactExports.createElement(NoOptionsMessage, commonProps, _message);
      }
      var menuPlacementProps = {
        minMenuHeight: minMenuHeight,
        maxMenuHeight: maxMenuHeight,
        menuPlacement: menuPlacement,
        menuPosition: menuPosition,
        menuShouldScrollIntoView: menuShouldScrollIntoView
      };
      var menuElement = /*#__PURE__*/reactExports.createElement(MenuPlacer, _extends({}, commonProps, menuPlacementProps), function (_ref4) {
        var ref = _ref4.ref,
          _ref4$placerProps = _ref4.placerProps,
          placement = _ref4$placerProps.placement,
          maxHeight = _ref4$placerProps.maxHeight;
        return /*#__PURE__*/reactExports.createElement(Menu, _extends({}, commonProps, menuPlacementProps, {
          innerRef: ref,
          innerProps: {
            onMouseDown: _this4.onMenuMouseDown,
            onMouseMove: _this4.onMenuMouseMove
          },
          isLoading: isLoading,
          placement: placement
        }), /*#__PURE__*/reactExports.createElement(ScrollManager, {
          captureEnabled: captureMenuScroll,
          onTopArrive: onMenuScrollToTop,
          onBottomArrive: onMenuScrollToBottom,
          lockEnabled: menuShouldBlockScroll
        }, function (scrollTargetRef) {
          return /*#__PURE__*/reactExports.createElement(MenuList, _extends({}, commonProps, {
            innerRef: function innerRef(instance) {
              _this4.getMenuListRef(instance);
              scrollTargetRef(instance);
            },
            innerProps: {
              role: 'listbox',
              'aria-multiselectable': commonProps.isMulti,
              id: _this4.getElementId('listbox')
            },
            isLoading: isLoading,
            maxHeight: maxHeight,
            focusedOption: focusedOption
          }), menuUI);
        }));
      });

      // positioning behaviour is almost identical for portalled and fixed,
      // so we use the same component. the actual portalling logic is forked
      // within the component based on `menuPosition`
      return menuPortalTarget || menuPosition === 'fixed' ? /*#__PURE__*/reactExports.createElement(MenuPortal, _extends({}, commonProps, {
        appendTo: menuPortalTarget,
        controlElement: this.controlRef,
        menuPlacement: menuPlacement,
        menuPosition: menuPosition
      }), menuElement) : menuElement;
    }
  }, {
    key: "renderFormField",
    value: function renderFormField() {
      var _this5 = this;
      var _this$props13 = this.props,
        delimiter = _this$props13.delimiter,
        isDisabled = _this$props13.isDisabled,
        isMulti = _this$props13.isMulti,
        name = _this$props13.name,
        required = _this$props13.required;
      var selectValue = this.state.selectValue;
      if (required && !this.hasValue() && !isDisabled) {
        return /*#__PURE__*/reactExports.createElement(RequiredInput$1, {
          name: name,
          onFocus: this.onValueInputFocus
        });
      }
      if (!name || isDisabled) return;
      if (isMulti) {
        if (delimiter) {
          var value = selectValue.map(function (opt) {
            return _this5.getOptionValue(opt);
          }).join(delimiter);
          return /*#__PURE__*/reactExports.createElement("input", {
            name: name,
            type: "hidden",
            value: value
          });
        } else {
          var input = selectValue.length > 0 ? selectValue.map(function (opt, i) {
            return /*#__PURE__*/reactExports.createElement("input", {
              key: "i-".concat(i),
              name: name,
              type: "hidden",
              value: _this5.getOptionValue(opt)
            });
          }) : /*#__PURE__*/reactExports.createElement("input", {
            name: name,
            type: "hidden",
            value: ""
          });
          return /*#__PURE__*/reactExports.createElement("div", null, input);
        }
      } else {
        var _value = selectValue[0] ? this.getOptionValue(selectValue[0]) : '';
        return /*#__PURE__*/reactExports.createElement("input", {
          name: name,
          type: "hidden",
          value: _value
        });
      }
    }
  }, {
    key: "renderLiveRegion",
    value: function renderLiveRegion() {
      var commonProps = this.commonProps;
      var _this$state6 = this.state,
        ariaSelection = _this$state6.ariaSelection,
        focusedOption = _this$state6.focusedOption,
        focusedValue = _this$state6.focusedValue,
        isFocused = _this$state6.isFocused,
        selectValue = _this$state6.selectValue;
      var focusableOptions = this.getFocusableOptions();
      return /*#__PURE__*/reactExports.createElement(LiveRegion$1, _extends({}, commonProps, {
        id: this.getElementId('live-region'),
        ariaSelection: ariaSelection,
        focusedOption: focusedOption,
        focusedValue: focusedValue,
        isFocused: isFocused,
        selectValue: selectValue,
        focusableOptions: focusableOptions,
        isAppleDevice: this.isAppleDevice
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$getComponents8 = this.getComponents(),
        Control = _this$getComponents8.Control,
        IndicatorsContainer = _this$getComponents8.IndicatorsContainer,
        SelectContainer = _this$getComponents8.SelectContainer,
        ValueContainer = _this$getComponents8.ValueContainer;
      var _this$props14 = this.props,
        className = _this$props14.className,
        id = _this$props14.id,
        isDisabled = _this$props14.isDisabled,
        menuIsOpen = _this$props14.menuIsOpen;
      var isFocused = this.state.isFocused;
      var commonProps = this.commonProps = this.getCommonProps();
      return /*#__PURE__*/reactExports.createElement(SelectContainer, _extends({}, commonProps, {
        className: className,
        innerProps: {
          id: id,
          onKeyDown: this.onKeyDown
        },
        isDisabled: isDisabled,
        isFocused: isFocused
      }), this.renderLiveRegion(), /*#__PURE__*/reactExports.createElement(Control, _extends({}, commonProps, {
        innerRef: this.getControlRef,
        innerProps: {
          onMouseDown: this.onControlMouseDown,
          onTouchEnd: this.onControlTouchEnd
        },
        isDisabled: isDisabled,
        isFocused: isFocused,
        menuIsOpen: menuIsOpen
      }), /*#__PURE__*/reactExports.createElement(ValueContainer, _extends({}, commonProps, {
        isDisabled: isDisabled
      }), this.renderPlaceholderOrValue(), this.renderInput()), /*#__PURE__*/reactExports.createElement(IndicatorsContainer, _extends({}, commonProps, {
        isDisabled: isDisabled
      }), this.renderClearIndicator(), this.renderLoadingIndicator(), this.renderIndicatorSeparator(), this.renderDropdownIndicator())), this.renderMenu(), this.renderFormField());
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var prevProps = state.prevProps,
        clearFocusValueOnUpdate = state.clearFocusValueOnUpdate,
        inputIsHiddenAfterUpdate = state.inputIsHiddenAfterUpdate,
        ariaSelection = state.ariaSelection,
        isFocused = state.isFocused,
        prevWasFocused = state.prevWasFocused,
        instancePrefix = state.instancePrefix;
      var options = props.options,
        value = props.value,
        menuIsOpen = props.menuIsOpen,
        inputValue = props.inputValue,
        isMulti = props.isMulti;
      var selectValue = cleanValue(value);
      var newMenuOptionsState = {};
      if (prevProps && (value !== prevProps.value || options !== prevProps.options || menuIsOpen !== prevProps.menuIsOpen || inputValue !== prevProps.inputValue)) {
        var focusableOptions = menuIsOpen ? buildFocusableOptions(props, selectValue) : [];
        var focusableOptionsWithIds = menuIsOpen ? buildFocusableOptionsWithIds(buildCategorizedOptions(props, selectValue), "".concat(instancePrefix, "-option")) : [];
        var focusedValue = clearFocusValueOnUpdate ? getNextFocusedValue(state, selectValue) : null;
        var focusedOption = getNextFocusedOption(state, focusableOptions);
        var focusedOptionId = getFocusedOptionId(focusableOptionsWithIds, focusedOption);
        newMenuOptionsState = {
          selectValue: selectValue,
          focusedOption: focusedOption,
          focusedOptionId: focusedOptionId,
          focusableOptionsWithIds: focusableOptionsWithIds,
          focusedValue: focusedValue,
          clearFocusValueOnUpdate: false
        };
      }
      // some updates should toggle the state of the input visibility
      var newInputIsHiddenState = inputIsHiddenAfterUpdate != null && props !== prevProps ? {
        inputIsHidden: inputIsHiddenAfterUpdate,
        inputIsHiddenAfterUpdate: undefined
      } : {};
      var newAriaSelection = ariaSelection;
      var hasKeptFocus = isFocused && prevWasFocused;
      if (isFocused && !hasKeptFocus) {
        // If `value` or `defaultValue` props are not empty then announce them
        // when the Select is initially focused
        newAriaSelection = {
          value: valueTernary(isMulti, selectValue, selectValue[0] || null),
          options: selectValue,
          action: 'initial-input-focus'
        };
        hasKeptFocus = !prevWasFocused;
      }

      // If the 'initial-input-focus' action has been set already
      // then reset the ariaSelection to null
      if ((ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === 'initial-input-focus') {
        newAriaSelection = null;
      }
      return _objectSpread2(_objectSpread2(_objectSpread2({}, newMenuOptionsState), newInputIsHiddenState), {}, {
        prevProps: props,
        ariaSelection: newAriaSelection,
        prevWasFocused: hasKeptFocus
      });
    }
  }]);
  return Select;
}(reactExports.Component);
Select$2.defaultProps = defaultProps;

var StateManagedSelect = /*#__PURE__*/reactExports.forwardRef(function (props, ref) {
  var baseSelectProps = useStateManager(props);
  return /*#__PURE__*/reactExports.createElement(Select$2, _extends({
    ref: ref
  }, baseSelectProps));
});
var StateManagedSelect$1 = StateManagedSelect;

var selectClear = {};

var crossCircle$1 = {};

/**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::b195e70c8e4b45875c876105018c6db5>>
 * @codegenCommand yarn build:icon-glyphs
 */

Object.defineProperty(crossCircle$1, "__esModule", {
  value: true
});
crossCircle$1.default = void 0;
var _react$e = _interopRequireDefault$e(reactExports);
var _UNSAFE_baseNew$5 = _interopRequireDefault$e(require$$1);
function _interopRequireDefault$e(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * ⚠️ EXPERIMENTAL ⚠️ - New icons are in alpha - and subject to change or removal in future minor or patch releases.
 * Please reach out in #icon-contributions before using these in production.
 *
 * Icon: "CrossCircle".
 * Category: multi-purpose
 * Location: @atlaskit/icon
 * Usage guidance: Multi purpose - Known uses: clear text field, error status.
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
const CrossCircleIcon$2 = props => /*#__PURE__*/_react$e.default.createElement(_UNSAFE_baseNew$5.default, Object.assign({
  dangerouslySetGlyph: `<path fill="currentcolor" fill-rule="evenodd" d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0m4.03 5.03L9.06 8l2.97 2.97-1.06 1.06L8 9.06l-2.97 2.97-1.06-1.06L6.94 8 3.97 5.03l1.06-1.06L8 6.94l2.97-2.97z" clip-rule="evenodd"/>`
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));
CrossCircleIcon$2.displayName = 'CrossCircleIcon';
crossCircle$1.default = CrossCircleIcon$2;

Object.defineProperty(selectClear, "__esModule", {
  value: true
});
var default_1$7 = selectClear.default = void 0;
var _react$d = _interopRequireDefault$d(reactExports);
var _base$4 = require$$1$1;
var _crossCircle$1 = _interopRequireDefault$d(crossCircle$1);
function _interopRequireDefault$d(e) { return e && e.__esModule ? e : { default: e }; }
const SelectClearIcon = props => /*#__PURE__*/_react$d.default.createElement(_base$4.UNSAFE_IconFacade, Object.assign({
  dangerouslySetGlyph: `<svg width="24" height="24" viewBox="0 0 24 24" role="presentation"><g fill-rule="evenodd"><circle cx="12" cy="12" r="9" fill="currentcolor"/><path fill="inherit" d="M16.155 14.493a1.174 1.174 0 1 1-1.662 1.663L12 13.662l-2.494 2.494a1.17 1.17 0 0 1-1.662 0 1.176 1.176 0 0 1 0-1.663L10.337 12 7.844 9.507a1.176 1.176 0 0 1 1.662-1.662L12 10.338l2.493-2.493a1.174 1.174 0 1 1 1.662 1.662L13.662 12z"/></g></svg>`
}, props, {
  newIcon: _crossCircle$1.default
}));
SelectClearIcon.displayName = 'SelectClearIcon';
default_1$7 = selectClear.default = SelectClearIcon;

var cross = {};

/**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::8a2857e231b7db111b6bd9efbc440f24>>
 * @codegenCommand yarn build:icon-glyphs
 */

Object.defineProperty(cross, "__esModule", {
  value: true
});
var default_1$6 = cross.default = void 0;
var _react$c = _interopRequireDefault$c(reactExports);
var _UNSAFE_baseNew$4 = _interopRequireDefault$c(require$$1);
function _interopRequireDefault$c(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * ⚠️ EXPERIMENTAL ⚠️ - New icons are in alpha - and subject to change or removal in future minor or patch releases.
 * Please reach out in #icon-contributions before using these in production.
 *
 * Icon: "Cross".
 * Category: utility
 * Location: @atlaskit/icon
 * Usage guidance: Known uses: remove tag.
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
const CrossIcon$1 = props => /*#__PURE__*/_react$c.default.createElement(_UNSAFE_baseNew$4.default, Object.assign({
  dangerouslySetGlyph: `<path stroke="currentcolor" stroke-linejoin="round" stroke-width="1.5" d="m2 10 4-4m4-4L6 6m0 0L2 2m4 4 4 4"/>`,
  type: 'utility'
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));
CrossIcon$1.displayName = 'CrossIcon';
default_1$6 = cross.default = CrossIcon$1;

var chevronDown$1 = {};

var chevronDown = {};

Object.defineProperty(chevronDown, "__esModule", {
  value: true
});
var default_1$5 = chevronDown.default = void 0;
var _react$b = _interopRequireDefault$b(reactExports);
var _base$3 = require$$1$1;
var _chevronDown$1 = _interopRequireDefault$b(chevronDown$2);
function _interopRequireDefault$b(e) { return e && e.__esModule ? e : { default: e }; }
const ChevronDownIcon$1 = props => /*#__PURE__*/_react$b.default.createElement(_base$3.UNSAFE_IconFacade, Object.assign({
  dangerouslySetGlyph: `<svg width="24" height="24" viewBox="0 0 24 24" role="presentation"><path fill="currentcolor" fill-rule="evenodd" d="M8.292 10.293a1.01 1.01 0 0 0 0 1.419l2.939 2.965c.218.215.5.322.779.322s.556-.107.769-.322l2.93-2.955a1.01 1.01 0 0 0 0-1.419.987.987 0 0 0-1.406 0l-2.298 2.317-2.307-2.327a.99.99 0 0 0-1.406 0"/></svg>`
}, props, {
  newIcon: _chevronDown$1.default,
  iconType: "utility"
}));
ChevronDownIcon$1.displayName = 'ChevronDownIcon';
default_1$5 = chevronDown.default = ChevronDownIcon$1;

/**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::4f1feec303b173e7de0228adfc7e7782>>
 * @codegenCommand yarn build:icon-glyphs
 */

Object.defineProperty(chevronDown$1, "__esModule", {
  value: true
});
var default_1$4 = chevronDown$1.default = void 0;
var _react$a = _interopRequireDefault$a(reactExports);
var _chevronDown = _interopRequireDefault$a(chevronDown$2);
var _chevronDown2 = _interopRequireDefault$a(chevronDown);
function _interopRequireDefault$a(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * ⚠️ EXPERIMENTAL ⚠️ - New icons are in alpha - and subject to change or removal in future minor or patch releases.
 *
 * Migration Icon component for ChevronDownIcon.
 * This component is ChevronDownIcon, with `UNSAFE_fallbackIcon` set to "ChevronDownIcon".
 *
 * Category: utility
 * Location: @atlaskit/icon
 * Usage guidance: Reserved for dropdown menus, selects, accordions, and expands.
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
const ChevronDownIcon = props => /*#__PURE__*/_react$a.default.createElement(_chevronDown.default, Object.assign({
  LEGACY_fallbackIcon: _chevronDown2.default
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));
ChevronDownIcon.Name = 'ChevronDownIconMigration';
default_1$4 = chevronDown$1.default = ChevronDownIcon;

var crossCircle_SelectClear = {};

var crossCircle = {};

/**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::bc42d217064fbe3eaef70b43f6c007b6>>
 * @codegenCommand yarn build:icon-glyphs
 */

Object.defineProperty(crossCircle, "__esModule", {
  value: true
});
crossCircle.default = void 0;
var _react$9 = _interopRequireDefault$9(reactExports);
var _UNSAFE_baseNew$3 = _interopRequireDefault$9(require$$1);
function _interopRequireDefault$9(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * ⚠️ EXPERIMENTAL ⚠️ - New icons are in alpha - and subject to change or removal in future minor or patch releases.
 * Please reach out in #icon-contributions before using these in production.
 *
 * Icon: "CrossCircle".
 * Category: utility
 * Location: @atlaskit/icon
 * Usage guidance: Reserved for Helper Messages in Forms.
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
const CrossCircleIcon$1 = props => /*#__PURE__*/_react$9.default.createElement(_UNSAFE_baseNew$3.default, Object.assign({
  dangerouslySetGlyph: `<path fill="currentcolor" fill-rule="evenodd" d="M6 12A6 6 0 1 0 6 0a6 6 0 0 0 0 12m3.28-8.22L7.06 6l2.22 2.22-1.06 1.06L6 7.06 3.78 9.28 2.72 8.22 4.94 6 2.72 3.78l1.06-1.06L6 4.94l2.22-2.22z" clip-rule="evenodd"/>`,
  type: 'utility'
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));
CrossCircleIcon$1.displayName = 'CrossCircleIcon';
crossCircle.default = CrossCircleIcon$1;

/**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::35e97232317682a60395e2ccf8df4ad7>>
 * @codegenCommand yarn build:icon-glyphs
 */

Object.defineProperty(crossCircle_SelectClear, "__esModule", {
  value: true
});
var default_1$3 = crossCircle_SelectClear.default = void 0;
var _react$8 = _interopRequireDefault$8(reactExports);
var _crossCircle = _interopRequireDefault$8(crossCircle);
var _selectClear = _interopRequireDefault$8(selectClear);
function _interopRequireDefault$8(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * ⚠️ EXPERIMENTAL ⚠️ - New icons are in alpha - and subject to change or removal in future minor or patch releases.
 *
 * Migration Icon component for CrossCircleIcon.
 * This component is CrossCircleIcon, with `UNSAFE_fallbackIcon` set to "SelectClearIcon".
 *
 * Category: utility
 * Location: @atlaskit/icon
 * Usage guidance: Reserved for Helper Messages in Forms.
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
const CrossCircleIcon = props => /*#__PURE__*/_react$8.default.createElement(_crossCircle.default, Object.assign({
  LEGACY_fallbackIcon: _selectClear.default
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));
CrossCircleIcon.Name = 'CrossCircleIconMigration';
default_1$3 = crossCircle_SelectClear.default = CrossCircleIcon;

function ownKeys$4(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$4(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var iconContainerStyles$1 = xcss({
  all: 'unset',
  outline: 'revert',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  padding: 'space.025'
});
var dropdownWrapperStyles = xcss({
  padding: 'space.075'
});
var ClearIndicator = function ClearIndicator(props) {
  return jsx(components.ClearIndicator, _objectSpread$4(_objectSpread$4({}, props), {}, {
    innerProps: _objectSpread$4(_objectSpread$4({}, props.innerProps), {}, {
      'aria-hidden': 'false'
    })
  }), jsx(Pressable, {
    xcss: iconContainerStyles$1,
    tabIndex: -1
  }, jsx(default_1$3, {
    label: "clear",
    color: "currentColor",
    LEGACY_size: "small",
    LEGACY_margin: "var(--ds-space-negative-025, -0.125rem)"
  })));
};
var DropdownIndicator = function DropdownIndicator(props) {
  return (
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    jsx(components.DropdownIndicator, props, jsx(Inline, {
      as: "span",
      xcss: dropdownWrapperStyles
    }, jsx(default_1$4, {
      color: "currentColor",
      label: "open",
      LEGACY_margin: "var(--ds-space-negative-075, -0.375rem)"
    })))
  );
};
var LoadingIndicator = function LoadingIndicator(props) {
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  var loadingStyles = css$2(props.getStyles('loadingIndicator', props));
  return (
    // This *must* be constructed this way because this is being consumed by
    // `react-select` and we don't control what it wants.
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    jsx("div", _extends({
      css: loadingStyles
    }, props.innerProps), jsx(Spinner, {
      size: "small"
    }))
  );
};

/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var disabledStyles = css$2({
  display: 'none'
});
var enabledStyles = css$2({
  display: 'inherit'
});
var iconWrapperStyles = xcss({
  padding: 'space.025'
});

/**
 * __Multi value remove__
 *
 * The icon used to remove individual selections from a multi-select.
 *
 */
var MultiValueRemove = function MultiValueRemove(props) {
  var isDisabled = props.selectProps.isDisabled;
  var renderIcon = function renderIcon() {
    // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
    if (fg('platform-component-visual-refresh')) {
      return jsx(default_1$6, {
        label: "Clear",
        color: "currentColor"
      });
    }

    // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
    if (fg('platform-visual-refresh-icons-legacy-facade')) {
      return jsx(Inline, {
        xcss: iconWrapperStyles
      }, jsx(default_1$6, {
        label: "Clear",
        color: "currentColor"
      }));
    }
    return (
      // eslint-disable-next-line @atlaskit/design-system/no-legacy-icons
      jsx(default_1$7, {
        label: "Clear",
        primaryColor: "transparent",
        size: "small",
        secondaryColor: "inherit"
      })
    );
  };
  return (
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    jsx(components.MultiValueRemove, props, jsx("div", {
      css: isDisabled ? disabledStyles : enabledStyles,
      "data-testid": isDisabled ? 'hide-clear-icon' : 'show-clear-icon'
    }, renderIcon()))
  );
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var IndicatorSeparator = null;

function Input(props) {
  var ariaDescribedByAttribute;
  var passed_describedby = props.selectProps['aria-describedby'];
  if (props['aria-describedby'] && passed_describedby) {
    ariaDescribedByAttribute = props['aria-describedby'] + ' ' + passed_describedby;
  } else {
    ariaDescribedByAttribute = props['aria-describedby'] || passed_describedby;
  }
  return /*#__PURE__*/React.createElement(components.Input, _extends({}, props, {
    "aria-describedby": ariaDescribedByAttribute
  }));
}

/**
 * __No options message__
 */
var NoOptionsMessage = function NoOptionsMessage(props) {
  return /*#__PURE__*/React.createElement(components.NoOptionsMessage, props, /*#__PURE__*/React.createElement("span", {
    id: "no-options",
    role: "alert"
  }, /*#__PURE__*/React.createElement(Text, {
    color: "color.text.subtle"
  }, props.children || "No options")));
};

function ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function baseStyles(validationState) {
  var isCompact = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var appearance = arguments.length > 2 ? arguments[2] : undefined;
  return {
    container: function container(css, _ref) {
      var isDisabled = _ref.isDisabled;
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
        // react-select disables pointer events when isDisabled is true.
        // We override this and make the inner container turn it off instead.
        pointerEvents: 'all',
        cursor: isDisabled ? 'not-allowed' : css.cursor
      });
    },
    input: function input(css) {
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        color: "var(--ds-text, hsl(0, 0%, 20%))"
      });
    },
    control: function control(css, _ref2) {
      var isFocused = _ref2.isFocused,
        isDisabled = _ref2.isDisabled;
      var borderColor = isFocused ? "var(--ds-border-focused, ".concat(B100, ")") : "var(--ds-border-input, ".concat(N100, ")");
      var backgroundColor = isFocused ? "var(--ds-background-input-pressed, ".concat(N0, ")") : "var(--ds-background-input, ".concat(N20, ")");
      var backgroundColorHover = isFocused ? "var(--ds-background-input-pressed, ".concat(N0, ")") : "var(--ds-background-input-hovered, ".concat(N30, ")");
      if (isDisabled) {
        backgroundColor = "var(--ds-background-disabled, ".concat(N20, ")");
        borderColor = "var(--ds-background-disabled, ".concat(N20, ")");
      }
      if (validationState === 'error') {
        borderColor = "var(--ds-border-danger, ".concat(R400, ")");
      }
      if (validationState === 'success') {
        borderColor = "var(--ds-border-success, ".concat(G400, ")");
      }
      var borderColorHover = isFocused ? "var(--ds-border-focused, ".concat(B100, ")") : "var(--ds-border-input, ".concat(N100, ")");
      if (validationState === 'error') {
        borderColorHover = "var(--ds-border-danger, ".concat(R400, ")");
      }
      if (validationState === 'success') {
        borderColorHover = "var(--ds-border-success, ".concat(G400, ")");
      }
      var transitionDuration = '200ms';
      if (appearance === 'subtle') {
        borderColor = isFocused ? "var(--ds-border-focused, ".concat(B100, ")") : 'transparent';
        backgroundColor = isFocused ? "var(--ds-surface, ".concat(N0, ")") : 'transparent';
        backgroundColorHover = isFocused ? "var(--ds-background-input-pressed, ".concat(N0, ")") : "var(--ds-background-input-hovered, ".concat(N30, ")");
      }
      if (appearance === 'none') {
        borderColor = 'transparent';
        backgroundColor = 'transparent';
        backgroundColorHover = 'transparent';
        borderColorHover = 'transparent';
      }
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        // Turn pointer events off when disabled - this makes it so hover etc don't work.
        pointerEvents: isDisabled ? 'none' : undefined,
        backgroundColor: backgroundColor,
        borderColor: borderColor,
        borderStyle: 'solid',
        borderRadius: "var(--ds-border-radius-100, 3px)",
        borderWidth: "var(--ds-border-width, 1px)",
        boxShadow: validationState === 'error' ? "inset 0 0 0 ".concat("var(--ds-border-width, 1px)", " ", borderColor) : 'none',
        '&:focus-within': {
          boxShadow: "inset 0 0 0 ".concat("var(--ds-border-width, 1px)", " ", borderColor)
        },
        minHeight: isCompact ? 32 : 40,
        padding: 0,
        transition: "background-color ".concat(transitionDuration, " ease-in-out,\n        border-color ").concat(transitionDuration, " ease-in-out"),
        '::-webkit-scrollbar': {
          height: 8,
          width: 8
        },
        '::-webkit-scrollbar-corner': {
          display: 'none'
        },
        ':hover': {
          '::-webkit-scrollbar-thumb': {
            // scrollbars occur only if the user passes in a custom component with overflow: scroll
            backgroundColor: 'rgba(0,0,0,0.2)'
          },
          cursor: 'pointer',
          backgroundColor: backgroundColorHover,
          borderColor: borderColorHover
        },
        '::-webkit-scrollbar-thumb:hover': {
          backgroundColor: 'rgba(0,0,0,0.4)'
        }
      });
    },
    valueContainer: function valueContainer(css) {
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        paddingLeft: "var(--ds-space-075, 6px)",
        paddingRight: "var(--ds-space-075, 6px)",
        paddingBottom: isCompact ? 0 : 2,
        paddingTop: isCompact ? 0 : 2
      });
    },
    clearIndicator: function clearIndicator(css) {
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        color: "var(--ds-text-subtlest, ".concat(N70, ")"),
        paddingLeft: "var(--ds-space-025, 2px)",
        paddingRight: "var(--ds-space-025, 2px)",
        paddingBottom: isCompact ? 0 : 6,
        paddingTop: isCompact ? 0 : 6,
        ':hover': {
          color: "var(--ds-text-subtle, ".concat(N500, ")")
        }
      });
    },
    loadingIndicator: function loadingIndicator(css) {
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        paddingBottom: isCompact ? 0 : 6,
        paddingTop: isCompact ? 0 : 6
      });
    },
    dropdownIndicator: function dropdownIndicator(css, _ref3) {
      var isDisabled = _ref3.isDisabled;
      var color = "var(--ds-text-subtle, ".concat(N500, ")");
      if (isDisabled) {
        color = "var(--ds-text-disabled, ".concat(N70, ")");
      }
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        color: color,
        paddingLeft: "var(--ds-space-025, 2px)",
        paddingRight: "var(--ds-space-025, 2px)",
        paddingBottom: isCompact ? 0 : 6,
        paddingTop: isCompact ? 0 : 6,
        ':hover': {
          color: "var(--ds-text-subtle, ".concat(N200, ")")
        }
      });
    },
    indicatorsContainer: function indicatorsContainer(css) {
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        paddingRight: "var(--ds-space-050, 4px)"
      });
    },
    option: function option(css, _ref4) {
      var isFocused = _ref4.isFocused,
        isSelected = _ref4.isSelected,
        isDisabled = _ref4.isDisabled;
      var color = "var(--ds-text, ".concat(N800, ")");
      if (isDisabled) {
        color = "var(--ds-text-disabled, ".concat(N70, ")");
      } else if (isSelected) {
        color = "var(--ds-text-selected, ".concat(B400, ")");
      }
      var boxShadow;
      var backgroundColor;
      if (isDisabled) {
        backgroundColor = undefined;
      } else if (isSelected && isFocused) {
        backgroundColor = "var(--ds-background-selected-hovered, ".concat(B50, ")");
      } else if (isSelected) {
        backgroundColor = "var(--ds-background-selected, ".concat(B50, ")");
      } else if (isFocused) {
        backgroundColor = "var(--ds-background-neutral-subtle-hovered, ".concat(N20, ")");
      }
      if (!isDisabled && (isFocused || isSelected)) {
        boxShadow = "inset 2px 0px 0px ".concat("var(--ds-border-selected, ".concat(B400, ")"));
      }
      var cursor = isDisabled ? 'not-allowed' : css.cursor;
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        padding: '6px 12px',
        backgroundColor: backgroundColor,
        color: color,
        cursor: cursor,
        boxShadow: boxShadow,
        ':active': {
          backgroundColor: !isDisabled ? isSelected ? "var(--ds-background-selected-pressed, ".concat(N20, ")") : "var(--ds-background-neutral-subtle-pressed, ".concat(N30, ")") : undefined
        },
        '@media screen and (-ms-high-contrast: active)': {
          borderLeft: !isDisabled && (isFocused || isSelected) ? '2px solid transparent' : ''
        }
      });
    },
    placeholder: function placeholder(css, _ref5) {
      var isDisabled = _ref5.isDisabled;
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        color: isDisabled ? "var(--ds-text-disabled, ".concat(N300, ")") : "var(--ds-text-subtlest, ".concat(N200, ")")
      });
    },
    singleValue: function singleValue(css, _ref6) {
      var isDisabled = _ref6.isDisabled;
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        color: isDisabled ? "var(--ds-text-disabled, ".concat(N70, ")") : "var(--ds-text, ".concat(N800, ")")
      });
    },
    menu: function menu(css) {
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        backgroundColor: "var(--ds-surface-overlay, white)",
        boxShadow: "var(--ds-shadow-overlay, 0 0 0 1px hsl(0deg 0% 0% / 10%), 0 4px 11px hsl(0deg 0% 0% / 10%))"
      });
    },
    menuList: function menuList(css) {
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        paddingTop: "var(--ds-space-100, 8px)",
        paddingBottom: "var(--ds-space-100, 8px)"
      });
    },
    multiValue: function multiValue(css, _ref7) {
      var isDisabled = _ref7.isDisabled,
        isFocused = _ref7.isFocused;
      var backgroundColor;
      var color;
      if (isDisabled) {
        // Use the basic neutral background so it is slightly separate from the
        // field's background
        backgroundColor = "var(--ds-background-neutral, ".concat(N40, ")");
        color = "var(--ds-text-disabled, ".concat(N70, ")");
      } else if (isFocused) {
        backgroundColor = "var(--ds-background-selected, ".concat(N40, ")");
        color = "var(--ds-text-selected, hsl(0, 0%, 20%))";
      } else {
        backgroundColor = fg('platform-component-visual-refresh') ? "var(--ds-background-neutral-subtle-hovered, #091E420F)" : "var(--ds-background-neutral, ".concat(N40, ")");
        color = "var(--ds-text, hsl(0, 0%, 20%))";
      }
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        borderRadius: "var(--ds-border-radius-050, 2px)",
        backgroundColor: backgroundColor,
        boxShadow: isFocused ? "0 0 0 2px ".concat("var(--ds-surface, transparent)", ", 0 0 0 4px ", "var(--ds-border-focused, transparent)") : 'none',
        maxWidth: '100%',
        '@media screen and (-ms-high-contrast: active)': {
          border: isFocused ? '1px solid transparent' : 'none'
        },
        color: color
      }, fg('platform-component-visual-refresh') && {
        borderRadius: "var(--ds-border-radius-100, 4px)",
        // Hardcode this color for visual refresh as there is no token color yet
        borderColor: '#B7B9BE',
        borderWidth: "var(--ds-border-width, 1px)",
        borderStyle: 'solid',
        backgroundColor: "var(--ds-background-input, #FFFFFF)"
      });
    },
    multiValueLabel: function multiValueLabel(css, _ref8) {
      var isDisabled = _ref8.isDisabled;
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
        padding: "var(--ds-space-025, 2px)",
        color: isDisabled ? "var(--ds-text-disabled, ".concat(N70, ")") : 'inherit',
        paddingRight: "var(--ds-space-025, 2px)"
      }, fg('platform-component-visual-refresh') && {
        font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
        paddingTop: 0,
        paddingBottom: 0,
        paddingLeft: "var(--ds-space-050, 4px)"
      });
    },
    multiValueRemove: function multiValueRemove(css, _ref9) {
      var isFocused = _ref9.isFocused;
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        backgroundColor: isFocused ? "var(--ds-UNSAFE-transparent, ".concat(R75, ")") : undefined,
        fill: isFocused ? "var(--ds-text-selected, #000)" : "var(--ds-text, #000)",
        paddingLeft: "var(--ds-space-025, 2px)",
        paddingRight: "var(--ds-space-025, 2px)",
        borderRadius: '0px 2px 2px 0px',
        // DSP-6470 we should style like Tag once we have the :has selector
        ':hover': {
          backgroundColor: "var(--ds-background-danger-hovered, ".concat(R75, ")"),
          fill: "var(--ds-text-danger, #000)"
        },
        ':active': {
          backgroundColor: "var(--ds-background-danger-pressed, ".concat(R75, ")"),
          fill: "var(--ds-text-danger, #000)"
        }
      }, fg('platform-component-visual-refresh') && {
        backgroundColor: "var(--ds-background-neutral-subtle, #00000000)",
        border: 'none',
        alignItems: 'center',
        justifyContent: 'center',
        alignSelf: 'center',
        appearance: 'none',
        borderRadius: "var(--ds-border-radius, 4px)",
        color: "var(--ds-text, #172B4D)",
        padding: "var(--ds-space-025, 2px)",
        marginRight: "var(--ds-space-025, 2px)",
        ':focus-visible': {
          outlineOffset: "var(--ds-space-negative-025, -2px)"
        },
        ':hover': {
          backgroundColor: "var(--ds-background-neutral-subtle-hovered, #091E420F)"
        },
        ':active': {
          backgroundColor: "var(--ds-background-neutral-subtle-pressed, #091E4224)"
        }
      });
    },
    groupHeading: function groupHeading(css) {
      return _objectSpread$3(_objectSpread$3({}, css), {}, {
        font: "var(--ds-font-body-small, normal 400 11px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
        color: "var(--ds-text-subtle, ".concat(N200, ")")
      }, fg('platform_design_system_team_select_typography') && {
        fontWeight: "var(--ds-font-weight-bold, 700)".concat(" !important"),
        textTransform: 'none'
      });
    }
  };
}

// Used for overwriting ariaLiveMessages builtin onFocus method.
// Returns custom built string while focusing each group option. This string is used for screen reader announcement.
function onFocus(onFocusProps, defaultOptions) {
  var _groupData$options$fi;
  var focused = onFocusProps.focused;
  var isOptionFocused = function isOptionFocused(option) {
    return option.label === focused.label;
  };
  var groupData = defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.find(function (option) {
    var _option$options;
    return (_option$options = option.options) === null || _option$options === void 0 ? void 0 : _option$options.some(isOptionFocused);
  });
  var groupOptionIndex = (_groupData$options$fi = groupData === null || groupData === void 0 ? void 0 : groupData.options.findIndex(isOptionFocused)) !== null && _groupData$options$fi !== void 0 ? _groupData$options$fi : 0;
  return "Option ".concat(focused.label, ", ").concat(groupData === null || groupData === void 0 ? void 0 : groupData.label, " group, item ").concat(groupOptionIndex + 1, " out of ").concat(groupData === null || groupData === void 0 ? void 0 : groupData.options.length, ". All in all ");
}

// Helper function which identifies if options are grouped.
var isOptionsGrouped = function isOptionsGrouped(arr) {
  return arr === null || arr === void 0 ? void 0 : arr.every(function (obj) {
    return obj.hasOwnProperty('options');
  });
};

var _excluded = ["appearance", "ariaLiveMessages", "components", "isInvalid", "onClickPreventDefault", "spacing", "styles", "tabSelectsValue", "validationState"];
function ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function createSelect(WrappedComponent) {
  var AtlaskitSelect = /*#__PURE__*/reactExports.forwardRef(function AtlaskitSelect(props, forwardedRef) {
    var appearance = props.appearance,
      ariaLiveMessages = props.ariaLiveMessages,
      componentsProp = props.components,
      isInvalid = props.isInvalid,
      _props$onClickPrevent = props.onClickPreventDefault,
      onClickPreventDefault = _props$onClickPrevent === void 0 ? true : _props$onClickPrevent,
      _props$spacing = props.spacing,
      spacing = _props$spacing === void 0 ? 'default' : _props$spacing,
      _props$styles = props.styles,
      styles = _props$styles === void 0 ? {} : _props$styles,
      _props$tabSelectsValu = props.tabSelectsValue,
      tabSelectsValue = _props$tabSelectsValu === void 0 ? false : _props$tabSelectsValu,
      _props$validationStat = props.validationState,
      validationState = _props$validationStat === void 0 ? 'default' : _props$validationStat,
      restProps = _objectWithoutProperties(props, _excluded);
    var internalSelectRef = reactExports.useRef(null);
    var components = reactExports.useMemo(function () {
      return _objectSpread$2({
        ClearIndicator: ClearIndicator,
        DropdownIndicator: DropdownIndicator,
        LoadingIndicator: LoadingIndicator,
        MultiValueRemove: MultiValueRemove,
        IndicatorSeparator: IndicatorSeparator,
        Input: Input,
        NoOptionsMessage: NoOptionsMessage
      }, componentsProp);
    }, [componentsProp]);
    var descriptionId = props['aria-describedby'];
    var isSearchable = props.isSearchable;
    reactExports.useEffect(function () {
      if (!isSearchable && descriptionId) {
        var _internalSelectRef$cu;
        // when isSearchable is false, react-select will create its own dummy input instead of using ours,
        // so we need to manually add the additional aria-describedby using ref.
        var input = (_internalSelectRef$cu = internalSelectRef.current) === null || _internalSelectRef$cu === void 0 ? void 0 : _internalSelectRef$cu.inputRef;
        var ariaDescribedby = input === null || input === void 0 ? void 0 : input.getAttribute('aria-describedby');
        if (!(ariaDescribedby !== null && ariaDescribedby !== void 0 && ariaDescribedby.includes(descriptionId))) {
          input === null || input === void 0 || input.setAttribute('aria-describedby', "".concat(ariaDescribedby, " ").concat(descriptionId));
        }
      }
    }, [descriptionId, isSearchable]);
    var isCompact = spacing === 'compact';

    /**
     * The following `useImperativeHandle` hook exists for the sake of backwards compatibility.
     * This component used to be a class component which set the value of the `ref` prop to object with the properties and value as below.
     * This has lead to slightly odd usage of refs with this component, e.g. `myRef.current.select.select.controlRef` instead of just `myRef.current.select.controlRef`
     * In the next major release, this should removed and the ref should be passed directly to the wrapped component (given users have updated usage)
     * More info https://stash.atlassian.com/projects/ATLASSIAN/repos/atlassian-frontend-monorepo/pull-requests/88021/overview
     */
    reactExports.useImperativeHandle(forwardedRef, function () {
      return {
        select: internalSelectRef.current,
        focus: function focus() {
          var _internalSelectRef$cu2;
          return (_internalSelectRef$cu2 = internalSelectRef.current) === null || _internalSelectRef$cu2 === void 0 ? void 0 : _internalSelectRef$cu2.focus();
        },
        blur: function blur() {
          var _internalSelectRef$cu3;
          return (_internalSelectRef$cu3 = internalSelectRef.current) === null || _internalSelectRef$cu3 === void 0 ? void 0 : _internalSelectRef$cu3.blur();
        }
      };
    }, []);
    return /*#__PURE__*/React.createElement(WrappedComponent, _extends({
      ref: internalSelectRef,
      "aria-live": "assertive",
      ariaLiveMessages: isOptionsGrouped(props.options) ? _objectSpread$2({
        onFocus: function onFocus$1(data) {
          return onFocus(data, props.options);
        }
      }, ariaLiveMessages) : _objectSpread$2({}, ariaLiveMessages),
      tabSelectsValue: tabSelectsValue,
      onClickPreventDefault: onClickPreventDefault
    }, restProps, {
      components: components
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      ,
      styles: mergeStyles(
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      baseStyles(
      // This will cover both props for invalid state while giving priority to isInvalid. When cleaning up validationState, we can just keep the inner condition.
      typeof isInvalid !== 'undefined' ? isInvalid ? 'error' : 'default' : validationState, isCompact, appearance || 'default'), styles)
    }));
  });
  AtlaskitSelect.displayName = 'AtlaskitSelect';
  return AtlaskitSelect;
}

var packageName = "@atlaskit/select";
var packageVersion = "17.19.3";
var SelectWithoutAnalytics = createSelect(StateManagedSelect$1);
var createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');
var Select$1 = withAnalyticsContext({
  componentName: 'select',
  packageName: packageName,
  packageVersion: packageVersion
})(withAnalyticsEvents({
  onChange: createAndFireEventOnAtlaskit({
    action: 'changed',
    actionSubject: 'option',
    attributes: {
      componentName: 'select',
      packageName: packageName,
      packageVersion: packageVersion
    }
  })
})(SelectWithoutAnalytics));

const RequiredAsterisk = () => {
    return (React.createElement("span", { className: "text-rose-600", "aria-hidden": "true", title: "required" }, "*"));
};
const Label = ({ children, htmlFor, isRequired = false, }) => {
    return (React.createElement(Label$1, { htmlFor: htmlFor },
        children,
        " ",
        isRequired && React.createElement(RequiredAsterisk, null)));
};

const Select = ({ name, control, label, jiraFields, onSave }) => {
    const id = reactExports.useId();
    return (React.createElement(Controller, { name: name, control: control, render: ({ field }) => {
            const selectedOption = jiraFields.find((option) => {
                return option.value === field.value;
            });
            return (React.createElement("div", { className: "mt-2" },
                React.createElement(Label, { htmlFor: id, isRequired: true }, label),
                React.createElement(Select$1, { id: id, name: field.name, value: selectedOption, options: jiraFields, onBlur: field.onBlur, onChange: (option) => {
                        if (!option?.value) {
                            return;
                        }
                        field.onChange(option?.value);
                        onSave({ name, value: option?.value });
                    } })));
        } }));
};

/**
 * An empty function which does nothing.
 */
// eslint-disable-next-line @repo/internal/react/use-noop
function noop$1() {}

var _React$useId;

// Type copied from https://github.com/thearnica/react-uid/blob/0f507fbbdb1ab84acf477ec32698afe3d2191e49/src/hooks.ts#L12
// Copied rather than inferred to make the type transparent

// @ts-ignore - useId is not accessible in React 16
var react18UseId = (_React$useId = React.useId) !== null && _React$useId !== void 0 ? _React$useId : undefined;

/**
 * Returns a unique id
 *
 * React 18 SSR and Concurrent modes are supported when the `platform.design-system-team.react-18-use-id_mn8q4` flag is enabled.
 * This is a interop function that supports React 16 and 18.
 *
 * If migrating from `useUID` in the `react-uid` package, then `useId` is a direct replacement.
 *
 * @return string
 * @see {@link useIdSeed}
 * @see https://github.com/thearnica/react-uid#hooks-168
 * @example
 * const id = useUID();
 * id == 1; // for example
 *
 * Parts of the above are from: https://github.com/thearnica/react-uid/blob/0f507fbbdb1ab84acf477ec32698afe3d2191e49/src/hooks.ts#L41C1-L49C4
 */
function useId() {
  if (react18UseId && fg('platform.design-system-team.react-18-use-id_mn8q4')) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return react18UseId();
  }

  // eslint-disable-next-line react-hooks/rules-of-hooks
  return useUID();
}

var checkMark_EditorDone = {};

var checkMark$1 = {};

/**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::d905e7dc6c2480f22f2a9081c36a5712>>
 * @codegenCommand yarn build:icon-glyphs
 */

Object.defineProperty(checkMark$1, "__esModule", {
  value: true
});
checkMark$1.default = void 0;
var _react$7 = _interopRequireDefault$7(reactExports);
var _UNSAFE_baseNew$2 = _interopRequireDefault$7(require$$1);
function _interopRequireDefault$7(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * ⚠️ EXPERIMENTAL ⚠️ - New icons are in alpha - and subject to change or removal in future minor or patch releases.
 * Please reach out in #icon-contributions before using these in production.
 *
 * Icon: "CheckMark".
 * Category: utility
 * Location: @atlaskit/icon
 * Usage guidance: 📦 @atlaskit/icon/utility/check-mark
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
const CheckMarkIcon$2 = props => /*#__PURE__*/_react$7.default.createElement(_UNSAFE_baseNew$2.default, Object.assign({
  dangerouslySetGlyph: `<path stroke="currentcolor" stroke-linejoin="round" stroke-width="1.5" d="m1.5 6 2.75 3.5 6.25-7"/>`,
  type: 'utility'
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));
CheckMarkIcon$2.displayName = 'CheckMarkIcon';
checkMark$1.default = CheckMarkIcon$2;

var done = {};

var checkMark = {};

/**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::209317c625743d387bf26edea0c296a9>>
 * @codegenCommand yarn build:icon-glyphs
 */

Object.defineProperty(checkMark, "__esModule", {
  value: true
});
checkMark.default = void 0;
var _react$6 = _interopRequireDefault$6(reactExports);
var _UNSAFE_baseNew$1 = _interopRequireDefault$6(require$$1);
function _interopRequireDefault$6(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * ⚠️ EXPERIMENTAL ⚠️ - New icons are in alpha - and subject to change or removal in future minor or patch releases.
 * Please reach out in #icon-contributions before using these in production.
 *
 * Icon: "CheckMark".
 * Category: multi-purpose
 * Location: @atlaskit/icon
 * Usage guidance: Multi purpose - Known uses: table cells, checkboxes.
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
const CheckMarkIcon$1 = props => /*#__PURE__*/_react$6.default.createElement(_UNSAFE_baseNew$1.default, Object.assign({
  dangerouslySetGlyph: `<path stroke="currentcolor" stroke-linejoin="round" stroke-width="1.5" d="m1.5 8 4.25 5.25 8.75-10.5"/>`
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));
CheckMarkIcon$1.displayName = 'CheckMarkIcon';
checkMark.default = CheckMarkIcon$1;

Object.defineProperty(done, "__esModule", {
  value: true
});
done.default = void 0;
var _react$5 = _interopRequireDefault$5(reactExports);
var _base$2 = require$$1$1;
var _checkMark$1 = _interopRequireDefault$5(checkMark);
function _interopRequireDefault$5(e) { return e && e.__esModule ? e : { default: e }; }
const EditorDoneIcon = props => /*#__PURE__*/_react$5.default.createElement(_base$2.UNSAFE_IconFacade, Object.assign({
  dangerouslySetGlyph: `<svg width="24" height="24" viewBox="0 0 24 24" role="presentation"><path fill="currentcolor" d="M7.356 10.942a.497.497 0 0 0-.713 0l-.7.701a.5.5 0 0 0-.003.71l3.706 3.707a.5.5 0 0 0 .705.003l7.712-7.712a.493.493 0 0 0-.006-.708l-.7-.7a.504.504 0 0 0-.714 0l-6.286 6.286a.506.506 0 0 1-.713 0z"/></svg>`
}, props, {
  newIcon: _checkMark$1.default
}));
EditorDoneIcon.displayName = 'EditorDoneIcon';
done.default = EditorDoneIcon;

/**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::116024720ac5bfd6b5d0b476c677b799>>
 * @codegenCommand yarn build:icon-glyphs
 */

Object.defineProperty(checkMark_EditorDone, "__esModule", {
  value: true
});
var default_1$2 = checkMark_EditorDone.default = void 0;
var _react$4 = _interopRequireDefault$4(reactExports);
var _checkMark = _interopRequireDefault$4(checkMark$1);
var _done = _interopRequireDefault$4(done);
function _interopRequireDefault$4(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * ⚠️ EXPERIMENTAL ⚠️ - New icons are in alpha - and subject to change or removal in future minor or patch releases.
 *
 * Migration Icon component for CheckMarkIcon.
 * This component is CheckMarkIcon, with `UNSAFE_fallbackIcon` set to "EditorDoneIcon".
 *
 * Category: utility
 * Location: @atlaskit/icon
 * Usage guidance: 📦 @atlaskit/icon/utility/check-mark
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
const CheckMarkIcon = props => /*#__PURE__*/_react$4.default.createElement(_checkMark.default, Object.assign({
  LEGACY_fallbackIcon: _done.default
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));
CheckMarkIcon.Name = 'CheckMarkIconMigration';
default_1$2 = checkMark_EditorDone.default = CheckMarkIcon;

var cross_EditorClose = {};

var close = {};

Object.defineProperty(close, "__esModule", {
  value: true
});
close.default = void 0;
var _react$3 = _interopRequireDefault$3(reactExports);
var _base$1 = require$$1$1;
var _close$1 = _interopRequireDefault$3(close$1);
function _interopRequireDefault$3(e) { return e && e.__esModule ? e : { default: e }; }
const EditorCloseIcon = props => /*#__PURE__*/_react$3.default.createElement(_base$1.UNSAFE_IconFacade, Object.assign({
  dangerouslySetGlyph: `<svg width="24" height="24" viewBox="0 0 24 24" role="presentation"><path fill="currentcolor" fill-rule="evenodd" d="m15.185 7.4-3.184 3.185-3.186-3.186a.507.507 0 0 0-.712.003l-.7.701a.496.496 0 0 0-.004.712l3.185 3.184L7.4 15.185a.507.507 0 0 0 .004.712l.7.7c.206.207.516.2.712.004l3.186-3.185 3.184 3.185a.507.507 0 0 0 .712-.004l.701-.7a.496.496 0 0 0 .003-.712l-3.186-3.186 3.186-3.184a.507.507 0 0 0-.003-.712l-.7-.7a.5.5 0 0 0-.36-.153.5.5 0 0 0-.353.15"/></svg>`
}, props, {
  newIcon: _close$1.default
}));
EditorCloseIcon.displayName = 'EditorCloseIcon';
close.default = EditorCloseIcon;

/**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::77b0cdbbee1b52bd7575a4eda010b0e1>>
 * @codegenCommand yarn build:icon-glyphs
 */

Object.defineProperty(cross_EditorClose, "__esModule", {
  value: true
});
var default_1$1 = cross_EditorClose.default = void 0;
var _react$2 = _interopRequireDefault$2(reactExports);
var _cross = _interopRequireDefault$2(cross);
var _close = _interopRequireDefault$2(close);
function _interopRequireDefault$2(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * ⚠️ EXPERIMENTAL ⚠️ - New icons are in alpha - and subject to change or removal in future minor or patch releases.
 *
 * Migration Icon component for CrossIcon.
 * This component is CrossIcon, with `UNSAFE_fallbackIcon` set to "EditorCloseIcon".
 *
 * Category: utility
 * Location: @atlaskit/icon
 * Usage guidance: Known uses: remove tag.
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
const CrossIcon = props => /*#__PURE__*/_react$2.default.createElement(_cross.default, Object.assign({
  LEGACY_fallbackIcon: _close.default
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));
CrossIcon.Name = 'CrossIconMigration';
default_1$1 = cross_EditorClose.default = CrossIcon;

var iconContainerStyles = xcss({
  display: 'inline-flex',
  alignItems: 'center',
  justifyContent: 'center',
  transition: 'opacity 0.2s ease',
  position: 'absolute',
  insetBlockStart: 'space.025'
});
var iconContainerRegularStyles = xcss({
  width: '16px',
  height: '16px'
});
var iconContainerLargeStyles = xcss({
  width: '20px',
  height: '20px'
});
var hiddenStyles = xcss({
  opacity: 0
});
var leftStyles = xcss({
  insetInlineStart: '3px'
});
var rightStyles = xcss({
  insetInlineEnd: '3px'
});

/**
 * __Icon container__
 *
 * Positions a toggle's check and close icons.
 */
var IconContainer = function IconContainer(_ref) {
  var children = _ref.children,
    size = _ref.size,
    isHidden = _ref.isHidden,
    position = _ref.position;
  return /*#__PURE__*/React.createElement(Box, {
    as: "span",
    xcss: [iconContainerStyles, isHidden && fg('platform-visual-refresh-icons') && hiddenStyles, size === 'regular' && iconContainerRegularStyles, size === 'large' && iconContainerLargeStyles, position === 'left' && leftStyles, position === 'right' && rightStyles]
  }, children);
};

var colorMap = {
  backgroundColorChecked: "var(--ds-background-success-bold, ".concat(G400, ")"),
  backgroundColorCheckedHover: "var(--ds-background-success-bold-hovered, ".concat(G500, ")"),
  backgroundColorCheckedDisabled: "var(--ds-background-disabled, ".concat(N20, ")"),
  backgroundColorUnchecked: "var(--ds-background-neutral-bold, ".concat(N200, ")"),
  backgroundColorUncheckedHover: "var(--ds-background-neutral-bold-hovered, ".concat(N400, ")"),
  backgroundColorUncheckedDisabled: "var(--ds-background-disabled, ".concat(N20, ")"),
  borderColorFocus: "var(--ds-border-focused, ".concat(B200, ")"),
  iconColorChecked: "var(--ds-icon-inverse, ".concat(N0, ")"),
  iconColorDisabled: "var(--ds-icon-disabled, ".concat(N70, ")"),
  iconColorUnchecked: "var(--ds-icon-inverse, ".concat(N0, ")"),
  handleBackgroundColor: "var(--ds-icon-inverse, ".concat(N0, ")"),
  handleBackgroundColorChecked: "var(--ds-icon-inverse, ".concat(N0, ")"),
  handleBackgroundColorDisabled: "var(--ds-icon-inverse, ".concat(N0, ")")
};
var getColors = function getColors() {
  return colorMap;
};

function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var globalGridSize = gridSize$2();
var dimensions = {
  regular: {
    height: globalGridSize * 2,
    width: globalGridSize * 4
  },
  large: {
    height: globalGridSize * 2 + globalGridSize / 2,
    width: globalGridSize * 5
  }
};
var getHeight = function getHeight(_ref) {
  var size = _ref.size;
  return dimensions[size].height;
};
var getWidth = function getWidth(_ref2) {
  var size = _ref2.size;
  return dimensions[size].width;
};
var borderWidth = 2;
var paddingUnitless = globalGridSize / 4;
var transition = 'transform 0.2s ease';
var getStyles = function getStyles(size) {
  var colors = getColors();

  // TODO: Use tokens and reorganize to alphasemantic ordering (DSP-11769 DSP-11770)
  /* eslint-disable @atlaskit/design-system/ensure-design-token-usage/preview,@repo/internal/styles/consistent-style-ordering */
  return css$2(_objectSpread$1(_objectSpread$1({
    boxSizing: 'content-box',
    display: 'inline-block',
    padding: borderWidth,
    margin: borderWidth,
    backgroundClip: 'content-box',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    backgroundColor: colors.backgroundColorUnchecked,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    borderRadius: "".concat(getHeight({
      size: size
    }), "px"),
    border: "".concat(borderWidth, "px solid transparent"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    height: "".concat(getHeight({
      size: size
    }), "px"),
    position: 'relative',
    transition: "".concat(transition),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    width: "".concat(getWidth({
      size: size
    }), "px"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '&[data-checked]': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      backgroundColor: colors.backgroundColorChecked,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      color: colors.iconColorChecked
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
    '&[data-disabled]:not([data-checked])': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      backgroundColor: colors.backgroundColorUncheckedDisabled
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '&[data-disabled][data-checked],&[data-disabled][data-checked]:hover': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      backgroundColor: colors.backgroundColorCheckedDisabled
    },
    '&:focus-within': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      border: "".concat(borderWidth, "px solid ").concat(colors.borderColorFocus)
    },
    '&:hover': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      backgroundColor: colors.backgroundColorUncheckedHover,
      cursor: 'pointer'
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
    '&[data-disabled]:hover,&[data-disabled][data-checked]:hover,&[data-disabled]:not([data-checked]):hover': {
      cursor: 'not-allowed'
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '&[data-checked]:hover': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      backgroundColor: colors.backgroundColorCheckedHover
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
    '&:not([data-checked]):hover': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      backgroundColor: colors.backgroundColorUncheckedHover
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
    '&[data-disabled]:not([data-checked]):hover': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      backgroundColor: colors.backgroundColorCheckedDisabled
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    color: colors.iconColorUnchecked,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '&[data-disabled], &[data-disabled][data-checked], &[data-disabled][data-checked]:hover': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      color: colors.iconColorDisabled
    },
    // the input element underneath
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    'input[type="checkbox"]': {
      opacity: 0,
      margin: 0,
      padding: 0,
      border: 'none',
      '&:focus': {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
        outline: 'none !important'
      }
    },
    // slider
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
    '::before': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      backgroundColor: colors.handleBackgroundColor,
      borderRadius: "var(--ds-border-radius-circle, 50%)",
      content: '""',
      position: 'absolute',
      transform: 'initial',
      transition: transition,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      insetBlockEnd: "".concat(2 * paddingUnitless, "px"),
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      height: "".concat(getHeight({
        size: size
      }) - paddingUnitless * 2, "px"),
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      width: "".concat(getHeight({
        size: size
      }) - paddingUnitless * 2, "px"),
      // initially we set left as left-most position
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      insetInlineStart: "".concat(2 * paddingUnitless, "px")
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '&[data-checked]::before': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      backgroundColor: colors.handleBackgroundColorChecked,
      // when  it's checked, slide the pseudo-element to right-most postion
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      transform: "translateX(".concat(getHeight({
        size: size
      }), "px)")
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '&[data-disabled]::before': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      backgroundColor: colors.handleBackgroundColorDisabled,
      zIndex: 1
    }
  }, size === 'large' &&
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values
  !fg('platform-visual-refresh-icons') && {
    '> span > span': {
      height: '20px',
      width: '20px'
    }
  }), {}, {
    '@media screen and (forced-colors: active)': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
      '::before': {
        filter: 'grayscale(100%) invert(1)'
      },
      '&:focus-within': {
        outline: '1px solid'
      }
    }
  }));
};

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var noop = noop$1;
var analyticsAttributes = {
  componentName: 'toggle',
  packageName: "@atlaskit/toggle",
  packageVersion: "13.4.4"
};
var iconSizeMap = {
  regular: 'small',
  large: 'medium'
};

/**
 * __Toggle__
 *
 * A toggle is used to view or switch between enabled or disabled states.
 *
 * - [Examples](https://atlassian.design/components/toggle/examples)
 * - [Code](https://atlassian.design/components/toggle/code)
 * - [Usage](https://atlassian.design/components/toggle/usage)
 */
var Toggle$1 = /*#__PURE__*/reactExports.memo( /*#__PURE__*/reactExports.forwardRef(function (props, ref) {
  var _props$defaultChecked = props.defaultChecked,
    defaultChecked = _props$defaultChecked === void 0 ? false : _props$defaultChecked,
    _props$isDisabled = props.isDisabled,
    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
    _props$onBlur = props.onBlur,
    providedOnBlur = _props$onBlur === void 0 ? noop : _props$onBlur,
    _props$onChange = props.onChange,
    providedChange = _props$onChange === void 0 ? noop : _props$onChange,
    _props$onFocus = props.onFocus,
    providedFocus = _props$onFocus === void 0 ? noop : _props$onFocus,
    _props$size = props.size,
    size = _props$size === void 0 ? 'regular' : _props$size,
    _props$name = props.name,
    name = _props$name === void 0 ? '' : _props$name,
    _props$value = props.value,
    value = _props$value === void 0 ? '' : _props$value,
    isChecked = props.isChecked,
    analyticsContext = props.analyticsContext,
    id = props.id,
    testId = props.testId,
    label = props.label,
    descriptionId = props.descriptionId;
  var isControlled = typeof isChecked === 'undefined';
  var _useState = reactExports.useState(defaultChecked),
    _useState2 = _slicedToArray(_useState, 2),
    checked = _useState2[0],
    setChecked = _useState2[1];
  var handleBlur = usePlatformLeafEventHandler(_objectSpread({
    fn: providedOnBlur,
    action: 'blur',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var handleFocus = usePlatformLeafEventHandler(_objectSpread({
    fn: providedFocus,
    action: 'focus',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var handleChange = usePlatformLeafEventHandler(_objectSpread({
    fn: function fn(event, analyticsEvent) {
      if (isControlled) {
        setChecked(function (checked) {
          return !checked;
        });
      }
      return providedChange(event, analyticsEvent);
    },
    action: 'change',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var shouldChecked = isControlled ? checked : isChecked;
  var controlProps = {
    'data-checked': shouldChecked ? shouldChecked : undefined,
    'data-disabled': isDisabled ? isDisabled : undefined,
    'data-size': size,
    'data-testid': testId ? testId : undefined
  };
  var toggleStyles = reactExports.useMemo(function () {
    return getStyles(size);
  }, [size]);
  var legacyIconSize = iconSizeMap[size];
  var labelId = useId();
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    jsx("label", _extends({}, controlProps, {
      css: toggleStyles
    }), label ? jsx("span", {
      id: labelId,
      hidden: true
    }, label) : null, jsx("input", {
      ref: ref,
      checked: shouldChecked,
      disabled: isDisabled,
      id: id,
      name: name,
      onBlur: handleBlur,
      onChange: handleChange,
      onFocus: handleFocus,
      type: "checkbox",
      value: value,
      "data-testid": testId && "".concat(testId, "--input"),
      "aria-labelledby": label ? labelId : undefined,
      "aria-describedby": descriptionId
    }), jsx(IconContainer, {
      size: size,
      isHidden: !shouldChecked,
      position: "left"
    }, jsx(default_1$2, {
      label: "",
      color: "currentColor",
      LEGACY_size: legacyIconSize,
      testId: testId && "".concat(testId, "--toggle-check-icon")
    })), jsx(IconContainer, {
      size: size,
      isHidden: shouldChecked,
      position: "right"
    }, jsx(default_1$1, {
      label: "",
      color: "currentColor",
      LEGACY_size: legacyIconSize,
      testId: testId && "".concat(testId, "--toggle-cross-icon")
    })))
  );
}));
Toggle$1.displayName = 'Toggle';

const Toggle = ({ label, description, onChange, isChecked }) => {
    const id = reactExports.useId();
    return (React.createElement("div", null,
        React.createElement(Label, { htmlFor: id, isRequired: true }, label),
        React.createElement("div", { className: "flex justify-between align-center" },
            React.createElement("p", null, description),
            React.createElement("div", { className: "w-10" },
                React.createElement(Toggle$1, { id: id, onChange: onChange, isChecked: isChecked })))));
};

const Hr = () => {
    return React.createElement("hr", { className: "h-px my-4 bg-gray-200 border-0 dark:bg-gray-700" });
};

const JiraContext = reactExports.createContext(null);
const useJira = () => {
    const storage = reactExports.useContext(JiraContext);
    if (!storage) {
        throw new Error("Cannot use useJira outside of its provider");
    }
    return storage;
};
const JiraProvider = ({ jira, children }) => {
    return React.createElement(JiraContext.Provider, { value: jira }, children);
};

const jiraKeys = {
    all: ["jira"],
    allIssueFields: () => [...jiraKeys.all, "issue-fields"],
};

const useJiraIssueFields = () => {
    const { fetchJiraFields } = useJira();
    const { data } = useSuspenseQuery({
        queryKey: jiraKeys.allIssueFields(),
        queryFn: async () => {
            // TODO fix types here
            return fetchJiraFields();
        },
    });
    return data;
};

const ConfigureTeams = ({ onUpdate, onInitialDefaultsLoad }) => {
    const fieldValues = useGlobalTeamConfiguration();
    const save = useSaveGlobalTeamConfiguration({ onUpdate });
    const jiraFields = useJiraIssueFields();
    const selectableFields = jiraFields.map(({ name }) => ({ value: name, label: name }));
    const { register, handleSubmit, getValues, control } = useForm({
        defaultValues: addDefaultFormData(jiraFields, fieldValues),
    });
    useOnMount(() => {
        onInitialDefaultsLoad?.(createNormalizeConfiguration(getValues()));
    });
    function update({ name, value }) {
        const values = getValues();
        save({ ...values, [name]: value });
    }
    return (React.createElement(Form, { onSubmit: () => handleSubmit((values, event) => {
            event?.preventDefault();
            save(values);
        }) }, () => (React.createElement("form", null,
        React.createElement(Flex, { direction: "column", gap: "space.100" },
            React.createElement(Select, { name: "estimateField", label: "Estimate Field", jiraFields: selectableFields, control: control, onSave: update }),
            React.createElement(Select, { name: "confidenceField", label: "Confidence field", jiraFields: selectableFields, control: control, onSave: update }),
            React.createElement(Select, { name: "startDateField", label: "Start date field", jiraFields: selectableFields, control: control, onSave: update }),
            React.createElement(Select, { name: "dueDateField", label: "End date field", jiraFields: selectableFields, control: control, onSave: update }),
            React.createElement(Hr, null),
            React.createElement(TextField, { name: "sprintLength", type: "number", label: "Sprint length", min: 1, register: register, onSave: update }),
            React.createElement(TextField, { name: "velocityPerSprint", type: "number", label: "Velocity Per Sprint", min: 1, register: register, onSave: update }),
            React.createElement(TextField, { name: "tracks", type: "number", label: "Tracks", min: 1, register: register, onSave: update }),
            React.createElement(Toggle, { label: "Spread effort", description: "Spread estimate access dates" }))))));
};
// Temporary - don't use
const useOnMount = (effect) => {
    reactExports.useEffect(() => {
        effect();
    }, []);
};

const AccordionContext = reactExports.createContext(null);
const useAccordion = () => {
    const context = reactExports.useContext(AccordionContext);
    if (!context) {
        throw new Error("must use accordion in proper context");
    }
    return context;
};
const Accordion = ({ children }) => {
    const [isOpen, setIsOpen] = reactExports.useState(true);
    return (React.createElement(AccordionContext.Provider, { value: { isOpen, setIsOpen } },
        React.createElement("div", null, children)));
};

var chevronRight$1 = {};

var chevronRight = {};

/**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::a9bfbdf898b5516a0a7c630d609b6042>>
 * @codegenCommand yarn build:icon-glyphs
 */

Object.defineProperty(chevronRight, "__esModule", {
  value: true
});
chevronRight.default = void 0;
var _react$1 = _interopRequireDefault$1(reactExports);
var _UNSAFE_baseNew = _interopRequireDefault$1(require$$1);
function _interopRequireDefault$1(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * ⚠️ EXPERIMENTAL ⚠️ - New icons are in alpha - and subject to change or removal in future minor or patch releases.
 * Please reach out in #icon-contributions before using these in production.
 *
 * Icon: "ChevronRight".
 * Category: utility
 * Location: @atlaskit/icon
 * Usage guidance: Reserved for menu fly outs and to indicate next in dates.
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
const ChevronRightIcon$1 = props => /*#__PURE__*/_react$1.default.createElement(_UNSAFE_baseNew.default, Object.assign({
  dangerouslySetGlyph: `<path stroke="currentcolor" stroke-linejoin="round" stroke-width="1.5" d="M4.5 10.5 9 6 4.5 1.5"/>`,
  type: 'utility'
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));
ChevronRightIcon$1.displayName = 'ChevronRightIcon';
chevronRight.default = ChevronRightIcon$1;

Object.defineProperty(chevronRight$1, "__esModule", {
  value: true
});
var default_1 = chevronRight$1.default = void 0;
var _react = _interopRequireDefault(reactExports);
var _base = require$$1$1;
var _chevronRight = _interopRequireDefault(chevronRight);
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const ChevronRightIcon = props => /*#__PURE__*/_react.default.createElement(_base.UNSAFE_IconFacade, Object.assign({
  dangerouslySetGlyph: `<svg width="24" height="24" viewBox="0 0 24 24" role="presentation"><path fill="currentcolor" fill-rule="evenodd" d="M10.294 9.698a.99.99 0 0 1 0-1.407 1.01 1.01 0 0 1 1.419 0l2.965 2.94a1.09 1.09 0 0 1 0 1.548l-2.955 2.93a1.01 1.01 0 0 1-1.42 0 .99.99 0 0 1 0-1.407l2.318-2.297z"/></svg>`
}, props, {
  newIcon: _chevronRight.default,
  iconType: "utility"
}));
ChevronRightIcon.displayName = 'ChevronRightIcon';
default_1 = chevronRight$1.default = ChevronRightIcon;

const AccordionTitle = ({ children }) => {
    const { isOpen, setIsOpen } = useAccordion();
    const Icon = isOpen ? default_1$5 : default_1;
    return (React.createElement("div", { className: "flex items-center justify-between p-4 cursor-pointer bg-white", onClick: () => setIsOpen(!isOpen) },
        React.createElement("div", { className: "flex items-center space-x-2" },
            React.createElement(Icon, { label: isOpen ? "open" : "closed" }),
            React.createElement("div", null, children))));
};

const AccordionContent = ({ children }) => {
    const { isOpen } = useAccordion();
    return isOpen && React.createElement("div", { className: "px-4 py-0" }, children);
};

const queryClient = new QueryClient();
const TeamConfigurationWrapper = ({ storage, jira, ...props }) => {
    return (React.createElement("div", { className: "w-96" },
        React.createElement(ErrorBoundary, { fallbackRender: ({ error }) => error?.message || "Something went wrong" },
            React.createElement(reactExports.Suspense, { fallback: "...loading" },
                React.createElement(QueryClientProvider, { client: queryClient },
                    React.createElement(FlagsProvider, null,
                        React.createElement(JiraProvider, { jira: jira },
                            React.createElement(StorageProvider, { storage: storage },
                                React.createElement(Accordion, null,
                                    React.createElement(AccordionTitle, null,
                                        React.createElement(Heading, { size: "small" }, "Global default")),
                                    React.createElement(AccordionContent, null,
                                        React.createElement(ConfigureTeams, { ...props })))))))))));
};

const inQAStatus = {
  QA: true,
  "In QA": true,
  "QA Complete": true
};
const inPartnerReviewStatus = {
  "Partner Review": true,
  UAT: true
};
const inIdeaStatus = {
  Idea: true,
  "To Do": true,
  Open: true
};
const inDoneStatus = {
  Done: true,
  Cancelled: true
};
const blockedStatus = {
  Blocked: true,
  blocked: true,
  delayed: true,
  Delayed: true
};
(function () {
  const items = [["qa", inQAStatus], ["uat", inPartnerReviewStatus], ["todo", inIdeaStatus], ["done", inDoneStatus], ["blocked", blockedStatus]];
  const statusCategoryMap = {};
  for (let [category, statusMap] of items) {
    for (let prop in statusMap) {
      statusCategoryMap[prop] = category;
    }
  }
  return statusCategoryMap;
})();

/*
export function getEpicStatus(epic) {
	debugger;
		if (inQAStatus[epic.Status] || inPartnerReviewStatus[epic.Status] || inDoneStatus[epic.Status]) {
				return "complete";
		} else if (!epic["Due date"]) {
				return "unknown"
		} else if (new Date(epic["Due date"]) > WIGGLE_ROOM + (+epic.dueLastPeriod)) {
				return "behind"
		} else {
				return "ontrack";
		}
}

export function addStatusToEpic(epic) {
		return {
				...epic,
				status: getEpicStatus(epic)
		};
}*/

function getBusinessDatesCount(startDate, endDate) {
  let count = 0;
  const curDate = new Date(startDate.getTime());
  while (curDate <= endDate) {
    const dayOfWeek = curDate.getDay();
    if (dayOfWeek !== 0 && dayOfWeek !== 6) count++;
    curDate.setDate(curDate.getDate() + 1);
  }
  return count;
}

var jstat = {exports: {}};

(function (module, exports) {
	(function (window, factory) {
	    {
	        module.exports = factory();
	    }
	})(commonjsGlobal, function () {
	var jStat = (function(Math, undefined$1) {

	// For quick reference.
	var concat = Array.prototype.concat;
	var slice = Array.prototype.slice;
	var toString = Object.prototype.toString;

	// Calculate correction for IEEE error
	// TODO: This calculation can be improved.
	function calcRdx(n, m) {
	  var val = n > m ? n : m;
	  return Math.pow(10,
	                  17 - ~~(Math.log(((val > 0) ? val : -val)) * Math.LOG10E));
	}


	var isArray = Array.isArray || function isArray(arg) {
	  return toString.call(arg) === '[object Array]';
	};


	function isFunction(arg) {
	  return toString.call(arg) === '[object Function]';
	}


	function isNumber(num) {
	  return (typeof num === 'number') ? num - num === 0 : false;
	}


	// Converts the jStat matrix to vector.
	function toVector(arr) {
	  return concat.apply([], arr);
	}


	// The one and only jStat constructor.
	function jStat() {
	  return new jStat._init(arguments);
	}


	// TODO: Remove after all references in src files have been removed.
	jStat.fn = jStat.prototype;


	// By separating the initializer from the constructor it's easier to handle
	// always returning a new instance whether "new" was used or not.
	jStat._init = function _init(args) {
	  // If first argument is an array, must be vector or matrix.
	  if (isArray(args[0])) {
	    // Check if matrix.
	    if (isArray(args[0][0])) {
	      // See if a mapping function was also passed.
	      if (isFunction(args[1]))
	        args[0] = jStat.map(args[0], args[1]);
	      // Iterate over each is faster than this.push.apply(this, args[0].
	      for (var i = 0; i < args[0].length; i++)
	        this[i] = args[0][i];
	      this.length = args[0].length;

	    // Otherwise must be a vector.
	    } else {
	      this[0] = isFunction(args[1]) ? jStat.map(args[0], args[1]) : args[0];
	      this.length = 1;
	    }

	  // If first argument is number, assume creation of sequence.
	  } else if (isNumber(args[0])) {
	    this[0] = jStat.seq.apply(null, args);
	    this.length = 1;

	  // Handle case when jStat object is passed to jStat.
	  } else if (args[0] instanceof jStat) {
	    // Duplicate the object and pass it back.
	    return jStat(args[0].toArray());

	  // Unexpected argument value, return empty jStat object.
	  // TODO: This is strange behavior. Shouldn't this throw or some such to let
	  // the user know they had bad arguments?
	  } else {
	    this[0] = [];
	    this.length = 1;
	  }

	  return this;
	};
	jStat._init.prototype = jStat.prototype;
	jStat._init.constructor = jStat;


	// Utility functions.
	// TODO: for internal use only?
	jStat.utils = {
	  calcRdx: calcRdx,
	  isArray: isArray,
	  isFunction: isFunction,
	  isNumber: isNumber,
	  toVector: toVector
	};


	jStat._random_fn = Math.random;
	jStat.setRandom = function setRandom(fn) {
	  if (typeof fn !== 'function')
	    throw new TypeError('fn is not a function');
	  jStat._random_fn = fn;
	};


	// Easily extend the jStat object.
	// TODO: is this seriously necessary?
	jStat.extend = function extend(obj) {
	  var i, j;

	  if (arguments.length === 1) {
	    for (j in obj)
	      jStat[j] = obj[j];
	    return this;
	  }

	  for (i = 1; i < arguments.length; i++) {
	    for (j in arguments[i])
	      obj[j] = arguments[i][j];
	  }

	  return obj;
	};


	// Returns the number of rows in the matrix.
	jStat.rows = function rows(arr) {
	  return arr.length || 1;
	};


	// Returns the number of columns in the matrix.
	jStat.cols = function cols(arr) {
	  return arr[0].length || 1;
	};


	// Returns the dimensions of the object { rows: i, cols: j }
	jStat.dimensions = function dimensions(arr) {
	  return {
	    rows: jStat.rows(arr),
	    cols: jStat.cols(arr)
	  };
	};


	// Returns a specified row as a vector or return a sub matrix by pick some rows
	jStat.row = function row(arr, index) {
	  if (isArray(index)) {
	    return index.map(function(i) {
	      return jStat.row(arr, i);
	    })
	  }
	  return arr[index];
	};


	// return row as array
	// rowa([[1,2],[3,4]],0) -> [1,2]
	jStat.rowa = function rowa(arr, i) {
	  return jStat.row(arr, i);
	};


	// Returns the specified column as a vector or return a sub matrix by pick some
	// columns
	jStat.col = function col(arr, index) {
	  if (isArray(index)) {
	    var submat = jStat.arange(arr.length).map(function() {
	      return new Array(index.length);
	    });
	    index.forEach(function(ind, i){
	      jStat.arange(arr.length).forEach(function(j) {
	        submat[j][i] = arr[j][ind];
	      });
	    });
	    return submat;
	  }
	  var column = new Array(arr.length);
	  for (var i = 0; i < arr.length; i++)
	    column[i] = [arr[i][index]];
	  return column;
	};


	// return column as array
	// cola([[1,2],[3,4]],0) -> [1,3]
	jStat.cola = function cola(arr, i) {
	  return jStat.col(arr, i).map(function(a){ return a[0] });
	};


	// Returns the diagonal of the matrix
	jStat.diag = function diag(arr) {
	  var nrow = jStat.rows(arr);
	  var res = new Array(nrow);
	  for (var row = 0; row < nrow; row++)
	    res[row] = [arr[row][row]];
	  return res;
	};


	// Returns the anti-diagonal of the matrix
	jStat.antidiag = function antidiag(arr) {
	  var nrow = jStat.rows(arr) - 1;
	  var res = new Array(nrow);
	  for (var i = 0; nrow >= 0; nrow--, i++)
	    res[i] = [arr[i][nrow]];
	  return res;
	};

	// Transpose a matrix or array.
	jStat.transpose = function transpose(arr) {
	  var obj = [];
	  var objArr, rows, cols, j, i;

	  // Make sure arr is in matrix format.
	  if (!isArray(arr[0]))
	    arr = [arr];

	  rows = arr.length;
	  cols = arr[0].length;

	  for (i = 0; i < cols; i++) {
	    objArr = new Array(rows);
	    for (j = 0; j < rows; j++)
	      objArr[j] = arr[j][i];
	    obj.push(objArr);
	  }

	  // If obj is vector, return only single array.
	  return obj.length === 1 ? obj[0] : obj;
	};


	// Map a function to an array or array of arrays.
	// "toAlter" is an internal variable.
	jStat.map = function map(arr, func, toAlter) {
	  var row, nrow, ncol, res, col;

	  if (!isArray(arr[0]))
	    arr = [arr];

	  nrow = arr.length;
	  ncol = arr[0].length;
	  res = toAlter ? arr : new Array(nrow);

	  for (row = 0; row < nrow; row++) {
	    // if the row doesn't exist, create it
	    if (!res[row])
	      res[row] = new Array(ncol);
	    for (col = 0; col < ncol; col++)
	      res[row][col] = func(arr[row][col], row, col);
	  }

	  return res.length === 1 ? res[0] : res;
	};


	// Cumulatively combine the elements of an array or array of arrays using a function.
	jStat.cumreduce = function cumreduce(arr, func, toAlter) {
	  var row, nrow, ncol, res, col;

	  if (!isArray(arr[0]))
	    arr = [arr];

	  nrow = arr.length;
	  ncol = arr[0].length;
	  res = toAlter ? arr : new Array(nrow);

	  for (row = 0; row < nrow; row++) {
	    // if the row doesn't exist, create it
	    if (!res[row])
	      res[row] = new Array(ncol);
	    if (ncol > 0)
	      res[row][0] = arr[row][0];
	    for (col = 1; col < ncol; col++)
	      res[row][col] = func(res[row][col-1], arr[row][col]);
	  }
	  return res.length === 1 ? res[0] : res;
	};


	// Destructively alter an array.
	jStat.alter = function alter(arr, func) {
	  return jStat.map(arr, func, true);
	};


	// Generate a rows x cols matrix according to the supplied function.
	jStat.create = function  create(rows, cols, func) {
	  var res = new Array(rows);
	  var i, j;

	  if (isFunction(cols)) {
	    func = cols;
	    cols = rows;
	  }

	  for (i = 0; i < rows; i++) {
	    res[i] = new Array(cols);
	    for (j = 0; j < cols; j++)
	      res[i][j] = func(i, j);
	  }

	  return res;
	};


	function retZero() { return 0; }


	// Generate a rows x cols matrix of zeros.
	jStat.zeros = function zeros(rows, cols) {
	  if (!isNumber(cols))
	    cols = rows;
	  return jStat.create(rows, cols, retZero);
	};


	function retOne() { return 1; }


	// Generate a rows x cols matrix of ones.
	jStat.ones = function ones(rows, cols) {
	  if (!isNumber(cols))
	    cols = rows;
	  return jStat.create(rows, cols, retOne);
	};


	// Generate a rows x cols matrix of uniformly random numbers.
	jStat.rand = function rand(rows, cols) {
	  if (!isNumber(cols))
	    cols = rows;
	  return jStat.create(rows, cols, jStat._random_fn);
	};


	function retIdent(i, j) { return i === j ? 1 : 0; }


	// Generate an identity matrix of size row x cols.
	jStat.identity = function identity(rows, cols) {
	  if (!isNumber(cols))
	    cols = rows;
	  return jStat.create(rows, cols, retIdent);
	};


	// Tests whether a matrix is symmetric
	jStat.symmetric = function symmetric(arr) {
	  var size = arr.length;
	  var row, col;

	  if (arr.length !== arr[0].length)
	    return false;

	  for (row = 0; row < size; row++) {
	    for (col = 0; col < size; col++)
	      if (arr[col][row] !== arr[row][col])
	        return false;
	  }

	  return true;
	};


	// Set all values to zero.
	jStat.clear = function clear(arr) {
	  return jStat.alter(arr, retZero);
	};


	// Generate sequence.
	jStat.seq = function seq(min, max, length, func) {
	  if (!isFunction(func))
	    func = false;

	  var arr = [];
	  var hival = calcRdx(min, max);
	  var step = (max * hival - min * hival) / ((length - 1) * hival);
	  var current = min;
	  var cnt;

	  // Current is assigned using a technique to compensate for IEEE error.
	  // TODO: Needs better implementation.
	  for (cnt = 0;
	       current <= max && cnt < length;
	       cnt++, current = (min * hival + step * hival * cnt) / hival) {
	    arr.push((func ? func(current, cnt) : current));
	  }

	  return arr;
	};


	// arange(5) -> [0,1,2,3,4]
	// arange(1,5) -> [1,2,3,4]
	// arange(5,1,-1) -> [5,4,3,2]
	jStat.arange = function arange(start, end, step) {
	  var rl = [];
	  var i;
	  step = step || 1;
	  if (end === undefined$1) {
	    end = start;
	    start = 0;
	  }
	  if (start === end || step === 0) {
	    return [];
	  }
	  if (start < end && step < 0) {
	    return [];
	  }
	  if (start > end && step > 0) {
	    return [];
	  }
	  if (step > 0) {
	    for (i = start; i < end; i += step) {
	      rl.push(i);
	    }
	  } else {
	    for (i = start; i > end; i += step) {
	      rl.push(i);
	    }
	  }
	  return rl;
	};


	// A=[[1,2,3],[4,5,6],[7,8,9]]
	// slice(A,{row:{end:2},col:{start:1}}) -> [[2,3],[5,6]]
	// slice(A,1,{start:1}) -> [5,6]
	// as numpy code A[:2,1:]
	jStat.slice = (function(){
	  function _slice(list, start, end, step) {
	    // note it's not equal to range.map mode it's a bug
	    var i;
	    var rl = [];
	    var length = list.length;
	    if (start === undefined$1 && end === undefined$1 && step === undefined$1) {
	      return jStat.copy(list);
	    }

	    start = start || 0;
	    end = end || list.length;
	    start = start >= 0 ? start : length + start;
	    end = end >= 0 ? end : length + end;
	    step = step || 1;
	    if (start === end || step === 0) {
	      return [];
	    }
	    if (start < end && step < 0) {
	      return [];
	    }
	    if (start > end && step > 0) {
	      return [];
	    }
	    if (step > 0) {
	      for (i = start; i < end; i += step) {
	        rl.push(list[i]);
	      }
	    } else {
	      for (i = start; i > end;i += step) {
	        rl.push(list[i]);
	      }
	    }
	    return rl;
	  }

	  function slice(list, rcSlice) {
	    var colSlice, rowSlice;
	    rcSlice = rcSlice || {};
	    if (isNumber(rcSlice.row)) {
	      if (isNumber(rcSlice.col))
	        return list[rcSlice.row][rcSlice.col];
	      var row = jStat.rowa(list, rcSlice.row);
	      colSlice = rcSlice.col || {};
	      return _slice(row, colSlice.start, colSlice.end, colSlice.step);
	    }

	    if (isNumber(rcSlice.col)) {
	      var col = jStat.cola(list, rcSlice.col);
	      rowSlice = rcSlice.row || {};
	      return _slice(col, rowSlice.start, rowSlice.end, rowSlice.step);
	    }

	    rowSlice = rcSlice.row || {};
	    colSlice = rcSlice.col || {};
	    var rows = _slice(list, rowSlice.start, rowSlice.end, rowSlice.step);
	    return rows.map(function(row) {
	      return _slice(row, colSlice.start, colSlice.end, colSlice.step);
	    });
	  }

	  return slice;
	}());


	// A=[[1,2,3],[4,5,6],[7,8,9]]
	// sliceAssign(A,{row:{start:1},col:{start:1}},[[0,0],[0,0]])
	// A=[[1,2,3],[4,0,0],[7,0,0]]
	jStat.sliceAssign = function sliceAssign(A, rcSlice, B) {
	  var nl, ml;
	  if (isNumber(rcSlice.row)) {
	    if (isNumber(rcSlice.col))
	      return A[rcSlice.row][rcSlice.col] = B;
	    rcSlice.col = rcSlice.col || {};
	    rcSlice.col.start = rcSlice.col.start || 0;
	    rcSlice.col.end = rcSlice.col.end || A[0].length;
	    rcSlice.col.step = rcSlice.col.step || 1;
	    nl = jStat.arange(rcSlice.col.start,
	                          Math.min(A.length, rcSlice.col.end),
	                          rcSlice.col.step);
	    var m = rcSlice.row;
	    nl.forEach(function(n, i) {
	      A[m][n] = B[i];
	    });
	    return A;
	  }

	  if (isNumber(rcSlice.col)) {
	    rcSlice.row = rcSlice.row || {};
	    rcSlice.row.start = rcSlice.row.start || 0;
	    rcSlice.row.end = rcSlice.row.end || A.length;
	    rcSlice.row.step = rcSlice.row.step || 1;
	    ml = jStat.arange(rcSlice.row.start,
	                          Math.min(A[0].length, rcSlice.row.end),
	                          rcSlice.row.step);
	    var n = rcSlice.col;
	    ml.forEach(function(m, j) {
	      A[m][n] = B[j];
	    });
	    return A;
	  }

	  if (B[0].length === undefined$1) {
	    B = [B];
	  }
	  rcSlice.row.start = rcSlice.row.start || 0;
	  rcSlice.row.end = rcSlice.row.end || A.length;
	  rcSlice.row.step = rcSlice.row.step || 1;
	  rcSlice.col.start = rcSlice.col.start || 0;
	  rcSlice.col.end = rcSlice.col.end || A[0].length;
	  rcSlice.col.step = rcSlice.col.step || 1;
	  ml = jStat.arange(rcSlice.row.start,
	                        Math.min(A.length, rcSlice.row.end),
	                        rcSlice.row.step);
	  nl = jStat.arange(rcSlice.col.start,
	                        Math.min(A[0].length, rcSlice.col.end),
	                        rcSlice.col.step);
	  ml.forEach(function(m, i) {
	    nl.forEach(function(n, j) {
	      A[m][n] = B[i][j];
	    });
	  });
	  return A;
	};


	// [1,2,3] ->
	// [[1,0,0],[0,2,0],[0,0,3]]
	jStat.diagonal = function diagonal(diagArray) {
	  var mat = jStat.zeros(diagArray.length, diagArray.length);
	  diagArray.forEach(function(t, i) {
	    mat[i][i] = t;
	  });
	  return mat;
	};


	// return copy of A
	jStat.copy = function copy(A) {
	  return A.map(function(row) {
	    if (isNumber(row))
	      return row;
	    return row.map(function(t) {
	      return t;
	    });
	  });
	};


	// TODO: Go over this entire implementation. Seems a tragic waste of resources
	// doing all this work. Instead, and while ugly, use new Function() to generate
	// a custom function for each static method.

	// Quick reference.
	var jProto = jStat.prototype;

	// Default length.
	jProto.length = 0;

	// For internal use only.
	// TODO: Check if they're actually used, and if they are then rename them
	// to _*
	jProto.push = Array.prototype.push;
	jProto.sort = Array.prototype.sort;
	jProto.splice = Array.prototype.splice;
	jProto.slice = Array.prototype.slice;


	// Return a clean array.
	jProto.toArray = function toArray() {
	  return this.length > 1 ? slice.call(this) : slice.call(this)[0];
	};


	// Map a function to a matrix or vector.
	jProto.map = function map(func, toAlter) {
	  return jStat(jStat.map(this, func, toAlter));
	};


	// Cumulatively combine the elements of a matrix or vector using a function.
	jProto.cumreduce = function cumreduce(func, toAlter) {
	  return jStat(jStat.cumreduce(this, func, toAlter));
	};


	// Destructively alter an array.
	jProto.alter = function alter(func) {
	  jStat.alter(this, func);
	  return this;
	};


	// Extend prototype with methods that have no argument.
	(function(funcs) {
	  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
	    jProto[passfunc] = function(func) {
	      var self = this,
	      results;
	      // Check for callback.
	      if (func) {
	        setTimeout(function() {
	          func.call(self, jProto[passfunc].call(self));
	        });
	        return this;
	      }
	      results = jStat[passfunc](this);
	      return isArray(results) ? jStat(results) : results;
	    };
	  })(funcs[i]);
	})('transpose clear symmetric rows cols dimensions diag antidiag'.split(' '));


	// Extend prototype with methods that have one argument.
	(function(funcs) {
	  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
	    jProto[passfunc] = function(index, func) {
	      var self = this;
	      // check for callback
	      if (func) {
	        setTimeout(function() {
	          func.call(self, jProto[passfunc].call(self, index));
	        });
	        return this;
	      }
	      return jStat(jStat[passfunc](this, index));
	    };
	  })(funcs[i]);
	})('row col'.split(' '));


	// Extend prototype with simple shortcut methods.
	(function(funcs) {
	  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
	    jProto[passfunc] = function() {
	      return jStat(jStat[passfunc].apply(null, arguments));
	    };
	  })(funcs[i]);
	})('create zeros ones rand identity'.split(' '));


	// Exposing jStat.
	return jStat;

	}(Math));
	(function(jStat, Math) {

	var isFunction = jStat.utils.isFunction;

	// Ascending functions for sort
	function ascNum(a, b) { return a - b; }

	function clip(arg, min, max) {
	  return Math.max(min, Math.min(arg, max));
	}


	// sum of an array
	jStat.sum = function sum(arr) {
	  var sum = 0;
	  var i = arr.length;
	  while (--i >= 0)
	    sum += arr[i];
	  return sum;
	};


	// sum squared
	jStat.sumsqrd = function sumsqrd(arr) {
	  var sum = 0;
	  var i = arr.length;
	  while (--i >= 0)
	    sum += arr[i] * arr[i];
	  return sum;
	};


	// sum of squared errors of prediction (SSE)
	jStat.sumsqerr = function sumsqerr(arr) {
	  var mean = jStat.mean(arr);
	  var sum = 0;
	  var i = arr.length;
	  var tmp;
	  while (--i >= 0) {
	    tmp = arr[i] - mean;
	    sum += tmp * tmp;
	  }
	  return sum;
	};

	// sum of an array in each row
	jStat.sumrow = function sumrow(arr) {
	  var sum = 0;
	  var i = arr.length;
	  while (--i >= 0)
	    sum += arr[i];
	  return sum;
	};

	// product of an array
	jStat.product = function product(arr) {
	  var prod = 1;
	  var i = arr.length;
	  while (--i >= 0)
	    prod *= arr[i];
	  return prod;
	};


	// minimum value of an array
	jStat.min = function min(arr) {
	  var low = arr[0];
	  var i = 0;
	  while (++i < arr.length)
	    if (arr[i] < low)
	      low = arr[i];
	  return low;
	};


	// maximum value of an array
	jStat.max = function max(arr) {
	  var high = arr[0];
	  var i = 0;
	  while (++i < arr.length)
	    if (arr[i] > high)
	      high = arr[i];
	  return high;
	};


	// unique values of an array
	jStat.unique = function unique(arr) {
	  var hash = {}, _arr = [];
	  for(var i = 0; i < arr.length; i++) {
	    if (!hash[arr[i]]) {
	      hash[arr[i]] = true;
	      _arr.push(arr[i]);
	    }
	  }
	  return _arr;
	};


	// mean value of an array
	jStat.mean = function mean(arr) {
	  return jStat.sum(arr) / arr.length;
	};


	// mean squared error (MSE)
	jStat.meansqerr = function meansqerr(arr) {
	  return jStat.sumsqerr(arr) / arr.length;
	};


	// geometric mean of an array
	jStat.geomean = function geomean(arr) {
	  var logs = arr.map(Math.log);
	  var meanOfLogs = jStat.mean(logs);
	  return Math.exp(meanOfLogs)
	};


	// median of an array
	jStat.median = function median(arr) {
	  var arrlen = arr.length;
	  var _arr = arr.slice().sort(ascNum);
	  // check if array is even or odd, then return the appropriate
	  return !(arrlen & 1)
	    ? (_arr[(arrlen / 2) - 1 ] + _arr[(arrlen / 2)]) / 2
	    : _arr[(arrlen / 2) | 0 ];
	};


	// cumulative sum of an array
	jStat.cumsum = function cumsum(arr) {
	  return jStat.cumreduce(arr, function (a, b) { return a + b; });
	};


	// cumulative product of an array
	jStat.cumprod = function cumprod(arr) {
	  return jStat.cumreduce(arr, function (a, b) { return a * b; });
	};


	// successive differences of a sequence
	jStat.diff = function diff(arr) {
	  var diffs = [];
	  var arrLen = arr.length;
	  var i;
	  for (i = 1; i < arrLen; i++)
	    diffs.push(arr[i] - arr[i - 1]);
	  return diffs;
	};


	// ranks of an array
	jStat.rank = function (arr) {
	  var i;
	  var distinctNumbers = [];
	  var numberCounts = {};
	  for (i = 0; i < arr.length; i++) {
	    var number = arr[i];
	    if (numberCounts[number]) {
	      numberCounts[number]++;
	    } else {
	      numberCounts[number] = 1;
	      distinctNumbers.push(number);
	    }
	  }

	  var sortedDistinctNumbers = distinctNumbers.sort(ascNum);
	  var numberRanks = {};
	  var currentRank = 1;
	  for (i = 0; i < sortedDistinctNumbers.length; i++) {
	    var number = sortedDistinctNumbers[i];
	    var count = numberCounts[number];
	    var first = currentRank;
	    var last = currentRank + count - 1;
	    var rank = (first + last) / 2;
	    numberRanks[number] = rank;
	    currentRank += count;
	  }

	  return arr.map(function (number) {
	    return numberRanks[number];
	  });
	};


	// mode of an array
	// if there are multiple modes of an array, return all of them
	// is this the appropriate way of handling it?
	jStat.mode = function mode(arr) {
	  var arrLen = arr.length;
	  var _arr = arr.slice().sort(ascNum);
	  var count = 1;
	  var maxCount = 0;
	  var numMaxCount = 0;
	  var mode_arr = [];
	  var i;

	  for (i = 0; i < arrLen; i++) {
	    if (_arr[i] === _arr[i + 1]) {
	      count++;
	    } else {
	      if (count > maxCount) {
	        mode_arr = [_arr[i]];
	        maxCount = count;
	        numMaxCount = 0;
	      }
	      // are there multiple max counts
	      else if (count === maxCount) {
	        mode_arr.push(_arr[i]);
	        numMaxCount++;
	      }
	      // resetting count for new value in array
	      count = 1;
	    }
	  }

	  return numMaxCount === 0 ? mode_arr[0] : mode_arr;
	};


	// range of an array
	jStat.range = function range(arr) {
	  return jStat.max(arr) - jStat.min(arr);
	};

	// variance of an array
	// flag = true indicates sample instead of population
	jStat.variance = function variance(arr, flag) {
	  return jStat.sumsqerr(arr) / (arr.length - (flag ? 1 : 0));
	};

	// pooled variance of an array of arrays
	jStat.pooledvariance = function pooledvariance(arr) {
	  var sumsqerr = arr.reduce(function (a, samples) {return a + jStat.sumsqerr(samples);}, 0);
	  var count = arr.reduce(function (a, samples) {return a + samples.length;}, 0);
	  return sumsqerr / (count - arr.length);
	};

	// deviation of an array
	jStat.deviation = function (arr) {
	  var mean = jStat.mean(arr);
	  var arrlen = arr.length;
	  var dev = new Array(arrlen);
	  for (var i = 0; i < arrlen; i++) {
	    dev[i] = arr[i] - mean;
	  }
	  return dev;
	};

	// standard deviation of an array
	// flag = true indicates sample instead of population
	jStat.stdev = function stdev(arr, flag) {
	  return Math.sqrt(jStat.variance(arr, flag));
	};

	// pooled standard deviation of an array of arrays
	jStat.pooledstdev = function pooledstdev(arr) {
	  return Math.sqrt(jStat.pooledvariance(arr));
	};

	// mean deviation (mean absolute deviation) of an array
	jStat.meandev = function meandev(arr) {
	  var mean = jStat.mean(arr);
	  var a = [];
	  for (var i = arr.length - 1; i >= 0; i--) {
	    a.push(Math.abs(arr[i] - mean));
	  }
	  return jStat.mean(a);
	};


	// median deviation (median absolute deviation) of an array
	jStat.meddev = function meddev(arr) {
	  var median = jStat.median(arr);
	  var a = [];
	  for (var i = arr.length - 1; i >= 0; i--) {
	    a.push(Math.abs(arr[i] - median));
	  }
	  return jStat.median(a);
	};


	// coefficient of variation
	jStat.coeffvar = function coeffvar(arr) {
	  return jStat.stdev(arr) / jStat.mean(arr);
	};


	// quartiles of an array
	jStat.quartiles = function quartiles(arr) {
	  var arrlen = arr.length;
	  var _arr = arr.slice().sort(ascNum);
	  return [
	    _arr[ Math.round((arrlen) / 4) - 1 ],
	    _arr[ Math.round((arrlen) / 2) - 1 ],
	    _arr[ Math.round((arrlen) * 3 / 4) - 1 ]
	  ];
	};


	// Arbitary quantiles of an array. Direct port of the scipy.stats
	// implementation by Pierre GF Gerard-Marchant.
	jStat.quantiles = function quantiles(arr, quantilesArray, alphap, betap) {
	  var sortedArray = arr.slice().sort(ascNum);
	  var quantileVals = [quantilesArray.length];
	  var n = arr.length;
	  var i, p, m, aleph, k, gamma;

	  if (typeof alphap === 'undefined')
	    alphap = 3 / 8;
	  if (typeof betap === 'undefined')
	    betap = 3 / 8;

	  for (i = 0; i < quantilesArray.length; i++) {
	    p = quantilesArray[i];
	    m = alphap + p * (1 - alphap - betap);
	    aleph = n * p + m;
	    k = Math.floor(clip(aleph, 1, n - 1));
	    gamma = clip(aleph - k, 0, 1);
	    quantileVals[i] = (1 - gamma) * sortedArray[k - 1] + gamma * sortedArray[k];
	  }

	  return quantileVals;
	};

	// Return the k-th percentile of values in a range, where k is in the range 0..1, inclusive.
	// Passing true for the exclusive parameter excludes both endpoints of the range.
	jStat.percentile = function percentile(arr, k, exclusive) {
	  var _arr = arr.slice().sort(ascNum);
	  var realIndex = k * (_arr.length + (exclusive ? 1 : -1)) + (exclusive ? 0 : 1);
	  var index = parseInt(realIndex);
	  var frac = realIndex - index;
	  if (index + 1 < _arr.length) {
	    return _arr[index - 1] + frac * (_arr[index] - _arr[index - 1]);
	  } else {
	    return _arr[index - 1];
	  }
	};

	// The percentile rank of score in a given array. Returns the percentage
	// of all values in the input array that are less than (kind='strict') or
	// less or equal than (kind='weak') score. Default is weak.
	jStat.percentileOfScore = function percentileOfScore(arr, score, kind) {
	  var counter = 0;
	  var len = arr.length;
	  var strict = false;
	  var value, i;

	  if (kind === 'strict')
	    strict = true;

	  for (i = 0; i < len; i++) {
	    value = arr[i];
	    if ((strict && value < score) ||
	        (!strict && value <= score)) {
	      counter++;
	    }
	  }

	  return counter / len;
	};


	// Histogram (bin count) data
	jStat.histogram = function histogram(arr, binCnt) {
	  binCnt = binCnt || 4;
	  var first = jStat.min(arr);
	  var binWidth = (jStat.max(arr) - first) / binCnt;
	  var len = arr.length;
	  var bins = [];
	  var i;

	  for (i = 0; i < binCnt; i++)
	    bins[i] = 0;
	  for (i = 0; i < len; i++)
	    bins[Math.min(Math.floor(((arr[i] - first) / binWidth)), binCnt - 1)] += 1;

	  return bins;
	};


	// covariance of two arrays
	jStat.covariance = function covariance(arr1, arr2) {
	  var u = jStat.mean(arr1);
	  var v = jStat.mean(arr2);
	  var arr1Len = arr1.length;
	  var sq_dev = new Array(arr1Len);
	  var i;

	  for (i = 0; i < arr1Len; i++)
	    sq_dev[i] = (arr1[i] - u) * (arr2[i] - v);

	  return jStat.sum(sq_dev) / (arr1Len - 1);
	};


	// (pearson's) population correlation coefficient, rho
	jStat.corrcoeff = function corrcoeff(arr1, arr2) {
	  return jStat.covariance(arr1, arr2) /
	      jStat.stdev(arr1, 1) /
	      jStat.stdev(arr2, 1);
	};

	  // (spearman's) rank correlation coefficient, sp
	jStat.spearmancoeff =  function (arr1, arr2) {
	  arr1 = jStat.rank(arr1);
	  arr2 = jStat.rank(arr2);
	  //return pearson's correlation of the ranks:
	  return jStat.corrcoeff(arr1, arr2);
	};


	// statistical standardized moments (general form of skew/kurt)
	jStat.stanMoment = function stanMoment(arr, n) {
	  var mu = jStat.mean(arr);
	  var sigma = jStat.stdev(arr);
	  var len = arr.length;
	  var skewSum = 0;

	  for (var i = 0; i < len; i++)
	    skewSum += Math.pow((arr[i] - mu) / sigma, n);

	  return skewSum / arr.length;
	};

	// (pearson's) moment coefficient of skewness
	jStat.skewness = function skewness(arr) {
	  return jStat.stanMoment(arr, 3);
	};

	// (pearson's) (excess) kurtosis
	jStat.kurtosis = function kurtosis(arr) {
	  return jStat.stanMoment(arr, 4) - 3;
	};


	var jProto = jStat.prototype;


	// Extend jProto with method for calculating cumulative sums and products.
	// This differs from the similar extension below as cumsum and cumprod should
	// not be run again in the case fullbool === true.
	// If a matrix is passed, automatically assume operation should be done on the
	// columns.
	(function(funcs) {
	  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
	    // If a matrix is passed, automatically assume operation should be done on
	    // the columns.
	    jProto[passfunc] = function(fullbool, func) {
	      var arr = [];
	      var i = 0;
	      var tmpthis = this;
	      // Assignment reassignation depending on how parameters were passed in.
	      if (isFunction(fullbool)) {
	        func = fullbool;
	        fullbool = false;
	      }
	      // Check if a callback was passed with the function.
	      if (func) {
	        setTimeout(function() {
	          func.call(tmpthis, jProto[passfunc].call(tmpthis, fullbool));
	        });
	        return this;
	      }
	      // Check if matrix and run calculations.
	      if (this.length > 1) {
	        tmpthis = fullbool === true ? this : this.transpose();
	        for (; i < tmpthis.length; i++)
	          arr[i] = jStat[passfunc](tmpthis[i]);
	        return arr;
	      }
	      // Pass fullbool if only vector, not a matrix. for variance and stdev.
	      return jStat[passfunc](this[0], fullbool);
	    };
	  })(funcs[i]);
	})(('cumsum cumprod').split(' '));


	// Extend jProto with methods which don't require arguments and work on columns.
	(function(funcs) {
	  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
	    // If a matrix is passed, automatically assume operation should be done on
	    // the columns.
	    jProto[passfunc] = function(fullbool, func) {
	      var arr = [];
	      var i = 0;
	      var tmpthis = this;
	      // Assignment reassignation depending on how parameters were passed in.
	      if (isFunction(fullbool)) {
	        func = fullbool;
	        fullbool = false;
	      }
	      // Check if a callback was passed with the function.
	      if (func) {
	        setTimeout(function() {
	          func.call(tmpthis, jProto[passfunc].call(tmpthis, fullbool));
	        });
	        return this;
	      }
	      // Check if matrix and run calculations.
	      if (this.length > 1) {
	        if (passfunc !== 'sumrow')
	          tmpthis = fullbool === true ? this : this.transpose();
	        for (; i < tmpthis.length; i++)
	          arr[i] = jStat[passfunc](tmpthis[i]);
	        return fullbool === true
	            ? jStat[passfunc](jStat.utils.toVector(arr))
	            : arr;
	      }
	      // Pass fullbool if only vector, not a matrix. for variance and stdev.
	      return jStat[passfunc](this[0], fullbool);
	    };
	  })(funcs[i]);
	})(('sum sumsqrd sumsqerr sumrow product min max unique mean meansqerr ' +
	    'geomean median diff rank mode range variance deviation stdev meandev ' +
	    'meddev coeffvar quartiles histogram skewness kurtosis').split(' '));


	// Extend jProto with functions that take arguments. Operations on matrices are
	// done on columns.
	(function(funcs) {
	  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
	    jProto[passfunc] = function() {
	      var arr = [];
	      var i = 0;
	      var tmpthis = this;
	      var args = Array.prototype.slice.call(arguments);
	      var callbackFunction;

	      // If the last argument is a function, we assume it's a callback; we
	      // strip the callback out and call the function again.
	      if (isFunction(args[args.length - 1])) {
	        callbackFunction = args[args.length - 1];
	        var argsToPass = args.slice(0, args.length - 1);

	        setTimeout(function() {
	          callbackFunction.call(tmpthis,
	                                jProto[passfunc].apply(tmpthis, argsToPass));
	        });
	        return this;

	      // Otherwise we curry the function args and call normally.
	      } else {
	        callbackFunction = undefined;
	        var curriedFunction = function curriedFunction(vector) {
	          return jStat[passfunc].apply(tmpthis, [vector].concat(args));
	        };
	      }

	      // If this is a matrix, run column-by-column.
	      if (this.length > 1) {
	        tmpthis = tmpthis.transpose();
	        for (; i < tmpthis.length; i++)
	          arr[i] = curriedFunction(tmpthis[i]);
	        return arr;
	      }

	      // Otherwise run on the vector.
	      return curriedFunction(this[0]);
	    };
	  })(funcs[i]);
	})('quantiles percentileOfScore'.split(' '));

	}(jStat, Math));
	// Special functions //
	(function(jStat, Math) {

	// Log-gamma function
	jStat.gammaln = function gammaln(x) {
	  var j = 0;
	  var cof = [
	    76.18009172947146, -86.50532032941677, 24.01409824083091,
	    -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5
	  ];
	  var ser = 1.000000000190015;
	  var xx, y, tmp;
	  tmp = (y = xx = x) + 5.5;
	  tmp -= (xx + 0.5) * Math.log(tmp);
	  for (; j < 6; j++)
	    ser += cof[j] / ++y;
	  return Math.log(2.5066282746310005 * ser / xx) - tmp;
	};

	/*
	 * log-gamma function to support poisson distribution sampling. The
	 * algorithm comes from SPECFUN by Shanjie Zhang and Jianming Jin and their
	 * book "Computation of Special Functions", 1996, John Wiley & Sons, Inc.
	 */
	jStat.loggam = function loggam(x) {
	  var x0, x2, xp, gl, gl0;
	  var k, n;

	  var a = [8.333333333333333e-02, -2.777777777777778e-03,
	          7.936507936507937e-04, -5.952380952380952e-04,
	          8.417508417508418e-04, -1.917526917526918e-03,
	          6.410256410256410e-03, -2.955065359477124e-02,
	          1.796443723688307e-01, -1.39243221690590e+00];
	  x0 = x;
	  n = 0;
	  if ((x == 1.0) || (x == 2.0)) {
	      return 0.0;
	  }
	  if (x <= 7.0) {
	      n = Math.floor(7 - x);
	      x0 = x + n;
	  }
	  x2 = 1.0 / (x0 * x0);
	  xp = 2 * Math.PI;
	  gl0 = a[9];
	  for (k = 8; k >= 0; k--) {
	      gl0 *= x2;
	      gl0 += a[k];
	  }
	  gl = gl0 / x0 + 0.5 * Math.log(xp) + (x0 - 0.5) * Math.log(x0) - x0;
	  if (x <= 7.0) {
	      for (k = 1; k <= n; k++) {
	          gl -= Math.log(x0 - 1.0);
	          x0 -= 1.0;
	      }
	  }
	  return gl;
	};

	// gamma of x
	jStat.gammafn = function gammafn(x) {
	  var p = [-1.716185138865495, 24.76565080557592, -379.80425647094563,
	           629.3311553128184, 866.9662027904133, -31451.272968848367,
	           -36144.413418691176, 66456.14382024054
	  ];
	  var q = [-30.8402300119739, 315.35062697960416, -1015.1563674902192,
	           -3107.771671572311, 22538.118420980151, 4755.8462775278811,
	           -134659.9598649693, -115132.2596755535];
	  var fact = false;
	  var n = 0;
	  var xden = 0;
	  var xnum = 0;
	  var y = x;
	  var i, z, yi, res;
	  if (x > 171.6243769536076) {
	    return Infinity;
	  }
	  if (y <= 0) {
	    res = y % 1 + 3.6e-16;
	    if (res) {
	      fact = (!(y & 1) ? 1 : -1) * Math.PI / Math.sin(Math.PI * res);
	      y = 1 - y;
	    } else {
	      return Infinity;
	    }
	  }
	  yi = y;
	  if (y < 1) {
	    z = y++;
	  } else {
	    z = (y -= n = (y | 0) - 1) - 1;
	  }
	  for (i = 0; i < 8; ++i) {
	    xnum = (xnum + p[i]) * z;
	    xden = xden * z + q[i];
	  }
	  res = xnum / xden + 1;
	  if (yi < y) {
	    res /= yi;
	  } else if (yi > y) {
	    for (i = 0; i < n; ++i) {
	      res *= y;
	      y++;
	    }
	  }
	  if (fact) {
	    res = fact / res;
	  }
	  return res;
	};


	// lower incomplete gamma function, which is usually typeset with a
	// lower-case greek gamma as the function symbol
	jStat.gammap = function gammap(a, x) {
	  return jStat.lowRegGamma(a, x) * jStat.gammafn(a);
	};


	// The lower regularized incomplete gamma function, usually written P(a,x)
	jStat.lowRegGamma = function lowRegGamma(a, x) {
	  var aln = jStat.gammaln(a);
	  var ap = a;
	  var sum = 1 / a;
	  var del = sum;
	  var b = x + 1 - a;
	  var c = 1 / 1.0e-30;
	  var d = 1 / b;
	  var h = d;
	  var i = 1;
	  // calculate maximum number of itterations required for a
	  var ITMAX = -~(Math.log((a >= 1) ? a : 1 / a) * 8.5 + a * 0.4 + 17);
	  var an;

	  if (x < 0 || a <= 0) {
	    return NaN;
	  } else if (x < a + 1) {
	    for (; i <= ITMAX; i++) {
	      sum += del *= x / ++ap;
	    }
	    return (sum * Math.exp(-x + a * Math.log(x) - (aln)));
	  }

	  for (; i <= ITMAX; i++) {
	    an = -i * (i - a);
	    b += 2;
	    d = an * d + b;
	    c = b + an / c;
	    d = 1 / d;
	    h *= d * c;
	  }

	  return (1 - h * Math.exp(-x + a * Math.log(x) - (aln)));
	};

	// natural log factorial of n
	jStat.factorialln = function factorialln(n) {
	  return n < 0 ? NaN : jStat.gammaln(n + 1);
	};

	// factorial of n
	jStat.factorial = function factorial(n) {
	  return n < 0 ? NaN : jStat.gammafn(n + 1);
	};

	// combinations of n, m
	jStat.combination = function combination(n, m) {
	  // make sure n or m don't exceed the upper limit of usable values
	  return (n > 170 || m > 170)
	      ? Math.exp(jStat.combinationln(n, m))
	      : (jStat.factorial(n) / jStat.factorial(m)) / jStat.factorial(n - m);
	};


	jStat.combinationln = function combinationln(n, m){
	  return jStat.factorialln(n) - jStat.factorialln(m) - jStat.factorialln(n - m);
	};


	// permutations of n, m
	jStat.permutation = function permutation(n, m) {
	  return jStat.factorial(n) / jStat.factorial(n - m);
	};


	// beta function
	jStat.betafn = function betafn(x, y) {
	  // ensure arguments are positive
	  if (x <= 0 || y <= 0)
	    return undefined;
	  // make sure x + y doesn't exceed the upper limit of usable values
	  return (x + y > 170)
	      ? Math.exp(jStat.betaln(x, y))
	      : jStat.gammafn(x) * jStat.gammafn(y) / jStat.gammafn(x + y);
	};


	// natural logarithm of beta function
	jStat.betaln = function betaln(x, y) {
	  return jStat.gammaln(x) + jStat.gammaln(y) - jStat.gammaln(x + y);
	};


	// Evaluates the continued fraction for incomplete beta function by modified
	// Lentz's method.
	jStat.betacf = function betacf(x, a, b) {
	  var fpmin = 1e-30;
	  var m = 1;
	  var qab = a + b;
	  var qap = a + 1;
	  var qam = a - 1;
	  var c = 1;
	  var d = 1 - qab * x / qap;
	  var m2, aa, del, h;

	  // These q's will be used in factors that occur in the coefficients
	  if (Math.abs(d) < fpmin)
	    d = fpmin;
	  d = 1 / d;
	  h = d;

	  for (; m <= 100; m++) {
	    m2 = 2 * m;
	    aa = m * (b - m) * x / ((qam + m2) * (a + m2));
	    // One step (the even one) of the recurrence
	    d = 1 + aa * d;
	    if (Math.abs(d) < fpmin)
	      d = fpmin;
	    c = 1 + aa / c;
	    if (Math.abs(c) < fpmin)
	      c = fpmin;
	    d = 1 / d;
	    h *= d * c;
	    aa = -(a + m) * (qab + m) * x / ((a + m2) * (qap + m2));
	    // Next step of the recurrence (the odd one)
	    d = 1 + aa * d;
	    if (Math.abs(d) < fpmin)
	      d = fpmin;
	    c = 1 + aa / c;
	    if (Math.abs(c) < fpmin)
	      c = fpmin;
	    d = 1 / d;
	    del = d * c;
	    h *= del;
	    if (Math.abs(del - 1.0) < 3e-7)
	      break;
	  }

	  return h;
	};


	// Returns the inverse of the lower regularized inomplete gamma function
	jStat.gammapinv = function gammapinv(p, a) {
	  var j = 0;
	  var a1 = a - 1;
	  var EPS = 1e-8;
	  var gln = jStat.gammaln(a);
	  var x, err, t, u, pp, lna1, afac;

	  if (p >= 1)
	    return Math.max(100, a + 100 * Math.sqrt(a));
	  if (p <= 0)
	    return 0;
	  if (a > 1) {
	    lna1 = Math.log(a1);
	    afac = Math.exp(a1 * (lna1 - 1) - gln);
	    pp = (p < 0.5) ? p : 1 - p;
	    t = Math.sqrt(-2 * Math.log(pp));
	    x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;
	    if (p < 0.5)
	      x = -x;
	    x = Math.max(1e-3,
	                 a * Math.pow(1 - 1 / (9 * a) - x / (3 * Math.sqrt(a)), 3));
	  } else {
	    t = 1 - a * (0.253 + a * 0.12);
	    if (p < t)
	      x = Math.pow(p / t, 1 / a);
	    else
	      x = 1 - Math.log(1 - (p - t) / (1 - t));
	  }

	  for(; j < 12; j++) {
	    if (x <= 0)
	      return 0;
	    err = jStat.lowRegGamma(a, x) - p;
	    if (a > 1)
	      t = afac * Math.exp(-(x - a1) + a1 * (Math.log(x) - lna1));
	    else
	      t = Math.exp(-x + a1 * Math.log(x) - gln);
	    u = err / t;
	    x -= (t = u / (1 - 0.5 * Math.min(1, u * ((a - 1) / x - 1))));
	    if (x <= 0)
	      x = 0.5 * (x + t);
	    if (Math.abs(t) < EPS * x)
	      break;
	  }

	  return x;
	};


	// Returns the error function erf(x)
	jStat.erf = function erf(x) {
	  var cof = [-1.3026537197817094, 6.4196979235649026e-1, 1.9476473204185836e-2,
	             -9.561514786808631e-3, -9.46595344482036e-4, 3.66839497852761e-4,
	             4.2523324806907e-5, -2.0278578112534e-5, -1.624290004647e-6,
	             1.303655835580e-6, 1.5626441722e-8, -8.5238095915e-8,
	             6.529054439e-9, 5.059343495e-9, -9.91364156e-10,
	             -2.27365122e-10, 9.6467911e-11, 2.394038e-12,
	             -6.886027e-12, 8.94487e-13, 3.13092e-13,
	             -1.12708e-13, 3.81e-16, 7.106e-15,
	             -1.523e-15, -9.4e-17, 1.21e-16,
	             -2.8e-17];
	  var j = cof.length - 1;
	  var isneg = false;
	  var d = 0;
	  var dd = 0;
	  var t, ty, tmp, res;

	  if (x < 0) {
	    x = -x;
	    isneg = true;
	  }

	  t = 2 / (2 + x);
	  ty = 4 * t - 2;

	  for(; j > 0; j--) {
	    tmp = d;
	    d = ty * d - dd + cof[j];
	    dd = tmp;
	  }

	  res = t * Math.exp(-x * x + 0.5 * (cof[0] + ty * d) - dd);
	  return isneg ? res - 1 : 1 - res;
	};


	// Returns the complmentary error function erfc(x)
	jStat.erfc = function erfc(x) {
	  return 1 - jStat.erf(x);
	};


	// Returns the inverse of the complementary error function
	jStat.erfcinv = function erfcinv(p) {
	  var j = 0;
	  var x, err, t, pp;
	  if (p >= 2)
	    return -100;
	  if (p <= 0)
	    return 100;
	  pp = (p < 1) ? p : 2 - p;
	  t = Math.sqrt(-2 * Math.log(pp / 2));
	  x = -0.70711 * ((2.30753 + t * 0.27061) /
	                  (1 + t * (0.99229 + t * 0.04481)) - t);
	  for (; j < 2; j++) {
	    err = jStat.erfc(x) - pp;
	    x += err / (1.12837916709551257 * Math.exp(-x * x) - x * err);
	  }
	  return (p < 1) ? x : -x;
	};


	// Returns the inverse of the incomplete beta function
	jStat.ibetainv = function ibetainv(p, a, b) {
	  var EPS = 1e-8;
	  var a1 = a - 1;
	  var b1 = b - 1;
	  var j = 0;
	  var lna, lnb, pp, t, u, err, x, al, h, w, afac;
	  if (p <= 0)
	    return 0;
	  if (p >= 1)
	    return 1;
	  if (a >= 1 && b >= 1) {
	    pp = (p < 0.5) ? p : 1 - p;
	    t = Math.sqrt(-2 * Math.log(pp));
	    x = (2.30753 + t * 0.27061) / (1 + t* (0.99229 + t * 0.04481)) - t;
	    if (p < 0.5)
	      x = -x;
	    al = (x * x - 3) / 6;
	    h = 2 / (1 / (2 * a - 1)  + 1 / (2 * b - 1));
	    w = (x * Math.sqrt(al + h) / h) - (1 / (2 * b - 1) - 1 / (2 * a - 1)) *
	        (al + 5 / 6 - 2 / (3 * h));
	    x = a / (a + b * Math.exp(2 * w));
	  } else {
	    lna = Math.log(a / (a + b));
	    lnb = Math.log(b / (a + b));
	    t = Math.exp(a * lna) / a;
	    u = Math.exp(b * lnb) / b;
	    w = t + u;
	    if (p < t / w)
	      x = Math.pow(a * w * p, 1 / a);
	    else
	      x = 1 - Math.pow(b * w * (1 - p), 1 / b);
	  }
	  afac = -jStat.gammaln(a) - jStat.gammaln(b) + jStat.gammaln(a + b);
	  for(; j < 10; j++) {
	    if (x === 0 || x === 1)
	      return x;
	    err = jStat.ibeta(x, a, b) - p;
	    t = Math.exp(a1 * Math.log(x) + b1 * Math.log(1 - x) + afac);
	    u = err / t;
	    x -= (t = u / (1 - 0.5 * Math.min(1, u * (a1 / x - b1 / (1 - x)))));
	    if (x <= 0)
	      x = 0.5 * (x + t);
	    if (x >= 1)
	      x = 0.5 * (x + t + 1);
	    if (Math.abs(t) < EPS * x && j > 0)
	      break;
	  }
	  return x;
	};


	// Returns the incomplete beta function I_x(a,b)
	jStat.ibeta = function ibeta(x, a, b) {
	  // Factors in front of the continued fraction.
	  var bt = (x === 0 || x === 1) ?  0 :
	    Math.exp(jStat.gammaln(a + b) - jStat.gammaln(a) -
	             jStat.gammaln(b) + a * Math.log(x) + b *
	             Math.log(1 - x));
	  if (x < 0 || x > 1)
	    return false;
	  if (x < (a + 1) / (a + b + 2))
	    // Use continued fraction directly.
	    return bt * jStat.betacf(x, a, b) / a;
	  // else use continued fraction after making the symmetry transformation.
	  return 1 - bt * jStat.betacf(1 - x, b, a) / b;
	};


	// Returns a normal deviate (mu=0, sigma=1).
	// If n and m are specified it returns a object of normal deviates.
	jStat.randn = function randn(n, m) {
	  var u, v, x, y, q;
	  if (!m)
	    m = n;
	  if (n)
	    return jStat.create(n, m, function() { return jStat.randn(); });
	  do {
	    u = jStat._random_fn();
	    v = 1.7156 * (jStat._random_fn() - 0.5);
	    x = u - 0.449871;
	    y = Math.abs(v) + 0.386595;
	    q = x * x + y * (0.19600 * y - 0.25472 * x);
	  } while (q > 0.27597 && (q > 0.27846 || v * v > -4 * Math.log(u) * u * u));
	  return v / u;
	};


	// Returns a gamma deviate by the method of Marsaglia and Tsang.
	jStat.randg = function randg(shape, n, m) {
	  var oalph = shape;
	  var a1, a2, u, v, x, mat;
	  if (!m)
	    m = n;
	  if (!shape)
	    shape = 1;
	  if (n) {
	    mat = jStat.zeros(n,m);
	    mat.alter(function() { return jStat.randg(shape); });
	    return mat;
	  }
	  if (shape < 1)
	    shape += 1;
	  a1 = shape - 1 / 3;
	  a2 = 1 / Math.sqrt(9 * a1);
	  do {
	    do {
	      x = jStat.randn();
	      v = 1 + a2 * x;
	    } while(v <= 0);
	    v = v * v * v;
	    u = jStat._random_fn();
	  } while(u > 1 - 0.331 * Math.pow(x, 4) &&
	          Math.log(u) > 0.5 * x*x + a1 * (1 - v + Math.log(v)));
	  // alpha > 1
	  if (shape == oalph)
	    return a1 * v;
	  // alpha < 1
	  do {
	    u = jStat._random_fn();
	  } while(u === 0);
	  return Math.pow(u, 1 / oalph) * a1 * v;
	};


	// making use of static methods on the instance
	(function(funcs) {
	  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
	    jStat.fn[passfunc] = function() {
	      return jStat(
	          jStat.map(this, function(value) { return jStat[passfunc](value); }));
	    };
	  })(funcs[i]);
	})('gammaln gammafn factorial factorialln'.split(' '));


	(function(funcs) {
	  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
	    jStat.fn[passfunc] = function() {
	      return jStat(jStat[passfunc].apply(null, arguments));
	    };
	  })(funcs[i]);
	})('randn'.split(' '));

	}(jStat, Math));
	(function(jStat, Math) {

	// generate all distribution instance methods
	(function(list) {
	  for (var i = 0; i < list.length; i++) (function(func) {
	    // distribution instance method
	    jStat[func] = function f(a, b, c) {
	      if (!(this instanceof f))
	        return new f(a, b, c);
	      this._a = a;
	      this._b = b;
	      this._c = c;
	      return this;
	    };
	    // distribution method to be used on a jStat instance
	    jStat.fn[func] = function(a, b, c) {
	      var newthis = jStat[func](a, b, c);
	      newthis.data = this;
	      return newthis;
	    };
	    // sample instance method
	    jStat[func].prototype.sample = function(arr) {
	      var a = this._a;
	      var b = this._b;
	      var c = this._c;
	      if (arr)
	        return jStat.alter(arr, function() {
	          return jStat[func].sample(a, b, c);
	        });
	      else
	        return jStat[func].sample(a, b, c);
	    };
	    // generate the pdf, cdf and inv instance methods
	    (function(vals) {
	      for (var i = 0; i < vals.length; i++) (function(fnfunc) {
	        jStat[func].prototype[fnfunc] = function(x) {
	          var a = this._a;
	          var b = this._b;
	          var c = this._c;
	          if (!x && x !== 0)
	            x = this.data;
	          if (typeof x !== 'number') {
	            return jStat.fn.map.call(x, function(x) {
	              return jStat[func][fnfunc](x, a, b, c);
	            });
	          }
	          return jStat[func][fnfunc](x, a, b, c);
	        };
	      })(vals[i]);
	    })('pdf cdf inv'.split(' '));
	    // generate the mean, median, mode and variance instance methods
	    (function(vals) {
	      for (var i = 0; i < vals.length; i++) (function(fnfunc) {
	        jStat[func].prototype[fnfunc] = function() {
	          return jStat[func][fnfunc](this._a, this._b, this._c);
	        };
	      })(vals[i]);
	    })('mean median mode variance'.split(' '));
	  })(list[i]);
	})((
	  'beta centralF cauchy chisquare exponential gamma invgamma kumaraswamy ' +
	  'laplace lognormal noncentralt normal pareto studentt weibull uniform ' +
	  'binomial negbin hypgeom poisson triangular tukey arcsine'
	).split(' '));



	// extend beta function with static methods
	jStat.extend(jStat.beta, {
	  pdf: function pdf(x, alpha, beta) {
	    // PDF is zero outside the support
	    if (x > 1 || x < 0)
	      return 0;
	    // PDF is one for the uniform case
	    if (alpha == 1 && beta == 1)
	      return 1;

	    if (alpha < 512 && beta < 512) {
	      return (Math.pow(x, alpha - 1) * Math.pow(1 - x, beta - 1)) /
	          jStat.betafn(alpha, beta);
	    } else {
	      return Math.exp((alpha - 1) * Math.log(x) +
	                      (beta - 1) * Math.log(1 - x) -
	                      jStat.betaln(alpha, beta));
	    }
	  },

	  cdf: function cdf(x, alpha, beta) {
	    return (x > 1 || x < 0) ? (x > 1) * 1 : jStat.ibeta(x, alpha, beta);
	  },

	  inv: function inv(x, alpha, beta) {
	    return jStat.ibetainv(x, alpha, beta);
	  },

	  mean: function mean(alpha, beta) {
	    return alpha / (alpha + beta);
	  },

	  median: function median(alpha, beta) {
	    return jStat.ibetainv(0.5, alpha, beta);
	  },

	  mode: function mode(alpha, beta) {
	    return (alpha - 1 ) / ( alpha + beta - 2);
	  },

	  // return a random sample
	  sample: function sample(alpha, beta) {
	    var u = jStat.randg(alpha);
	    return u / (u + jStat.randg(beta));
	  },

	  variance: function variance(alpha, beta) {
	    return (alpha * beta) / (Math.pow(alpha + beta, 2) * (alpha + beta + 1));
	  }
	});

	// extend F function with static methods
	jStat.extend(jStat.centralF, {
	  // This implementation of the pdf function avoids float overflow
	  // See the way that R calculates this value:
	  // https://svn.r-project.org/R/trunk/src/nmath/df.c
	  pdf: function pdf(x, df1, df2) {
	    var p, q, f;

	    if (x < 0)
	      return 0;

	    if (df1 <= 2) {
	      if (x === 0 && df1 < 2) {
	        return Infinity;
	      }
	      if (x === 0 && df1 === 2) {
	        return 1;
	      }
	      return (1 / jStat.betafn(df1 / 2, df2 / 2)) *
	              Math.pow(df1 / df2, df1 / 2) *
	              Math.pow(x, (df1/2) - 1) *
	              Math.pow((1 + (df1 / df2) * x), -(df1 + df2) / 2);
	    }

	    p = (df1 * x) / (df2 + x * df1);
	    q = df2 / (df2 + x * df1);
	    f = df1 * q / 2.0;
	    return f * jStat.binomial.pdf((df1 - 2) / 2, (df1 + df2 - 2) / 2, p);
	  },

	  cdf: function cdf(x, df1, df2) {
	    if (x < 0)
	      return 0;
	    return jStat.ibeta((df1 * x) / (df1 * x + df2), df1 / 2, df2 / 2);
	  },

	  inv: function inv(x, df1, df2) {
	    return df2 / (df1 * (1 / jStat.ibetainv(x, df1 / 2, df2 / 2) - 1));
	  },

	  mean: function mean(df1, df2) {
	    return (df2 > 2) ? df2 / (df2 - 2) : undefined;
	  },

	  mode: function mode(df1, df2) {
	    return (df1 > 2) ? (df2 * (df1 - 2)) / (df1 * (df2 + 2)) : undefined;
	  },

	  // return a random sample
	  sample: function sample(df1, df2) {
	    var x1 = jStat.randg(df1 / 2) * 2;
	    var x2 = jStat.randg(df2 / 2) * 2;
	    return (x1 / df1) / (x2 / df2);
	  },

	  variance: function variance(df1, df2) {
	    if (df2 <= 4)
	      return undefined;
	    return 2 * df2 * df2 * (df1 + df2 - 2) /
	        (df1 * (df2 - 2) * (df2 - 2) * (df2 - 4));
	  }
	});


	// extend cauchy function with static methods
	jStat.extend(jStat.cauchy, {
	  pdf: function pdf(x, local, scale) {
	    if (scale < 0) { return 0; }

	    return (scale / (Math.pow(x - local, 2) + Math.pow(scale, 2))) / Math.PI;
	  },

	  cdf: function cdf(x, local, scale) {
	    return Math.atan((x - local) / scale) / Math.PI + 0.5;
	  },

	  inv: function(p, local, scale) {
	    return local + scale * Math.tan(Math.PI * (p - 0.5));
	  },

	  median: function median(local/*, scale*/) {
	    return local;
	  },

	  mode: function mode(local/*, scale*/) {
	    return local;
	  },

	  sample: function sample(local, scale) {
	    return jStat.randn() *
	        Math.sqrt(1 / (2 * jStat.randg(0.5))) * scale + local;
	  }
	});



	// extend chisquare function with static methods
	jStat.extend(jStat.chisquare, {
	  pdf: function pdf(x, dof) {
	    if (x < 0)
	      return 0;
	    return (x === 0 && dof === 2) ? 0.5 :
	        Math.exp((dof / 2 - 1) * Math.log(x) - x / 2 - (dof / 2) *
	                 Math.log(2) - jStat.gammaln(dof / 2));
	  },

	  cdf: function cdf(x, dof) {
	    if (x < 0)
	      return 0;
	    return jStat.lowRegGamma(dof / 2, x / 2);
	  },

	  inv: function(p, dof) {
	    return 2 * jStat.gammapinv(p, 0.5 * dof);
	  },

	  mean : function(dof) {
	    return dof;
	  },

	  // TODO: this is an approximation (is there a better way?)
	  median: function median(dof) {
	    return dof * Math.pow(1 - (2 / (9 * dof)), 3);
	  },

	  mode: function mode(dof) {
	    return (dof - 2 > 0) ? dof - 2 : 0;
	  },

	  sample: function sample(dof) {
	    return jStat.randg(dof / 2) * 2;
	  },

	  variance: function variance(dof) {
	    return 2 * dof;
	  }
	});



	// extend exponential function with static methods
	jStat.extend(jStat.exponential, {
	  pdf: function pdf(x, rate) {
	    return x < 0 ? 0 : rate * Math.exp(-rate * x);
	  },

	  cdf: function cdf(x, rate) {
	    return x < 0 ? 0 : 1 - Math.exp(-rate * x);
	  },

	  inv: function(p, rate) {
	    return -Math.log(1 - p) / rate;
	  },

	  mean : function(rate) {
	    return 1 / rate;
	  },

	  median: function (rate) {
	    return (1 / rate) * Math.log(2);
	  },

	  mode: function mode(/*rate*/) {
	    return 0;
	  },

	  sample: function sample(rate) {
	    return -1 / rate * Math.log(jStat._random_fn());
	  },

	  variance : function(rate) {
	    return Math.pow(rate, -2);
	  }
	});



	// extend gamma function with static methods
	jStat.extend(jStat.gamma, {
	  pdf: function pdf(x, shape, scale) {
	    if (x < 0)
	      return 0;
	    return (x === 0 && shape === 1) ? 1 / scale :
	            Math.exp((shape - 1) * Math.log(x) - x / scale -
	                    jStat.gammaln(shape) - shape * Math.log(scale));
	  },

	  cdf: function cdf(x, shape, scale) {
	    if (x < 0)
	      return 0;
	    return jStat.lowRegGamma(shape, x / scale);
	  },

	  inv: function(p, shape, scale) {
	    return jStat.gammapinv(p, shape) * scale;
	  },

	  mean : function(shape, scale) {
	    return shape * scale;
	  },

	  mode: function mode(shape, scale) {
	    if(shape > 1) return (shape - 1) * scale;
	    return undefined;
	  },

	  sample: function sample(shape, scale) {
	    return jStat.randg(shape) * scale;
	  },

	  variance: function variance(shape, scale) {
	    return shape * scale * scale;
	  }
	});

	// extend inverse gamma function with static methods
	jStat.extend(jStat.invgamma, {
	  pdf: function pdf(x, shape, scale) {
	    if (x <= 0)
	      return 0;
	    return Math.exp(-(shape + 1) * Math.log(x) - scale / x -
	                    jStat.gammaln(shape) + shape * Math.log(scale));
	  },

	  cdf: function cdf(x, shape, scale) {
	    if (x <= 0)
	      return 0;
	    return 1 - jStat.lowRegGamma(shape, scale / x);
	  },

	  inv: function(p, shape, scale) {
	    return scale / jStat.gammapinv(1 - p, shape);
	  },

	  mean : function(shape, scale) {
	    return (shape > 1) ? scale / (shape - 1) : undefined;
	  },

	  mode: function mode(shape, scale) {
	    return scale / (shape + 1);
	  },

	  sample: function sample(shape, scale) {
	    return scale / jStat.randg(shape);
	  },

	  variance: function variance(shape, scale) {
	    if (shape <= 2)
	      return undefined;
	    return scale * scale / ((shape - 1) * (shape - 1) * (shape - 2));
	  }
	});


	// extend kumaraswamy function with static methods
	jStat.extend(jStat.kumaraswamy, {
	  pdf: function pdf(x, alpha, beta) {
	    if (x === 0 && alpha === 1)
	      return beta;
	    else if (x === 1 && beta === 1)
	      return alpha;
	    return Math.exp(Math.log(alpha) + Math.log(beta) + (alpha - 1) *
	                    Math.log(x) + (beta - 1) *
	                    Math.log(1 - Math.pow(x, alpha)));
	  },

	  cdf: function cdf(x, alpha, beta) {
	    if (x < 0)
	      return 0;
	    else if (x > 1)
	      return 1;
	    return (1 - Math.pow(1 - Math.pow(x, alpha), beta));
	  },

	  inv: function inv(p, alpha, beta) {
	    return Math.pow(1 - Math.pow(1 - p, 1 / beta), 1 / alpha);
	  },

	  mean : function(alpha, beta) {
	    return (beta * jStat.gammafn(1 + 1 / alpha) *
	            jStat.gammafn(beta)) / (jStat.gammafn(1 + 1 / alpha + beta));
	  },

	  median: function median(alpha, beta) {
	    return Math.pow(1 - Math.pow(2, -1 / beta), 1 / alpha);
	  },

	  mode: function mode(alpha, beta) {
	    if (!(alpha >= 1 && beta >= 1 && (alpha !== 1 && beta !== 1)))
	      return undefined;
	    return Math.pow((alpha - 1) / (alpha * beta - 1), 1 / alpha);
	  },

	  variance: function variance(/*alpha, beta*/) {
	    throw new Error('variance not yet implemented');
	    // TODO: complete this
	  }
	});



	// extend lognormal function with static methods
	jStat.extend(jStat.lognormal, {
	  pdf: function pdf(x, mu, sigma) {
	    if (x <= 0)
	      return 0;
	    return Math.exp(-Math.log(x) - 0.5 * Math.log(2 * Math.PI) -
	                    Math.log(sigma) - Math.pow(Math.log(x) - mu, 2) /
	                    (2 * sigma * sigma));
	  },

	  cdf: function cdf(x, mu, sigma) {
	    if (x < 0)
	      return 0;
	    return 0.5 +
	        (0.5 * jStat.erf((Math.log(x) - mu) / Math.sqrt(2 * sigma * sigma)));
	  },

	  inv: function(p, mu, sigma) {
	    return Math.exp(-1.41421356237309505 * sigma * jStat.erfcinv(2 * p) + mu);
	  },

	  mean: function mean(mu, sigma) {
	    return Math.exp(mu + sigma * sigma / 2);
	  },

	  median: function median(mu/*, sigma*/) {
	    return Math.exp(mu);
	  },

	  mode: function mode(mu, sigma) {
	    return Math.exp(mu - sigma * sigma);
	  },

	  sample: function sample(mu, sigma) {
	    return Math.exp(jStat.randn() * sigma + mu);
	  },

	  variance: function variance(mu, sigma) {
	    return (Math.exp(sigma * sigma) - 1) * Math.exp(2 * mu + sigma * sigma);
	  }
	});



	// extend noncentralt function with static methods
	jStat.extend(jStat.noncentralt, {
	  pdf: function pdf(x, dof, ncp) {
	    var tol = 1e-14;
	    if (Math.abs(ncp) < tol)  // ncp approx 0; use student-t
	      return jStat.studentt.pdf(x, dof)

	    if (Math.abs(x) < tol) {  // different formula for x == 0
	      return Math.exp(jStat.gammaln((dof + 1) / 2) - ncp * ncp / 2 -
	                      0.5 * Math.log(Math.PI * dof) - jStat.gammaln(dof / 2));
	    }

	    // formula for x != 0
	    return dof / x *
	        (jStat.noncentralt.cdf(x * Math.sqrt(1 + 2 / dof), dof+2, ncp) -
	         jStat.noncentralt.cdf(x, dof, ncp));
	  },

	  cdf: function cdf(x, dof, ncp) {
	    var tol = 1e-14;
	    var min_iterations = 200;

	    if (Math.abs(ncp) < tol)  // ncp approx 0; use student-t
	      return jStat.studentt.cdf(x, dof);

	    // turn negative x into positive and flip result afterwards
	    var flip = false;
	    if (x < 0) {
	      flip = true;
	      ncp = -ncp;
	    }

	    var prob = jStat.normal.cdf(-ncp, 0, 1);
	    var value = tol + 1;
	    // use value at last two steps to determine convergence
	    var lastvalue = value;
	    var y = x * x / (x * x + dof);
	    var j = 0;
	    var p = Math.exp(-ncp * ncp / 2);
	    var q = Math.exp(-ncp * ncp / 2 - 0.5 * Math.log(2) -
	                     jStat.gammaln(3 / 2)) * ncp;
	    while (j < min_iterations || lastvalue > tol || value > tol) {
	      lastvalue = value;
	      if (j > 0) {
	        p *= (ncp * ncp) / (2 * j);
	        q *= (ncp * ncp) / (2 * (j + 1 / 2));
	      }
	      value = p * jStat.beta.cdf(y, j + 0.5, dof / 2) +
	          q * jStat.beta.cdf(y, j+1, dof/2);
	      prob += 0.5 * value;
	      j++;
	    }

	    return flip ? (1 - prob) : prob;
	  }
	});


	// extend normal function with static methods
	jStat.extend(jStat.normal, {
	  pdf: function pdf(x, mean, std) {
	    return Math.exp(-0.5 * Math.log(2 * Math.PI) -
	                    Math.log(std) - Math.pow(x - mean, 2) / (2 * std * std));
	  },

	  cdf: function cdf(x, mean, std) {
	    return 0.5 * (1 + jStat.erf((x - mean) / Math.sqrt(2 * std * std)));
	  },

	  inv: function(p, mean, std) {
	    return -1.41421356237309505 * std * jStat.erfcinv(2 * p) + mean;
	  },

	  mean : function(mean/*, std*/) {
	    return mean;
	  },

	  median: function median(mean/*, std*/) {
	    return mean;
	  },

	  mode: function (mean/*, std*/) {
	    return mean;
	  },

	  sample: function sample(mean, std) {
	    return jStat.randn() * std + mean;
	  },

	  variance : function(mean, std) {
	    return std * std;
	  }
	});



	// extend pareto function with static methods
	jStat.extend(jStat.pareto, {
	  pdf: function pdf(x, scale, shape) {
	    if (x < scale)
	      return 0;
	    return (shape * Math.pow(scale, shape)) / Math.pow(x, shape + 1);
	  },

	  cdf: function cdf(x, scale, shape) {
	    if (x < scale)
	      return 0;
	    return 1 - Math.pow(scale / x, shape);
	  },

	  inv: function inv(p, scale, shape) {
	    return scale / Math.pow(1 - p, 1 / shape);
	  },

	  mean: function mean(scale, shape) {
	    if (shape <= 1)
	      return undefined;
	    return (shape * Math.pow(scale, shape)) / (shape - 1);
	  },

	  median: function median(scale, shape) {
	    return scale * (shape * Math.SQRT2);
	  },

	  mode: function mode(scale/*, shape*/) {
	    return scale;
	  },

	  variance : function(scale, shape) {
	    if (shape <= 2)
	      return undefined;
	    return (scale*scale * shape) / (Math.pow(shape - 1, 2) * (shape - 2));
	  }
	});



	// extend studentt function with static methods
	jStat.extend(jStat.studentt, {
	  pdf: function pdf(x, dof) {
	    dof = dof > 1e100 ? 1e100 : dof;
	    return (1/(Math.sqrt(dof) * jStat.betafn(0.5, dof/2))) *
	        Math.pow(1 + ((x * x) / dof), -((dof + 1) / 2));
	  },

	  cdf: function cdf(x, dof) {
	    var dof2 = dof / 2;
	    return jStat.ibeta((x + Math.sqrt(x * x + dof)) /
	                       (2 * Math.sqrt(x * x + dof)), dof2, dof2);
	  },

	  inv: function(p, dof) {
	    var x = jStat.ibetainv(2 * Math.min(p, 1 - p), 0.5 * dof, 0.5);
	    x = Math.sqrt(dof * (1 - x) / x);
	    return (p > 0.5) ? x : -x;
	  },

	  mean: function mean(dof) {
	    return (dof > 1) ? 0 : undefined;
	  },

	  median: function median(/*dof*/) {
	    return 0;
	  },

	  mode: function mode(/*dof*/) {
	    return 0;
	  },

	  sample: function sample(dof) {
	    return jStat.randn() * Math.sqrt(dof / (2 * jStat.randg(dof / 2)));
	  },

	  variance: function variance(dof) {
	    return (dof  > 2) ? dof / (dof - 2) : (dof > 1) ? Infinity : undefined;
	  }
	});



	// extend weibull function with static methods
	jStat.extend(jStat.weibull, {
	  pdf: function pdf(x, scale, shape) {
	    if (x < 0 || scale < 0 || shape < 0)
	      return 0;
	    return (shape / scale) * Math.pow((x / scale), (shape - 1)) *
	        Math.exp(-(Math.pow((x / scale), shape)));
	  },

	  cdf: function cdf(x, scale, shape) {
	    return x < 0 ? 0 : 1 - Math.exp(-Math.pow((x / scale), shape));
	  },

	  inv: function(p, scale, shape) {
	    return scale * Math.pow(-Math.log(1 - p), 1 / shape);
	  },

	  mean : function(scale, shape) {
	    return scale * jStat.gammafn(1 + 1 / shape);
	  },

	  median: function median(scale, shape) {
	    return scale * Math.pow(Math.log(2), 1 / shape);
	  },

	  mode: function mode(scale, shape) {
	    if (shape <= 1)
	      return 0;
	    return scale * Math.pow((shape - 1) / shape, 1 / shape);
	  },

	  sample: function sample(scale, shape) {
	    return scale * Math.pow(-Math.log(jStat._random_fn()), 1 / shape);
	  },

	  variance: function variance(scale, shape) {
	    return scale * scale * jStat.gammafn(1 + 2 / shape) -
	        Math.pow(jStat.weibull.mean(scale, shape), 2);
	  }
	});



	// extend uniform function with static methods
	jStat.extend(jStat.uniform, {
	  pdf: function pdf(x, a, b) {
	    return (x < a || x > b) ? 0 : 1 / (b - a);
	  },

	  cdf: function cdf(x, a, b) {
	    if (x < a)
	      return 0;
	    else if (x < b)
	      return (x - a) / (b - a);
	    return 1;
	  },

	  inv: function(p, a, b) {
	    return a + (p * (b - a));
	  },

	  mean: function mean(a, b) {
	    return 0.5 * (a + b);
	  },

	  median: function median(a, b) {
	    return jStat.mean(a, b);
	  },

	  mode: function mode(/*a, b*/) {
	    throw new Error('mode is not yet implemented');
	  },

	  sample: function sample(a, b) {
	    return (a / 2 + b / 2) + (b / 2 - a / 2) * (2 * jStat._random_fn() - 1);
	  },

	  variance: function variance(a, b) {
	    return Math.pow(b - a, 2) / 12;
	  }
	});


	// Got this from http://www.math.ucla.edu/~tom/distributions/binomial.html
	function betinc(x, a, b, eps) {
	  var a0 = 0;
	  var b0 = 1;
	  var a1 = 1;
	  var b1 = 1;
	  var m9 = 0;
	  var a2 = 0;
	  var c9;

	  while (Math.abs((a1 - a2) / a1) > eps) {
	    a2 = a1;
	    c9 = -(a + m9) * (a + b + m9) * x / (a + 2 * m9) / (a + 2 * m9 + 1);
	    a0 = a1 + c9 * a0;
	    b0 = b1 + c9 * b0;
	    m9 = m9 + 1;
	    c9 = m9 * (b - m9) * x / (a + 2 * m9 - 1) / (a + 2 * m9);
	    a1 = a0 + c9 * a1;
	    b1 = b0 + c9 * b1;
	    a0 = a0 / b1;
	    b0 = b0 / b1;
	    a1 = a1 / b1;
	    b1 = 1;
	  }

	  return a1 / a;
	}


	// extend uniform function with static methods
	jStat.extend(jStat.binomial, {
	  pdf: function pdf(k, n, p) {
	    return (p === 0 || p === 1) ?
	      ((n * p) === k ? 1 : 0) :
	      jStat.combination(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);
	  },

	  cdf: function cdf(x, n, p) {
	    var betacdf;
	    var eps = 1e-10;

	    if (x < 0)
	      return 0;
	    if (x >= n)
	      return 1;
	    if (p < 0 || p > 1 || n <= 0)
	      return NaN;

	    x = Math.floor(x);
	    var z = p;
	    var a = x + 1;
	    var b = n - x;
	    var s = a + b;
	    var bt = Math.exp(jStat.gammaln(s) - jStat.gammaln(b) -
	                      jStat.gammaln(a) + a * Math.log(z) + b * Math.log(1 - z));

	    if (z < (a + 1) / (s + 2))
	      betacdf = bt * betinc(z, a, b, eps);
	    else
	      betacdf = 1 - bt * betinc(1 - z, b, a, eps);

	    return Math.round((1 - betacdf) * (1 / eps)) / (1 / eps);
	  }
	});



	// extend uniform function with static methods
	jStat.extend(jStat.negbin, {
	  pdf: function pdf(k, r, p) {
	    if (k !== k >>> 0)
	      return false;
	    if (k < 0)
	      return 0;
	    return jStat.combination(k + r - 1, r - 1) *
	        Math.pow(1 - p, k) * Math.pow(p, r);
	  },

	  cdf: function cdf(x, r, p) {
	    var sum = 0,
	    k = 0;
	    if (x < 0) return 0;
	    for (; k <= x; k++) {
	      sum += jStat.negbin.pdf(k, r, p);
	    }
	    return sum;
	  }
	});



	// extend uniform function with static methods
	jStat.extend(jStat.hypgeom, {
	  pdf: function pdf(k, N, m, n) {
	    // Hypergeometric PDF.

	    // A simplification of the CDF algorithm below.

	    // k = number of successes drawn
	    // N = population size
	    // m = number of successes in population
	    // n = number of items drawn from population

	    if(k !== k | 0) {
	      return false;
	    } else if(k < 0 || k < m - (N - n)) {
	      // It's impossible to have this few successes drawn.
	      return 0;
	    } else if(k > n || k > m) {
	      // It's impossible to have this many successes drawn.
	      return 0;
	    } else if (m * 2 > N) {
	      // More than half the population is successes.

	      if(n * 2 > N) {
	        // More than half the population is sampled.

	        return jStat.hypgeom.pdf(N - m - n + k, N, N - m, N - n)
	      } else {
	        // Half or less of the population is sampled.

	        return jStat.hypgeom.pdf(n - k, N, N - m, n);
	      }

	    } else if(n * 2 > N) {
	      // Half or less is successes.

	      return jStat.hypgeom.pdf(m - k, N, m, N - n);

	    } else if(m < n) {
	      // We want to have the number of things sampled to be less than the
	      // successes available. So swap the definitions of successful and sampled.
	      return jStat.hypgeom.pdf(k, N, n, m);
	    } else {
	      // If we get here, half or less of the population was sampled, half or
	      // less of it was successes, and we had fewer sampled things than
	      // successes. Now we can do this complicated iterative algorithm in an
	      // efficient way.

	      // The basic premise of the algorithm is that we partially normalize our
	      // intermediate product to keep it in a numerically good region, and then
	      // finish the normalization at the end.

	      // This variable holds the scaled probability of the current number of
	      // successes.
	      var scaledPDF = 1;

	      // This keeps track of how much we have normalized.
	      var samplesDone = 0;

	      for(var i = 0; i < k; i++) {
	        // For every possible number of successes up to that observed...

	        while(scaledPDF > 1 && samplesDone < n) {
	          // Intermediate result is growing too big. Apply some of the
	          // normalization to shrink everything.

	          scaledPDF *= 1 - (m / (N - samplesDone));

	          // Say we've normalized by this sample already.
	          samplesDone++;
	        }

	        // Work out the partially-normalized hypergeometric PDF for the next
	        // number of successes
	        scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));
	      }

	      for(; samplesDone < n; samplesDone++) {
	        // Apply all the rest of the normalization
	        scaledPDF *= 1 - (m / (N - samplesDone));
	      }

	      // Bound answer sanely before returning.
	      return Math.min(1, Math.max(0, scaledPDF));
	    }
	  },

	  cdf: function cdf(x, N, m, n) {
	    // Hypergeometric CDF.

	    // This algorithm is due to Prof. Thomas S. Ferguson, <tom@math.ucla.edu>,
	    // and comes from his hypergeometric test calculator at
	    // <http://www.math.ucla.edu/~tom/distributions/Hypergeometric.html>.

	    // x = number of successes drawn
	    // N = population size
	    // m = number of successes in population
	    // n = number of items drawn from population

	    if(x < 0 || x < m - (N - n)) {
	      // It's impossible to have this few successes drawn or fewer.
	      return 0;
	    } else if(x >= n || x >= m) {
	      // We will always have this many successes or fewer.
	      return 1;
	    } else if (m * 2 > N) {
	      // More than half the population is successes.

	      if(n * 2 > N) {
	        // More than half the population is sampled.

	        return jStat.hypgeom.cdf(N - m - n + x, N, N - m, N - n)
	      } else {
	        // Half or less of the population is sampled.

	        return 1 - jStat.hypgeom.cdf(n - x - 1, N, N - m, n);
	      }

	    } else if(n * 2 > N) {
	      // Half or less is successes.

	      return 1 - jStat.hypgeom.cdf(m - x - 1, N, m, N - n);

	    } else if(m < n) {
	      // We want to have the number of things sampled to be less than the
	      // successes available. So swap the definitions of successful and sampled.
	      return jStat.hypgeom.cdf(x, N, n, m);
	    } else {
	      // If we get here, half or less of the population was sampled, half or
	      // less of it was successes, and we had fewer sampled things than
	      // successes. Now we can do this complicated iterative algorithm in an
	      // efficient way.

	      // The basic premise of the algorithm is that we partially normalize our
	      // intermediate sum to keep it in a numerically good region, and then
	      // finish the normalization at the end.

	      // Holds the intermediate, scaled total CDF.
	      var scaledCDF = 1;

	      // This variable holds the scaled probability of the current number of
	      // successes.
	      var scaledPDF = 1;

	      // This keeps track of how much we have normalized.
	      var samplesDone = 0;

	      for(var i = 0; i < x; i++) {
	        // For every possible number of successes up to that observed...

	        while(scaledCDF > 1 && samplesDone < n) {
	          // Intermediate result is growing too big. Apply some of the
	          // normalization to shrink everything.

	          var factor = 1 - (m / (N - samplesDone));

	          scaledPDF *= factor;
	          scaledCDF *= factor;

	          // Say we've normalized by this sample already.
	          samplesDone++;
	        }

	        // Work out the partially-normalized hypergeometric PDF for the next
	        // number of successes
	        scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));

	        // Add to the CDF answer.
	        scaledCDF += scaledPDF;
	      }

	      for(; samplesDone < n; samplesDone++) {
	        // Apply all the rest of the normalization
	        scaledCDF *= 1 - (m / (N - samplesDone));
	      }

	      // Bound answer sanely before returning.
	      return Math.min(1, Math.max(0, scaledCDF));
	    }
	  }
	});



	// extend uniform function with static methods
	jStat.extend(jStat.poisson, {
	  pdf: function pdf(k, l) {
	    if (l < 0 || (k % 1) !== 0 || k < 0) {
	      return 0;
	    }

	    return Math.pow(l, k) * Math.exp(-l) / jStat.factorial(k);
	  },

	  cdf: function cdf(x, l) {
	    var sumarr = [],
	    k = 0;
	    if (x < 0) return 0;
	    for (; k <= x; k++) {
	      sumarr.push(jStat.poisson.pdf(k, l));
	    }
	    return jStat.sum(sumarr);
	  },

	  mean : function(l) {
	    return l;
	  },

	  variance : function(l) {
	    return l;
	  },

	  sampleSmall: function sampleSmall(l) {
	    var p = 1, k = 0, L = Math.exp(-l);
	    do {
	      k++;
	      p *= jStat._random_fn();
	    } while (p > L);
	    return k - 1;
	  },

	  sampleLarge: function sampleLarge(l) {
	    var lam = l;
	    var k;
	    var U, V, slam, loglam, a, b, invalpha, vr, us;

	    slam = Math.sqrt(lam);
	    loglam = Math.log(lam);
	    b = 0.931 + 2.53 * slam;
	    a = -0.059 + 0.02483 * b;
	    invalpha = 1.1239 + 1.1328 / (b - 3.4);
	    vr = 0.9277 - 3.6224 / (b - 2);

	    while (1) {
	      U = Math.random() - 0.5;
	      V = Math.random();
	      us = 0.5 - Math.abs(U);
	      k = Math.floor((2 * a / us + b) * U + lam + 0.43);
	      if ((us >= 0.07) && (V <= vr)) {
	          return k;
	      }
	      if ((k < 0) || ((us < 0.013) && (V > us))) {
	          continue;
	      }
	      /* log(V) == log(0.0) ok here */
	      /* if U==0.0 so that us==0.0, log is ok since always returns */
	      if ((Math.log(V) + Math.log(invalpha) - Math.log(a / (us * us) + b)) <= (-lam + k * loglam - jStat.loggam(k + 1))) {
	          return k;
	      }
	    }
	  },

	  sample: function sample(l) {
	    if (l < 10)
	      return this.sampleSmall(l);
	    else
	      return this.sampleLarge(l);
	  }
	});

	// extend triangular function with static methods
	jStat.extend(jStat.triangular, {
	  pdf: function pdf(x, a, b, c) {
	    if (b <= a || c < a || c > b) {
	      return NaN;
	    } else {
	      if (x < a || x > b) {
	        return 0;
	      } else if (x < c) {
	          return (2 * (x - a)) / ((b - a) * (c - a));
	      } else if (x === c) {
	          return (2 / (b - a));
	      } else { // x > c
	          return (2 * (b - x)) / ((b - a) * (b - c));
	      }
	    }
	  },

	  cdf: function cdf(x, a, b, c) {
	    if (b <= a || c < a || c > b)
	      return NaN;
	    if (x <= a)
	      return 0;
	    else if (x >= b)
	      return 1;
	    if (x <= c)
	      return Math.pow(x - a, 2) / ((b - a) * (c - a));
	    else // x > c
	      return 1 - Math.pow(b - x, 2) / ((b - a) * (b - c));
	  },

	  inv: function inv(p, a, b, c) {
	    if (b <= a || c < a || c > b) {
	      return NaN;
	    } else {
	      if (p <= ((c - a) / (b - a))) {
	        return a + (b - a) * Math.sqrt(p * ((c - a) / (b - a)));
	      } else { // p > ((c - a) / (b - a))
	        return a + (b - a) * (1 - Math.sqrt((1 - p) * (1 - ((c - a) / (b - a)))));
	      }
	    }
	  },

	  mean: function mean(a, b, c) {
	    return (a + b + c) / 3;
	  },

	  median: function median(a, b, c) {
	    if (c <= (a + b) / 2) {
	      return b - Math.sqrt((b - a) * (b - c)) / Math.sqrt(2);
	    } else if (c > (a + b) / 2) {
	      return a + Math.sqrt((b - a) * (c - a)) / Math.sqrt(2);
	    }
	  },

	  mode: function mode(a, b, c) {
	    return c;
	  },

	  sample: function sample(a, b, c) {
	    var u = jStat._random_fn();
	    if (u < ((c - a) / (b - a)))
	      return a + Math.sqrt(u * (b - a) * (c - a))
	    return b - Math.sqrt((1 - u) * (b - a) * (b - c));
	  },

	  variance: function variance(a, b, c) {
	    return (a * a + b * b + c * c - a * b - a * c - b * c) / 18;
	  }
	});


	// extend arcsine function with static methods
	jStat.extend(jStat.arcsine, {
	  pdf: function pdf(x, a, b) {
	    if (b <= a) return NaN;

	    return (x <= a || x >= b) ? 0 :
	      (2 / Math.PI) *
	        Math.pow(Math.pow(b - a, 2) -
	                  Math.pow(2 * x - a - b, 2), -0.5);
	  },

	  cdf: function cdf(x, a, b) {
	    if (x < a)
	      return 0;
	    else if (x < b)
	      return (2 / Math.PI) * Math.asin(Math.sqrt((x - a)/(b - a)));
	    return 1;
	  },

	  inv: function(p, a, b) {
	    return a + (0.5 - 0.5 * Math.cos(Math.PI * p)) * (b - a);
	  },

	  mean: function mean(a, b) {
	    if (b <= a) return NaN;
	    return (a + b) / 2;
	  },

	  median: function median(a, b) {
	    if (b <= a) return NaN;
	    return (a + b) / 2;
	  },

	  mode: function mode(/*a, b*/) {
	    throw new Error('mode is not yet implemented');
	  },

	  sample: function sample(a, b) {
	    return ((a + b) / 2) + ((b - a) / 2) *
	      Math.sin(2 * Math.PI * jStat.uniform.sample(0, 1));
	  },

	  variance: function variance(a, b) {
	    if (b <= a) return NaN;
	    return Math.pow(b - a, 2) / 8;
	  }
	});


	function laplaceSign(x) { return x / Math.abs(x); }

	jStat.extend(jStat.laplace, {
	  pdf: function pdf(x, mu, b) {
	    return (b <= 0) ? 0 : (Math.exp(-Math.abs(x - mu) / b)) / (2 * b);
	  },

	  cdf: function cdf(x, mu, b) {
	    if (b <= 0) { return 0; }

	    if(x < mu) {
	      return 0.5 * Math.exp((x - mu) / b);
	    } else {
	      return 1 - 0.5 * Math.exp(- (x - mu) / b);
	    }
	  },

	  mean: function(mu/*, b*/) {
	    return mu;
	  },

	  median: function(mu/*, b*/) {
	    return mu;
	  },

	  mode: function(mu/*, b*/) {
	    return mu;
	  },

	  variance: function(mu, b) {
	    return 2 * b * b;
	  },

	  sample: function sample(mu, b) {
	    var u = jStat._random_fn() - 0.5;

	    return mu - (b * laplaceSign(u) * Math.log(1 - (2 * Math.abs(u))));
	  }
	});

	function tukeyWprob(w, rr, cc) {
	  var nleg = 12;
	  var ihalf = 6;

	  var C1 = -30;
	  var C2 = -50;
	  var C3 = 60;
	  var bb   = 8;
	  var wlar = 3;
	  var wincr1 = 2;
	  var wincr2 = 3;
	  var xleg = [
	    0.981560634246719250690549090149,
	    0.904117256370474856678465866119,
	    0.769902674194304687036893833213,
	    0.587317954286617447296702418941,
	    0.367831498998180193752691536644,
	    0.125233408511468915472441369464
	  ];
	  var aleg = [
	    0.047175336386511827194615961485,
	    0.106939325995318430960254718194,
	    0.160078328543346226334652529543,
	    0.203167426723065921749064455810,
	    0.233492536538354808760849898925,
	    0.249147045813402785000562436043
	  ];

	  var qsqz = w * 0.5;

	  // if w >= 16 then the integral lower bound (occurs for c=20)
	  // is 0.99999999999995 so return a value of 1.

	  if (qsqz >= bb)
	    return 1.0;

	  // find (f(w/2) - 1) ^ cc
	  // (first term in integral of hartley's form).

	  var pr_w = 2 * jStat.normal.cdf(qsqz, 0, 1, 1, 0) - 1; // erf(qsqz / M_SQRT2)
	  // if pr_w ^ cc < 2e-22 then set pr_w = 0
	  if (pr_w >= Math.exp(C2 / cc))
	    pr_w = Math.pow(pr_w, cc);
	  else
	    pr_w = 0.0;

	  // if w is large then the second component of the
	  // integral is small, so fewer intervals are needed.

	  var wincr;
	  if (w > wlar)
	    wincr = wincr1;
	  else
	    wincr = wincr2;

	  // find the integral of second term of hartley's form
	  // for the integral of the range for equal-length
	  // intervals using legendre quadrature.  limits of
	  // integration are from (w/2, 8).  two or three
	  // equal-length intervals are used.

	  // blb and bub are lower and upper limits of integration.

	  var blb = qsqz;
	  var binc = (bb - qsqz) / wincr;
	  var bub = blb + binc;
	  var einsum = 0.0;

	  // integrate over each interval

	  var cc1 = cc - 1.0;
	  for (var wi = 1; wi <= wincr; wi++) {
	    var elsum = 0.0;
	    var a = 0.5 * (bub + blb);

	    // legendre quadrature with order = nleg

	    var b = 0.5 * (bub - blb);

	    for (var jj = 1; jj <= nleg; jj++) {
	      var j, xx;
	      if (ihalf < jj) {
	        j = (nleg - jj) + 1;
	        xx = xleg[j-1];
	      } else {
	        j = jj;
	        xx = -xleg[j-1];
	      }
	      var c = b * xx;
	      var ac = a + c;

	      // if exp(-qexpo/2) < 9e-14,
	      // then doesn't contribute to integral

	      var qexpo = ac * ac;
	      if (qexpo > C3)
	        break;

	      var pplus = 2 * jStat.normal.cdf(ac, 0, 1, 1, 0);
	      var pminus= 2 * jStat.normal.cdf(ac, w, 1, 1, 0);

	      // if rinsum ^ (cc-1) < 9e-14,
	      // then doesn't contribute to integral

	      var rinsum = (pplus * 0.5) - (pminus * 0.5);
	      if (rinsum >= Math.exp(C1 / cc1)) {
	        rinsum = (aleg[j-1] * Math.exp(-(0.5 * qexpo))) * Math.pow(rinsum, cc1);
	        elsum += rinsum;
	      }
	    }
	    elsum *= (((2.0 * b) * cc) / Math.sqrt(2 * Math.PI));
	    einsum += elsum;
	    blb = bub;
	    bub += binc;
	  }

	  // if pr_w ^ rr < 9e-14, then return 0
	  pr_w += einsum;
	  if (pr_w <= Math.exp(C1 / rr))
	    return 0;

	  pr_w = Math.pow(pr_w, rr);
	  if (pr_w >= 1) // 1 was iMax was eps
	    return 1;
	  return pr_w;
	}

	function tukeyQinv(p, c, v) {
	  var p0 = 0.322232421088;
	  var q0 = 0.993484626060e-01;
	  var p1 = -1.0;
	  var q1 = 0.588581570495;
	  var p2 = -0.342242088547;
	  var q2 = 0.531103462366;
	  var p3 = -0.204231210125;
	  var q3 = 0.103537752850;
	  var p4 = -0.453642210148e-04;
	  var q4 = 0.38560700634e-02;
	  var c1 = 0.8832;
	  var c2 = 0.2368;
	  var c3 = 1.214;
	  var c4 = 1.208;
	  var c5 = 1.4142;
	  var vmax = 120.0;

	  var ps = 0.5 - 0.5 * p;
	  var yi = Math.sqrt(Math.log(1.0 / (ps * ps)));
	  var t = yi + (((( yi * p4 + p3) * yi + p2) * yi + p1) * yi + p0)
	     / (((( yi * q4 + q3) * yi + q2) * yi + q1) * yi + q0);
	  if (v < vmax) t += (t * t * t + t) / v / 4.0;
	  var q = c1 - c2 * t;
	  if (v < vmax) q += -c3 / v + c4 * t / v;
	  return t * (q * Math.log(c - 1.0) + c5);
	}

	jStat.extend(jStat.tukey, {
	  cdf: function cdf(q, nmeans, df) {
	    // Identical implementation as the R ptukey() function as of commit 68947
	    var rr = 1;
	    var cc = nmeans;

	    var nlegq = 16;
	    var ihalfq = 8;

	    var eps1 = -30.0;
	    var eps2 = 1.0e-14;
	    var dhaf  = 100.0;
	    var dquar = 800.0;
	    var deigh = 5000.0;
	    var dlarg = 25000.0;
	    var ulen1 = 1.0;
	    var ulen2 = 0.5;
	    var ulen3 = 0.25;
	    var ulen4 = 0.125;
	    var xlegq = [
	      0.989400934991649932596154173450,
	      0.944575023073232576077988415535,
	      0.865631202387831743880467897712,
	      0.755404408355003033895101194847,
	      0.617876244402643748446671764049,
	      0.458016777657227386342419442984,
	      0.281603550779258913230460501460,
	      0.950125098376374401853193354250e-1
	    ];
	    var alegq = [
	      0.271524594117540948517805724560e-1,
	      0.622535239386478928628438369944e-1,
	      0.951585116824927848099251076022e-1,
	      0.124628971255533872052476282192,
	      0.149595988816576732081501730547,
	      0.169156519395002538189312079030,
	      0.182603415044923588866763667969,
	      0.189450610455068496285396723208
	    ];

	    if (q <= 0)
	      return 0;

	    // df must be > 1
	    // there must be at least two values

	    if (df < 2 || rr < 1 || cc < 2) return NaN;

	    if (!Number.isFinite(q))
	      return 1;

	    if (df > dlarg)
	      return tukeyWprob(q, rr, cc);

	    // calculate leading constant

	    var f2 = df * 0.5;
	    var f2lf = ((f2 * Math.log(df)) - (df * Math.log(2))) - jStat.gammaln(f2);
	    var f21 = f2 - 1.0;

	    // integral is divided into unit, half-unit, quarter-unit, or
	    // eighth-unit length intervals depending on the value of the
	    // degrees of freedom.

	    var ff4 = df * 0.25;
	    var ulen;
	    if      (df <= dhaf)  ulen = ulen1;
	    else if (df <= dquar) ulen = ulen2;
	    else if (df <= deigh) ulen = ulen3;
	    else                  ulen = ulen4;

	    f2lf += Math.log(ulen);

	    // integrate over each subinterval

	    var ans = 0.0;

	    for (var i = 1; i <= 50; i++) {
	      var otsum = 0.0;

	      // legendre quadrature with order = nlegq
	      // nodes (stored in xlegq) are symmetric around zero.

	      var twa1 = (2 * i - 1) * ulen;

	      for (var jj = 1; jj <= nlegq; jj++) {
	        var j, t1;
	        if (ihalfq < jj) {
	          j = jj - ihalfq - 1;
	          t1 = (f2lf + (f21 * Math.log(twa1 + (xlegq[j] * ulen))))
	              - (((xlegq[j] * ulen) + twa1) * ff4);
	        } else {
	          j = jj - 1;
	          t1 = (f2lf + (f21 * Math.log(twa1 - (xlegq[j] * ulen))))
	              + (((xlegq[j] * ulen) - twa1) * ff4);
	        }

	        // if exp(t1) < 9e-14, then doesn't contribute to integral
	        var qsqz;
	        if (t1 >= eps1) {
	          if (ihalfq < jj) {
	            qsqz = q * Math.sqrt(((xlegq[j] * ulen) + twa1) * 0.5);
	          } else {
	            qsqz = q * Math.sqrt(((-(xlegq[j] * ulen)) + twa1) * 0.5);
	          }

	          // call wprob to find integral of range portion

	          var wprb = tukeyWprob(qsqz, rr, cc);
	          var rotsum = (wprb * alegq[j]) * Math.exp(t1);
	          otsum += rotsum;
	        }
	        // end legendre integral for interval i
	        // L200:
	      }

	      // if integral for interval i < 1e-14, then stop.
	      // However, in order to avoid small area under left tail,
	      // at least  1 / ulen  intervals are calculated.
	      if (i * ulen >= 1.0 && otsum <= eps2)
	        break;

	      // end of interval i
	      // L330:

	      ans += otsum;
	    }

	    if (otsum > eps2) { // not converged
	      throw new Error('tukey.cdf failed to converge');
	    }
	    if (ans > 1)
	      ans = 1;
	    return ans;
	  },

	  inv: function(p, nmeans, df) {
	    // Identical implementation as the R qtukey() function as of commit 68947
	    var rr = 1;
	    var cc = nmeans;

	    var eps = 0.0001;
	    var maxiter = 50;

	    // df must be > 1 ; there must be at least two values
	    if (df < 2 || rr < 1 || cc < 2) return NaN;

	    if (p < 0 || p > 1) return NaN;
	    if (p === 0) return 0;
	    if (p === 1) return Infinity;

	    // Initial value

	    var x0 = tukeyQinv(p, cc, df);

	    // Find prob(value < x0)

	    var valx0 = jStat.tukey.cdf(x0, nmeans, df) - p;

	    // Find the second iterate and prob(value < x1).
	    // If the first iterate has probability value
	    // exceeding p then second iterate is 1 less than
	    // first iterate; otherwise it is 1 greater.

	    var x1;
	    if (valx0 > 0.0)
	      x1 = Math.max(0.0, x0 - 1.0);
	    else
	      x1 = x0 + 1.0;
	    var valx1 = jStat.tukey.cdf(x1, nmeans, df) - p;

	    // Find new iterate

	    var ans;
	    for(var iter = 1; iter < maxiter; iter++) {
	      ans = x1 - ((valx1 * (x1 - x0)) / (valx1 - valx0));
	      valx0 = valx1;

	      // New iterate must be >= 0

	      x0 = x1;
	      if (ans < 0.0) {
	        ans = 0.0;
	        valx1 = -p;
	      }
	      // Find prob(value < new iterate)

	      valx1 = jStat.tukey.cdf(ans, nmeans, df) - p;
	      x1 = ans;

	      // If the difference between two successive
	      // iterates is less than eps, stop

	      var xabs = Math.abs(x1 - x0);
	      if (xabs < eps)
	        return ans;
	    }

	    throw new Error('tukey.inv failed to converge');
	  }
	});

	}(jStat, Math));
	/* Provides functions for the solution of linear system of equations, integration, extrapolation,
	 * interpolation, eigenvalue problems, differential equations and PCA analysis. */

	(function(jStat, Math) {

	var push = Array.prototype.push;
	var isArray = jStat.utils.isArray;

	function isUsable(arg) {
	  return isArray(arg) || arg instanceof jStat;
	}

	jStat.extend({

	  // add a vector/matrix to a vector/matrix or scalar
	  add: function add(arr, arg) {
	    // check if arg is a vector or scalar
	    if (isUsable(arg)) {
	      if (!isUsable(arg[0])) arg = [ arg ];
	      return jStat.map(arr, function(value, row, col) {
	        return value + arg[row][col];
	      });
	    }
	    return jStat.map(arr, function(value) { return value + arg; });
	  },

	  // subtract a vector or scalar from the vector
	  subtract: function subtract(arr, arg) {
	    // check if arg is a vector or scalar
	    if (isUsable(arg)) {
	      if (!isUsable(arg[0])) arg = [ arg ];
	      return jStat.map(arr, function(value, row, col) {
	        return value - arg[row][col] || 0;
	      });
	    }
	    return jStat.map(arr, function(value) { return value - arg; });
	  },

	  // matrix division
	  divide: function divide(arr, arg) {
	    if (isUsable(arg)) {
	      if (!isUsable(arg[0])) arg = [ arg ];
	      return jStat.multiply(arr, jStat.inv(arg));
	    }
	    return jStat.map(arr, function(value) { return value / arg; });
	  },

	  // matrix multiplication
	  multiply: function multiply(arr, arg) {
	    var row, col, nrescols, sum, nrow, ncol, res, rescols;
	    // eg: arr = 2 arg = 3 -> 6 for res[0][0] statement closure
	    if (arr.length === undefined && arg.length === undefined) {
	      return arr * arg;
	    }
	    nrow = arr.length,
	    ncol = arr[0].length,
	    res = jStat.zeros(nrow, nrescols = (isUsable(arg)) ? arg[0].length : ncol),
	    rescols = 0;
	    if (isUsable(arg)) {
	      for (; rescols < nrescols; rescols++) {
	        for (row = 0; row < nrow; row++) {
	          sum = 0;
	          for (col = 0; col < ncol; col++)
	          sum += arr[row][col] * arg[col][rescols];
	          res[row][rescols] = sum;
	        }
	      }
	      return (nrow === 1 && rescols === 1) ? res[0][0] : res;
	    }
	    return jStat.map(arr, function(value) { return value * arg; });
	  },

	  // outer([1,2,3],[4,5,6])
	  // ===
	  // [[1],[2],[3]] times [[4,5,6]]
	  // ->
	  // [[4,5,6],[8,10,12],[12,15,18]]
	  outer:function outer(A, B) {
	    return jStat.multiply(A.map(function(t){ return [t] }), [B]);
	  },


	  // Returns the dot product of two matricies
	  dot: function dot(arr, arg) {
	    if (!isUsable(arr[0])) arr = [ arr ];
	    if (!isUsable(arg[0])) arg = [ arg ];
	    // convert column to row vector
	    var left = (arr[0].length === 1 && arr.length !== 1) ? jStat.transpose(arr) : arr,
	    right = (arg[0].length === 1 && arg.length !== 1) ? jStat.transpose(arg) : arg,
	    res = [],
	    row = 0,
	    nrow = left.length,
	    ncol = left[0].length,
	    sum, col;
	    for (; row < nrow; row++) {
	      res[row] = [];
	      sum = 0;
	      for (col = 0; col < ncol; col++)
	      sum += left[row][col] * right[row][col];
	      res[row] = sum;
	    }
	    return (res.length === 1) ? res[0] : res;
	  },

	  // raise every element by a scalar
	  pow: function pow(arr, arg) {
	    return jStat.map(arr, function(value) { return Math.pow(value, arg); });
	  },

	  // exponentiate every element
	  exp: function exp(arr) {
	    return jStat.map(arr, function(value) { return Math.exp(value); });
	  },

	  // generate the natural log of every element
	  log: function exp(arr) {
	    return jStat.map(arr, function(value) { return Math.log(value); });
	  },

	  // generate the absolute values of the vector
	  abs: function abs(arr) {
	    return jStat.map(arr, function(value) { return Math.abs(value); });
	  },

	  // computes the p-norm of the vector
	  // In the case that a matrix is passed, uses the first row as the vector
	  norm: function norm(arr, p) {
	    var nnorm = 0,
	    i = 0;
	    // check the p-value of the norm, and set for most common case
	    if (isNaN(p)) p = 2;
	    // check if multi-dimensional array, and make vector correction
	    if (isUsable(arr[0])) arr = arr[0];
	    // vector norm
	    for (; i < arr.length; i++) {
	      nnorm += Math.pow(Math.abs(arr[i]), p);
	    }
	    return Math.pow(nnorm, 1 / p);
	  },

	  // computes the angle between two vectors in rads
	  // In case a matrix is passed, this uses the first row as the vector
	  angle: function angle(arr, arg) {
	    return Math.acos(jStat.dot(arr, arg) / (jStat.norm(arr) * jStat.norm(arg)));
	  },

	  // augment one matrix by another
	  // Note: this function returns a matrix, not a jStat object
	  aug: function aug(a, b) {
	    var newarr = [];
	    var i;
	    for (i = 0; i < a.length; i++) {
	      newarr.push(a[i].slice());
	    }
	    for (i = 0; i < newarr.length; i++) {
	      push.apply(newarr[i], b[i]);
	    }
	    return newarr;
	  },

	  // The inv() function calculates the inverse of a matrix
	  // Create the inverse by augmenting the matrix by the identity matrix of the
	  // appropriate size, and then use G-J elimination on the augmented matrix.
	  inv: function inv(a) {
	    var rows = a.length;
	    var cols = a[0].length;
	    var b = jStat.identity(rows, cols);
	    var c = jStat.gauss_jordan(a, b);
	    var result = [];
	    var i = 0;
	    var j;

	    //We need to copy the inverse portion to a new matrix to rid G-J artifacts
	    for (; i < rows; i++) {
	      result[i] = [];
	      for (j = cols; j < c[0].length; j++)
	        result[i][j - cols] = c[i][j];
	    }
	    return result;
	  },

	  // calculate the determinant of a matrix
	  det: function det(a) {
	    if (a.length === 2) {
	      return a[0][0] * a[1][1] - a[0][1] * a[1][0];
	    }

	    var determinant = 0;
	    for (var i = 0; i < a.length; i++) {
	      // build a sub matrix without column `i`
	      var submatrix = [];
	      for (var row = 1; row < a.length; row++) {
	        submatrix[row - 1] = [];
	        for (var col = 0; col < a.length; col++) {
	          if (col < i) {
	            submatrix[row - 1][col] = a[row][col];
	          } else if (col > i) {
	            submatrix[row - 1][col - 1] = a[row][col];
	          }
	        }
	      }

	      // alternate between + and - between determinants
	      var sign = i % 2 ? -1 : 1;
	      determinant += det(submatrix) * a[0][i] * sign;
	    }

	    return determinant
	  },

	  gauss_elimination: function gauss_elimination(a, b) {
	    var i = 0,
	    j = 0,
	    n = a.length,
	    m = a[0].length,
	    factor = 1,
	    sum = 0,
	    x = [],
	    maug, pivot, temp, k;
	    a = jStat.aug(a, b);
	    maug = a[0].length;
	    for(i = 0; i < n; i++) {
	      pivot = a[i][i];
	      j = i;
	      for (k = i + 1; k < m; k++) {
	        if (pivot < Math.abs(a[k][i])) {
	          pivot = a[k][i];
	          j = k;
	        }
	      }
	      if (j != i) {
	        for(k = 0; k < maug; k++) {
	          temp = a[i][k];
	          a[i][k] = a[j][k];
	          a[j][k] = temp;
	        }
	      }
	      for (j = i + 1; j < n; j++) {
	        factor = a[j][i] / a[i][i];
	        for(k = i; k < maug; k++) {
	          a[j][k] = a[j][k] - factor * a[i][k];
	        }
	      }
	    }
	    for (i = n - 1; i >= 0; i--) {
	      sum = 0;
	      for (j = i + 1; j<= n - 1; j++) {
	        sum = sum + x[j] * a[i][j];
	      }
	      x[i] =(a[i][maug - 1] - sum) / a[i][i];
	    }
	    return x;
	  },

	  gauss_jordan: function gauss_jordan(a, b) {
	    var m = jStat.aug(a, b);
	    var h = m.length;
	    var w = m[0].length;
	    var c = 0;
	    var x, y, y2;
	    // find max pivot
	    for (y = 0; y < h; y++) {
	      var maxrow = y;
	      for (y2 = y+1; y2 < h; y2++) {
	        if (Math.abs(m[y2][y]) > Math.abs(m[maxrow][y]))
	          maxrow = y2;
	      }
	      var tmp = m[y];
	      m[y] = m[maxrow];
	      m[maxrow] = tmp;
	      for (y2 = y+1; y2 < h; y2++) {
	        c = m[y2][y] / m[y][y];
	        for (x = y; x < w; x++) {
	          m[y2][x] -= m[y][x] * c;
	        }
	      }
	    }
	    // backsubstitute
	    for (y = h-1; y >= 0; y--) {
	      c = m[y][y];
	      for (y2 = 0; y2 < y; y2++) {
	        for (x = w-1; x > y-1; x--) {
	          m[y2][x] -= m[y][x] * m[y2][y] / c;
	        }
	      }
	      m[y][y] /= c;
	      for (x = h; x < w; x++) {
	        m[y][x] /= c;
	      }
	    }
	    return m;
	  },

	  // solve equation
	  // Ax=b
	  // A is upper triangular matrix
	  // A=[[1,2,3],[0,4,5],[0,6,7]]
	  // b=[1,2,3]
	  // triaUpSolve(A,b) // -> [2.666,0.1666,1.666]
	  // if you use matrix style
	  // A=[[1,2,3],[0,4,5],[0,6,7]]
	  // b=[[1],[2],[3]]
	  // will return [[2.666],[0.1666],[1.666]]
	  triaUpSolve: function triaUpSolve(A, b) {
	    var size = A[0].length;
	    var x = jStat.zeros(1, size)[0];
	    var parts;
	    var matrix_mode = false;

	    if (b[0].length != undefined) {
	      b = b.map(function(i){ return i[0] });
	      matrix_mode = true;
	    }

	    jStat.arange(size - 1, -1, -1).forEach(function(i) {
	      parts = jStat.arange(i + 1, size).map(function(j) {
	        return x[j] * A[i][j];
	      });
	      x[i] = (b[i] - jStat.sum(parts)) / A[i][i];
	    });

	    if (matrix_mode)
	      return x.map(function(i){ return [i] });
	    return x;
	  },

	  triaLowSolve: function triaLowSolve(A, b) {
	    // like to triaUpSolve but A is lower triangular matrix
	    var size = A[0].length;
	    var x = jStat.zeros(1, size)[0];
	    var parts;

	    var matrix_mode=false;
	    if (b[0].length != undefined) {
	      b = b.map(function(i){ return i[0] });
	      matrix_mode = true;
	    }

	    jStat.arange(size).forEach(function(i) {
	      parts = jStat.arange(i).map(function(j) {
	        return A[i][j] * x[j];
	      });
	      x[i] = (b[i] - jStat.sum(parts)) / A[i][i];
	    });

	    if (matrix_mode)
	      return x.map(function(i){ return [i] });
	    return x;
	  },


	  // A -> [L,U]
	  // A=LU
	  // L is lower triangular matrix
	  // U is upper triangular matrix
	  lu: function lu(A) {
	    var size = A.length;
	    //var L=jStat.diagonal(jStat.ones(1,size)[0]);
	    var L = jStat.identity(size);
	    var R = jStat.zeros(A.length, A[0].length);
	    var parts;
	    jStat.arange(size).forEach(function(t) {
	      R[0][t] = A[0][t];
	    });
	    jStat.arange(1, size).forEach(function(l) {
	      jStat.arange(l).forEach(function(i) {
	        parts = jStat.arange(i).map(function(jj) {
	          return L[l][jj] * R[jj][i];
	        });
	        L[l][i] = (A[l][i] - jStat.sum(parts)) / R[i][i];
	      });
	      jStat.arange(l, size).forEach(function(j) {
	        parts = jStat.arange(l).map(function(jj) {
	          return L[l][jj] * R[jj][j];
	        });
	        R[l][j] = A[parts.length][j] - jStat.sum(parts);
	      });
	    });
	    return [L, R];
	  },

	  // A -> T
	  // A=TT'
	  // T is lower triangular matrix
	  cholesky: function cholesky(A) {
	    var size = A.length;
	    var T = jStat.zeros(A.length, A[0].length);
	    var parts;
	    jStat.arange(size).forEach(function(i) {
	      parts = jStat.arange(i).map(function(t) {
	        return Math.pow(T[i][t],2);
	      });
	      T[i][i] = Math.sqrt(A[i][i] - jStat.sum(parts));
	      jStat.arange(i + 1, size).forEach(function(j) {
	        parts = jStat.arange(i).map(function(t) {
	          return T[i][t] * T[j][t];
	        });
	        T[j][i] = (A[i][j] - jStat.sum(parts)) / T[i][i];
	      });
	    });
	    return T;
	  },


	  gauss_jacobi: function gauss_jacobi(a, b, x, r) {
	    var i = 0;
	    var j = 0;
	    var n = a.length;
	    var l = [];
	    var u = [];
	    var d = [];
	    var xv, c, h, xk;
	    for (; i < n; i++) {
	      l[i] = [];
	      u[i] = [];
	      d[i] = [];
	      for (j = 0; j < n; j++) {
	        if (i > j) {
	          l[i][j] = a[i][j];
	          u[i][j] = d[i][j] = 0;
	        } else if (i < j) {
	          u[i][j] = a[i][j];
	          l[i][j] = d[i][j] = 0;
	        } else {
	          d[i][j] = a[i][j];
	          l[i][j] = u[i][j] = 0;
	        }
	      }
	    }
	    h = jStat.multiply(jStat.multiply(jStat.inv(d), jStat.add(l, u)), -1);
	    c = jStat.multiply(jStat.inv(d), b);
	    xv = x;
	    xk = jStat.add(jStat.multiply(h, x), c);
	    i = 2;
	    while (Math.abs(jStat.norm(jStat.subtract(xk,xv))) > r) {
	      xv = xk;
	      xk = jStat.add(jStat.multiply(h, xv), c);
	      i++;
	    }
	    return xk;
	  },

	  gauss_seidel: function gauss_seidel(a, b, x, r) {
	    var i = 0;
	    var n = a.length;
	    var l = [];
	    var u = [];
	    var d = [];
	    var j, xv, c, h, xk;
	    for (; i < n; i++) {
	      l[i] = [];
	      u[i] = [];
	      d[i] = [];
	      for (j = 0; j < n; j++) {
	        if (i > j) {
	          l[i][j] = a[i][j];
	          u[i][j] = d[i][j] = 0;
	        } else if (i < j) {
	          u[i][j] = a[i][j];
	          l[i][j] = d[i][j] = 0;
	        } else {
	          d[i][j] = a[i][j];
	          l[i][j] = u[i][j] = 0;
	        }
	      }
	    }
	    h = jStat.multiply(jStat.multiply(jStat.inv(jStat.add(d, l)), u), -1);
	    c = jStat.multiply(jStat.inv(jStat.add(d, l)), b);
	    xv = x;
	    xk = jStat.add(jStat.multiply(h, x), c);
	    i = 2;
	    while (Math.abs(jStat.norm(jStat.subtract(xk, xv))) > r) {
	      xv = xk;
	      xk = jStat.add(jStat.multiply(h, xv), c);
	      i = i + 1;
	    }
	    return xk;
	  },

	  SOR: function SOR(a, b, x, r, w) {
	    var i = 0;
	    var n = a.length;
	    var l = [];
	    var u = [];
	    var d = [];
	    var j, xv, c, h, xk;
	    for (; i < n; i++) {
	      l[i] = [];
	      u[i] = [];
	      d[i] = [];
	      for (j = 0; j < n; j++) {
	        if (i > j) {
	          l[i][j] = a[i][j];
	          u[i][j] = d[i][j] = 0;
	        } else if (i < j) {
	          u[i][j] = a[i][j];
	          l[i][j] = d[i][j] = 0;
	        } else {
	          d[i][j] = a[i][j];
	          l[i][j] = u[i][j] = 0;
	        }
	      }
	    }
	    h = jStat.multiply(jStat.inv(jStat.add(d, jStat.multiply(l, w))),
	                       jStat.subtract(jStat.multiply(d, 1 - w),
	                                      jStat.multiply(u, w)));
	    c = jStat.multiply(jStat.multiply(jStat.inv(jStat.add(d,
	        jStat.multiply(l, w))), b), w);
	    xv = x;
	    xk = jStat.add(jStat.multiply(h, x), c);
	    i = 2;
	    while (Math.abs(jStat.norm(jStat.subtract(xk, xv))) > r) {
	      xv = xk;
	      xk = jStat.add(jStat.multiply(h, xv), c);
	      i++;
	    }
	    return xk;
	  },

	  householder: function householder(a) {
	    var m = a.length;
	    var n = a[0].length;
	    var i = 0;
	    var w = [];
	    var p = [];
	    var alpha, r, k, j, factor;
	    for (; i < m - 1; i++) {
	      alpha = 0;
	      for (j = i + 1; j < n; j++)
	      alpha += (a[j][i] * a[j][i]);
	      factor = (a[i + 1][i] > 0) ? -1 : 1;
	      alpha = factor * Math.sqrt(alpha);
	      r = Math.sqrt((((alpha * alpha) - a[i + 1][i] * alpha) / 2));
	      w = jStat.zeros(m, 1);
	      w[i + 1][0] = (a[i + 1][i] - alpha) / (2 * r);
	      for (k = i + 2; k < m; k++) w[k][0] = a[k][i] / (2 * r);
	      p = jStat.subtract(jStat.identity(m, n),
	          jStat.multiply(jStat.multiply(w, jStat.transpose(w)), 2));
	      a = jStat.multiply(p, jStat.multiply(a, p));
	    }
	    return a;
	  },

	  // A -> [Q,R]
	  // Q is orthogonal matrix
	  // R is upper triangular
	  QR: (function() {
	    // x -> Q
	    // find a orthogonal matrix Q st.
	    // Qx=y
	    // y is [||x||,0,0,...]

	    // quick ref
	    var sum   = jStat.sum;
	    var range = jStat.arange;

	    function qr2(x) {
	      // quick impletation
	      // https://www.stat.wisc.edu/~larget/math496/qr.html

	      var n = x.length;
	      var p = x[0].length;

	      var r = jStat.zeros(p, p);
	      x = jStat.copy(x);

	      var i,j,k;
	      for(j = 0; j < p; j++){
	        r[j][j] = Math.sqrt(sum(range(n).map(function(i){
	          return x[i][j] * x[i][j];
	        })));
	        for(i = 0; i < n; i++){
	          x[i][j] = x[i][j] / r[j][j];
	        }
	        for(k = j+1; k < p; k++){
	          r[j][k] = sum(range(n).map(function(i){
	            return x[i][j] * x[i][k];
	          }));
	          for(i = 0; i < n; i++){
	            x[i][k] = x[i][k] - x[i][j]*r[j][k];
	          }
	        }
	      }
	      return [x, r];
	    }

	    return qr2;
	  }()),

	  lstsq: (function() {
	    // solve least squard problem for Ax=b as QR decomposition way if b is
	    // [[b1],[b2],[b3]] form will return [[x1],[x2],[x3]] array form solution
	    // else b is [b1,b2,b3] form will return [x1,x2,x3] array form solution
	    function R_I(A) {
	      A = jStat.copy(A);
	      var size = A.length;
	      var I = jStat.identity(size);
	      jStat.arange(size - 1, -1, -1).forEach(function(i) {
	        jStat.sliceAssign(
	            I, { row: i }, jStat.divide(jStat.slice(I, { row: i }), A[i][i]));
	        jStat.sliceAssign(
	            A, { row: i }, jStat.divide(jStat.slice(A, { row: i }), A[i][i]));
	        jStat.arange(i).forEach(function(j) {
	          var c = jStat.multiply(A[j][i], -1);
	          var Aj = jStat.slice(A, { row: j });
	          var cAi = jStat.multiply(jStat.slice(A, { row: i }), c);
	          jStat.sliceAssign(A, { row: j }, jStat.add(Aj, cAi));
	          var Ij = jStat.slice(I, { row: j });
	          var cIi = jStat.multiply(jStat.slice(I, { row: i }), c);
	          jStat.sliceAssign(I, { row: j }, jStat.add(Ij, cIi));
	        });
	      });
	      return I;
	    }

	    function qr_solve(A, b){
	      var array_mode = false;
	      if (b[0].length === undefined) {
	        // [c1,c2,c3] mode
	        b = b.map(function(x){ return [x] });
	        array_mode = true;
	      }
	      var QR = jStat.QR(A);
	      var Q = QR[0];
	      var R = QR[1];
	      var attrs = A[0].length;
	      var Q1 = jStat.slice(Q,{col:{end:attrs}});
	      var R1 = jStat.slice(R,{row:{end:attrs}});
	      var RI = R_I(R1);
	      var Q2 = jStat.transpose(Q1);

	      if(Q2[0].length === undefined){
	        Q2 = [Q2]; // The confusing jStat.multifly implementation threat nature process again.
	      }

	      var x = jStat.multiply(jStat.multiply(RI, Q2), b);

	      if(x.length === undefined){
	        x = [[x]]; // The confusing jStat.multifly implementation threat nature process again.
	      }


	      if (array_mode)
	        return x.map(function(i){ return i[0] });
	      return x;
	    }

	    return qr_solve;
	  }()),

	  jacobi: function jacobi(a) {
	    var condition = 1;
	    var n = a.length;
	    var e = jStat.identity(n, n);
	    var ev = [];
	    var b, i, j, p, q, maxim, theta, s;
	    // condition === 1 only if tolerance is not reached
	    while (condition === 1) {
	      maxim = a[0][1];
	      p = 0;
	      q = 1;
	      for (i = 0; i < n; i++) {
	        for (j = 0; j < n; j++) {
	          if (i != j) {
	            if (maxim < Math.abs(a[i][j])) {
	              maxim = Math.abs(a[i][j]);
	              p = i;
	              q = j;
	            }
	          }
	        }
	      }
	      if (a[p][p] === a[q][q])
	        theta = (a[p][q] > 0) ? Math.PI / 4 : -Math.PI / 4;
	      else
	        theta = Math.atan(2 * a[p][q] / (a[p][p] - a[q][q])) / 2;
	      s = jStat.identity(n, n);
	      s[p][p] = Math.cos(theta);
	      s[p][q] = -Math.sin(theta);
	      s[q][p] = Math.sin(theta);
	      s[q][q] = Math.cos(theta);
	      // eigen vector matrix
	      e = jStat.multiply(e, s);
	      b = jStat.multiply(jStat.multiply(jStat.inv(s), a), s);
	      a = b;
	      condition = 0;
	      for (i = 1; i < n; i++) {
	        for (j = 1; j < n; j++) {
	          if (i != j && Math.abs(a[i][j]) > 0.001) {
	            condition = 1;
	          }
	        }
	      }
	    }
	    for (i = 0; i < n; i++) ev.push(a[i][i]);
	    //returns both the eigenvalue and eigenmatrix
	    return [e, ev];
	  },

	  rungekutta: function rungekutta(f, h, p, t_j, u_j, order) {
	    var k1, k2, u_j1, k3, k4;
	    if (order === 2) {
	      while (t_j <= p) {
	        k1 = h * f(t_j, u_j);
	        k2 = h * f(t_j + h, u_j + k1);
	        u_j1 = u_j + (k1 + k2) / 2;
	        u_j = u_j1;
	        t_j = t_j + h;
	      }
	    }
	    if (order === 4) {
	      while (t_j <= p) {
	        k1 = h * f(t_j, u_j);
	        k2 = h * f(t_j + h / 2, u_j + k1 / 2);
	        k3 = h * f(t_j + h / 2, u_j + k2 / 2);
	        k4 = h * f(t_j +h, u_j + k3);
	        u_j1 = u_j + (k1 + 2 * k2 + 2 * k3 + k4) / 6;
	        u_j = u_j1;
	        t_j = t_j + h;
	      }
	    }
	    return u_j;
	  },

	  romberg: function romberg(f, a, b, order) {
	    var i = 0;
	    var h = (b - a) / 2;
	    var x = [];
	    var h1 = [];
	    var g = [];
	    var m, a1, j, k, I;
	    while (i < order / 2) {
	      I = f(a);
	      for (j = a, k = 0; j <= b; j = j + h, k++) x[k] = j;
	      m = x.length;
	      for (j = 1; j < m - 1; j++) {
	        I += (((j % 2) !== 0) ? 4 : 2) * f(x[j]);
	      }
	      I = (h / 3) * (I + f(b));
	      g[i] = I;
	      h /= 2;
	      i++;
	    }
	    a1 = g.length;
	    m = 1;
	    while (a1 !== 1) {
	      for (j = 0; j < a1 - 1; j++)
	      h1[j] = ((Math.pow(4, m)) * g[j + 1] - g[j]) / (Math.pow(4, m) - 1);
	      a1 = h1.length;
	      g = h1;
	      h1 = [];
	      m++;
	    }
	    return g;
	  },

	  richardson: function richardson(X, f, x, h) {
	    function pos(X, x) {
	      var i = 0;
	      var n = X.length;
	      var p;
	      for (; i < n; i++)
	        if (X[i] === x) p = i;
	      return p;
	    }
	    var h_min = Math.abs(x - X[pos(X, x) + 1]);
	    var i = 0;
	    var g = [];
	    var h1 = [];
	    var y1, y2, m, a, j;
	    while (h >= h_min) {
	      y1 = pos(X, x + h);
	      y2 = pos(X, x);
	      g[i] = (f[y1] - 2 * f[y2] + f[2 * y2 - y1]) / (h * h);
	      h /= 2;
	      i++;
	    }
	    a = g.length;
	    m = 1;
	    while (a != 1) {
	      for (j = 0; j < a - 1; j++)
	        h1[j] = ((Math.pow(4, m)) * g[j + 1] - g[j]) / (Math.pow(4, m) - 1);
	      a = h1.length;
	      g = h1;
	      h1 = [];
	      m++;
	    }
	    return g;
	  },

	  simpson: function simpson(f, a, b, n) {
	    var h = (b - a) / n;
	    var I = f(a);
	    var x = [];
	    var j = a;
	    var k = 0;
	    var i = 1;
	    var m;
	    for (; j <= b; j = j + h, k++)
	      x[k] = j;
	    m = x.length;
	    for (; i < m - 1; i++) {
	      I += ((i % 2 !== 0) ? 4 : 2) * f(x[i]);
	    }
	    return (h / 3) * (I + f(b));
	  },

	  hermite: function hermite(X, F, dF, value) {
	    var n = X.length;
	    var p = 0;
	    var i = 0;
	    var l = [];
	    var dl = [];
	    var A = [];
	    var B = [];
	    var j;
	    for (; i < n; i++) {
	      l[i] = 1;
	      for (j = 0; j < n; j++) {
	        if (i != j) l[i] *= (value - X[j]) / (X[i] - X[j]);
	      }
	      dl[i] = 0;
	      for (j = 0; j < n; j++) {
	        if (i != j) dl[i] += 1 / (X [i] - X[j]);
	      }
	      A[i] = (1 - 2 * (value - X[i]) * dl[i]) * (l[i] * l[i]);
	      B[i] = (value - X[i]) * (l[i] * l[i]);
	      p += (A[i] * F[i] + B[i] * dF[i]);
	    }
	    return p;
	  },

	  lagrange: function lagrange(X, F, value) {
	    var p = 0;
	    var i = 0;
	    var j, l;
	    var n = X.length;
	    for (; i < n; i++) {
	      l = F[i];
	      for (j = 0; j < n; j++) {
	        // calculating the lagrange polynomial L_i
	        if (i != j) l *= (value - X[j]) / (X[i] - X[j]);
	      }
	      // adding the lagrange polynomials found above
	      p += l;
	    }
	    return p;
	  },

	  cubic_spline: function cubic_spline(X, F, value) {
	    var n = X.length;
	    var i = 0, j;
	    var A = [];
	    var B = [];
	    var alpha = [];
	    var c = [];
	    var h = [];
	    var b = [];
	    var d = [];
	    for (; i < n - 1; i++)
	      h[i] = X[i + 1] - X[i];
	    alpha[0] = 0;
	    for (i = 1; i < n - 1; i++) {
	      alpha[i] = (3 / h[i]) * (F[i + 1] - F[i]) -
	          (3 / h[i-1]) * (F[i] - F[i-1]);
	    }
	    for (i = 1; i < n - 1; i++) {
	      A[i] = [];
	      B[i] = [];
	      A[i][i-1] = h[i-1];
	      A[i][i] = 2 * (h[i - 1] + h[i]);
	      A[i][i+1] = h[i];
	      B[i][0] = alpha[i];
	    }
	    c = jStat.multiply(jStat.inv(A), B);
	    for (j = 0; j < n - 1; j++) {
	      b[j] = (F[j + 1] - F[j]) / h[j] - h[j] * (c[j + 1][0] + 2 * c[j][0]) / 3;
	      d[j] = (c[j + 1][0] - c[j][0]) / (3 * h[j]);
	    }
	    for (j = 0; j < n; j++) {
	      if (X[j] > value) break;
	    }
	    j -= 1;
	    return F[j] + (value - X[j]) * b[j] + jStat.sq(value-X[j]) *
	        c[j] + (value - X[j]) * jStat.sq(value - X[j]) * d[j];
	  },

	  gauss_quadrature: function gauss_quadrature() {
	    throw new Error('gauss_quadrature not yet implemented');
	  },

	  PCA: function PCA(X) {
	    var m = X.length;
	    var n = X[0].length;
	    var i = 0;
	    var j, temp1;
	    var u = [];
	    var D = [];
	    var result = [];
	    var temp2 = [];
	    var Y = [];
	    var Bt = [];
	    var B = [];
	    var C = [];
	    var V = [];
	    var Vt = [];
	    for (i = 0; i < m; i++) {
	      u[i] = jStat.sum(X[i]) / n;
	    }
	    for (i = 0; i < n; i++) {
	      B[i] = [];
	      for(j = 0; j < m; j++) {
	        B[i][j] = X[j][i] - u[j];
	      }
	    }
	    B = jStat.transpose(B);
	    for (i = 0; i < m; i++) {
	      C[i] = [];
	      for (j = 0; j < m; j++) {
	        C[i][j] = (jStat.dot([B[i]], [B[j]])) / (n - 1);
	      }
	    }
	    result = jStat.jacobi(C);
	    V = result[0];
	    D = result[1];
	    Vt = jStat.transpose(V);
	    for (i = 0; i < D.length; i++) {
	      for (j = i; j < D.length; j++) {
	        if(D[i] < D[j])  {
	          temp1 = D[i];
	          D[i] = D[j];
	          D[j] = temp1;
	          temp2 = Vt[i];
	          Vt[i] = Vt[j];
	          Vt[j] = temp2;
	        }
	      }
	    }
	    Bt = jStat.transpose(B);
	    for (i = 0; i < m; i++) {
	      Y[i] = [];
	      for (j = 0; j < Bt.length; j++) {
	        Y[i][j] = jStat.dot([Vt[i]], [Bt[j]]);
	      }
	    }
	    return [X, D, Vt, Y];
	  }
	});

	// extend jStat.fn with methods that require one argument
	(function(funcs) {
	  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
	    jStat.fn[passfunc] = function(arg, func) {
	      var tmpthis = this;
	      // check for callback
	      if (func) {
	        setTimeout(function() {
	          func.call(tmpthis, jStat.fn[passfunc].call(tmpthis, arg));
	        }, 15);
	        return this;
	      }
	      if (typeof jStat[passfunc](this, arg) === 'number')
	        return jStat[passfunc](this, arg);
	      else
	        return jStat(jStat[passfunc](this, arg));
	    };
	  }(funcs[i]));
	}('add divide multiply subtract dot pow exp log abs norm angle'.split(' ')));

	}(jStat, Math));
	(function(jStat, Math) {

	var slice = [].slice;
	var isNumber = jStat.utils.isNumber;
	var isArray = jStat.utils.isArray;

	// flag==true denotes use of sample standard deviation
	// Z Statistics
	jStat.extend({
	  // 2 different parameter lists:
	  // (value, mean, sd)
	  // (value, array, flag)
	  zscore: function zscore() {
	    var args = slice.call(arguments);
	    if (isNumber(args[1])) {
	      return (args[0] - args[1]) / args[2];
	    }
	    return (args[0] - jStat.mean(args[1])) / jStat.stdev(args[1], args[2]);
	  },

	  // 3 different paramter lists:
	  // (value, mean, sd, sides)
	  // (zscore, sides)
	  // (value, array, sides, flag)
	  ztest: function ztest() {
	    var args = slice.call(arguments);
	    var z;
	    if (isArray(args[1])) {
	      // (value, array, sides, flag)
	      z = jStat.zscore(args[0],args[1],args[3]);
	      return (args[2] === 1) ?
	        (jStat.normal.cdf(-Math.abs(z), 0, 1)) :
	        (jStat.normal.cdf(-Math.abs(z), 0, 1)*2);
	    } else {
	      if (args.length > 2) {
	        // (value, mean, sd, sides)
	        z = jStat.zscore(args[0],args[1],args[2]);
	        return (args[3] === 1) ?
	          (jStat.normal.cdf(-Math.abs(z),0,1)) :
	          (jStat.normal.cdf(-Math.abs(z),0,1)* 2);
	      } else {
	        // (zscore, sides)
	        z = args[0];
	        return (args[1] === 1) ?
	          (jStat.normal.cdf(-Math.abs(z),0,1)) :
	          (jStat.normal.cdf(-Math.abs(z),0,1)*2);
	      }
	    }
	  }
	});

	jStat.extend(jStat.fn, {
	  zscore: function zscore(value, flag) {
	    return (value - this.mean()) / this.stdev(flag);
	  },

	  ztest: function ztest(value, sides, flag) {
	    var zscore = Math.abs(this.zscore(value, flag));
	    return (sides === 1) ?
	      (jStat.normal.cdf(-zscore, 0, 1)) :
	      (jStat.normal.cdf(-zscore, 0, 1) * 2);
	  }
	});

	// T Statistics
	jStat.extend({
	  // 2 parameter lists
	  // (value, mean, sd, n)
	  // (value, array)
	  tscore: function tscore() {
	    var args = slice.call(arguments);
	    return (args.length === 4) ?
	      ((args[0] - args[1]) / (args[2] / Math.sqrt(args[3]))) :
	      ((args[0] - jStat.mean(args[1])) /
	       (jStat.stdev(args[1], true) / Math.sqrt(args[1].length)));
	  },

	  // 3 different paramter lists:
	  // (value, mean, sd, n, sides)
	  // (tscore, n, sides)
	  // (value, array, sides)
	  ttest: function ttest() {
	    var args = slice.call(arguments);
	    var tscore;
	    if (args.length === 5) {
	      tscore = Math.abs(jStat.tscore(args[0], args[1], args[2], args[3]));
	      return (args[4] === 1) ?
	        (jStat.studentt.cdf(-tscore, args[3]-1)) :
	        (jStat.studentt.cdf(-tscore, args[3]-1)*2);
	    }
	    if (isNumber(args[1])) {
	      tscore = Math.abs(args[0]);
	      return (args[2] == 1) ?
	        (jStat.studentt.cdf(-tscore, args[1]-1)) :
	        (jStat.studentt.cdf(-tscore, args[1]-1) * 2);
	    }
	    tscore = Math.abs(jStat.tscore(args[0], args[1]));
	    return (args[2] == 1) ?
	      (jStat.studentt.cdf(-tscore, args[1].length-1)) :
	      (jStat.studentt.cdf(-tscore, args[1].length-1) * 2);
	  }
	});

	jStat.extend(jStat.fn, {
	  tscore: function tscore(value) {
	    return (value - this.mean()) / (this.stdev(true) / Math.sqrt(this.cols()));
	  },

	  ttest: function ttest(value, sides) {
	    return (sides === 1) ?
	      (1 - jStat.studentt.cdf(Math.abs(this.tscore(value)), this.cols()-1)) :
	      (jStat.studentt.cdf(-Math.abs(this.tscore(value)), this.cols()-1)*2);
	  }
	});

	// F Statistics
	jStat.extend({
	  // Paramter list is as follows:
	  // (array1, array2, array3, ...)
	  // or it is an array of arrays
	  // array of arrays conversion
	  anovafscore: function anovafscore() {
	    var args = slice.call(arguments),
	    expVar, sample, sampMean, sampSampMean, tmpargs, unexpVar, i, j;
	    if (args.length === 1) {
	      tmpargs = new Array(args[0].length);
	      for (i = 0; i < args[0].length; i++) {
	        tmpargs[i] = args[0][i];
	      }
	      args = tmpargs;
	    }
	    // Builds sample array
	    sample = new Array();
	    for (i = 0; i < args.length; i++) {
	      sample = sample.concat(args[i]);
	    }
	    sampMean = jStat.mean(sample);
	    // Computes the explained variance
	    expVar = 0;
	    for (i = 0; i < args.length; i++) {
	      expVar = expVar + args[i].length * Math.pow(jStat.mean(args[i]) - sampMean, 2);
	    }
	    expVar /= (args.length - 1);
	    // Computes unexplained variance
	    unexpVar = 0;
	    for (i = 0; i < args.length; i++) {
	      sampSampMean = jStat.mean(args[i]);
	      for (j = 0; j < args[i].length; j++) {
	        unexpVar += Math.pow(args[i][j] - sampSampMean, 2);
	      }
	    }
	    unexpVar /= (sample.length - args.length);
	    return expVar / unexpVar;
	  },

	  // 2 different paramter setups
	  // (array1, array2, array3, ...)
	  // (anovafscore, df1, df2)
	  anovaftest: function anovaftest() {
	    var args = slice.call(arguments),
	    df1, df2, n, i;
	    if (isNumber(args[0])) {
	      return 1 - jStat.centralF.cdf(args[0], args[1], args[2]);
	    }
	    var anovafscore = jStat.anovafscore(args);
	    df1 = args.length - 1;
	    n = 0;
	    for (i = 0; i < args.length; i++) {
	      n = n + args[i].length;
	    }
	    df2 = n - df1 - 1;
	    return 1 - jStat.centralF.cdf(anovafscore, df1, df2);
	  },

	  ftest: function ftest(fscore, df1, df2) {
	    return 1 - jStat.centralF.cdf(fscore, df1, df2);
	  }
	});

	jStat.extend(jStat.fn, {
	  anovafscore: function anovafscore() {
	    return jStat.anovafscore(this.toArray());
	  },

	  anovaftes: function anovaftes() {
	    var n = 0;
	    var i;
	    for (i = 0; i < this.length; i++) {
	      n = n + this[i].length;
	    }
	    return jStat.ftest(this.anovafscore(), this.length - 1, n - this.length);
	  }
	});

	// Tukey's range test
	jStat.extend({
	  // 2 parameter lists
	  // (mean1, mean2, n1, n2, sd)
	  // (array1, array2, sd)
	  qscore: function qscore() {
	    var args = slice.call(arguments);
	    var mean1, mean2, n1, n2, sd;
	    if (isNumber(args[0])) {
	        mean1 = args[0];
	        mean2 = args[1];
	        n1 = args[2];
	        n2 = args[3];
	        sd = args[4];
	    } else {
	        mean1 = jStat.mean(args[0]);
	        mean2 = jStat.mean(args[1]);
	        n1 = args[0].length;
	        n2 = args[1].length;
	        sd = args[2];
	    }
	    return Math.abs(mean1 - mean2) / (sd * Math.sqrt((1 / n1 + 1 / n2) / 2));
	  },

	  // 3 different parameter lists:
	  // (qscore, n, k)
	  // (mean1, mean2, n1, n2, sd, n, k)
	  // (array1, array2, sd, n, k)
	  qtest: function qtest() {
	    var args = slice.call(arguments);

	    var qscore;
	    if (args.length === 3) {
	      qscore = args[0];
	      args = args.slice(1);
	    } else if (args.length === 7) {
	      qscore = jStat.qscore(args[0], args[1], args[2], args[3], args[4]);
	      args = args.slice(5);
	    } else {
	      qscore = jStat.qscore(args[0], args[1], args[2]);
	      args = args.slice(3);
	    }

	    var n = args[0];
	    var k = args[1];

	    return 1 - jStat.tukey.cdf(qscore, k, n - k);
	  },

	  tukeyhsd: function tukeyhsd(arrays) {
	    var sd = jStat.pooledstdev(arrays);
	    var means = arrays.map(function (arr) {return jStat.mean(arr);});
	    var n = arrays.reduce(function (n, arr) {return n + arr.length;}, 0);

	    var results = [];
	    for (var i = 0; i < arrays.length; ++i) {
	        for (var j = i + 1; j < arrays.length; ++j) {
	            var p = jStat.qtest(means[i], means[j], arrays[i].length, arrays[j].length, sd, n, arrays.length);
	            results.push([[i, j], p]);
	        }
	    }

	    return results;
	  }
	});

	// Error Bounds
	jStat.extend({
	  // 2 different parameter setups
	  // (value, alpha, sd, n)
	  // (value, alpha, array)
	  normalci: function normalci() {
	    var args = slice.call(arguments),
	    ans = new Array(2),
	    change;
	    if (args.length === 4) {
	      change = Math.abs(jStat.normal.inv(args[1] / 2, 0, 1) *
	                        args[2] / Math.sqrt(args[3]));
	    } else {
	      change = Math.abs(jStat.normal.inv(args[1] / 2, 0, 1) *
	                        jStat.stdev(args[2]) / Math.sqrt(args[2].length));
	    }
	    ans[0] = args[0] - change;
	    ans[1] = args[0] + change;
	    return ans;
	  },

	  // 2 different parameter setups
	  // (value, alpha, sd, n)
	  // (value, alpha, array)
	  tci: function tci() {
	    var args = slice.call(arguments),
	    ans = new Array(2),
	    change;
	    if (args.length === 4) {
	      change = Math.abs(jStat.studentt.inv(args[1] / 2, args[3] - 1) *
	                        args[2] / Math.sqrt(args[3]));
	    } else {
	      change = Math.abs(jStat.studentt.inv(args[1] / 2, args[2].length - 1) *
	                        jStat.stdev(args[2], true) / Math.sqrt(args[2].length));
	    }
	    ans[0] = args[0] - change;
	    ans[1] = args[0] + change;
	    return ans;
	  },

	  significant: function significant(pvalue, alpha) {
	    return pvalue < alpha;
	  }
	});

	jStat.extend(jStat.fn, {
	  normalci: function normalci(value, alpha) {
	    return jStat.normalci(value, alpha, this.toArray());
	  },

	  tci: function tci(value, alpha) {
	    return jStat.tci(value, alpha, this.toArray());
	  }
	});

	// internal method for calculating the z-score for a difference of proportions test
	function differenceOfProportions(p1, n1, p2, n2) {
	  if (p1 > 1 || p2 > 1 || p1 <= 0 || p2 <= 0) {
	    throw new Error("Proportions should be greater than 0 and less than 1")
	  }
	  var pooled = (p1 * n1 + p2 * n2) / (n1 + n2);
	  var se = Math.sqrt(pooled * (1 - pooled) * ((1/n1) + (1/n2)));
	  return (p1 - p2) / se;
	}

	// Difference of Proportions
	jStat.extend(jStat.fn, {
	  oneSidedDifferenceOfProportions: function oneSidedDifferenceOfProportions(p1, n1, p2, n2) {
	    var z = differenceOfProportions(p1, n1, p2, n2);
	    return jStat.ztest(z, 1);
	  },

	  twoSidedDifferenceOfProportions: function twoSidedDifferenceOfProportions(p1, n1, p2, n2) {
	    var z = differenceOfProportions(p1, n1, p2, n2);
	    return jStat.ztest(z, 2);
	  }
	});

	}(jStat, Math));
	jStat.models = (function(){
	  function sub_regress(exog) {
	    var var_count = exog[0].length;
	    var modelList = jStat.arange(var_count).map(function(endog_index) {
	      var exog_index =
	          jStat.arange(var_count).filter(function(i){return i!==endog_index});
	      return ols(jStat.col(exog, endog_index).map(function(x){ return x[0] }),
	                 jStat.col(exog, exog_index))
	    });
	    return modelList;
	  }

	  // do OLS model regress
	  // exog have include const columns ,it will not generate it .In fact, exog is
	  // "design matrix" look at
	  //https://en.wikipedia.org/wiki/Design_matrix
	  function ols(endog, exog) {
	    var nobs = endog.length;
	    var df_model = exog[0].length - 1;
	    var df_resid = nobs-df_model - 1;
	    var coef = jStat.lstsq(exog, endog);
	    var predict =
	        jStat.multiply(exog, coef.map(function(x) { return [x] }))
	            .map(function(p) { return p[0] });
	    var resid = jStat.subtract(endog, predict);
	    var ybar = jStat.mean(endog);
	    // constant cause problem
	    // var SST = jStat.sum(endog.map(function(y) {
	    //   return Math.pow(y-ybar,2);
	    // }));
	    var SSE = jStat.sum(predict.map(function(f) {
	      return Math.pow(f - ybar, 2);
	    }));
	    var SSR = jStat.sum(endog.map(function(y, i) {
	      return Math.pow(y - predict[i], 2);
	    }));
	    var SST = SSE + SSR;
	    var R2 = (SSE / SST);
	    return {
	        exog:exog,
	        endog:endog,
	        nobs:nobs,
	        df_model:df_model,
	        df_resid:df_resid,
	        coef:coef,
	        predict:predict,
	        resid:resid,
	        ybar:ybar,
	        SST:SST,
	        SSE:SSE,
	        SSR:SSR,
	        R2:R2
	    };
	  }

	  // H0: b_I=0
	  // H1: b_I!=0
	  function t_test(model) {
	    var subModelList = sub_regress(model.exog);
	    //var sigmaHat=jStat.stdev(model.resid);
	    var sigmaHat = Math.sqrt(model.SSR / (model.df_resid));
	    var seBetaHat = subModelList.map(function(mod) {
	      var SST = mod.SST;
	      var R2 = mod.R2;
	      return sigmaHat / Math.sqrt(SST * (1 - R2));
	    });
	    var tStatistic = model.coef.map(function(coef, i) {
	      return (coef - 0) / seBetaHat[i];
	    });
	    var pValue = tStatistic.map(function(t) {
	      var leftppf = jStat.studentt.cdf(t, model.df_resid);
	      return (leftppf > 0.5 ? 1 - leftppf : leftppf) * 2;
	    });
	    var c = jStat.studentt.inv(0.975, model.df_resid);
	    var interval95 = model.coef.map(function(coef, i) {
	      var d = c * seBetaHat[i];
	      return [coef - d, coef + d];
	    });
	    return {
	        se: seBetaHat,
	        t: tStatistic,
	        p: pValue,
	        sigmaHat: sigmaHat,
	        interval95: interval95
	    };
	  }

	  function F_test(model) {
	    var F_statistic =
	        (model.R2 / model.df_model) / ((1 - model.R2) / model.df_resid);
	    var fcdf = function(x, n1, n2) {
	      return jStat.beta.cdf(x / (n2 / n1 + x), n1 / 2, n2 / 2)
	    };
	    var pvalue = 1 - fcdf(F_statistic, model.df_model, model.df_resid);
	    return { F_statistic: F_statistic, pvalue: pvalue };
	  }

	  function ols_wrap(endog, exog) {
	    var model = ols(endog,exog);
	    var ttest = t_test(model);
	    var ftest = F_test(model);
	    // Provide the Wherry / Ezekiel / McNemar / Cohen Adjusted R^2
	    // Which matches the 'adjusted R^2' provided by R's lm package
	    var adjust_R2 =
	        1 - (1 - model.R2) * ((model.nobs - 1) / (model.df_resid));
	    model.t = ttest;
	    model.f = ftest;
	    model.adjust_R2 = adjust_R2;
	    return model;
	  }

	  return { ols: ols_wrap };
	})();
	//To regress, simply build X matrix
	//(append column of 1's) using
	//buildxmatrix and build the Y
	//matrix using buildymatrix
	//(simply the transpose)
	//and run regress.



	//Regressions

	jStat.extend({
	  buildxmatrix: function buildxmatrix(){
	    //Parameters will be passed in as such
	    //(array1,array2,array3,...)
	    //as (x1,x2,x3,...)
	    //needs to be (1,x1,x2,x3,...)
	    var matrixRows = new Array(arguments.length);
	    for(var i=0;i<arguments.length;i++){
	      var array = [1];
	      matrixRows[i]= array.concat(arguments[i]);
	    }
	    return jStat(matrixRows);

	  },

	  builddxmatrix: function builddxmatrix() {
	    //Paramters will be passed in as such
	    //([array1,array2,...]
	    var matrixRows = new Array(arguments[0].length);
	    for(var i=0;i<arguments[0].length;i++){
	      var array = [1];
	      matrixRows[i]= array.concat(arguments[0][i]);
	    }
	    return jStat(matrixRows);

	  },

	  buildjxmatrix: function buildjxmatrix(jMat) {
	    //Builds from jStat Matrix
	    var pass = new Array(jMat.length);
	    for(var i=0;i<jMat.length;i++){
	      pass[i] = jMat[i];
	    }
	    return jStat.builddxmatrix(pass);

	  },

	  buildymatrix: function buildymatrix(array){
	    return jStat(array).transpose();
	  },

	  buildjymatrix: function buildjymatrix(jMat){
	    return jMat.transpose();
	  },

	  matrixmult: function matrixmult(A,B){
	    var i, j, k, result, sum;
	    if (A.cols() == B.rows()) {
	      if(B.rows()>1){
	        result = [];
	        for (i = 0; i < A.rows(); i++) {
	          result[i] = [];
	          for (j = 0; j < B.cols(); j++) {
	            sum = 0;
	            for (k = 0; k < A.cols(); k++) {
	              sum += A.toArray()[i][k] * B.toArray()[k][j];
	            }
	            result[i][j] = sum;
	          }
	        }
	        return jStat(result);
	      }
	      result = [];
	      for (i = 0; i < A.rows(); i++) {
	        result[i] = [];
	        for (j = 0; j < B.cols(); j++) {
	          sum = 0;
	          for (k = 0; k < A.cols(); k++) {
	            sum += A.toArray()[i][k] * B.toArray()[j];
	          }
	          result[i][j] = sum;
	        }
	      }
	      return jStat(result);
	    }
	  },

	  //regress and regresst to be fixed

	  regress: function regress(jMatX,jMatY){
	    //print("regressin!");
	    //print(jMatX.toArray());
	    var innerinv = jStat.xtranspxinv(jMatX);
	    //print(innerinv);
	    var xtransp = jMatX.transpose();
	    var next = jStat.matrixmult(jStat(innerinv),xtransp);
	    return jStat.matrixmult(next,jMatY);

	  },

	  regresst: function regresst(jMatX,jMatY,sides){
	    var beta = jStat.regress(jMatX,jMatY);

	    var compile = {};
	    compile.anova = {};
	    var jMatYBar = jStat.jMatYBar(jMatX, beta);
	    compile.yBar = jMatYBar;
	    var yAverage = jMatY.mean();
	    compile.anova.residuals = jStat.residuals(jMatY, jMatYBar);

	    compile.anova.ssr = jStat.ssr(jMatYBar, yAverage);
	    compile.anova.msr = compile.anova.ssr / (jMatX[0].length - 1);

	    compile.anova.sse = jStat.sse(jMatY, jMatYBar);
	    compile.anova.mse =
	        compile.anova.sse / (jMatY.length - (jMatX[0].length - 1) - 1);

	    compile.anova.sst = jStat.sst(jMatY, yAverage);
	    compile.anova.mst = compile.anova.sst / (jMatY.length - 1);

	    compile.anova.r2 = 1 - (compile.anova.sse / compile.anova.sst);
	    if (compile.anova.r2 < 0) compile.anova.r2 = 0;

	    compile.anova.fratio = compile.anova.msr / compile.anova.mse;
	    compile.anova.pvalue =
	        jStat.anovaftest(compile.anova.fratio,
	                         jMatX[0].length - 1,
	                         jMatY.length - (jMatX[0].length - 1) - 1);

	    compile.anova.rmse = Math.sqrt(compile.anova.mse);

	    compile.anova.r2adj = 1 - (compile.anova.mse / compile.anova.mst);
	    if (compile.anova.r2adj < 0) compile.anova.r2adj = 0;

	    compile.stats = new Array(jMatX[0].length);
	    var covar = jStat.xtranspxinv(jMatX);
	    var sds, ts, ps;

	    for(var i=0; i<beta.length;i++){
	      sds=Math.sqrt(compile.anova.mse * Math.abs(covar[i][i]));
	      ts= Math.abs(beta[i] / sds);
	      ps= jStat.ttest(ts, jMatY.length - jMatX[0].length - 1, sides);

	      compile.stats[i]=[beta[i], sds, ts, ps];
	    }

	    compile.regress = beta;
	    return compile;
	  },

	  xtranspx: function xtranspx(jMatX){
	    return jStat.matrixmult(jMatX.transpose(),jMatX);
	  },


	  xtranspxinv: function xtranspxinv(jMatX){
	    var inner = jStat.matrixmult(jMatX.transpose(),jMatX);
	    var innerinv = jStat.inv(inner);
	    return innerinv;
	  },

	  jMatYBar: function jMatYBar(jMatX, beta) {
	    var yBar = jStat.matrixmult(jMatX, beta);
	    return new jStat(yBar);
	  },

	  residuals: function residuals(jMatY, jMatYBar) {
	    return jStat.matrixsubtract(jMatY, jMatYBar);
	  },

	  ssr: function ssr(jMatYBar, yAverage) {
	    var ssr = 0;
	    for(var i = 0; i < jMatYBar.length; i++) {
	      ssr += Math.pow(jMatYBar[i] - yAverage, 2);
	    }
	    return ssr;
	  },

	  sse: function sse(jMatY, jMatYBar) {
	    var sse = 0;
	    for(var i = 0; i < jMatY.length; i++) {
	      sse += Math.pow(jMatY[i] - jMatYBar[i], 2);
	    }
	    return sse;
	  },

	  sst: function sst(jMatY, yAverage) {
	    var sst = 0;
	    for(var i = 0; i < jMatY.length; i++) {
	      sst += Math.pow(jMatY[i] - yAverage, 2);
	    }
	    return sst;
	  },

	  matrixsubtract: function matrixsubtract(A,B){
	    var ans = new Array(A.length);
	    for(var i=0;i<A.length;i++){
	      ans[i] = new Array(A[i].length);
	      for(var j=0;j<A[i].length;j++){
	        ans[i][j]=A[i][j]-B[i][j];
	      }
	    }
	    return jStat(ans);
	  }
	});
	  // Make it compatible with previous version.
	  jStat.jStat = jStat;

	  return jStat;
	}); 
} (jstat));

var jstatExports = jstat.exports;

function toStandardDeviations({
  confidence,
  highConfidenceStds = 0,
  highConfidence = 100,
  lowConfidenceStds = 1.3,
  lowConfidence = 10
}) {
  const slope = -1 * (highConfidenceStds - lowConfidenceStds) / (highConfidence - lowConfidence);
  const uncertainty = 100 - confidence;
  return uncertainty * slope;
}

/**
 * Given an estimate, a confidence, and an uncertainty, return the extra amount of time.
 * @param {number} estimate 
 * @param {number} confidence 
 * @param {number} uncertaintyWeight 
 * @returns {number}
 */
function estimateExtraPoints(estimate, confidence, uncertaintyWeight) {
  var std = toStandardDeviations({
    confidence
  });
  if (uncertaintyWeight === "average") {
    return estimate * jstatExports.jStat.lognormal.mean(0, std) - estimate;
  } else {
    return estimate * jstatExports.jStat.lognormal.inv(uncertaintyWeight / 100, 0, std) - estimate;
  }
}

/**
 * @param {number} estimate 
 * @param {number} confidence 
 * @returns {number}
 */
function sampleExtraPoints(estimate, confidence) {
  const std = toStandardDeviations({
    confidence
  });
  const scale = jstatExports.jStat.lognormal.sample(0, std);
  return estimate * scale - estimate;
}

// GET DATA FROM PLACES DIRECTLY RELATED TO ISSUE
/**
 *
 * @param {import("../../jira/shared/types.js").NormalizedIssue} issue
 * @returns {StartAndDueData}
 */
function getStartDateAndDueDataFromFields(issue) {
    let startData = null;
    let dueData = null;
    if (issue.startDate) {
        startData = {
            start: issue.startDate,
            startFrom: {
                message: `start date`,
                reference: issue,
            },
        };
    }
    if (issue.dueDate) {
        dueData = {
            due: issue.dueDate,
            dueTo: {
                message: `due date`,
                reference: issue,
            },
        };
    }
    return { startData, dueData };
}
/**
 *
 * @param {import("../../jira/shared/types.js").NormalizedIssue} story
 * @returns {StartAndDueData}
 */
function getStartDateAndDueDataFromSprints(story) {
    const records = [];
    if (story.sprints) {
        for (const sprint of story.sprints) {
            if (sprint && sprint.startDate && sprint.endDate) {
                records.push({
                    startData: {
                        start: sprint.startDate,
                        startFrom: {
                            message: `${sprint.name}`,
                            reference: story,
                        },
                    },
                    dueData: {
                        due: sprint.endDate,
                        dueTo: {
                            message: `${sprint.name}`,
                            reference: story,
                        },
                    },
                });
            }
        }
    }
    return mergeStartAndDueData$1(records);
}
/**
 *
 * @param {Array<StartAndDueData>} records
 * @returns {StartAndDueData}
 */
function mergeStartAndDueData$1(records) {
    const startData = records
        .filter((record) => record.startData !== null)
        .map((record) => record.startData);
    const dueData = records
        .filter((record) => record.dueData !== null)
        .map((record) => record.dueData);
    return {
        startData: startData.sort((d1, d2) => d1.start.getTime() - d2.start.getTime())[0] ||
            null,
        dueData: dueData.sort((d1, d2) => d2.due.getTime() - d1.due.getTime())[0] || null,
    };
}
/**
 *
 * @param {NormalizedIssue} issue
 * @returns {StartAndDueData}
 */
function getStartDateAndDueDataFromFieldsOrSprints(issue) {
    return mergeStartAndDueData$1([
        getStartDateAndDueDataFromFields(issue),
        getStartDateAndDueDataFromSprints(issue),
    ]);
}

/**
 * @param {NormalizedTeam} team
 * @returns {number}
 */
function getDefaultConfidenceDefault(team) {
    return 50;
}
/**
 *
 * @param {NormalizedTeam} team
 * @returns number
 */
function getDefaultStoryPointsDefault(team) {
    return team.velocity / team.parallelWorkLimit;
}
/**
 *
 * @param {import("../../shared/types.js").NormalizedIssue} normalizedIssue
 * @param {Partial<WorkTimingConfig> & { uncertaintyWeight?: number }} options
 * @returns {DerivedWorkTiming}
 */
function deriveWorkTiming(normalizedIssue, { getDefaultConfidence = getDefaultConfidenceDefault, getDefaultStoryPoints = getDefaultStoryPointsDefault, uncertaintyWeight = 80, } = {}) {
    const isConfidenceValid = isConfidenceValueValid(normalizedIssue.confidence);
    const usedConfidence = isConfidenceValid
        ? normalizedIssue.confidence
        : getDefaultConfidence(normalizedIssue.team);
    const isStoryPointsValid = isStoryPointsValueValid(normalizedIssue.storyPoints);
    const defaultOrStoryPoints = isStoryPointsValid
        ? normalizedIssue.storyPoints
        : getDefaultStoryPoints(normalizedIssue.team);
    const storyPointsDaysOfWork = defaultOrStoryPoints / normalizedIssue.team.pointsPerDayPerTrack;
    const isStoryPointsMedianValid = isStoryPointsValueValid(normalizedIssue.storyPointsMedian);
    const defaultOrStoryPointsMedian = isStoryPointsMedianValid
        ? normalizedIssue.storyPointsMedian
        : getDefaultStoryPoints(normalizedIssue.team);
    const storyPointsMedianDaysOfWork = defaultOrStoryPointsMedian / normalizedIssue.team.pointsPerDayPerTrack;
    const deterministicExtraPoints = estimateExtraPoints(defaultOrStoryPointsMedian, usedConfidence, uncertaintyWeight);
    const deterministicExtraDaysOfWork = deterministicExtraPoints / normalizedIssue.team.pointsPerDayPerTrack;
    const deterministicTotalPoints = defaultOrStoryPointsMedian + deterministicExtraPoints;
    const deterministicTotalDaysOfWork = deterministicTotalPoints / normalizedIssue.team.pointsPerDayPerTrack;
    const probablisticExtraPoints = sampleExtraPoints(defaultOrStoryPointsMedian, usedConfidence);
    const probablisticExtraDaysOfWork = probablisticExtraPoints / normalizedIssue.team.pointsPerDayPerTrack;
    const probablisticTotalPoints = defaultOrStoryPointsMedian + probablisticExtraPoints;
    const probablisticTotalDaysOfWork = probablisticTotalPoints / normalizedIssue.team.pointsPerDayPerTrack;
    const hasStartAndDueDate = Boolean(normalizedIssue.dueDate && normalizedIssue.startDate);
    const startAndDueDateDaysOfWork = hasStartAndDueDate
        ? getBusinessDatesCount(normalizedIssue.startDate, normalizedIssue.dueDate)
        : null;
    const { startData: sprintStartData, dueData: endSprintData } = getStartDateAndDueDataFromSprints(normalizedIssue);
    const hasSprintStartAndEndDate = Boolean(sprintStartData && endSprintData);
    let sprintDaysOfWork = hasSprintStartAndEndDate
        ? getBusinessDatesCount(sprintStartData?.start, endSprintData?.due)
        : null;
    const { startData, dueData } = getStartDateAndDueDataFromFieldsOrSprints(normalizedIssue);
    let totalDaysOfWork = null;
    if (startData && dueData) {
        totalDaysOfWork = getBusinessDatesCount(startData.start, dueData.due);
    }
    else if (isStoryPointsMedianValid) {
        totalDaysOfWork = deterministicTotalDaysOfWork;
    }
    else if (isStoryPointsValid) {
        totalDaysOfWork = storyPointsDaysOfWork;
    }
    const defaultOrTotalDaysOfWork = totalDaysOfWork !== null ? totalDaysOfWork : deterministicTotalDaysOfWork;
    const completedDaysOfWork = getSelfCompletedDays(startData, dueData, totalDaysOfWork);
    return {
        isConfidenceValid,
        usedConfidence,
        isStoryPointsValid,
        defaultOrStoryPoints,
        storyPointsDaysOfWork,
        isStoryPointsMedianValid,
        defaultOrStoryPointsMedian,
        storyPointsMedianDaysOfWork,
        deterministicExtraPoints,
        deterministicExtraDaysOfWork,
        deterministicTotalPoints,
        deterministicTotalDaysOfWork,
        probablisticExtraPoints,
        probablisticExtraDaysOfWork,
        probablisticTotalPoints,
        probablisticTotalDaysOfWork,
        hasStartAndDueDate,
        startAndDueDateDaysOfWork,
        hasSprintStartAndEndDate,
        sprintDaysOfWork,
        sprintStartData,
        endSprintData,
        ...startData,
        ...dueData,
        totalDaysOfWork,
        defaultOrTotalDaysOfWork,
        completedDaysOfWork,
    };
}
function isConfidenceValueValid(value) {
    return value !== null && value > 0 && value <= 100;
}
function isStoryPointsValueValid(value) {
    return value !== null && value >= 0;
}
/**
 *
 * @param {import("../../../shared/issue-data/date-data.js").StartData} startData
 * @param {import("../../../shared/issue-data/date-data.js").DueData} dueData
 * @returns number
 */
function getSelfCompletedDays(startData, dueData, daysOfWork) {
    // These are cases where the child issue (Epic) has a valid estimation
    if (startData && startData.start < new Date()) {
        if (!dueData || dueData.due > new Date()) {
            return getBusinessDatesCount(startData.start, new Date());
        }
        else {
            return getBusinessDatesCount(startData.start, dueData.due);
        }
    }
    // if there's an end date in the past ...
    else if (dueData && dueData.due < new Date()) {
        return daysOfWork || 0;
    }
    else {
        return 0;
    }
}

/**
 * Adds derived data
 * @param {NormalizedIssue} normalizedIssue
 * @return {DerivedIssue}
 */
function deriveIssue(issue, options = {}) {
    const derivedTiming = deriveWorkTiming(issue, options);
    const derivedStatus = getWorkStatus(issue, options);
    return {
        derivedTiming,
        derivedStatus,
        ...issue,
    };
}

function responseToJSON(response) {
    if (!response.ok) {
        return response.json().then((payload) => {
            const err = new Error("HTTP status code: " + response.status);
            Object.assign(err, payload);
            Object.assign(err, response);
            throw err;
        });
    }
    return response.json();
}

function responseToText(response) {
    if (!response.ok) {
        return response.json().then((payload) => {
            const err = new Error("HTTP status code: " + response.status);
            Object.assign(err, payload);
            Object.assign(err, response);
            throw err;
        });
    }
    return response.text();
}
function nativeFetchJSON(url, options) {
    return fetch(url, options).then(responseToJSON);
}
function chunkArray(array, size) {
    const chunkedArr = [];
    for (let i = 0; i < array.length; i += size) {
        chunkedArr.push(array.slice(i, i + size));
    }
    return chunkedArr;
}
function JiraOIDCHelpers ({ JIRA_CLIENT_ID, JIRA_SCOPE, JIRA_CALLBACK_URL, JIRA_API_URL, JIRA_APP_KEY } = window.env, requestHelper, host) {
    let fetchJSON = nativeFetchJSON;
    let fieldsRequest;
    function makeDeepChildrenLoaderUsingNamedFields(rootMethod) {
        // Makes child requests in batches of 40
        //
        // params - base params
        // sourceParentIssues - the source of parent issues
        function fetchChildrenResponses(params, parentIssues, progress) {
            const issuesToQuery = chunkArray(parentIssues, 40);
            const batchedResponses = issuesToQuery.map((issues) => {
                const keys = issues.map((issue) => issue.key);
                const jql = `parent in (${keys.join(", ")}) ${params.childJQL || ""}`;
                return rootMethod({
                    ...params,
                    jql,
                }, progress);
            });
            // this needs to be flattened
            return batchedResponses;
        }
        async function fetchDeepChildren(params, sourceParentIssues, progress) {
            const batchedFirstResponses = fetchChildrenResponses(params, sourceParentIssues, progress);
            const getChildren = (parentIssues) => {
                if (parentIssues.length) {
                    return fetchDeepChildren(params, parentIssues, progress).then((deepChildrenIssues) => {
                        return parentIssues.concat(deepChildrenIssues);
                    });
                }
                else {
                    return parentIssues;
                }
            };
            const batchedIssueRequests = batchedFirstResponses.map((firstBatchPromise) => {
                return firstBatchPromise.then(getChildren);
            });
            const allChildren = await Promise.all(batchedIssueRequests);
            return allChildren.flat();
        }
        return async function fetchAllDeepChildren(params, progress = (() => { })) {
            const fields = await fieldsRequest;
            const newParams = {
                ...params,
                fields: params.fields?.map((f) => fields.nameMap[f] || f),
            };
            progress.data = progress.data || {
                issuesRequested: 0,
                issuesReceived: 0,
                changeLogsRequested: 0,
                changeLogsReceived: 0,
            };
            const parentIssues = await rootMethod(newParams, progress);
            // go get the children
            const allChildrenIssues = await fetchDeepChildren(newParams, parentIssues, progress);
            const combined = parentIssues.concat(allChildrenIssues);
            return combined.map((issue) => {
                return {
                    ...issue,
                    fields: mapIdsToNames(issue.fields, fields),
                };
            });
        };
    }
    const jiraHelpers = {
        appKey: JIRA_APP_KEY,
        saveInformationToLocalStorage: (parameters) => {
            const objectKeys = Object.keys(parameters);
            for (let key of objectKeys) {
                window.localStorage.setItem(key, parameters[key]);
            }
        },
        clearAuthFromLocalStorage: function () {
            window.localStorage.removeItem("accessToken");
            window.localStorage.removeItem("refreshToken");
            window.localStorage.removeItem("expiryTimestamp");
        },
        fetchFromLocalStorage: (key) => {
            return window.localStorage.getItem(key);
        },
        fetchAuthorizationCode: () => {
            const url = `https://auth.atlassian.com/authorize?audience=api.atlassian.com&client_id=${JIRA_CLIENT_ID}&scope=${JIRA_SCOPE}&redirect_uri=${JIRA_CALLBACK_URL}&response_type=code&prompt=consent&state=${encodeURIComponent(encodeURIComponent(window.location.search))}`;
            window.location.href = url;
        },
        refreshAccessToken: async (accessCode) => {
            try {
                const response = await fetchJSON(`${window.env.JIRA_API_URL}/?code=${accessCode}`);
                const { accessToken, expiryTimestamp, refreshToken } = response.data;
                jiraHelpers.saveInformationToLocalStorage({
                    accessToken,
                    refreshToken,
                    expiryTimestamp,
                });
                return accessToken;
            }
            catch (error) {
                if (error instanceof Error) {
                    console.error(error.message);
                }
                else {
                    console.error("An unknown error occurred");
                }
                jiraHelpers.clearAuthFromLocalStorage();
                jiraHelpers.fetchAuthorizationCode();
            }
        },
        fetchAccessTokenWithAuthCode: async (authCode) => {
            try {
                const { accessToken, expiryTimestamp, refreshToken, scopeId } = await fetchJSON(`./access-token?code=${authCode}`);
                jiraHelpers.saveInformationToLocalStorage({
                    accessToken,
                    refreshToken,
                    expiryTimestamp,
                    scopeId,
                });
                //redirect to data page
                const addOnQuery = new URL(window.location).searchParams.get("state");
                const decoded = decodeURIComponent(addOnQuery);
                location.href = "/" + (addOnQuery || "");
            }
            catch (error) {
                //handle error properly.
                console.error(error);
                // location.href = '/error.html';
            }
        },
        fetchAccessibleResources: () => {
            return requestHelper(`https://api.atlassian.com/oauth/token/accessible-resources`);
        },
        fetchJiraSprint: async (sprintId) => {
            return requestHelper(`/agile/1.0/sprint/${sprintId}`);
        },
        fetchJiraIssue: async (issueId) => {
            return requestHelper(`/api/3/issue/${issueId}`);
        },
        fetchIssueTypes: async () => {
            const response = requestHelper(`/api/3/issuetype`);
            return response;
        },
        editJiraIssueWithNamedFields: async (issueId, fields) => {
            const scopeIdForJira = jiraHelpers.fetchFromLocalStorage("scopeId");
            const accessToken = jiraHelpers.fetchFromLocalStorage("accessToken");
            const fieldMapping = await fieldsRequest;
            const editBody = fieldsToEditBody(fields, fieldMapping);
            //const fieldsWithIds = mapNamesToIds(fields || {}, fieldMapping),
            //	updateWithIds = mapNamesToIds(update || {}, fieldMapping);
            return fetch(`${JIRA_API_URL}/${scopeIdForJira}/rest/api/3/issue/${issueId}?` + "" /*new URLSearchParams(params)*/, {
                method: "PUT",
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                    Accept: "application/json",
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(editBody),
            }).then(responseToText);
        },
        fetchJiraIssuesWithJQL: function (params) {
            // TODO - investigate this and convert params to proper type
            return requestHelper(`/api/3/search?` + new URLSearchParams(params));
        },
        fetchJiraIssuesWithJQLWithNamedFields: async function (params) {
            const fields = await fieldsRequest;
            const newParams = {
                ...params,
                fields: params.fields?.map((f) => fields.nameMap[f] || f),
            };
            const response = await jiraHelpers.fetchJiraIssuesWithJQL(newParams);
            return response.issues.map((issue) => {
                return {
                    ...issue,
                    fields: mapIdsToNames(issue.fields, fields),
                };
            });
        },
        fetchAllJiraIssuesWithJQL: async function (params) {
            const { limit: limit, ...apiParams } = params;
            const firstRequest = jiraHelpers.fetchJiraIssuesWithJQL({ maxResults: 100, ...apiParams });
            const { issues, maxResults, total, startAt } = await firstRequest;
            const requests = [firstRequest];
            const limitOrTotal = Math.min(total, limit || Infinity);
            for (let i = startAt + maxResults; i < limitOrTotal; i += maxResults) {
                requests.push(jiraHelpers.fetchJiraIssuesWithJQL({ maxResults: maxResults, startAt: i, ...apiParams }));
            }
            return Promise.all(requests).then((responses) => {
                return responses.map((response) => response.issues).flat();
            });
        },
        fetchAllJiraIssuesWithJQLUsingNamedFields: async function (params) {
            const fields = await fieldsRequest;
            const newParams = {
                ...params,
                fields: params.fields?.map((f) => fields.nameMap[f] || f),
            };
            const response = await jiraHelpers.fetchAllJiraIssuesWithJQL(newParams);
            return response.map((issue) => {
                return {
                    ...issue,
                    fields: mapIdsToNames(issue.fields, fields),
                };
            });
        },
        fetchJiraChangelog(issueIdOrKey, params) {
            // TODO investigate this - convert params to proper type
            return requestHelper(`/api/3/issue/${issueIdOrKey}/changelog?` + new URLSearchParams(params));
        },
        isChangelogComplete(changelog) {
            return changelog.histories.length === changelog.total;
        },
        fetchRemainingChangelogsForIssues(issues, progress = () => { }) {
            // check for remainings
            return Promise.all(issues.map((issue) => {
                if (jiraHelpers.isChangelogComplete(issue.changelog)) {
                    return {
                        ...issue,
                        changelog: issue.changelog.histories,
                    };
                }
                else {
                    return jiraHelpers.fetchRemainingChangelogsForIssue(issue.key, issue.changelog).then((histories) => {
                        return {
                            ...issue,
                            changelog: issue.changelog.histories,
                        };
                    });
                }
            }));
        },
        // weirdly, this starts with the oldest, but we got the most recent
        // returns an array of histories objects
        fetchRemainingChangelogsForIssue(issueIdOrKey, mostRecentChangeLog) {
            const { histories, maxResults, total, startAt } = mostRecentChangeLog;
            const requests = [];
            requests.push({ values: mostRecentChangeLog.histories });
            for (let i = 0; i < total - maxResults; i += maxResults) {
                requests.push(jiraHelpers
                    .fetchJiraChangelog(issueIdOrKey, {
                    maxResults: Math.min(maxResults, total - maxResults - i),
                    startAt: i,
                })
                    .then((response) => {
                    // the query above reverses the sort order, we fix that here
                    return { ...response, values: response.values.reverse() };
                }));
            }
            // server sends back as "values", we match that
            return Promise.all(requests)
                .then((responses) => {
                return responses.map((response) => response.values).flat();
            })
                .then(function (response) {
                return response;
            });
        },
        fetchAllJiraIssuesWithJQLAndFetchAllChangelog(params, progress = () => { }) {
            const { limit: limit, ...apiParams } = params;
            // a weak map would be better
            progress.data =
                progress.data ||
                    {
                        issuesRequested: 0,
                        issuesReceived: 0,
                        changeLogsRequested: 0,
                        changeLogsReceived: 0,
                    };
            function getRemainingChangeLogsForIssues(response) {
                if (progress.data) {
                    Object.assign(progress.data, {
                        issuesReceived: progress.data.issuesReceived + response.issues.length,
                    });
                    progress(progress.data);
                }
                return jiraHelpers.fetchRemainingChangelogsForIssues(response.issues, progress);
            }
            const firstRequest = jiraHelpers.fetchJiraIssuesWithJQL({ maxResults: 100, expand: ["changelog"], ...apiParams });
            return firstRequest.then(({ issues, maxResults, total, startAt }) => {
                if (progress.data) {
                    Object.assign(progress.data, {
                        issuesRequested: progress.data.issuesRequested + total,
                        changeLogsRequested: 0,
                        changeLogsReceived: 0,
                    });
                    progress(progress.data);
                }
                const requests = [firstRequest.then(getRemainingChangeLogsForIssues)];
                const limitOrTotal = Math.min(total, limit || Infinity);
                for (let i = startAt + maxResults; i < limitOrTotal; i += maxResults) {
                    requests.push(jiraHelpers
                        .fetchJiraIssuesWithJQL({ maxResults: maxResults, startAt: i, ...apiParams })
                        .then(getRemainingChangeLogsForIssues));
                }
                return Promise.all(requests).then((responses) => {
                    return responses.flat();
                });
            });
        },
        // this could do each response incrementally, but I'm being lazy
        fetchAllJiraIssuesWithJQLAndFetchAllChangelogUsingNamedFields: async function (params, progress = () => { }) {
            const fields = await fieldsRequest;
            const newParams = {
                ...params,
                fields: params.fields.map((f) => fields.nameMap[f] || f),
            };
            const response = await jiraHelpers.fetchAllJiraIssuesWithJQLAndFetchAllChangelog(newParams, progress);
            return response.map((issue) => {
                return {
                    ...issue,
                    fields: mapIdsToNames(issue.fields, fields),
                };
            });
            // change the parms
        },
        fetchAllJiraIssuesAndDeepChildrenWithJQLAndFetchAllChangelogUsingNamedFields: async function (params, progress = () => { }) {
            console.warn("THIS METHOD SHOULD BE IMPOSSIBLE TO CALL");
            return Promise.resolve(null);
        },
        fetchChildrenResponses(params, parentIssues, progress = () => { }) {
            const issuesToQuery = chunkArray(parentIssues, 40);
            const batchedResponses = issuesToQuery.map((issues) => {
                const keys = issues.map((issue) => issue.key);
                const jql = `parent in (${keys.join(", ")})`;
                return this.fetchAllJiraIssuesWithJQLAndFetchAllChangelog({
                    ...params,
                    jql,
                }, progress);
            });
            // this needs to be flattened
            return batchedResponses;
        },
        // Makes child requests in batches of 40
        //
        // params - base params
        // sourceParentIssues - the source of parent issues
        fetchDeepChildren(params, sourceParentIssues, progress = () => { }) {
            const batchedFirstResponses = this.fetchChildrenResponses(params, sourceParentIssues, progress);
            const getChildren = (parentIssues) => {
                if (parentIssues.length) {
                    return this.fetchDeepChildren(params, parentIssues, progress).then((deepChildrenIssues) => {
                        return parentIssues.concat(deepChildrenIssues);
                    });
                }
                else {
                    return parentIssues;
                }
            };
            const batchedIssueRequests = batchedFirstResponses.map((firstBatchPromise) => {
                return firstBatchPromise.then(getChildren);
            });
            return Promise.all(batchedIssueRequests).then((allChildren) => {
                return allChildren.flat();
            });
        },
        fetchJiraFields() {
            return requestHelper(`/api/3/field`);
        },
        getAccessToken: async function () {
            if (!jiraHelpers.hasValidAccessToken()) {
                const refreshToken = jiraHelpers.fetchFromLocalStorage("refreshToken");
                if (!refreshToken) {
                    jiraHelpers.fetchAuthorizationCode();
                }
                else {
                    return jiraHelpers.refreshAccessToken();
                }
            }
            else {
                return jiraHelpers.fetchFromLocalStorage("accessToken");
            }
        },
        hasAccessToken: function () {
            return !!jiraHelpers.fetchFromLocalStorage("accessToken");
        },
        hasValidAccessToken: function () {
            const accessToken = jiraHelpers.fetchFromLocalStorage("accessToken");
            let expiryTimestamp = Number(jiraHelpers.fetchFromLocalStorage("expiryTimestamp"));
            if (isNaN(expiryTimestamp)) {
                expiryTimestamp = 0;
            }
            const currentTimestamp = Math.floor(new Date().getTime() / 1000.0);
            return !(currentTimestamp > expiryTimestamp || !accessToken);
        },
        _cachedServerInfoPromise: function () {
            return requestHelper("/api/3/serverInfo");
        },
        getServerInfo() {
            // if(this._cachedServerInfoPromise) {
            // 	return this._cachedServerInfoPromise;
            // }
            // // https://your-domain.atlassian.net/rest/api/3/serverInfo
            // return this._cachedServerInfoPromise( = requestHelper('/api/3/serverInfo'));
            return this._cachedServerInfoPromise();
        },
    };
    jiraHelpers.fetchAllJiraIssuesAndDeepChildrenWithJQLUsingNamedFields = makeDeepChildrenLoaderUsingNamedFields(jiraHelpers.fetchAllJiraIssuesWithJQL.bind(jiraHelpers));
    jiraHelpers.fetchAllJiraIssuesAndDeepChildrenWithJQLAndFetchAllChangelogUsingNamedFields =
        makeDeepChildrenLoaderUsingNamedFields(jiraHelpers.fetchAllJiraIssuesWithJQLAndFetchAllChangelog.bind(jiraHelpers));
    // commented out because it's not used
    // function makeFieldNameToIdMap(
    // 	fields: {
    // 		name: string;
    // 		id: string | number;
    // 	}[]
    // ) {
    // 	const map = {};
    // 	fields.forEach((f) => {
    // 		map[f.name] = f.id;
    // 	});
    // 	return map;
    // }
    if (host === "jira" || jiraHelpers.hasValidAccessToken()) {
        // @ts-ignore
        fieldsRequest = jiraHelpers.fetchJiraFields().then((fields) => {
            const nameMap = {};
            const idMap = {};
            // @ts-ignore
            fields.forEach((f) => {
                // @ts-ignore
                idMap[f.id] = f.name;
                // @ts-ignore
                nameMap[f.name] = f.id;
            });
            console.log(nameMap);
            return {
                list: fields,
                nameMap: nameMap,
                idMap: idMap,
            };
        });
        // @ts-ignore
        jiraHelpers.fieldsRequest = fieldsRequest;
    }
    function mapIdsToNames(obj, fields) {
        const mapped = {};
        for (let prop in obj) {
            mapped[fields.idMap[prop] || prop] = obj[prop];
        }
        return mapped;
    }
    function fieldsToEditBody(obj, fieldMapping) {
        const editBody = { fields: {}, update: {} };
        for (let prop in obj) {
            //if(prop === "Story points") {
            // 10016 -> story point estimate
            // 10034 -> story points
            //obj[prop] = ""+obj[prop];
            //mapped["customfield_10016"] = obj[prop];
            //mapped["customfield_10034"] = obj[prop];
            //mapped["Story points"] = obj[prop];
            //mapped["storypoints"] = obj[prop];
            //mapped["Story Points"] = obj[prop];
            // 10016 -> story point estimate
            //} else {
            //mapped[fields.nameMap[prop] || prop] = obj[prop];
            //}
            editBody.update[fieldMapping.nameMap[prop] || prop] = [{ set: obj[prop] }];
        }
        return editBody;
    }
    // commented out because it's not used
    // function mapNamesToIds(obj, fields) {
    // 	const mapped = {};
    // 	for (let prop in obj) {
    // 		//if(prop === "Story points") {
    // 			// 10016 -> story point estimate
    // 			// 10034 -> story points
    // 			//obj[prop] = ""+obj[prop];
    // 			//mapped["customfield_10016"] = obj[prop];
    // 			//mapped["customfield_10034"] = obj[prop];
    // 			//mapped["Story points"] = obj[prop];
    // 			//mapped["storypoints"] = obj[prop];
    // 			//mapped["Story Points"] = obj[prop];
    // 			// 10016 -> story point estimate
    // 		//} else {
    // 			mapped[fields.nameMap[prop] || prop] = obj[prop];
    // 		//}
    // 	}
    // }
    window.jiraHelpers = jiraHelpers;
    window.jiraHelpers.requester = requestHelper;
    return jiraHelpers;
}

const REFERENCE_DATE = new Date(2024, 8, 21);
const DAY = 1000 * 60 * 60 * 24;

// http://localhost:3000/?primaryIssueType=Initiative&statusesToShow=Development%2CReady&primaryReportType=breakdown&secondaryReportType=breakdown&jql=parent+in+%28IMP-143%2C+IMP-147%29+Order+By+Rank&loadChildren=true

let PROMISE = null;
const isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;
function bitoviTrainingData(dateToShift) {
  if (PROMISE === null) {
    if (isNode) {
      PROMISE = Promise.resolve([{}]);
    } else {
      PROMISE = nativeFetchJSON("./examples/bitovi-training.json");
    }
    PROMISE.then(function (data) {
      const daysShift = Math.round((dateToShift.getTime() - REFERENCE_DATE.getTime()) / DAY) - 0;
      return adjustDateStrings(data, daysShift);
    });
  }
  return PROMISE;
}
let TRAINING_DATA_PROMISE = null;
function bitoviTrainingIssueData() {
  if (TRAINING_DATA_PROMISE === null) {
    if (isNode) {
      TRAINING_DATA_PROMISE = Promise.resolve([{}]);
    } else {
      TRAINING_DATA_PROMISE = nativeFetchJSON("./examples/bitovi-training-issue-types.json");
    }
  }
  return TRAINING_DATA_PROMISE;
}
function adjustDateStrings(obj, days) {
  const dateRegex = /\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d{1,3})?([-+]\d{2}:\d{2})?)?/;
  function addDaysToDate(dateStr, daysToAdd) {
    const date = new Date(dateStr);
    date.setDate(date.getDate() + daysToAdd);
    return date.toISOString();
  }
  function formatDate(date, originalFormat) {
    if (originalFormat.includes('T') && originalFormat.includes('-0600')) {
      return date.replace('Z', '').replace(/\.\d{3}/, '') + '-0600';
    } else if (originalFormat.includes('T')) {
      return date.replace('Z', '');
    } else if (originalFormat.includes('-')) {
      return date.split('T')[0];
    } else {
      // Assumes format "yyyy-MM-dd HH:mm:ss.0"
      return date.replace('T', ' ').replace('Z', '').replace(/\.\d{3}/, '.0');
    }
  }
  for (let key in obj) {
    if (typeof obj[key] === 'string' && dateRegex.test(obj[key])) {
      const newDate = addDaysToDate(obj[key], days);
      obj[key] = formatDate(newDate, obj[key]);
    } else if (typeof obj[key] === 'object' && obj[key] !== null) {
      adjustDateStrings(obj[key], days);
    } else if (Array.isArray(obj[key])) {
      obj[key] = obj[key].map(item => {
        if (typeof item === 'string' && dateRegex.test(item)) {
          const newDate = addDaysToDate(item, days);
          return formatDate(newDate, item);
        } else if (typeof item === 'object' && item !== null) {
          adjustDateStrings(item, days);
        }
        return item;
      });
    }
  }
  return obj;
}

/**
 * This module makes requests, either to sample data, or to data from Jira
 */

function makeCacheable(fn, time = 1000) {
  let cachePromise = null;
  let timeout = null;
  return function makeRequest(...args) {
    if (!timeout && cachePromise) {
      return cachePromise;
    } else {
      cachePromise = fn(...args);
      setTimeout(() => {
        cachePromise = timeout = null;
      }, time);
      return cachePromise;
    }
  };
}
const getServerInfo = makeCacheable(({
  jiraHelpers,
  isLoggedIn
}) => {
  if (isLoggedIn) {
    return jiraHelpers.getServerInfo();
  } else {
    return nativeFetchJSON("./examples/bitovi-training-server-info.json");
  }
});
const getSimplifiedIssueHierarchy = makeCacheable(({
  jiraHelpers,
  isLoggedIn
}) => {
  if (jiraHelpers.hasValidAccessToken()) {
    return jiraHelpers.fetchIssueTypes().then(simplifyIssueHierarchy);
  } else {
    return bitoviTrainingIssueData().then(simplifyIssueHierarchy);
  }
});
function simplifyIssueHierarchy(types) {
  const levelsToTypes = [];
  for (let type of types) {
    // ignore subtasks
    if (type.hierarchyLevel >= 0) {
      if (!levelsToTypes[type.hierarchyLevel]) {
        levelsToTypes[type.hierarchyLevel] = [];
      }
      levelsToTypes[type.hierarchyLevel].push(type);
    }
  }
  return levelsToTypes.map((types, i) => {
    return types[0];
  }).filter(i => i).reverse();
}
function getRawIssues({
  isLoggedIn,
  loadChildren,
  jiraHelpers,
  jql,
  fields,
  childJQL
}, {
  progressUpdate
}) {
  let fieldsToLoad = fields ?? ["summary", "Rank", "Start date", "Due date", "Issue Type", "Fix versions", "Story points", "Story points median", "Confidence", "Story points confidence", "Labels", "Status", "Sprint", "Created", "Parent"];
  // progressData.value = null; THIS NEEDS TO HAPPEN OUTSIDE
  if (isLoggedIn === false) {
    // mock data is already field-translated
    return bitoviTrainingData(new Date());
  }
  if (!jql) {
    return undefined;
  }
  const loadIssues = loadChildren ? jiraHelpers.fetchAllJiraIssuesAndDeepChildrenWithJQLAndFetchAllChangelogUsingNamedFields.bind(jiraHelpers) : jiraHelpers.fetchAllJiraIssuesWithJQLAndFetchAllChangelogUsingNamedFields.bind(jiraHelpers);
  return loadIssues({
    jql: jql,
    childJQL: childJQL ? " and " + childJQL : "",
    fields: fieldsToLoad,
    expand: ["changelog"]
  }, progressUpdate);
}

function rawIssuesRequestData({
  jql,
  childJQL,
  isLoggedIn,
  loadChildren,
  jiraHelpers
}, {
  listenTo,
  resolve
}) {
  const progressData = canValue_1_1_2_canValue.with(null);
  const promise = canValue_1_1_2_canValue.returnedBy(function rawIssuesPromise() {
    progressData.value = null;
    return getRawIssues({
      isLoggedIn: isLoggedIn.value,
      loadChildren: loadChildren.value,
      jiraHelpers,
      jql: jql.value,
      childJQL: childJQL.value
      // fields ... we will have to do this
    }, {
      progressUpdate: receivedProgressData => {
        progressData.value = {
          ...receivedProgressData
        };
      }
    });
  });
  listenTo(promise, value => {
    resolve({
      progressData,
      issuesPromise: value
    });
  });
  resolve({
    progressData,
    issuesPromise: promise.value
  });
}
function resolve(value) {
  if (value instanceof Promise) {
    return value;
  } else {
    return canReflect_1_19_2_canReflect.getValue(value);
  }
}
function serverInfoPromise({
  jiraHelpers,
  isLoggedIn
}) {
  return getServerInfo({
    jiraHelpers,
    isLoggedIn: resolve(isLoggedIn)
  });
}
function configurationPromise({
  serverInfoPromise,
  teamConfigurationPromise,
  normalizeObservable
}) {
  // we will give pending until we have both promises

  const info = resolve(serverInfoPromise),
    team = resolve(teamConfigurationPromise),
    normalizeOptions = resolve(normalizeObservable);
  if (!info || !team || !normalizeOptions) {
    return new Promise(() => {});
  }
  return Promise.all([info, team]).then(
  /**
   *
   * @param {[Object, TeamConfiguration]} param0
   * @returns
   */
  ([serverInfo, teamData]) => {
    return {
      getConfidence({
        fields
      }) {
        return fields.Confidence;
      },
      getStoryPointsMedian({
        fields
      }) {
        return fields["Story points median"];
      },
      getUrl({
        key
      }) {
        return serverInfo.baseUrl + "/browse/" + key;
      },
      getVelocity(team) {
        return teamData.getVelocityForTeam(team);
      },
      getDaysPerSprint(team) {
        return teamData.getDaysPerSprintForTeam(team);
      },
      getParallelWorkLimit(team) {
        return teamData.getTracksForTeam(team);
      },
      ...(normalizeOptions ?? {})
    };
  });
}
function derivedIssuesRequestData({
  rawIssuesRequestData,
  configurationPromise
}, {
  listenTo,
  resolve
}) {
  const promise = canValue_1_1_2_canValue.returnedBy(function derivedIssuesPromise() {
    if (rawIssuesRequestData.value.issuesPromise && configurationPromise.value) {
      return Promise.all([rawIssuesRequestData.value.issuesPromise, configurationPromise.value]).then(([rawIssues, configuration]) => {
        console.log({
          rawIssues
        });
        return rawIssues.map(issue => {
          const normalized = normalizeIssue(issue, configuration);
          const derived = deriveIssue(normalized, configuration);
          return derived;
        });
      });
    } else {
      // make a pending promise ...
      const promise = new Promise(() => {});
      promise.__isAlwaysPending = true;
      return promise;
    }
  });
  listenTo(promise, derivedIssues => {
    resolve({
      issuesPromise: derivedIssues,
      progressData: rawIssuesRequestData.value.progressData
    });
  });
  resolve({
    issuesPromise: promise.value,
    progressData: rawIssuesRequestData.value.progressData
  });
}

const selectStyle = "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 p-2 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500";
const DEFAULT_CALCULATION_METHOD = "widestRange";
class TimingCalculation extends canStacheElement {
  static view = `
        <h3 class="h3">Timing Calculation</h3>
        <div class="grid gap-2 my-2" style="grid-template-columns: auto auto auto;">
            <div class="text-sm py-1 text-slate-600 font-semibold" style="grid-column: 1 / span 1; grid-row: 1 / span 1;">Parent Type</div>
            <div class="text-sm py-1 text-slate-600 font-semibold" style="grid-column: 2 / span 1; grid-row: 1 / span 1;">Child Type</div>
            <div class="text-sm py-1 text-slate-600 font-semibold" style="grid-column: 3 / span 1; grid-row: 1 / span 1;">How is timing calculated between parent and child?</div>
            <div class="border-b-2 border-neutral-40" style="grid-column: 1 / span 3; grid-row: 1 / span 1;"></div>

            {{# for(timingLevel of this.selectableTimingLevels) }}

                <label class="pr-2 py-2 {{ this.paddingClass(scope.index) }}">{{timingLevel.type}}</label>
                <span class="p-2">{{timingLevel.childType}}</span>
                

                <select class="${selectStyle}" on:change="this.updateCalculation(timingLevel.type, scope.element.value)">
                {{# for(calculation of timingLevel.calculations) }}
                    <option {{# if(calculation.selected) }}selected{{/ if }} value="{{calculation.calculation}}">{{calculation.name}}</option>
                {{/ for }}
                </select>

            {{/ for }}
            
        </div>
    `;
  static props = {
    get jiraIssueHierarchyPromise() {
      return getSimplifiedIssueHierarchy({
        isLoggedIn: this.jiraHelpers.hasValidAccessToken(),
        jiraHelpers: this.jiraHelpers
      });
    },
    issueHierarchy: {
      async(resolve) {
        return this.jiraIssueHierarchyPromise;
      }
    },
    get selectableTimingLevels() {
      if (!this.issueHierarchy) {
        return [];
      } else {
        const allLevels = getTimingLevels(this.issueHierarchy, this.timingCalculations);
        return allLevels.slice(0, allLevels.length - 1);
      }
    },
    timingCalculations: {
      value({
        resolve,
        lastSet,
        listenTo
      }) {
        let currentValue;
        updateValue(new URL(window.location).searchParams.get("timingCalculations"));
        listenTo(lastSet, value => {
          updateValue(value);
        });
        function updateValue(value) {
          if (typeof value === "string") {
            try {
              value = parse(value);
            } catch (e) {
              value = [];
            }
          } else if (!value) {
            value = [];
          }
          updateUrlParam("timingCalculations", stringify(value), stringify([]));
          currentValue = value;
          resolve(currentValue);
        }
        function parse(value) {
          let phrases = value.split(",");
          const data = {};
          for (let phrase of phrases) {
            const parts = phrase.split(":");
            data[parts[0]] = parts[1];
          }
          return data;
        }
        function stringify(obj) {
          return Object.keys(obj).map(key => key + ":" + obj[key]).join(",");
        }
      }
    },
    get issueTimingCalculations() {
      if (!this.issueHierarchy) {
        return [];
      } else {
        const allLevels = getTimingLevels(this.issueHierarchy, this.timingCalculations);
        return allLevels.map(level => {
          return {
            type: level.type,
            hierarchyLevel: level.hierarchyLevel,
            calculation: level.calculations.find(level => level.selected).calculation
          };
        });
      }
    }
  };
  updateCalculation(type, value) {
    let current = {
      ...this.timingCalculations
    };
    if (value === DEFAULT_CALCULATION_METHOD) {
      delete current[type];
    } else {
      current[type] = value;
    }
    this.timingCalculations = current;
  }

  // UI Helpers
  paddingClass(depth) {
    return "pl-" + depth * 2;
  }
}

/**
 * @type {{
*   type: string, 
*   calculation: string
* }} TimingCalculation
*/

const calculationKeysToNames = {
  parentFirstThenChildren: function (parent, child) {
    return `From ${parent.type}, then ${child.plural}`;
  },
  childrenOnly: function (parent, child) {
    return `From ${child.plural}`;
  },
  childrenFirstThenParent: function (parent, child) {
    return `From ${child.plural}, then ${parent.type}`;
  },
  widestRange: function (parent, child) {
    return `From ${parent.type} or ${child.plural} (earliest to latest)`;
  },
  parentOnly: function (parent, child) {
    return `From ${parent.type}`;
  }
};
function createBaseLevels(issueHierarchy) {
  return issueHierarchy.map(issue => {
    return {
      type: issue.name,
      source: issue,
      plural: issue.name + "s",
      hierarchyLevel: issue.hierarchyLevel
    };
  });
}
function calculationsForLevel(parent, child, selected, last) {
  if (!last) {
    return Object.keys(calculationKeysToNames).map(calculationName => {
      return {
        parent: parent.type,
        child: child.type,
        calculation: calculationName,
        name: calculationKeysToNames[calculationName](parent, child),
        selected: selected ? selected === calculationName : "widestRange" === calculationName
      };
    });
  } else {
    return [{
      parent: parent.type,
      child: null,
      calculation: "parentOnly",
      name: calculationKeysToNames.parentOnly(parent),
      selected: true
    }];
  }
}

/*
return {
    child: issueTypeName, 
    parent: issueType.type, 
    calculation: calculationName, name: calculationKeysToNames[calculationName](issueType, typeToIssueType[issueTypeName]) }
*/

/**
* 
* @param {TimingCalculationsMap} issueTypeMap 
* @param {string} primaryIssueType 
* @param {Array<TimingCalculation>} timingCalculations 
* @returns 
*/
function getTimingLevels(issueHierarchy, timingCalculations) {
  const baseLevels = createBaseLevels(issueHierarchy);
  return baseLevels.map((level, i) => {
    const child = baseLevels[i + 1];
    const isLast = i === baseLevels.length - 1;
    return {
      ...level,
      childType: child ? child.type : null,
      calculations: calculationsForLevel(level, child, timingCalculations[level.type], isLast)
    };
  });
}
customElements.define("timing-calculation", TimingCalculation);

const booleanParsing$1 = {
  parse: x => {
    return {
      "": true,
      true: true,
      false: false
    }[x];
  },
  stringify: x => "" + x
};
const GOBACK_BUTTON = `
  <button class="block p-2 text-sm text-slate-300 hover:bg-blue-50  w-full text-left"
    on:click="this.showSettings = ''">
    <img src="/images/go-back.svg" class="inline"/> Go back</button>
`;
class TimelineConfiguration extends canStacheElement {
  static view = `
    <div class="px-3 py-2 h-full">

        {{# not(this.showSettings) }}
            <h3 class="font-bold uppercase text-slate-300 text-xs pt-6 pb-1">Report Settings</h3>
        
            <button class="block p-2 text-sm text-slate-300 hover:bg-blue-50 w-full text-left"
                on:click="this.showSettings = 'SOURCES'"
                >
                    <img src="/images/magnifying-glass.svg" class="inline  align-bottom"/> 
                    <span class="pl-3">Sources</span></button>
            <button class="block p-2 text-sm text-slate-300 hover:bg-blue-50  w-full text-left"
                on:click="this.showSettings = 'TIMING'">
                <img src="/images/calendar.svg" class="inline  align-bottom"/>
                <span class="pl-3">Timing</span></button>

            <h3 class="font-bold uppercase text-slate-300 text-xs pt-4 pb-1">Global Settings</h3>

            <button class="block p-2 text-sm text-slate-300 hover:bg-blue-50  w-full text-left"
                on:click="this.showSettings = 'TEAMS'">
                    <img src="/images/team.svg" class="inline align-bottom"/> 
                    <span class="pl-3">Teams</span>
            </button>

            <p class="fixed bottom-4">
                <h3 class="font-bold uppercase text-slate-300 text-xs pb-1">Questions? </h3>
                <a class="link block" href="https://github.com/bitovi/jira-timeline-report/tree/main?tab=readme-ov-file#getting-started">Read the guide</a>
                <a class="link block" href="https://github.com/bitovi/jira-timeline-report/tree/main?tab=readme-ov-file#need-help-or-have-questions">Connect with us</a>
            </p>  
        {{/ not }}

        
        <div width="w-96"  class="{{^ eq(this.showSettings, "SOURCES")}}hidden{{/}}">
            ${GOBACK_BUTTON}
            <h3 class="h3">Issue Source</h3>
            <p>Specify a JQL that loads all issues you want to report on and help determine the timeline of your report.</p>
            <p>
                {{# if(this.isLoggedIn) }}
                <textarea class="w-full-border-box mt-2 form-border p-1" value:bind='this.jql'></textarea>
                {{ else }}
                <input class="w-full-border-box mt-2 form-border p-1 text-yellow-300" value="Sample data. Connect to Jira to specify." disabled/>
                {{/ if}}
            </p>
            
            {{# if(this.rawIssuesRequestData.issuesPromise.isRejected) }}
                <div class="border-solid-1px-slate-900 border-box block overflow-hidden color-text-and-bg-blocked p-1">
                <p>There was an error loading from Jira!</p>
                <p>Error message: {{this.rawIssuesRequestData.issuesPromise.reason.errorMessages[0]}}</p>
                <p>Please check your JQL is correct!</p>
                </div>
            {{/ if }}
            <div class="flex justify-between mt-1">

                <p class="text-xs flex">
                    <input type='checkbox' 
                        class='self-start align-middle h-6 mr-0.5' checked:bind='this.loadChildren'/>
                        <div class="align-middle h-6" style="line-height: 26px">
                            Load children. 
                            {{# if(this.loadChildren) }}
                                Optional children JQL filters: <input type='text' class="form-border p-1 h-5" value:bind="this.childJQL"/>
                            {{/ if }}
                        </div>
                </p>
                <p class="text-xs" style="line-height: 26px;">
                    {{# if(this.rawIssuesRequestData.issuesPromise.isPending) }}
                        {{# if(this.rawIssuesRequestData.progressData.issuesRequested)}}
                            Loaded {{this.rawIssuesRequestData.progressData.issuesReceived}} of {{this.rawIssuesRequestData.progressData.issuesRequested}} issues
                        {{ else }}
                            Loading issues ...
                        {{/ if}}
                    {{/ if }}
                    {{# if(this.rawIssuesRequestData.issuesPromise.isResolved) }}
                        Loaded {{this.rawIssuesRequestData.issuesPromise.value.length}} issues
                    {{/ if }}
                </p>
                
            </div>

            {{# and(this.statuses, this.statuses.length) }}
                <h4 class='py-2 text-sm text-slate-300 font-bold'>Statuses to exclude from all issue types</h4>
                <status-filter 
                    statuses:from="this.statuses"
                    param:raw="statusesToExclude"
                    selectedStatuses:bind="this.statusesToExclude"
                    inputPlaceholder:raw="Search for statuses"
                    style="max-width: 400px;">
                </status-filter>
            {{/ and }}

        </div>
        


        
        <div class="{{^ eq(this.showSettings, "TIMING")}}hidden{{/}}">
            ${GOBACK_BUTTON}
            <timing-calculation 
                jiraHelpers:from="this.jiraHelpers"
                issueTimingCalculations:to="this.issueTimingCalculations"></timing-calculation>
        </div>
        

  
        <div class="{{^ eq(this.showSettings, "TEAMS")}}hidden{{/}}">
            <div>${GOBACK_BUTTON}</div>
            <div> <div id="team-configuration"></div></div>
        </div>

    </div>
        `;
  static props = {
    // passed
    showSettings: saveJSONToUrl("settings", "", String, {
      parse: x => "" + x,
      stringify: x => "" + x
    }),
    jql: saveJSONToUrl("jql", "", String, {
      parse: x => "" + x,
      stringify: x => "" + x
    }),
    loadChildren: saveJSONToUrl("loadChildren", false, Boolean, booleanParsing$1),
    childJQL: saveJSONToUrl("childJQL", "", String, {
      parse: x => "" + x,
      stringify: x => "" + x
    }),
    statusesToExclude: makeArrayOfStringsQueryParamValue("statusesToExclude"),
    // from children
    issueTimingCalculations: null,
    storage: null,
    normalizeOptions: null,
    // VALUES DERIVING FROM THE `jql`
    rawIssuesRequestData: {
      value({
        listenTo,
        resolve
      }) {
        return rawIssuesRequestData({
          jql: canValue_1_1_2_canValue.from(this, "jql"),
          childJQL: canValue_1_1_2_canValue.from(this, "childJQL"),
          loadChildren: canValue_1_1_2_canValue.from(this, "loadChildren"),
          isLoggedIn: canValue_1_1_2_canValue.from(this, "isLoggedIn"),
          jiraHelpers: this.jiraHelpers
        }, {
          listenTo,
          resolve
        });
      }
    },
    get serverInfoPromise() {
      return serverInfoPromise({
        jiraHelpers: this.jiraHelpers,
        isLoggedIn: canValue_1_1_2_canValue.from(this, "isLoggedIn")
      });
    },
    get configurationPromise() {
      return configurationPromise({
        teamConfigurationPromise: this.teamConfigurationPromise,
        serverInfoPromise: this.serverInfoPromise,
        normalizeObservable: canValue_1_1_2_canValue.from(this.normalizeOptions)
      });
    },
    configuration: {
      async() {
        return this.configurationPromise;
      }
    },
    derivedIssuesRequestData: {
      value({
        listenTo,
        resolve
      }) {
        return derivedIssuesRequestData({
          rawIssuesRequestData: canValue_1_1_2_canValue.from(this, "rawIssuesRequestData"),
          configurationPromise: canValue_1_1_2_canValue.from(this, "configurationPromise")
        }, {
          listenTo,
          resolve
        });
      }
    },
    get derivedIssuesPromise() {
      return this.derivedIssuesRequestData.issuesPromise;
    },
    derivedIssues: {
      async() {
        return this.derivedIssuesRequestData.issuesPromise;
      }
    },
    // PROPERTIES DERIVING FROM `derivedIssues`
    get statuses() {
      if (this.derivedIssues) {
        return allStatusesSorted(this.derivedIssues);
      } else {
        return [];
      }
    },
    goBack() {
      this.showSettings = "";
    }
  };
  // HOOKS
  connectedCallback() {
    getFormData(this.jiraHelpers, this.storage).then(createNormalizeConfiguration).catch(() => {
      // Could fail because storage hasn't been setup yet
      return {};
    }).then(data => {
      this.normalizeOptions = data;
    });
    createRoot(document.getElementById("team-configuration")).render(reactExports.createElement(TeamConfigurationWrapper, {
      storage: this.storage,
      jira: this.jiraHelpers,
      onUpdate: partial => {
        this.normalizeOptions = partial;
      },
      onInitialDefaultsLoad: partial => {
        this.normalizeOptions = partial;
      }
    }));
  }
  connected() {}
  // METHODS
}

// jql =>
//
//    rawIssues =>
//        typeToIssueType

// timingCalculations

// firstIssueTypeWithStatuses(primaryIssueType, typeToIssueType, timingCalculations)

// primaryIssueType

customElements.define("timeline-configuration", TimelineConfiguration);

const DROPDOWN_LABEL = "block text-neutral-801 font-semibold text-xs pb-1";

const TOOLTIP$2 = new SimpleTooltip();
document.body.append(TOOLTIP$2);
const hoverEffect$2 = "hover:bg-neutral-301 cursor-pointer";
const RELEASES_TOOLTIP = new SimpleTooltip();
document.body.append(RELEASES_TOOLTIP);
class TypeSelectionDropdown extends canStacheElement {
  static view = `
        {{# for(issueType of this.issueHierarchy) }}
        <label class="px-4 py-2 block {{#eq(this.primaryIssueType, issueType.name)}}bg-blue-101{{else}}${hoverEffect$2}{{/eq}}"><input 
            type="radio" 
            name="primaryIssueType" 
            checked:from="eq(this.primaryIssueType, issueType.name)"
            on:change="this.onSelection(issueType.name)"/> {{issueType.name}}s </label>
        {{/ }}
        <label class="px-4 py-2  block {{#eq(this.primaryIssueType, 'Release')}}bg-blue-101{{else}}${hoverEffect$2}{{/eq}} border-t border-t-2 border-t-neutral-301"
            on:mouseenter="this.showReleases(scope.element)">
            Releases <img class="inline" src="/images/chevron-right-new.svg"/> 
        </label>
    `;
  showReleases(label) {
    let dropdown = new ReleasesTypeSelectionDropdown().initialize({
      issueHierarchy: this.issueHierarchy,
      onSelection: this.onSelection,
      secondaryIssueType: this.secondaryIssueType
    });
    RELEASES_TOOLTIP.rightOfElementInScrollingContainer(label, dropdown);
  }
}
customElements.define("select-type-dropdown", TypeSelectionDropdown);
class ReleasesTypeSelectionDropdown extends canStacheElement {
  static view = `
        {{# for(issueType of this.issueHierarchy) }}
        <label class="px-4 py-2 block {{#eq(this.secondaryIssueType, issueType.name)}}bg-blue-101{{else}}${hoverEffect$2}{{/eq}}"><input 
            type="radio" 
            name="primaryIssueType" 
            checked:from="eq(this.secondaryIssueType, issueType.name)"
            on:change="this.onSelection('Release', issueType.name)"/> {{issueType.name}}s </label>
        {{/ }}
    `;
}
customElements.define("select-release-type-dropdown", ReleasesTypeSelectionDropdown);
class SelectIssueType extends canStacheElement {
  static view = `
        <label for="reportOn" class="${DROPDOWN_LABEL}">Report on</label>
        {{# not(this.primaryIssueType) }}
            <button class="rounded bg-neutral-201 px-3 py-1" id="reportOn">Loading ... </button>
        {{/ }}
        {{# if(this.primaryIssueType) }}
            <button class="rounded bg-neutral-201 px-3 py-1 ${hoverEffect$2}" 
                on:click="this.showChildOptions()" 
                id="reportOn">
                {{this.primaryIssueType}}s
                {{# if(this.secondaryIssueType) }} / {{this.secondaryIssueType}}s {{/ if }}
                <img class="inline" src="/images/chevron-down.svg"/>
            </button>
        {{/ }}
    `;
  static props = {
    simplifiedIssueHierarchy: {
      async() {
        return getSimplifiedIssueHierarchy({
          isLoggedIn: this.jiraHelpers.hasValidAccessToken(),
          jiraHelpers: this.jiraHelpers
        });
      }
    },
    get issueHierarchy() {
      return this.derivedIssues && this.derivedIssues.length ? issueHierarchyFromNormalizedIssues(this.derivedIssues) : this.simplifiedIssueHierarchy;
    },
    // needs to be atomic
    // a value like `Initiative`
    // or `Release-Initiative`
    selectedIssueType: {
      value({
        resolve,
        lastSet,
        listenTo
      }) {
        function getParamValue() {
          return new URL(window.location).searchParams.get("selectedIssueType") || "";
        }

        // anything happens in state, update the route 
        // the route updates, update the state (or the route if it's wrong)
        const resolveCurrentValue = () => {
          // we wait to resolve to a defined value until we can check it's right
          if (this.issueHierarchy && this.issueHierarchy.length) {
            const curParamValue = getParamValue();
            // helps with legacy support to pick the first type
            if (curParamValue === "Release") {
              resolve("Release-" + this.issueHierarchy[0].name);
            } else {
              const curSelectedParts = toSelectedParts(curParamValue);
              //const lastSelectedParts = toSelectedParts(lastSelectedValue);

              if (curSelectedParts) {
                // check it's ok
                let typeToCheck = curSelectedParts.secondary ?? curSelectedParts.primary;
                if (this.issueHierarchy.some(issue => issue.name === typeToCheck)) {
                  // make sure we actually need to update
                  resolve(curParamValue);
                }
                // set back to default
                else {
                  setTimeout(() => {
                    updateUrlParam("selectedIssueType", "", "");
                  }, 1);
                }
              } else {
                // default to the first type
                resolve(this.issueHierarchy[0].name);
              }
            }
          } else {
            resolve(undefined);
          }
        };

        // when the route changes, check stuff ...
        listenTo(pushStateObservable, () => {
          resolveCurrentValue();
        });
        listenTo("issueHierarchy", ({
          value
        }) => {
          resolveCurrentValue();
        });
        listenTo(lastSet, value => {
          updateUrlParam("selectedIssueType", value, "");
        });
        resolveCurrentValue();
      }
    },
    get primaryIssueType() {
      return this.selectedIssueType && toSelectedParts(this.selectedIssueType).primary;
    },
    get secondaryIssueType() {
      return this.selectedIssueType && toSelectedParts(this.selectedIssueType).secondary;
    }
    /*
    primaryIssueType: {
        value({resolve, lastSet, listenTo}) {
            function getParamValue(){
                return new URL(window.location).searchParams.get("primaryIssueType") || "";
            }
             // anything happens in state, update the route 
            // the route updates, update the state (or the route if it's wrong)
            const resolveCurrentValue = (issueHierarchy, primaryIssueType) => {
                
                if(primaryIssueType === "Release") {
                    resolve(primaryIssueType);
                } else if(this.issueHierarchy && this.issueHierarchy.length) {
                    if(primaryIssueType === "") {
                        resolve( this.issueHierarchy[0].name);
                    } 
                    // make sure it's still relevante
                    else if(this.issueHierarchy.some( issue => issue.name === primaryIssueType ) ) {
                        resolve(primaryIssueType);
                    } 
                    // set back to default
                    else {
                        setTimeout( ()=> {
                            updateUrlParam("primaryIssueType", "", "");
                        },1)
                    }
                } else {
                    resolve(undefined);
                }
            }
              // when the route changes, check stuff ...
            listenTo(pushStateObservable, ()=>{
                resolveCurrentValue(this.issueHierarchy, getParamValue());
            })
            
            listenTo("issueHierarchy",({value})=> {
                console.log("primaryIssueType / issueHierarchy", value, getParamValue())
                resolveCurrentValue(value, getParamValue());
            });
             listenTo(lastSet, (value)=>{
                updateUrlParam("primaryIssueType", value, "");
            });
             
            resolveCurrentValue(this.issueHierarchy, getParamValue());
         }
    },
    secondaryIssueType: {
        value({resolve, lastSet, listenTo}) {
              function getSecondaryValue(){
                return new URL(window.location).searchParams.get("secondaryIssueType") || "";
            }
             function getPrimaryValue(){
                return new URL(window.location).searchParams.get("primaryIssueType") || "";
            }
             const reconcileCurrentValue = (issueHierarchy, primaryIssueType, secondaryIssueType) => {
                console.log("secondaryIssueType reconcile", {primaryIssueType, secondaryIssueType});
                if(primaryIssueType && primaryIssueType === "Release") {
                    if(issueHierarchy && issueHierarchy.length) {
                        if(issueHierarchy.some( issue => issue.name === secondaryIssueType ) ) {
                            resolve(secondaryIssueType);
                        } else {
                            updateUrlParam("secondaryIssueType", "", "");
                        }
                    }
                } else {
                    updateUrlParam("secondaryIssueType", "", "");
                }
             }
             listenTo(pushStateObservable, ()=>{
                reconcileCurrentValue(this.issueHierarchy, getPrimaryValue(), getSecondaryValue());
            })
            
            listenTo("issueHierarchy",({value})=> {
                reconcileCurrentValue(this.issueHierarchy, getPrimaryValue(), getSecondaryValue());
            });
            listenTo("primaryIssueType",({value})=> {
                reconcileCurrentValue(this.issueHierarchy, getPrimaryValue(), getSecondaryValue());
            });
             listenTo(lastSet, (value)=>{
                setCurrentValue(value);
            });
                  reconcileCurrentValue(this.issueHierarchy, getPrimaryValue(), getSecondaryValue());
             function setCurrentValue(value) {
                console.log("URL secondaryIssueType", value);
                updateUrlParam("secondaryIssueType", value || "", "");
                //resolve(value)
            }
             
        }
    }*/
    /*
    get secondaryIssueType(){
        if(this.primaryIssueType) {
            const calculations = this.impliedTimingCalculations;
            if(calculations.length) {
                return calculations[0].type
            }
        }
        
    },*/
  };
  onSelection(primaryType, secondaryType) {
    if (secondaryType) {
      this.selectedIssueType = "Release-" + secondaryType;
    } else {
      this.selectedIssueType = primaryType;
    }
    TOOLTIP$2.leftElement();
    RELEASES_TOOLTIP.leftElement();
  }
  showChildOptions() {
    let dropdown = new TypeSelectionDropdown().initialize({
      primaryIssueType: this.primaryIssueType,
      secondaryIssueType: this.secondaryIssueType,
      issueHierarchy: this.issueHierarchy,
      onSelection: this.onSelection.bind(this)
    });
    TOOLTIP$2.belowElementInScrollingContainer(this, dropdown);
  }
  connected() {
    this.listenTo(window, "click", event => {
      if (!TOOLTIP$2.contains(event.target)) {
        TOOLTIP$2.leftElement();
        RELEASES_TOOLTIP.leftElement();
      }
    });
  }
}
function toSelectedParts(value) {
  if (value) {
    if (value.startsWith("Release-")) {
      return {
        primary: "Release",
        secondary: value.substring("Release-".length)
      };
    } else {
      return {
        primary: value
      };
    }
  } else {
    return undefined;
  }
}

/**
 * 
 * @param {Array<import("../jira/normalized/normalize.js").NormalizedIssue>} normalizedIssues 
 * @returns {Array<{type: string, hierarchyLevel: number}>}
 */
function issueHierarchyFromNormalizedIssues(normalizedIssues) {
  const levelsToNames = [];
  for (let issue of normalizedIssues) {
    if (!levelsToNames[issue.hierarchyLevel]) {
      levelsToNames[issue.hierarchyLevel] = [];
    }
    levelsToNames[issue.hierarchyLevel].push(issue.type);
  }
  return levelsToNames.map((names, i) => {
    return {
      name: mostCommonElement(names),
      hierarchyLevel: i
    };
  }).filter(i => i).reverse();
}
customElements.define("select-issue-type", SelectIssueType);

const TOOLTIP$1 = new SimpleTooltip();
document.body.append(TOOLTIP$1);
const REPORTS = [{
  key: "start-due",
  name: "Start and due dates"
}, {
  key: "due",
  name: "Due dates only"
}];
const hoverEffect$1 = "hover:bg-neutral-301 cursor-pointer";
class ReportSelectionDropdown extends canStacheElement {
  static view = `
         {{# for(report of this.reports) }}
            <label class="px-4 py-2 block {{#eq(this.primaryReportType, report.key)}}bg-blue-101{{else}}${hoverEffect$1}{{/eq}}"><input 
                type="radio" 
                name="primaryReportType" 
                checked:from="eq(this.primaryReportType, report.key)"
                on:change="this.onSelection(report.key)"/> {{report.name}} </label>
        {{/ }}
    `;
}
customElements.define("report-selection-dropdown", ReportSelectionDropdown);
class SelectReportType extends canStacheElement {
  static view = `
        <label for="reportType" class="${DROPDOWN_LABEL}">Report type</label>
        {{# not(this.primaryReportType) }}
            ---
        {{/ }}
        {{# if(this.primaryReportType) }}
            <button 
                class="rounded bg-neutral-201 px-3 py-1 ${hoverEffect$1}"
                id="reportType"
                on:click="this.showChildOptions()">{{this.primaryReportName}} <img class="inline" src="/images/chevron-down.svg"/></button>
        {{/ }}
    `;
  static props = {
    primaryReportType: saveJSONToUrl("primaryReportType", "start-due", String, {
      parse: x => "" + x,
      stringify: x => "" + x
    }),
    reports: {
      get default() {
        return REPORTS;
      }
    },
    get primaryReportName() {
      return this.reports.find(report => report.key === this.primaryReportType).name;
    }
  };
  showChildOptions() {
    let dropdown = new ReportSelectionDropdown().initialize({
      primaryReportType: this.primaryReportType,
      reports: this.reports,
      onSelection: this.onSelection.bind(this)
    });
    TOOLTIP$1.belowElementInScrollingContainer(this, dropdown);
  }
  onSelection(reportType) {
    this.primaryReportType = reportType;
    TOOLTIP$1.leftElement();
  }
  connected() {
    this.listenTo(window, "click", event => {
      if (!TOOLTIP$1.contains(event.target)) {
        TOOLTIP$1.leftElement();
      }
    });
  }
}
customElements.define("select-report-type", SelectReportType);

const TOOLTIP = new SimpleTooltip();
document.body.append(TOOLTIP);
const booleanParsing = {
  parse: x => {
    return {
      "": true,
      "true": true,
      "false": false
    }[x];
  },
  stringify: x => "" + x
};
const hoverEffect = "hover:bg-neutral-301 cursor-pointer";
class SelectViewSettingsDropdown extends canStacheElement {
  static view = `
    <div class="p-2">

        {{# if(this.canGroup) }}
        <div>
            <div class="font-bold uppercase text-slate-300 text-xs">Group by: </div>
            <label class="px-2 block"><input 
                type="radio" 
                name="groupBy"
                checked:from="eq(this.groupBy, '')"
                on:change="this.groupBy = ''"
                /> None</label>
            <label class="px-2 block"><input 
                type="radio" 
                name="groupBy"
                checked:from="eq(this.groupBy, 'parent')"
                on:change="this.groupBy = 'parent'"
                /> Parent</label>
            <label class="px-2 block"><input 
                type="radio" 
                name="groupBy"
                checked:from="eq(this.groupBy, 'team')"
                on:change="this.groupBy = 'team'"
                /> Team (or Project)</label>
        </div>
        {{/ if }}


        
        <div class="my-4">
            <div class="font-bold uppercase text-slate-300 text-xs">Sort By:</div>
             <label class="px-2 block"><input 
                type="radio" 
                name="sortByDueDate"
                checked:from="not(this.sortByDueDate)"
                on:change="this.sortByDueDate = false"
                /> JQL Order</label>
            <label class="px-2 block"><input 
                type="radio" 
                name="sortByDueDate"
                checked:from="this.sortByDueDate"
                on:change="this.sortByDueDate = true"
                /> Due Date</label>    
        </div>

        {{# if(this.primaryIssueType) }}
            <div class="my-4">
                <div class="font-bold uppercase text-slate-300 text-xs">Status Filters:</div>

                <div class="grid gap-2" style="grid-template-columns: max-content max-content">
                    <label>Show only {{this.firstIssueTypeWithStatuses}} statuses:</label>
                
                    <status-filter 
                        statuses:from="this.statuses"
                        param:raw="statusesToShow"
                        selectedStatuses:bind="this.statusesToShow"
                        inputPlaceholder:raw="Search for statuses"
                        style="max-width: 400px;">
                    </status-filter>

                    <label>Hide {{this.firstIssueTypeWithStatuses}} statuses:</label>

                    <status-filter 
                        statuses:from="this.statuses" 
                        param:raw="statusesToRemove"
                        selectedStatuses:bind="this.statusesToRemove"
                        inputPlaceholder:raw="Search for statuses"
                        style="max-width: 400px;">
                        </status-filter>

                    
                </div>
            </div>
            <div class="my-4">
                <div class="font-bold uppercase text-slate-300 text-xs">Release Filters:</div>

                <div class="grid gap-2" style="grid-template-columns: max-content max-content">
                    <label>Show only {{this.firstIssueTypeWithStatuses}}s with releases:</label>
                
                    <status-filter 
                        statuses:from="this.releases"
                        param:raw="releasesToShow"
                        selectedStatuses:to="this.releasesToShow"
                        inputPlaceholder:raw="Search for releases"
                        style="max-width: 400px;"></status-filter>

                    
                </div>

                {{# eq(this.primaryIssueType, "Release") }}
                        <label class=''>Show only Semver-like releases</label>
                        <input type='checkbox' 
                            class='self-start mt-1.5'  checked:bind='this.showOnlySemverReleases'/>
                        <p class="m-0">Format: <code>[NAME]_[D.D.D]</code>. Examples:
                        <code>ACME_1.2.3</code>, <code>ACME_CHECKOUT_1</code>, <code>1.2</code>.
                        </p>
                {{/ }}
            </div>

            <div class="my-4">
                <div class="font-bold uppercase text-slate-300 text-xs">Timing Filters:</div>

                <input type='checkbox' 
                    class='self-start mt-1.5' checked:bind='this.hideUnknownInitiatives'/> Hide {{this.primaryIssueType}}s without dates 
            </div>
        {{/ if }}



        <div class="my-4">
            <div class="font-bold uppercase text-slate-300 text-xs">View Options</div>
            <div class="flex mt-2 gap-2 flex-wrap">
                <input type='checkbox' 
                    class='self-start mt-1.5'  checked:bind='this.primaryReportBreakdown'/>
                <p>Show work breakdown</p>
                
            </div>

            <div class="flex mt-2 gap-2 flex-wrap">
                <input type='checkbox' 
                    class='self-start mt-1.5'  checked:bind='this.showPercentComplete'/>
                <p>Show completion percentage</p>
                
            </div>
        </div>

        <div class="my-4">
            <div class="font-bold uppercase text-slate-300 text-xs">Secondary Status Report</div>
            <div class="flex mt-2 gap-2 flex-wrap">
                <p>Secondary Report Type</p>
                <div class="shrink-0">
                <label class="px-2"><input 
                    type="radio" 
                    name="secondary" 
                    checked:from="eq(this.secondaryReportType, 'none')"
                    on:change="this.secondaryReportType = 'none'"
                    /> None </label>
                    
                <label class="px-2"><input 
                    type="radio" 
                    name="secondary" 
                    checked:from="eq(this.secondaryReportType, 'status')"
                    on:change="this.secondaryReportType = 'status'"
                    /> {{this.secondaryIssueType}} status </label>
                
                {{# not(eq(this.secondaryIssueType, "Story") ) }}
                <label class="px-2"><input 
                    type="radio" 
                    name="secondary" 
                    checked:from="eq(this.secondaryReportType, 'breakdown')"
                    on:change="this.secondaryReportType = 'breakdown'"
                    /> {{this.secondaryIssueType}} work breakdown </label>
                {{/ not }}
                </div>
            </div>

            {{# if(this.firstIssueTypeWithStatuses) }}
            <div class="flex gap-2 mt-1">
                <label>{{this.firstIssueTypeWithStatuses}} statuses to show as planning:</label>
                <status-filter 
                    statuses:from="this.statuses" 
                    param:raw="planningStatuses"
                    selectedStatuses:bind="this.planningStatuses"
                    inputPlaceholder:raw="Search for statuses"
                    style="max-width: 400px;"></status-filter>
            </div>
            {{/ if}}
        </div>
    </div>
    `;
}
customElements.define("select-view-settings-dropdown", SelectViewSettingsDropdown);
class SelectViewSettings extends canStacheElement {
  static view = `
        <label for="viewSettings" class="${DROPDOWN_LABEL} invisible">View settings</label>
        <button 
                id="viewSettings"
                class="rounded bg-neutral-201 px-3 py-1 ${hoverEffect}"
                on:click="this.showChildOptions()">View Settings <img class="inline" src="/images/chevron-down.svg"/></button>
    `;
  static props = {
    primaryReportBreakdown: saveJSONToUrl("primaryReportBreakdown", false, Boolean, booleanParsing),
    secondaryReportType: saveJSONToUrl("secondaryReportType", "none", String, {
      parse: x => "" + x,
      stringify: x => "" + x
    }),
    showPercentComplete: saveJSONToUrl("showPercentComplete", false, Boolean, booleanParsing),
    // group by doesn't make sense for a release

    groupBy: {
      value({
        resolve,
        lastSet,
        listenTo
      }) {
        function getFromParam() {
          return new URL(window.location).searchParams.get("groupBy") || "";
        }
        const reconcileCurrentValue = (primaryIssueType, currentGroupBy) => {
          if (primaryIssueType === "Release") {
            updateUrlParam("groupBy", "", "");
          } else {
            updateUrlParam("groupBy", currentGroupBy, "");
          }
        };
        listenTo("primaryIssueType", ({
          value
        }) => {
          reconcileCurrentValue(value, getFromParam());
        });
        listenTo(lastSet, value => {
          updateUrlParam("groupBy", value || "", "");
        });
        listenTo(pushStateObservable, () => {
          resolve(getFromParam());
        });
        resolve(getFromParam());
      }
    },
    sortByDueDate: saveJSONToUrl("sortByDueDate", false, Boolean, booleanParsing),
    hideUnknownInitiatives: saveJSONToUrl("hideUnknownInitiatives", false, Boolean, booleanParsing),
    showOnlySemverReleases: saveJSONToUrl("showOnlySemverReleases", false, Boolean, booleanParsing),
    // STATUS FILTERING STUFF

    // used for later filtering
    // but the options come from the issues

    statusesToShow: makeArrayOfStringsQueryParamValue("statusesToShow"),
    statusesToRemove: makeArrayOfStringsQueryParamValue("statusesToRemove"),
    planningStatuses: makeArrayOfStringsQueryParamValue("planningStatuses"),
    get releases() {
      if (this.derivedIssues) {
        return allReleasesSorted(this.derivedIssues);
      } else {
        return [];
      }
    },
    get firstIssueTypeWithStatuses() {
      if (this.primaryIssueType) {
        if (this.primaryIssueType !== "Release") {
          return this.primaryIssueType;
        } else {
          return this.secondaryIssueType;
        }
      }
    },
    get canGroup() {
      return this.primaryReportType === 'start-due' && this.primaryIssueType && this.primaryIssueType !== "Release";
    }
  };
  showChildOptions() {
    let dropdown = new SelectViewSettingsDropdown().bindings({
      showPercentComplete: canValue_1_1_2_canValue.bind(this, "showPercentComplete"),
      secondaryReportType: canValue_1_1_2_canValue.bind(this, "secondaryReportType"),
      groupBy: canValue_1_1_2_canValue.bind(this, "groupBy"),
      sortByDueDate: canValue_1_1_2_canValue.bind(this, "sortByDueDate"),
      hideUnknownInitiatives: canValue_1_1_2_canValue.bind(this, "hideUnknownInitiatives"),
      showOnlySemverReleases: canValue_1_1_2_canValue.bind(this, "showOnlySemverReleases"),
      primaryReportBreakdown: canValue_1_1_2_canValue.bind(this, "primaryReportBreakdown"),
      primaryReportType: this.primaryReportType,
      statusesToRemove: canValue_1_1_2_canValue.bind(this, "statusesToRemove"),
      statusesToShow: canValue_1_1_2_canValue.bind(this, "statusesToShow"),
      planningStatuses: canValue_1_1_2_canValue.bind(this, "planningStatuses"),
      secondaryIssueType: canValue_1_1_2_canValue.from(this, "secondaryIssueType"),
      primaryIssueType: canValue_1_1_2_canValue.from(this, "primaryIssueType"),
      canGroup: canValue_1_1_2_canValue.from(this, "canGroup"),
      firstIssueTypeWithStatuses: canValue_1_1_2_canValue.from(this, "firstIssueTypeWithStatuses"),
      // this could probably be calculated by itself
      statuses: canValue_1_1_2_canValue.from(this, "statuses"),
      releases: canValue_1_1_2_canValue.from(this, "releases")
      // onSelection: this.onSelection.bind(this)
    });
    TOOLTIP.belowElementInScrollingContainer(this, dropdown);
  }
  connected() {
    this.listenTo(window, "click", event => {
      if (!TOOLTIP.contains(event.target) && !findParentWithSelector(event.target, "simple-tooltip")) {
        TOOLTIP.leftElement();
      }
    });
  }
}
function findParentWithSelector(element, selector) {
  let parent = element.parentElement;
  while (parent) {
    if (parent.matches(selector)) {
      return parent;
    }
    parent = parent.parentElement;
  }
  return null;
}
customElements.define("select-view-settings", SelectViewSettings);

/**
 * This module is responsible for rolling back Jira issues to their previous states based on their changelogs.
 * It processes changes to fields such as Sprint, Fix Versions, Parent associations, and Status,
 * ensuring that issues are accurately reverted to their historical configurations.
 */
function getSprintNumbers(value) {
    if (value === "") {
        return null;
    }
    else {
        return value
            .split(",")
            .map((num) => +num)
            .filter((num) => !isNaN(num));
    }
}
function getSprintNames(value) {
    if (value === "") {
        return null;
    }
    else {
        return value.split(",").map((name) => name.trim());
    }
}
const fields = {
    // from will look like "1619, 1647"
    // we need to update `lastReturnValue` to have
    // only the right sprints
    Sprint: function (lastReturnValue, change, fieldName, { sprints }) {
        const sprintNumbers = getSprintNumbers(change.from || "");
        const sprintNames = getSprintNames(change.fromString || "");
        if (sprintNumbers === null) {
            return { [fieldName]: null };
        }
        else {
            return {
                [fieldName]: sprintNumbers
                    .map((number, i) => {
                    // REMOVE IN PROD
                    if (sprints.ids.has(number)) {
                        return sprints.ids.get(number);
                    }
                    else if (sprints.names.has(sprintNames[i])) {
                        return sprints.names.get(sprintNames[i]);
                    }
                    else {
                        // TODO: change to async so we can go request all of these
                        console.warn("Can't find sprint ", number, sprintNames[i]);
                        return undefined;
                    }
                })
                    .filter((x) => x !== undefined),
            };
        }
    },
    "Fix versions": function (lastReturnValue, change, fieldName, { versions }) {
        if (change.from) {
            if (versions.ids.has(change.from)) {
                return { [fieldName]: versions.ids.get(change.from) };
            }
            else if (versions.names.has(change.fromString || "")) {
                return { [fieldName]: versions.names.get(change.fromString || "") };
            }
            else {
                console.warn("Can't find release version ", change.from, change.fromString);
                return { [fieldName]: lastReturnValue };
            }
        }
        else {
            return { [fieldName]: [] };
        }
    },
    // Parent Link, Epic Link,
    IssueParentAssociation: function (lastReturnValue, change) {
        return { Parent: { key: change.fromString || "", id: change.from || "" } };
    },
    "Parent Link": function (lastReturnValue, change) {
        return { Parent: { key: change.fromString || "" } };
    },
    "Epic Link": function (lastReturnValue, change) {
        return { Parent: { key: change.fromString || "" } };
    },
    Status: function (lastReturnValue, change, fieldName, { statuses }) {
        if (statuses.ids.has(change.from || "")) {
            return { [fieldName]: statuses.ids.get(change.from || "") };
        }
        else if (statuses.names.has(change.fromString || "")) {
            return { [fieldName]: statuses.names.get(change.fromString || "") };
        }
        else {
            console.warn("Can't find status", change.from, change.fromString);
            return { [fieldName]: { name: change.fromString || "" } };
        }
    },
};
const fieldAlias = {
    duedate: "Due date",
    status: "Status",
    labels: "Labels",
    issuetype: "Issue Type",
    // "summary": "Summary" // we don't want to change summary
    "Fix Version": "Fix versions",
};
function getSprintsMapsFromIssues(issues) {
    const ids = new Map();
    const names = new Map();
    for (const issue of issues) {
        for (const sprint of issue.fields.Sprint || []) {
            ids.set(sprint.id, sprint);
            names.set(sprint.name, sprint);
        }
    }
    return { ids, names };
}
function getVersionsFromIssues(issues) {
    const ids = new Map();
    const names = new Map();
    for (const issue of issues) {
        for (const version of issue.fields["Fix versions"]) {
            ids.set(version.id, version);
            names.set(version.name, version);
        }
    }
    return { ids, names };
}
function getStatusesFromIssues(issues) {
    const ids = new Map();
    const names = new Map();
    for (const issue of issues) {
        ids.set(issue.fields.Status.id, issue.fields.Status);
        names.set(issue.fields.Status.name, issue.fields.Status);
    }
    return { ids, names };
}
function rollbackIssues(issues, rollbackTime = oneHourAgo) {
    const sprints = getSprintsMapsFromIssues(issues);
    const versions = getVersionsFromIssues(issues);
    const statuses = getStatusesFromIssues(issues);
    return issues
        .map((i) => rollbackIssue(i, { sprints, versions, statuses }, rollbackTime))
        .filter((i) => i !== undefined);
}
const oneHourAgo = new Date(Date.now() - 1000 * 60 * 60);
function rollbackIssue(issue, data, rollbackTime = oneHourAgo) {
    const { changelog, ...rest } = issue;
    const rolledBackIssue = {
        ...rest,
        rollbackMetadata: { rolledbackTo: rollbackTime },
    };
    // ignore old issues
    if (parseDateISOString(issue.fields.Created) > rollbackTime) {
        return undefined;
        /*
            copy.rollbackMetadata.didNotExist = true;
            delete copy.fields;
            // should convert to date ...
            copy.rollbackMetadata.didNotExistBefore = issue.fields.Created;
            return copy;*/
    }
    rolledBackIssue.fields = { ...issue.fields };
    for (const { items, created } of changelog || []) {
        // we need to go back before ...
        if (parseDateISOString(created) < rollbackTime) {
            break;
        }
        items.forEach((change) => {
            const { field } = change;
            const fieldName = fieldAlias[field] || field;
            if (fields[fieldName]) {
                Object.assign(rolledBackIssue.fields, fields[fieldName](rolledBackIssue.fields[fieldName], change, fieldName, data));
            }
            else {
                rolledBackIssue.fields[fieldName] = change.from;
            }
        });
    }
    return rolledBackIssue;
}
/*
export function collectChangelog(observableBaseIssues, priorTime) {
    const changes = observableBaseIssues.map( baseIssue => {
        return baseIssue.changelog.map( change => {
            return {...change, issue: baseIssue, createdDate: parseDateISOString(change.created) };
        })
    } ).flat().sort( (cl1, cl2) => cl1.createdDate - cl2.createdDate);
    return changes.filter( change => change.createdDate >= priorTime );
}
export function applyChangelog(changes, data) {
    for(const {items, created, issue} of changes) {
        items.forEach( (change) => {
            const {field, from, to} = change;
            if(field in issue) {
                if(fields[field]) {
                    issue[field] = fields[field](issue[field], change, data);
                } else {
                    issue[field] = from;
                }
                
            }
        })
    }
}
function sleep(time) {
    return new Promise(function(resolve){
        if(!time) {
            resolve();
        }
    })
}
const CHANGE_APPLY_AMOUNT = 2000;
export async function applyChangelogs(observableBaseIssues, priorTime) {
    const changes = collectChangelog(observableBaseIssues, priorTime);
    console.log("processing",changes.length, "changes");
    const sprints = getSprintsMapsFromIssues(observableBaseIssues);
    const batches = [];
    
    while(changes.length) {
        await sleep();
        const batch = changes.splice(0, CHANGE_APPLY_AMOUNT);
        applyChangelog(batch, {sprints});
    }
}*/

/**
 * 
 * @param {Array<import("../rollup").IssuesOrReleases>} issuesOrReleases Starting from low to high
 * @param {Array<String>} methodNames Starting from low to high
 * @return {Array<RollupDateData>}
 */
function rollupWorkTypeDates(groupedHierarchy, {
  getChildren
} = {}) {
  return rollupGroupedHierarchy(groupedHierarchy, {
    createRollupDataFromParentAndChild(issueOrRelease, children, hierarchyLevel, metadata) {
      //const methodName = methodNames[hierarchyLevel] || "childrenFirstThenParent";
      const method = mergeParentAndChildIfTheyHaveDates; //methods[methodName];
      return method(issueOrRelease, children);
    }
  });
}
/**
 * 
 * @param {import("../rollup").IssuesOrReleases} issuesOrReleases 
 * @param {*} rollupTimingLevelsAndCalculations 
 * @return {Array<WorkTypeTimingReleaseOrIssue>}
 */
function addWorkTypeDates(issuesOrReleases, rollupTimingLevelsAndCalculations) {
  const groupedIssues = groupIssuesByHierarchyLevelOrType(issuesOrReleases, rollupTimingLevelsAndCalculations);
  rollupTimingLevelsAndCalculations.map(rollupData => rollupData.calculation).reverse();
  const rolledUpDates = rollupWorkTypeDates(groupedIssues);
  const zipped = zipRollupDataOntoGroupedData(groupedIssues, rolledUpDates, "workTypeRollups");
  return zipped.flat();
}
function copyDateProperties(obj) {
  const copy = {};
  for (let key of ["due", "dueTo", "start", "startFrom"]) {
    if (obj[key] !== undefined) {
      copy[key] = obj[key];
    }
  }
  return copy;
}
function mergeParentAndChildIfTheyHaveDates(parentIssueOrRelease, childRollups) {
  const rollup = {
    self: {},
    children: {},
    combined: {}
  };
  const parentData = parentIssueOrRelease?.derivedTiming;
  const parentHasStart = parentData?.start;
  const parentHasDue = parentData?.due;
  const hasStartAndDue = parentHasStart && parentHasDue;
  if (hasStartAndDue) {
    // can use the parent;
    rollup.self[parentIssueOrRelease.derivedStatus.workType] = copyDateProperties(parentData);
    rollup.self[parentIssueOrRelease.derivedStatus.workType].issueKeys = [parentIssueOrRelease.key];
  }
  if (!childRollups.length) {
    rollup.combined = rollup.self;
    return rollup;
  }
  const children = rollup.children;
  const combined = rollup.combined;
  for (let workType$1 of workType) {
    // combine for children
    const rollupForWorkType = childRollups.map(childRollup => childRollup.combined?.[workType$1]).filter(x => x);
    // if the children have something for this type
    if (rollupForWorkType.length) {
      const issues = new Set(rollupForWorkType.map(r => r.issueKeys).flat(1));
      const dates = mergeStartAndDueData$3(rollupForWorkType);
      dates.issueKeys = [...issues];
      children[workType$1] = dates;
      // what if the parent has it also
      if (hasStartAndDue && parentIssueOrRelease.derivedStatus.workType === workType$1) {
        const combinedIssues = new Set([...issues, parentIssueOrRelease.key]);
        const combinedDates = mergeStartAndDueData$3([dates, parentData]);
        combinedDates.issueKeys = [...combinedIssues];
        combined[workType$1] = combinedDates;
      } else {
        combined[workType$1] = dates;
      }
    }
    // what if the parent has it
    else if (hasStartAndDue && parentIssueOrRelease.derivedStatus.workType === workType$1) {
      combined[workType$1] = rollup.self[workType$1];
    }
  }
  return rollup;
}

// {children: DATES FROM CHILDREN, QA, UAT, DESIGN, etc}

/**
 * This module provides functions to roll up blocked issues within a hierarchical structure.
 * It identifies issues with a 'blocked' status and aggregates them up through the hierarchy levels.
 **/
/** *
 * @param {IssueOrRelease<CustomFields>[][]} groupedHierarchy - The grouped hierarchy of issues or releases, from low to high levels.
 * @returns {RollupResponse<IssueOrRelease<CustomFields>[], Meta>} - The rolled-up blocked issues for each hierarchy level.
 */
function rollupBlockedIssuesForGroupedHierarchy(groupedHierarchy) {
    return rollupGroupedHierarchy(groupedHierarchy, {
        createRollupDataFromParentAndChild(issueOrRelease, children, hierarchyLevel, metadata) {
            const blockedIssues = children.flat(1);
            // releases don't have a status
            if (isDerivedIssue(issueOrRelease) &&
                issueOrRelease?.derivedStatus?.statusType === "blocked") {
                blockedIssues.push(issueOrRelease);
            }
            return blockedIssues;
        },
    });
}
/** *
 * @param {IssueOrRelease<CustomFields>[]} issuesOrReleases
 * @param {Array<{ type: string; hierarchyLevel: number }>} rollupTimingLevelsAndCalculations
 * @returns {IssueOrRelease<CustomFields>[]} - The list of issues or releases with rolled-up blocked status issues added.
 */
// these functions shouldn't be used eventually for performance ...
function rollupBlockedStatusIssues(issuesOrReleases, rollupTimingLevelsAndCalculations) {
    const groupedIssues = groupIssuesByHierarchyLevelOrType(issuesOrReleases, rollupTimingLevelsAndCalculations);
    const rolledUpBlockers = rollupBlockedIssuesForGroupedHierarchy(groupedIssues);
    const zipped = zipRollupDataOntoGroupedData(groupedIssues, rolledUpBlockers, "blockedStatusIssues");
    return zipped.flat();
}

function addToCharacterMap(fullName, name, map = { characterMap: {}, followers: [] }) {
    if (name === "") {
        map.last = true;
    }
    map.followers.push(fullName);
    if (!map.characterMap[name[0]]) {
        map.characterMap[name[0]] = {
            followers: [],
            characterMap: {},
        };
    }
    if (name !== "") {
        addToCharacterMap(fullName, name.substr(1), map.characterMap[name[0]]);
    }
}
function uniqueTrailingNames(names) {
    const root = {
        characterMap: {},
        followers: [],
    };
    for (const name of names) {
        addToCharacterMap(name, name, root);
    }
    // keep going down the 1 path until you don't have everything
    let current = root;
    let startingWith = "";
    while (Object.keys(current.characterMap).length === 1) {
        let character = Object.keys(current.characterMap)[0];
        startingWith = startingWith + character;
        current = current.characterMap[character];
    }
    if (startingWith.length > 3) {
        return names.map((n) => n.replace(startingWith, ""));
    }
    else {
        return names;
    }
}

var re$2 = {exports: {}};

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const SEMVER_SPEC_VERSION = '2.0.0';

const MAX_LENGTH$1 = 256;
const MAX_SAFE_INTEGER$1 = Number.MAX_SAFE_INTEGER ||
/* istanbul ignore next */ 9007199254740991;

// Max safe segment length for coercion.
const MAX_SAFE_COMPONENT_LENGTH = 16;

// Max safe length for a build identifier. The max length minus 6 characters for
// the shortest version with a build 0.0.0+BUILD.
const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH$1 - 6;

const RELEASE_TYPES = [
  'major',
  'premajor',
  'minor',
  'preminor',
  'patch',
  'prepatch',
  'prerelease',
];

var constants$1 = {
  MAX_LENGTH: MAX_LENGTH$1,
  MAX_SAFE_COMPONENT_LENGTH,
  MAX_SAFE_BUILD_LENGTH,
  MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$1,
  RELEASE_TYPES,
  SEMVER_SPEC_VERSION,
  FLAG_INCLUDE_PRERELEASE: 0b001,
  FLAG_LOOSE: 0b010,
};

const debug$1 = (
  typeof process === 'object' &&
  process.env &&
  process.env.NODE_DEBUG &&
  /\bsemver\b/i.test(process.env.NODE_DEBUG)
) ? (...args) => console.error('SEMVER', ...args)
  : () => {};

var debug_1 = debug$1;

(function (module, exports) {
	const {
	  MAX_SAFE_COMPONENT_LENGTH,
	  MAX_SAFE_BUILD_LENGTH,
	  MAX_LENGTH,
	} = constants$1;
	const debug = debug_1;
	exports = module.exports = {};

	// The actual regexps go on exports.re
	const re = exports.re = [];
	const safeRe = exports.safeRe = [];
	const src = exports.src = [];
	const t = exports.t = {};
	let R = 0;

	const LETTERDASHNUMBER = '[a-zA-Z0-9-]';

	// Replace some greedy regex tokens to prevent regex dos issues. These regex are
	// used internally via the safeRe object since all inputs in this library get
	// normalized first to trim and collapse all extra whitespace. The original
	// regexes are exported for userland consumption and lower level usage. A
	// future breaking change could export the safer regex only with a note that
	// all input should have extra whitespace removed.
	const safeRegexReplacements = [
	  ['\\s', 1],
	  ['\\d', MAX_LENGTH],
	  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],
	];

	const makeSafeRegex = (value) => {
	  for (const [token, max] of safeRegexReplacements) {
	    value = value
	      .split(`${token}*`).join(`${token}{0,${max}}`)
	      .split(`${token}+`).join(`${token}{1,${max}}`);
	  }
	  return value
	};

	const createToken = (name, value, isGlobal) => {
	  const safe = makeSafeRegex(value);
	  const index = R++;
	  debug(name, index, value);
	  t[name] = index;
	  src[index] = value;
	  re[index] = new RegExp(value, isGlobal ? 'g' : undefined);
	  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined);
	};

	// The following Regular Expressions can be used for tokenizing,
	// validating, and parsing SemVer version strings.

	// ## Numeric Identifier
	// A single `0`, or a non-zero digit followed by zero or more digits.

	createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*');
	createToken('NUMERICIDENTIFIERLOOSE', '\\d+');

	// ## Non-numeric Identifier
	// Zero or more digits, followed by a letter or hyphen, and then zero or
	// more letters, digits, or hyphens.

	createToken('NONNUMERICIDENTIFIER', `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);

	// ## Main Version
	// Three dot-separated numeric identifiers.

	createToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\.` +
	                   `(${src[t.NUMERICIDENTIFIER]})\\.` +
	                   `(${src[t.NUMERICIDENTIFIER]})`);

	createToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
	                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
	                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`);

	// ## Pre-release Version Identifier
	// A numeric identifier, or a non-numeric identifier.

	createToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]
	}|${src[t.NONNUMERICIDENTIFIER]})`);

	createToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]
	}|${src[t.NONNUMERICIDENTIFIER]})`);

	// ## Pre-release Version
	// Hyphen, followed by one or more dot-separated pre-release version
	// identifiers.

	createToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]
	}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);

	createToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]
	}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);

	// ## Build Metadata Identifier
	// Any combination of digits, letters, or hyphens.

	createToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`);

	// ## Build Metadata
	// Plus sign, followed by one or more period-separated build metadata
	// identifiers.

	createToken('BUILD', `(?:\\+(${src[t.BUILDIDENTIFIER]
	}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);

	// ## Full Version String
	// A main version, followed optionally by a pre-release version and
	// build metadata.

	// Note that the only major, minor, patch, and pre-release sections of
	// the version string are capturing groups.  The build metadata is not a
	// capturing group, because it should not ever be used in version
	// comparison.

	createToken('FULLPLAIN', `v?${src[t.MAINVERSION]
	}${src[t.PRERELEASE]}?${
	  src[t.BUILD]}?`);

	createToken('FULL', `^${src[t.FULLPLAIN]}$`);

	// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
	// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
	// common in the npm registry.
	createToken('LOOSEPLAIN', `[v=\\s]*${src[t.MAINVERSIONLOOSE]
	}${src[t.PRERELEASELOOSE]}?${
	  src[t.BUILD]}?`);

	createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`);

	createToken('GTLT', '((?:<|>)?=?)');

	// Something like "2.*" or "1.2.x".
	// Note that "x.x" is a valid xRange identifer, meaning "any version"
	// Only the first item is strictly required.
	createToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
	createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);

	createToken('XRANGEPLAIN', `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` +
	                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
	                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
	                   `(?:${src[t.PRERELEASE]})?${
	                     src[t.BUILD]}?` +
	                   `)?)?`);

	createToken('XRANGEPLAINLOOSE', `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +
	                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
	                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
	                        `(?:${src[t.PRERELEASELOOSE]})?${
	                          src[t.BUILD]}?` +
	                        `)?)?`);

	createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
	createToken('XRANGELOOSE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);

	// Coercion.
	// Extract anything that could conceivably be a part of a valid semver
	createToken('COERCEPLAIN', `${'(^|[^\\d])' +
	              '(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +
	              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
	              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
	createToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\d])`);
	createToken('COERCEFULL', src[t.COERCEPLAIN] +
	              `(?:${src[t.PRERELEASE]})?` +
	              `(?:${src[t.BUILD]})?` +
	              `(?:$|[^\\d])`);
	createToken('COERCERTL', src[t.COERCE], true);
	createToken('COERCERTLFULL', src[t.COERCEFULL], true);

	// Tilde ranges.
	// Meaning is "reasonably at or greater than"
	createToken('LONETILDE', '(?:~>?)');

	createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true);
	exports.tildeTrimReplace = '$1~';

	createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
	createToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);

	// Caret ranges.
	// Meaning is "at least and backwards compatible with"
	createToken('LONECARET', '(?:\\^)');

	createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true);
	exports.caretTrimReplace = '$1^';

	createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
	createToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);

	// A simple gt/lt/eq thing, or just "" to indicate "any version"
	createToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
	createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);

	// An expression to strip any whitespace between the gtlt and the thing
	// it modifies, so that `> 1.2.3` ==> `>1.2.3`
	createToken('COMPARATORTRIM', `(\\s*)${src[t.GTLT]
	}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
	exports.comparatorTrimReplace = '$1$2$3';

	// Something like `1.2.3 - 1.2.4`
	// Note that these all use the loose form, because they'll be
	// checked against either the strict or loose comparator form
	// later.
	createToken('HYPHENRANGE', `^\\s*(${src[t.XRANGEPLAIN]})` +
	                   `\\s+-\\s+` +
	                   `(${src[t.XRANGEPLAIN]})` +
	                   `\\s*$`);

	createToken('HYPHENRANGELOOSE', `^\\s*(${src[t.XRANGEPLAINLOOSE]})` +
	                        `\\s+-\\s+` +
	                        `(${src[t.XRANGEPLAINLOOSE]})` +
	                        `\\s*$`);

	// Star ranges basically just allow anything at all.
	createToken('STAR', '(<|>)?=?\\s*\\*');
	// >=0.0.0 is like a star
	createToken('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$');
	createToken('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$'); 
} (re$2, re$2.exports));

var reExports = re$2.exports;

// parse out just the options we care about
const looseOption = Object.freeze({ loose: true });
const emptyOpts = Object.freeze({ });
const parseOptions$1 = options => {
  if (!options) {
    return emptyOpts
  }

  if (typeof options !== 'object') {
    return looseOption
  }

  return options
};
var parseOptions_1 = parseOptions$1;

const numeric = /^[0-9]+$/;
const compareIdentifiers$1 = (a, b) => {
  const anum = numeric.test(a);
  const bnum = numeric.test(b);

  if (anum && bnum) {
    a = +a;
    b = +b;
  }

  return a === b ? 0
    : (anum && !bnum) ? -1
    : (bnum && !anum) ? 1
    : a < b ? -1
    : 1
};

const rcompareIdentifiers = (a, b) => compareIdentifiers$1(b, a);

var identifiers$1 = {
  compareIdentifiers: compareIdentifiers$1,
  rcompareIdentifiers,
};

const debug = debug_1;
const { MAX_LENGTH, MAX_SAFE_INTEGER } = constants$1;
const { safeRe: re$1, t: t$1 } = reExports;

const parseOptions = parseOptions_1;
const { compareIdentifiers } = identifiers$1;
let SemVer$d = class SemVer {
  constructor (version, options) {
    options = parseOptions(options);

    if (version instanceof SemVer) {
      if (version.loose === !!options.loose &&
          version.includePrerelease === !!options.includePrerelease) {
        return version
      } else {
        version = version.version;
      }
    } else if (typeof version !== 'string') {
      throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`)
    }

    if (version.length > MAX_LENGTH) {
      throw new TypeError(
        `version is longer than ${MAX_LENGTH} characters`
      )
    }

    debug('SemVer', version, options);
    this.options = options;
    this.loose = !!options.loose;
    // this isn't actually relevant for versions, but keep it so that we
    // don't run into trouble passing this.options around.
    this.includePrerelease = !!options.includePrerelease;

    const m = version.trim().match(options.loose ? re$1[t$1.LOOSE] : re$1[t$1.FULL]);

    if (!m) {
      throw new TypeError(`Invalid Version: ${version}`)
    }

    this.raw = version;

    // these are actually numbers
    this.major = +m[1];
    this.minor = +m[2];
    this.patch = +m[3];

    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError('Invalid major version')
    }

    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError('Invalid minor version')
    }

    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError('Invalid patch version')
    }

    // numberify any prerelease numeric ids
    if (!m[4]) {
      this.prerelease = [];
    } else {
      this.prerelease = m[4].split('.').map((id) => {
        if (/^[0-9]+$/.test(id)) {
          const num = +id;
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num
          }
        }
        return id
      });
    }

    this.build = m[5] ? m[5].split('.') : [];
    this.format();
  }

  format () {
    this.version = `${this.major}.${this.minor}.${this.patch}`;
    if (this.prerelease.length) {
      this.version += `-${this.prerelease.join('.')}`;
    }
    return this.version
  }

  toString () {
    return this.version
  }

  compare (other) {
    debug('SemVer.compare', this.version, this.options, other);
    if (!(other instanceof SemVer)) {
      if (typeof other === 'string' && other === this.version) {
        return 0
      }
      other = new SemVer(other, this.options);
    }

    if (other.version === this.version) {
      return 0
    }

    return this.compareMain(other) || this.comparePre(other)
  }

  compareMain (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }

    return (
      compareIdentifiers(this.major, other.major) ||
      compareIdentifiers(this.minor, other.minor) ||
      compareIdentifiers(this.patch, other.patch)
    )
  }

  comparePre (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }

    // NOT having a prerelease is > having one
    if (this.prerelease.length && !other.prerelease.length) {
      return -1
    } else if (!this.prerelease.length && other.prerelease.length) {
      return 1
    } else if (!this.prerelease.length && !other.prerelease.length) {
      return 0
    }

    let i = 0;
    do {
      const a = this.prerelease[i];
      const b = other.prerelease[i];
      debug('prerelease compare', i, a, b);
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  compareBuild (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }

    let i = 0;
    do {
      const a = this.build[i];
      const b = other.build[i];
      debug('build compare', i, a, b);
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  // preminor will bump the version up to the next minor release, and immediately
  // down to pre-release. premajor and prepatch work the same way.
  inc (release, identifier, identifierBase) {
    switch (release) {
      case 'premajor':
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor = 0;
        this.major++;
        this.inc('pre', identifier, identifierBase);
        break
      case 'preminor':
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor++;
        this.inc('pre', identifier, identifierBase);
        break
      case 'prepatch':
        // If this is already a prerelease, it will bump to the next version
        // drop any prereleases that might already exist, since they are not
        // relevant at this point.
        this.prerelease.length = 0;
        this.inc('patch', identifier, identifierBase);
        this.inc('pre', identifier, identifierBase);
        break
      // If the input is a non-prerelease version, this acts the same as
      // prepatch.
      case 'prerelease':
        if (this.prerelease.length === 0) {
          this.inc('patch', identifier, identifierBase);
        }
        this.inc('pre', identifier, identifierBase);
        break

      case 'major':
        // If this is a pre-major version, bump up to the same major version.
        // Otherwise increment major.
        // 1.0.0-5 bumps to 1.0.0
        // 1.1.0 bumps to 2.0.0
        if (
          this.minor !== 0 ||
          this.patch !== 0 ||
          this.prerelease.length === 0
        ) {
          this.major++;
        }
        this.minor = 0;
        this.patch = 0;
        this.prerelease = [];
        break
      case 'minor':
        // If this is a pre-minor version, bump up to the same minor version.
        // Otherwise increment minor.
        // 1.2.0-5 bumps to 1.2.0
        // 1.2.1 bumps to 1.3.0
        if (this.patch !== 0 || this.prerelease.length === 0) {
          this.minor++;
        }
        this.patch = 0;
        this.prerelease = [];
        break
      case 'patch':
        // If this is not a pre-release version, it will increment the patch.
        // If it is a pre-release it will bump up to the same patch version.
        // 1.2.0-5 patches to 1.2.0
        // 1.2.0 patches to 1.2.1
        if (this.prerelease.length === 0) {
          this.patch++;
        }
        this.prerelease = [];
        break
      // This probably shouldn't be used publicly.
      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
      case 'pre': {
        const base = Number(identifierBase) ? 1 : 0;

        if (!identifier && identifierBase === false) {
          throw new Error('invalid increment argument: identifier is empty')
        }

        if (this.prerelease.length === 0) {
          this.prerelease = [base];
        } else {
          let i = this.prerelease.length;
          while (--i >= 0) {
            if (typeof this.prerelease[i] === 'number') {
              this.prerelease[i]++;
              i = -2;
            }
          }
          if (i === -1) {
            // didn't increment anything
            if (identifier === this.prerelease.join('.') && identifierBase === false) {
              throw new Error('invalid increment argument: identifier already exists')
            }
            this.prerelease.push(base);
          }
        }
        if (identifier) {
          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
          let prerelease = [identifier, base];
          if (identifierBase === false) {
            prerelease = [identifier];
          }
          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
            if (isNaN(this.prerelease[1])) {
              this.prerelease = prerelease;
            }
          } else {
            this.prerelease = prerelease;
          }
        }
        break
      }
      default:
        throw new Error(`invalid increment argument: ${release}`)
    }
    this.raw = this.format();
    if (this.build.length) {
      this.raw += `+${this.build.join('.')}`;
    }
    return this
  }
};

var semver$2 = SemVer$d;

const SemVer$c = semver$2;
const parse$6 = (version, options, throwErrors = false) => {
  if (version instanceof SemVer$c) {
    return version
  }
  try {
    return new SemVer$c(version, options)
  } catch (er) {
    if (!throwErrors) {
      return null
    }
    throw er
  }
};

var parse_1 = parse$6;

const parse$5 = parse_1;
const valid$2 = (version, options) => {
  const v = parse$5(version, options);
  return v ? v.version : null
};
var valid_1 = valid$2;

const parse$4 = parse_1;
const clean$1 = (version, options) => {
  const s = parse$4(version.trim().replace(/^[=v]+/, ''), options);
  return s ? s.version : null
};
var clean_1 = clean$1;

const SemVer$b = semver$2;

const inc$1 = (version, release, options, identifier, identifierBase) => {
  if (typeof (options) === 'string') {
    identifierBase = identifier;
    identifier = options;
    options = undefined;
  }

  try {
    return new SemVer$b(
      version instanceof SemVer$b ? version.version : version,
      options
    ).inc(release, identifier, identifierBase).version
  } catch (er) {
    return null
  }
};
var inc_1 = inc$1;

const parse$3 = parse_1;

const diff$1 = (version1, version2) => {
  const v1 = parse$3(version1, null, true);
  const v2 = parse$3(version2, null, true);
  const comparison = v1.compare(v2);

  if (comparison === 0) {
    return null
  }

  const v1Higher = comparison > 0;
  const highVersion = v1Higher ? v1 : v2;
  const lowVersion = v1Higher ? v2 : v1;
  const highHasPre = !!highVersion.prerelease.length;
  const lowHasPre = !!lowVersion.prerelease.length;

  if (lowHasPre && !highHasPre) {
    // Going from prerelease -> no prerelease requires some special casing

    // If the low version has only a major, then it will always be a major
    // Some examples:
    // 1.0.0-1 -> 1.0.0
    // 1.0.0-1 -> 1.1.1
    // 1.0.0-1 -> 2.0.0
    if (!lowVersion.patch && !lowVersion.minor) {
      return 'major'
    }

    // Otherwise it can be determined by checking the high version

    if (highVersion.patch) {
      // anything higher than a patch bump would result in the wrong version
      return 'patch'
    }

    if (highVersion.minor) {
      // anything higher than a minor bump would result in the wrong version
      return 'minor'
    }

    // bumping major/minor/patch all have same result
    return 'major'
  }

  // add the `pre` prefix if we are going to a prerelease version
  const prefix = highHasPre ? 'pre' : '';

  if (v1.major !== v2.major) {
    return prefix + 'major'
  }

  if (v1.minor !== v2.minor) {
    return prefix + 'minor'
  }

  if (v1.patch !== v2.patch) {
    return prefix + 'patch'
  }

  // high and low are preleases
  return 'prerelease'
};

var diff_1 = diff$1;

const SemVer$a = semver$2;
const major$1 = (a, loose) => new SemVer$a(a, loose).major;
var major_1 = major$1;

const SemVer$9 = semver$2;
const minor$1 = (a, loose) => new SemVer$9(a, loose).minor;
var minor_1 = minor$1;

const SemVer$8 = semver$2;
const patch$1 = (a, loose) => new SemVer$8(a, loose).patch;
var patch_1 = patch$1;

const parse$2 = parse_1;
const prerelease$1 = (version, options) => {
  const parsed = parse$2(version, options);
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
};
var prerelease_1 = prerelease$1;

const SemVer$7 = semver$2;
const compare$b = (a, b, loose) =>
  new SemVer$7(a, loose).compare(new SemVer$7(b, loose));

var compare_1 = compare$b;

const compare$a = compare_1;
const rcompare$1 = (a, b, loose) => compare$a(b, a, loose);
var rcompare_1 = rcompare$1;

const compare$9 = compare_1;
const compareLoose$1 = (a, b) => compare$9(a, b, true);
var compareLoose_1 = compareLoose$1;

const SemVer$6 = semver$2;
const compareBuild$3 = (a, b, loose) => {
  const versionA = new SemVer$6(a, loose);
  const versionB = new SemVer$6(b, loose);
  return versionA.compare(versionB) || versionA.compareBuild(versionB)
};
var compareBuild_1 = compareBuild$3;

const compareBuild$2 = compareBuild_1;
const sort$1 = (list, loose) => list.sort((a, b) => compareBuild$2(a, b, loose));
var sort_1 = sort$1;

const compareBuild$1 = compareBuild_1;
const rsort$1 = (list, loose) => list.sort((a, b) => compareBuild$1(b, a, loose));
var rsort_1 = rsort$1;

const compare$8 = compare_1;
const gt$4 = (a, b, loose) => compare$8(a, b, loose) > 0;
var gt_1 = gt$4;

const compare$7 = compare_1;
const lt$3 = (a, b, loose) => compare$7(a, b, loose) < 0;
var lt_1 = lt$3;

const compare$6 = compare_1;
const eq$2 = (a, b, loose) => compare$6(a, b, loose) === 0;
var eq_1 = eq$2;

const compare$5 = compare_1;
const neq$2 = (a, b, loose) => compare$5(a, b, loose) !== 0;
var neq_1 = neq$2;

const compare$4 = compare_1;
const gte$3 = (a, b, loose) => compare$4(a, b, loose) >= 0;
var gte_1 = gte$3;

const compare$3 = compare_1;
const lte$3 = (a, b, loose) => compare$3(a, b, loose) <= 0;
var lte_1 = lte$3;

const eq$1 = eq_1;
const neq$1 = neq_1;
const gt$3 = gt_1;
const gte$2 = gte_1;
const lt$2 = lt_1;
const lte$2 = lte_1;

const cmp$1 = (a, op, b, loose) => {
  switch (op) {
    case '===':
      if (typeof a === 'object') {
        a = a.version;
      }
      if (typeof b === 'object') {
        b = b.version;
      }
      return a === b

    case '!==':
      if (typeof a === 'object') {
        a = a.version;
      }
      if (typeof b === 'object') {
        b = b.version;
      }
      return a !== b

    case '':
    case '=':
    case '==':
      return eq$1(a, b, loose)

    case '!=':
      return neq$1(a, b, loose)

    case '>':
      return gt$3(a, b, loose)

    case '>=':
      return gte$2(a, b, loose)

    case '<':
      return lt$2(a, b, loose)

    case '<=':
      return lte$2(a, b, loose)

    default:
      throw new TypeError(`Invalid operator: ${op}`)
  }
};
var cmp_1 = cmp$1;

const SemVer$5 = semver$2;
const parse$1 = parse_1;
const { safeRe: re, t } = reExports;

const coerce$1 = (version, options) => {
  if (version instanceof SemVer$5) {
    return version
  }

  if (typeof version === 'number') {
    version = String(version);
  }

  if (typeof version !== 'string') {
    return null
  }

  options = options || {};

  let match = null;
  if (!options.rtl) {
    match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);
  } else {
    // Find the right-most coercible string that does not share
    // a terminus with a more left-ward coercible string.
    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
    // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'
    //
    // Walk through the string checking with a /g regexp
    // Manually set the index so as to pick up overlapping matches.
    // Stop when we get a match that ends at the string end, since no
    // coercible string can be more right-ward without the same terminus.
    const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];
    let next;
    while ((next = coerceRtlRegex.exec(version)) &&
        (!match || match.index + match[0].length !== version.length)
    ) {
      if (!match ||
            next.index + next[0].length !== match.index + match[0].length) {
        match = next;
      }
      coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
    }
    // leave it in a clean state
    coerceRtlRegex.lastIndex = -1;
  }

  if (match === null) {
    return null
  }

  const major = match[2];
  const minor = match[3] || '0';
  const patch = match[4] || '0';
  const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : '';
  const build = options.includePrerelease && match[6] ? `+${match[6]}` : '';

  return parse$1(`${major}.${minor}.${patch}${prerelease}${build}`, options)
};
var coerce_1 = coerce$1;

class LRUCache {
  constructor () {
    this.max = 1000;
    this.map = new Map();
  }

  get (key) {
    const value = this.map.get(key);
    if (value === undefined) {
      return undefined
    } else {
      // Remove the key from the map and add it to the end
      this.map.delete(key);
      this.map.set(key, value);
      return value
    }
  }

  delete (key) {
    return this.map.delete(key)
  }

  set (key, value) {
    const deleted = this.delete(key);

    if (!deleted && value !== undefined) {
      // If cache is full, delete the least recently used item
      if (this.map.size >= this.max) {
        const firstKey = this.map.keys().next().value;
        this.delete(firstKey);
      }

      this.map.set(key, value);
    }

    return this
  }
}

var lrucache = LRUCache;

var range;
var hasRequiredRange;

function requireRange () {
	if (hasRequiredRange) return range;
	hasRequiredRange = 1;
	const SPACE_CHARACTERS = /\s+/g;

	// hoisted class for cyclic dependency
	class Range {
	  constructor (range, options) {
	    options = parseOptions(options);

	    if (range instanceof Range) {
	      if (
	        range.loose === !!options.loose &&
	        range.includePrerelease === !!options.includePrerelease
	      ) {
	        return range
	      } else {
	        return new Range(range.raw, options)
	      }
	    }

	    if (range instanceof Comparator) {
	      // just put it in the set and return
	      this.raw = range.value;
	      this.set = [[range]];
	      this.formatted = undefined;
	      return this
	    }

	    this.options = options;
	    this.loose = !!options.loose;
	    this.includePrerelease = !!options.includePrerelease;

	    // First reduce all whitespace as much as possible so we do not have to rely
	    // on potentially slow regexes like \s*. This is then stored and used for
	    // future error messages as well.
	    this.raw = range.trim().replace(SPACE_CHARACTERS, ' ');

	    // First, split on ||
	    this.set = this.raw
	      .split('||')
	      // map the range to a 2d array of comparators
	      .map(r => this.parseRange(r.trim()))
	      // throw out any comparator lists that are empty
	      // this generally means that it was not a valid range, which is allowed
	      // in loose mode, but will still throw if the WHOLE range is invalid.
	      .filter(c => c.length);

	    if (!this.set.length) {
	      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)
	    }

	    // if we have any that are not the null set, throw out null sets.
	    if (this.set.length > 1) {
	      // keep the first one, in case they're all null sets
	      const first = this.set[0];
	      this.set = this.set.filter(c => !isNullSet(c[0]));
	      if (this.set.length === 0) {
	        this.set = [first];
	      } else if (this.set.length > 1) {
	        // if we have any that are *, then the range is just *
	        for (const c of this.set) {
	          if (c.length === 1 && isAny(c[0])) {
	            this.set = [c];
	            break
	          }
	        }
	      }
	    }

	    this.formatted = undefined;
	  }

	  get range () {
	    if (this.formatted === undefined) {
	      this.formatted = '';
	      for (let i = 0; i < this.set.length; i++) {
	        if (i > 0) {
	          this.formatted += '||';
	        }
	        const comps = this.set[i];
	        for (let k = 0; k < comps.length; k++) {
	          if (k > 0) {
	            this.formatted += ' ';
	          }
	          this.formatted += comps[k].toString().trim();
	        }
	      }
	    }
	    return this.formatted
	  }

	  format () {
	    return this.range
	  }

	  toString () {
	    return this.range
	  }

	  parseRange (range) {
	    // memoize range parsing for performance.
	    // this is a very hot path, and fully deterministic.
	    const memoOpts =
	      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |
	      (this.options.loose && FLAG_LOOSE);
	    const memoKey = memoOpts + ':' + range;
	    const cached = cache.get(memoKey);
	    if (cached) {
	      return cached
	    }

	    const loose = this.options.loose;
	    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
	    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
	    range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
	    debug('hyphen replace', range);

	    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
	    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
	    debug('comparator trim', range);

	    // `~ 1.2.3` => `~1.2.3`
	    range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
	    debug('tilde trim', range);

	    // `^ 1.2.3` => `^1.2.3`
	    range = range.replace(re[t.CARETTRIM], caretTrimReplace);
	    debug('caret trim', range);

	    // At this point, the range is completely trimmed and
	    // ready to be split into comparators.

	    let rangeList = range
	      .split(' ')
	      .map(comp => parseComparator(comp, this.options))
	      .join(' ')
	      .split(/\s+/)
	      // >=0.0.0 is equivalent to *
	      .map(comp => replaceGTE0(comp, this.options));

	    if (loose) {
	      // in loose mode, throw out any that are not valid comparators
	      rangeList = rangeList.filter(comp => {
	        debug('loose invalid filter', comp, this.options);
	        return !!comp.match(re[t.COMPARATORLOOSE])
	      });
	    }
	    debug('range list', rangeList);

	    // if any comparators are the null set, then replace with JUST null set
	    // if more than one comparator, remove any * comparators
	    // also, don't include the same comparator more than once
	    const rangeMap = new Map();
	    const comparators = rangeList.map(comp => new Comparator(comp, this.options));
	    for (const comp of comparators) {
	      if (isNullSet(comp)) {
	        return [comp]
	      }
	      rangeMap.set(comp.value, comp);
	    }
	    if (rangeMap.size > 1 && rangeMap.has('')) {
	      rangeMap.delete('');
	    }

	    const result = [...rangeMap.values()];
	    cache.set(memoKey, result);
	    return result
	  }

	  intersects (range, options) {
	    if (!(range instanceof Range)) {
	      throw new TypeError('a Range is required')
	    }

	    return this.set.some((thisComparators) => {
	      return (
	        isSatisfiable(thisComparators, options) &&
	        range.set.some((rangeComparators) => {
	          return (
	            isSatisfiable(rangeComparators, options) &&
	            thisComparators.every((thisComparator) => {
	              return rangeComparators.every((rangeComparator) => {
	                return thisComparator.intersects(rangeComparator, options)
	              })
	            })
	          )
	        })
	      )
	    })
	  }

	  // if ANY of the sets match ALL of its comparators, then pass
	  test (version) {
	    if (!version) {
	      return false
	    }

	    if (typeof version === 'string') {
	      try {
	        version = new SemVer(version, this.options);
	      } catch (er) {
	        return false
	      }
	    }

	    for (let i = 0; i < this.set.length; i++) {
	      if (testSet(this.set[i], version, this.options)) {
	        return true
	      }
	    }
	    return false
	  }
	}

	range = Range;

	const LRU = lrucache;
	const cache = new LRU();

	const parseOptions = parseOptions_1;
	const Comparator = requireComparator();
	const debug = debug_1;
	const SemVer = semver$2;
	const {
	  safeRe: re,
	  t,
	  comparatorTrimReplace,
	  tildeTrimReplace,
	  caretTrimReplace,
	} = reExports;
	const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = constants$1;

	const isNullSet = c => c.value === '<0.0.0-0';
	const isAny = c => c.value === '';

	// take a set of comparators and determine whether there
	// exists a version which can satisfy it
	const isSatisfiable = (comparators, options) => {
	  let result = true;
	  const remainingComparators = comparators.slice();
	  let testComparator = remainingComparators.pop();

	  while (result && remainingComparators.length) {
	    result = remainingComparators.every((otherComparator) => {
	      return testComparator.intersects(otherComparator, options)
	    });

	    testComparator = remainingComparators.pop();
	  }

	  return result
	};

	// comprised of xranges, tildes, stars, and gtlt's at this point.
	// already replaced the hyphen ranges
	// turn into a set of JUST comparators.
	const parseComparator = (comp, options) => {
	  debug('comp', comp, options);
	  comp = replaceCarets(comp, options);
	  debug('caret', comp);
	  comp = replaceTildes(comp, options);
	  debug('tildes', comp);
	  comp = replaceXRanges(comp, options);
	  debug('xrange', comp);
	  comp = replaceStars(comp, options);
	  debug('stars', comp);
	  return comp
	};

	const isX = id => !id || id.toLowerCase() === 'x' || id === '*';

	// ~, ~> --> * (any, kinda silly)
	// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
	// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
	// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
	// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
	// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
	// ~0.0.1 --> >=0.0.1 <0.1.0-0
	const replaceTildes = (comp, options) => {
	  return comp
	    .trim()
	    .split(/\s+/)
	    .map((c) => replaceTilde(c, options))
	    .join(' ')
	};

	const replaceTilde = (comp, options) => {
	  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
	  return comp.replace(r, (_, M, m, p, pr) => {
	    debug('tilde', comp, _, M, m, p, pr);
	    let ret;

	    if (isX(M)) {
	      ret = '';
	    } else if (isX(m)) {
	      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
	    } else if (isX(p)) {
	      // ~1.2 == >=1.2.0 <1.3.0-0
	      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
	    } else if (pr) {
	      debug('replaceTilde pr', pr);
	      ret = `>=${M}.${m}.${p}-${pr
	      } <${M}.${+m + 1}.0-0`;
	    } else {
	      // ~1.2.3 == >=1.2.3 <1.3.0-0
	      ret = `>=${M}.${m}.${p
	      } <${M}.${+m + 1}.0-0`;
	    }

	    debug('tilde return', ret);
	    return ret
	  })
	};

	// ^ --> * (any, kinda silly)
	// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
	// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
	// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
	// ^1.2.3 --> >=1.2.3 <2.0.0-0
	// ^1.2.0 --> >=1.2.0 <2.0.0-0
	// ^0.0.1 --> >=0.0.1 <0.0.2-0
	// ^0.1.0 --> >=0.1.0 <0.2.0-0
	const replaceCarets = (comp, options) => {
	  return comp
	    .trim()
	    .split(/\s+/)
	    .map((c) => replaceCaret(c, options))
	    .join(' ')
	};

	const replaceCaret = (comp, options) => {
	  debug('caret', comp, options);
	  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
	  const z = options.includePrerelease ? '-0' : '';
	  return comp.replace(r, (_, M, m, p, pr) => {
	    debug('caret', comp, _, M, m, p, pr);
	    let ret;

	    if (isX(M)) {
	      ret = '';
	    } else if (isX(m)) {
	      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
	    } else if (isX(p)) {
	      if (M === '0') {
	        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
	      } else {
	        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
	      }
	    } else if (pr) {
	      debug('replaceCaret pr', pr);
	      if (M === '0') {
	        if (m === '0') {
	          ret = `>=${M}.${m}.${p}-${pr
	          } <${M}.${m}.${+p + 1}-0`;
	        } else {
	          ret = `>=${M}.${m}.${p}-${pr
	          } <${M}.${+m + 1}.0-0`;
	        }
	      } else {
	        ret = `>=${M}.${m}.${p}-${pr
	        } <${+M + 1}.0.0-0`;
	      }
	    } else {
	      debug('no pr');
	      if (M === '0') {
	        if (m === '0') {
	          ret = `>=${M}.${m}.${p
	          }${z} <${M}.${m}.${+p + 1}-0`;
	        } else {
	          ret = `>=${M}.${m}.${p
	          }${z} <${M}.${+m + 1}.0-0`;
	        }
	      } else {
	        ret = `>=${M}.${m}.${p
	        } <${+M + 1}.0.0-0`;
	      }
	    }

	    debug('caret return', ret);
	    return ret
	  })
	};

	const replaceXRanges = (comp, options) => {
	  debug('replaceXRanges', comp, options);
	  return comp
	    .split(/\s+/)
	    .map((c) => replaceXRange(c, options))
	    .join(' ')
	};

	const replaceXRange = (comp, options) => {
	  comp = comp.trim();
	  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
	  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
	    debug('xRange', comp, ret, gtlt, M, m, p, pr);
	    const xM = isX(M);
	    const xm = xM || isX(m);
	    const xp = xm || isX(p);
	    const anyX = xp;

	    if (gtlt === '=' && anyX) {
	      gtlt = '';
	    }

	    // if we're including prereleases in the match, then we need
	    // to fix this to -0, the lowest possible prerelease value
	    pr = options.includePrerelease ? '-0' : '';

	    if (xM) {
	      if (gtlt === '>' || gtlt === '<') {
	        // nothing is allowed
	        ret = '<0.0.0-0';
	      } else {
	        // nothing is forbidden
	        ret = '*';
	      }
	    } else if (gtlt && anyX) {
	      // we know patch is an x, because we have any x at all.
	      // replace X with 0
	      if (xm) {
	        m = 0;
	      }
	      p = 0;

	      if (gtlt === '>') {
	        // >1 => >=2.0.0
	        // >1.2 => >=1.3.0
	        gtlt = '>=';
	        if (xm) {
	          M = +M + 1;
	          m = 0;
	          p = 0;
	        } else {
	          m = +m + 1;
	          p = 0;
	        }
	      } else if (gtlt === '<=') {
	        // <=0.7.x is actually <0.8.0, since any 0.7.x should
	        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
	        gtlt = '<';
	        if (xm) {
	          M = +M + 1;
	        } else {
	          m = +m + 1;
	        }
	      }

	      if (gtlt === '<') {
	        pr = '-0';
	      }

	      ret = `${gtlt + M}.${m}.${p}${pr}`;
	    } else if (xm) {
	      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
	    } else if (xp) {
	      ret = `>=${M}.${m}.0${pr
	      } <${M}.${+m + 1}.0-0`;
	    }

	    debug('xRange return', ret);

	    return ret
	  })
	};

	// Because * is AND-ed with everything else in the comparator,
	// and '' means "any version", just remove the *s entirely.
	const replaceStars = (comp, options) => {
	  debug('replaceStars', comp, options);
	  // Looseness is ignored here.  star is always as loose as it gets!
	  return comp
	    .trim()
	    .replace(re[t.STAR], '')
	};

	const replaceGTE0 = (comp, options) => {
	  debug('replaceGTE0', comp, options);
	  return comp
	    .trim()
	    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')
	};

	// This function is passed to string.replace(re[t.HYPHENRANGE])
	// M, m, patch, prerelease, build
	// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
	// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
	// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
	// TODO build?
	const hyphenReplace = incPr => ($0,
	  from, fM, fm, fp, fpr, fb,
	  to, tM, tm, tp, tpr) => {
	  if (isX(fM)) {
	    from = '';
	  } else if (isX(fm)) {
	    from = `>=${fM}.0.0${incPr ? '-0' : ''}`;
	  } else if (isX(fp)) {
	    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`;
	  } else if (fpr) {
	    from = `>=${from}`;
	  } else {
	    from = `>=${from}${incPr ? '-0' : ''}`;
	  }

	  if (isX(tM)) {
	    to = '';
	  } else if (isX(tm)) {
	    to = `<${+tM + 1}.0.0-0`;
	  } else if (isX(tp)) {
	    to = `<${tM}.${+tm + 1}.0-0`;
	  } else if (tpr) {
	    to = `<=${tM}.${tm}.${tp}-${tpr}`;
	  } else if (incPr) {
	    to = `<${tM}.${tm}.${+tp + 1}-0`;
	  } else {
	    to = `<=${to}`;
	  }

	  return `${from} ${to}`.trim()
	};

	const testSet = (set, version, options) => {
	  for (let i = 0; i < set.length; i++) {
	    if (!set[i].test(version)) {
	      return false
	    }
	  }

	  if (version.prerelease.length && !options.includePrerelease) {
	    // Find the set of versions that are allowed to have prereleases
	    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
	    // That should allow `1.2.3-pr.2` to pass.
	    // However, `1.2.4-alpha.notready` should NOT be allowed,
	    // even though it's within the range set by the comparators.
	    for (let i = 0; i < set.length; i++) {
	      debug(set[i].semver);
	      if (set[i].semver === Comparator.ANY) {
	        continue
	      }

	      if (set[i].semver.prerelease.length > 0) {
	        const allowed = set[i].semver;
	        if (allowed.major === version.major &&
	            allowed.minor === version.minor &&
	            allowed.patch === version.patch) {
	          return true
	        }
	      }
	    }

	    // Version has a -pre, but it's not one of the ones we like.
	    return false
	  }

	  return true
	};
	return range;
}

var comparator;
var hasRequiredComparator;

function requireComparator () {
	if (hasRequiredComparator) return comparator;
	hasRequiredComparator = 1;
	const ANY = Symbol('SemVer ANY');
	// hoisted class for cyclic dependency
	class Comparator {
	  static get ANY () {
	    return ANY
	  }

	  constructor (comp, options) {
	    options = parseOptions(options);

	    if (comp instanceof Comparator) {
	      if (comp.loose === !!options.loose) {
	        return comp
	      } else {
	        comp = comp.value;
	      }
	    }

	    comp = comp.trim().split(/\s+/).join(' ');
	    debug('comparator', comp, options);
	    this.options = options;
	    this.loose = !!options.loose;
	    this.parse(comp);

	    if (this.semver === ANY) {
	      this.value = '';
	    } else {
	      this.value = this.operator + this.semver.version;
	    }

	    debug('comp', this);
	  }

	  parse (comp) {
	    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
	    const m = comp.match(r);

	    if (!m) {
	      throw new TypeError(`Invalid comparator: ${comp}`)
	    }

	    this.operator = m[1] !== undefined ? m[1] : '';
	    if (this.operator === '=') {
	      this.operator = '';
	    }

	    // if it literally is just '>' or '' then allow anything.
	    if (!m[2]) {
	      this.semver = ANY;
	    } else {
	      this.semver = new SemVer(m[2], this.options.loose);
	    }
	  }

	  toString () {
	    return this.value
	  }

	  test (version) {
	    debug('Comparator.test', version, this.options.loose);

	    if (this.semver === ANY || version === ANY) {
	      return true
	    }

	    if (typeof version === 'string') {
	      try {
	        version = new SemVer(version, this.options);
	      } catch (er) {
	        return false
	      }
	    }

	    return cmp(version, this.operator, this.semver, this.options)
	  }

	  intersects (comp, options) {
	    if (!(comp instanceof Comparator)) {
	      throw new TypeError('a Comparator is required')
	    }

	    if (this.operator === '') {
	      if (this.value === '') {
	        return true
	      }
	      return new Range(comp.value, options).test(this.value)
	    } else if (comp.operator === '') {
	      if (comp.value === '') {
	        return true
	      }
	      return new Range(this.value, options).test(comp.semver)
	    }

	    options = parseOptions(options);

	    // Special cases where nothing can possibly be lower
	    if (options.includePrerelease &&
	      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {
	      return false
	    }
	    if (!options.includePrerelease &&
	      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {
	      return false
	    }

	    // Same direction increasing (> or >=)
	    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {
	      return true
	    }
	    // Same direction decreasing (< or <=)
	    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {
	      return true
	    }
	    // same SemVer and both sides are inclusive (<= or >=)
	    if (
	      (this.semver.version === comp.semver.version) &&
	      this.operator.includes('=') && comp.operator.includes('=')) {
	      return true
	    }
	    // opposite directions less than
	    if (cmp(this.semver, '<', comp.semver, options) &&
	      this.operator.startsWith('>') && comp.operator.startsWith('<')) {
	      return true
	    }
	    // opposite directions greater than
	    if (cmp(this.semver, '>', comp.semver, options) &&
	      this.operator.startsWith('<') && comp.operator.startsWith('>')) {
	      return true
	    }
	    return false
	  }
	}

	comparator = Comparator;

	const parseOptions = parseOptions_1;
	const { safeRe: re, t } = reExports;
	const cmp = cmp_1;
	const debug = debug_1;
	const SemVer = semver$2;
	const Range = requireRange();
	return comparator;
}

const Range$9 = requireRange();
const satisfies$4 = (version, range, options) => {
  try {
    range = new Range$9(range, options);
  } catch (er) {
    return false
  }
  return range.test(version)
};
var satisfies_1 = satisfies$4;

const Range$8 = requireRange();

// Mostly just for testing and legacy API reasons
const toComparators$1 = (range, options) =>
  new Range$8(range, options).set
    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '));

var toComparators_1 = toComparators$1;

const SemVer$4 = semver$2;
const Range$7 = requireRange();

const maxSatisfying$1 = (versions, range, options) => {
  let max = null;
  let maxSV = null;
  let rangeObj = null;
  try {
    rangeObj = new Range$7(range, options);
  } catch (er) {
    return null
  }
  versions.forEach((v) => {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) {
        // compare(max, v, true)
        max = v;
        maxSV = new SemVer$4(max, options);
      }
    }
  });
  return max
};
var maxSatisfying_1 = maxSatisfying$1;

const SemVer$3 = semver$2;
const Range$6 = requireRange();
const minSatisfying$1 = (versions, range, options) => {
  let min = null;
  let minSV = null;
  let rangeObj = null;
  try {
    rangeObj = new Range$6(range, options);
  } catch (er) {
    return null
  }
  versions.forEach((v) => {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) {
        // compare(min, v, true)
        min = v;
        minSV = new SemVer$3(min, options);
      }
    }
  });
  return min
};
var minSatisfying_1 = minSatisfying$1;

const SemVer$2 = semver$2;
const Range$5 = requireRange();
const gt$2 = gt_1;

const minVersion$1 = (range, loose) => {
  range = new Range$5(range, loose);

  let minver = new SemVer$2('0.0.0');
  if (range.test(minver)) {
    return minver
  }

  minver = new SemVer$2('0.0.0-0');
  if (range.test(minver)) {
    return minver
  }

  minver = null;
  for (let i = 0; i < range.set.length; ++i) {
    const comparators = range.set[i];

    let setMin = null;
    comparators.forEach((comparator) => {
      // Clone to avoid manipulating the comparator's semver object.
      const compver = new SemVer$2(comparator.semver.version);
      switch (comparator.operator) {
        case '>':
          if (compver.prerelease.length === 0) {
            compver.patch++;
          } else {
            compver.prerelease.push(0);
          }
          compver.raw = compver.format();
          /* fallthrough */
        case '':
        case '>=':
          if (!setMin || gt$2(compver, setMin)) {
            setMin = compver;
          }
          break
        case '<':
        case '<=':
          /* Ignore maximum versions */
          break
        /* istanbul ignore next */
        default:
          throw new Error(`Unexpected operation: ${comparator.operator}`)
      }
    });
    if (setMin && (!minver || gt$2(minver, setMin))) {
      minver = setMin;
    }
  }

  if (minver && range.test(minver)) {
    return minver
  }

  return null
};
var minVersion_1 = minVersion$1;

const Range$4 = requireRange();
const validRange$1 = (range, options) => {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range$4(range, options).range || '*'
  } catch (er) {
    return null
  }
};
var valid$1 = validRange$1;

const SemVer$1 = semver$2;
const Comparator$2 = requireComparator();
const { ANY: ANY$1 } = Comparator$2;
const Range$3 = requireRange();
const satisfies$3 = satisfies_1;
const gt$1 = gt_1;
const lt$1 = lt_1;
const lte$1 = lte_1;
const gte$1 = gte_1;

const outside$3 = (version, range, hilo, options) => {
  version = new SemVer$1(version, options);
  range = new Range$3(range, options);

  let gtfn, ltefn, ltfn, comp, ecomp;
  switch (hilo) {
    case '>':
      gtfn = gt$1;
      ltefn = lte$1;
      ltfn = lt$1;
      comp = '>';
      ecomp = '>=';
      break
    case '<':
      gtfn = lt$1;
      ltefn = gte$1;
      ltfn = gt$1;
      comp = '<';
      ecomp = '<=';
      break
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"')
  }

  // If it satisfies the range it is not outside
  if (satisfies$3(version, range, options)) {
    return false
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (let i = 0; i < range.set.length; ++i) {
    const comparators = range.set[i];

    let high = null;
    let low = null;

    comparators.forEach((comparator) => {
      if (comparator.semver === ANY$1) {
        comparator = new Comparator$2('>=0.0.0');
      }
      high = high || comparator;
      low = low || comparator;
      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator;
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator;
      }
    });

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false
    }
  }
  return true
};

var outside_1 = outside$3;

// Determine if version is greater than all the versions possible in the range.
const outside$2 = outside_1;
const gtr$1 = (version, range, options) => outside$2(version, range, '>', options);
var gtr_1 = gtr$1;

const outside$1 = outside_1;
// Determine if version is less than all the versions possible in the range
const ltr$1 = (version, range, options) => outside$1(version, range, '<', options);
var ltr_1 = ltr$1;

const Range$2 = requireRange();
const intersects$1 = (r1, r2, options) => {
  r1 = new Range$2(r1, options);
  r2 = new Range$2(r2, options);
  return r1.intersects(r2, options)
};
var intersects_1 = intersects$1;

// given a set of versions and a range, create a "simplified" range
// that includes the same versions that the original range does
// If the original range is shorter than the simplified one, return that.
const satisfies$2 = satisfies_1;
const compare$2 = compare_1;
var simplify = (versions, range, options) => {
  const set = [];
  let first = null;
  let prev = null;
  const v = versions.sort((a, b) => compare$2(a, b, options));
  for (const version of v) {
    const included = satisfies$2(version, range, options);
    if (included) {
      prev = version;
      if (!first) {
        first = version;
      }
    } else {
      if (prev) {
        set.push([first, prev]);
      }
      prev = null;
      first = null;
    }
  }
  if (first) {
    set.push([first, null]);
  }

  const ranges = [];
  for (const [min, max] of set) {
    if (min === max) {
      ranges.push(min);
    } else if (!max && min === v[0]) {
      ranges.push('*');
    } else if (!max) {
      ranges.push(`>=${min}`);
    } else if (min === v[0]) {
      ranges.push(`<=${max}`);
    } else {
      ranges.push(`${min} - ${max}`);
    }
  }
  const simplified = ranges.join(' || ');
  const original = typeof range.raw === 'string' ? range.raw : String(range);
  return simplified.length < original.length ? simplified : range
};

const Range$1 = requireRange();
const Comparator$1 = requireComparator();
const { ANY } = Comparator$1;
const satisfies$1 = satisfies_1;
const compare$1 = compare_1;

// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
// - Every simple range `r1, r2, ...` is a null set, OR
// - Every simple range `r1, r2, ...` which is not a null set is a subset of
//   some `R1, R2, ...`
//
// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
// - If c is only the ANY comparator
//   - If C is only the ANY comparator, return true
//   - Else if in prerelease mode, return false
//   - else replace c with `[>=0.0.0]`
// - If C is only the ANY comparator
//   - if in prerelease mode, return true
//   - else replace C with `[>=0.0.0]`
// - Let EQ be the set of = comparators in c
// - If EQ is more than one, return true (null set)
// - Let GT be the highest > or >= comparator in c
// - Let LT be the lowest < or <= comparator in c
// - If GT and LT, and GT.semver > LT.semver, return true (null set)
// - If any C is a = range, and GT or LT are set, return false
// - If EQ
//   - If GT, and EQ does not satisfy GT, return true (null set)
//   - If LT, and EQ does not satisfy LT, return true (null set)
//   - If EQ satisfies every C, return true
//   - Else return false
// - If GT
//   - If GT.semver is lower than any > or >= comp in C, return false
//   - If GT is >=, and GT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the GT.semver tuple, return false
// - If LT
//   - If LT.semver is greater than any < or <= comp in C, return false
//   - If LT is <=, and LT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the LT.semver tuple, return false
// - Else return true

const subset$1 = (sub, dom, options = {}) => {
  if (sub === dom) {
    return true
  }

  sub = new Range$1(sub, options);
  dom = new Range$1(dom, options);
  let sawNonNull = false;

  OUTER: for (const simpleSub of sub.set) {
    for (const simpleDom of dom.set) {
      const isSub = simpleSubset(simpleSub, simpleDom, options);
      sawNonNull = sawNonNull || isSub !== null;
      if (isSub) {
        continue OUTER
      }
    }
    // the null set is a subset of everything, but null simple ranges in
    // a complex range should be ignored.  so if we saw a non-null range,
    // then we know this isn't a subset, but if EVERY simple range was null,
    // then it is a subset.
    if (sawNonNull) {
      return false
    }
  }
  return true
};

const minimumVersionWithPreRelease = [new Comparator$1('>=0.0.0-0')];
const minimumVersion = [new Comparator$1('>=0.0.0')];

const simpleSubset = (sub, dom, options) => {
  if (sub === dom) {
    return true
  }

  if (sub.length === 1 && sub[0].semver === ANY) {
    if (dom.length === 1 && dom[0].semver === ANY) {
      return true
    } else if (options.includePrerelease) {
      sub = minimumVersionWithPreRelease;
    } else {
      sub = minimumVersion;
    }
  }

  if (dom.length === 1 && dom[0].semver === ANY) {
    if (options.includePrerelease) {
      return true
    } else {
      dom = minimumVersion;
    }
  }

  const eqSet = new Set();
  let gt, lt;
  for (const c of sub) {
    if (c.operator === '>' || c.operator === '>=') {
      gt = higherGT(gt, c, options);
    } else if (c.operator === '<' || c.operator === '<=') {
      lt = lowerLT(lt, c, options);
    } else {
      eqSet.add(c.semver);
    }
  }

  if (eqSet.size > 1) {
    return null
  }

  let gtltComp;
  if (gt && lt) {
    gtltComp = compare$1(gt.semver, lt.semver, options);
    if (gtltComp > 0) {
      return null
    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {
      return null
    }
  }

  // will iterate one or zero times
  for (const eq of eqSet) {
    if (gt && !satisfies$1(eq, String(gt), options)) {
      return null
    }

    if (lt && !satisfies$1(eq, String(lt), options)) {
      return null
    }

    for (const c of dom) {
      if (!satisfies$1(eq, String(c), options)) {
        return false
      }
    }

    return true
  }

  let higher, lower;
  let hasDomLT, hasDomGT;
  // if the subset has a prerelease, we need a comparator in the superset
  // with the same tuple and a prerelease, or it's not a subset
  let needDomLTPre = lt &&
    !options.includePrerelease &&
    lt.semver.prerelease.length ? lt.semver : false;
  let needDomGTPre = gt &&
    !options.includePrerelease &&
    gt.semver.prerelease.length ? gt.semver : false;
  // exception: <1.2.3-0 is the same as <1.2.3
  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&
      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {
    needDomLTPre = false;
  }

  for (const c of dom) {
    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>=';
    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<=';
    if (gt) {
      if (needDomGTPre) {
        if (c.semver.prerelease && c.semver.prerelease.length &&
            c.semver.major === needDomGTPre.major &&
            c.semver.minor === needDomGTPre.minor &&
            c.semver.patch === needDomGTPre.patch) {
          needDomGTPre = false;
        }
      }
      if (c.operator === '>' || c.operator === '>=') {
        higher = higherGT(gt, c, options);
        if (higher === c && higher !== gt) {
          return false
        }
      } else if (gt.operator === '>=' && !satisfies$1(gt.semver, String(c), options)) {
        return false
      }
    }
    if (lt) {
      if (needDomLTPre) {
        if (c.semver.prerelease && c.semver.prerelease.length &&
            c.semver.major === needDomLTPre.major &&
            c.semver.minor === needDomLTPre.minor &&
            c.semver.patch === needDomLTPre.patch) {
          needDomLTPre = false;
        }
      }
      if (c.operator === '<' || c.operator === '<=') {
        lower = lowerLT(lt, c, options);
        if (lower === c && lower !== lt) {
          return false
        }
      } else if (lt.operator === '<=' && !satisfies$1(lt.semver, String(c), options)) {
        return false
      }
    }
    if (!c.operator && (lt || gt) && gtltComp !== 0) {
      return false
    }
  }

  // if there was a < or >, and nothing in the dom, then must be false
  // UNLESS it was limited by another range in the other direction.
  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
  if (gt && hasDomLT && !lt && gtltComp !== 0) {
    return false
  }

  if (lt && hasDomGT && !gt && gtltComp !== 0) {
    return false
  }

  // we needed a prerelease range in a specific tuple, but didn't get one
  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
  // because it includes prereleases in the 1.2.3 tuple
  if (needDomGTPre || needDomLTPre) {
    return false
  }

  return true
};

// >=1.2.3 is lower than >1.2.3
const higherGT = (a, b, options) => {
  if (!a) {
    return b
  }
  const comp = compare$1(a.semver, b.semver, options);
  return comp > 0 ? a
    : comp < 0 ? b
    : b.operator === '>' && a.operator === '>=' ? b
    : a
};

// <=1.2.3 is higher than <1.2.3
const lowerLT = (a, b, options) => {
  if (!a) {
    return b
  }
  const comp = compare$1(a.semver, b.semver, options);
  return comp < 0 ? a
    : comp > 0 ? b
    : b.operator === '<' && a.operator === '<=' ? b
    : a
};

var subset_1 = subset$1;

// just pre-load all the stuff that index.js lazily exports
const internalRe = reExports;
const constants = constants$1;
const SemVer = semver$2;
const identifiers = identifiers$1;
const parse = parse_1;
const valid = valid_1;
const clean = clean_1;
const inc = inc_1;
const diff = diff_1;
const major = major_1;
const minor = minor_1;
const patch = patch_1;
const prerelease = prerelease_1;
const compare = compare_1;
const rcompare = rcompare_1;
const compareLoose = compareLoose_1;
const compareBuild = compareBuild_1;
const sort = sort_1;
const rsort = rsort_1;
const gt = gt_1;
const lt = lt_1;
const eq = eq_1;
const neq = neq_1;
const gte = gte_1;
const lte = lte_1;
const cmp = cmp_1;
const coerce = coerce_1;
const Comparator = requireComparator();
const Range = requireRange();
const satisfies = satisfies_1;
const toComparators = toComparators_1;
const maxSatisfying = maxSatisfying_1;
const minSatisfying = minSatisfying_1;
const minVersion = minVersion_1;
const validRange = valid$1;
const outside = outside_1;
const gtr = gtr_1;
const ltr = ltr_1;
const intersects = intersects_1;
const simplifyRange = simplify;
const subset = subset_1;
var semver = {
  parse,
  valid,
  clean,
  inc,
  diff,
  major,
  minor,
  patch,
  prerelease,
  compare,
  rcompare,
  compareLoose,
  compareBuild,
  sort,
  rsort,
  gt,
  lt,
  eq,
  neq,
  gte,
  lte,
  cmp,
  coerce,
  Comparator,
  Range,
  satisfies,
  toComparators,
  maxSatisfying,
  minSatisfying,
  minVersion,
  validRange,
  outside,
  gtr,
  ltr,
  intersects,
  simplifyRange,
  subset,
  SemVer,
  re: internalRe.re,
  src: internalRe.src,
  tokens: internalRe.t,
  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
  RELEASE_TYPES: constants.RELEASE_TYPES,
  compareIdentifiers: identifiers.compareIdentifiers,
  rcompareIdentifiers: identifiers.rcompareIdentifiers,
};

var semver$1 = /*@__PURE__*/getDefaultExportFromCjs(semver);

/**
 * This module processes normalized release data to derive additional release information.
 * It extracts and standardizes version numbers, sorts releases using semantic versioning,
 * and generates unique short names for each release.
 */
/**
 * Extracts and standardizes the version number from a release string.
 * For example "Release 1.2.3" becomes "1.2.3".
 * If a wildcard "X" is present in the minor or patch version, it is replaced with "0" to standardize the format.
 * For example, "1.2.X" becomes "1.2.0".
 */
function partialReleaseName(release) {
    let match = release.match(/(?:\d+\.\d+\.[\dX]+)|(?:\d+\.[\dX]+)|(?:\d+)$/);
    if (match) {
        return match[0].replace(".X", ".0");
    }
}
function cleanedRelease(release) {
    let clean = partialReleaseName(release);
    if (clean) {
        if (clean.length === 1) {
            clean = clean + ".0.0";
        }
        if (clean.length === 3) {
            clean = clean + ".0";
        }
        if (semver$1.clean(clean)) {
            return clean;
        }
    }
}
/**
 * @typedef {{
 *   semver: Boolean,
 *   version: String | null,
 *   shortVersion: String | null,
 *   shortName: String
 * }} DerivedReleaseNames
 */
/**
 * @param {Array<import("../shared/types").NormalizedRelease>} normalizedReleases
 * @returns {DerivedRelease[]}
 */
function deriveReleases(normalizedReleases) {
    const semverNames = normalizedReleases.map((normalizedRelease) => {
        const semverReleaseName = cleanedRelease(normalizedRelease.name) || null;
        const version = semverReleaseName ? semver$1.clean(semverReleaseName) : null;
        const shortVersion = semverReleaseName
            ? partialReleaseName(normalizedRelease.name) ?? null
            : null;
        return {
            semver: !!semverReleaseName,
            version,
            shortVersion,
        };
    });
    const namesToShorten = semverNames.map(({ shortVersion }, i) => {
        return shortVersion || normalizedReleases[i].name;
    });
    const shortNames = uniqueTrailingNames(namesToShorten);
    return normalizedReleases.map((normalizedRelease, index) => ({
        ...normalizedRelease,
        names: {
            ...semverNames[index],
            shortName: shortNames[index],
        },
    }));
}

/**
 * Returns all releases from all issues
 * @param {Array<NormalizedIssue>} normalizedIssues
 * @param {Array<{ type: string }>} rollupTimingLevelsAndCalculations
 * @return {Array<NormalizedRelease>}
 */
function normalizeReleases(normalizedIssues, rollupTimingLevelsAndCalculations) {
    const releaseIndex = rollupTimingLevelsAndCalculations.findIndex((calc) => calc.type === "Release");
    if (releaseIndex === -1) {
        return [];
    }
    const followingCalc = rollupTimingLevelsAndCalculations[releaseIndex + 1];
    if (!followingCalc) {
        return [];
    }
    const followingType = followingCalc.type;
    const nameToRelease = {};
    for (let normalizedIssue of normalizedIssues) {
        if (normalizedIssue.type === followingType) {
            const releases = normalizedIssue.releases;
            for (let release of releases) {
                if (!nameToRelease[release.name]) {
                    nameToRelease[release.name] = release;
                }
            }
        }
    }
    return Object.values(nameToRelease);
}

function addPercentComplete(issuesOrReleases, rollupTimingLevelsAndCalculations) {
  const groupedIssues = groupIssuesByHierarchyLevelOrType(issuesOrReleases, rollupTimingLevelsAndCalculations);
  rollupTimingLevelsAndCalculations.map(rollupData => rollupData.calculation).reverse();
  const rolledUpDates = rollupPercentComplete(groupedIssues);
  const zipped = zipRollupDataOntoGroupedData(groupedIssues, rolledUpDates, "completionRollup");
  return zipped.flat();
}

/**
 * 
 * @param {Array<import("../rollup").IssuesOrReleases>} issuesOrReleases Starting from low to high
 * @param {Array<String>} methodNames Starting from low to high
 * @return {Array<Object>}
 */
function rollupPercentComplete(groupedHierarchy, methodNames, {
  getChildren
} = {}) {
  return rollupGroupedHierarchy(groupedHierarchy, {
    createMetadataForHierarchyLevel(hierarchyLevel) {
      return {
        // how many children on average
        childCounts: [],
        // an array of the total of the number of days of work. Used to calculate the average
        totalDaysOfWorkForAverage: [],
        // which items need their average set after the average is calculated
        needsAverageSet: [],
        // this will be set later
        averageTotalDays: null,
        averageChildCount: null
      };
    },
    finalizeMetadataForHierarchyLevel(metadata, rollupData) {
      let ave = average(metadata.totalDaysOfWorkForAverage) || 30;
      metadata.averageTotalDays = ave;

      //metadata.averageChildCount = average( metadata.childCounts )
      // set average on children that need it
      metadata.needsAverageSet.forEach(data => {
        data.totalWorkingDays = ave;
      });
    },
    createRollupDataFromParentAndChild(issueOrRelease, children, hierarchyLevel, metadata) {
      const methodName = /*methodNames[hierarchyLevel] ||*/"childrenFirstThenParent";
      const method = methods[methodName];
      return method(issueOrRelease, children, hierarchyLevel, metadata);
    }
  });
}
function emptyRollup() {
  return {
    completedWorkingDays: 0,
    totalWorkingDays: 0,
    userSpecifiedValues: false,
    get remainingWorkingDays() {
      return this.totalWorkingDays - this.completedWorkingDays;
    }
  };
}
function sumChildRollups(children) {
  const userSpecifiedValues = children.every(d => d.userSpecifiedValues);
  const totalDays = children.map(child => child.totalWorkingDays);
  const completedDays = children.map(child => child.completedWorkingDays);
  return {
    completedWorkingDays: sum(completedDays),
    totalWorkingDays: sum(totalDays),
    userSpecifiedValues: userSpecifiedValues,
    get remainingWorkingDays() {
      return this.totalWorkingDays - this.completedWorkingDays;
    }
  };
}
const methods = {
  parentFirstThenChildren,
  childrenOnly,
  childrenFirstThenParent,
  widestRange,
  parentOnly
};

/**
 * 
 * @param {import("../rollup").IssueOrRelease} parentIssueOrRelease 
 * @param {*} childrenRollups 
 * @returns 
 */
function parentFirstThenChildren(parentIssueOrRelease, childrenRollups, hierarchyLevel, metadata) {
  // if there is hard parent data, use it
  var data;
  if (parentIssueOrRelease?.derivedTiming?.totalDaysOfWork) {
    data = {
      completedWorkingDays: parentIssueOrRelease.derivedTiming.completedDaysOfWork,
      totalWorkingDays: parentIssueOrRelease.derivedTiming.totalDaysOfWork,
      userSpecifiedValues: true,
      get remainingWorkingDays() {
        return this.totalWorkingDays - this.completedWorkingDays;
      }
    };
    // make sure we can build an average from it 
    metadata.totalDaysOfWorkForAverage.push(data.totalWorkingDays);
    return data;
  }
  // if there is hard child data, use it
  else if (childrenRollups.length && childrenRollups.every(d => d.userSpecifiedValues)) {
    data = sumChildRollups(childrenRollups);
    metadata.totalDaysOfWorkForAverage.push(data.totalWorkingDays);
    return data;
  }
  // if there is weak children data, use it, but don't use it for other averages
  else if (childrenRollups.length) {
    data = sumChildRollups(childrenRollups);
    return data;
  }
  // if there are no children, add to get the uncertainty
  else {
    data = emptyRollup();
    metadata.needsAverageSet.push(data);
    return data;
  }
}
function childrenOnly(parentIssueOrRelease, childrenRollups) {
  return mergeStartAndDueData(childrenRollups);
}
function parentOnly(parentIssueOrRelease, childrenRollups) {
  return {
    ...getStartData(parentIssueOrRelease.derivedTiming),
    ...getDueData(parentIssueOrRelease.derivedTiming)
  };
}
function childrenFirstThenParent(parentIssueOrRelease, childrenRollups, hierarchyLevel, metadata) {
  var data;
  // if there is hard child data, use it
  if (childrenRollups.length && childrenRollups.every(d => d.userSpecifiedValues)) {
    data = sumChildRollups(childrenRollups);
    metadata.totalDaysOfWorkForAverage.push(data.totalWorkingDays);
    return data;
  }
  // if there is hard parent data, use it
  else if (parentIssueOrRelease?.derivedTiming?.totalDaysOfWork) {
    data = {
      completedWorkingDays: parentIssueOrRelease.derivedTiming.completedDaysOfWork,
      totalWorkingDays: parentIssueOrRelease.derivedTiming.totalDaysOfWork,
      userSpecifiedValues: true,
      get remainingWorkingDays() {
        return this.totalWorkingDays - this.completedWorkingDays;
      }
    };
    // make sure we can build an average from it 
    metadata.totalDaysOfWorkForAverage.push(data.totalWorkingDays);
    return data;
  }

  // if there is weak children data, use it, but don't use it for other averages
  else if (childrenRollups.length) {
    data = sumChildRollups(childrenRollups);
    return data;
  }
  // if there are no children, add to get the uncertainty
  else {
    data = emptyRollup();
    metadata.needsAverageSet.push(data);
    return data;
  }
}
function widestRange(parentIssueOrRelease, childrenRollups) {
  return mergeStartAndDueData([parentIssueOrRelease.derivedTiming, ...childrenRollups]);
}
function sum(arr) {
  return arr.reduce((partialSum, a) => partialSum + a, 0);
}
function average(arr) {
  return arr.length > 0 ? sum(arr) / arr.length : undefined;
}

/**
 * This module provides functions to roll up child statuses within a hierarchical structure.
 * It aggregates the status of each issue or release along with its child issues across different hierarchy levels.
 */
/**
 * @param {IssueOrRelease[][]} groupedHierarchy - The grouped hierarchy of issues or releases, from low to high levels.
 * @returns {RollupResponse} - The rolled-up child statuses for each hierarchy level.
 */
function rollupChildStatusesForGroupedHierarchy(groupedHierarchy) {
    return rollupGroupedHierarchy(groupedHierarchy, {
        createRollupDataFromParentAndChild(issueOrRelease, children) {
            const key = issueOrRelease.key;
            let status = null;
            if (isDerivedIssue(issueOrRelease)) {
                status = issueOrRelease.status;
            }
            return {
                self: { key, status },
                children: children.map((child) => child.self),
            };
        },
    });
}
/**
 * @param {IssueOrRelease[]} issuesOrReleases
 * @param {Array<{ type: string; hierarchyLevel?: number }>} rollupTimingLevelsAndCalculations
 * @returns {IssueOrRelease[]}
 */
function rollupChildStatuses(issuesOrReleases, rollupTimingLevelsAndCalculations) {
    const groupedIssues = groupIssuesByHierarchyLevelOrType(issuesOrReleases, rollupTimingLevelsAndCalculations);
    const rolledUpChildStatuses = rollupChildStatusesForGroupedHierarchy(groupedIssues);
    const zipped = zipRollupDataOntoGroupedData(groupedIssues, rolledUpChildStatuses, "childStatuses");
    return zipped.flat();
}

/**
 * This module provides functions to roll up warning issues within a hierarchical structure.
 * It identifies issues with a 'warning' label and aggregates them up through the hierarchy levels.
 **/
/**
 * @param {IssueOrRelease[][]} groupedHierarchy
 * @returns {RollupResponse}
 */
function rollupWarningIssuesForGroupedHierarchy(groupedHierarchy) {
    return rollupGroupedHierarchy(groupedHierarchy, {
        createRollupDataFromParentAndChild(issueOrRelease, children) {
            const warningIssues = children.flat(1);
            // releases don't have a status
            if (isDerivedIssue(issueOrRelease)) {
                const lowerCaseLabels = (issueOrRelease.labels || []).map((label) => label.toLowerCase());
                if (lowerCaseLabels.some((label) => label === "warning")) {
                    warningIssues.push(issueOrRelease);
                }
            }
            return warningIssues;
        },
    });
}
/**
 * @param {IssueOrRelease[]} issuesOrReleases
 * @param {Array<{ type: string; hierarchyLevel?: number }>} rollupTimingLevelsAndCalculations
 * @returns {IssueOrRelease[]}
 */
// these functions shouldn't be used eventually for performance ...
function rollupWarningIssues(issuesOrReleases, rollupTimingLevelsAndCalculations) {
    const groupedIssues = groupIssuesByHierarchyLevelOrType(issuesOrReleases, rollupTimingLevelsAndCalculations);
    const rolledUpWarnings = rollupWarningIssuesForGroupedHierarchy(groupedIssues);
    const zipped = zipRollupDataOntoGroupedData(groupedIssues, rolledUpWarnings, "warningIssues");
    return zipped.flat();
}

/**
 * @typedef {import("../rolledup/work-type/work-type").WorkTypeTimingReleaseOrIssue & {issue: import("../raw/rollback/rollback").RolledBackJiraIssue}} RolledBackWorkTypeTimingReleaseOrIssue
 */

/**
 * @typedef {import("../rolledup/work-type/work-type").WorkTypeTimingReleaseOrIssue & {issueLastPeriod: RolledBackWorkTypeTimingReleaseOrIssue}} IssueOrReleaseWithPreviousTiming
 */

/**
 * @param {derivedIssues} derivedIssues 
 * @param {*} configuration 
 * @param {*} when 
 * @return {IssueOrReleaseWithPreviousTiming}
 */
function rollupAndRollback(derivedIssues, configuration, rollupTimingLevelsAndCalculations, when) {
  // get old issues and prepare them
  const oldRawIssues = derivedIssuesToRawIssues(derivedIssues);
  const pastStatusRolledUp = rollbackNormalizeAndDeriveEverything(oldRawIssues, configuration, rollupTimingLevelsAndCalculations, when);

  // prepare current issues
  const currentStatusRolledUp = addRollups(derivedIssues, rollupTimingLevelsAndCalculations);
  const oldMap = {};
  for (let oldIssue of pastStatusRolledUp) {
    // TODO: use id in the future to handle issue keys being changed
    oldMap[oldIssue.key] = oldIssue;
  }
  // associate
  for (let newIssue of currentStatusRolledUp) {
    // as this function creates new stuff anyway ... maybe it's ok to mutate?
    newIssue.issueLastPeriod = oldMap[newIssue.key];
  }
  return currentStatusRolledUp;
}
function addRollups(derivedIssues, rollupTimingLevelsAndCalculations) {
  const normalizedReleases = normalizeReleases(derivedIssues, rollupTimingLevelsAndCalculations);
  const releases = deriveReleases(normalizedReleases);
  const reporting = addReportingHierarchy([...releases, ...derivedIssues], rollupTimingLevelsAndCalculations);
  const rolledUpDates = addRollupDates(reporting, rollupTimingLevelsAndCalculations);
  const rolledUpBlockers = rollupBlockedStatusIssues(rolledUpDates, rollupTimingLevelsAndCalculations);
  const rolledUpWarnings = rollupWarningIssues(rolledUpBlockers, rollupTimingLevelsAndCalculations);
  const percentComplete = addPercentComplete(rolledUpWarnings, rollupTimingLevelsAndCalculations);
  const childStatuses = rollupChildStatuses(percentComplete, rollupTimingLevelsAndCalculations);
  return addWorkTypeDates(childStatuses, rollupTimingLevelsAndCalculations);
}
function rollbackNormalizeAndDeriveEverything(rawIssues, configuration, rollupTimingLevelsAndCalculations, when) {
  const pastRawIssues = rollbackIssues(rawIssues, when);
  //const dne = pastRawIssues.filter(ri => ri.rollbackMetadata.didNotExistBefore);

  const pastDerived = pastRawIssues.map(issue => {
    const normalized = normalizeIssue(issue, configuration);
    return deriveIssue(normalized, configuration);
  });
  return addRollups(pastDerived, rollupTimingLevelsAndCalculations);
}
function derivedIssuesToRawIssues(derivedIssues) {
  return derivedIssues.map(dI => dI.issue);
}

const workTypeRollups = ["children", ...workType];
const WIGGLE_ROOM = 0;
/**
 * 
 * @param {import("../../rolledup-and-rolledback/rollup-and-rollback").IssueOrReleaseWithPreviousTiming} issueWithPriorTiming 
 */
function prepareTimingData(issueWithPriorTiming) {
  const issueLastPeriod = issueWithPriorTiming.issueLastPeriod;
  const timingData = {
    rollup: {
      ...issueWithPriorTiming.rollupDates,
      lastPeriod: issueLastPeriod ? issueLastPeriod.rollupDates : null
    }
  };
  for (let workType of workTypeRollups) {
    const workRollup = issueWithPriorTiming.workTypeRollups.children[workType];
    if (workRollup) {
      timingData[workType] = {
        ...workRollup,
        lastPeriod: issueLastPeriod ? issueLastPeriod.workTypeRollups.children[workType] : null
      };
    } else {
      timingData[workType] = {
        issueKeys: []
      };
    }
  }
  return timingData;
}
function setWorkTypeStatus(workType, timingData, getIssuesByKeys) {
  // compare the parent status ... could be before design, after UAT and we should warn
  // what about blocked on any child?

  // if everything is complete, complete

  if (timingData.issueKeys.length && getIssuesByKeys(timingData.issueKeys).every(issue => issue.statusCategory === "done")) {
    timingData.status = "complete";
    timingData.statusFrom = {
      message: "Everything is done"
    };
  } else if (getIssuesByKeys(timingData.issueKeys).some(issue => issue.blockedStatusIssues.length)) {
    timingData.status = "blocked";
    timingData.statusFrom = {
      message: "This or a child is in a blocked status"
    };
  } else {
    Object.assign(timingData, timedStatus(timingData));
  }
}

/**
 * @param {import("../../rolledup-and-rolledback/rollup-and-rollback").IssueOrReleaseWithPreviousTiming} issueWithPriorTiming 
 */
function calculateStatuses(issueWithPriorTiming, getIssuesByKeys) {
  getIssuesByKeys(issueWithPriorTiming.reportingHierarchy.childKeys);
  const timingData = prepareTimingData(issueWithPriorTiming);

  // do the rollup
  if (issueWithPriorTiming.statusCategory === "done") {
    timingData.rollup.status = "complete";
    // we should check all the children ...
    timingData.rollup.statusFrom = {
      message: "Own status"
    };
  } else if (issueWithPriorTiming.workTypeRollups?.children?.issueKeys?.length && getIssuesByKeys(issueWithPriorTiming.workTypeRollups.children.issueKeys).every(issue => issue.statusCategory === "done")) {
    timingData.rollup.status = "complete";
    timingData.rollup.statusFrom = {
      message: "Children are all done, but the parent is not",
      warning: true
    };
  } else if (issueWithPriorTiming.blockedStatusIssues.length) {
    timingData.rollup.status = "blocked";
    timingData.rollup.statusFrom = {
      message: "This or a child is in a blocked status"
    };
  } else if (issueWithPriorTiming.warningIssues.length) {
    timingData.rollup.status = "warning";
    timingData.rollup.statusFrom = {
      message: "This or a child is in a warning status"
    };
  } else {
    Object.assign(timingData.rollup, timedStatus(timingData.rollup));
  }
  // do all the others 
  for (let workCategory of workType) {
    if (timingData[workCategory]) {
      setWorkTypeStatus(workCategory, timingData[workCategory], getIssuesByKeys);
    }
  }
  return timingData;
}
function makeGetIssuesByKeys(issues) {
  const map = new Map();
  for (const issue of issues) {
    map.set(issue.key, issue);
  }
  const getIssue = map.get.bind(map);
  return function getIssuesByKeys(issueKeys) {
    return issueKeys.map(getIssue);
  };
}

// The children "workTypeRollups" won't be right ... 
// this is really a "rollup" type thing ... 
// I think "workTypeRollups" probably shouldn't have children if we are only using it here ...
function calculateReportStatuses(issues) {
  const getIssuesByKeys = makeGetIssuesByKeys(issues);
  return issues.map(issue => {
    return {
      ...issue,
      rollupStatuses: calculateStatuses(issue, getIssuesByKeys)
    };
  });
}
function timedStatus(timedRecord) {
  if (!timedRecord.due) {
    return {
      status: "unknown",
      statusFrom: {
        message: "there is no timing data"
      }
    };
  }
  // if now is after the complete date
  // we force complete ... however, we probably want to warn if this isn't in the
  // completed state
  else if (+timedRecord.due < new Date()) {
    return {
      status: "complete",
      statusFrom: {
        message: "Issue is in the past, but not marked as done",
        warning: true
      }
    };
  } else if (timedRecord.lastPeriod && +timedRecord.due > WIGGLE_ROOM + +timedRecord.lastPeriod.due) {
    return {
      status: "behind",
      statusFrom: {
        message: "This was due earlier last period",
        warning: true
      }
    };
  } else if (timedRecord.lastPeriod && +timedRecord.due + WIGGLE_ROOM < +timedRecord.lastPeriod.due) {
    return {
      status: "ahead",
      statusFrom: {
        message: "Ahead of schedule compared to last time"
      }
    };
  } else if (!timedRecord.lastPeriod) {
    return {
      status: "new",
      statusFrom: {
        message: "Unable to find this last period"
      }
    };
  }
  if (timedRecord.start > new Date()) {
    return {
      status: "notstarted",
      statusFrom: {
        message: "This has not started yet"
      }
    };
  } else {
    return {
      status: "ontrack",
      statusFrom: {
        message: "This hasn't changed time yet"
      }
    };
  }
}

class TimelineReport extends canStacheElement {
  static view = `<div class="flex">
        <timeline-configuration
          class="border-gray-100 border-r border-nuetral-301 relative block bg-white shrink-0" 
          style="overflow-y: auto"
          isLoggedIn:from="this.loginComponent.isLoggedIn"
          jiraHelpers:from="this.jiraHelpers"
          teamConfigurationPromise:from="this.velocitiesConfiguration.teamConfigurationPromise"

          jql:to="this.jql"
          derivedIssuesRequestData:to="this.derivedIssuesRequestData"
          issueTimingCalculations:to="this.issueTimingCalculations"
          configuration:to="this.configuration"
          statuses:to="this.statuses"
          statusesToExclude:to="this.statusesToExclude"
          goBack:to="this.goBack"
          storage:from="this.storage"
          
          ></timeline-configuration>

      <div class="min-w-[1280px] fullish-vh pt-4 pl-4 pr-4 relative grow" on:click="this.goBack()">

        {{# not(this.loginComponent.isLoggedIn) }}

          <div class="p-4 mb-4 drop-shadow-md hide-on-fullscreen bg-yellow-300">
            <p>The following is a sample report. Learn more about it in the 
              "<a class="text-blue-400" href="https://www.bitovi.com/academy/learn-agile-program-management-with-jira/reporting.html">Agile Program Management with Jira</a>" 
              training. Click "Connect to Jira" to load your own data.</p>
            <p class="mt-2">Checkout the following sample reports:</p>
            <ul class="list-disc list-inside ml-2">
              <li><a class="text-blue-400" href="?primaryIssueType=Release&hideUnknownInitiatives=true&primaryReportType=due&secondaryReportType=status">Release end dates with initiative status</a></li>
              <li><a class="text-blue-400" href="?primaryIssueType=Release&hideUnknownInitiatives=true&secondaryReportType=breakdown">Release timeline with iniative work breakdown</a></li>
              <li><a class="text-blue-400" href="?primaryIssueType=Initiative&hideUnknownInitiatives=true&primaryReportType=start-due&primaryReportBreakdown=true">Ready and in-development initiative work breakdown</a></li>
            </ul>

          </div>
      {{/ not }}

          <div class="flex gap-1">
            
            <select-issue-type 
              primaryIssueType:to="this.primaryIssueType"
              secondaryIssueType:to="this.secondaryIssueType"
              derivedIssues:from="this.derivedIssues"
              jiraHelpers:from="this.jiraHelpers"></select-issue-type>

            <select-report-type 
              primaryReportType:to="this.primaryReportType"
              jiraHelpers:from="this.jiraHelpers"></select-report-type>
        
            <div class='flex-grow'>
              <label for="compareValue" class="${DROPDOWN_LABEL}">Compare to {{this.compareToTime.text}}</label>
              <input class="w-full-border-box h-8" 
                id="compareValue"
                type='range' 
                valueAsNumber:bind:on:input='this.timeSliderValue' 
                min="0" max="100"/>
            </div>
            <select-view-settings
              jiraHelpers:from="this.jiraHelpers"
              
              statusesToRemove:to="this.statusesToRemove"
              statusesToShow:to="this.statusesToShow"
              showOnlySemverReleases:to="this.showOnlySemverReleases"
              secondaryReportType:to="this.secondaryReportType"
              hideUnknownInitiatives:to="this.hideUnknownInitiatives"
              sortByDueDate:to="this.sortByDueDate"
              showPercentComplete:to="this.showPercentComplete"
              planningStatuses:to="this.planningStatuses"
              groupBy:to="this.groupBy"
              releasesToShow:to="this.releasesToShow"
              statusesToExclude:to="this.statusesToExclude"
              primaryReportBreakdown:to="this.primaryReportBreakdown"
              
              primaryReportType:from="this.primaryReportType"
              primaryIssueType:from="this.primaryIssueType"
              secondaryIssueType:from="this.secondaryIssueType"
              statuses:from="this.statuses"
              derivedIssues:from="this.derivedIssues"
              ></select-view-settings>
          </div>

          


          {{# and( not(this.jql), this.loginComponent.isLoggedIn  }}
            <div class="my-2 p-2 h-780 border-box block overflow-hidden color-bg-white">Configure a JQL in the sidebar on the left to get started.</div>
          {{ /and }}

          {{# and(this.derivedIssuesRequestData.issuesPromise.isResolved, this.primaryIssuesOrReleases.length) }}
            <div class="my-2   border-box block overflow-hidden color-bg-white">
            
              {{# or( eq(this.primaryReportType, "start-due"), eq(this.primaryReportType, "breakdown") ) }}
                <gantt-grid 
                    primaryIssuesOrReleases:from="this.primaryIssuesOrReleases"
                    allIssuesOrReleases:from="this.rolledupAndRolledBackIssuesAndReleases"
                    breakdown:from="this.primaryReportBreakdown"
                    showPercentComplete:from="this.showPercentComplete"
                    groupBy:from="this.groupBy"
                    primaryIssueType:from="this.primaryIssueType"
                    allDerivedIssues:from="this.derivedIssues"
                    ></gantt-grid>
              {{ else }}
                <gantt-timeline 
                  primaryIssuesOrReleases:from="this.primaryIssuesOrReleases"
                  allIssuesOrReleases:from="this.rolledupAndRolledBackIssuesAndReleases"></gantt-timeline>
              {{/ or }}

              {{# or( eq(this.secondaryReportType, "status"), eq(this.secondaryReportType, "breakdown") ) }}
                <status-report 
                  breakdown:from="eq(this.secondaryReportType, 'breakdown')"
                  planningIssues:from="this.planningIssues"
                  primaryIssuesOrReleases:from="this.primaryIssuesOrReleases"
                  allIssuesOrReleases:from="this.rolledupAndRolledBackIssuesAndReleases"></status-report>
              {{/ }}

              <div class='p-2'>
                <span class='color-text-and-bg-unknown p-2 inline-block'>Unknown</span>
                <span class='color-text-and-bg-new p-2 inline-block'>New</span>
                <span class='color-text-and-bg-notstarted p-2 inline-block'>Not Started</span>
                <span class='color-text-and-bg-ontrack p-2 inline-block'>On Track</span>
                <span class='color-text-and-bg-ahead p-2 inline-block'>Ahead</span>
                <span class='color-text-and-bg-behind p-2 inline-block'>Behind</span>
                <span class='color-text-and-bg-warning p-2 inline-block'>Warning</span>
                <span class='color-text-and-bg-blocked p-2 inline-block'>Blocked</span>
                <span class='color-text-and-bg-complete p-2 inline-block'>Complete</span>
              </div>
            </div>
          {{/ and }}
          {{# and(this.derivedIssuesRequestData.issuesPromise.isResolved, not(this.primaryIssuesOrReleases.length) ) }}
            <div class="my-2 p-2 h-780  border-box block overflow-hidden color-text-and-bg-warning">
              <p>{{this.primaryIssuesOrReleases.length}} issues of type {{this.primaryIssueType}}.</p>
              <p>Please check your JQL and the View Settings.</p>
            </div>
          {{/}}
          {{# and(this.jql, this.derivedIssuesRequestData.issuesPromise.isPending) }}
            <div class="my-2 p-2 h-780  border-box block overflow-hidden color-bg-white">
              <p>Loading ...<p>
              {{# if(this.derivedIssuesRequestData.progressData.issuesRequested)}}
                <p>Loaded {{this.derivedIssuesRequestData.progressData.issuesReceived}} of {{this.derivedIssuesRequestData.progressData.issuesRequested}} issues.</p>
              {{/ }}
            </div>
          {{/ and }}
          {{# if(this.derivedIssuesRequestData.issuesPromise.isRejected) }}
            <div class="my-2 p-2 h-780  border-box block overflow-hidden color-text-and-bg-blocked">
              <p>There was an error loading from Jira!</p>
              <p>Error message: {{this.derivedIssuesRequestData.issuesPromise.reason.errorMessages[0]}}</p>
              <p>Please check your JQL is correct!</p>
            </div>
          {{/ if }}
        </div>
      </div>
  `;
  static props = {
    // passed values
    timingCalculationMethods: canType_1_1_6_canType.Any,
    showingDebugPanel: {
      type: Boolean,
      default: false
    },
    timeSliderValue: {
      type: canType_1_1_6_canType.convert(Number),
      default: 25
    },
    // default params
    defaultSearch: canType_1_1_6_canType.Any,
    get compareToTime() {
      const SECOND = 1000;
      const MIN = 60 * SECOND;
      const HOUR = 60 * MIN;
      const DAY = 24 * HOUR;
      if (this.timeSliderValue === 0) {
        return {
          timePrior: 0,
          text: "now"
        };
      }
      if (this.timeSliderValue === 1) {
        return {
          timePrior: 30 * SECOND,
          text: "30 seconds ago"
        };
      }
      if (this.timeSliderValue === 2) {
        return {
          timePrior: MIN,
          text: "1 minute ago"
        };
      }
      if (this.timeSliderValue === 3) {
        return {
          timePrior: 5 * MIN,
          text: "5 minutes ago"
        };
      }
      if (this.timeSliderValue === 4) {
        return {
          timePrior: 10 * MIN,
          text: "10 minutes ago"
        };
      }
      if (this.timeSliderValue === 5) {
        return {
          timePrior: 30 * MIN,
          text: "30 minutes ago"
        };
      }
      if (this.timeSliderValue === 6) {
        return {
          timePrior: HOUR,
          text: "1 hour ago"
        };
      }
      if (this.timeSliderValue === 7) {
        return {
          timePrior: 3 * HOUR,
          text: "3 hours ago"
        };
      }
      if (this.timeSliderValue === 8) {
        return {
          timePrior: 6 * HOUR,
          text: "6 hours ago"
        };
      }
      if (this.timeSliderValue === 9) {
        return {
          timePrior: 12 * HOUR,
          text: "12 hours ago"
        };
      }
      if (this.timeSliderValue === 10) {
        return {
          timePrior: DAY,
          text: "1 day ago"
        };
      } else {
        const days = this.timeSliderValue - 10;
        return {
          timePrior: DAY * days,
          text: days + " days ago"
        };
      }
    },
    showingConfiguration: false,
    get issuesPromise() {
      return this.derivedIssuesRequestData?.issuesPromise;
    },
    derivedIssues: {
      async(resolve) {
        this.derivedIssuesRequestData?.issuesPromise.then(resolve);
      }
    },
    get filteredDerivedIssues() {
      if (this.derivedIssues) {
        if (this.statusesToExclude?.length) {
          return this.derivedIssues.filter(({
            status
          }) => !this.statusesToExclude.includes(status));
        } else {
          return this.derivedIssues;
        }
      }
    }
  };

  // hooks
  async connected() {
    updateFullishHeightSection();
  }
  get rollupTimingLevelsAndCalculations() {
    /*console.log("rolledupAndRollrollupTimingLevelsAndCalculationsedBackIssuesAndReleases",{
        primaryIssueType: this.primaryIssueType, 
        secondaryIssueType: this.secondaryIssueType,
        issueTimingCalculations: this.issueTimingCalculations
      } )*/

    function getIssueHierarchyUnderType(timingCalculations, type) {
      const index = timingCalculations.findIndex(calc => calc.type === type);
      return timingCalculations.slice(index);
    }
    if (this.primaryIssueType === "Release") {
      if (this.secondaryIssueType) {
        const secondary = getIssueHierarchyUnderType(this.issueTimingCalculations, this.secondaryIssueType);
        return [{
          type: "Release",
          hierarchyLevel: Infinity,
          calculation: "childrenOnly"
        }, ...secondary];
      }
    } else {
      return getIssueHierarchyUnderType(this.issueTimingCalculations, this.primaryIssueType);
    }
  }

  // this all the data pre-compiled
  get rolledupAndRolledBackIssuesAndReleases() {
    /*console.log("rolledupAndRolledBackIssuesAndReleases",{
        filteredDerivedIssues: this.filteredDerivedIssues, 
        rollupTimingLevelsAndCalculations: this.rollupTimingLevelsAndCalculations,
        configuration: this.configuration
      } )*/
    if (!this.filteredDerivedIssues || !this.rollupTimingLevelsAndCalculations || !this.configuration) {
      return [];
    }
    const rolledUp = rollupAndRollback(this.filteredDerivedIssues, this.configuration, this.rollupTimingLevelsAndCalculations, new Date(new Date().getTime() - this.compareToTime.timePrior));
    const statuses = calculateReportStatuses(rolledUp);
    return statuses;
  }
  get groupedParentDownHierarchy() {
    /*console.log("groupedParentDownHierarchy",{
        rolledupAndRolledBackIssuesAndReleases: this.rolledupAndRolledBackIssuesAndReleases, 
        rollupTimingLevelsAndCalculations: this.rollupTimingLevelsAndCalculations
      } )*/
    if (!this.rolledupAndRolledBackIssuesAndReleases || !this.rollupTimingLevelsAndCalculations) {
      return [];
    }
    const groupedHierarchy = groupIssuesByHierarchyLevelOrType(this.rolledupAndRolledBackIssuesAndReleases, this.rollupTimingLevelsAndCalculations);
    return groupedHierarchy.reverse();
  }
  get planningIssues() {
    if (!this.groupedParentDownHierarchy.length || !this?.planningStatuses?.length) {
      return [];
    }
    const planningSourceIssues = this.primaryIssueType === "Release" ? this.groupedParentDownHierarchy[1] : this.groupedParentDownHierarchy[0];
    return planningSourceIssues.filter(normalizedIssue => {
      return this.planningStatuses.includes(normalizedIssue.status);
    });
  }
  get primaryIssuesOrReleases() {
    //console.log("primaryIssuesOrReleases", this.groupedParentDownHierarchy.length)
    if (!this.groupedParentDownHierarchy.length) {
      return [];
    }
    const unfilteredPrimaryIssuesOrReleases = this.groupedParentDownHierarchy[0];
    const hideUnknownInitiatives = this.hideUnknownInitiatives;
    let statusesToRemove = this.statusesToRemove;
    let statusesToShow = this.statusesToShow;
    function startBeforeDue(initiative) {
      return initiative.rollupStatuses.rollup.start < initiative.rollupStatuses.rollup.due;
    }

    // lets remove stuff!
    const filtered = unfilteredPrimaryIssuesOrReleases.filter(issueOrRelease => {
      // check if it's a planning issues
      if (this?.planningStatuses?.length && this.primaryIssueType !== "Release" && this.planningStatuses.includes(issueOrRelease.status)) {
        return false;
      }
      if (this?.releasesToShow?.length) {
        // O(n^2)
        const releases = issueOrRelease.releases.map(r => r.name);
        if (releases.filter(release => this.releasesToShow.includes(release)).length === 0) {
          return false;
        }
      }
      if (this.showOnlySemverReleases && this.primaryIssueType === "Release" && !issueOrRelease.names.semver) {
        return false;
      }
      if (hideUnknownInitiatives && !startBeforeDue(issueOrRelease)) {
        return false;
      }
      if (this.primaryIssueType === "Release") {
        // releases don't have statuses, so we look at their children
        if (statusesToRemove && statusesToRemove.length) {
          if (issueOrRelease.childStatuses.children.every(({
            status
          }) => statusesToRemove.includes(status))) {
            return false;
          }
        }
        if (statusesToShow && statusesToShow.length) {
          // Keep if any valeue has a status to show
          if (!issueOrRelease.childStatuses.children.some(({
            status
          }) => statusesToShow.includes(status))) {
            return false;
          }
        }
      } else {
        if (statusesToShow && statusesToShow.length) {
          if (!statusesToShow.includes(issueOrRelease.status)) {
            return false;
          }
        }
        if (statusesToRemove && statusesToRemove.length) {
          if (statusesToRemove.includes(issueOrRelease.status)) {
            return false;
          }
        }
      }
      return true;
    });
    if (this.sortByDueDate) {
      return filtered.toSorted((i1, i2) => i1.rollupStatuses.rollup.due - i2.rollupStatuses.rollup.due);
    } else {
      return filtered;
    }
  }
  showDebug(open) {
    this.showingDebugPanel = open;
  }
}
customElements.define("timeline-report", TimelineReport);

// ontrack
// behind
// complete

function getElementPosition(el) {
  var rect = el.getBoundingClientRect();
  var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
  var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
  return {
    x: rect.left + scrollLeft,
    y: rect.top + scrollTop
  };
}
function updateFullishHeightSection() {
  const position = getElementPosition(document.querySelector(".fullish-vh"));
  document.documentElement.style.setProperty("--fullish-document-top", `${position.y}px`);
}
window.addEventListener("load", updateFullishHeightSection);
window.addEventListener("resize", updateFullishHeightSection);

function makeConnectLink(originalLink) {
  const linkUrl = new URL(originalLink);
  const appParams = new URLSearchParams(location.search);
  const linkParams = linkUrl.searchParams;
  return `${appParams.get('xdm_e')}/plugins/servlet/ac/bitovi.timeline-report/deeplink?${Array.from(linkParams).map(([name, value]) => `ac.${name}=${encodeURIComponent(value)}`).join('&')}`;
}
function makeLocalLink(originalLink) {
  const linkUrl = new URL(originalLink);
  linkUrl.host = location.host;
  linkUrl.port = location.port;
  linkUrl.protocol = location.protocol;
  return linkUrl.toString();
}

// mr-8 bg-neutral-201 hover:bg-neutral-301 rounded text-center inline-flex items-center

class SavedUrls extends canStacheElement {
  static view = `
        {{# if(this.canQuery) }}
            <button class="text-center inline-flex items-center mr-8 bg-neutral-201 hover:bg-neutral-301 rounded px-3 py-1 font-bitovipoppins"
                on:click="this.showSavedReports()">
                Saved Reports <svg class="w-2.5 h-2.5 ms-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
                </svg>
            </button>
        {{/ if}}

    `;
  static props = {
    jiraHelpers: canType_1_1_6_canType.Any,
    loginComponent: canType_1_1_6_canType.Any,
    get canQuery() {
      return this.jiraHelpers && this.loginComponent?.isLoggedIn;
    },
    get globalConfigurationsPromise() {
      if (this.canQuery) {
        return Promise.all([this.jiraHelpers.getServerInfo(), this.jiraHelpers.fetchJiraIssuesWithJQLWithNamedFields({
          jql: `summary ~ "Jira Timeline Report Configuration"`,
          fields: ["summary", "Description"]
        })]).then(([serverInfo, issues]) => {
          const first = issues.find(issue => issue.fields.Summary === "Jira Timeline Report Configuration");
          if (first) {
            const description = first.fields.Description.content;
            return {
              issue: first,
              links: findLinks(description),
              serverInfo
            };
          } else {
            return {
              links: []
            };
          }
        });
      } else {
        return Promise.resolve([]);
      }
    }
  };
  showSavedReports() {
    document.createElement("div");
    this.globalConfigurationsPromise.then(({
      links,
      issue,
      serverInfo
    }) => {
      // come back acround and fix this

      let html = ``;
      if (!issue) {
        html += `<a href="https://github.com/bitovi/jira-timeline-report/blob/main/docs/saved-reports.md" class="link block p-2">Create Saved Reports</a>`;
      } else {
        html += `
                <div class="divide-y divide-gray-100 p-2">
                    <div class="py-2">
                        ${links.map(link => {
          const isConnect = window.location.pathname.startsWith('/connect');
          const localHref = isConnect ? makeConnectLink(link.href) : makeLocalLink(link.href);
          return `
                                    <a href="${localHref}" class="${unescape(makeLocalLink(link.href)) === unescape(window.location) ? "" : "link"} block py-1" ${isConnect ? 'target="_top"' : ""}>${link.text}</a>
                                `;
        }).join("")}
                    </div>
                    <div class="py-2">
                        <a href="${serverInfo.baseUrl}/browse/${issue.key}" class="link block">Update Saved Reports</a>
                    </div>
                </div>`;
      }
      this.simpleTooltip.belowElementInScrollingContainer(this, html);
      // wait for this click event to clear the event queue

      setTimeout(() => {
        const handler = () => {
          this.simpleTooltip.leftElement();
          window.removeEventListener("click", handler);
        };
        window.addEventListener("click", handler);
      }, 13);
    });
  }
  connected() {
    const simpleTooltip = new SimpleTooltip();
    this.parentNode.append(simpleTooltip);
    this.simpleTooltip = simpleTooltip;
  }
}

/*
{
                                    "type": "text",
                                    "text": "Release End Dates and Initiative Status",
                                    "marks": [
                                        {
                                            "type": "link",
                                            "attrs": {
                                                "href": "http://localhost:3000/?primaryIssueType=Release&hideUnknownInitiatives=true&jql=issueType+in+(Initiative)+order+by+Rank&timingCalculations=Initiative%3AchildrenOnly%2CEpic%3AchildrenOnly%2CStory%3AwidestRange&loadChildren=true&primaryReportType=due&secondaryReportType=status"
                                            }
                                        },
                                        {
                                            "type": "strong"
                                        }
                                    ]
                                }
*/
function matchLink(fragment) {
  const isText = fragment.type === "text";
  if (!isText) {
    return false;
  }
  const marks = fragment?.marks || [];
  const link = marks.find(mark => mark.type === "link");
  const strong = marks.find(mark => mark.type === "strong");
  if (link) {
    return {
      text: fragment.text,
      href: link.attrs.href,
      default: !!strong
    };
  }
}
function findLinks(document) {
  return searchDocument$1(document, matchLink);
}
function searchDocument$1(document, matcher) {
  let matches = [];

  // Helper function to recursively search for matches
  function recurse(doc) {
    if (Array.isArray(doc)) {
      for (const item of doc) {
        recurse(item);
      }
    } else if (typeof doc === 'object' && doc !== null) {
      const result = matcher(doc);
      if (result) {
        matches.push(result); // Collect matching substructure
      } else {
        for (const key of Object.keys(doc)) {
          recurse(doc[key]);
        }
      }
    }
  }
  recurse(document); // Start the recursive search
  return matches; // Return all matching substructures
}
customElements.define("saved-urls", SavedUrls);

const resourceSelection = canStache_5_1_1_canStache(`<div class="p-2">
    {{# for(resource of this.resources) }}
        <button class="link block" on:click="this.setResource(resource)">{{resource.name}}</button>
    {{/ for }}
</div>`);
const pillClass = `text-center inline-flex items-center bg-neutral-201 hover:bg-neutral-301 rounded px-3 py-1`;
class SelectCloud extends canStacheElement {
  static view = `
        {{# if(this.alternateResources.isPending) }}
            <div class="${pillClass}"> ... </div>
        {{/ if }}
        {{# if(this.alternateResources.value.length)}}
            <button class="${pillClass} pl-2 hover:bg-gray-200"
                on:click="this.showResources()">
                {{# if(this.currentResource.value.name) }}<span>{{this.currentResource.value.name}}</span>{{/if}}
                <svg class="w-2.5 h-2.5 ms-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
                </svg>
            </button>
        {{/ if }}
        {{# and(not(this.alternateResources.value.length), this.currentResource.value.name) }}
            <div class="${pillClass} pl-2">
                {{this.currentResource.value.name}}
            </div>
        {{/and}}

    `;
  static props = {
    jiraHelpers: canType_1_1_6_canType.Any,
    loginComponent: canType_1_1_6_canType.Any,
    get canQuery() {
      return this.jiraHelpers && this.loginComponent?.isLoggedIn;
    },
    get accessibleResources() {
      if (this.canQuery) {
        return this.jiraHelpers.fetchAccessibleResources().then(resources => {
          const currentCloudId = localStorage.getItem("scopeId");
          return resources.map(resource => {
            return {
              ...resource,
              isCurrent: resource.id === currentCloudId
            };
          });
        });
      } else {
        return Promise.resolve([]);
      }
    },
    get currentResource() {
      return this.accessibleResources.then(resources => {
        return resources.find(r => r.isCurrent);
      });
    },
    get alternateResources() {
      return this.accessibleResources.then(resources => {
        return resources.filter(r => !r.isCurrent);
      });
    }
  };
  showResources() {
    document.createElement("div");
    this.alternateResources.then(resources => {
      // come back acround and fix this

      this.simpleTooltip.belowElementInScrollingContainer(this, resourceSelection({
        resources,
        setResource(resource) {
          localStorage.setItem("scopeId", resource.id);
          window.location.reload();
        }
      }));
      // wait for this click event to clear the event queue

      setTimeout(() => {
        const handler = () => {
          this.simpleTooltip.leftElement();
          window.removeEventListener("click", handler);
        };
        window.addEventListener("click", handler);
      }, 13);
    });
  }
  connected() {
    const simpleTooltip = new SimpleTooltip();
    this.parentNode.append(simpleTooltip);
    this.simpleTooltip = simpleTooltip;
  }
}
customElements.define("select-cloud", SelectCloud);

//import SimpleTooltip from "./simple-tooltip.js";

// ["velocity","tracks","sprint length"];

class TeamConfiguration extends canObservableObject {
  static getTeamConfiguration(jiraHelpers) {
    const getIssues = jiraHelpers.fetchJiraIssuesWithJQLWithNamedFields({
      jql: `summary ~ "Jira Auto Scheduler Configuration"`,
      fields: ["summary", "Description"]
    });
    return Promise.all([jiraHelpers.getServerInfo(), getIssues]).then(([serverInfo, issues]) => {
      const first = issues.find(issue => issue.fields.Summary === "Jira Auto Scheduler Configuration");
      if (first) {
        //const description = first.fields.Description.content,
        //    teamConfiguration = searchDocument(description, matchTeamTable);

        return new TeamConfiguration({
          issue: {
            ...first,
            url: serverInfo.baseUrl + "/browse/" + first.key
          }
        });
      } else {
        return new TeamConfiguration({
          issue: null
        });
      }
    });
  }
  static props = {
    temporaryData: {
      get default() {
        return new canObservableObject();
      }
    }
  };
  get _issueConfig() {
    if (this.issue) {
      const teamConfigurationArray = searchDocument(this.issue.fields.Description.content, matchTeamTable);
      if (teamConfigurationArray.length) {
        return normalizeTeamConfigurationArray(teamConfigurationArray[0]);
      }
    }
  }
  getVelocityForTeam(team) {
    if (this.temporaryData?.[team]?.velocity) {
      return this.temporaryData[team].velocity;
    } else if (this._issueConfig?.[team]?.velocity) {
      return this._issueConfig?.[team].velocity;
    } else {
      return 21;
    }
  }
  setVelocityForTeam(team, value) {
    if (this.temporaryData[team]) {
      this.temporaryData[team] = {
        ...this.temporaryData[team],
        velocity: value
      };
    } else {
      this.temporaryData[team] = {
        name: team,
        velocity: value
      };
    }
  }
  updateConfiguration() {
    console.log("TODO", this.temporaryData, this._issueConfig);
  }
  getDaysPerSprintForTeam(team) {
    return 10;
  }
  getTracksForTeam(team) {
    if (this.temporaryData?.[team]?.tracks) {
      return this.temporaryData[team].tracks;
    } else if (this._issueConfig?.[team]?.tracks) {
      return this._issueConfig?.[team].tracks;
    } else {
      return 1;
    }
  }
  addTrackForTeam(team) {
    const newTracks = this.getTracksForTeam(team) + 1;
    if (this.temporaryData[team]) {
      this.temporaryData[team] = {
        ...this.temporaryData[team],
        tracks: newTracks
      };
    } else {
      this.temporaryData[team] = {
        name: team,
        tracks: newTracks
      };
    }
  }
  removeTrackForTeam(team) {
    const newTracks = Math.max(this.getTracksForTeam(team) - 1, 1);
    if (this.temporaryData[team]) {
      this.temporaryData[team] = {
        ...this.temporaryData[team],
        tracks: newTracks
      };
    } else {
      this.temporaryData[team] = {
        name: team,
        tracks: newTracks
      };
    }
  }
}
const aliases = {
  "velocities": "velocity",
  "track": "tracks",
  "parallel epics": "tracks",
  "sprint length": "sprintLength",
  "sprint days": "sprintLength",
  "team": "name"
};
const propertiesToTurnIntoNumbers = ["velocity", "tracks", "sprint length"];
function normalizeTeamConfigurationArray(teamConfigurationArray) {
  const normalizedTeamData = {};
  for (let team of teamConfigurationArray) {
    const record = {};
    for (let prop in team) {
      let propToSet = prop in aliases ? aliases[prop] : prop;
      record[propToSet] = propertiesToTurnIntoNumbers.includes(propToSet) ? +team[prop] : team[prop];
    }
    normalizedTeamData[record.name] = record;
  }
  return normalizedTeamData;
}

// mr-8 bg-neutral-201 hover:bg-neutral-301 rounded px-3 py-1

class VelocitiesFromIssue extends canStacheElement {
  static view = `
        {{# if(this.canQuery) }}
            <div class="bg-neutral-201 hover:bg-neutral-301 rounded text-center inline-flex items-center">
                {{# if(this.teamConfigurationPromise.isPending) }}
                    <span class="px-2 py-1">Loading ...</span>
                {{/ }}

                {{# if(this.teamConfigurationPromise.isResolved) }}
                    
                    {{# if(this.teamConfigurationPromise.value.issue) }}

                        <a class="px-2 py-1" href="{{this.teamConfigurationPromise.value.issue.url}}" target="_blank">
                            Configuration Issue
                        </a>
                    {{ else }}
                            <a class="px-2 py-1" href="https://github.com/bitovi/jira-auto-scheduler/blob/main/docs/saved-configuration.md" target="_blank">
                            Create Configuration
                            </a>
                    {{/ if }}

                {{/ }}
            </div>
        {{/ if}}

    `;
  static props = {
    jiraHelpers: canType_1_1_6_canType.Any,
    isLoggedIn: Boolean,
    get canQuery() {
      return this.jiraHelpers && this.isLoggedIn;
    },
    get teamConfigurationPromise() {
      if (this.canQuery) {
        return TeamConfiguration.getTeamConfiguration(this.jiraHelpers);
      } else {
        return Promise.resolve(new TeamConfiguration({
          issue: null
        }));
      }
    }
  };
  /*
  showSavedReports(){
      const div = document.createElement("div");
      this.globalConfigurationsPromise.then(({links, issue,serverInfo}) => {
          // come back acround and fix this
          
          let html = ``
          if(!issue) {
              html += `<a href="https://github.com/bitovi/jira-timeline-report/blob/main/docs/saved-reports.md" class="link block">Create Saved Reports</a>`
          } else {
              html += `
              <div class="divide-y divide-gray-100">
                  <div class="py-2">
                      ${
                          links.map(link => {
                              return `
                                  <a href="${link.href}" class="${
                                      unescape(link.href) === unescape(window.location) ? "" : "link"
                                  } block py-1">${link.text}</a>
                              `
                          }).join("")
                      }
                  </div>
                  <div class="py-2">
                      <a href="${serverInfo.baseUrl}/browse/${issue.key}" class="link block">Update Saved Reports</a>
                  </div>
              </div>`;
          }
          
          
          this.simpleTooltip.belowElementInScrollingContainer(this, html );
          // wait for this click event to clear the event queue
          
          setTimeout(()=>{
              const handler = () => {
                  this.simpleTooltip.leftElement();
                  window.removeEventListener("click", handler);
              }
              window.addEventListener("click", handler);
          }, 13)
          
      })
      
      
      
  }
  */
  connected() {

    //const simpleTooltip = new SimpleTooltip();
    //this.parentNode.append(simpleTooltip);
    //this.simpleTooltip = simpleTooltip;
  }
}
function isParagraph(frag) {
  return frag.type === "paragraph";
}
function getTextFromParagraph(p) {
  return p.content.filter(text => text.type === "text").map(text => text.text);
}
function getTextFromWithinCell(cell) {
  return cell.content.filter(isParagraph).map(getTextFromParagraph).flat().join(" ");
}
function matchTeamTable(fragment) {
  if (fragment.type !== "table") {
    return false;
  }
  if (fragment.content[0].type !== "tableRow") {
    return false;
  }
  const headerRow = fragment.content[0];
  const headerTitles = headerRow.content.map(header => {
    // gets the first text from each header cell
    return getTextFromWithinCell(header).toLowerCase();
  });
  if (!headerTitles.includes("team")) {
    return false;
  }
  const records = [];

  // build objects from other table content 
  for (let i = 1; i < fragment.content.length; i++) {
    let row = fragment.content[i];
    let record = {};
    // loop
    for (let c = 0; c < row.content.length; c++) {
      let name = headerTitles[c];
      let cell = row.content[c];
      record[name] = getTextFromWithinCell(cell);
    }
    records.push(record);
  }
  return records;
}
function searchDocument(document, matcher) {
  let matches = [];

  // Helper function to recursively search for matches
  function recurse(doc) {
    if (Array.isArray(doc)) {
      for (const item of doc) {
        recurse(item);
      }
    } else if (typeof doc === 'object' && doc !== null) {
      const result = matcher(doc);
      if (result) {
        matches.push(result); // Collect matching substructure
      } else {
        for (const key of Object.keys(doc)) {
          recurse(doc[key]);
        }
      }
    }
  }
  recurse(document); // Start the recursive search
  return matches; // Return all matching substructures
}
customElements.define("velocities-from-issue", VelocitiesFromIssue);

class JiraLogin extends canStacheElement {
  static view = `
    {{# if(this.isPending) }}
        <button
            class="p-1 block pointer bg-orange-400 text-white rounded-lg font-bitovipoppins font-lg font-bold"
            style="border: none"
            data-testid="connecting-button">
            Connecting
        </button>
    {{ else }}
        {{# if(this.isLoggedIn) }}
            <button
                class="p-1 block pointer bg-orange-400 text-white rounded-lg font-bitovipoppins font-lg font-bold"
                style="border: none"
                data-testid="logout-button"
                on:click="this.logout()">
                Log Out
            </button>
        {{ else }}
            <button
                class="p-1 block pointer bg-orange-400 text-white rounded-lg font-bitovipoppins font-lg font-bold"
                style="border: none"
                data-testid="login-button"
                on:click="this.login()">
                Connect to Jira
            </button>
        {{/ if }}
    {{/ if }}
    {{# not(this.isResolved) }}

    {{/ not}}

   
    `;
  static props = {
    jiraHelpers: canType_1_1_6_canType.Any,
    isLoggedIn: false,
    isResolved: false,
    isPending: true
  };
  login() {
    this.isResolved = false;
    this.isPending = true;
    this.jiraHelpers.getAccessToken().then(() => {
      this.isLoggedIn = true;
      this.isResolved = true;
      this.isPending = false;
    });
  }
  logout() {
    this.isPending = true;
    this.jiraHelpers.clearAuthFromLocalStorage();
    this.isLoggedIn = false;
    this.isResolved = false;
    this.isPending = false;
  }
  connected() {
    // imperative is easier here ...

    // if someone had a token, always automatically log them in
    if (this.jiraHelpers.hasAccessToken()) {
      if (this.jiraHelpers.hasValidAccessToken()) {
        this.isLoggedIn = true;
        this.isResolved = true;
        this.isPending = false;
      } else {
        this.jiraHelpers.getAccessToken().then(() => {
          this.isLoggedIn = true;
          this.isResolved = true;
          this.isPending = false;
        });
      }
    } else {
      this.isLoggedIn = false;
      this.isResolved = true;
      this.isPending = false;
    }
  }
}
customElements.define("jira-login", JiraLogin);

function fetchFromLocalStorage(key) {
  return window.localStorage.getItem(key);
}
async function fetchJSON$1(url, options) {
  return fetch(url, options).then(responseToJSON);
}
function getHostedRequestHelper({
  JIRA_API_URL
}) {
  return function (urlFragment) {
    return new Promise(async (resolve, reject) => {
      try {
        const scopeIdForJira = fetchFromLocalStorage('scopeId');
        const accessToken = fetchFromLocalStorage('accessToken');
        let requestUrl;
        if (urlFragment.startsWith('https://')) {
          requestUrl = urlFragment;
        } else {
          requestUrl = `${JIRA_API_URL}/${scopeIdForJira}/rest/${urlFragment}`;
        }
        const result = await fetchJSON$1(requestUrl, {
          headers: {
            'Authorization': `Bearer ${accessToken}`
          }
        });
        resolve(result);
      } catch (ex) {
        reject(ex);
      }
    });
  };
}

async function fetchJSON(url, options) {
  return fetch(url, options).then(responseToJSON);
}
function getConnectRequestHelper() {
  return function (requestUrl) {
    return new Promise(async (resolve, reject) => {
      try {
        let result;
        if (requestUrl.startsWith("https://")) {
          result = await fetchJSON(requestUrl, {});
        } else {
          result = JSON.parse((await AP.request(`/rest/${requestUrl}`)).body);
        }
        resolve(result);
      } catch (ex) {
        reject(ex);
      }
    });
  };
}

function legacyPrimaryReportingTypeRoutingFix() {
  const primaryIssueType = new URL(window.location).searchParams.get("primaryReportType");
  if (primaryIssueType === "breakdown") {
    directlyReplaceUrlParam("primaryReportType", "start-due");
    directlyReplaceUrlParam("primaryReportBreakdown", "true");
    console.warn("fixing url");
  }
}
function legacyPrimaryIssueTypeRoutingFix() {
  const primaryIssueType = new URL(window.location).searchParams.get("primaryIssueType");
  if (primaryIssueType) {
    directlyReplaceUrlParam("primaryIssueType", "", "");
    directlyReplaceUrlParam("selectedIssueType", primaryIssueType, "");
    console.warn("fixing url");
  }
}
async function mainHelper(config, {
  host,
  createStorage
}) {
  await legacyPrimaryReportingTypeRoutingFix();
  await legacyPrimaryIssueTypeRoutingFix();
  canRoute_5_0_2_canRoute.start();
  console.log("Loaded version of the Timeline Reporter: " + config?.COMMIT_SHA);
  let requestHelper;
  if (host === "jira") {
    requestHelper = getConnectRequestHelper();
  } else {
    requestHelper = getHostedRequestHelper(config);
  }
  const jiraHelpers = JiraOIDCHelpers(config, requestHelper, host);
  const storage = createStorage(jiraHelpers);
  const loginComponent = new JiraLogin().initialize({
    jiraHelpers
  });
  const savedUrls = document.querySelector("saved-urls");
  savedUrls.loginComponent = loginComponent;
  savedUrls.jiraHelpers = jiraHelpers;
  const selectCloud = document.querySelector("select-cloud");
  if (selectCloud) {
    selectCloud.loginComponent = loginComponent;
    selectCloud.jiraHelpers = jiraHelpers;
  }
  const velocitiesConfiguration = document.querySelector("velocities-from-issue");
  velocitiesConfiguration.jiraHelpers = jiraHelpers;
  velocitiesConfiguration.isLoggedIn = loginComponent.isLoggedIn;
  loginComponent.listenTo("isLoggedIn", ({
    value
  }) => {
    velocitiesConfiguration.isLoggedIn = value;
  });
  const listener = ({
    value
  }) => {
    if (value) {
      loginComponent.off("isResolved", listener);
      mainElement.style.display = "none";
      const report = new TimelineReport().initialize({
        jiraHelpers,
        loginComponent,
        mode: "TEAMS",
        velocitiesConfiguration,
        storage
      });
      report.className = "block";
      document.body.append(report);
    }
  };
  loginComponent.on("isResolved", listener);
  login.appendChild(loginComponent);
  if (host === "jira") {
    login.style.display = "none";
  }
  return loginComponent;
}

const getConfigurationIssue = async (jiraHelpers) => {
    const configurationIssues = await jiraHelpers.fetchJiraIssuesWithJQLWithNamedFields({
        jql: `summary ~ "Jira Auto Scheduler Configuration"`,
        fields: ["summary", "Description"],
    });
    if (!configurationIssues.length) {
        return null;
    }
    return configurationIssues[0];
};
const createCodeBlock = (using) => {
    return {
        type: "codeBlock",
        attrs: { language: "json" },
        content: [{ type: "text", text: using ?? `{}` }],
    };
};
const createWebAppStorage = (jiraHelpers) => {
    return {
        storageContainerExists: async function () {
            const configurationIssue = await getConfigurationIssue(jiraHelpers);
            return !!configurationIssue;
        },
        get: async function (key) {
            const configurationIssue = await getConfigurationIssue(jiraHelpers);
            if (!configurationIssue) {
                throw new Error("[Storage Error]: get (web-app) needs a configuration issue");
            }
            let storeContent = configurationIssue.fields.Description.content.find((content) => content.type === "codeBlock");
            if (!storeContent) {
                storeContent = createCodeBlock();
            }
            const [stringifiedStore] = storeContent.content;
            const store = JSON.parse(stringifiedStore.text);
            return store[key];
        },
        update: async function (key, value) {
            const configurationIssue = await getConfigurationIssue(jiraHelpers);
            if (!configurationIssue) {
                throw new Error("[Storage Error]: update (web-app) needs a configuration issue");
            }
            let storeContent = configurationIssue.fields.Description.content.find((content) => content.type === "codeBlock");
            if (!storeContent) {
                storeContent = createCodeBlock();
            }
            const [stringifiedStore] = storeContent.content;
            const store = JSON.parse(stringifiedStore.text);
            jiraHelpers.editJiraIssueWithNamedFields(configurationIssue.id, {
                Description: {
                    ...configurationIssue.fields.Description,
                    content: [
                        ...configurationIssue.fields.Description.content.filter((content) => content.type !== "codeBlock"),
                        createCodeBlock(JSON.stringify({ ...store, [key]: value })),
                    ],
                },
            });
        },
        createStorageContainer: async function (key, value) {
            window.location.href = "https://github.com/bitovi/jira-auto-scheduler/blob/main/docs/saved-configuration.md";
        },
    };
};

async function main(config) {
  return mainHelper(config, {
    host: "hosted",
    createStorage: createWebAppStorage
  });
}

export { main as default };
//# sourceMappingURL=hosted-main.js.map
