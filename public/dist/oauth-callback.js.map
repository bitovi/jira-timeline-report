{"version":3,"file":"oauth-callback.js","sources":["../shared/response-to-json.ts","../jira-oidc-helpers.ts","../oauth-callback.js"],"sourcesContent":["import {\n  JsonResponse,\n} from './types.js';\n\nexport function responseToJSON(response: Response): Promise<JsonResponse> {\n\tif(!response.ok) {\n\t\treturn response.json().then((payload) => {\n\t\t\tconst err = new Error(\"HTTP status code: \" + response.status);\n\t\t\tObject.assign(err, payload);\n\t\t\tObject.assign(err, response);\n\t\t\tthrow err;\n\t\t})\n\t}\n\treturn response.json();\n}\n","import {\n  JsonResponse,\n  JtrEnv,\n  RequestHelperResponse\n} from './shared/types.js';\n\ninterface ResponseForFieldRequest extends RequestHelperResponse {\n  idMap: { [key: string]: string },\n  nameMap: { [key: string]: string }\n}\n\ntype FetchJiraIssuesParams = {\n  jql?: string;\n  fields?: string[];\n  startAt?: number;\n  maxResults?: number;\n\tlimit?: number;\n};\n\ntype JiraIssue = {\n  id: string;\n  key: string;\n  fields: Record<string, any>;\n\tchangelog?: any;\n};\n\ntype Issue = {\n\tkey: string;\n\tfields: Record<string, any>; // Adjust based on the actual structure of fields\n};\n\ntype Params = {\n\t[key: string]: any; // Adjust based on the actual structure of params\n\tfields?: string[];\n};\n\ntype ProgressData = {\n\tissuesRequested: number;\n\tissuesReceived: number;\n\tchangeLogsRequested: number;\n\tchangeLogsReceived: number;\n}\n\ntype Progress = {\n    data?: ProgressData;\n    (data: ProgressData): void;\n};\n\n\nimport { responseToJSON } from \"./shared/response-to-json.js\";\n\nconst CACHE_FETCH = false;\n\n// TODO move this into main module\ndeclare global {\n  interface Window {\n    env: JtrEnv;\n    localStorage: Storage;\n    location: Location;\n\t\tjiraHelpers: any;\n  }\n}\n\nfunction responseToText(response: Response): Promise<string> {\n\tif(!response.ok) {\n\t\treturn response.json().then((payload) => {\n\t\t\tconst err = new Error(\"HTTP status code: \" + response.status);\n\t\t\tObject.assign(err, payload);\n\t\t\tObject.assign(err, response);\n\t\t\tthrow err;\n\t\t})\n\t}\n\treturn response.text();\n}\n\nexport function nativeFetchJSON(url: string, options?: RequestInit): Promise<JsonResponse> {\n\treturn fetch(url, options).then(responseToJSON)\n}\n\nfunction chunkArray<T>(array: T[], size: number): T[][] {\n\tconst chunkedArr = [];\n\tfor (let i = 0; i < array.length; i += size) {\n\t  chunkedArr.push(array.slice(i, i + size));\n\t}\n\treturn chunkedArr;\n}\n\nexport default function (\n\t{\n\t\tJIRA_CLIENT_ID,\n\t\tJIRA_SCOPE,\n\t\tJIRA_CALLBACK_URL,\n\t\tJIRA_API_URL\n\t} = window.env,\n\trequestHelper: (urlFragment: string) => Promise<RequestHelperResponse>,\n\thost: 'jira' | 'hosted'\n) {\n\tlet fetchJSON = nativeFetchJSON;\n\tif (CACHE_FETCH) {\n\t\tfetchJSON = async function <T = any>(url: string, options?: RequestInit): Promise<T | JsonResponse> {\n\t\t\tconst cachedData = window.localStorage.getItem(url);\n\n\t\t\tif (cachedData !== null) {\n\t\t\t\treturn JSON.parse(cachedData) as T;\n\t\t\t} else {\n\t\t\t\tconst result = nativeFetchJSON(url, options);\n\t\t\t\tresult.then(async data => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\twindow.localStorage.setItem(url, JSON.stringify(data));\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.log(\"can't save\");\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\n\t}\n\n\tlet fieldsRequest: Promise<ResponseForFieldRequest>;\n\n\ttype RootMethod = (params: Params, progress: Progress) => Promise<Issue[]>;\n\n\tfunction makeDeepChildrenLoaderUsingNamedFields(rootMethod: RootMethod){\n\t\t\n\t\t// Makes child requests in batches of 40\n\t\t// \n\t\t// params - base params\n\t\t// sourceParentIssues - the source of parent issues\n\t\tfunction fetchChildrenResponses(params: Params, parentIssues: Issue[], progress: Progress): Promise<Issue[]>[] {\n\t\t\tconst issuesToQuery = chunkArray(parentIssues, 40);\n\t\n\t\t\tconst batchedResponses = issuesToQuery.map( issues => {\n\t\t\t\tconst keys = issues.map( issue => issue.key);\n\t\t\t\tconst jql = `parent in (${keys.join(\", \")}) ${params.childJQL || \"\"}`;\n\t\t\t\treturn rootMethod({\n\t\t\t\t\t...params,\n\t\t\t\t\tjql\n\t\t\t\t}, progress)\n\t\t\t});\n\t\t\t// this needs to be flattened\n\t\t\treturn batchedResponses;\n\t\t}\n\t\n\t\tasync function fetchDeepChildren(params: Params, sourceParentIssues: Issue[], progress: Progress): Promise<Issue[]> {\n\t\t\tconst batchedFirstResponses = fetchChildrenResponses(params, sourceParentIssues, progress);\n\t\n\t\t\tconst getChildren = (parentIssues: Issue[]) => {\n\t\t\t\tif(parentIssues.length) {\n\t\t\t\t\treturn fetchDeepChildren(params, parentIssues, progress).then(deepChildrenIssues => {\n\t\t\t\t\t\treturn parentIssues.concat(deepChildrenIssues);\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\treturn parentIssues\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst batchedIssueRequests = batchedFirstResponses.map( firstBatchPromise => {\n\t\t\t\treturn firstBatchPromise.then( getChildren )\n\t\t\t})\n\t\t\tconst allChildren = await Promise.all(batchedIssueRequests);\n\t\t\treturn allChildren.flat();\n\t\t}\n\t\n\t\treturn async function fetchAllDeepChildren(params: Params, progress: Progress = {} as any){\n\t\t\tconst fields = await fieldsRequest;\n\t\t\tconst newParams = {\n\t\t\t\t...params,\n\t\t\t\tfields: params.fields?.map(f => fields.nameMap[f] || f)\n\t\t\t}\n\t\n\t\t\tprogress.data = progress.data || {\n\t\t\t\tissuesRequested: 0,\n\t\t\t\tissuesReceived: 0,\n\t\t\t\tchangeLogsRequested: 0,\n\t\t\t\tchangeLogsReceived: 0\n\t\t\t};\n\t\t\tconst parentIssues = await rootMethod(newParams, progress);\n\t\n\t\t\t// go get the children\n\t\t\tconst allChildrenIssues = await fetchDeepChildren(newParams, parentIssues, progress);\n\t\t\tconst combined = parentIssues.concat(allChildrenIssues);\n\t\t\treturn combined.map((issue) => {\n\t\t\t\treturn {\n\t\t\t\t\t...issue,\n\t\t\t\t\tfields: mapIdsToNames(issue.fields, fields)\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tconst jiraHelpers: {\n\t\tsaveInformationToLocalStorage(parameters: Record<string, string>): void;\n\t\tclearAuthFromLocalStorage(): void;\n\t\tfetchFromLocalStorage(key: string): string | null;\n\t\tfetchAuthorizationCode(): void;\n\t\trefreshAccessToken(accessCode?: string): Promise<string | void>;\n\t\tfetchAccessTokenWithAuthCode(authCode: string): Promise<void>;\n\t\tfetchAccessibleResources(): ReturnType<typeof requestHelper>;\n\t\tfetchJiraSprint(sprintId: string): ReturnType<typeof requestHelper>;\n\t\tfetchJiraIssue(issueId: string): ReturnType<typeof requestHelper>;\n\t\teditJiraIssueWithNamedFields(issueId: string, fields: Record<string, any>): Promise<string>;\n\t\tfetchJiraIssuesWithJQL(params: FetchJiraIssuesParams): ReturnType<typeof requestHelper>;\n\t\tfetchJiraIssuesWithJQLWithNamedFields(params: FetchJiraIssuesParams): Promise<any[]>;\n\t\tfetchAllJiraIssuesWithJQL(params: FetchJiraIssuesParams): Promise<JiraIssue[]>;\n\t\tfetchAllJiraIssuesWithJQLUsingNamedFields(params: FetchJiraIssuesParams): Promise<any[]>;\n\t\tfetchJiraChangelog(issueIdOrKey: string, params: FetchJiraIssuesParams): ReturnType<typeof requestHelper>;\n\t\tisChangelogComplete(changelog: { histories: any[]; total: number; }): boolean;\n\t\tfetchRemainingChangelogsForIssues(\n\t\t\tissues: JiraIssue[],\n\t\t\tprogress?: {\n\t\t\t\tdata?: ProgressData;\n\t\t\t\t(data: ProgressData): void;\n\t\t\t}\n\t\t): Promise<JiraIssue[]>;\n\t\tfetchRemainingChangelogsForIssue(\n\t\t\tissueIdOrKey: string,\n\t\t\tmostRecentChangeLog: {\n\t\t\t\thistories: { id: string; change: string; }[];\n\t\t\t\tmaxResults: number;\n\t\t\t\ttotal: number;\n\t\t\t\tstartAt: number;\n\t\t\t}\n\t\t): Promise<{ id: string; change: string; }[]>;\n\t\tfetchAllJiraIssuesWithJQLAndFetchAllChangelog(\n\t\t\tparams: {\n\t\t\t\tlimit?: number;\n\t\t\t\tmaxResults?: number;\n\t\t\t\tstartAt?: number;\n\t\t\t\texpand?: string[];\n\t\t\t\t[key: string]: any;\n\t\t\t},\n\t\t\tprogress?: {\n\t\t\t\tdata?: ProgressData;\n\t\t\t\t(data: ProgressData): void;\n\t\t\t}\n\t\t): Promise<Issue[]>;\n\t\tfetchAllJiraIssuesWithJQLAndFetchAllChangelogUsingNamedFields(\n\t\t\tparams: { fields: string[]; [key: string]: any },\n\t\t\tprogress?: (data: ProgressData) => void\n\t\t): Promise<any[]>;\n\t\tfetchAllJiraIssuesAndDeepChildrenWithJQLAndFetchAllChangelogUsingNamedFields(\n\t\t\tparams: { fields: string[]; [key: string]: any },\n\t\t\tprogress?: {\n\t\t\t\tdata?: ProgressData;\n\t\t\t\t(data: ProgressData): void;\n\t\t\t}\n\t\t): Promise<any[]>;\n\t\tfetchChildrenResponses: (params: { [key: string]: any; fields: string[]; }, parentIssues: Issue[], progress?: ((data: ProgressData) => void) | undefined) => Promise<Issue[]>[];\n\t\tfetchDeepChildren(\n\t\t\tparams: { fields: string[]; [key: string]: any },\n\t\t\tsourceParentIssues: Issue[],\n\t\t\tprogress?: (data: ProgressData) => void\n\t\t): Promise<Issue[]>;\n\t\tfetchJiraFields(): Promise<RequestHelperResponse>;\n\t\tgetAccessToken(): Promise<string | void | null>;\n\t\thasAccessToken(): boolean;\n\t\thasValidAccessToken(): boolean;\n\t\t_cachedServerInfoPromise(): Promise<RequestHelperResponse>;\n\t\tgetServerInfo(): Promise<RequestHelperResponse>;\n\t\tfetchAllJiraIssuesAndDeepChildrenWithJQLUsingNamedFields?: (params: Params, progress?: Progress) => Promise<{ fields: { [key: string]: any; }; key: string; }[]>;\n\t} = {\n\t\tsaveInformationToLocalStorage: (parameters: Record<string, string>) => {\n\t\t\tconst objectKeys = Object.keys(parameters)\n\t\t\tfor (let key of objectKeys) {\n\t\t\t\twindow.localStorage.setItem(key, parameters[key]);\n\t\t\t}\n\t\t},\n\t\tclearAuthFromLocalStorage: function(){\n\t\t\twindow.localStorage.removeItem(\"accessToken\");\n\t\t\twindow.localStorage.removeItem(\"refreshToken\");\n\t\t\twindow.localStorage.removeItem(\"expiryTimestamp\");\n\t\t},\n\t\tfetchFromLocalStorage: (key: string) => {\n\t\t\treturn window.localStorage.getItem(key);\n\t\t},\n\t\tfetchAuthorizationCode: () => {\n\t\t\tconst url = `https://auth.atlassian.com/authorize?audience=api.atlassian.com&client_id=${JIRA_CLIENT_ID}&scope=${JIRA_SCOPE}&redirect_uri=${JIRA_CALLBACK_URL}&response_type=code&prompt=consent&state=${encodeURIComponent(encodeURIComponent(window.location.search))}`;\n\t\t\twindow.location.href = url;\n\t\t},\n\t\trefreshAccessToken: async (accessCode?: string): Promise<string | void> => {\n\t\t\ttry {\n\t\t\t\tconst response = await fetchJSON(`${window.env.JIRA_API_URL}/?code=${accessCode}`)\n\n\t\t\t\tconst {\n\t\t\t\t\taccessToken,\n\t\t\t\t\texpiryTimestamp,\n\t\t\t\t\trefreshToken,\n\t\t\t\t} = response.data;\n\t\t\t\tjiraHelpers.saveInformationToLocalStorage({\n\t\t\t\t\taccessToken,\n\t\t\t\t\trefreshToken,\n\t\t\t\t\texpiryTimestamp,\n\t\t\t\t});\n\t\t\t\treturn accessToken;\n\t\t\t} catch (error: unknown) {\n\t\t\t\tif (error instanceof Error) {\n\t\t\t\t\tconsole.error(error.message);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('An unknown error occurred');\n\t\t\t\t}\n\t\t\t\tjiraHelpers.clearAuthFromLocalStorage();\n\t\t\t\tjiraHelpers.fetchAuthorizationCode();\n\t\t\t}\n\t\t},\n\t\tfetchAccessTokenWithAuthCode: async (authCode: string): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tconst {\n\t\t\t\t\taccessToken,\n\t\t\t\t\texpiryTimestamp,\n\t\t\t\t\trefreshToken,\n\t\t\t\t\tscopeId\n\t\t\t\t} = await fetchJSON(`./access-token?code=${authCode}`)\n\n\t\t\t\tjiraHelpers.saveInformationToLocalStorage({\n\t\t\t\t\taccessToken,\n\t\t\t\t\trefreshToken,\n\t\t\t\t\texpiryTimestamp,\n\t\t\t\t\tscopeId,\n\t\t\t\t});\n\t\t\t\t//redirect to data page\n\t\t\t\tconst addOnQuery = new URL(window.location as unknown as string | URL).searchParams.get(\"state\");\n\t\t\t\tconst decoded = decodeURIComponent(addOnQuery as string);\n\t\t\t\tlocation.href = '/' + (addOnQuery || \"\");\n\t\t\t} catch (error) {\n\t\t\t\t//handle error properly.\n\t\t\t\tconsole.error(error);\n\t\t\t\t// location.href = '/error.html';\n\t\t\t}\n\t\t},\n\t\tfetchAccessibleResources: () => {\n\t\t\treturn requestHelper(`https://api.atlassian.com/oauth/token/accessible-resources`);\n\t\t},\n\t\tfetchJiraSprint: async (sprintId: string) => {\n\t\t\treturn requestHelper(`/agile/1.0/sprint/${sprintId}`);\n\t\t},\n\t\tfetchJiraIssue: async (issueId: string) => {\n\t\t\treturn requestHelper(`/api/3/issue/${issueId}`);\n\t\t},\n\t\teditJiraIssueWithNamedFields: async (issueId: string, fields: Record<string, any>) => {\n\t\t\tconst scopeIdForJira = jiraHelpers.fetchFromLocalStorage('scopeId');\n\t\t\tconst accessToken = jiraHelpers.fetchFromLocalStorage('accessToken');\n\n\t\t\tconst fieldMapping = await fieldsRequest;\n\t\t\t\n\t\t\tconst editBody = fieldsToEditBody(fields, fieldMapping);\n\t\t\t//const fieldsWithIds = mapNamesToIds(fields || {}, fieldMapping),\n\t\t\t//\tupdateWithIds = mapNamesToIds(update || {}, fieldMapping);\n\n\t\t\treturn fetch(\n\t\t\t\t`${JIRA_API_URL}/${scopeIdForJira}/rest/api/3/issue/${issueId}?` +\n\t\t\t\t\"\" /*new URLSearchParams(params)*/,\n\t\t\t\t{\n\t\t\t\t\tmethod: 'PUT',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Authorization': `Bearer ${accessToken}`,\n\t\t\t\t\t\t'Accept': 'application/json',\n    \t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify(editBody)\n\t\t\t\t}\n\t\t\t).then(responseToText);\n\t\t},\n\t\tfetchJiraIssuesWithJQL: function (params: FetchJiraIssuesParams) {\n\t\t\t// TODO - investigate this and convert params to proper type\n\t\t\treturn requestHelper(`/api/3/search?` + new URLSearchParams(params as any));\n\t\t},\n\t\tfetchJiraIssuesWithJQLWithNamedFields: async function (params: FetchJiraIssuesParams) {\n\t\t\tconst fields = await fieldsRequest;\n\t\t\tconst newParams = {\n\t\t\t\t...params,\n\t\t\t\tfields: params.fields?.map(f => fields.nameMap[f] || f)\n\t\t\t}\n\t\t\tconst response = await jiraHelpers.fetchJiraIssuesWithJQL(newParams);\n\n\n\t\t\treturn response.issues.map((issue: JiraIssue) => {\n\t\t\t\treturn {\n\t\t\t\t\t...issue,\n\t\t\t\t\tfields: mapIdsToNames(issue.fields, fields)\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tfetchAllJiraIssuesWithJQL: async function (params: FetchJiraIssuesParams) {\n\t\t\tconst { limit: limit, ...apiParams } = params;\n\t\t\tconst firstRequest = jiraHelpers.fetchJiraIssuesWithJQL({ maxResults: 100, ...apiParams });\n\t\t\tconst { issues, maxResults, total, startAt } = await firstRequest;\n\t\t\tconst requests = [firstRequest];\n\t\t\t\n\t\t\tconst limitOrTotal = Math.min(total, limit || Infinity);\n\t\t\tfor (let i = startAt + maxResults; i < limitOrTotal; i += maxResults) {\n\t\t\t\trequests.push(\n\t\t\t\t\tjiraHelpers.fetchJiraIssuesWithJQL({ maxResults: maxResults, startAt: i, ...apiParams })\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn Promise.all(requests).then(\n\t\t\t\t(responses) => {\n\t\t\t\t\treturn responses.map((response) => response.issues).flat();\n\t\t\t\t}\n\t\t\t)\n\t\t},\n\t\tfetchAllJiraIssuesWithJQLUsingNamedFields: async function(params: FetchJiraIssuesParams) {\n\t\t\tconst fields = await fieldsRequest;\n\n\t\t\tconst newParams = {\n\t\t\t\t...params,\n\t\t\t\tfields: params.fields?.map(f => fields.nameMap[f] || f)\n\t\t\t}\n\t\t\tconst response = await jiraHelpers.fetchAllJiraIssuesWithJQL(newParams);\n\n\t\t\treturn response.map((issue) => {\n\t\t\t\treturn {\n\t\t\t\t\t...issue,\n\t\t\t\t\tfields: mapIdsToNames(issue.fields, fields)\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tfetchJiraChangelog(issueIdOrKey: string, params: FetchJiraIssuesParams) {\n\t\t\t// TODO investigate this - convert params to proper type\n\t\t\treturn requestHelper(`/api/3/issue/${issueIdOrKey}/changelog?` + new URLSearchParams(params as any));\n\t\t},\n\t\tisChangelogComplete(changelog: { histories: any[]; total: number; }) {\n\t\t\treturn changelog.histories.length === changelog.total\n\t\t},\n\t\tfetchRemainingChangelogsForIssues(\n\t\t\tissues: JiraIssue[],\n\t\t\tprogress: {\n\t\t\t\tdata?: ProgressData;\n\t\t\t\t(data: ProgressData): void;\n\t\t\t} = () => {}\n\t\t) {\n\t\t\t// check for remainings\n\t\t\treturn Promise.all(issues.map(issue => {\n\t\t\t\tif (jiraHelpers.isChangelogComplete(issue.changelog)) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...issue,\n\t\t\t\t\t\tchangelog: issue.changelog.histories\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn jiraHelpers.fetchRemainingChangelogsForIssue(issue.key, issue.changelog).then((histories) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...issue,\n\t\t\t\t\t\t\tchangelog: issue.changelog.histories\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}))\n\t\t},\n\t\t// weirdly, this starts with the oldest, but we got the most recent\n\t\t// returns an array of histories objects\n\t\tfetchRemainingChangelogsForIssue(\n\t\t\tissueIdOrKey: string,\n\t\t\tmostRecentChangeLog: {\n\t\t\t\thistories: { id: string; change: string; }[];\n\t\t\t\tmaxResults: number;\n\t\t\t\ttotal: number;\n\t\t\t\tstartAt: number;\n\t\t\t}\n\t\t) {\n\t\t\tconst { histories, maxResults, total, startAt } = mostRecentChangeLog;\n\n\t\t\tconst requests = [];\n\t\t\trequests.push({ values: mostRecentChangeLog.histories });\n\t\t\tfor (let i = 0; i < total - maxResults; i += maxResults) {\n\t\t\t\trequests.push(\n\t\t\t\t\tjiraHelpers.fetchJiraChangelog(issueIdOrKey, {\n\t\t\t\t\t\tmaxResults: Math.min(maxResults, total - maxResults - i),\n\t\t\t\t\t\tstartAt: i,\n\t\t\t\t\t} as any).then((response) => {\n\t\t\t\t\t\t// the query above reverses the sort order, we fix that here\n\t\t\t\t\t\treturn { ...response, values: response.values.reverse() };\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\t// server sends back as \"values\", we match that\n\n\t\t\treturn Promise.all(requests).then(\n\t\t\t\t(responses) => {\n\t\t\t\t\treturn responses.map((response) => response.values).flat();\n\t\t\t\t}\n\t\t\t).then(function (response) {\n\t\t\t\treturn response;\n\t\t\t})\n\t\t},\n\t\tfetchAllJiraIssuesWithJQLAndFetchAllChangelog(\n\t\t\tparams: {\n\t\t\t\tlimit?: number;\n\t\t\t\tmaxResults?: number;\n\t\t\t\tstartAt?: number;\n\t\t\t\texpand?: string[];\n\t\t\t\t[key: string]: any;\n\t\t\t},\n\t\t\tprogress: {\n\t\t\t\tdata?: ProgressData;\n\t\t\t\t(data: ProgressData): void;\n\t\t\t} = () => {}\n\t\t): Promise<Issue[]> {\n\t\t\tconst { limit: limit, ...apiParams } = params;\n\n\t\t\t// a weak map would be better\n\t\t\tprogress.data = progress.data || {\n\t\t\t\tissuesRequested: 0,\n\t\t\t\tissuesReceived: 0,\n\t\t\t\tchangeLogsRequested: 0,\n\t\t\t\tchangeLogsReceived: 0\n\t\t\t} as ProgressData;\n\t\t\tfunction getRemainingChangeLogsForIssues(response: { issues: JiraIssue[] }) {\n\t\t\t\tif(progress.data) {\n\t\t\t\t\tObject.assign(progress.data as ProgressData, {\n\t\t\t\t\t\tissuesReceived: progress.data.issuesReceived + response.issues.length\n\t\t\t\t\t});\n\t\t\t\t\tprogress(progress.data);\n\t\t\t\t}\n\t\t\t\treturn jiraHelpers.fetchRemainingChangelogsForIssues(response.issues, progress)\n\t\t\t}\n\n\t\t\tconst firstRequest = jiraHelpers.fetchJiraIssuesWithJQL({ maxResults: 100, expand: [\"changelog\"], ...apiParams });\n\n\t\t\treturn firstRequest.then( ({ issues, maxResults, total, startAt }) => {\n\t\t\t\tif(progress.data) {\n\t\t\t\t\tObject.assign(progress.data as ProgressData, {\n\t\t\t\t\t\tissuesRequested: progress.data.issuesRequested+total,\n\t\t\t\t\t\tchangeLogsRequested: 0,\n\t\t\t\t\t\tchangeLogsReceived: 0\n\t\t\t\t\t});\n\t\t\t\t\tprogress(progress.data);\n\t\t\t\t}\n\n\t\t\t\tconst requests = [firstRequest.then(getRemainingChangeLogsForIssues)];\n\t\t\t\tconst limitOrTotal = Math.min(total, limit || Infinity);\n\n\t\t\t\tfor (let i = startAt + maxResults; i < limitOrTotal; i += maxResults) {\n\t\t\t\t\trequests.push(\n\t\t\t\t\t\tjiraHelpers.fetchJiraIssuesWithJQL({ maxResults: maxResults, startAt: i, ...apiParams })\n\t\t\t\t\t\t\t.then(getRemainingChangeLogsForIssues)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn Promise.all(requests).then(\n\t\t\t\t\t(responses) => {\n\t\t\t\t\t\treturn responses.flat();\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t});\n\n\t\t\t\n\t\t},\n\t\t// this could do each response incrementally, but I'm being lazy\n\t\tfetchAllJiraIssuesWithJQLAndFetchAllChangelogUsingNamedFields: async function (\n\t\t\tparams: { fields: string[]; [key: string]: any },\n\t\t\tprogress: (data: ProgressData) => void = () => {}\n\t\t) {\n\t\t\tconst fields = await fieldsRequest;\n\t\t\tconst newParams = {\n\t\t\t\t...params,\n\t\t\t\tfields: params.fields.map(f => fields.nameMap[f] || f)\n\t\t\t}\n\t\t\tconst response = await jiraHelpers.fetchAllJiraIssuesWithJQLAndFetchAllChangelog(newParams, progress);\n\n\n\t\t\treturn response.map((issue) => {\n\t\t\t\treturn {\n\t\t\t\t\t...issue,\n\t\t\t\t\tfields: mapIdsToNames(issue.fields, fields)\n\t\t\t\t}\n\t\t\t});\n\t\t\t// change the parms\n\t\t},\n\t\tfetchAllJiraIssuesAndDeepChildrenWithJQLAndFetchAllChangelogUsingNamedFields: async function (\n\t\t\tparams: { fields: string[]; [key: string]: any },\n\t\t\tprogress: {\n\t\t\t\tdata?: ProgressData;\n\t\t\t\t(data: ProgressData): void;\n\t\t\t} = () => {}\n\t\t) {\n\t\t\tconsole.warn(\"THIS METHOD SHOULD BE IMPOSSIBLE TO CALL\");\n\t\t\treturn Promise.resolve(null as any);\n\t\t},\n\t\tfetchChildrenResponses(\n\t\t\tparams: { fields: string[]; [key: string]: any },\n\t\t\tparentIssues: Issue[],\n\t\t\tprogress: (data: ProgressData) => void = () => {}\n\t\t) {\n\t\t\tconst issuesToQuery = chunkArray(parentIssues, 40);\n\t\t\tconst batchedResponses = issuesToQuery.map( issues => {\n\t\t\t\tconst keys = issues.map( issue => issue.key);\n\t\t\t\tconst jql = `parent in (${keys.join(\", \")})`;\n\t\t\t\treturn this.fetchAllJiraIssuesWithJQLAndFetchAllChangelog({\n\t\t\t\t\t...params,\n\t\t\t\t\tjql\n\t\t\t\t}, progress)\n\t\t\t});\n\t\t\t// this needs to be flattened\n\t\t\treturn batchedResponses;\n\t\t},\n\t\t// Makes child requests in batches of 40\n\t\t// \n\t\t// params - base params\n\t\t// sourceParentIssues - the source of parent issues\n\t\tfetchDeepChildren(\n\t\t\tparams: { fields: string[]; [key: string]: any },\n\t\t\tsourceParentIssues: Issue[],\n\t\t\tprogress: (data: ProgressData) => void = () => {}\n\t\t): Promise<Issue[]> {\n\t\t\tconst batchedFirstResponses = this.fetchChildrenResponses(params, sourceParentIssues, progress);\n\n\t\t\tconst getChildren = (parentIssues: Issue[]) => {\n\t\t\t\tif(parentIssues.length) {\n\t\t\t\t\treturn this.fetchDeepChildren(params, parentIssues, progress).then(deepChildrenIssues => {\n\t\t\t\t\t\treturn parentIssues.concat(deepChildrenIssues);\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\treturn parentIssues\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst batchedIssueRequests = batchedFirstResponses.map( firstBatchPromise => {\n\t\t\t\treturn firstBatchPromise.then( getChildren )\n\t\t\t})\n\t\t\treturn Promise.all( batchedIssueRequests).then( (allChildren)=> {\n\t\t\t\treturn allChildren.flat()\n\t\t\t});\n\t\t},\n\t\tfetchJiraFields() {\n\t\t\treturn requestHelper(`/api/3/field`);\n\t\t},\n\t\tgetAccessToken: async function () {\n\t\t\tif (!jiraHelpers.hasValidAccessToken()) {\n\t\t\t\tconst refreshToken = jiraHelpers.fetchFromLocalStorage(\"refreshToken\");\n\t\t\t\tif (!refreshToken) {\n\t\t\t\t\tjiraHelpers.fetchAuthorizationCode();\n\t\t\t\t} else {\n\t\t\t\t\treturn jiraHelpers.refreshAccessToken();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn jiraHelpers.fetchFromLocalStorage(\"accessToken\");\n\t\t\t}\n\t\t},\n\t\thasAccessToken: function(){\n\t\t\treturn !! jiraHelpers.fetchFromLocalStorage(\"accessToken\");\n\t\t},\n\t\thasValidAccessToken: function () {\n\t\t\tconst accessToken = jiraHelpers.fetchFromLocalStorage(\"accessToken\");\n\t\t\tlet expiryTimestamp = Number(jiraHelpers.fetchFromLocalStorage(\"expiryTimestamp\"));\n\t\t\tif (isNaN(expiryTimestamp)) {\n\t\t\t\texpiryTimestamp = 0;\n\t\t\t}\n\t\t\tconst currentTimestamp = Math.floor(new Date().getTime() / 1000.0);\n\t\t\treturn !((currentTimestamp > expiryTimestamp) || (!accessToken))\n\t\t},\n\t\t_cachedServerInfoPromise: function() {\n\t\t\treturn requestHelper('/api/3/serverInfo')\n\t\t},\n\t\tgetServerInfo(): Promise<RequestHelperResponse> {\n\t\t\t// if(this._cachedServerInfoPromise) {\n\t\t\t// \treturn this._cachedServerInfoPromise;\n\t\t\t// }\n\t\t\t// // https://your-domain.atlassian.net/rest/api/3/serverInfo\n\n\t\t\t// return this._cachedServerInfoPromise( = requestHelper('/api/3/serverInfo'));\n\t\t\treturn this._cachedServerInfoPromise();\n\t\t},\n\t}\n\n\tjiraHelpers.fetchAllJiraIssuesAndDeepChildrenWithJQLUsingNamedFields = \n\t\tmakeDeepChildrenLoaderUsingNamedFields(jiraHelpers.fetchAllJiraIssuesWithJQL.bind(jiraHelpers));\n\n\tjiraHelpers.fetchAllJiraIssuesAndDeepChildrenWithJQLAndFetchAllChangelogUsingNamedFields = \n\t\tmakeDeepChildrenLoaderUsingNamedFields(jiraHelpers.fetchAllJiraIssuesWithJQLAndFetchAllChangelog.bind(jiraHelpers));\n\n\n\t// commented out because it's not used\n\n\t// function makeFieldNameToIdMap(\n\t// \tfields: {\n\t// \t\tname: string;\n\t// \t\tid: string | number;\n\t// \t}[]\n\t// ) {\n\t// \tconst map = {};\n\t// \tfields.forEach((f) => {\n\t// \t\tmap[f.name] = f.id;\n\t// \t});\n\t// \treturn map;\n\t// }\n\n\tif (host === \"jira\" || jiraHelpers.hasValidAccessToken()) {\n\t\t// @ts-ignore\n\t\tfieldsRequest = jiraHelpers.fetchJiraFields().then((fields) => {\n\t\t\tconst nameMap = {};\n\t\t\tconst idMap = {};\n\t\t\t// @ts-ignore\n\t\t\tfields.forEach((f) => {\n\t\t\t\t// @ts-ignore\n\t\t\t\tidMap[f.id] = f.name;\n\t\t\t\t// @ts-ignore\n\t\t\t\tnameMap[f.name] = f.id;\n\t\t\t});\n\t\t\tconsole.log(nameMap);\n\n\t\t\treturn {\n\t\t\t\tlist: fields,\n\t\t\t\tnameMap: nameMap,\n\t\t\t\tidMap: idMap\n\t\t\t}\n\t\t});\n\t\t// @ts-ignore\n\t\tjiraHelpers.fieldsRequest = fieldsRequest;\n\t}\n\n\n\tfunction mapIdsToNames(\n\t\tobj: { [key: string]: any },\n\t\tfields: { idMap: { [key: string]: string } }\n\t) {\n\t\tconst mapped: { [key: string]: any } = {};\n\t\tfor (let prop in obj) {\n\t\t\tmapped[fields.idMap[prop] || prop] = obj[prop];\n\t\t}\n\t\treturn mapped;\n\t}\n\n\tfunction fieldsToEditBody(\n\t\tobj: Record<string, any>,\n\t\tfieldMapping: { nameMap: Record<string, string> }\n\t){\n\t\tconst editBody: {\n\t\t\tfields: Record<string, any>;\n\t\t\tupdate: Record<string, { set: any }[]>;\n\t\t} = {fields: {}, update: {}};\n\t\t\n\t\tfor (let prop in obj) {\n\t\t\t//if(prop === \"Story points\") {\n\t\t\t\t// 10016 -> story point estimate\n\t\t\t\t// 10034 -> story points\n\t\t\t\t//obj[prop] = \"\"+obj[prop];\n\t\t\t\t//mapped[\"customfield_10016\"] = obj[prop];\n\t\t\t\t//mapped[\"customfield_10034\"] = obj[prop];\n\t\t\t\t//mapped[\"Story points\"] = obj[prop];\n\t\t\t\t//mapped[\"storypoints\"] = obj[prop];\n\t\t\t\t//mapped[\"Story Points\"] = obj[prop];\n\t\t\t\t// 10016 -> story point estimate\n\t\t\t//} else {\n\t\t\t\t//mapped[fields.nameMap[prop] || prop] = obj[prop];\n\t\t\t//}\n\t\t\teditBody.update[fieldMapping.nameMap[prop] || prop] = [{set: obj[prop]}];\n\t\t}\n\t\treturn editBody;\n\t}\n\n\t// commented out because it's not used\n\n\t// function mapNamesToIds(obj, fields) {\n\t// \tconst mapped = {};\n\t// \tfor (let prop in obj) {\n\t// \t\t//if(prop === \"Story points\") {\n\t// \t\t\t// 10016 -> story point estimate\n\t// \t\t\t// 10034 -> story points\n\t// \t\t\t//obj[prop] = \"\"+obj[prop];\n\t// \t\t\t//mapped[\"customfield_10016\"] = obj[prop];\n\t// \t\t\t//mapped[\"customfield_10034\"] = obj[prop];\n\t// \t\t\t//mapped[\"Story points\"] = obj[prop];\n\t// \t\t\t//mapped[\"storypoints\"] = obj[prop];\n\t// \t\t\t//mapped[\"Story Points\"] = obj[prop];\n\t// \t\t\t// 10016 -> story point estimate\n\t// \t\t//} else {\n\t// \t\t\tmapped[fields.nameMap[prop] || prop] = obj[prop];\n\t// \t\t//}\n\t\t\t\n\t// \t}\n\t// }\n\t\n\twindow.jiraHelpers = jiraHelpers;\n\treturn jiraHelpers;\n}\n","import jiraOIDCHelpers from \"./jira-oidc-helpers.ts\";\n\nexport default function oauthCallback(environment) {\n\tconst jiraHelpers = jiraOIDCHelpers(environment);\n\n\tconst queryParams = new URLSearchParams(window.location.search)\n\tconst queryCode = queryParams.get('code')\n\tif (!queryCode) {\n\t\t//handle error properly to ensure good feedback\n\t\tmainElement.textContent = \"Invalid code provided\";\n\t\t// Todo\n\t} else {\n\t\tjiraHelpers.fetchAccessTokenWithAuthCode(queryCode);\n\t}\n\n}\n"],"names":[],"mappings":"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"}